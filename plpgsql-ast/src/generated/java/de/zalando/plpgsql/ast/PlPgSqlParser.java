// Generated from de/zalando/plpgsql/ast/PlPgSql.g4 by ANTLR 4.2.3
package de.zalando.plpgsql.ast;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlPgSqlParser extends Parser {
    static { RuntimeMetaData.checkVersion("4.2.3"); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, K_ALL=19, K_BEGIN=20, K_BY=21, K_CASE=22, K_CLOSE=23, 
		K_COLLATE=24, K_CONTINUE=25, K_DECLARE=26, K_DEFAULT=27, K_DIAGNOSTICS=28, 
		K_ELSE=29, K_ELSIF=30, K_END=31, K_EXCEPTION=32, K_EXECUTE=33, K_EXIT=34, 
		K_FETCH=35, K_FOR=36, K_FOREACH=37, K_FROM=38, K_GET=39, K_IF=40, K_IN=41, 
		K_INSERT=42, K_INTO=43, K_LOOP=44, K_MOVE=45, K_NOT=46, K_NULL=47, K_OPEN=48, 
		K_OR=49, K_PERFORM=50, K_RAISE=51, K_RETURN=52, K_STRICT=53, K_THEN=54, 
		K_TO=55, K_USING=56, K_WHEN=57, K_WHILE=58, K_ABSOLUTE=59, K_ALIAS=60, 
		K_ARRAY=61, K_BACKWARD=62, K_CONSTANT=63, K_CURRENT=64, K_CURSOR=65, K_DEBUG=66, 
		K_DETAIL=67, K_DUMP=68, K_ERRCODE=69, K_ERROR=70, K_FIRST=71, K_FORWARD=72, 
		K_HINT=73, K_INFO=74, K_IS=75, K_LAST=76, K_LOG=77, K_MESSAGE=78, K_MESSAGE_TEXT=79, 
		K_NEXT=80, K_NO=81, K_NOTICE=82, K_OPTION=83, K_PG_EXCEPTION_CONTEXT=84, 
		K_PG_EXCEPTION_DETAIL=85, K_PG_EXCEPTION_HINT=86, K_PRIOR=87, K_QUERY=88, 
		K_RELATIVE=89, K_RESULT_OID=90, K_RETURNED_SQLSTATE=91, K_REVERSE=92, 
		K_ROW_COUNT=93, K_ROWTYPE=94, K_SCROLL=95, K_SLICE=96, K_SQLSTATE=97, 
		K_STACKED=98, K_TYPE=99, K_USE_COLUMN=100, K_USE_VARIABLE=101, K_VARIABLE_CONFLICT=102, 
		K_WARNING=103, Op=104, ABORT_P=105, ABSOLUTE_P=106, ACCESS=107, ACTION=108, 
		ADD_P=109, ADMIN=110, AFTER=111, AGGREGATE=112, ALL=113, ALSO=114, ALTER=115, 
		ALWAYS=116, ANALYSE=117, ANALYZE=118, AND=119, ANY=120, ARRAY=121, AS=122, 
		ASC=123, ASSERTION=124, ASSIGNMENT=125, ASYMMETRIC=126, AT=127, ATTRIBUTE=128, 
		AUTHORIZATION=129, BACKWARD=130, BEFORE=131, BEGIN_P=132, BETWEEN=133, 
		BIGINT=134, BINARY=135, BIT=136, BOOLEAN_P=137, BOTH=138, BY=139, CACHE=140, 
		CALLED=141, CASCADE=142, CASCADED=143, CASE=144, CAST=145, CATALOG_P=146, 
		CHAIN=147, CHAR_P=148, CHARACTER=149, CHARACTERISTICS=150, CHECK=151, 
		CHECKPOINT=152, CLASS=153, CLOSE=154, CLUSTER=155, COALESCE=156, COLLATE=157, 
		COLLATION=158, COLUMN=159, COMMENT=160, COMMENTS=161, COMMIT=162, COMMITTED=163, 
		CONCURRENTLY=164, CONFIGURATION=165, CONNECTION=166, CONSTRAINT=167, CONSTRAINTS=168, 
		CONTENT_P=169, CONTINUE_P=170, CONVERSION_P=171, COPY=172, COST=173, CREATE=174, 
		CROSS=175, CSV=176, CURRENT_P=177, CURRENT_CATALOG=178, CURRENT_DATE=179, 
		CURRENT_ROLE=180, CURRENT_SCHEMA=181, CURRENT_TIME=182, CURRENT_TIMESTAMP=183, 
		CURRENT_USER=184, CURSOR=185, CYCLE=186, DATA_P=187, DATABASE=188, DAY_P=189, 
		DEALLOCATE=190, DEC=191, DECIMAL_P=192, DECLARE=193, DEFAULT=194, DEFAULTS=195, 
		DEFERRABLE=196, DEFERRED=197, DEFINER=198, DELETE_P=199, DELIMITER=200, 
		DELIMITERS=201, DESC=202, DICTIONARY=203, DISABLE_P=204, DISCARD=205, 
		DISTINCT=206, DO=207, DOCUMENT_P=208, DOMAIN_P=209, DOUBLE_P=210, DROP=211, 
		EACH=212, ELSE=213, ENABLE_P=214, ENCODING=215, ENCRYPTED=216, END_P=217, 
		ENUM_P=218, ESCAPE=219, EXCEPT=220, EXCLUDE=221, EXCLUDING=222, EXCLUSIVE=223, 
		EXECUTE=224, EXISTS=225, EXPLAIN=226, EXTENSION=227, EXTERNAL=228, EXTRACT=229, 
		FALSE_P=230, FAMILY=231, FETCH=232, FIRST_P=233, FLOAT_P=234, FOLLOWING=235, 
		FOR=236, FORCE=237, FOREIGN=238, FORWARD=239, FREEZE=240, FROM=241, FULL=242, 
		FUNCTION=243, FUNCTIONS=244, GLOBAL=245, GRANT=246, GRANTED=247, GREATEST=248, 
		GROUP_P=249, HANDLER=250, HAVING=251, HEADER_P=252, HOLD=253, HOUR_P=254, 
		IDENTITY_P=255, IF_P=256, ILIKE=257, IMMEDIATE=258, IMMUTABLE=259, IMPLICIT_P=260, 
		IN_P=261, INCLUDING=262, INCREMENT=263, INDEX=264, INDEXES=265, INHERIT=266, 
		INHERITS=267, INITIALLY=268, INLINE_P=269, INNER_P=270, INOUT=271, INPUT_P=272, 
		INSENSITIVE=273, INSERT=274, INSTEAD=275, INT_P=276, INTEGER=277, INTERSECT=278, 
		INTERVAL=279, INTO=280, INVOKER=281, IS=282, ISNULL=283, ISOLATION=284, 
		JOIN=285, KEY=286, LABEL=287, LANGUAGE=288, LARGE_P=289, LAST_P=290, LC_COLLATE_P=291, 
		LC_CTYPE_P=292, LEADING=293, LEAKPROOF=294, LEAST=295, LEFT=296, LEVEL=297, 
		LIKE=298, LIMIT=299, LISTEN=300, LOAD=301, LOCAL=302, LOCALTIME=303, LOCALTIMESTAMP=304, 
		LOCATION=305, LOCK_P=306, MAPPING=307, MATCH=308, MAXVALUE=309, MINUTE_P=310, 
		MINVALUE=311, MODE=312, MONTH_P=313, MOVE=314, NAME_P=315, NAMES=316, 
		NATIONAL=317, NATURAL=318, NCHAR=319, NEXT=320, NO=321, NONE=322, NOT=323, 
		NOTHING=324, NOTIFY=325, NOTNULL=326, NOWAIT=327, NULL_P=328, NULLIF=329, 
		NULLS_P=330, NUMERIC=331, OBJECT_P=332, OF=333, OFF=334, OFFSET=335, OIDS=336, 
		ON=337, ONLY=338, OPERATOR=339, OPTION=340, OPTIONS=341, OR=342, ORDER=343, 
		OUT_P=344, OUTER_P=345, OVER=346, OVERLAPS=347, OVERLAY=348, OWNED=349, 
		OWNER=350, PARSER=351, PARTIAL=352, PARTITION=353, PASSING=354, PASSWORD=355, 
		PLACING=356, PLANS=357, POSITION=358, PRECEDING=359, PRECISION=360, PREPARE=361, 
		PREPARED=362, PRESERVE=363, PRIMARY=364, PRIOR=365, PRIVILEGES=366, PROCEDURAL=367, 
		PROCEDURE=368, QUOTE=369, RANGE=370, READ=371, REAL=372, REASSIGN=373, 
		RECHECK=374, RECURSIVE=375, REF=376, REFERENCES=377, REINDEX=378, RELATIVE_P=379, 
		RELEASE=380, RENAME=381, REPEATABLE=382, REPLACE=383, REPLICA=384, RESET=385, 
		RESTART=386, RESTRICT=387, RETURNING=388, RETURNS=389, REVOKE=390, RIGHT=391, 
		ROLE=392, ROLLBACK=393, ROW=394, ROWS=395, RULE=396, SAVEPOINT=397, SCHEMA=398, 
		SCROLL=399, SEARCH=400, SECOND_P=401, SECURITY=402, SELECT=403, SEQUENCE=404, 
		SEQUENCES=405, SERIALIZABLE=406, SERVER=407, SESSION=408, SESSION_USER=409, 
		SET=410, SETOF=411, SHARE=412, SHOW=413, SIMILAR=414, SIMPLE=415, SMALLINT=416, 
		SNAPSHOT=417, SOME=418, STABLE=419, STANDALONE_P=420, START=421, STATEMENT=422, 
		STATISTICS=423, STDIN=424, STDOUT=425, STORAGE=426, STRICT_P=427, STRIP_P=428, 
		SUBSTRING=429, SYMMETRIC=430, SYSID=431, SYSTEM_P=432, TABLE=433, TABLES=434, 
		TABLESPACE=435, TEMP=436, TEMPLATE=437, TEMPORARY=438, TEXT_P=439, THEN=440, 
		TIME=441, TIMESTAMP=442, TO=443, TRAILING=444, TRANSACTION=445, TREAT=446, 
		TRIGGER=447, TRIM=448, TRUE_P=449, TRUNCATE=450, TRUSTED=451, TYPE_P=452, 
		TYPES_P=453, UNBOUNDED=454, UNCOMMITTED=455, UNENCRYPTED=456, UNION=457, 
		UNIQUE=458, UNKNOWN=459, UNLISTEN=460, UNLOGGED=461, UNTIL=462, UPDATE=463, 
		USER=464, USING=465, VACUUM=466, VALID=467, VALIDATE=468, VALIDATOR=469, 
		VALUE_P=470, VALUES=471, VARCHAR=472, VARIADIC=473, VARYING=474, VERBOSE=475, 
		VERSION_P=476, VIEW=477, VOLATILE=478, WHEN=479, WHERE=480, WHITESPACE_P=481, 
		WINDOW=482, WITH=483, WITHOUT=484, WORK=485, WRAPPER=486, WRITE=487, XML_P=488, 
		XMLATTRIBUTES=489, XMLCONCAT=490, XMLELEMENT=491, XMLEXISTS=492, XMLFOREST=493, 
		XMLPARSE=494, XMLPI=495, XMLROOT=496, XMLSERIALIZE=497, YEAR_P=498, YES_P=499, 
		ZONE=500, WS=501, SL_COMMENT=502, ML_COMMENT=503, SPACE=504, HORIZ_SPACE=505, 
		NEWLINE=506, NON_NEWLINE=507, WHITESPACE=508, SPECIAL_WHITESPACE=509, 
		HORIZ_WHITESPACE=510, WHITESPACE_WITH_NEWLINE=511, QUOTESTOP=512, QUOTECONTINUE=513, 
		QUOTEFAIL=514, XBSTART=515, XHSTART=516, XNSTART=517, XESTART=518, XEINSIDE=519, 
		XEESCAPE=520, XQSTART=521, XQDOUBLE=522, XQINSIDE=523, DOLQ_START=524, 
		DOLQ_CONT=525, DOLQDELIM=526, DOLQFAILED=527, DOLQINSIDE=528, DQUOTE=529, 
		XDSTART=530, XDSTOP=531, XDDOUBLE=532, XDINSIDE=533, UESCAPE=534, UESCAPEFAIL=535, 
		XCSTART=536, XCSTOP=537, XCINSIDE=538, DIGIT=539, IDENT_START=540, IDENT_CONT=541, 
		IDENTIFIER=542, TYPECAST=543, DOT_DOT=544, COLON_EQUALS=545, SELF=546, 
		OP_CHARS=547, DECIMAL=548, DECIMALFAIL=549, PARAM=550, OTHER=551, WITH_TIME=552, 
		NULLS_FIRST=553, NULLS_LAST=554, LESS_LESS=555, GREATER_GREATER=556, ICONST=557, 
		IDENT=558, FCONST=559, BCONST=560, XCONST=561, SCONST=562, ESC=563, T_WORD=564, 
		T_CWORD=565, T_DATUM=566;
	public static final String[] tokenNames = {
		"<INVALID>", "']'", "'%'", "'^'", "'.'", "')'", "','", "'+'", "'-'", "'*'", 
		"'['", "'('", "':'", "'<'", "'='", "';'", "'>'", "'/'", "'#'", "K_ALL", 
		"K_BEGIN", "K_BY", "K_CASE", "K_CLOSE", "K_COLLATE", "K_CONTINUE", "K_DECLARE", 
		"K_DEFAULT", "K_DIAGNOSTICS", "K_ELSE", "K_ELSIF", "K_END", "K_EXCEPTION", 
		"K_EXECUTE", "K_EXIT", "K_FETCH", "K_FOR", "K_FOREACH", "K_FROM", "K_GET", 
		"K_IF", "K_IN", "K_INSERT", "K_INTO", "K_LOOP", "K_MOVE", "K_NOT", "K_NULL", 
		"K_OPEN", "K_OR", "K_PERFORM", "K_RAISE", "K_RETURN", "K_STRICT", "K_THEN", 
		"K_TO", "K_USING", "K_WHEN", "K_WHILE", "K_ABSOLUTE", "K_ALIAS", "K_ARRAY", 
		"K_BACKWARD", "K_CONSTANT", "K_CURRENT", "K_CURSOR", "K_DEBUG", "K_DETAIL", 
		"K_DUMP", "K_ERRCODE", "K_ERROR", "K_FIRST", "K_FORWARD", "K_HINT", "K_INFO", 
		"K_IS", "K_LAST", "K_LOG", "K_MESSAGE", "K_MESSAGE_TEXT", "K_NEXT", "K_NO", 
		"K_NOTICE", "K_OPTION", "K_PG_EXCEPTION_CONTEXT", "K_PG_EXCEPTION_DETAIL", 
		"K_PG_EXCEPTION_HINT", "K_PRIOR", "K_QUERY", "K_RELATIVE", "K_RESULT_OID", 
		"K_RETURNED_SQLSTATE", "K_REVERSE", "K_ROW_COUNT", "K_ROWTYPE", "K_SCROLL", 
		"K_SLICE", "K_SQLSTATE", "K_STACKED", "K_TYPE", "K_USE_COLUMN", "K_USE_VARIABLE", 
		"K_VARIABLE_CONFLICT", "K_WARNING", "'TODO'", "ABORT_P", "ABSOLUTE_P", 
		"ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", 
		"ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", 
		"ASC", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTRIBUTE", "AUTHORIZATION", 
		"BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", 
		"BOOLEAN_P", "BOTH", "BY", "CACHE", "CALLED", "CASCADE", "CASCADED", "CASE", 
		"CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", 
		"CHECK", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", 
		"COLLATION", "COLUMN", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", 
		"CONFIGURATION", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE", "CROSS", "CSV", 
		"CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", 
		"DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", 
		"DELIMITER", "DELIMITERS", "DESC", "DICTIONARY", "DISABLE_P", "DISCARD", 
		"DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", 
		"ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", 
		"EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", 
		"EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FIRST_P", 
		"FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", 
		"FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", "GRANTED", 
		"GREATEST", "GROUP_P", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", 
		"IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", 
		"IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS", 
		"INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", 
		"INSERT", "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", 
		"INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", 
		"LARGE_P", "LAST_P", "LC_COLLATE_P", "LC_CTYPE_P", "LEADING", "LEAKPROOF", 
		"LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", 
		"LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "MAPPING", "MATCH", 
		"MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", 
		"NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT", "NO", "NONE", "NOT", 
		"NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", 
		"NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "ON", "ONLY", "OPERATOR", 
		"OPTION", "OPTIONS", "OR", "ORDER", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", 
		"OVERLAY", "OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
		"PASSWORD", "PLACING", "PLANS", "POSITION", "PRECEDING", "PRECISION", 
		"PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
		"PROCEDURE", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", 
		"RECURSIVE", "REF", "REFERENCES", "REINDEX", "RELATIVE_P", "RELEASE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", 
		"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROW", 
		"ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND_P", 
		"SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SESSION_USER", "SET", "SETOF", "SHARE", "SHOW", "SIMILAR", 
		"SIMPLE", "SMALLINT", "SNAPSHOT", "SOME", "STABLE", "STANDALONE_P", "START", 
		"STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
		"SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESPACE", 
		"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME", "TIMESTAMP", 
		"TO", "TRAILING", "TRANSACTION", "TREAT", "TRIGGER", "TRIM", "TRUE_P", 
		"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
		"UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
		"UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", 
		"VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", 
		"VIEW", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
		"XMLSERIALIZE", "YEAR_P", "YES_P", "ZONE", "WS", "SL_COMMENT", "ML_COMMENT", 
		"SPACE", "HORIZ_SPACE", "NEWLINE", "NON_NEWLINE", "WHITESPACE", "SPECIAL_WHITESPACE", 
		"HORIZ_WHITESPACE", "WHITESPACE_WITH_NEWLINE", "QUOTESTOP", "QUOTECONTINUE", 
		"QUOTEFAIL", "XBSTART", "XHSTART", "XNSTART", "XESTART", "XEINSIDE", "XEESCAPE", 
		"XQSTART", "XQDOUBLE", "XQINSIDE", "DOLQ_START", "DOLQ_CONT", "DOLQDELIM", 
		"DOLQFAILED", "DOLQINSIDE", "'\"'", "XDSTART", "XDSTOP", "XDDOUBLE", "XDINSIDE", 
		"UESCAPE", "UESCAPEFAIL", "XCSTART", "XCSTOP", "XCINSIDE", "DIGIT", "IDENT_START", 
		"IDENT_CONT", "IDENTIFIER", "'::'", "DOT_DOT", "':='", "SELF", "OP_CHARS", 
		"DECIMAL", "DECIMALFAIL", "PARAM", "OTHER", "WITH_TIME", "NULLS_FIRST", 
		"NULLS_LAST", "'<<'", "'>>'", "ICONST", "IDENT", "FCONST", "BCONST", "XCONST", 
		"SCONST", "ESC", "T_WORD", "T_CWORD", "T_DATUM"
	};
	public static final int
		RULE_pl_function = 0, RULE_comp_options = 1, RULE_comp_option = 2, RULE_opt_semi = 3, 
		RULE_pl_block = 4, RULE_decl_sect = 5, RULE_decl_start = 6, RULE_decl_stmts = 7, 
		RULE_decl_stmt = 8, RULE_decl_statement = 9, RULE_opt_scrollable = 10, 
		RULE_decl_cursor_query = 11, RULE_decl_cursor_args = 12, RULE_decl_cursor_arglist = 13, 
		RULE_decl_cursor_arg = 14, RULE_decl_is_for = 15, RULE_decl_aliasitem = 16, 
		RULE_decl_varname = 17, RULE_decl_const = 18, RULE_decl_datatype = 19, 
		RULE_decl_collate = 20, RULE_decl_notnull = 21, RULE_decl_defval = 22, 
		RULE_decl_defkey = 23, RULE_assign_operator = 24, RULE_proc_sect = 25, 
		RULE_proc_stmts = 26, RULE_proc_stmt = 27, RULE_stmt_perform = 28, RULE_stmt_assign = 29, 
		RULE_stmt_getdiag = 30, RULE_getdiag_area_opt = 31, RULE_getdiag_list = 32, 
		RULE_getdiag_list_item = 33, RULE_getdiag_item = 34, RULE_getdiag_target = 35, 
		RULE_assign_var = 36, RULE_stmt_if = 37, RULE_stmt_elsifs = 38, RULE_stmt_else = 39, 
		RULE_stmt_case = 40, RULE_opt_expr_until_when = 41, RULE_case_when_list = 42, 
		RULE_case_when = 43, RULE_opt_case_else = 44, RULE_stmt_loop = 45, RULE_stmt_while = 46, 
		RULE_stmt_for = 47, RULE_for_control = 48, RULE_for_variable = 49, RULE_stmt_foreach_a = 50, 
		RULE_foreach_slice = 51, RULE_stmt_exit = 52, RULE_exit_type = 53, RULE_stmt_return = 54, 
		RULE_stmt_raise = 55, RULE_loop_body = 56, RULE_stmt_execsql = 57, RULE_stmt_dynexecute = 58, 
		RULE_stmt_open = 59, RULE_stmt_fetch = 60, RULE_stmt_move = 61, RULE_opt_fetch_direction = 62, 
		RULE_stmt_close = 63, RULE_stmt_null = 64, RULE_cursor_variable = 65, 
		RULE_exception_sect = 66, RULE_proc_exceptions = 67, RULE_proc_exception = 68, 
		RULE_proc_conditions = 69, RULE_proc_condition = 70, RULE_expr_until_semi = 71, 
		RULE_expr_until_rightbracket = 72, RULE_expr_until_then = 73, RULE_expr_until_loop = 74, 
		RULE_opt_block_label = 75, RULE_opt_label = 76, RULE_opt_exitcond = 77, 
		RULE_any_identifier = 78, RULE_unreserved_keyword = 79, RULE_stmtblock = 80, 
		RULE_stmtmulti = 81, RULE_stmt = 82, RULE_createRoleStmt = 83, RULE_optRoleList = 84, 
		RULE_alteroptRoleList = 85, RULE_alterOptRoleElem = 86, RULE_createOptRoleElem = 87, 
		RULE_createUserStmt = 88, RULE_alterRoleStmt = 89, RULE_opt_in_database = 90, 
		RULE_alterRoleSetStmt = 91, RULE_alterUserStmt = 92, RULE_alterUserSetStmt = 93, 
		RULE_dropRoleStmt = 94, RULE_dropUserStmt = 95, RULE_createGroupStmt = 96, 
		RULE_alterGroupStmt = 97, RULE_add_drop = 98, RULE_dropGroupStmt = 99, 
		RULE_createSchemaStmt = 100, RULE_optSchemaName = 101, RULE_optSchemaEltList = 102, 
		RULE_schema_stmt = 103, RULE_variableSetStmt = 104, RULE_set_rest = 105, 
		RULE_set_rest_more = 106, RULE_var_name = 107, RULE_var_list = 108, RULE_var_value = 109, 
		RULE_iso_level = 110, RULE_opt_boolean_or_string = 111, RULE_zone_value = 112, 
		RULE_opt_encoding = 113, RULE_colId_or_Sconst = 114, RULE_variableResetStmt = 115, 
		RULE_setResetClause = 116, RULE_functionsetResetClause = 117, RULE_variableShowStmt = 118, 
		RULE_constraintsSetStmt = 119, RULE_constraints_set_list = 120, RULE_constraints_set_mode = 121, 
		RULE_checkPointStmt = 122, RULE_discardStmt = 123, RULE_alterTableStmt = 124, 
		RULE_alter_table_cmds = 125, RULE_alter_table_cmd = 126, RULE_alter_column_default = 127, 
		RULE_opt_drop_behavior = 128, RULE_opt_collate_clause = 129, RULE_alter_using = 130, 
		RULE_reloptions = 131, RULE_opt_reloptions = 132, RULE_reloption_list = 133, 
		RULE_reloption_elem = 134, RULE_alterCompositeTypeStmt = 135, RULE_alter_type_cmds = 136, 
		RULE_alter_type_cmd = 137, RULE_closePortalStmt = 138, RULE_copyStmt = 139, 
		RULE_copy_from = 140, RULE_copy_file_name = 141, RULE_copy_options = 142, 
		RULE_copy_opt_list = 143, RULE_copy_opt_item = 144, RULE_opt_binary = 145, 
		RULE_opt_oids = 146, RULE_copy_delimiter = 147, RULE_opt_using = 148, 
		RULE_copy_generic_opt_list = 149, RULE_copy_generic_opt_elem = 150, RULE_copy_generic_opt_arg = 151, 
		RULE_copy_generic_opt_arg_list = 152, RULE_copy_generic_opt_arg_list_item = 153, 
		RULE_createStmt = 154, RULE_optTemp = 155, RULE_opttableElementList = 156, 
		RULE_opttypedtableElementList = 157, RULE_tableElementList = 158, RULE_typedtableElementList = 159, 
		RULE_tableElement = 160, RULE_typedtableElement = 161, RULE_columnDef = 162, 
		RULE_columnOptions = 163, RULE_colQualList = 164, RULE_colConstraint = 165, 
		RULE_colconstraintElem = 166, RULE_constraintAttr = 167, RULE_tableLikeClause = 168, 
		RULE_tableLikeOptionList = 169, RULE_tableLikeOption = 170, RULE_tableConstraint = 171, 
		RULE_constraintElem = 172, RULE_opt_no_inherit = 173, RULE_opt_column_list = 174, 
		RULE_columnList = 175, RULE_columnElem = 176, RULE_key_match = 177, RULE_exclusionConstraintList = 178, 
		RULE_exclusionconstraintElem = 179, RULE_exclusionWhereClause = 180, RULE_key_actions = 181, 
		RULE_key_update = 182, RULE_key_delete = 183, RULE_key_action = 184, RULE_optInherit = 185, 
		RULE_optWith = 186, RULE_onCommitOption = 187, RULE_optTableSpace = 188, 
		RULE_optConsTableSpace = 189, RULE_existingIndex = 190, RULE_createAsStmt = 191, 
		RULE_create_as_target = 192, RULE_opt_with_data = 193, RULE_createSeqStmt = 194, 
		RULE_alterSeqStmt = 195, RULE_optseqOptList = 196, RULE_seqOptList = 197, 
		RULE_seqOptElem = 198, RULE_opt_by = 199, RULE_numericOnly = 200, RULE_numericOnly_list = 201, 
		RULE_createPLangStmt = 202, RULE_opt_trusted = 203, RULE_handler_name = 204, 
		RULE_opt_inline_handler = 205, RULE_validator_clause = 206, RULE_opt_validator = 207, 
		RULE_dropPLangStmt = 208, RULE_opt_procedural = 209, RULE_createTableSpaceStmt = 210, 
		RULE_optTableSpaceOwner = 211, RULE_dropTableSpaceStmt = 212, RULE_createExtensionStmt = 213, 
		RULE_create_extension_opt_list = 214, RULE_create_extension_opt_item = 215, 
		RULE_alterExtensionStmt = 216, RULE_alter_extension_opt_list = 217, RULE_alter_extension_opt_item = 218, 
		RULE_alterExtensionContentsStmt = 219, RULE_createFdwStmt = 220, RULE_fdw_option = 221, 
		RULE_fdw_options = 222, RULE_opt_fdw_options = 223, RULE_dropFdwStmt = 224, 
		RULE_alterFdwStmt = 225, RULE_create_generic_options = 226, RULE_generic_option_list = 227, 
		RULE_alter_generic_options = 228, RULE_alter_generic_option_list = 229, 
		RULE_alter_generic_option_elem = 230, RULE_generic_option_elem = 231, 
		RULE_generic_option_name = 232, RULE_generic_option_arg = 233, RULE_createForeignServerStmt = 234, 
		RULE_opt_type = 235, RULE_foreign_server_version = 236, RULE_opt_foreign_server_version = 237, 
		RULE_dropForeignServerStmt = 238, RULE_alterForeignServerStmt = 239, RULE_createForeignTableStmt = 240, 
		RULE_optforeigntableElementList = 241, RULE_foreigntableElementList = 242, 
		RULE_foreigntableElement = 243, RULE_alterForeignTableStmt = 244, RULE_createUserMappingStmt = 245, 
		RULE_auth_ident = 246, RULE_dropUserMappingStmt = 247, RULE_alterUserMappingStmt = 248, 
		RULE_createTrigStmt = 249, RULE_triggerActionTime = 250, RULE_triggerEvents = 251, 
		RULE_triggerOneEvent = 252, RULE_triggerForSpec = 253, RULE_triggerForOptEach = 254, 
		RULE_triggerForType = 255, RULE_triggerWhen = 256, RULE_triggerFuncArgs = 257, 
		RULE_triggerFuncArg = 258, RULE_optConstrFromTable = 259, RULE_constraintAttributeSpec = 260, 
		RULE_constraintAttributeElem = 261, RULE_dropTrigStmt = 262, RULE_createAssertStmt = 263, 
		RULE_dropAssertStmt = 264, RULE_defineStmt = 265, RULE_definition = 266, 
		RULE_def_list = 267, RULE_def_elem = 268, RULE_def_arg = 269, RULE_aggr_args = 270, 
		RULE_old_aggr_definition = 271, RULE_old_aggr_list = 272, RULE_old_aggr_elem = 273, 
		RULE_opt_enum_val_list = 274, RULE_enum_val_list = 275, RULE_alterEnumStmt = 276, 
		RULE_createOpClassStmt = 277, RULE_opclass_item_list = 278, RULE_opclass_item = 279, 
		RULE_opt_default = 280, RULE_opt_opfamily = 281, RULE_opclass_purpose = 282, 
		RULE_opt_recheck = 283, RULE_createOpFamilyStmt = 284, RULE_alterOpFamilyStmt = 285, 
		RULE_opclass_drop_list = 286, RULE_opclass_drop = 287, RULE_dropOpClassStmt = 288, 
		RULE_dropOpFamilyStmt = 289, RULE_dropOwnedStmt = 290, RULE_reassignOwnedStmt = 291, 
		RULE_dropStmt = 292, RULE_drop_type = 293, RULE_any_name_list = 294, RULE_any_name = 295, 
		RULE_attrs = 296, RULE_truncateStmt = 297, RULE_opt_restart_seqs = 298, 
		RULE_commentStmt = 299, RULE_comment_type = 300, RULE_comment_text = 301, 
		RULE_secLabelStmt = 302, RULE_opt_provider = 303, RULE_security_label_type = 304, 
		RULE_security_label = 305, RULE_fetchStmt = 306, RULE_fetch_args = 307, 
		RULE_from_in = 308, RULE_opt_from_in = 309, RULE_grantStmt = 310, RULE_revokeStmt = 311, 
		RULE_privileges = 312, RULE_privilege_list = 313, RULE_privilege = 314, 
		RULE_privilege_target = 315, RULE_grantee_list = 316, RULE_grantee = 317, 
		RULE_opt_grant_grant_option = 318, RULE_function_with_argtypes_list = 319, 
		RULE_function_with_argtypes = 320, RULE_grantRoleStmt = 321, RULE_revokeRoleStmt = 322, 
		RULE_opt_grant_admin_option = 323, RULE_opt_granted_by = 324, RULE_alterDefaultPrivilegesStmt = 325, 
		RULE_defACLOptionList = 326, RULE_defACLOption = 327, RULE_defACLAction = 328, 
		RULE_defacl_privilege_target = 329, RULE_indexStmt = 330, RULE_opt_unique = 331, 
		RULE_opt_concurrently = 332, RULE_opt_index_name = 333, RULE_access_method_clause = 334, 
		RULE_index_params = 335, RULE_index_elem = 336, RULE_opt_collate = 337, 
		RULE_opt_class = 338, RULE_opt_asc_desc = 339, RULE_opt_nulls_order = 340, 
		RULE_createFunctionStmt = 341, RULE_opt_or_replace = 342, RULE_func_args = 343, 
		RULE_func_args_list = 344, RULE_func_args_with_defaults = 345, RULE_func_args_with_defaults_list = 346, 
		RULE_func_arg = 347, RULE_arg_class = 348, RULE_param_name = 349, RULE_func_return = 350, 
		RULE_func_type = 351, RULE_func_arg_with_default = 352, RULE_createfunc_opt_list = 353, 
		RULE_common_func_opt_item = 354, RULE_createfunc_opt_item = 355, RULE_func_as = 356, 
		RULE_opt_definition = 357, RULE_table_func_column = 358, RULE_table_func_column_list = 359, 
		RULE_alterFunctionStmt = 360, RULE_alterfunc_opt_list = 361, RULE_opt_restrict = 362, 
		RULE_removeFuncStmt = 363, RULE_removeAggrStmt = 364, RULE_removeOperStmt = 365, 
		RULE_oper_argtypes = 366, RULE_any_operator = 367, RULE_doStmt = 368, 
		RULE_dostmt_opt_list = 369, RULE_dostmt_opt_item = 370, RULE_createCastStmt = 371, 
		RULE_cast_context = 372, RULE_dropCastStmt = 373, RULE_opt_if_exists = 374, 
		RULE_reindexStmt = 375, RULE_reindex_type = 376, RULE_opt_force = 377, 
		RULE_renameStmt = 378, RULE_opt_column = 379, RULE_opt_set_data = 380, 
		RULE_alterObjectSchemaStmt = 381, RULE_alterOwnerStmt = 382, RULE_ruleStmt = 383, 
		RULE_ruleActionList = 384, RULE_ruleActionMulti = 385, RULE_ruleActionStmt = 386, 
		RULE_ruleActionStmtOrEmpty = 387, RULE_event = 388, RULE_opt_instead = 389, 
		RULE_dropruleStmt = 390, RULE_notifyStmt = 391, RULE_notify_payload = 392, 
		RULE_listenStmt = 393, RULE_unlistenStmt = 394, RULE_transactionStmt = 395, 
		RULE_opt_transaction = 396, RULE_transaction_mode_item = 397, RULE_transaction_mode_list = 398, 
		RULE_transaction_mode_list_or_empty = 399, RULE_viewStmt = 400, RULE_opt_check_option = 401, 
		RULE_loadStmt = 402, RULE_createdbStmt = 403, RULE_createdb_opt_list = 404, 
		RULE_createdb_opt_item = 405, RULE_opt_equal = 406, RULE_alterDatabaseStmt = 407, 
		RULE_alterDatabaseSetStmt = 408, RULE_alterdb_opt_list = 409, RULE_alterdb_opt_item = 410, 
		RULE_dropdbStmt = 411, RULE_createDomainStmt = 412, RULE_alterDomainStmt = 413, 
		RULE_opt_as = 414, RULE_alterTSDictionaryStmt = 415, RULE_alterTSConfigurationStmt = 416, 
		RULE_createConversionStmt = 417, RULE_clusterStmt = 418, RULE_cluster_index_specification = 419, 
		RULE_vacuumStmt = 420, RULE_vacuum_option_list = 421, RULE_vacuum_option_elem = 422, 
		RULE_analyzeStmt = 423, RULE_analyze_keyword = 424, RULE_opt_verbose = 425, 
		RULE_opt_full = 426, RULE_opt_freeze = 427, RULE_opt_name_list = 428, 
		RULE_explainStmt = 429, RULE_explainableStmt = 430, RULE_explain_option_list = 431, 
		RULE_explain_option_elem = 432, RULE_explain_option_name = 433, RULE_explain_option_arg = 434, 
		RULE_prepareStmt = 435, RULE_prep_type_clause = 436, RULE_preparableStmt = 437, 
		RULE_executeStmt = 438, RULE_execute_param_clause = 439, RULE_deallocateStmt = 440, 
		RULE_insertStmt = 441, RULE_insert_rest = 442, RULE_insert_column_list = 443, 
		RULE_insert_column_item = 444, RULE_returning_clause = 445, RULE_deleteStmt = 446, 
		RULE_using_clause = 447, RULE_lockStmt = 448, RULE_opt_lock = 449, RULE_lock_type = 450, 
		RULE_opt_nowait = 451, RULE_updateStmt = 452, RULE_set_clause_list = 453, 
		RULE_set_clause = 454, RULE_single_set_clause = 455, RULE_multiple_set_clause = 456, 
		RULE_set_target = 457, RULE_set_target_list = 458, RULE_declareCursorStmt = 459, 
		RULE_cursor_name = 460, RULE_cursor_options = 461, RULE_opt_hold = 462, 
		RULE_selectStmt = 463, RULE_select_with_parens = 464, RULE_select_no_parens = 465, 
		RULE_select_clause = 466, RULE_simple_select = 467, RULE_with_clause = 468, 
		RULE_cte_list = 469, RULE_common_table_expr = 470, RULE_opt_with_clause = 471, 
		RULE_into_clause = 472, RULE_optTempTableName = 473, RULE_opt_table = 474, 
		RULE_opt_all = 475, RULE_opt_distinct = 476, RULE_opt_sort_clause = 477, 
		RULE_sort_clause = 478, RULE_sortby_list = 479, RULE_sortby = 480, RULE_select_limit = 481, 
		RULE_opt_select_limit = 482, RULE_limit_clause = 483, RULE_offset_clause = 484, 
		RULE_select_limit_value = 485, RULE_select_offset_value = 486, RULE_opt_select_fetch_first_value = 487, 
		RULE_select_offset_value2 = 488, RULE_row_or_rows = 489, RULE_first_or_next = 490, 
		RULE_group_clause = 491, RULE_having_clause = 492, RULE_for_locking_clause = 493, 
		RULE_opt_for_locking_clause = 494, RULE_for_locking_items = 495, RULE_for_locking_item = 496, 
		RULE_locked_rels_list = 497, RULE_values_clause = 498, RULE_from_clause = 499, 
		RULE_from_list = 500, RULE_table_ref = 501, RULE_table_ref2 = 502, RULE_joined_table = 503, 
		RULE_alias_clause = 504, RULE_join_type = 505, RULE_join_qual = 506, RULE_relation_expr = 507, 
		RULE_relation_expr_list = 508, RULE_relation_expr_opt_alias = 509, RULE_func_table = 510, 
		RULE_where_clause = 511, RULE_where_or_current_clause = 512, RULE_opttableFuncElementList = 513, 
		RULE_tableFuncElementList = 514, RULE_tableFuncElement = 515, RULE_typename = 516, 
		RULE_opt_array_bounds = 517, RULE_simpletypename = 518, RULE_consttypename = 519, 
		RULE_genericType = 520, RULE_opt_type_modifiers = 521, RULE_numeric = 522, 
		RULE_opt_float = 523, RULE_bit = 524, RULE_constbit = 525, RULE_bitWithLength = 526, 
		RULE_bitWithoutLength = 527, RULE_character = 528, RULE_constcharacter = 529, 
		RULE_characterWithLength = 530, RULE_characterWithoutLength = 531, RULE_character_def = 532, 
		RULE_opt_varying = 533, RULE_opt_charset = 534, RULE_constDatetime = 535, 
		RULE_constInterval = 536, RULE_opt_timezone = 537, RULE_opt_interval = 538, 
		RULE_interval_second = 539, RULE_a_expr = 540, RULE_b_expr = 541, RULE_c_expr = 542, 
		RULE_func_expr = 543, RULE_xml_root_version = 544, RULE_opt_xml_root_standalone = 545, 
		RULE_xml_attributes = 546, RULE_xml_attribute_list = 547, RULE_xml_attribute_el = 548, 
		RULE_document_or_content = 549, RULE_xml_whitespace_option = 550, RULE_xmlexists_argument = 551, 
		RULE_window_clause = 552, RULE_window_definition_list = 553, RULE_window_definition = 554, 
		RULE_over_clause = 555, RULE_window_specification = 556, RULE_opt_existing_window_name = 557, 
		RULE_opt_partition_clause = 558, RULE_opt_frame_clause = 559, RULE_frame_extent = 560, 
		RULE_frame_bound = 561, RULE_row = 562, RULE_sub_type = 563, RULE_all_Op = 564, 
		RULE_mathOp = 565, RULE_qual_Op = 566, RULE_qual_all_Op = 567, RULE_subquery_Op = 568, 
		RULE_expr_list = 569, RULE_func_arg_list = 570, RULE_func_arg_expr = 571, 
		RULE_type_list = 572, RULE_array_expr = 573, RULE_array_expr_list = 574, 
		RULE_extract_list = 575, RULE_extract_arg = 576, RULE_overlay_list = 577, 
		RULE_overlay_placing = 578, RULE_position_list = 579, RULE_substr_list = 580, 
		RULE_substr_from = 581, RULE_substr_for = 582, RULE_trim_list = 583, RULE_in_expr = 584, 
		RULE_case_expr = 585, RULE_when_clause_list = 586, RULE_when_clause = 587, 
		RULE_case_default = 588, RULE_case_arg = 589, RULE_columnref = 590, RULE_indirection_el = 591, 
		RULE_indirection = 592, RULE_opt_indirection = 593, RULE_opt_asymmetric = 594, 
		RULE_ctext_expr = 595, RULE_ctext_expr_list = 596, RULE_ctext_row = 597, 
		RULE_target_list = 598, RULE_target_el = 599, RULE_qualified_name_list = 600, 
		RULE_qualified_name = 601, RULE_name_list = 602, RULE_name = 603, RULE_database_name = 604, 
		RULE_access_method = 605, RULE_attr_name = 606, RULE_index_name = 607, 
		RULE_file_name = 608, RULE_func_name = 609, RULE_aexprConst = 610, RULE_iConst = 611, 
		RULE_sConst = 612, RULE_roleId = 613, RULE_signedIconst = 614, RULE_colId = 615, 
		RULE_type_function_name = 616, RULE_colLabel = 617, RULE_col_name_keyword = 618, 
		RULE_type_func_name_keyword = 619, RULE_reserved_keyword = 620;
	public static final String[] ruleNames = {
		"pl_function", "comp_options", "comp_option", "opt_semi", "pl_block", 
		"decl_sect", "decl_start", "decl_stmts", "decl_stmt", "decl_statement", 
		"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
		"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
		"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
		"assign_operator", "proc_sect", "proc_stmts", "proc_stmt", "stmt_perform", 
		"stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
		"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
		"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
		"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "stmt_raise", "loop_body", "stmt_execsql", "stmt_dynexecute", 
		"stmt_open", "stmt_fetch", "stmt_move", "opt_fetch_direction", "stmt_close", 
		"stmt_null", "cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_then", "expr_until_loop", "opt_block_label", "opt_label", 
		"opt_exitcond", "any_identifier", "unreserved_keyword", "stmtblock", "stmtmulti", 
		"stmt", "createRoleStmt", "optRoleList", "alteroptRoleList", "alterOptRoleElem", 
		"createOptRoleElem", "createUserStmt", "alterRoleStmt", "opt_in_database", 
		"alterRoleSetStmt", "alterUserStmt", "alterUserSetStmt", "dropRoleStmt", 
		"dropUserStmt", "createGroupStmt", "alterGroupStmt", "add_drop", "dropGroupStmt", 
		"createSchemaStmt", "optSchemaName", "optSchemaEltList", "schema_stmt", 
		"variableSetStmt", "set_rest", "set_rest_more", "var_name", "var_list", 
		"var_value", "iso_level", "opt_boolean_or_string", "zone_value", "opt_encoding", 
		"colId_or_Sconst", "variableResetStmt", "setResetClause", "functionsetResetClause", 
		"variableShowStmt", "constraintsSetStmt", "constraints_set_list", "constraints_set_mode", 
		"checkPointStmt", "discardStmt", "alterTableStmt", "alter_table_cmds", 
		"alter_table_cmd", "alter_column_default", "opt_drop_behavior", "opt_collate_clause", 
		"alter_using", "reloptions", "opt_reloptions", "reloption_list", "reloption_elem", 
		"alterCompositeTypeStmt", "alter_type_cmds", "alter_type_cmd", "closePortalStmt", 
		"copyStmt", "copy_from", "copy_file_name", "copy_options", "copy_opt_list", 
		"copy_opt_item", "opt_binary", "opt_oids", "copy_delimiter", "opt_using", 
		"copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createStmt", 
		"optTemp", "opttableElementList", "opttypedtableElementList", "tableElementList", 
		"typedtableElementList", "tableElement", "typedtableElement", "columnDef", 
		"columnOptions", "colQualList", "colConstraint", "colconstraintElem", 
		"constraintAttr", "tableLikeClause", "tableLikeOptionList", "tableLikeOption", 
		"tableConstraint", "constraintElem", "opt_no_inherit", "opt_column_list", 
		"columnList", "columnElem", "key_match", "exclusionConstraintList", "exclusionconstraintElem", 
		"exclusionWhereClause", "key_actions", "key_update", "key_delete", "key_action", 
		"optInherit", "optWith", "onCommitOption", "optTableSpace", "optConsTableSpace", 
		"existingIndex", "createAsStmt", "create_as_target", "opt_with_data", 
		"createSeqStmt", "alterSeqStmt", "optseqOptList", "seqOptList", "seqOptElem", 
		"opt_by", "numericOnly", "numericOnly_list", "createPLangStmt", "opt_trusted", 
		"handler_name", "opt_inline_handler", "validator_clause", "opt_validator", 
		"dropPLangStmt", "opt_procedural", "createTableSpaceStmt", "optTableSpaceOwner", 
		"dropTableSpaceStmt", "createExtensionStmt", "create_extension_opt_list", 
		"create_extension_opt_item", "alterExtensionStmt", "alter_extension_opt_list", 
		"alter_extension_opt_item", "alterExtensionContentsStmt", "createFdwStmt", 
		"fdw_option", "fdw_options", "opt_fdw_options", "dropFdwStmt", "alterFdwStmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createForeignServerStmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "dropForeignServerStmt", 
		"alterForeignServerStmt", "createForeignTableStmt", "optforeigntableElementList", 
		"foreigntableElementList", "foreigntableElement", "alterForeignTableStmt", 
		"createUserMappingStmt", "auth_ident", "dropUserMappingStmt", "alterUserMappingStmt", 
		"createTrigStmt", "triggerActionTime", "triggerEvents", "triggerOneEvent", 
		"triggerForSpec", "triggerForOptEach", "triggerForType", "triggerWhen", 
		"triggerFuncArgs", "triggerFuncArg", "optConstrFromTable", "constraintAttributeSpec", 
		"constraintAttributeElem", "dropTrigStmt", "createAssertStmt", "dropAssertStmt", 
		"defineStmt", "definition", "def_list", "def_elem", "def_arg", "aggr_args", 
		"old_aggr_definition", "old_aggr_list", "old_aggr_elem", "opt_enum_val_list", 
		"enum_val_list", "alterEnumStmt", "createOpClassStmt", "opclass_item_list", 
		"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
		"createOpFamilyStmt", "alterOpFamilyStmt", "opclass_drop_list", "opclass_drop", 
		"dropOpClassStmt", "dropOpFamilyStmt", "dropOwnedStmt", "reassignOwnedStmt", 
		"dropStmt", "drop_type", "any_name_list", "any_name", "attrs", "truncateStmt", 
		"opt_restart_seqs", "commentStmt", "comment_type", "comment_text", "secLabelStmt", 
		"opt_provider", "security_label_type", "security_label", "fetchStmt", 
		"fetch_args", "from_in", "opt_from_in", "grantStmt", "revokeStmt", "privileges", 
		"privilege_list", "privilege", "privilege_target", "grantee_list", "grantee", 
		"opt_grant_grant_option", "function_with_argtypes_list", "function_with_argtypes", 
		"grantRoleStmt", "revokeRoleStmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterDefaultPrivilegesStmt", "defACLOptionList", "defACLOption", "defACLAction", 
		"defacl_privilege_target", "indexStmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem", 
		"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createFunctionStmt", 
		"opt_or_replace", "func_args", "func_args_list", "func_args_with_defaults", 
		"func_args_with_defaults_list", "func_arg", "arg_class", "param_name", 
		"func_return", "func_type", "func_arg_with_default", "createfunc_opt_list", 
		"common_func_opt_item", "createfunc_opt_item", "func_as", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterFunctionStmt", "alterfunc_opt_list", 
		"opt_restrict", "removeFuncStmt", "removeAggrStmt", "removeOperStmt", 
		"oper_argtypes", "any_operator", "doStmt", "dostmt_opt_list", "dostmt_opt_item", 
		"createCastStmt", "cast_context", "dropCastStmt", "opt_if_exists", "reindexStmt", 
		"reindex_type", "opt_force", "renameStmt", "opt_column", "opt_set_data", 
		"alterObjectSchemaStmt", "alterOwnerStmt", "ruleStmt", "ruleActionList", 
		"ruleActionMulti", "ruleActionStmt", "ruleActionStmtOrEmpty", "event", 
		"opt_instead", "dropruleStmt", "notifyStmt", "notify_payload", "listenStmt", 
		"unlistenStmt", "transactionStmt", "opt_transaction", "transaction_mode_item", 
		"transaction_mode_list", "transaction_mode_list_or_empty", "viewStmt", 
		"opt_check_option", "loadStmt", "createdbStmt", "createdb_opt_list", "createdb_opt_item", 
		"opt_equal", "alterDatabaseStmt", "alterDatabaseSetStmt", "alterdb_opt_list", 
		"alterdb_opt_item", "dropdbStmt", "createDomainStmt", "alterDomainStmt", 
		"opt_as", "alterTSDictionaryStmt", "alterTSConfigurationStmt", "createConversionStmt", 
		"clusterStmt", "cluster_index_specification", "vacuumStmt", "vacuum_option_list", 
		"vacuum_option_elem", "analyzeStmt", "analyze_keyword", "opt_verbose", 
		"opt_full", "opt_freeze", "opt_name_list", "explainStmt", "explainableStmt", 
		"explain_option_list", "explain_option_elem", "explain_option_name", "explain_option_arg", 
		"prepareStmt", "prep_type_clause", "preparableStmt", "executeStmt", "execute_param_clause", 
		"deallocateStmt", "insertStmt", "insert_rest", "insert_column_list", "insert_column_item", 
		"returning_clause", "deleteStmt", "using_clause", "lockStmt", "opt_lock", 
		"lock_type", "opt_nowait", "updateStmt", "set_clause_list", "set_clause", 
		"single_set_clause", "multiple_set_clause", "set_target", "set_target_list", 
		"declareCursorStmt", "cursor_name", "cursor_options", "opt_hold", "selectStmt", 
		"select_with_parens", "select_no_parens", "select_clause", "simple_select", 
		"with_clause", "cte_list", "common_table_expr", "opt_with_clause", "into_clause", 
		"optTempTableName", "opt_table", "opt_all", "opt_distinct", "opt_sort_clause", 
		"sort_clause", "sortby_list", "sortby", "select_limit", "opt_select_limit", 
		"limit_clause", "offset_clause", "select_limit_value", "select_offset_value", 
		"opt_select_fetch_first_value", "select_offset_value2", "row_or_rows", 
		"first_or_next", "group_clause", "having_clause", "for_locking_clause", 
		"opt_for_locking_clause", "for_locking_items", "for_locking_item", "locked_rels_list", 
		"values_clause", "from_clause", "from_list", "table_ref", "table_ref2", 
		"joined_table", "alias_clause", "join_type", "join_qual", "relation_expr", 
		"relation_expr_list", "relation_expr_opt_alias", "func_table", "where_clause", 
		"where_or_current_clause", "opttableFuncElementList", "tableFuncElementList", 
		"tableFuncElement", "typename", "opt_array_bounds", "simpletypename", 
		"consttypename", "genericType", "opt_type_modifiers", "numeric", "opt_float", 
		"bit", "constbit", "bitWithLength", "bitWithoutLength", "character", "constcharacter", 
		"characterWithLength", "characterWithoutLength", "character_def", "opt_varying", 
		"opt_charset", "constDatetime", "constInterval", "opt_timezone", "opt_interval", 
		"interval_second", "a_expr", "b_expr", "c_expr", "func_expr", "xml_root_version", 
		"opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", "xml_attribute_el", 
		"document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"window_clause", "window_definition_list", "window_definition", "over_clause", 
		"window_specification", "opt_existing_window_name", "opt_partition_clause", 
		"opt_frame_clause", "frame_extent", "frame_bound", "row", "sub_type", 
		"all_Op", "mathOp", "qual_Op", "qual_all_Op", "subquery_Op", "expr_list", 
		"func_arg_list", "func_arg_expr", "type_list", "array_expr", "array_expr_list", 
		"extract_list", "extract_arg", "overlay_list", "overlay_placing", "position_list", 
		"substr_list", "substr_from", "substr_for", "trim_list", "in_expr", "case_expr", 
		"when_clause_list", "when_clause", "case_default", "case_arg", "columnref", 
		"indirection_el", "indirection", "opt_indirection", "opt_asymmetric", 
		"ctext_expr", "ctext_expr_list", "ctext_row", "target_list", "target_el", 
		"qualified_name_list", "qualified_name", "name_list", "name", "database_name", 
		"access_method", "attr_name", "index_name", "file_name", "func_name", 
		"aexprConst", "iConst", "sConst", "roleId", "signedIconst", "colId", "type_function_name", 
		"colLabel", "col_name_keyword", "type_func_name_keyword", "reserved_keyword"
	};

	@Override
	public String getGrammarFileName() { return "PlPgSql.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlPgSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Pl_functionContext extends ParserRuleContext {
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPl_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPl_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1242); comp_options(0);
			setState(1243); pl_block();
			setState(1244); opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public Comp_optionContext comp_option() {
			return getRuleContext(Comp_optionContext.class,0);
		}
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterComp_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitComp_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		return comp_options(0);
	}

	private Comp_optionsContext comp_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, _parentState);
		Comp_optionsContext _prevctx = _localctx;
		int _startState = 2;
		enterRecursionRule(_localctx, 2, RULE_comp_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1251);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Comp_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_comp_options);
					setState(1247);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1248); comp_option();
					}
					} 
				}
				setState(1253);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Comp_optionContext extends ParserRuleContext {
		public TerminalNode K_USE_VARIABLE() { return getToken(PlPgSqlParser.K_USE_VARIABLE, 0); }
		public TerminalNode K_VARIABLE_CONFLICT() { return getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0); }
		public TerminalNode K_DUMP() { return getToken(PlPgSqlParser.K_DUMP, 0); }
		public TerminalNode K_OPTION() { return getToken(PlPgSqlParser.K_OPTION, 0); }
		public TerminalNode K_ERROR() { return getToken(PlPgSqlParser.K_ERROR, 0); }
		public TerminalNode K_USE_COLUMN() { return getToken(PlPgSqlParser.K_USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterComp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitComp_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_comp_option);
		try {
			setState(1266);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1254); match(T__0);
				setState(1255); match(K_OPTION);
				setState(1256); match(K_DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1257); match(T__0);
				setState(1258); match(K_VARIABLE_CONFLICT);
				setState(1259); match(K_ERROR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1260); match(T__0);
				setState(1261); match(K_VARIABLE_CONFLICT);
				setState(1262); match(K_USE_VARIABLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1263); match(T__0);
				setState(1264); match(K_VARIABLE_CONFLICT);
				setState(1265); match(K_USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_semiContext extends ParserRuleContext {
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_opt_semi);
		try {
			setState(1270);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(1269); match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode K_BEGIN() { return getToken(PlPgSqlParser.K_BEGIN, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode K_END() { return getToken(PlPgSqlParser.K_END, 0); }
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPl_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPl_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1272); decl_sect();
			setState(1273); match(K_BEGIN);
			setState(1274); proc_sect();
			setState(1275); exception_sect();
			setState(1276); match(K_END);
			setState(1277); opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_decl_sect);
		try {
			setState(1287);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1279); opt_block_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1280); opt_block_label();
				setState(1281); decl_start();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1283); opt_block_label();
				setState(1284); decl_start();
				setState(1285); decl_stmts(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode K_DECLARE() { return getToken(PlPgSqlParser.K_DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1289); match(K_DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtsContext extends ParserRuleContext {
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_stmtContext decl_stmt() {
			return getRuleContext(Decl_stmtContext.class,0);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		return decl_stmts(0);
	}

	private Decl_stmtsContext decl_stmts(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, _parentState);
		Decl_stmtsContext _prevctx = _localctx;
		int _startState = 14;
		enterRecursionRule(_localctx, 14, RULE_decl_stmts, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1292); decl_stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1298);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_stmtsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_stmts);
					setState(1294);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1295); decl_stmt();
					}
					} 
				}
				setState(1300);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Decl_stmtContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PlPgSqlParser.LESS_LESS, 0); }
		public TerminalNode K_DECLARE() { return getToken(PlPgSqlParser.K_DECLARE, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PlPgSqlParser.GREATER_GREATER, 0); }
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_decl_stmt);
		try {
			setState(1307);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case T_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1301); decl_statement();
				}
				break;
			case K_DECLARE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1302); match(K_DECLARE);
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1303); match(LESS_LESS);
				setState(1304); any_identifier();
				setState(1305); match(GREATER_GREATER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(PlPgSqlParser.K_FOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public TerminalNode K_ALIAS() { return getToken(PlPgSqlParser.K_ALIAS, 0); }
		public TerminalNode K_CURSOR() { return getToken(PlPgSqlParser.K_CURSOR, 0); }
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_decl_statement);
		try {
			setState(1329);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1309); decl_varname();
				setState(1310); decl_const();
				setState(1311); decl_datatype();
				setState(1312); decl_collate();
				setState(1313); decl_notnull();
				setState(1314); decl_defval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1316); decl_varname();
				setState(1317); match(K_ALIAS);
				setState(1318); match(K_FOR);
				setState(1319); decl_aliasitem();
				setState(1320); match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1322); decl_varname();
				setState(1323); opt_scrollable();
				setState(1324); match(K_CURSOR);
				setState(1325); decl_cursor_args();
				setState(1326); decl_is_for();
				setState(1327); decl_cursor_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode K_SCROLL() { return getToken(PlPgSqlParser.K_SCROLL, 0); }
		public TerminalNode K_NO() { return getToken(PlPgSqlParser.K_NO, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_scrollable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_scrollable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_opt_scrollable);
		try {
			setState(1335);
			switch (_input.LA(1)) {
			case K_CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(1332); match(K_NO);
				setState(1333); match(K_SCROLL);
				}
				break;
			case K_SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1334); match(K_SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_cursor_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_cursor_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_cursor_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_cursor_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_decl_cursor_args);
		try {
			setState(1344);
			switch (_input.LA(1)) {
			case K_FOR:
			case K_IS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				setState(1340); match(T__7);
				setState(1341); decl_cursor_arglist(0);
				setState(1342); match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public Decl_cursor_argContext decl_cursor_arg() {
			return getRuleContext(Decl_cursor_argContext.class,0);
		}
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_cursor_arglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_cursor_arglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		return decl_cursor_arglist(0);
	}

	private Decl_cursor_arglistContext decl_cursor_arglist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, _parentState);
		Decl_cursor_arglistContext _prevctx = _localctx;
		int _startState = 26;
		enterRecursionRule(_localctx, 26, RULE_decl_cursor_arglist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1347); decl_cursor_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(1354);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_cursor_arglistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_cursor_arglist);
					setState(1349);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1350); match(T__12);
					setState(1351); decl_cursor_arg();
					}
					} 
				}
				setState(1356);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_cursor_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_cursor_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1357); decl_varname();
			setState(1358); decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode K_FOR() { return getToken(PlPgSqlParser.K_FOR, 0); }
		public TerminalNode K_IS() { return getToken(PlPgSqlParser.K_IS, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_is_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_is_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			_la = _input.LA(1);
			if ( !(_la==K_FOR || _la==K_IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_aliasitemContext extends ParserRuleContext {
		public TerminalNode T_CWORD() { return getToken(PlPgSqlParser.T_CWORD, 0); }
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_aliasitem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_aliasitem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_decl_aliasitem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			_la = _input.LA(1);
			if ( !(_la==T_WORD || _la==T_CWORD) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_varnameContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_varname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_varname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_decl_varname);
		try {
			setState(1366);
			switch (_input.LA(1)) {
			case T_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364); match(T_WORD);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365); unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode K_CONSTANT() { return getToken(PlPgSqlParser.K_CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_decl_const);
		try {
			setState(1370);
			switch (_input.LA(1)) {
			case T__4:
			case T__3:
			case K_COLLATE:
			case K_DEFAULT:
			case K_NOT:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_CONSTANT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1369); match(K_CONSTANT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_datatypeContext extends ParserRuleContext {
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_decl_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode T_CWORD() { return getToken(PlPgSqlParser.T_CWORD, 0); }
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public TerminalNode K_COLLATE() { return getToken(PlPgSqlParser.K_COLLATE, 0); }
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_decl_collate);
		try {
			setState(1379);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1375); match(K_COLLATE);
				setState(1376); match(T_WORD);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1377); match(K_COLLATE);
				setState(1378); match(T_CWORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode K_NULL() { return getToken(PlPgSqlParser.K_NULL, 0); }
		public TerminalNode K_NOT() { return getToken(PlPgSqlParser.K_NOT, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_decl_notnull);
		try {
			setState(1384);
			switch (_input.LA(1)) {
			case T__4:
			case T__3:
			case K_DEFAULT:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1382); match(K_NOT);
				setState(1383); match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_defval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_defval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_decl_defval);
		try {
			setState(1388);
			switch (_input.LA(1)) {
			case T__3:
				enterOuterAlt(_localctx, 1);
				{
				setState(1386); match(T__3);
				}
				break;
			case T__4:
			case K_DEFAULT:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1387); decl_defkey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defkeyContext extends ParserRuleContext {
		public TerminalNode K_DEFAULT() { return getToken(PlPgSqlParser.K_DEFAULT, 0); }
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDecl_defkey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDecl_defkey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_decl_defkey);
		try {
			setState(1392);
			switch (_input.LA(1)) {
			case T__4:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1390); assign_operator();
				}
				break;
			case K_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1391); match(K_DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode COLON_EQUALS() { return getToken(PlPgSqlParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAssign_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAssign_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1394);
			_la = _input.LA(1);
			if ( !(_la==T__4 || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sectContext extends ParserRuleContext {
		public Proc_stmtsContext proc_stmts() {
			return getRuleContext(Proc_stmtsContext.class,0);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_proc_sect);
		try {
			setState(1398);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1397); proc_stmts(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmtsContext extends ParserRuleContext {
		public Proc_stmtsContext proc_stmts() {
			return getRuleContext(Proc_stmtsContext.class,0);
		}
		public Proc_stmtContext proc_stmt() {
			return getRuleContext(Proc_stmtContext.class,0);
		}
		public Proc_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtsContext proc_stmts() throws RecognitionException {
		return proc_stmts(0);
	}

	private Proc_stmtsContext proc_stmts(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_stmtsContext _localctx = new Proc_stmtsContext(_ctx, _parentState);
		Proc_stmtsContext _prevctx = _localctx;
		int _startState = 52;
		enterRecursionRule(_localctx, 52, RULE_proc_stmts, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1401); proc_stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1407);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_stmtsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_stmts);
					setState(1403);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1404); proc_stmt();
					}
					} 
				}
				setState(1409);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_proc_stmt);
		try {
			setState(1432);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1410); pl_block();
				setState(1411); match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1413); stmt_assign();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1414); stmt_if();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1415); stmt_case();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1416); stmt_loop();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1417); stmt_while();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1418); stmt_for();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1419); stmt_foreach_a();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1420); stmt_exit();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1421); stmt_return();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1422); stmt_raise();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1423); stmt_execsql();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1424); stmt_dynexecute();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1425); stmt_perform();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1426); stmt_getdiag();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1427); stmt_open();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1428); stmt_fetch();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1429); stmt_move();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1430); stmt_close();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1431); stmt_null();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode K_PERFORM() { return getToken(PlPgSqlParser.K_PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_perform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_perform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1434); match(K_PERFORM);
			setState(1435); expr_until_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1437); assign_var(0);
			setState(1438); assign_operator();
			setState(1439); expr_until_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode K_DIAGNOSTICS() { return getToken(PlPgSqlParser.K_DIAGNOSTICS, 0); }
		public TerminalNode K_GET() { return getToken(PlPgSqlParser.K_GET, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_getdiag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_getdiag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1441); match(K_GET);
			setState(1442); getdiag_area_opt();
			setState(1443); match(K_DIAGNOSTICS);
			setState(1444); getdiag_list(0);
			setState(1445); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode K_STACKED() { return getToken(PlPgSqlParser.K_STACKED, 0); }
		public TerminalNode K_CURRENT() { return getToken(PlPgSqlParser.K_CURRENT, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGetdiag_area_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGetdiag_area_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_getdiag_area_opt);
		try {
			setState(1450);
			switch (_input.LA(1)) {
			case K_DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1448); match(K_CURRENT);
				}
				break;
			case K_STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1449); match(K_STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_listContext extends ParserRuleContext {
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public Getdiag_list_itemContext getdiag_list_item() {
			return getRuleContext(Getdiag_list_itemContext.class,0);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGetdiag_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGetdiag_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		return getdiag_list(0);
	}

	private Getdiag_listContext getdiag_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, _parentState);
		Getdiag_listContext _prevctx = _localctx;
		int _startState = 64;
		enterRecursionRule(_localctx, 64, RULE_getdiag_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1453); getdiag_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(1460);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Getdiag_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_getdiag_list);
					setState(1455);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1456); match(T__12);
					setState(1457); getdiag_list_item();
					}
					} 
				}
				setState(1462);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGetdiag_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGetdiag_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463); getdiag_target();
			setState(1464); assign_operator();
			setState(1465); getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_itemContext extends ParserRuleContext {
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGetdiag_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGetdiag_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_getdiag_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_targetContext extends ParserRuleContext {
		public TerminalNode T_CWORD() { return getToken(PlPgSqlParser.T_CWORD, 0); }
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public TerminalNode T_DATUM() { return getToken(PlPgSqlParser.T_DATUM, 0); }
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGetdiag_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGetdiag_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_getdiag_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			_la = _input.LA(1);
			if ( !(((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (T_WORD - 564)) | (1L << (T_CWORD - 564)) | (1L << (T_DATUM - 564)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_varContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Expr_until_rightbracketContext expr_until_rightbracket() {
			return getRuleContext(Expr_until_rightbracketContext.class,0);
		}
		public TerminalNode T_DATUM() { return getToken(PlPgSqlParser.T_DATUM, 0); }
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAssign_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAssign_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		return assign_var(0);
	}

	private Assign_varContext assign_var(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assign_varContext _localctx = new Assign_varContext(_ctx, _parentState);
		Assign_varContext _prevctx = _localctx;
		int _startState = 72;
		enterRecursionRule(_localctx, 72, RULE_assign_var, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1472); match(T_DATUM);
			}
			_ctx.stop = _input.LT(-1);
			setState(1479);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assign_varContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assign_var);
					setState(1474);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1475); match(T__8);
					setState(1476); expr_until_rightbracket();
					}
					} 
				}
				setState(1481);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Stmt_ifContext extends ParserRuleContext {
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public TerminalNode K_END() { return getToken(PlPgSqlParser.K_END, 0); }
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public TerminalNode K_IF(int i) {
			return getToken(PlPgSqlParser.K_IF, i);
		}
		public List<TerminalNode> K_IF() { return getTokens(PlPgSqlParser.K_IF); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_stmt_if);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482); match(K_IF);
			setState(1483); expr_until_then();
			setState(1484); proc_sect();
			setState(1485); stmt_elsifs(0);
			setState(1486); stmt_else();
			setState(1487); match(K_END);
			setState(1488); match(K_IF);
			setState(1489); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elsifsContext extends ParserRuleContext {
		public TerminalNode K_ELSIF() { return getToken(PlPgSqlParser.K_ELSIF, 0); }
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsifs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_elsifs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_elsifs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_elsifs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifsContext stmt_elsifs() throws RecognitionException {
		return stmt_elsifs(0);
	}

	private Stmt_elsifsContext stmt_elsifs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(_ctx, _parentState);
		Stmt_elsifsContext _prevctx = _localctx;
		int _startState = 76;
		enterRecursionRule(_localctx, 76, RULE_stmt_elsifs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1499);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Stmt_elsifsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmt_elsifs);
					setState(1492);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1493); match(K_ELSIF);
					setState(1494); expr_until_then();
					setState(1495); proc_sect();
					}
					} 
				}
				setState(1501);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Stmt_elseContext extends ParserRuleContext {
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode K_ELSE() { return getToken(PlPgSqlParser.K_ELSE, 0); }
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_stmt_else);
		try {
			setState(1505);
			switch (_input.LA(1)) {
			case K_END:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1503); match(K_ELSE);
				setState(1504); proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_caseContext extends ParserRuleContext {
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public TerminalNode K_END() { return getToken(PlPgSqlParser.K_END, 0); }
		public List<TerminalNode> K_CASE() { return getTokens(PlPgSqlParser.K_CASE); }
		public TerminalNode K_CASE(int i) {
			return getToken(PlPgSqlParser.K_CASE, i);
		}
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1507); match(K_CASE);
			setState(1508); opt_expr_until_when();
			setState(1509); case_when_list(0);
			setState(1510); opt_case_else();
			setState(1511); match(K_END);
			setState(1512); match(K_CASE);
			setState(1513); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_expr_until_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_expr_until_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_opt_expr_until_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_when_listContext extends ParserRuleContext {
		public Case_whenContext case_when() {
			return getRuleContext(Case_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCase_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCase_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		return case_when_list(0);
	}

	private Case_when_listContext case_when_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, _parentState);
		Case_when_listContext _prevctx = _localctx;
		int _startState = 84;
		enterRecursionRule(_localctx, 84, RULE_case_when_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1518); case_when();
			}
			_ctx.stop = _input.LT(-1);
			setState(1524);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Case_when_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_case_when_list);
					setState(1520);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1521); case_when();
					}
					} 
				}
				setState(1526);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(PlPgSqlParser.K_WHEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCase_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCase_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527); match(K_WHEN);
			setState(1528); expr_until_then();
			setState(1529); proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_case_elseContext extends ParserRuleContext {
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode K_ELSE() { return getToken(PlPgSqlParser.K_ELSE, 0); }
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_case_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_case_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_opt_case_else);
		try {
			setState(1534);
			switch (_input.LA(1)) {
			case K_END:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1532); match(K_ELSE);
				setState(1533); proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1536); opt_block_label();
			setState(1537); match(K_LOOP);
			setState(1538); loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_whileContext extends ParserRuleContext {
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public TerminalNode K_WHILE() { return getToken(PlPgSqlParser.K_WHILE, 0); }
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_while(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_while(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1540); opt_block_label();
			setState(1541); match(K_WHILE);
			setState(1542); expr_until_loop();
			setState(1543); loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(PlPgSqlParser.K_FOR, 0); }
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545); opt_block_label();
			setState(1546); match(K_FOR);
			setState(1547); for_control();
			setState(1548); loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode K_IN() { return getToken(PlPgSqlParser.K_IN, 0); }
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFor_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFor_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_for_control);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1550); for_variable();
			setState(1551); match(K_IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_variableContext extends ParserRuleContext {
		public TerminalNode T_CWORD() { return getToken(PlPgSqlParser.T_CWORD, 0); }
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public TerminalNode T_DATUM() { return getToken(PlPgSqlParser.T_DATUM, 0); }
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_for_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1553);
			_la = _input.LA(1);
			if ( !(((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (T_WORD - 564)) | (1L << (T_CWORD - 564)) | (1L << (T_DATUM - 564)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode K_ARRAY() { return getToken(PlPgSqlParser.K_ARRAY, 0); }
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode K_FOREACH() { return getToken(PlPgSqlParser.K_FOREACH, 0); }
		public TerminalNode K_IN() { return getToken(PlPgSqlParser.K_IN, 0); }
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_foreach_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_foreach_a(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555); opt_block_label();
			setState(1556); match(K_FOREACH);
			setState(1557); for_variable();
			setState(1558); foreach_slice();
			setState(1559); match(K_IN);
			setState(1560); match(K_ARRAY);
			setState(1561); expr_until_loop();
			setState(1562); loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode ICONST() { return getToken(PlPgSqlParser.ICONST, 0); }
		public TerminalNode K_SLICE() { return getToken(PlPgSqlParser.K_SLICE, 0); }
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterForeach_slice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitForeach_slice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_foreach_slice);
		try {
			setState(1567);
			switch (_input.LA(1)) {
			case K_IN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1565); match(K_SLICE);
				setState(1566); match(ICONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_exitContext extends ParserRuleContext {
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_exit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_exit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1569); exit_type();
			setState(1570); opt_label();
			setState(1571); opt_exitcond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode K_EXIT() { return getToken(PlPgSqlParser.K_EXIT, 0); }
		public TerminalNode K_CONTINUE() { return getToken(PlPgSqlParser.K_CONTINUE, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573);
			_la = _input.LA(1);
			if ( !(_la==K_CONTINUE || _la==K_EXIT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode K_RETURN() { return getToken(PlPgSqlParser.K_RETURN, 0); }
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_stmt_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1575); match(K_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_raiseContext extends ParserRuleContext {
		public TerminalNode K_RAISE() { return getToken(PlPgSqlParser.K_RAISE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_raise(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_raise(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_stmt_raise);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1577); match(K_RAISE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_bodyContext extends ParserRuleContext {
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode K_END() { return getToken(PlPgSqlParser.K_END, 0); }
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLoop_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLoop_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579); proc_sect();
			setState(1580); match(K_END);
			setState(1581); match(K_LOOP);
			setState(1582); opt_label();
			setState(1583); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_execsqlContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_execsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_execsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_stmt_execsql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1585); stmt();
			setState(1586); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public TerminalNode K_EXECUTE() { return getToken(PlPgSqlParser.K_EXECUTE, 0); }
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_dynexecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_dynexecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_stmt_dynexecute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588); match(K_EXECUTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_openContext extends ParserRuleContext {
		public TerminalNode K_OPEN() { return getToken(PlPgSqlParser.K_OPEN, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_open(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_open(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_stmt_open);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1590); match(K_OPEN);
			setState(1591); cursor_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_fetchContext extends ParserRuleContext {
		public TerminalNode K_FETCH() { return getToken(PlPgSqlParser.K_FETCH, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public TerminalNode K_INTO() { return getToken(PlPgSqlParser.K_INTO, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_fetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_fetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593); match(K_FETCH);
			setState(1594); opt_fetch_direction();
			setState(1595); cursor_variable();
			setState(1596); match(K_INTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_moveContext extends ParserRuleContext {
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public TerminalNode K_MOVE() { return getToken(PlPgSqlParser.K_MOVE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_move(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_move(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1598); match(K_MOVE);
			setState(1599); opt_fetch_direction();
			setState(1600); cursor_variable();
			setState(1601); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_fetch_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_fetch_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_opt_fetch_direction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode K_CLOSE() { return getToken(PlPgSqlParser.K_CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_close(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_close(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605); match(K_CLOSE);
			setState(1606); cursor_variable();
			setState(1607); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode K_NULL() { return getToken(PlPgSqlParser.K_NULL, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609); match(K_NULL);
			setState(1610); match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_variableContext extends ParserRuleContext {
		public TerminalNode T_CWORD() { return getToken(PlPgSqlParser.T_CWORD, 0); }
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public TerminalNode T_DATUM() { return getToken(PlPgSqlParser.T_DATUM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCursor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCursor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_cursor_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			_la = _input.LA(1);
			if ( !(((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (T_WORD - 564)) | (1L << (T_CWORD - 564)) | (1L << (T_DATUM - 564)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_sectContext extends ParserRuleContext {
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public TerminalNode K_EXCEPTION() { return getToken(PlPgSqlParser.K_EXCEPTION, 0); }
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterException_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitException_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_exception_sect);
		try {
			setState(1617);
			switch (_input.LA(1)) {
			case K_END:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1615); match(K_EXCEPTION);
				setState(1616); proc_exceptions(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionsContext extends ParserRuleContext {
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Proc_exceptionContext proc_exception() {
			return getRuleContext(Proc_exceptionContext.class,0);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_exceptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_exceptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		return proc_exceptions(0);
	}

	private Proc_exceptionsContext proc_exceptions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, _parentState);
		Proc_exceptionsContext _prevctx = _localctx;
		int _startState = 134;
		enterRecursionRule(_localctx, 134, RULE_proc_exceptions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1620); proc_exception();
			}
			_ctx.stop = _input.LT(-1);
			setState(1626);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_exceptionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_exceptions);
					setState(1622);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1623); proc_exception();
					}
					} 
				}
				setState(1628);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(PlPgSqlParser.K_WHEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode K_THEN() { return getToken(PlPgSqlParser.K_THEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_exception(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_exception(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1629); match(K_WHEN);
			setState(1630); proc_conditions(0);
			setState(1631); match(K_THEN);
			setState(1632); proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionsContext extends ParserRuleContext {
		public TerminalNode K_OR() { return getToken(PlPgSqlParser.K_OR, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public Proc_conditionContext proc_condition() {
			return getRuleContext(Proc_conditionContext.class,0);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		return proc_conditions(0);
	}

	private Proc_conditionsContext proc_conditions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, _parentState);
		Proc_conditionsContext _prevctx = _localctx;
		int _startState = 138;
		enterRecursionRule(_localctx, 138, RULE_proc_conditions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1635); proc_condition();
			}
			_ctx.stop = _input.LT(-1);
			setState(1642);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_conditionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_conditions);
					setState(1637);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1638); match(K_OR);
					setState(1639); proc_condition();
					}
					} 
				}
				setState(1644);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_proc_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645); any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_semiContext extends ParserRuleContext {
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExpr_until_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExpr_until_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_expr_until_semi);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExpr_until_rightbracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExpr_until_rightbracket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_thenContext extends ParserRuleContext {
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExpr_until_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExpr_until_then(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_loopContext extends ParserRuleContext {
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExpr_until_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExpr_until_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_block_labelContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PlPgSqlParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PlPgSqlParser.GREATER_GREATER, 0); }
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_block_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_block_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_opt_block_label);
		try {
			setState(1660);
			switch (_input.LA(1)) {
			case K_BEGIN:
			case K_DECLARE:
			case K_FOR:
			case K_FOREACH:
			case K_LOOP:
			case K_WHILE:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1656); match(LESS_LESS);
				setState(1657); any_identifier();
				setState(1658); match(GREATER_GREATER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_opt_label);
		try {
			setState(1664);
			switch (_input.LA(1)) {
			case EOF:
			case T__3:
			case K_WHEN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T_WORD:
			case T_DATUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1663); any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(PlPgSqlParser.K_WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_exitcond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_exitcond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_opt_exitcond);
		try {
			setState(1669);
			switch (_input.LA(1)) {
			case T__3:
				enterOuterAlt(_localctx, 1);
				{
				setState(1666); match(T__3);
				}
				break;
			case K_WHEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1667); match(K_WHEN);
				setState(1668); expr_until_semi();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_identifierContext extends ParserRuleContext {
		public TerminalNode T_WORD() { return getToken(PlPgSqlParser.T_WORD, 0); }
		public TerminalNode T_DATUM() { return getToken(PlPgSqlParser.T_DATUM, 0); }
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAny_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAny_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_any_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			_la = _input.LA(1);
			if ( !(_la==T_WORD || _la==T_DATUM) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode K_BACKWARD() { return getToken(PlPgSqlParser.K_BACKWARD, 0); }
		public TerminalNode K_ABSOLUTE() { return getToken(PlPgSqlParser.K_ABSOLUTE, 0); }
		public TerminalNode K_TYPE() { return getToken(PlPgSqlParser.K_TYPE, 0); }
		public TerminalNode K_SLICE() { return getToken(PlPgSqlParser.K_SLICE, 0); }
		public TerminalNode K_MESSAGE() { return getToken(PlPgSqlParser.K_MESSAGE, 0); }
		public TerminalNode K_NEXT() { return getToken(PlPgSqlParser.K_NEXT, 0); }
		public TerminalNode K_VARIABLE_CONFLICT() { return getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0); }
		public TerminalNode K_DUMP() { return getToken(PlPgSqlParser.K_DUMP, 0); }
		public TerminalNode K_CURRENT() { return getToken(PlPgSqlParser.K_CURRENT, 0); }
		public TerminalNode K_DETAIL() { return getToken(PlPgSqlParser.K_DETAIL, 0); }
		public TerminalNode K_NOTICE() { return getToken(PlPgSqlParser.K_NOTICE, 0); }
		public TerminalNode K_INFO() { return getToken(PlPgSqlParser.K_INFO, 0); }
		public TerminalNode K_SQLSTATE() { return getToken(PlPgSqlParser.K_SQLSTATE, 0); }
		public TerminalNode K_MESSAGE_TEXT() { return getToken(PlPgSqlParser.K_MESSAGE_TEXT, 0); }
		public TerminalNode K_ERRCODE() { return getToken(PlPgSqlParser.K_ERRCODE, 0); }
		public TerminalNode K_LOG() { return getToken(PlPgSqlParser.K_LOG, 0); }
		public TerminalNode K_FORWARD() { return getToken(PlPgSqlParser.K_FORWARD, 0); }
		public TerminalNode K_PRIOR() { return getToken(PlPgSqlParser.K_PRIOR, 0); }
		public TerminalNode K_ARRAY() { return getToken(PlPgSqlParser.K_ARRAY, 0); }
		public TerminalNode K_RESULT_OID() { return getToken(PlPgSqlParser.K_RESULT_OID, 0); }
		public TerminalNode K_PG_EXCEPTION_HINT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_HINT, 0); }
		public TerminalNode K_OPTION() { return getToken(PlPgSqlParser.K_OPTION, 0); }
		public TerminalNode K_NO() { return getToken(PlPgSqlParser.K_NO, 0); }
		public TerminalNode K_REVERSE() { return getToken(PlPgSqlParser.K_REVERSE, 0); }
		public TerminalNode K_RETURNED_SQLSTATE() { return getToken(PlPgSqlParser.K_RETURNED_SQLSTATE, 0); }
		public TerminalNode K_STACKED() { return getToken(PlPgSqlParser.K_STACKED, 0); }
		public TerminalNode K_USE_VARIABLE() { return getToken(PlPgSqlParser.K_USE_VARIABLE, 0); }
		public TerminalNode K_LAST() { return getToken(PlPgSqlParser.K_LAST, 0); }
		public TerminalNode K_SCROLL() { return getToken(PlPgSqlParser.K_SCROLL, 0); }
		public TerminalNode K_CONSTANT() { return getToken(PlPgSqlParser.K_CONSTANT, 0); }
		public TerminalNode K_ALIAS() { return getToken(PlPgSqlParser.K_ALIAS, 0); }
		public TerminalNode K_QUERY() { return getToken(PlPgSqlParser.K_QUERY, 0); }
		public TerminalNode K_ROWTYPE() { return getToken(PlPgSqlParser.K_ROWTYPE, 0); }
		public TerminalNode K_DEBUG() { return getToken(PlPgSqlParser.K_DEBUG, 0); }
		public TerminalNode K_WARNING() { return getToken(PlPgSqlParser.K_WARNING, 0); }
		public TerminalNode K_PG_EXCEPTION_DETAIL() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_DETAIL, 0); }
		public TerminalNode K_FIRST() { return getToken(PlPgSqlParser.K_FIRST, 0); }
		public TerminalNode K_ERROR() { return getToken(PlPgSqlParser.K_ERROR, 0); }
		public TerminalNode K_CURSOR() { return getToken(PlPgSqlParser.K_CURSOR, 0); }
		public TerminalNode K_IS() { return getToken(PlPgSqlParser.K_IS, 0); }
		public TerminalNode K_HINT() { return getToken(PlPgSqlParser.K_HINT, 0); }
		public TerminalNode K_PG_EXCEPTION_CONTEXT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_CONTEXT, 0); }
		public TerminalNode K_ROW_COUNT() { return getToken(PlPgSqlParser.K_ROW_COUNT, 0); }
		public TerminalNode K_RELATIVE() { return getToken(PlPgSqlParser.K_RELATIVE, 0); }
		public TerminalNode K_USE_COLUMN() { return getToken(PlPgSqlParser.K_USE_COLUMN, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			_la = _input.LA(1);
			if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (K_ABSOLUTE - 59)) | (1L << (K_ALIAS - 59)) | (1L << (K_ARRAY - 59)) | (1L << (K_BACKWARD - 59)) | (1L << (K_CONSTANT - 59)) | (1L << (K_CURRENT - 59)) | (1L << (K_CURSOR - 59)) | (1L << (K_DEBUG - 59)) | (1L << (K_DETAIL - 59)) | (1L << (K_DUMP - 59)) | (1L << (K_ERRCODE - 59)) | (1L << (K_ERROR - 59)) | (1L << (K_FIRST - 59)) | (1L << (K_FORWARD - 59)) | (1L << (K_HINT - 59)) | (1L << (K_INFO - 59)) | (1L << (K_IS - 59)) | (1L << (K_LAST - 59)) | (1L << (K_LOG - 59)) | (1L << (K_MESSAGE - 59)) | (1L << (K_MESSAGE_TEXT - 59)) | (1L << (K_NEXT - 59)) | (1L << (K_NO - 59)) | (1L << (K_NOTICE - 59)) | (1L << (K_OPTION - 59)) | (1L << (K_PG_EXCEPTION_CONTEXT - 59)) | (1L << (K_PG_EXCEPTION_DETAIL - 59)) | (1L << (K_PG_EXCEPTION_HINT - 59)) | (1L << (K_PRIOR - 59)) | (1L << (K_QUERY - 59)) | (1L << (K_RELATIVE - 59)) | (1L << (K_RESULT_OID - 59)) | (1L << (K_RETURNED_SQLSTATE - 59)) | (1L << (K_REVERSE - 59)) | (1L << (K_ROW_COUNT - 59)) | (1L << (K_ROWTYPE - 59)) | (1L << (K_SCROLL - 59)) | (1L << (K_SLICE - 59)) | (1L << (K_SQLSTATE - 59)) | (1L << (K_STACKED - 59)) | (1L << (K_TYPE - 59)) | (1L << (K_USE_COLUMN - 59)) | (1L << (K_USE_VARIABLE - 59)) | (1L << (K_VARIABLE_CONFLICT - 59)) | (1L << (K_WARNING - 59)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1675); stmtmulti(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		return stmtmulti(0);
	}

	private StmtmultiContext stmtmulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, _parentState);
		StmtmultiContext _prevctx = _localctx;
		int _startState = 162;
		enterRecursionRule(_localctx, 162, RULE_stmtmulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1678); stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1685);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StmtmultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmtmulti);
					setState(1680);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1681); match(T__3);
					setState(1682); stmt();
					}
					} 
				}
				setState(1687);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public PrepareStmtContext prepareStmt() {
			return getRuleContext(PrepareStmtContext.class,0);
		}
		public RemoveOperStmtContext removeOperStmt() {
			return getRuleContext(RemoveOperStmtContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public AlterTableStmtContext alterTableStmt() {
			return getRuleContext(AlterTableStmtContext.class,0);
		}
		public CreateRoleStmtContext createRoleStmt() {
			return getRuleContext(CreateRoleStmtContext.class,0);
		}
		public AlterOpFamilyStmtContext alterOpFamilyStmt() {
			return getRuleContext(AlterOpFamilyStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public CreateOpFamilyStmtContext createOpFamilyStmt() {
			return getRuleContext(CreateOpFamilyStmtContext.class,0);
		}
		public DropFdwStmtContext dropFdwStmt() {
			return getRuleContext(DropFdwStmtContext.class,0);
		}
		public DropRoleStmtContext dropRoleStmt() {
			return getRuleContext(DropRoleStmtContext.class,0);
		}
		public VariableShowStmtContext variableShowStmt() {
			return getRuleContext(VariableShowStmtContext.class,0);
		}
		public DropTableSpaceStmtContext dropTableSpaceStmt() {
			return getRuleContext(DropTableSpaceStmtContext.class,0);
		}
		public DropUserMappingStmtContext dropUserMappingStmt() {
			return getRuleContext(DropUserMappingStmtContext.class,0);
		}
		public ReassignOwnedStmtContext reassignOwnedStmt() {
			return getRuleContext(ReassignOwnedStmtContext.class,0);
		}
		public AlterUserStmtContext alterUserStmt() {
			return getRuleContext(AlterUserStmtContext.class,0);
		}
		public LockStmtContext lockStmt() {
			return getRuleContext(LockStmtContext.class,0);
		}
		public ListenStmtContext listenStmt() {
			return getRuleContext(ListenStmtContext.class,0);
		}
		public CreateAssertStmtContext createAssertStmt() {
			return getRuleContext(CreateAssertStmtContext.class,0);
		}
		public CheckPointStmtContext checkPointStmt() {
			return getRuleContext(CheckPointStmtContext.class,0);
		}
		public RuleStmtContext ruleStmt() {
			return getRuleContext(RuleStmtContext.class,0);
		}
		public AlterSeqStmtContext alterSeqStmt() {
			return getRuleContext(AlterSeqStmtContext.class,0);
		}
		public DropPLangStmtContext dropPLangStmt() {
			return getRuleContext(DropPLangStmtContext.class,0);
		}
		public RemoveAggrStmtContext removeAggrStmt() {
			return getRuleContext(RemoveAggrStmtContext.class,0);
		}
		public DiscardStmtContext discardStmt() {
			return getRuleContext(DiscardStmtContext.class,0);
		}
		public CreateConversionStmtContext createConversionStmt() {
			return getRuleContext(CreateConversionStmtContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() {
			return getRuleContext(AlterDefaultPrivilegesStmtContext.class,0);
		}
		public CreateGroupStmtContext createGroupStmt() {
			return getRuleContext(CreateGroupStmtContext.class,0);
		}
		public AlterForeignServerStmtContext alterForeignServerStmt() {
			return getRuleContext(AlterForeignServerStmtContext.class,0);
		}
		public RevokeStmtContext revokeStmt() {
			return getRuleContext(RevokeStmtContext.class,0);
		}
		public FetchStmtContext fetchStmt() {
			return getRuleContext(FetchStmtContext.class,0);
		}
		public CreateUserStmtContext createUserStmt() {
			return getRuleContext(CreateUserStmtContext.class,0);
		}
		public DeallocateStmtContext deallocateStmt() {
			return getRuleContext(DeallocateStmtContext.class,0);
		}
		public AlterDatabaseStmtContext alterDatabaseStmt() {
			return getRuleContext(AlterDatabaseStmtContext.class,0);
		}
		public DropOwnedStmtContext dropOwnedStmt() {
			return getRuleContext(DropOwnedStmtContext.class,0);
		}
		public DropOpFamilyStmtContext dropOpFamilyStmt() {
			return getRuleContext(DropOpFamilyStmtContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public ClosePortalStmtContext closePortalStmt() {
			return getRuleContext(ClosePortalStmtContext.class,0);
		}
		public AlterTSConfigurationStmtContext alterTSConfigurationStmt() {
			return getRuleContext(AlterTSConfigurationStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public CreateFdwStmtContext createFdwStmt() {
			return getRuleContext(CreateFdwStmtContext.class,0);
		}
		public VariableSetStmtContext variableSetStmt() {
			return getRuleContext(VariableSetStmtContext.class,0);
		}
		public CreateForeignServerStmtContext createForeignServerStmt() {
			return getRuleContext(CreateForeignServerStmtContext.class,0);
		}
		public DropUserStmtContext dropUserStmt() {
			return getRuleContext(DropUserStmtContext.class,0);
		}
		public ConstraintsSetStmtContext constraintsSetStmt() {
			return getRuleContext(ConstraintsSetStmtContext.class,0);
		}
		public DoStmtContext doStmt() {
			return getRuleContext(DoStmtContext.class,0);
		}
		public RenameStmtContext renameStmt() {
			return getRuleContext(RenameStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public AlterEnumStmtContext alterEnumStmt() {
			return getRuleContext(AlterEnumStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public AlterFdwStmtContext alterFdwStmt() {
			return getRuleContext(AlterFdwStmtContext.class,0);
		}
		public CreatedbStmtContext createdbStmt() {
			return getRuleContext(CreatedbStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public CreateExtensionStmtContext createExtensionStmt() {
			return getRuleContext(CreateExtensionStmtContext.class,0);
		}
		public CreateDomainStmtContext createDomainStmt() {
			return getRuleContext(CreateDomainStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public AlterExtensionContentsStmtContext alterExtensionContentsStmt() {
			return getRuleContext(AlterExtensionContentsStmtContext.class,0);
		}
		public AlterDatabaseSetStmtContext alterDatabaseSetStmt() {
			return getRuleContext(AlterDatabaseSetStmtContext.class,0);
		}
		public AlterCompositeTypeStmtContext alterCompositeTypeStmt() {
			return getRuleContext(AlterCompositeTypeStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public DropdbStmtContext dropdbStmt() {
			return getRuleContext(DropdbStmtContext.class,0);
		}
		public DropCastStmtContext dropCastStmt() {
			return getRuleContext(DropCastStmtContext.class,0);
		}
		public AlterDomainStmtContext alterDomainStmt() {
			return getRuleContext(AlterDomainStmtContext.class,0);
		}
		public ClusterStmtContext clusterStmt() {
			return getRuleContext(ClusterStmtContext.class,0);
		}
		public GrantRoleStmtContext grantRoleStmt() {
			return getRuleContext(GrantRoleStmtContext.class,0);
		}
		public ExplainStmtContext explainStmt() {
			return getRuleContext(ExplainStmtContext.class,0);
		}
		public DropStmtContext dropStmt() {
			return getRuleContext(DropStmtContext.class,0);
		}
		public DropOpClassStmtContext dropOpClassStmt() {
			return getRuleContext(DropOpClassStmtContext.class,0);
		}
		public RevokeRoleStmtContext revokeRoleStmt() {
			return getRuleContext(RevokeRoleStmtContext.class,0);
		}
		public AlterObjectSchemaStmtContext alterObjectSchemaStmt() {
			return getRuleContext(AlterObjectSchemaStmtContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public UnlistenStmtContext unlistenStmt() {
			return getRuleContext(UnlistenStmtContext.class,0);
		}
		public AlterGroupStmtContext alterGroupStmt() {
			return getRuleContext(AlterGroupStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public CreateFunctionStmtContext createFunctionStmt() {
			return getRuleContext(CreateFunctionStmtContext.class,0);
		}
		public CreateCastStmtContext createCastStmt() {
			return getRuleContext(CreateCastStmtContext.class,0);
		}
		public AlterRoleSetStmtContext alterRoleSetStmt() {
			return getRuleContext(AlterRoleSetStmtContext.class,0);
		}
		public CreateTableSpaceStmtContext createTableSpaceStmt() {
			return getRuleContext(CreateTableSpaceStmtContext.class,0);
		}
		public AlterRoleStmtContext alterRoleStmt() {
			return getRuleContext(AlterRoleStmtContext.class,0);
		}
		public RemoveFuncStmtContext removeFuncStmt() {
			return getRuleContext(RemoveFuncStmtContext.class,0);
		}
		public AlterUserSetStmtContext alterUserSetStmt() {
			return getRuleContext(AlterUserSetStmtContext.class,0);
		}
		public AlterFunctionStmtContext alterFunctionStmt() {
			return getRuleContext(AlterFunctionStmtContext.class,0);
		}
		public ReindexStmtContext reindexStmt() {
			return getRuleContext(ReindexStmtContext.class,0);
		}
		public VacuumStmtContext vacuumStmt() {
			return getRuleContext(VacuumStmtContext.class,0);
		}
		public CreateSchemaStmtContext createSchemaStmt() {
			return getRuleContext(CreateSchemaStmtContext.class,0);
		}
		public DropAssertStmtContext dropAssertStmt() {
			return getRuleContext(DropAssertStmtContext.class,0);
		}
		public CopyStmtContext copyStmt() {
			return getRuleContext(CopyStmtContext.class,0);
		}
		public CreateOpClassStmtContext createOpClassStmt() {
			return getRuleContext(CreateOpClassStmtContext.class,0);
		}
		public DropForeignServerStmtContext dropForeignServerStmt() {
			return getRuleContext(DropForeignServerStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public CreatePLangStmtContext createPLangStmt() {
			return getRuleContext(CreatePLangStmtContext.class,0);
		}
		public SecLabelStmtContext secLabelStmt() {
			return getRuleContext(SecLabelStmtContext.class,0);
		}
		public AlterOwnerStmtContext alterOwnerStmt() {
			return getRuleContext(AlterOwnerStmtContext.class,0);
		}
		public DropGroupStmtContext dropGroupStmt() {
			return getRuleContext(DropGroupStmtContext.class,0);
		}
		public DropruleStmtContext dropruleStmt() {
			return getRuleContext(DropruleStmtContext.class,0);
		}
		public AlterTSDictionaryStmtContext alterTSDictionaryStmt() {
			return getRuleContext(AlterTSDictionaryStmtContext.class,0);
		}
		public DropTrigStmtContext dropTrigStmt() {
			return getRuleContext(DropTrigStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public CreateForeignTableStmtContext createForeignTableStmt() {
			return getRuleContext(CreateForeignTableStmtContext.class,0);
		}
		public TransactionStmtContext transactionStmt() {
			return getRuleContext(TransactionStmtContext.class,0);
		}
		public AlterUserMappingStmtContext alterUserMappingStmt() {
			return getRuleContext(AlterUserMappingStmtContext.class,0);
		}
		public DefineStmtContext defineStmt() {
			return getRuleContext(DefineStmtContext.class,0);
		}
		public AlterExtensionStmtContext alterExtensionStmt() {
			return getRuleContext(AlterExtensionStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public CommentStmtContext commentStmt() {
			return getRuleContext(CommentStmtContext.class,0);
		}
		public LoadStmtContext loadStmt() {
			return getRuleContext(LoadStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public CreateUserMappingStmtContext createUserMappingStmt() {
			return getRuleContext(CreateUserMappingStmtContext.class,0);
		}
		public AlterForeignTableStmtContext alterForeignTableStmt() {
			return getRuleContext(AlterForeignTableStmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_stmt);
		try {
			setState(1799);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1688); alterDatabaseStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1689); alterDatabaseSetStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1690); alterDefaultPrivilegesStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1691); alterDomainStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1692); alterEnumStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1693); alterExtensionStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1694); alterExtensionContentsStmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1695); alterFdwStmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1696); alterForeignServerStmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1697); alterForeignTableStmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1698); alterFunctionStmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1699); alterGroupStmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1700); alterObjectSchemaStmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1701); alterOwnerStmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1702); alterSeqStmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1703); alterTableStmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1704); alterCompositeTypeStmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1705); alterRoleSetStmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1706); alterRoleStmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1707); alterTSConfigurationStmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1708); alterTSDictionaryStmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1709); alterUserMappingStmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1710); alterUserSetStmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1711); alterUserStmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1712); analyzeStmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1713); checkPointStmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1714); closePortalStmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1715); clusterStmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1716); commentStmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1717); constraintsSetStmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1718); copyStmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1719); createAsStmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1720); createAssertStmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1721); createCastStmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1722); createConversionStmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1723); createDomainStmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1724); createExtensionStmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1725); createFdwStmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1726); createForeignServerStmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1727); createForeignTableStmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1728); createFunctionStmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1729); createGroupStmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1730); createOpClassStmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1731); createOpFamilyStmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1732); alterOpFamilyStmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1733); createPLangStmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1734); createSchemaStmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1735); createSeqStmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1736); createStmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1737); createTableSpaceStmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1738); createTrigStmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1739); createRoleStmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1740); createUserStmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1741); createUserMappingStmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1742); createdbStmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1743); deallocateStmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1744); declareCursorStmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1745); defineStmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1746); deleteStmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1747); discardStmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1748); doStmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1749); dropAssertStmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1750); dropCastStmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1751); dropFdwStmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1752); dropForeignServerStmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1753); dropGroupStmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1754); dropOpClassStmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1755); dropOpFamilyStmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1756); dropOwnedStmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1757); dropPLangStmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1758); dropruleStmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1759); dropStmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1760); dropTableSpaceStmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1761); dropTrigStmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1762); dropRoleStmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1763); dropUserStmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1764); dropUserMappingStmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1765); dropdbStmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1766); executeStmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1767); explainStmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1768); fetchStmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1769); grantStmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1770); grantRoleStmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1771); indexStmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1772); insertStmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1773); listenStmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1774); loadStmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1775); lockStmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1776); notifyStmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1777); prepareStmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1778); reassignOwnedStmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1779); reindexStmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1780); removeAggrStmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1781); removeFuncStmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1782); removeOperStmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1783); renameStmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1784); revokeStmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1785); revokeRoleStmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1786); ruleStmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1787); secLabelStmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1788); selectStmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1789); transactionStmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1790); truncateStmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1791); unlistenStmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1792); updateStmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1793); vacuumStmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1794); variableResetStmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1795); variableSetStmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1796); variableShowStmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1797); viewStmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStmtContext createRoleStmt() throws RecognitionException {
		CreateRoleStmtContext _localctx = new CreateRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_createRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801); match(CREATE);
			setState(1802); match(ROLE);
			setState(1803); roleId();
			setState(1805);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1804); match(WITH);
				}
				break;
			}
			setState(1807); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptRoleListContext extends ParserRuleContext {
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateOptRoleElemContext createOptRoleElem() {
			return getRuleContext(CreateOptRoleElemContext.class,0);
		}
		public OptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptRoleListContext optRoleList() throws RecognitionException {
		return optRoleList(0);
	}

	private OptRoleListContext optRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptRoleListContext _localctx = new OptRoleListContext(_ctx, _parentState);
		OptRoleListContext _prevctx = _localctx;
		int _startState = 168;
		enterRecursionRule(_localctx, 168, RULE_optRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1814);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optRoleList);
					setState(1810);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1811); createOptRoleElem();
					}
					} 
				}
				setState(1816);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlteroptRoleListContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public AlteroptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlteroptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlteroptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlteroptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptRoleListContext alteroptRoleList() throws RecognitionException {
		return alteroptRoleList(0);
	}

	private AlteroptRoleListContext alteroptRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AlteroptRoleListContext _localctx = new AlteroptRoleListContext(_ctx, _parentState);
		AlteroptRoleListContext _prevctx = _localctx;
		int _startState = 170;
		enterRecursionRule(_localctx, 170, RULE_alteroptRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1822);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlteroptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alteroptRoleList);
					setState(1818);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1819); alterOptRoleElem();
					}
					} 
				}
				setState(1824);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PlPgSqlParser.UNENCRYPTED, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PlPgSqlParser.ENCRYPTED, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(PlPgSqlParser.PASSWORD, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode VALID() { return getToken(PlPgSqlParser.VALID, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode UNTIL() { return getToken(PlPgSqlParser.UNTIL, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alterOptRoleElem);
		try {
			setState(1845);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1825); match(PASSWORD);
				setState(1826); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1827); match(PASSWORD);
				setState(1828); match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1829); match(ENCRYPTED);
				setState(1830); match(PASSWORD);
				setState(1831); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1832); match(UNENCRYPTED);
				setState(1833); match(PASSWORD);
				setState(1834); sConst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1835); match(INHERIT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1836); match(CONNECTION);
				setState(1837); match(LIMIT);
				setState(1838); signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1839); match(VALID);
				setState(1840); match(UNTIL);
				setState(1841); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1842); match(USER);
				setState(1843); name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1844); match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode SYSID() { return getToken(PlPgSqlParser.SYSID, 0); }
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createOptRoleElem);
		try {
			setState(1860);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1847); alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1848); match(SYSID);
				setState(1849); iConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1850); match(ADMIN);
				setState(1851); name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1852); match(ROLE);
				setState(1853); name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1854); match(IN_P);
				setState(1855); match(ROLE);
				setState(1856); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1857); match(IN_P);
				setState(1858); match(GROUP_P);
				setState(1859); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStmtContext createUserStmt() throws RecognitionException {
		CreateUserStmtContext _localctx = new CreateUserStmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_createUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862); match(CREATE);
			setState(1863); match(USER);
			setState(1864); roleId();
			setState(1866);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(1865); match(WITH);
				}
				break;
			}
			setState(1868); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleStmtContext alterRoleStmt() throws RecognitionException {
		AlterRoleStmtContext _localctx = new AlterRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_alterRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870); match(ALTER);
			setState(1871); match(ROLE);
			setState(1872); roleId();
			setState(1874);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				setState(1873); match(WITH);
				}
				break;
			}
			setState(1876); alteroptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_opt_in_database);
		try {
			setState(1882);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1879); match(IN_P);
				setState(1880); match(DATABASE);
				setState(1881); database_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterRoleSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterRoleSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterRoleSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterRoleSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleSetStmtContext alterRoleSetStmt() throws RecognitionException {
		AlterRoleSetStmtContext _localctx = new AlterRoleSetStmtContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alterRoleSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1884); match(ALTER);
			setState(1885); match(ROLE);
			setState(1886); roleId();
			setState(1887); opt_in_database();
			setState(1888); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStmtContext alterUserStmt() throws RecognitionException {
		AlterUserStmtContext _localctx = new AlterUserStmtContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alterUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1890); match(ALTER);
			setState(1891); match(USER);
			setState(1892); roleId();
			setState(1894);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(1893); match(WITH);
				}
				break;
			}
			setState(1896); alteroptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterUserSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterUserSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterUserSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserSetStmtContext alterUserSetStmt() throws RecognitionException {
		AlterUserSetStmtContext _localctx = new AlterUserSetStmtContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alterUserSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1898); match(ALTER);
			setState(1899); match(USER);
			setState(1900); roleId();
			setState(1901); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public DropRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleStmtContext dropRoleStmt() throws RecognitionException {
		DropRoleStmtContext _localctx = new DropRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dropRoleStmt);
		try {
			setState(1911);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1903); match(DROP);
				setState(1904); match(ROLE);
				setState(1905); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1906); match(DROP);
				setState(1907); match(ROLE);
				setState(1908); match(IF_P);
				setState(1909); match(EXISTS);
				setState(1910); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public DropUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStmtContext dropUserStmt() throws RecognitionException {
		DropUserStmtContext _localctx = new DropUserStmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dropUserStmt);
		try {
			setState(1921);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1913); match(DROP);
				setState(1914); match(USER);
				setState(1915); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1916); match(DROP);
				setState(1917); match(USER);
				setState(1918); match(IF_P);
				setState(1919); match(EXISTS);
				setState(1920); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupStmtContext createGroupStmt() throws RecognitionException {
		CreateGroupStmtContext _localctx = new CreateGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_createGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923); match(CREATE);
			setState(1924); match(GROUP_P);
			setState(1925); roleId();
			setState(1927);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(1926); match(WITH);
				}
				break;
			}
			setState(1929); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupStmtContext alterGroupStmt() throws RecognitionException {
		AlterGroupStmtContext _localctx = new AlterGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_alterGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1931); match(ALTER);
			setState(1932); match(GROUP_P);
			setState(1933); roleId();
			setState(1934); add_drop();
			setState(1935); match(USER);
			setState(1936); name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1938);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public DropGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropGroupStmtContext dropGroupStmt() throws RecognitionException {
		DropGroupStmtContext _localctx = new DropGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dropGroupStmt);
		try {
			setState(1948);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1940); match(DROP);
				setState(1941); match(GROUP_P);
				setState(1942); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1943); match(DROP);
				setState(1944); match(GROUP_P);
				setState(1945); match(IF_P);
				setState(1946); match(EXISTS);
				setState(1947); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public OptSchemaNameContext optSchemaName() {
			return getRuleContext(OptSchemaNameContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public CreateSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateSchemaStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateSchemaStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStmtContext createSchemaStmt() throws RecognitionException {
		CreateSchemaStmtContext _localctx = new CreateSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_createSchemaStmt);
		try {
			setState(1962);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1950); match(CREATE);
				setState(1951); match(SCHEMA);
				setState(1952); optSchemaName();
				setState(1953); match(AUTHORIZATION);
				setState(1954); roleId();
				setState(1955); optSchemaEltList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1957); match(CREATE);
				setState(1958); match(SCHEMA);
				setState(1959); colId();
				setState(1960); optSchemaEltList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaNameContext optSchemaName() throws RecognitionException {
		OptSchemaNameContext _localctx = new OptSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_optSchemaName);
		try {
			setState(1966);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1964); colId();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaEltListContext extends ParserRuleContext {
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public Schema_stmtContext schema_stmt() {
			return getRuleContext(Schema_stmtContext.class,0);
		}
		public OptSchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaEltList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptSchemaEltList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptSchemaEltList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaEltListContext optSchemaEltList() throws RecognitionException {
		return optSchemaEltList(0);
	}

	private OptSchemaEltListContext optSchemaEltList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptSchemaEltListContext _localctx = new OptSchemaEltListContext(_ctx, _parentState);
		OptSchemaEltListContext _prevctx = _localctx;
		int _startState = 204;
		enterRecursionRule(_localctx, 204, RULE_optSchemaEltList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1973);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptSchemaEltListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optSchemaEltList);
					setState(1969);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1970); schema_stmt();
					}
					} 
				}
				setState(1975);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,50,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_schema_stmt);
		try {
			setState(1982);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1976); createStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1977); indexStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1978); createSeqStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1979); createTrigStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1980); grantStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1981); viewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public VariableSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVariableSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVariableSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableSetStmtContext variableSetStmt() throws RecognitionException {
		VariableSetStmtContext _localctx = new VariableSetStmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_variableSetStmt);
		try {
			setState(1992);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1984); match(SET);
				setState(1985); set_rest();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1986); match(SET);
				setState(1987); match(LOCAL);
				setState(1988); set_rest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1989); match(SET);
				setState(1990); match(SESSION);
				setState(1991); set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PlPgSqlParser.CHARACTERISTICS, 0); }
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_set_rest);
		try {
			setState(2002);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1994); match(TRANSACTION);
				setState(1995); transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1996); match(SESSION);
				setState(1997); match(CHARACTERISTICS);
				setState(1998); match(AS);
				setState(1999); match(TRANSACTION);
				setState(2000); transaction_mode_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2001); set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode XML_P() { return getToken(PlPgSqlParser.XML_P, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode NAMES() { return getToken(PlPgSqlParser.NAMES, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode CATALOG_P() { return getToken(PlPgSqlParser.CATALOG_P, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlPgSqlParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_set_rest_more);
		try {
			setState(2047);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2004); var_name(0);
				setState(2005); match(TO);
				setState(2006); var_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2008); var_name(0);
				setState(2009); match(T__4);
				setState(2010); var_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2012); var_name(0);
				setState(2013); match(TO);
				setState(2014); match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2016); var_name(0);
				setState(2017); match(T__4);
				setState(2018); match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2020); var_name(0);
				setState(2021); match(FROM);
				setState(2022); match(CURRENT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2024); match(TIME);
				setState(2025); match(ZONE);
				setState(2026); zone_value();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2027); match(CATALOG_P);
				setState(2028); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2029); match(SCHEMA);
				setState(2030); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2031); match(NAMES);
				setState(2032); opt_encoding();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2033); match(ROLE);
				setState(2034); colId_or_Sconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2035); match(SESSION);
				setState(2036); match(AUTHORIZATION);
				setState(2037); colId_or_Sconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2038); match(SESSION);
				setState(2039); match(AUTHORIZATION);
				setState(2040); match(DEFAULT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2041); match(XML_P);
				setState(2042); match(OPTION);
				setState(2043); document_or_content();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2044); match(TRANSACTION);
				setState(2045); match(SNAPSHOT);
				setState(2046); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_nameContext _localctx = new Var_nameContext(_ctx, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 214;
		enterRecursionRule(_localctx, 214, RULE_var_name, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2050); colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(2057);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_name);
					setState(2052);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2053); match(T__14);
					setState(2054); colId();
					}
					} 
				}
				setState(2059);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public Var_valueContext var_value() {
			return getRuleContext(Var_valueContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_listContext _localctx = new Var_listContext(_ctx, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 216;
		enterRecursionRule(_localctx, 216, RULE_var_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2061); var_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(2068);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_list);
					setState(2063);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2064); match(T__12);
					setState(2065); var_value();
					}
					} 
				}
				setState(2070);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_var_value);
		try {
			setState(2073);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case ON:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(2071); opt_boolean_or_string();
				}
				break;
			case T__11:
			case T__10:
			case ICONST:
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2072); numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PlPgSqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlPgSqlParser.COMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlPgSqlParser.SERIALIZABLE, 0); }
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PlPgSqlParser.UNCOMMITTED, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_iso_level);
		try {
			setState(2082);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2075); match(READ);
				setState(2076); match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2077); match(READ);
				setState(2078); match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2079); match(REPEATABLE);
				setState(2080); match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2081); match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_opt_boolean_or_string);
		try {
			setState(2088);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2084); match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2085); match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2086); match(ON);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 4);
				{
				setState(2087); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_zone_value);
		try {
			setState(2106);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2090); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2091); match(IDENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2092); constInterval();
				setState(2093); sConst();
				setState(2094); opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2096); constInterval();
				setState(2097); match(T__7);
				setState(2098); iConst();
				setState(2099); match(T__13);
				setState(2100); sConst();
				setState(2101); opt_interval();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2103); numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2104); match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2105); match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_opt_encoding);
		try {
			setState(2111);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2108); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2109); match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColId_or_SconstContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public ColId_or_SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId_or_Sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColId_or_Sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColId_or_Sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColId_or_Sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColId_or_SconstContext colId_or_Sconst() throws RecognitionException {
		ColId_or_SconstContext _localctx = new ColId_or_SconstContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_colId_or_Sconst);
		try {
			setState(2115);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2113); colId();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2114); sConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_variableResetStmt);
		try {
			setState(2131);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2117); match(RESET);
				setState(2118); var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2119); match(RESET);
				setState(2120); match(TIME);
				setState(2121); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2122); match(RESET);
				setState(2123); match(TRANSACTION);
				setState(2124); match(ISOLATION);
				setState(2125); match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2126); match(RESET);
				setState(2127); match(SESSION);
				setState(2128); match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2129); match(RESET);
				setState(2130); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_setResetClause);
		try {
			setState(2136);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2133); match(SET);
				setState(2134); set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2135); variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionsetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionsetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunctionsetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunctionsetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunctionsetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetResetClauseContext functionsetResetClause() throws RecognitionException {
		FunctionsetResetClauseContext _localctx = new FunctionsetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_functionsetResetClause);
		try {
			setState(2141);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2138); match(SET);
				setState(2139); set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2140); variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableShowStmtContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode SHOW() { return getToken(PlPgSqlParser.SHOW, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public VariableShowStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableShowStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVariableShowStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVariableShowStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableShowStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableShowStmtContext variableShowStmt() throws RecognitionException {
		VariableShowStmtContext _localctx = new VariableShowStmtContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_variableShowStmt);
		try {
			setState(2157);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2143); match(SHOW);
				setState(2144); var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2145); match(SHOW);
				setState(2146); match(TIME);
				setState(2147); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2148); match(SHOW);
				setState(2149); match(TRANSACTION);
				setState(2150); match(ISOLATION);
				setState(2151); match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2152); match(SHOW);
				setState(2153); match(SESSION);
				setState(2154); match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2155); match(SHOW);
				setState(2156); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public TerminalNode CONSTRAINTS() { return getToken(PlPgSqlParser.CONSTRAINTS, 0); }
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintsSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraintsSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraintsSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintsSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetStmtContext constraintsSetStmt() throws RecognitionException {
		ConstraintsSetStmtContext _localctx = new ConstraintsSetStmtContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_constraintsSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159); match(SET);
			setState(2160); match(CONSTRAINTS);
			setState(2161); constraints_set_list();
			setState(2162); constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_constraints_set_list);
		try {
			setState(2166);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2164); match(ALL);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2165); qualified_name_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2168);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckPointStmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PlPgSqlParser.CHECKPOINT, 0); }
		public CheckPointStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkPointStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCheckPointStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCheckPointStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCheckPointStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckPointStmtContext checkPointStmt() throws RecognitionException {
		CheckPointStmtContext _localctx = new CheckPointStmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_checkPointStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170); match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardStmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PlPgSqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(PlPgSqlParser.PLANS, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public DiscardStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDiscardStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDiscardStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDiscardStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardStmtContext discardStmt() throws RecognitionException {
		DiscardStmtContext _localctx = new DiscardStmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_discardStmt);
		try {
			setState(2180);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2172); match(DISCARD);
				setState(2173); match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2174); match(DISCARD);
				setState(2175); match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2176); match(DISCARD);
				setState(2177); match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2178); match(DISCARD);
				setState(2179); match(PLANS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public AlterTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStmtContext alterTableStmt() throws RecognitionException {
		AlterTableStmtContext _localctx = new AlterTableStmtContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_alterTableStmt);
		try {
			setState(2230);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2182); match(ALTER);
				setState(2183); match(TABLE);
				setState(2184); relation_expr();
				setState(2185); alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2187); match(ALTER);
				setState(2188); match(TABLE);
				setState(2189); match(IF_P);
				setState(2190); match(EXISTS);
				setState(2191); relation_expr();
				setState(2192); alter_table_cmds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2194); match(ALTER);
				setState(2195); match(INDEX);
				setState(2196); qualified_name();
				setState(2197); alter_table_cmds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2199); match(ALTER);
				setState(2200); match(INDEX);
				setState(2201); match(IF_P);
				setState(2202); match(EXISTS);
				setState(2203); qualified_name();
				setState(2204); alter_table_cmds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2206); match(ALTER);
				setState(2207); match(SEQUENCE);
				setState(2208); qualified_name();
				setState(2209); alter_table_cmds(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2211); match(ALTER);
				setState(2212); match(SEQUENCE);
				setState(2213); match(IF_P);
				setState(2214); match(EXISTS);
				setState(2215); qualified_name();
				setState(2216); alter_table_cmds(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2218); match(ALTER);
				setState(2219); match(VIEW);
				setState(2220); qualified_name();
				setState(2221); alter_table_cmds(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2223); match(ALTER);
				setState(2224); match(VIEW);
				setState(2225); match(IF_P);
				setState(2226); match(EXISTS);
				setState(2227); qualified_name();
				setState(2228); alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public Alter_table_cmdContext alter_table_cmd() {
			return getRuleContext(Alter_table_cmdContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 250;
		enterRecursionRule(_localctx, 250, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2233); alter_table_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2240);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					setState(2235);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2236); match(T__12);
					setState(2237); alter_table_cmd();
					}
					} 
				}
				setState(2242);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PlPgSqlParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlPgSqlParser.VALIDATE, 0); }
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public TerminalNode CLUSTER() { return getToken(PlPgSqlParser.CLUSTER, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode ENABLE_P() { return getToken(PlPgSqlParser.ENABLE_P, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode ALWAYS() { return getToken(PlPgSqlParser.ALWAYS, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode DISABLE_P() { return getToken(PlPgSqlParser.DISABLE_P, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode REPLICA() { return getToken(PlPgSqlParser.REPLICA, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_alter_table_cmd);
		try {
			setState(2408);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2243); match(ADD_P);
				setState(2244); columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2245); match(ADD_P);
				setState(2246); match(COLUMN);
				setState(2247); columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2248); match(ALTER);
				setState(2249); opt_column();
				setState(2250); colId();
				setState(2251); alter_column_default();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2253); match(ALTER);
				setState(2254); opt_column();
				setState(2255); colId();
				setState(2256); match(DROP);
				setState(2257); match(NOT);
				setState(2258); match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2260); match(ALTER);
				setState(2261); opt_column();
				setState(2262); colId();
				setState(2263); match(SET);
				setState(2264); match(NOT);
				setState(2265); match(NULL_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2267); match(ALTER);
				setState(2268); opt_column();
				setState(2269); colId();
				setState(2270); match(SET);
				setState(2271); match(STATISTICS);
				setState(2272); signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2274); match(ALTER);
				setState(2275); opt_column();
				setState(2276); colId();
				setState(2277); match(SET);
				setState(2278); reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2280); match(ALTER);
				setState(2281); opt_column();
				setState(2282); colId();
				setState(2283); match(RESET);
				setState(2284); reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2286); match(ALTER);
				setState(2287); opt_column();
				setState(2288); colId();
				setState(2289); match(SET);
				setState(2290); match(STORAGE);
				setState(2291); colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2293); match(DROP);
				setState(2294); opt_column();
				setState(2295); match(IF_P);
				setState(2296); match(EXISTS);
				setState(2297); colId();
				setState(2298); opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2300); match(DROP);
				setState(2301); opt_column();
				setState(2302); colId();
				setState(2303); opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2305); match(ALTER);
				setState(2306); opt_column();
				setState(2307); colId();
				setState(2308); opt_set_data();
				setState(2309); match(TYPE_P);
				setState(2310); typename();
				setState(2311); opt_collate_clause();
				setState(2312); alter_using();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2314); match(ALTER);
				setState(2315); opt_column();
				setState(2316); colId();
				setState(2317); alter_generic_options();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2319); match(ADD_P);
				setState(2320); tableConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2321); match(VALIDATE);
				setState(2322); match(CONSTRAINT);
				setState(2323); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2324); match(DROP);
				setState(2325); match(CONSTRAINT);
				setState(2326); match(IF_P);
				setState(2327); match(EXISTS);
				setState(2328); name();
				setState(2329); opt_drop_behavior();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2331); match(DROP);
				setState(2332); match(CONSTRAINT);
				setState(2333); name();
				setState(2334); opt_drop_behavior();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2336); match(SET);
				setState(2337); match(WITH);
				setState(2338); match(OIDS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2339); match(SET);
				setState(2340); match(WITHOUT);
				setState(2341); match(OIDS);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2342); match(CLUSTER);
				setState(2343); match(ON);
				setState(2344); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2345); match(SET);
				setState(2346); match(WITHOUT);
				setState(2347); match(CLUSTER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2348); match(ENABLE_P);
				setState(2349); match(TRIGGER);
				setState(2350); name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2351); match(ENABLE_P);
				setState(2352); match(ALWAYS);
				setState(2353); match(TRIGGER);
				setState(2354); name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2355); match(ENABLE_P);
				setState(2356); match(REPLICA);
				setState(2357); match(TRIGGER);
				setState(2358); name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2359); match(ENABLE_P);
				setState(2360); match(TRIGGER);
				setState(2361); match(ALL);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2362); match(ENABLE_P);
				setState(2363); match(TRIGGER);
				setState(2364); match(USER);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2365); match(DISABLE_P);
				setState(2366); match(TRIGGER);
				setState(2367); name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2368); match(DISABLE_P);
				setState(2369); match(TRIGGER);
				setState(2370); match(ALL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2371); match(DISABLE_P);
				setState(2372); match(TRIGGER);
				setState(2373); match(USER);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2374); match(ENABLE_P);
				setState(2375); match(RULE);
				setState(2376); name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2377); match(ENABLE_P);
				setState(2378); match(ALWAYS);
				setState(2379); match(RULE);
				setState(2380); name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2381); match(ENABLE_P);
				setState(2382); match(REPLICA);
				setState(2383); match(RULE);
				setState(2384); name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2385); match(DISABLE_P);
				setState(2386); match(RULE);
				setState(2387); name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2388); match(INHERIT);
				setState(2389); qualified_name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2390); match(NO);
				setState(2391); match(INHERIT);
				setState(2392); qualified_name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2393); match(OF);
				setState(2394); any_name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2395); match(NOT);
				setState(2396); match(OF);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2397); match(OWNER);
				setState(2398); match(TO);
				setState(2399); roleId();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2400); match(SET);
				setState(2401); match(TABLESPACE);
				setState(2402); name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2403); match(SET);
				setState(2404); reloptions();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2405); match(RESET);
				setState(2406); reloptions();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2407); alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_alter_column_default);
		try {
			setState(2415);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2410); match(SET);
				setState(2411); match(DEFAULT);
				setState(2412); a_expr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2413); match(DROP);
				setState(2414); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PlPgSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_opt_drop_behavior);
		try {
			setState(2420);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2417); match(CASCADE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2418); match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_opt_collate_clause);
		try {
			setState(2425);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2422); match(COLLATE);
				setState(2423); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_alter_using);
		try {
			setState(2430);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2427); match(USING);
				setState(2428); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2432); match(T__7);
			setState(2433); reloption_list(0);
			setState(2434); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_opt_reloptions);
		try {
			setState(2439);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2436); match(WITH);
				setState(2437); reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public Reloption_elemContext reloption_elem() {
			return getRuleContext(Reloption_elemContext.class,0);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 266;
		enterRecursionRule(_localctx, 266, RULE_reloption_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2442); reloption_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2449);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					setState(2444);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2445); match(T__12);
					setState(2446); reloption_elem();
					}
					} 
				}
				setState(2451);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_reloption_elem);
		try {
			setState(2467);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2452); colLabel();
				setState(2453); match(T__4);
				setState(2454); def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2456); colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2457); colLabel();
				setState(2458); match(T__14);
				setState(2459); colLabel();
				setState(2460); match(T__4);
				setState(2461); def_arg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2463); colLabel();
				setState(2464); match(T__14);
				setState(2465); colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCompositeTypeStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public AlterCompositeTypeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCompositeTypeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterCompositeTypeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterCompositeTypeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterCompositeTypeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCompositeTypeStmtContext alterCompositeTypeStmt() throws RecognitionException {
		AlterCompositeTypeStmtContext _localctx = new AlterCompositeTypeStmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_alterCompositeTypeStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469); match(ALTER);
			setState(2470); match(TYPE_P);
			setState(2471); any_name();
			setState(2472); alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public Alter_type_cmdContext alter_type_cmd() {
			return getRuleContext(Alter_type_cmdContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 272;
		enterRecursionRule(_localctx, 272, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2475); alter_type_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2482);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					setState(2477);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2478); match(T__12);
					setState(2479); alter_type_cmd();
					}
					} 
				}
				setState(2484);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlPgSqlParser.ATTRIBUTE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_alter_type_cmd);
		try {
			setState(2511);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2485); match(ADD_P);
				setState(2486); match(ATTRIBUTE);
				setState(2487); tableFuncElement();
				setState(2488); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2490); match(DROP);
				setState(2491); match(ATTRIBUTE);
				setState(2492); match(IF_P);
				setState(2493); match(EXISTS);
				setState(2494); colId();
				setState(2495); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2497); match(DROP);
				setState(2498); match(ATTRIBUTE);
				setState(2499); colId();
				setState(2500); opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2502); match(ALTER);
				setState(2503); match(ATTRIBUTE);
				setState(2504); colId();
				setState(2505); opt_set_data();
				setState(2506); match(TYPE_P);
				setState(2507); typename();
				setState(2508); opt_collate_clause();
				setState(2509); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClosePortalStmtContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode CLOSE() { return getToken(PlPgSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ClosePortalStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closePortalStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterClosePortalStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitClosePortalStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitClosePortalStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClosePortalStmtContext closePortalStmt() throws RecognitionException {
		ClosePortalStmtContext _localctx = new ClosePortalStmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_closePortalStmt);
		try {
			setState(2517);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2513); match(CLOSE);
				setState(2514); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2515); match(CLOSE);
				setState(2516); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyStmtContext extends ParserRuleContext {
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode COPY() { return getToken(PlPgSqlParser.COPY, 0); }
		public Opt_oidsContext opt_oids() {
			return getRuleContext(Opt_oidsContext.class,0);
		}
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public CopyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyStmtContext copyStmt() throws RecognitionException {
		CopyStmtContext _localctx = new CopyStmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_copyStmt);
		try {
			setState(2541);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2519); match(COPY);
				setState(2520); opt_binary();
				setState(2521); qualified_name();
				setState(2522); opt_column_list();
				setState(2523); opt_oids();
				setState(2524); copy_from();
				setState(2525); copy_file_name();
				setState(2526); copy_delimiter();
				setState(2528);
				switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
				case 1:
					{
					setState(2527); match(WITH);
					}
					break;
				}
				setState(2530); copy_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2532); match(COPY);
				setState(2533); select_with_parens(0);
				setState(2534); match(TO);
				setState(2535); copy_file_name();
				setState(2537);
				switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
				case 1:
					{
					setState(2536); match(WITH);
					}
					break;
				}
				setState(2539); copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2543);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public TerminalNode STDOUT() { return getToken(PlPgSqlParser.STDOUT, 0); }
		public TerminalNode STDIN() { return getToken(PlPgSqlParser.STDIN, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_copy_file_name);
		try {
			setState(2548);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(2545); sConst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2546); match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2547); match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_copy_options);
		try {
			setState(2555);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2550); copy_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2551); match(T__7);
				setState(2552); copy_generic_opt_list(0);
				setState(2553); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_opt_itemContext copy_opt_item() {
			return getRuleContext(Copy_opt_itemContext.class,0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 286;
		enterRecursionRule(_localctx, 286, RULE_copy_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2562);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					setState(2558);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2559); copy_opt_item();
					}
					} 
				}
				setState(2564);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PlPgSqlParser.ESCAPE, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode FORCE() { return getToken(PlPgSqlParser.FORCE, 0); }
		public TerminalNode QUOTE() { return getToken(PlPgSqlParser.QUOTE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TerminalNode HEADER_P() { return getToken(PlPgSqlParser.HEADER_P, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode CSV() { return getToken(PlPgSqlParser.CSV, 0); }
		public TerminalNode DELIMITER() { return getToken(PlPgSqlParser.DELIMITER, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public TerminalNode ENCODING() { return getToken(PlPgSqlParser.ENCODING, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_copy_opt_item);
		try {
			setState(2597);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2565); match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2566); match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2567); match(DELIMITER);
				setState(2568); opt_as();
				setState(2569); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2571); match(NULL_P);
				setState(2572); opt_as();
				setState(2573); sConst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2575); match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2576); match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2577); match(QUOTE);
				setState(2578); opt_as();
				setState(2579); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2581); match(ESCAPE);
				setState(2582); opt_as();
				setState(2583); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2585); match(FORCE);
				setState(2586); match(QUOTE);
				setState(2587); columnList(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2588); match(FORCE);
				setState(2589); match(QUOTE);
				setState(2590); match(T__9);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2591); match(FORCE);
				setState(2592); match(NOT);
				setState(2593); match(NULL_P);
				setState(2594); columnList(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2595); match(ENCODING);
				setState(2596); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_opt_binary);
		try {
			setState(2601);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2599); match(BINARY);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_oidsContext extends ParserRuleContext {
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Opt_oidsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_oids; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_oids(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_oids(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_oids(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_oidsContext opt_oids() throws RecognitionException {
		Opt_oidsContext _localctx = new Opt_oidsContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_opt_oids);
		try {
			setState(2606);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2603); match(WITH);
				setState(2604); match(OIDS);
				}
				break;
			case FROM:
			case TO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(PlPgSqlParser.DELIMITERS, 0); }
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_copy_delimiter);
		try {
			setState(2613);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2608); opt_using();
				setState(2609); match(DELIMITERS);
				setState(2610); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_opt_using);
		try {
			setState(2617);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2615); match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return getRuleContext(Copy_generic_opt_elemContext.class,0);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 298;
		enterRecursionRule(_localctx, 298, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2620); copy_generic_opt_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2627);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					setState(2622);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2623); match(T__12);
					setState(2624); copy_generic_opt_elem();
					}
					} 
				}
				setState(2629);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630); colLabel();
			setState(2631); copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_copy_generic_opt_arg);
		try {
			setState(2641);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2633); opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2634); numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2635); match(T__9);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2636); match(T__7);
				setState(2637); copy_generic_opt_arg_list(0);
				setState(2638); match(T__13);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 304;
		enterRecursionRule(_localctx, 304, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2644); copy_generic_opt_arg_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(2651);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					setState(2646);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2647); match(T__12);
					setState(2648); copy_generic_opt_arg_list_item();
					}
					} 
				}
				setState(2653);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654); opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public OptInheritContext optInherit() {
			return getRuleContext(OptInheritContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public OpttypedtableElementListContext opttypedtableElementList() {
			return getRuleContext(OpttypedtableElementListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public OpttableElementListContext opttableElementList() {
			return getRuleContext(OpttableElementListContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public CreateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStmtContext createStmt() throws RecognitionException {
		CreateStmtContext _localctx = new CreateStmtContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_createStmt);
		try {
			setState(2708);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2656); match(CREATE);
				setState(2657); optTemp();
				setState(2658); match(TABLE);
				setState(2659); qualified_name();
				setState(2660); match(T__7);
				setState(2661); opttableElementList();
				setState(2662); match(T__13);
				setState(2663); optInherit();
				setState(2664); optWith();
				setState(2665); onCommitOption();
				setState(2666); optTableSpace();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2668); match(CREATE);
				setState(2669); optTemp();
				setState(2670); match(TABLE);
				setState(2671); match(IF_P);
				setState(2672); match(NOT);
				setState(2673); match(EXISTS);
				setState(2674); qualified_name();
				setState(2675); match(T__7);
				setState(2676); opttableElementList();
				setState(2677); match(T__13);
				setState(2678); optInherit();
				setState(2679); optWith();
				setState(2680); onCommitOption();
				setState(2681); optTableSpace();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2683); match(CREATE);
				setState(2684); optTemp();
				setState(2685); match(TABLE);
				setState(2686); qualified_name();
				setState(2687); match(OF);
				setState(2688); any_name();
				setState(2689); opttypedtableElementList();
				setState(2690); optWith();
				setState(2691); onCommitOption();
				setState(2692); optTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2694); match(CREATE);
				setState(2695); optTemp();
				setState(2696); match(TABLE);
				setState(2697); match(IF_P);
				setState(2698); match(NOT);
				setState(2699); match(EXISTS);
				setState(2700); qualified_name();
				setState(2701); match(OF);
				setState(2702); any_name();
				setState(2703); opttypedtableElementList();
				setState(2704); optWith();
				setState(2705); onCommitOption();
				setState(2706); optTableSpace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PlPgSqlParser.UNLOGGED, 0); }
		public TerminalNode GLOBAL() { return getToken(PlPgSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public OptTempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptTemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptTemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempContext optTemp() throws RecognitionException {
		OptTempContext _localctx = new OptTempContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_optTemp);
		try {
			setState(2722);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2710); match(TEMPORARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2711); match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2712); match(LOCAL);
				setState(2713); match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2714); match(LOCAL);
				setState(2715); match(TEMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2716); match(GLOBAL);
				setState(2717); match(TEMPORARY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2718); match(GLOBAL);
				setState(2719); match(TEMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2720); match(UNLOGGED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public OpttableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpttableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpttableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpttableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableElementListContext opttableElementList() throws RecognitionException {
		OpttableElementListContext _localctx = new OpttableElementListContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opttableElementList);
		try {
			setState(2726);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case CHECK:
			case COALESCE:
			case CONSTRAINT:
			case DEC:
			case DECIMAL_P:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case FOREIGN:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case LIKE:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case PRIMARY:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case UNIQUE:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2724); tableElementList(0);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttypedtableElementListContext extends ParserRuleContext {
		public TypedtableElementListContext typedtableElementList() {
			return getRuleContext(TypedtableElementListContext.class,0);
		}
		public OpttypedtableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpttypedtableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpttypedtableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpttypedtableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableElementListContext opttypedtableElementList() throws RecognitionException {
		OpttypedtableElementListContext _localctx = new OpttypedtableElementListContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_opttypedtableElementList);
		try {
			setState(2733);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2728); match(T__7);
				setState(2729); typedtableElementList(0);
				setState(2730); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TableElementContext tableElement() {
			return getRuleContext(TableElementContext.class,0);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		return tableElementList(0);
	}

	private TableElementListContext tableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableElementListContext _localctx = new TableElementListContext(_ctx, _parentState);
		TableElementListContext _prevctx = _localctx;
		int _startState = 316;
		enterRecursionRule(_localctx, 316, RULE_tableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2736); tableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2743);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableElementList);
					setState(2738);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2739); match(T__12);
					setState(2740); tableElement();
					}
					} 
				}
				setState(2745);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypedtableElementListContext extends ParserRuleContext {
		public TypedtableElementContext typedtableElement() {
			return getRuleContext(TypedtableElementContext.class,0);
		}
		public TypedtableElementListContext typedtableElementList() {
			return getRuleContext(TypedtableElementListContext.class,0);
		}
		public TypedtableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTypedtableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTypedtableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypedtableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableElementListContext typedtableElementList() throws RecognitionException {
		return typedtableElementList(0);
	}

	private TypedtableElementListContext typedtableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypedtableElementListContext _localctx = new TypedtableElementListContext(_ctx, _parentState);
		TypedtableElementListContext _prevctx = _localctx;
		int _startState = 318;
		enterRecursionRule(_localctx, 318, RULE_typedtableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2747); typedtableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2754);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedtableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typedtableElementList);
					setState(2749);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2750); match(T__12);
					setState(2751); typedtableElement();
					}
					} 
				}
				setState(2756);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_tableElement);
		try {
			setState(2760);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2757); columnDef();
				}
				break;
			case LIKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2758); tableLikeClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2759); tableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableElementContext extends ParserRuleContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TypedtableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTypedtableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTypedtableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypedtableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableElementContext typedtableElement() throws RecognitionException {
		TypedtableElementContext _localctx = new TypedtableElementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_typedtableElement);
		try {
			setState(2764);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2762); columnOptions();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2763); tableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766); colId();
			setState(2767); typename();
			setState(2768); create_generic_options();
			setState(2769); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_columnOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2771); colId();
			setState(2772); match(WITH);
			setState(2773); match(OPTIONS);
			setState(2774); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public ColConstraintContext colConstraint() {
			return getRuleContext(ColConstraintContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		return colQualList(0);
	}

	private ColQualListContext colQualList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColQualListContext _localctx = new ColQualListContext(_ctx, _parentState);
		ColQualListContext _prevctx = _localctx;
		int _startState = 328;
		enterRecursionRule(_localctx, 328, RULE_colQualList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2781);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColQualListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_colQualList);
					setState(2777);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2778); colConstraint();
					}
					} 
				}
				setState(2783);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public ColconstraintElemContext colconstraintElem() {
			return getRuleContext(ColconstraintElemContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_colConstraint);
		try {
			setState(2792);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2784); match(CONSTRAINT);
				setState(2785); name();
				setState(2786); colconstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2788); colconstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2789); constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2790); match(COLLATE);
				setState(2791); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintElemContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode KEY() { return getToken(PlPgSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public ColconstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColconstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColconstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColconstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintElemContext colconstraintElem() throws RecognitionException {
		ColconstraintElemContext _localctx = new ColconstraintElemContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_colconstraintElem);
		try {
			setState(2820);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2794); match(NOT);
				setState(2795); match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2796); match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2797); match(UNIQUE);
				setState(2798); opt_definition();
				setState(2799); optConsTableSpace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2801); match(PRIMARY);
				setState(2802); match(KEY);
				setState(2803); opt_definition();
				setState(2804); optConsTableSpace();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(2806); match(CHECK);
				setState(2807); match(T__7);
				setState(2808); a_expr(0);
				setState(2809); match(T__13);
				setState(2810); opt_no_inherit();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2812); match(DEFAULT);
				setState(2813); b_expr(0);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 7);
				{
				setState(2814); match(REFERENCES);
				setState(2815); qualified_name();
				setState(2816); opt_column_list();
				setState(2817); key_match();
				setState(2818); key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_constraintAttr);
		try {
			setState(2829);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2822); match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2823); match(NOT);
				setState(2824); match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2825); match(INITIALLY);
				setState(2826); match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2827); match(INITIALLY);
				setState(2828); match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831); match(LIKE);
			setState(2832); qualified_name();
			setState(2833); tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode EXCLUDING() { return getToken(PlPgSqlParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(PlPgSqlParser.INCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableLikeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableLikeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 338;
		enterRecursionRule(_localctx, 338, RULE_tableLikeOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2844);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2842);
					switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
					case 1:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2836);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2837); match(INCLUDING);
						setState(2838); tableLikeOption();
						}
						break;
					case 2:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2839);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2840); match(EXCLUDING);
						setState(2841); tableLikeOption();
						}
						break;
					}
					} 
				}
				setState(2846);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,109,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode INDEXES() { return getToken(PlPgSqlParser.INDEXES, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlPgSqlParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlPgSqlParser.DEFAULTS, 0); }
		public TerminalNode COMMENTS() { return getToken(PlPgSqlParser.COMMENTS, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			_la = _input.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (ALL - 113)) | (1L << (COMMENTS - 113)) | (1L << (CONSTRAINTS - 113)))) != 0) || _la==DEFAULTS || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public ConstraintElemContext constraintElem() {
			return getRuleContext(ConstraintElemContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_tableConstraint);
		try {
			setState(2854);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2849); match(CONSTRAINT);
				setState(2850); name();
				setState(2851); constraintElem();
				}
				break;
			case CHECK:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2853); constraintElem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintElemContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlPgSqlParser.EXCLUDE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode KEY() { return getToken(PlPgSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public ExistingIndexContext existingIndex() {
			return getRuleContext(ExistingIndexContext.class,0);
		}
		public ConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintElemContext constraintElem() throws RecognitionException {
		ConstraintElemContext _localctx = new ConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_constraintElem);
		try {
			setState(2910);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2856); match(CHECK);
				setState(2857); match(T__7);
				setState(2858); a_expr(0);
				setState(2859); match(T__13);
				setState(2860); constraintAttributeSpec(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2862); match(UNIQUE);
				setState(2863); match(T__7);
				setState(2864); columnList(0);
				setState(2865); match(T__13);
				setState(2866); opt_definition();
				setState(2867); optConsTableSpace();
				setState(2868); constraintAttributeSpec(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2870); match(UNIQUE);
				setState(2871); existingIndex();
				setState(2872); constraintAttributeSpec(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2874); match(PRIMARY);
				setState(2875); match(KEY);
				setState(2876); match(T__7);
				setState(2877); columnList(0);
				setState(2878); match(T__13);
				setState(2879); opt_definition();
				setState(2880); optConsTableSpace();
				setState(2881); constraintAttributeSpec(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2883); match(PRIMARY);
				setState(2884); match(KEY);
				setState(2885); existingIndex();
				setState(2886); constraintAttributeSpec(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2888); match(EXCLUDE);
				setState(2889); access_method_clause();
				setState(2890); match(T__7);
				setState(2891); exclusionConstraintList(0);
				setState(2892); match(T__13);
				setState(2893); opt_definition();
				setState(2894); optConsTableSpace();
				setState(2895); exclusionWhereClause();
				setState(2896); constraintAttributeSpec(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2898); match(FOREIGN);
				setState(2899); match(KEY);
				setState(2900); match(T__7);
				setState(2901); columnList(0);
				setState(2902); match(T__13);
				setState(2903); match(REFERENCES);
				setState(2904); qualified_name();
				setState(2905); opt_column_list();
				setState(2906); key_match();
				setState(2907); key_actions();
				setState(2908); constraintAttributeSpec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_opt_no_inherit);
		try {
			setState(2915);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2912); match(NO);
				setState(2913); match(INHERIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_opt_column_list);
		try {
			setState(2922);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917); match(T__7);
				setState(2918); columnList(0);
				setState(2919); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public ColumnElemContext columnElem() {
			return getRuleContext(ColumnElemContext.class,0);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		return columnList(0);
	}

	private ColumnListContext columnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColumnListContext _localctx = new ColumnListContext(_ctx, _parentState);
		ColumnListContext _prevctx = _localctx;
		int _startState = 350;
		enterRecursionRule(_localctx, 350, RULE_columnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2925); columnElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2932);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_columnList);
					setState(2927);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2928); match(T__12);
					setState(2929); columnElem();
					}
					} 
				}
				setState(2934);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PlPgSqlParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode SIMPLE() { return getToken(PlPgSqlParser.SIMPLE, 0); }
		public TerminalNode PARTIAL() { return getToken(PlPgSqlParser.PARTIAL, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_key_match);
		try {
			setState(2944);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2937); match(MATCH);
				setState(2938); match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2939); match(MATCH);
				setState(2940); match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2941); match(MATCH);
				setState(2942); match(SIMPLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public ExclusionconstraintElemContext exclusionconstraintElem() {
			return getRuleContext(ExclusionconstraintElemContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExclusionConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExclusionConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		return exclusionConstraintList(0);
	}

	private ExclusionConstraintListContext exclusionConstraintList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, _parentState);
		ExclusionConstraintListContext _prevctx = _localctx;
		int _startState = 356;
		enterRecursionRule(_localctx, 356, RULE_exclusionConstraintList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2947); exclusionconstraintElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2954);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionConstraintListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exclusionConstraintList);
					setState(2949);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2950); match(T__12);
					setState(2951); exclusionconstraintElem();
					}
					} 
				}
				setState(2956);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExclusionconstraintElemContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public ExclusionconstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExclusionconstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExclusionconstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionconstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintElemContext exclusionconstraintElem() throws RecognitionException {
		ExclusionconstraintElemContext _localctx = new ExclusionconstraintElemContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_exclusionconstraintElem);
		try {
			setState(2968);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2957); index_elem();
				setState(2958); match(WITH);
				setState(2959); any_operator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2961); index_elem();
				setState(2962); match(WITH);
				setState(2963); match(OPERATOR);
				setState(2964); match(T__7);
				setState(2965); any_operator();
				setState(2966); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExclusionWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExclusionWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_exclusionWhereClause);
		try {
			setState(2976);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2970); match(WHERE);
				setState(2971); match(T__7);
				setState(2972); a_expr(0);
				setState(2973); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_key_actions);
		try {
			setState(2987);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2978); key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2979); key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2980); key_update();
				setState(2981); key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2983); key_delete();
				setState(2984); key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2989); match(ON);
			setState(2990); match(UPDATE);
			setState(2991); key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993); match(ON);
			setState(2994); match(DELETE_P);
			setState(2995); key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode CASCADE() { return getToken(PlPgSqlParser.CASCADE, 0); }
		public TerminalNode ACTION() { return getToken(PlPgSqlParser.ACTION, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_key_action);
		try {
			setState(3005);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997); match(NO);
				setState(2998); match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2999); match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3000); match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3001); match(SET);
				setState(3002); match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3003); match(SET);
				setState(3004); match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PlPgSqlParser.INHERITS, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public OptInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptInheritContext optInherit() throws RecognitionException {
		OptInheritContext _localctx = new OptInheritContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_optInherit);
		try {
			setState(3013);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3007); match(INHERITS);
				setState(3008); match(T__7);
				setState(3009); qualified_name_list(0);
				setState(3010); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWithContext extends ParserRuleContext {
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public OptWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptWith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptWith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWithContext optWith() throws RecognitionException {
		OptWithContext _localctx = new OptWithContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_optWith);
		try {
			setState(3022);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3015); match(WITH);
				setState(3016); reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3017); match(WITH);
				setState(3018); match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3019); match(WITHOUT);
				setState(3020); match(OIDS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PlPgSqlParser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(PlPgSqlParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOnCommitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOnCommitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_onCommitOption);
		try {
			setState(3036);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3024); match(ON);
				setState(3025); match(COMMIT);
				setState(3026); match(DROP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3027); match(ON);
				setState(3028); match(COMMIT);
				setState(3029); match(DELETE_P);
				setState(3030); match(ROWS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3031); match(ON);
				setState(3032); match(COMMIT);
				setState(3033); match(PRESERVE);
				setState(3034); match(ROWS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceContext optTableSpace() throws RecognitionException {
		OptTableSpaceContext _localctx = new OptTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_optTableSpace);
		try {
			setState(3041);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3038); match(TABLESPACE);
				setState(3039); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConsTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConsTableSpaceContext optConsTableSpace() throws RecognitionException {
		OptConsTableSpaceContext _localctx = new OptConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_optConsTableSpace);
		try {
			setState(3048);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3043); match(USING);
				setState(3044); match(INDEX);
				setState(3045); match(TABLESPACE);
				setState(3046); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public ExistingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExistingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExistingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExistingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingIndexContext existingIndex() throws RecognitionException {
		ExistingIndexContext _localctx = new ExistingIndexContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_existingIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050); match(USING);
			setState(3051); match(INDEX);
			setState(3052); index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAsStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public CreateAsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAsStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateAsStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateAsStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateAsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAsStmtContext createAsStmt() throws RecognitionException {
		CreateAsStmtContext _localctx = new CreateAsStmtContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createAsStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054); match(CREATE);
			setState(3055); optTemp();
			setState(3056); match(TABLE);
			setState(3057); create_as_target();
			setState(3058); match(AS);
			setState(3059); selectStmt();
			setState(3060); opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062); qualified_name();
			setState(3063); opt_column_list();
			setState(3064); optWith();
			setState(3065); onCommitOption();
			setState(3066); optTableSpace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_opt_with_data);
		try {
			setState(3074);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3068); match(WITH);
				setState(3069); match(DATA_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3070); match(WITH);
				setState(3071); match(NO);
				setState(3072); match(DATA_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSeqStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptseqOptListContext optseqOptList() {
			return getRuleContext(OptseqOptListContext.class,0);
		}
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public CreateSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSeqStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateSeqStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateSeqStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSeqStmtContext createSeqStmt() throws RecognitionException {
		CreateSeqStmtContext _localctx = new CreateSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_createSeqStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3076); match(CREATE);
			setState(3077); optTemp();
			setState(3078); match(SEQUENCE);
			setState(3079); qualified_name();
			setState(3080); optseqOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSeqStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public AlterSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSeqStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterSeqStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterSeqStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSeqStmtContext alterSeqStmt() throws RecognitionException {
		AlterSeqStmtContext _localctx = new AlterSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alterSeqStmt);
		try {
			setState(3094);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3082); match(ALTER);
				setState(3083); match(SEQUENCE);
				setState(3084); qualified_name();
				setState(3085); seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3087); match(ALTER);
				setState(3088); match(SEQUENCE);
				setState(3089); match(IF_P);
				setState(3090); match(EXISTS);
				setState(3091); qualified_name();
				setState(3092); seqOptList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptseqOptListContext extends ParserRuleContext {
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public OptseqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptseqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptseqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptseqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqOptListContext optseqOptList() throws RecognitionException {
		OptseqOptListContext _localctx = new OptseqOptListContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_optseqOptList);
		try {
			setState(3098);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3096); seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		return seqOptList(0);
	}

	private SeqOptListContext seqOptList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, _parentState);
		SeqOptListContext _prevctx = _localctx;
		int _startState = 394;
		enterRecursionRule(_localctx, 394, RULE_seqOptList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3101); seqOptElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3107);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqOptListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_seqOptList);
					setState(3103);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3104); seqOptElem();
					}
					} 
				}
				setState(3109);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode RESTART() { return getToken(PlPgSqlParser.RESTART, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlPgSqlParser.MAXVALUE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(PlPgSqlParser.INCREMENT, 0); }
		public TerminalNode START() { return getToken(PlPgSqlParser.START, 0); }
		public TerminalNode MINVALUE() { return getToken(PlPgSqlParser.MINVALUE, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(PlPgSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlPgSqlParser.CACHE, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_seqOptElem);
		int _la;
		try {
			setState(3141);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3110); match(CACHE);
				setState(3111); numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3112); match(CYCLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3113); match(NO);
				setState(3114); match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3115); match(INCREMENT);
				setState(3116); opt_by();
				setState(3117); numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3119); match(MAXVALUE);
				setState(3120); numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3121); match(MINVALUE);
				setState(3122); numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3123); match(NO);
				setState(3124); match(MAXVALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3125); match(NO);
				setState(3126); match(MINVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3127); match(OWNED);
				setState(3128); match(BY);
				setState(3129); any_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3130); match(START);
				setState(3132);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3131); match(WITH);
					}
				}

				setState(3134); numericOnly();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3135); match(RESTART);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3136); match(RESTART);
				setState(3138);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3137); match(WITH);
					}
				}

				setState(3140); numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_opt_by);
		try {
			setState(3145);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3143); match(BY);
				}
				break;
			case T__11:
			case T__10:
			case ICONST:
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_numericOnly);
		try {
			setState(3151);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3147); match(FCONST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3148); match(T__10);
				setState(3149); match(FCONST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3150); signedIconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnly_listContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public NumericOnly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterNumericOnly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitNumericOnly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumericOnly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnly_listContext numericOnly_list() throws RecognitionException {
		return numericOnly_list(0);
	}

	private NumericOnly_listContext numericOnly_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NumericOnly_listContext _localctx = new NumericOnly_listContext(_ctx, _parentState);
		NumericOnly_listContext _prevctx = _localctx;
		int _startState = 402;
		enterRecursionRule(_localctx, 402, RULE_numericOnly_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3154); numericOnly();
			}
			_ctx.stop = _input.LT(-1);
			setState(3161);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NumericOnly_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numericOnly_list);
					setState(3156);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3157); match(T__12);
					setState(3158); numericOnly();
					}
					} 
				}
				setState(3163);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CreatePLangStmtContext extends ParserRuleContext {
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PlPgSqlParser.HANDLER, 0); }
		public CreatePLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPLangStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatePLangStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatePLangStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatePLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePLangStmtContext createPLangStmt() throws RecognitionException {
		CreatePLangStmtContext _localctx = new CreatePLangStmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_createPLangStmt);
		try {
			setState(3182);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3164); match(CREATE);
				setState(3165); opt_or_replace();
				setState(3166); opt_trusted();
				setState(3167); opt_procedural();
				setState(3168); match(LANGUAGE);
				setState(3169); colId_or_Sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3171); match(CREATE);
				setState(3172); opt_or_replace();
				setState(3173); opt_trusted();
				setState(3174); opt_procedural();
				setState(3175); match(LANGUAGE);
				setState(3176); colId_or_Sconst();
				setState(3177); match(HANDLER);
				setState(3178); handler_name();
				setState(3179); opt_inline_handler();
				setState(3180); opt_validator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PlPgSqlParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_opt_trusted);
		try {
			setState(3186);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3184); match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_handler_name);
		try {
			setState(3192);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3188); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3189); name();
				setState(3190); attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PlPgSqlParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_opt_inline_handler);
		try {
			setState(3197);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3194); match(INLINE_P);
				setState(3195); handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PlPgSqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_validator_clause);
		try {
			setState(3203);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3199); match(VALIDATOR);
				setState(3200); handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3201); match(NO);
				setState(3202); match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_opt_validator);
		try {
			setState(3207);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3205); validator_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPLangStmtContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropPLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPLangStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropPLangStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropPLangStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropPLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPLangStmtContext dropPLangStmt() throws RecognitionException {
		DropPLangStmtContext _localctx = new DropPLangStmtContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_dropPLangStmt);
		try {
			setState(3223);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3209); match(DROP);
				setState(3210); opt_procedural();
				setState(3211); match(LANGUAGE);
				setState(3212); colId_or_Sconst();
				setState(3213); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3215); match(DROP);
				setState(3216); opt_procedural();
				setState(3217); match(LANGUAGE);
				setState(3218); match(IF_P);
				setState(3219); match(EXISTS);
				setState(3220); colId_or_Sconst();
				setState(3221); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PlPgSqlParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_opt_procedural);
		try {
			setState(3227);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3225); match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public OptTableSpaceOwnerContext optTableSpaceOwner() {
			return getRuleContext(OptTableSpaceOwnerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PlPgSqlParser.LOCATION, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpaceStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateTableSpaceStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateTableSpaceStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpaceStmtContext createTableSpaceStmt() throws RecognitionException {
		CreateTableSpaceStmtContext _localctx = new CreateTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_createTableSpaceStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3229); match(CREATE);
			setState(3230); match(TABLESPACE);
			setState(3231); name();
			setState(3232); optTableSpaceOwner();
			setState(3233); match(LOCATION);
			setState(3234); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceOwnerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpaceOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptTableSpaceOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptTableSpaceOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableSpaceOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceOwnerContext optTableSpaceOwner() throws RecognitionException {
		OptTableSpaceOwnerContext _localctx = new OptTableSpaceOwnerContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_optTableSpaceOwner);
		try {
			setState(3239);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3236); match(OWNER);
				setState(3237); name();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpaceStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropTableSpaceStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropTableSpaceStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceStmtContext dropTableSpaceStmt() throws RecognitionException {
		DropTableSpaceStmtContext _localctx = new DropTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dropTableSpaceStmt);
		try {
			setState(3249);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3241); match(DROP);
				setState(3242); match(TABLESPACE);
				setState(3243); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3244); match(DROP);
				setState(3245); match(TABLESPACE);
				setState(3246); match(IF_P);
				setState(3247); match(EXISTS);
				setState(3248); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateExtensionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateExtensionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionStmtContext createExtensionStmt() throws RecognitionException {
		CreateExtensionStmtContext _localctx = new CreateExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_createExtensionStmt);
		try {
			setState(3270);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3251); match(CREATE);
				setState(3252); match(EXTENSION);
				setState(3253); name();
				setState(3255);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(3254); match(WITH);
					}
					break;
				}
				setState(3257); create_extension_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3259); match(CREATE);
				setState(3260); match(EXTENSION);
				setState(3261); match(IF_P);
				setState(3262); match(NOT);
				setState(3263); match(EXISTS);
				setState(3264); name();
				setState(3266);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(3265); match(WITH);
					}
					break;
				}
				setState(3268); create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public Create_extension_opt_itemContext create_extension_opt_item() {
			return getRuleContext(Create_extension_opt_itemContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 428;
		enterRecursionRule(_localctx, 428, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3277);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					setState(3273);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3274); create_extension_opt_item();
					}
					} 
				}
				setState(3279);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_create_extension_opt_item);
		try {
			setState(3286);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3280); match(SCHEMA);
				setState(3281); name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3282); match(VERSION_P);
				setState(3283); colId_or_Sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3284); match(FROM);
				setState(3285); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionStmtContext extends ParserRuleContext {
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterExtensionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterExtensionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionStmtContext alterExtensionStmt() throws RecognitionException {
		AlterExtensionStmtContext _localctx = new AlterExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_alterExtensionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3288); match(ALTER);
			setState(3289); match(EXTENSION);
			setState(3290); name();
			setState(3291); match(UPDATE);
			setState(3292); alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return getRuleContext(Alter_extension_opt_itemContext.class,0);
		}
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 434;
		enterRecursionRule(_localctx, 434, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3299);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					setState(3295);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3296); alter_extension_opt_item();
					}
					} 
				}
				setState(3301);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3302); match(TO);
			setState(3303); colId_or_Sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContentsStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterExtensionContentsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionContentsStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterExtensionContentsStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterExtensionContentsStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterExtensionContentsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContentsStmtContext alterExtensionContentsStmt() throws RecognitionException {
		AlterExtensionContentsStmtContext _localctx = new AlterExtensionContentsStmtContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_alterExtensionContentsStmt);
		try {
			setState(3483);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3305); match(ALTER);
				setState(3306); match(EXTENSION);
				setState(3307); name();
				setState(3308); add_drop();
				setState(3309); match(AGGREGATE);
				setState(3310); func_name();
				setState(3311); aggr_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3313); match(ALTER);
				setState(3314); match(EXTENSION);
				setState(3315); name();
				setState(3316); add_drop();
				setState(3317); match(CAST);
				setState(3318); match(T__7);
				setState(3319); typename();
				setState(3320); match(AS);
				setState(3321); typename();
				setState(3322); match(T__13);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3324); match(ALTER);
				setState(3325); match(EXTENSION);
				setState(3326); name();
				setState(3327); add_drop();
				setState(3328); match(COLLATION);
				setState(3329); any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3331); match(ALTER);
				setState(3332); match(EXTENSION);
				setState(3333); name();
				setState(3334); add_drop();
				setState(3335); match(CONVERSION_P);
				setState(3336); any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3338); match(ALTER);
				setState(3339); match(EXTENSION);
				setState(3340); name();
				setState(3341); add_drop();
				setState(3342); match(DOMAIN_P);
				setState(3343); any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3345); match(ALTER);
				setState(3346); match(EXTENSION);
				setState(3347); name();
				setState(3348); add_drop();
				setState(3349); match(FUNCTION);
				setState(3350); function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3352); match(ALTER);
				setState(3353); match(EXTENSION);
				setState(3354); name();
				setState(3355); add_drop();
				setState(3356); opt_procedural();
				setState(3357); match(LANGUAGE);
				setState(3358); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3360); match(ALTER);
				setState(3361); match(EXTENSION);
				setState(3362); name();
				setState(3363); add_drop();
				setState(3364); match(OPERATOR);
				setState(3365); any_operator();
				setState(3366); oper_argtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3368); match(ALTER);
				setState(3369); match(EXTENSION);
				setState(3370); name();
				setState(3371); add_drop();
				setState(3372); match(OPERATOR);
				setState(3373); match(CLASS);
				setState(3374); any_name();
				setState(3375); match(USING);
				setState(3376); access_method();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3378); match(ALTER);
				setState(3379); match(EXTENSION);
				setState(3380); name();
				setState(3381); add_drop();
				setState(3382); match(OPERATOR);
				setState(3383); match(FAMILY);
				setState(3384); any_name();
				setState(3385); match(USING);
				setState(3386); access_method();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3388); match(ALTER);
				setState(3389); match(EXTENSION);
				setState(3390); name();
				setState(3391); add_drop();
				setState(3392); match(SCHEMA);
				setState(3393); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3395); match(ALTER);
				setState(3396); match(EXTENSION);
				setState(3397); name();
				setState(3398); add_drop();
				setState(3399); match(TABLE);
				setState(3400); any_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3402); match(ALTER);
				setState(3403); match(EXTENSION);
				setState(3404); name();
				setState(3405); add_drop();
				setState(3406); match(TEXT_P);
				setState(3407); match(SEARCH);
				setState(3408); match(PARSER);
				setState(3409); any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3411); match(ALTER);
				setState(3412); match(EXTENSION);
				setState(3413); name();
				setState(3414); add_drop();
				setState(3415); match(TEXT_P);
				setState(3416); match(SEARCH);
				setState(3417); match(DICTIONARY);
				setState(3418); any_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3420); match(ALTER);
				setState(3421); match(EXTENSION);
				setState(3422); name();
				setState(3423); add_drop();
				setState(3424); match(TEXT_P);
				setState(3425); match(SEARCH);
				setState(3426); match(TEMPLATE);
				setState(3427); any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3429); match(ALTER);
				setState(3430); match(EXTENSION);
				setState(3431); name();
				setState(3432); add_drop();
				setState(3433); match(TEXT_P);
				setState(3434); match(SEARCH);
				setState(3435); match(CONFIGURATION);
				setState(3436); any_name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3438); match(ALTER);
				setState(3439); match(EXTENSION);
				setState(3440); name();
				setState(3441); add_drop();
				setState(3442); match(SEQUENCE);
				setState(3443); any_name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3445); match(ALTER);
				setState(3446); match(EXTENSION);
				setState(3447); name();
				setState(3448); add_drop();
				setState(3449); match(VIEW);
				setState(3450); any_name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3452); match(ALTER);
				setState(3453); match(EXTENSION);
				setState(3454); name();
				setState(3455); add_drop();
				setState(3456); match(FOREIGN);
				setState(3457); match(TABLE);
				setState(3458); any_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3460); match(ALTER);
				setState(3461); match(EXTENSION);
				setState(3462); name();
				setState(3463); add_drop();
				setState(3464); match(FOREIGN);
				setState(3465); match(DATA_P);
				setState(3466); match(WRAPPER);
				setState(3467); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3469); match(ALTER);
				setState(3470); match(EXTENSION);
				setState(3471); name();
				setState(3472); add_drop();
				setState(3473); match(SERVER);
				setState(3474); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3476); match(ALTER);
				setState(3477); match(EXTENSION);
				setState(3478); name();
				setState(3479); add_drop();
				setState(3480); match(TYPE_P);
				setState(3481); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFdwStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public CreateFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFdwStmtContext createFdwStmt() throws RecognitionException {
		CreateFdwStmtContext _localctx = new CreateFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_createFdwStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3485); match(CREATE);
			setState(3486); match(FOREIGN);
			setState(3487); match(DATA_P);
			setState(3488); match(WRAPPER);
			setState(3489); name();
			setState(3490); opt_fdw_options();
			setState(3491); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PlPgSqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PlPgSqlParser.HANDLER, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_fdw_option);
		try {
			setState(3501);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3493); match(HANDLER);
				setState(3494); handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3495); match(NO);
				setState(3496); match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3497); match(VALIDATOR);
				setState(3498); handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3499); match(NO);
				setState(3500); match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionContext fdw_option() {
			return getRuleContext(Fdw_optionContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 444;
		enterRecursionRule(_localctx, 444, RULE_fdw_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3504); fdw_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(3510);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					setState(3506);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3507); fdw_option();
					}
					} 
				}
				setState(3512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_opt_fdw_options);
		try {
			setState(3515);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3513); fdw_options(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFdwStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public DropFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFdwStmtContext dropFdwStmt() throws RecognitionException {
		DropFdwStmtContext _localctx = new DropFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_dropFdwStmt);
		try {
			setState(3533);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3517); match(DROP);
				setState(3518); match(FOREIGN);
				setState(3519); match(DATA_P);
				setState(3520); match(WRAPPER);
				setState(3521); name();
				setState(3522); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3524); match(DROP);
				setState(3525); match(FOREIGN);
				setState(3526); match(DATA_P);
				setState(3527); match(WRAPPER);
				setState(3528); match(IF_P);
				setState(3529); match(EXISTS);
				setState(3530); name();
				setState(3531); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFdwStmtContext extends ParserRuleContext {
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public AlterFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFdwStmtContext alterFdwStmt() throws RecognitionException {
		AlterFdwStmtContext _localctx = new AlterFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_alterFdwStmt);
		try {
			setState(3550);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3535); match(ALTER);
				setState(3536); match(FOREIGN);
				setState(3537); match(DATA_P);
				setState(3538); match(WRAPPER);
				setState(3539); name();
				setState(3540); opt_fdw_options();
				setState(3541); alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3543); match(ALTER);
				setState(3544); match(FOREIGN);
				setState(3545); match(DATA_P);
				setState(3546); match(WRAPPER);
				setState(3547); name();
				setState(3548); fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_create_generic_options);
		try {
			setState(3558);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3552); match(OPTIONS);
				setState(3553); match(T__7);
				setState(3554); generic_option_list(0);
				setState(3555); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 454;
		enterRecursionRule(_localctx, 454, RULE_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3561); generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3568);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					setState(3563);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3564); match(T__12);
					setState(3565); generic_option_elem();
					}
					} 
				}
				setState(3570);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3571); match(OPTIONS);
			setState(3572); match(T__7);
			setState(3573); alter_generic_option_list(0);
			setState(3574); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem() {
			return getRuleContext(Alter_generic_option_elemContext.class,0);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 458;
		enterRecursionRule(_localctx, 458, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3577); alter_generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					setState(3579);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3580); match(T__12);
					setState(3581); alter_generic_option_elem();
					}
					} 
				}
				setState(3586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_alter_generic_option_elem);
		try {
			setState(3594);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BOTH:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case CHECK:
			case COALESCE:
			case COLLATE:
			case COLLATION:
			case COLUMN:
			case CONCURRENTLY:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END_P:
			case EXCEPT:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FETCH:
			case FLOAT_P:
			case FOR:
			case FOREIGN:
			case FREEZE:
			case FROM:
			case FULL:
			case GRANT:
			case GREATEST:
			case GROUP_P:
			case HAVING:
			case ILIKE:
			case IN_P:
			case INITIALLY:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case LEADING:
			case LEAST:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOT:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case PLACING:
			case POSITION:
			case PRECISION:
			case PRIMARY:
			case REAL:
			case REFERENCES:
			case RETURNING:
			case RIGHT:
			case ROW:
			case SELECT:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SOME:
			case SUBSTRING:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VALUES:
			case VARCHAR:
			case VARIADIC:
			case VERBOSE:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3587); generic_option_elem();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3588); match(SET);
				setState(3589); generic_option_elem();
				}
				break;
			case ADD_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(3590); match(ADD_P);
				setState(3591); generic_option_elem();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 4);
				{
				setState(3592); match(DROP);
				setState(3593); generic_option_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596); generic_option_name();
			setState(3597); generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599); colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public CreateForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignServerStmtContext createForeignServerStmt() throws RecognitionException {
		CreateForeignServerStmtContext _localctx = new CreateForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_createForeignServerStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603); match(CREATE);
			setState(3604); match(SERVER);
			setState(3605); name();
			setState(3606); opt_type();
			setState(3607); opt_foreign_server_version();
			setState(3608); match(FOREIGN);
			setState(3609); match(DATA_P);
			setState(3610); match(WRAPPER);
			setState(3611); name();
			setState(3612); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_opt_type);
		try {
			setState(3617);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3614); match(TYPE_P);
				setState(3615); sConst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_foreign_server_version);
		try {
			setState(3623);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3619); match(VERSION_P);
				setState(3620); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3621); match(VERSION_P);
				setState(3622); match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_opt_foreign_server_version);
		try {
			setState(3627);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3625); foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignServerStmtContext dropForeignServerStmt() throws RecognitionException {
		DropForeignServerStmtContext _localctx = new DropForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_dropForeignServerStmt);
		try {
			setState(3641);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3629); match(DROP);
				setState(3630); match(SERVER);
				setState(3631); name();
				setState(3632); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3634); match(DROP);
				setState(3635); match(SERVER);
				setState(3636); match(IF_P);
				setState(3637); match(EXISTS);
				setState(3638); name();
				setState(3639); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignServerStmtContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignServerStmtContext alterForeignServerStmt() throws RecognitionException {
		AlterForeignServerStmtContext _localctx = new AlterForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_alterForeignServerStmt);
		try {
			setState(3659);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643); match(ALTER);
				setState(3644); match(SERVER);
				setState(3645); name();
				setState(3646); foreign_server_version();
				setState(3647); alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3649); match(ALTER);
				setState(3650); match(SERVER);
				setState(3651); name();
				setState(3652); foreign_server_version();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3654); match(ALTER);
				setState(3655); match(SERVER);
				setState(3656); name();
				setState(3657); alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public OptforeigntableElementListContext optforeigntableElementList() {
			return getRuleContext(OptforeigntableElementListContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateForeignTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateForeignTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableStmtContext createForeignTableStmt() throws RecognitionException {
		CreateForeignTableStmtContext _localctx = new CreateForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_createForeignTableStmt);
		try {
			setState(3682);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3661); match(CREATE);
				setState(3662); match(FOREIGN);
				setState(3663); match(TABLE);
				setState(3664); qualified_name();
				setState(3665); optforeigntableElementList();
				setState(3666); match(SERVER);
				setState(3667); name();
				setState(3668); create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3670); match(CREATE);
				setState(3671); match(FOREIGN);
				setState(3672); match(TABLE);
				setState(3673); match(IF_P);
				setState(3674); match(NOT);
				setState(3675); match(EXISTS);
				setState(3676); qualified_name();
				setState(3677); optforeigntableElementList();
				setState(3678); match(SERVER);
				setState(3679); name();
				setState(3680); create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptforeigntableElementListContext extends ParserRuleContext {
		public ForeigntableElementListContext foreigntableElementList() {
			return getRuleContext(ForeigntableElementListContext.class,0);
		}
		public OptforeigntableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optforeigntableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptforeigntableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptforeigntableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptforeigntableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptforeigntableElementListContext optforeigntableElementList() throws RecognitionException {
		OptforeigntableElementListContext _localctx = new OptforeigntableElementListContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_optforeigntableElementList);
		try {
			setState(3690);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3684); match(T__7);
				setState(3685); foreigntableElementList(0);
				setState(3686); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3688); match(T__7);
				setState(3689); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeigntableElementListContext extends ParserRuleContext {
		public ForeigntableElementListContext foreigntableElementList() {
			return getRuleContext(ForeigntableElementListContext.class,0);
		}
		public ForeigntableElementContext foreigntableElement() {
			return getRuleContext(ForeigntableElementContext.class,0);
		}
		public ForeigntableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreigntableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterForeigntableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitForeigntableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeigntableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeigntableElementListContext foreigntableElementList() throws RecognitionException {
		return foreigntableElementList(0);
	}

	private ForeigntableElementListContext foreigntableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForeigntableElementListContext _localctx = new ForeigntableElementListContext(_ctx, _parentState);
		ForeigntableElementListContext _prevctx = _localctx;
		int _startState = 484;
		enterRecursionRule(_localctx, 484, RULE_foreigntableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3693); foreigntableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3700);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForeigntableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_foreigntableElementList);
					setState(3695);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3696); match(T__12);
					setState(3697); foreigntableElement();
					}
					} 
				}
				setState(3702);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForeigntableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public ForeigntableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreigntableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterForeigntableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitForeigntableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeigntableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeigntableElementContext foreigntableElement() throws RecognitionException {
		ForeigntableElementContext _localctx = new ForeigntableElementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_foreigntableElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3703); columnDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public AlterForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterForeignTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterForeignTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableStmtContext alterForeignTableStmt() throws RecognitionException {
		AlterForeignTableStmtContext _localctx = new AlterForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_alterForeignTableStmt);
		try {
			setState(3719);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3705); match(ALTER);
				setState(3706); match(FOREIGN);
				setState(3707); match(TABLE);
				setState(3708); relation_expr();
				setState(3709); alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3711); match(ALTER);
				setState(3712); match(FOREIGN);
				setState(3713); match(TABLE);
				setState(3714); match(IF_P);
				setState(3715); match(EXISTS);
				setState(3716); relation_expr();
				setState(3717); alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingStmtContext createUserMappingStmt() throws RecognitionException {
		CreateUserMappingStmtContext _localctx = new CreateUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_createUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3721); match(CREATE);
			setState(3722); match(USER);
			setState(3723); match(MAPPING);
			setState(3724); match(FOR);
			setState(3725); auth_ident();
			setState(3726); match(SERVER);
			setState(3727); name();
			setState(3728); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_auth_ident);
		try {
			setState(3733);
			switch (_input.LA(1)) {
			case CURRENT_USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3730); match(CURRENT_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3731); match(USER);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3732); roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingStmtContext dropUserMappingStmt() throws RecognitionException {
		DropUserMappingStmtContext _localctx = new DropUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_dropUserMappingStmt);
		try {
			setState(3753);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3735); match(DROP);
				setState(3736); match(USER);
				setState(3737); match(MAPPING);
				setState(3738); match(FOR);
				setState(3739); auth_ident();
				setState(3740); match(SERVER);
				setState(3741); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3743); match(DROP);
				setState(3744); match(USER);
				setState(3745); match(MAPPING);
				setState(3746); match(IF_P);
				setState(3747); match(EXISTS);
				setState(3748); match(FOR);
				setState(3749); auth_ident();
				setState(3750); match(SERVER);
				setState(3751); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingStmtContext alterUserMappingStmt() throws RecognitionException {
		AlterUserMappingStmtContext _localctx = new AlterUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alterUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3755); match(ALTER);
			setState(3756); match(USER);
			setState(3757); match(MAPPING);
			setState(3758); match(FOR);
			setState(3759); auth_ident();
			setState(3760); match(SERVER);
			setState(3761); name();
			setState(3762); alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTrigStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlPgSqlParser.EXECUTE, 0); }
		public OptConstrFromTableContext optConstrFromTable() {
			return getRuleContext(OptConstrFromTableContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PlPgSqlParser.PROCEDURE, 0); }
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode EACH() { return getToken(PlPgSqlParser.EACH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public CreateTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateTrigStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateTrigStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTrigStmtContext createTrigStmt() throws RecognitionException {
		CreateTrigStmtContext _localctx = new CreateTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_createTrigStmt);
		try {
			setState(3801);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3764); match(CREATE);
				setState(3765); match(TRIGGER);
				setState(3766); name();
				setState(3767); triggerActionTime();
				setState(3768); triggerEvents(0);
				setState(3769); match(ON);
				setState(3770); qualified_name();
				setState(3771); triggerForSpec();
				setState(3772); triggerWhen();
				setState(3773); match(EXECUTE);
				setState(3774); match(PROCEDURE);
				setState(3775); func_name();
				setState(3776); match(T__7);
				setState(3777); triggerFuncArgs(0);
				setState(3778); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3780); match(CREATE);
				setState(3781); match(CONSTRAINT);
				setState(3782); match(TRIGGER);
				setState(3783); name();
				setState(3784); match(AFTER);
				setState(3785); triggerEvents(0);
				setState(3786); match(ON);
				setState(3787); qualified_name();
				setState(3788); optConstrFromTable();
				setState(3789); constraintAttributeSpec(0);
				setState(3790); match(FOR);
				setState(3791); match(EACH);
				setState(3792); match(ROW);
				setState(3793); triggerWhen();
				setState(3794); match(EXECUTE);
				setState(3795); match(PROCEDURE);
				setState(3796); func_name();
				setState(3797); match(T__7);
				setState(3798); triggerFuncArgs(0);
				setState(3799); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PlPgSqlParser.INSTEAD, 0); }
		public TerminalNode BEFORE() { return getToken(PlPgSqlParser.BEFORE, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerActionTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerActionTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_triggerActionTime);
		try {
			setState(3807);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3803); match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3804); match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3805); match(INSTEAD);
				setState(3806); match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TriggerOneEventContext triggerOneEvent() {
			return getRuleContext(TriggerOneEventContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		return triggerEvents(0);
	}

	private TriggerEventsContext triggerEvents(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, _parentState);
		TriggerEventsContext _prevctx = _localctx;
		int _startState = 502;
		enterRecursionRule(_localctx, 502, RULE_triggerEvents, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3810); triggerOneEvent();
			}
			_ctx.stop = _input.LT(-1);
			setState(3817);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerEventsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerEvents);
					setState(3812);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3813); match(OR);
					setState(3814); triggerOneEvent();
					}
					} 
				}
				setState(3819);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlPgSqlParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerOneEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerOneEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_triggerOneEvent);
		try {
			setState(3827);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3820); match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3821); match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3822); match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3823); match(UPDATE);
				setState(3824); match(OF);
				setState(3825); columnList(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3826); match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TriggerForTypeContext triggerForType() {
			return getRuleContext(TriggerForTypeContext.class,0);
		}
		public TriggerForOptEachContext triggerForOptEach() {
			return getRuleContext(TriggerForOptEachContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerForSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerForSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_triggerForSpec);
		try {
			setState(3834);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3829); match(FOR);
				setState(3830); triggerForOptEach();
				setState(3831); triggerForType();
				}
				break;
			case EXECUTE:
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForOptEachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PlPgSqlParser.EACH, 0); }
		public TriggerForOptEachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForOptEach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerForOptEach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerForOptEach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForOptEach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForOptEachContext triggerForOptEach() throws RecognitionException {
		TriggerForOptEachContext _localctx = new TriggerForOptEachContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_triggerForOptEach);
		try {
			setState(3838);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3836); match(EACH);
				}
				break;
			case ROW:
			case STATEMENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForTypeContext extends ParserRuleContext {
		public TerminalNode STATEMENT() { return getToken(PlPgSqlParser.STATEMENT, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TriggerForTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerForType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerForType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForTypeContext triggerForType() throws RecognitionException {
		TriggerForTypeContext _localctx = new TriggerForTypeContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_triggerForType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_triggerWhen);
		try {
			setState(3848);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3842); match(WHEN);
				setState(3843); match(T__7);
				setState(3844); a_expr(0);
				setState(3845); match(T__13);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public TriggerFuncArgContext triggerFuncArg() {
			return getRuleContext(TriggerFuncArgContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		return triggerFuncArgs(0);
	}

	private TriggerFuncArgsContext triggerFuncArgs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, _parentState);
		TriggerFuncArgsContext _prevctx = _localctx;
		int _startState = 514;
		enterRecursionRule(_localctx, 514, RULE_triggerFuncArgs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3853);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(3851); triggerFuncArg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerFuncArgsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerFuncArgs);
					setState(3855);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3856); match(T__12);
					setState(3857); triggerFuncArg();
					}
					} 
				}
				setState(3862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTriggerFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTriggerFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_triggerFuncArg);
		try {
			setState(3867);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3863); iConst();
				}
				break;
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(3864); match(FCONST);
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 3);
				{
				setState(3865); sConst();
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BOTH:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case CHECK:
			case COALESCE:
			case COLLATE:
			case COLLATION:
			case COLUMN:
			case CONCURRENTLY:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END_P:
			case EXCEPT:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FETCH:
			case FLOAT_P:
			case FOR:
			case FOREIGN:
			case FREEZE:
			case FROM:
			case FULL:
			case GRANT:
			case GREATEST:
			case GROUP_P:
			case HAVING:
			case ILIKE:
			case IN_P:
			case INITIALLY:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case LEADING:
			case LEAST:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOT:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case PLACING:
			case POSITION:
			case PRECISION:
			case PRIMARY:
			case REAL:
			case REFERENCES:
			case RETURNING:
			case RIGHT:
			case ROW:
			case SELECT:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SOME:
			case SUBSTRING:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VALUES:
			case VARCHAR:
			case VARIADIC:
			case VERBOSE:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3866); colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConstrFromTableContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public OptConstrFromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConstrFromTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptConstrFromTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptConstrFromTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptConstrFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConstrFromTableContext optConstrFromTable() throws RecognitionException {
		OptConstrFromTableContext _localctx = new OptConstrFromTableContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_optConstrFromTable);
		try {
			setState(3872);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3869); match(FROM);
				setState(3870); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public ConstraintAttributeElemContext constraintAttributeElem() {
			return getRuleContext(ConstraintAttributeElemContext.class,0);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraintAttributeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraintAttributeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		return constraintAttributeSpec(0);
	}

	private ConstraintAttributeSpecContext constraintAttributeSpec(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, _parentState);
		ConstraintAttributeSpecContext _prevctx = _localctx;
		int _startState = 520;
		enterRecursionRule(_localctx, 520, RULE_constraintAttributeSpec, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3879);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintAttributeSpecContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_constraintAttributeSpec);
					setState(3875);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3876); constraintAttributeElem();
					}
					} 
				}
				setState(3881);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PlPgSqlParser.VALID, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstraintAttributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstraintAttributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_constraintAttributeElem);
		try {
			setState(3893);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3882); match(NOT);
				setState(3883); match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3884); match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3885); match(INITIALLY);
				setState(3886); match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3887); match(INITIALLY);
				setState(3888); match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3889); match(NOT);
				setState(3890); match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3891); match(NO);
				setState(3892); match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTrigStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropTrigStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropTrigStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTrigStmtContext dropTrigStmt() throws RecognitionException {
		DropTrigStmtContext _localctx = new DropTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_dropTrigStmt);
		try {
			setState(3911);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3895); match(DROP);
				setState(3896); match(TRIGGER);
				setState(3897); name();
				setState(3898); match(ON);
				setState(3899); any_name();
				setState(3900); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3902); match(DROP);
				setState(3903); match(TRIGGER);
				setState(3904); match(IF_P);
				setState(3905); match(EXISTS);
				setState(3906); name();
				setState(3907); match(ON);
				setState(3908); any_name();
				setState(3909); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAssertStmtContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ASSERTION() { return getToken(PlPgSqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAssertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateAssertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateAssertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAssertStmtContext createAssertStmt() throws RecognitionException {
		CreateAssertStmtContext _localctx = new CreateAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_createAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913); match(CREATE);
			setState(3914); match(ASSERTION);
			setState(3915); name();
			setState(3916); match(CHECK);
			setState(3917); match(T__7);
			setState(3918); a_expr(0);
			setState(3919); match(T__13);
			setState(3920); constraintAttributeSpec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAssertStmtContext extends ParserRuleContext {
		public TerminalNode ASSERTION() { return getToken(PlPgSqlParser.ASSERTION, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAssertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropAssertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropAssertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAssertStmtContext dropAssertStmt() throws RecognitionException {
		DropAssertStmtContext _localctx = new DropAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_dropAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922); match(DROP);
			setState(3923); match(ASSERTION);
			setState(3924); name();
			setState(3925); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineStmtContext extends ParserRuleContext {
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode RANGE() { return getToken(PlPgSqlParser.RANGE, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public OpttableFuncElementListContext opttableFuncElementList() {
			return getRuleContext(OpttableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM_P() { return getToken(PlPgSqlParser.ENUM_P, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public DefineStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefineStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefineStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefineStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineStmtContext defineStmt() throws RecognitionException {
		DefineStmtContext _localctx = new DefineStmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_defineStmt);
		try {
			setState(4014);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3927); match(CREATE);
				setState(3928); match(AGGREGATE);
				setState(3929); func_name();
				setState(3930); aggr_args();
				setState(3931); definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3933); match(CREATE);
				setState(3934); match(AGGREGATE);
				setState(3935); func_name();
				setState(3936); old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3938); match(CREATE);
				setState(3939); match(OPERATOR);
				setState(3940); any_operator();
				setState(3941); definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3943); match(CREATE);
				setState(3944); match(TYPE_P);
				setState(3945); any_name();
				setState(3946); definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3948); match(CREATE);
				setState(3949); match(TYPE_P);
				setState(3950); any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3951); match(CREATE);
				setState(3952); match(TYPE_P);
				setState(3953); any_name();
				setState(3954); match(AS);
				setState(3955); match(T__7);
				setState(3956); opttableFuncElementList();
				setState(3957); match(T__13);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3959); match(CREATE);
				setState(3960); match(TYPE_P);
				setState(3961); any_name();
				setState(3962); match(AS);
				setState(3963); match(ENUM_P);
				setState(3964); match(T__7);
				setState(3965); opt_enum_val_list();
				setState(3966); match(T__13);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3968); match(CREATE);
				setState(3969); match(TYPE_P);
				setState(3970); any_name();
				setState(3971); match(AS);
				setState(3972); match(RANGE);
				setState(3973); definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3975); match(CREATE);
				setState(3976); match(TEXT_P);
				setState(3977); match(SEARCH);
				setState(3978); match(PARSER);
				setState(3979); any_name();
				setState(3980); definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3982); match(CREATE);
				setState(3983); match(TEXT_P);
				setState(3984); match(SEARCH);
				setState(3985); match(DICTIONARY);
				setState(3986); any_name();
				setState(3987); definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3989); match(CREATE);
				setState(3990); match(TEXT_P);
				setState(3991); match(SEARCH);
				setState(3992); match(TEMPLATE);
				setState(3993); any_name();
				setState(3994); definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3996); match(CREATE);
				setState(3997); match(TEXT_P);
				setState(3998); match(SEARCH);
				setState(3999); match(CONFIGURATION);
				setState(4000); any_name();
				setState(4001); definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4003); match(CREATE);
				setState(4004); match(COLLATION);
				setState(4005); any_name();
				setState(4006); definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4008); match(CREATE);
				setState(4009); match(COLLATION);
				setState(4010); any_name();
				setState(4011); match(FROM);
				setState(4012); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016); match(T__7);
			setState(4017); def_list(0);
			setState(4018); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public Def_elemContext def_elem() {
			return getRuleContext(Def_elemContext.class,0);
		}
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Def_listContext _localctx = new Def_listContext(_ctx, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 534;
		enterRecursionRule(_localctx, 534, RULE_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4021); def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4028);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_def_list);
					setState(4023);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4024); match(T__12);
					setState(4025); def_elem();
					}
					} 
				}
				setState(4030);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_def_elem);
		try {
			setState(4036);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4031); colLabel();
				setState(4032); match(T__4);
				setState(4033); def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4035); colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_def_arg);
		try {
			setState(4043);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4038); func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4039); reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4040); qual_all_Op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4041); numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4042); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_aggr_args);
		try {
			setState(4052);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4045); match(T__7);
				setState(4046); type_list(0);
				setState(4047); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4049); match(T__7);
				setState(4050); match(T__9);
				setState(4051); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054); match(T__7);
			setState(4055); old_aggr_list(0);
			setState(4056); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_elemContext old_aggr_elem() {
			return getRuleContext(Old_aggr_elemContext.class,0);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 544;
		enterRecursionRule(_localctx, 544, RULE_old_aggr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4059); old_aggr_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4066);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					setState(4061);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4062); match(T__12);
					setState(4063); old_aggr_elem();
					}
					} 
				}
				setState(4068);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069); match(IDENT);
			setState(4070); match(T__4);
			setState(4071); def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_opt_enum_val_list);
		try {
			setState(4075);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4073); enum_val_list(0);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 550;
		enterRecursionRule(_localctx, 550, RULE_enum_val_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4078); sConst();
			}
			_ctx.stop = _input.LT(-1);
			setState(4085);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,194,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					setState(4080);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4081); match(T__12);
					setState(4082); sConst();
					}
					} 
				}
				setState(4087);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,194,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterEnumStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode BEFORE() { return getToken(PlPgSqlParser.BEFORE, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public AlterEnumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEnumStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterEnumStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterEnumStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterEnumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEnumStmtContext alterEnumStmt() throws RecognitionException {
		AlterEnumStmtContext _localctx = new AlterEnumStmtContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_alterEnumStmt);
		try {
			setState(4113);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4088); match(ALTER);
				setState(4089); match(TYPE_P);
				setState(4090); any_name();
				setState(4091); match(ADD_P);
				setState(4092); match(VALUE_P);
				setState(4093); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4095); match(ALTER);
				setState(4096); match(TYPE_P);
				setState(4097); any_name();
				setState(4098); match(ADD_P);
				setState(4099); match(VALUE_P);
				setState(4100); sConst();
				setState(4101); match(BEFORE);
				setState(4102); sConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4104); match(ALTER);
				setState(4105); match(TYPE_P);
				setState(4106); any_name();
				setState(4107); match(ADD_P);
				setState(4108); match(VALUE_P);
				setState(4109); sConst();
				setState(4110); match(AFTER);
				setState(4111); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpClassStmtContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public CreateOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpClassStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateOpClassStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateOpClassStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpClassStmtContext createOpClassStmt() throws RecognitionException {
		CreateOpClassStmtContext _localctx = new CreateOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_createOpClassStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115); match(CREATE);
			setState(4116); match(OPERATOR);
			setState(4117); match(CLASS);
			setState(4118); any_name();
			setState(4119); opt_default();
			setState(4120); match(FOR);
			setState(4121); match(TYPE_P);
			setState(4122); typename();
			setState(4123); match(USING);
			setState(4124); access_method();
			setState(4125); opt_opfamily();
			setState(4126); match(AS);
			setState(4127); opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Opclass_itemContext opclass_item() {
			return getRuleContext(Opclass_itemContext.class,0);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 556;
		enterRecursionRule(_localctx, 556, RULE_opclass_item_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4130); opclass_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4137);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					setState(4132);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4133); match(T__12);
					setState(4134); opclass_item();
					}
					} 
				}
				setState(4139);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_opclass_item);
		try {
			setState(4168);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4140); match(OPERATOR);
				setState(4141); iConst();
				setState(4142); any_operator();
				setState(4143); opclass_purpose();
				setState(4144); opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4146); match(OPERATOR);
				setState(4147); iConst();
				setState(4148); any_operator();
				setState(4149); oper_argtypes();
				setState(4150); opclass_purpose();
				setState(4151); opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4153); match(FUNCTION);
				setState(4154); iConst();
				setState(4155); func_name();
				setState(4156); func_args();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4158); match(FUNCTION);
				setState(4159); iConst();
				setState(4160); match(T__7);
				setState(4161); type_list(0);
				setState(4162); match(T__13);
				setState(4163); func_name();
				setState(4164); func_args();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4166); match(STORAGE);
				setState(4167); typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_opt_default);
		try {
			setState(4172);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4170); match(DEFAULT);
				}
				break;
			case CONVERSION_P:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_opt_opfamily);
		try {
			setState(4177);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4174); match(FAMILY);
				setState(4175); any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_opclass_purpose);
		try {
			setState(4186);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4179); match(FOR);
				setState(4180); match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4181); match(FOR);
				setState(4182); match(ORDER);
				setState(4183); match(BY);
				setState(4184); any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PlPgSqlParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_opt_recheck);
		try {
			setState(4190);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4188); match(RECHECK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpFamilyStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public CreateOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpFamilyStmtContext createOpFamilyStmt() throws RecognitionException {
		CreateOpFamilyStmtContext _localctx = new CreateOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_createOpFamilyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192); match(CREATE);
			setState(4193); match(OPERATOR);
			setState(4194); match(FAMILY);
			setState(4195); any_name();
			setState(4196); match(USING);
			setState(4197); access_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOpFamilyStmtContext extends ParserRuleContext {
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public AlterOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOpFamilyStmtContext alterOpFamilyStmt() throws RecognitionException {
		AlterOpFamilyStmtContext _localctx = new AlterOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_alterOpFamilyStmt);
		try {
			setState(4217);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4199); match(ALTER);
				setState(4200); match(OPERATOR);
				setState(4201); match(FAMILY);
				setState(4202); any_name();
				setState(4203); match(USING);
				setState(4204); access_method();
				setState(4205); match(ADD_P);
				setState(4206); opclass_item_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4208); match(ALTER);
				setState(4209); match(OPERATOR);
				setState(4210); match(FAMILY);
				setState(4211); any_name();
				setState(4212); match(USING);
				setState(4213); access_method();
				setState(4214); match(DROP);
				setState(4215); opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public Opclass_dropContext opclass_drop() {
			return getRuleContext(Opclass_dropContext.class,0);
		}
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 572;
		enterRecursionRule(_localctx, 572, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4220); opclass_drop();
			}
			_ctx.stop = _input.LT(-1);
			setState(4227);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					setState(4222);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4223); match(T__12);
					setState(4224); opclass_drop();
					}
					} 
				}
				setState(4229);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_opclass_drop);
		try {
			setState(4242);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4230); match(OPERATOR);
				setState(4231); iConst();
				setState(4232); match(T__7);
				setState(4233); type_list(0);
				setState(4234); match(T__13);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4236); match(FUNCTION);
				setState(4237); iConst();
				setState(4238); match(T__7);
				setState(4239); type_list(0);
				setState(4240); match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpClassStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public DropOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpClassStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropOpClassStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropOpClassStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpClassStmtContext dropOpClassStmt() throws RecognitionException {
		DropOpClassStmtContext _localctx = new DropOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_dropOpClassStmt);
		try {
			setState(4262);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4244); match(DROP);
				setState(4245); match(OPERATOR);
				setState(4246); match(CLASS);
				setState(4247); any_name();
				setState(4248); match(USING);
				setState(4249); access_method();
				setState(4250); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4252); match(DROP);
				setState(4253); match(OPERATOR);
				setState(4254); match(CLASS);
				setState(4255); match(IF_P);
				setState(4256); match(EXISTS);
				setState(4257); any_name();
				setState(4258); match(USING);
				setState(4259); access_method();
				setState(4260); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpFamilyStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public DropOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpFamilyStmtContext dropOpFamilyStmt() throws RecognitionException {
		DropOpFamilyStmtContext _localctx = new DropOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_dropOpFamilyStmt);
		try {
			setState(4282);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4264); match(DROP);
				setState(4265); match(OPERATOR);
				setState(4266); match(FAMILY);
				setState(4267); any_name();
				setState(4268); match(USING);
				setState(4269); access_method();
				setState(4270); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4272); match(DROP);
				setState(4273); match(OPERATOR);
				setState(4274); match(FAMILY);
				setState(4275); match(IF_P);
				setState(4276); match(EXISTS);
				setState(4277); any_name();
				setState(4278); match(USING);
				setState(4279); access_method();
				setState(4280); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedStmtContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwnedStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropOwnedStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropOwnedStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedStmtContext dropOwnedStmt() throws RecognitionException {
		DropOwnedStmtContext _localctx = new DropOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_dropOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4284); match(DROP);
			setState(4285); match(OWNED);
			setState(4286); match(BY);
			setState(4287); name_list(0);
			setState(4288); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignOwnedStmtContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode REASSIGN() { return getToken(PlPgSqlParser.REASSIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReassignOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwnedStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReassignOwnedStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReassignOwnedStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReassignOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedStmtContext reassignOwnedStmt() throws RecognitionException {
		ReassignOwnedStmtContext _localctx = new ReassignOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_reassignOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290); match(REASSIGN);
			setState(4291); match(OWNED);
			setState(4292); match(BY);
			setState(4293); name_list(0);
			setState(4294); match(TO);
			setState(4295); name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStmtContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStmtContext dropStmt() throws RecognitionException {
		DropStmtContext _localctx = new DropStmtContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_dropStmt);
		try {
			setState(4323);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4297); match(DROP);
				setState(4298); drop_type();
				setState(4299); match(IF_P);
				setState(4300); match(EXISTS);
				setState(4301); any_name_list(0);
				setState(4302); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4304); match(DROP);
				setState(4305); drop_type();
				setState(4306); any_name_list(0);
				setState(4307); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4309); match(DROP);
				setState(4310); match(INDEX);
				setState(4311); match(CONCURRENTLY);
				setState(4312); any_name_list(0);
				setState(4313); opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4315); match(DROP);
				setState(4316); match(INDEX);
				setState(4317); match(CONCURRENTLY);
				setState(4318); match(IF_P);
				setState(4319); match(EXISTS);
				setState(4320); any_name_list(0);
				setState(4321); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_drop_type);
		try {
			setState(4349);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4325); match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4326); match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4327); match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4328); match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4329); match(FOREIGN);
				setState(4330); match(TABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4331); match(TYPE_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4332); match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4333); match(COLLATION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4334); match(CONVERSION_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4335); match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4336); match(EXTENSION);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4337); match(TEXT_P);
				setState(4338); match(SEARCH);
				setState(4339); match(PARSER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4340); match(TEXT_P);
				setState(4341); match(SEARCH);
				setState(4342); match(DICTIONARY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4343); match(TEXT_P);
				setState(4344); match(SEARCH);
				setState(4345); match(TEMPLATE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4346); match(TEXT_P);
				setState(4347); match(SEARCH);
				setState(4348); match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 588;
		enterRecursionRule(_localctx, 588, RULE_any_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4352); any_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4359);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					setState(4354);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4355); match(T__12);
					setState(4356); any_name();
					}
					} 
				}
				setState(4361);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_any_name);
		try {
			setState(4366);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4362); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4363); colId();
				setState(4364); attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 592;
		enterRecursionRule(_localctx, 592, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4369); match(T__14);
			setState(4370); attr_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4377);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,211,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(4372);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4373); match(T__14);
					setState(4374); attr_name();
					}
					} 
				}
				setState(4379);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,211,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TruncateStmtContext extends ParserRuleContext {
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PlPgSqlParser.TRUNCATE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTruncateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTruncateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTruncateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateStmtContext truncateStmt() throws RecognitionException {
		TruncateStmtContext _localctx = new TruncateStmtContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_truncateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4380); match(TRUNCATE);
			setState(4381); opt_table();
			setState(4382); relation_expr_list(0);
			setState(4383); opt_restart_seqs();
			setState(4384); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode IDENTITY_P() { return getToken(PlPgSqlParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PlPgSqlParser.RESTART, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PlPgSqlParser.CONTINUE_P, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_opt_restart_seqs);
		try {
			setState(4391);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4386); match(CONTINUE_P);
				setState(4387); match(IDENTITY_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4388); match(RESTART);
				setState(4389); match(IDENTITY_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(PlPgSqlParser.ON); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Comment_typeContext comment_type() {
			return getRuleContext(Comment_typeContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode COMMENT() { return getToken(PlPgSqlParser.COMMENT, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ON(int i) {
			return getToken(PlPgSqlParser.ON, i);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public CommentStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCommentStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCommentStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommentStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStmtContext commentStmt() throws RecognitionException {
		CommentStmtContext _localctx = new CommentStmtContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_commentStmt);
		try {
			setState(4541);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4393); match(COMMENT);
				setState(4394); match(ON);
				setState(4395); comment_type();
				setState(4396); any_name();
				setState(4397); match(IS);
				setState(4398); comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4400); match(COMMENT);
				setState(4401); match(ON);
				setState(4402); match(AGGREGATE);
				setState(4403); func_name();
				setState(4404); aggr_args();
				setState(4405); match(IS);
				setState(4406); comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4408); match(COMMENT);
				setState(4409); match(ON);
				setState(4410); match(FUNCTION);
				setState(4411); func_name();
				setState(4412); func_args();
				setState(4413); match(IS);
				setState(4414); comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4416); match(COMMENT);
				setState(4417); match(ON);
				setState(4418); match(OPERATOR);
				setState(4419); any_operator();
				setState(4420); oper_argtypes();
				setState(4421); match(IS);
				setState(4422); comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4424); match(COMMENT);
				setState(4425); match(ON);
				setState(4426); match(CONSTRAINT);
				setState(4427); name();
				setState(4428); match(ON);
				setState(4429); any_name();
				setState(4430); match(IS);
				setState(4431); comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4433); match(COMMENT);
				setState(4434); match(ON);
				setState(4435); match(RULE);
				setState(4436); name();
				setState(4437); match(ON);
				setState(4438); any_name();
				setState(4439); match(IS);
				setState(4440); comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4442); match(COMMENT);
				setState(4443); match(ON);
				setState(4444); match(RULE);
				setState(4445); name();
				setState(4446); match(IS);
				setState(4447); comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4449); match(COMMENT);
				setState(4450); match(ON);
				setState(4451); match(TRIGGER);
				setState(4452); name();
				setState(4453); match(ON);
				setState(4454); any_name();
				setState(4455); match(IS);
				setState(4456); comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4458); match(COMMENT);
				setState(4459); match(ON);
				setState(4460); match(OPERATOR);
				setState(4461); match(CLASS);
				setState(4462); any_name();
				setState(4463); match(USING);
				setState(4464); access_method();
				setState(4465); match(IS);
				setState(4466); comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4468); match(COMMENT);
				setState(4469); match(ON);
				setState(4470); match(OPERATOR);
				setState(4471); match(FAMILY);
				setState(4472); any_name();
				setState(4473); match(USING);
				setState(4474); access_method();
				setState(4475); match(IS);
				setState(4476); comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4478); match(COMMENT);
				setState(4479); match(ON);
				setState(4480); match(LARGE_P);
				setState(4481); match(OBJECT_P);
				setState(4482); numericOnly();
				setState(4483); match(IS);
				setState(4484); comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4486); match(COMMENT);
				setState(4487); match(ON);
				setState(4488); match(CAST);
				setState(4489); match(T__7);
				setState(4490); typename();
				setState(4491); match(AS);
				setState(4492); typename();
				setState(4493); match(T__13);
				setState(4494); match(IS);
				setState(4495); comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4497); match(COMMENT);
				setState(4498); match(ON);
				setState(4499); opt_procedural();
				setState(4500); match(LANGUAGE);
				setState(4501); any_name();
				setState(4502); match(IS);
				setState(4503); comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4505); match(COMMENT);
				setState(4506); match(ON);
				setState(4507); match(TEXT_P);
				setState(4508); match(SEARCH);
				setState(4509); match(PARSER);
				setState(4510); any_name();
				setState(4511); match(IS);
				setState(4512); comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4514); match(COMMENT);
				setState(4515); match(ON);
				setState(4516); match(TEXT_P);
				setState(4517); match(SEARCH);
				setState(4518); match(DICTIONARY);
				setState(4519); any_name();
				setState(4520); match(IS);
				setState(4521); comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4523); match(COMMENT);
				setState(4524); match(ON);
				setState(4525); match(TEXT_P);
				setState(4526); match(SEARCH);
				setState(4527); match(TEMPLATE);
				setState(4528); any_name();
				setState(4529); match(IS);
				setState(4530); comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4532); match(COMMENT);
				setState(4533); match(ON);
				setState(4534); match(TEXT_P);
				setState(4535); match(SEARCH);
				setState(4536); match(CONFIGURATION);
				setState(4537); any_name();
				setState(4538); match(IS);
				setState(4539); comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_typeContext extends ParserRuleContext {
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Comment_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterComment_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitComment_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComment_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_typeContext comment_type() throws RecognitionException {
		Comment_typeContext _localctx = new Comment_typeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_comment_type);
		try {
			setState(4563);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4543); match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4544); match(DATABASE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4545); match(SCHEMA);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4546); match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4547); match(SEQUENCE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4548); match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4549); match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4550); match(TYPE_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4551); match(VIEW);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4552); match(COLLATION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4553); match(CONVERSION_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4554); match(TABLESPACE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4555); match(EXTENSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4556); match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4557); match(FOREIGN);
				setState(4558); match(TABLE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4559); match(SERVER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4560); match(FOREIGN);
				setState(4561); match(DATA_P);
				setState(4562); match(WRAPPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_comment_text);
		try {
			setState(4567);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4565); sConst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4566); match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecLabelStmtContext extends ParserRuleContext {
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Security_label_typeContext security_label_type() {
			return getRuleContext(Security_label_typeContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode LABEL() { return getToken(PlPgSqlParser.LABEL, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(PlPgSqlParser.SECURITY, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public SecLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_secLabelStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSecLabelStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSecLabelStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecLabelStmtContext secLabelStmt() throws RecognitionException {
		SecLabelStmtContext _localctx = new SecLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_secLabelStmt);
		try {
			setState(4618);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4569); match(SECURITY);
				setState(4570); match(LABEL);
				setState(4571); opt_provider();
				setState(4572); match(ON);
				setState(4573); security_label_type();
				setState(4574); any_name();
				setState(4575); match(IS);
				setState(4576); security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4578); match(SECURITY);
				setState(4579); match(LABEL);
				setState(4580); opt_provider();
				setState(4581); match(ON);
				setState(4582); match(AGGREGATE);
				setState(4583); func_name();
				setState(4584); aggr_args();
				setState(4585); match(IS);
				setState(4586); security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4588); match(SECURITY);
				setState(4589); match(LABEL);
				setState(4590); opt_provider();
				setState(4591); match(ON);
				setState(4592); match(FUNCTION);
				setState(4593); func_name();
				setState(4594); func_args();
				setState(4595); match(IS);
				setState(4596); security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4598); match(SECURITY);
				setState(4599); match(LABEL);
				setState(4600); opt_provider();
				setState(4601); match(ON);
				setState(4602); match(LARGE_P);
				setState(4603); match(OBJECT_P);
				setState(4604); numericOnly();
				setState(4605); match(IS);
				setState(4606); security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4608); match(SECURITY);
				setState(4609); match(LABEL);
				setState(4610); opt_provider();
				setState(4611); match(ON);
				setState(4612); opt_procedural();
				setState(4613); match(LANGUAGE);
				setState(4614); any_name();
				setState(4615); match(IS);
				setState(4616); security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_opt_provider);
		try {
			setState(4623);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4620); match(FOR);
				setState(4621); colId_or_Sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_label_typeContext extends ParserRuleContext {
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Security_label_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSecurity_label_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSecurity_label_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecurity_label_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_typeContext security_label_type() throws RecognitionException {
		Security_label_typeContext _localctx = new Security_label_typeContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_security_label_type);
		try {
			setState(4637);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4625); match(COLUMN);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4626); match(DATABASE);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4627); match(FOREIGN);
				setState(4628); match(TABLE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 4);
				{
				setState(4629); match(SCHEMA);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4630); match(SEQUENCE);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4631); match(TABLE);
				}
				break;
			case DOMAIN_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(4632); match(DOMAIN_P);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4633); match(ROLE);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4634); match(TABLESPACE);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(4635); match(TYPE_P);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 11);
				{
				setState(4636); match(VIEW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_security_label);
		try {
			setState(4641);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4639); sConst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4640); match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchStmtContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PlPgSqlParser.MOVE, 0); }
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public FetchStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFetchStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFetchStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFetchStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchStmtContext fetchStmt() throws RecognitionException {
		FetchStmtContext _localctx = new FetchStmtContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_fetchStmt);
		try {
			setState(4647);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4643); match(FETCH);
				setState(4644); fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4645); match(MOVE);
				setState(4646); fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PlPgSqlParser.NEXT, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PlPgSqlParser.FORWARD, 0); }
		public TerminalNode PRIOR() { return getToken(PlPgSqlParser.PRIOR, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PlPgSqlParser.RELATIVE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode FIRST_P() { return getToken(PlPgSqlParser.FIRST_P, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode BACKWARD() { return getToken(PlPgSqlParser.BACKWARD, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PlPgSqlParser.ABSOLUTE_P, 0); }
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode LAST_P() { return getToken(PlPgSqlParser.LAST_P, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_fetch_args);
		try {
			setState(4715);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4649); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4650); from_in();
				setState(4651); cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4653); match(NEXT);
				setState(4654); opt_from_in();
				setState(4655); cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4657); match(PRIOR);
				setState(4658); opt_from_in();
				setState(4659); cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4661); match(FIRST_P);
				setState(4662); opt_from_in();
				setState(4663); cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4665); match(LAST_P);
				setState(4666); opt_from_in();
				setState(4667); cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4669); match(ABSOLUTE_P);
				setState(4670); signedIconst();
				setState(4671); opt_from_in();
				setState(4672); cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4674); match(RELATIVE_P);
				setState(4675); signedIconst();
				setState(4676); opt_from_in();
				setState(4677); cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4679); signedIconst();
				setState(4680); opt_from_in();
				setState(4681); cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4683); match(ALL);
				setState(4684); opt_from_in();
				setState(4685); cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4687); match(FORWARD);
				setState(4688); opt_from_in();
				setState(4689); cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4691); match(FORWARD);
				setState(4692); signedIconst();
				setState(4693); opt_from_in();
				setState(4694); cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4696); match(FORWARD);
				setState(4697); match(ALL);
				setState(4698); opt_from_in();
				setState(4699); cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4701); match(BACKWARD);
				setState(4702); opt_from_in();
				setState(4703); cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4705); match(BACKWARD);
				setState(4706); signedIconst();
				setState(4707); opt_from_in();
				setState(4708); cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4710); match(BACKWARD);
				setState(4711); match(ALL);
				setState(4712); opt_from_in();
				setState(4713); cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4717);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_opt_from_in);
		try {
			setState(4721);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4719); from_in();
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStmtContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public GrantStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGrantStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGrantStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStmtContext grantStmt() throws RecognitionException {
		GrantStmtContext _localctx = new GrantStmtContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_grantStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4723); match(GRANT);
			setState(4724); privileges();
			setState(4725); match(ON);
			setState(4726); privilege_target();
			setState(4727); match(TO);
			setState(4728); grantee_list(0);
			setState(4729); opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStmtContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public RevokeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRevokeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRevokeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRevokeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStmtContext revokeStmt() throws RecognitionException {
		RevokeStmtContext _localctx = new RevokeStmtContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_revokeStmt);
		try {
			setState(4750);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4731); match(REVOKE);
				setState(4732); privileges();
				setState(4733); match(ON);
				setState(4734); privilege_target();
				setState(4735); match(FROM);
				setState(4736); grantee_list(0);
				setState(4737); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4739); match(REVOKE);
				setState(4740); match(GRANT);
				setState(4741); match(OPTION);
				setState(4742); match(FOR);
				setState(4743); privileges();
				setState(4744); match(ON);
				setState(4745); privilege_target();
				setState(4746); match(FROM);
				setState(4747); grantee_list(0);
				setState(4748); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(PlPgSqlParser.PRIVILEGES, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_privileges);
		try {
			setState(4767);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4752); privilege_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4753); match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4754); match(ALL);
				setState(4755); match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4756); match(ALL);
				setState(4757); match(T__7);
				setState(4758); columnList(0);
				setState(4759); match(T__13);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4761); match(ALL);
				setState(4762); match(PRIVILEGES);
				setState(4763); match(T__7);
				setState(4764); columnList(0);
				setState(4765); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 626;
		enterRecursionRule(_localctx, 626, RULE_privilege_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4770); privilege();
			}
			_ctx.stop = _input.LT(-1);
			setState(4777);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					setState(4772);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4773); match(T__12);
					setState(4774); privilege();
					}
					} 
				}
				setState(4779);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_privilege);
		try {
			setState(4789);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4780); match(SELECT);
				setState(4781); opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(4782); match(REFERENCES);
				setState(4783); opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4784); match(CREATE);
				setState(4785); opt_column_list();
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4786); colId();
				setState(4787); opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode TABLES() { return getToken(PlPgSqlParser.TABLES, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlPgSqlParser.FUNCTIONS, 0); }
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode SEQUENCES() { return getToken(PlPgSqlParser.SEQUENCES, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_privilege_target);
		try {
			setState(4835);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4791); qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4792); match(TABLE);
				setState(4793); qualified_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4794); match(SEQUENCE);
				setState(4795); qualified_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4796); match(FOREIGN);
				setState(4797); match(DATA_P);
				setState(4798); match(WRAPPER);
				setState(4799); name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4800); match(FOREIGN);
				setState(4801); match(SERVER);
				setState(4802); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4803); match(FUNCTION);
				setState(4804); function_with_argtypes_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4805); match(DATABASE);
				setState(4806); name_list(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4807); match(DOMAIN_P);
				setState(4808); any_name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4809); match(LANGUAGE);
				setState(4810); name_list(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4811); match(LARGE_P);
				setState(4812); match(OBJECT_P);
				setState(4813); numericOnly_list(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4814); match(SCHEMA);
				setState(4815); name_list(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4816); match(TABLESPACE);
				setState(4817); name_list(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4818); match(TYPE_P);
				setState(4819); any_name_list(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4820); match(ALL);
				setState(4821); match(TABLES);
				setState(4822); match(IN_P);
				setState(4823); match(SCHEMA);
				setState(4824); name_list(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4825); match(ALL);
				setState(4826); match(SEQUENCES);
				setState(4827); match(IN_P);
				setState(4828); match(SCHEMA);
				setState(4829); name_list(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4830); match(ALL);
				setState(4831); match(FUNCTIONS);
				setState(4832); match(IN_P);
				setState(4833); match(SCHEMA);
				setState(4834); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public GranteeContext grantee() {
			return getRuleContext(GranteeContext.class,0);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 632;
		enterRecursionRule(_localctx, 632, RULE_grantee_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4838); grantee();
			}
			_ctx.stop = _input.LT(-1);
			setState(4845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					setState(4840);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4841); match(T__12);
					setState(4842); grantee();
					}
					} 
				}
				setState(4847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_grantee);
		try {
			setState(4851);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4848); roleId();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4849); match(GROUP_P);
				setState(4850); roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_opt_grant_grant_option);
		try {
			setState(4857);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4853); match(WITH);
				setState(4854); match(GRANT);
				setState(4855); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 638;
		enterRecursionRule(_localctx, 638, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4860); function_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(4867);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					setState(4862);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4863); match(T__12);
					setState(4864); function_with_argtypes();
					}
					} 
				}
				setState(4869);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_function_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4870); func_name();
			setState(4871); func_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantRoleStmtContext extends ParserRuleContext {
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public GrantRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGrantRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGrantRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantRoleStmtContext grantRoleStmt() throws RecognitionException {
		GrantRoleStmtContext _localctx = new GrantRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_grantRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4873); match(GRANT);
			setState(4874); privilege_list(0);
			setState(4875); match(TO);
			setState(4876); name_list(0);
			setState(4877); opt_grant_admin_option();
			setState(4878); opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeRoleStmtContext extends ParserRuleContext {
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public RevokeRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRevokeRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRevokeRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRevokeRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeRoleStmtContext revokeRoleStmt() throws RecognitionException {
		RevokeRoleStmtContext _localctx = new RevokeRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_revokeRoleStmt);
		try {
			setState(4897);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4880); match(REVOKE);
				setState(4881); privilege_list(0);
				setState(4882); match(FROM);
				setState(4883); name_list(0);
				setState(4884); opt_granted_by();
				setState(4885); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4887); match(REVOKE);
				setState(4888); match(ADMIN);
				setState(4889); match(OPTION);
				setState(4890); match(FOR);
				setState(4891); privilege_list(0);
				setState(4892); match(FROM);
				setState(4893); name_list(0);
				setState(4894); opt_granted_by();
				setState(4895); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_opt_grant_admin_option);
		try {
			setState(4903);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4899); match(WITH);
				setState(4900); match(ADMIN);
				setState(4901); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PlPgSqlParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_opt_granted_by);
		try {
			setState(4909);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4905); match(GRANTED);
				setState(4906); match(BY);
				setState(4907); roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesStmtContext extends ParserRuleContext {
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlPgSqlParser.PRIVILEGES, 0); }
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivilegesStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterDefaultPrivilegesStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterDefaultPrivilegesStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDefaultPrivilegesStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() throws RecognitionException {
		AlterDefaultPrivilegesStmtContext _localctx = new AlterDefaultPrivilegesStmtContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_alterDefaultPrivilegesStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4911); match(ALTER);
			setState(4912); match(DEFAULT);
			setState(4913); match(PRIVILEGES);
			setState(4914); defACLOptionList(0);
			setState(4915); defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLOptionContext defACLOption() {
			return getRuleContext(DefACLOptionContext.class,0);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefACLOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefACLOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		return defACLOptionList(0);
	}

	private DefACLOptionListContext defACLOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, _parentState);
		DefACLOptionListContext _prevctx = _localctx;
		int _startState = 652;
		enterRecursionRule(_localctx, 652, RULE_defACLOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4922);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,235,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefACLOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_defACLOptionList);
					setState(4918);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4919); defACLOption();
					}
					} 
				}
				setState(4924);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,235,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefACLOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefACLOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_defACLOption);
		try {
			setState(4934);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4925); match(IN_P);
				setState(4926); match(SCHEMA);
				setState(4927); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4928); match(FOR);
				setState(4929); match(ROLE);
				setState(4930); name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4931); match(FOR);
				setState(4932); match(USER);
				setState(4933); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefACLAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefACLAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_defACLAction);
		try {
			setState(4963);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4936); match(GRANT);
				setState(4937); privileges();
				setState(4938); match(ON);
				setState(4939); defacl_privilege_target();
				setState(4940); match(TO);
				setState(4941); grantee_list(0);
				setState(4942); opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4944); match(REVOKE);
				setState(4945); privileges();
				setState(4946); match(ON);
				setState(4947); defacl_privilege_target();
				setState(4948); match(FROM);
				setState(4949); grantee_list(0);
				setState(4950); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4952); match(REVOKE);
				setState(4953); match(GRANT);
				setState(4954); match(OPTION);
				setState(4955); match(FOR);
				setState(4956); privileges();
				setState(4957); match(ON);
				setState(4958); defacl_privilege_target();
				setState(4959); match(FROM);
				setState(4960); grantee_list(0);
				setState(4961); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PlPgSqlParser.TABLES, 0); }
		public TerminalNode TYPES_P() { return getToken(PlPgSqlParser.TYPES_P, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlPgSqlParser.FUNCTIONS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PlPgSqlParser.SEQUENCES, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4965);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (SEQUENCES - 405)) | (1L << (TABLES - 405)) | (1L << (TYPES_P - 405)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexStmtContext extends ParserRuleContext {
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public IndexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndexStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndexStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexStmtContext indexStmt() throws RecognitionException {
		IndexStmtContext _localctx = new IndexStmtContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_indexStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4967); match(CREATE);
			setState(4968); opt_unique();
			setState(4969); match(INDEX);
			setState(4970); opt_concurrently();
			setState(4971); opt_index_name();
			setState(4972); match(ON);
			setState(4973); qualified_name();
			setState(4974); access_method_clause();
			setState(4975); match(T__7);
			setState(4976); index_params(0);
			setState(4977); match(T__13);
			setState(4978); opt_reloptions();
			setState(4979); optTableSpace();
			setState(4980); where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_opt_unique);
		try {
			setState(4984);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4982); match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_opt_concurrently);
		try {
			setState(4988);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4986); match(CONCURRENTLY);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case ON:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_opt_index_name);
		try {
			setState(4992);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4990); index_name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_access_method_clause);
		try {
			setState(4997);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4994); match(USING);
				setState(4995); access_method();
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 670;
		enterRecursionRule(_localctx, 670, RULE_index_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5000); index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(5007);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_params);
					setState(5002);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5003); match(T__12);
					setState(5004); index_elem();
					}
					} 
				}
				setState(5009);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_index_elem);
		try {
			setState(5030);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5010); colId();
				setState(5011); opt_collate();
				setState(5012); opt_class();
				setState(5013); opt_asc_desc();
				setState(5014); opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5016); func_expr();
				setState(5017); opt_collate();
				setState(5018); opt_class();
				setState(5019); opt_asc_desc();
				setState(5020); opt_nulls_order();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5022); match(T__7);
				setState(5023); a_expr(0);
				setState(5024); match(T__13);
				setState(5025); opt_collate();
				setState(5026); opt_class();
				setState(5027); opt_asc_desc();
				setState(5028); opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_opt_collate);
		try {
			setState(5035);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5032); match(COLLATE);
				setState(5033); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_opt_class);
		try {
			setState(5041);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5037); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5038); match(USING);
				setState(5039); any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(PlPgSqlParser.DESC, 0); }
		public TerminalNode ASC() { return getToken(PlPgSqlParser.ASC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_opt_asc_desc);
		try {
			setState(5046);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5043); match(ASC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5044); match(DESC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_LAST() { return getToken(PlPgSqlParser.NULLS_LAST, 0); }
		public TerminalNode NULLS_FIRST() { return getToken(PlPgSqlParser.NULLS_FIRST, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_opt_nulls_order);
		try {
			setState(5051);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5048); match(NULLS_FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5049); match(NULLS_LAST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStmtContext extends ParserRuleContext {
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode RETURNS() { return getToken(PlPgSqlParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreateFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateFunctionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateFunctionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStmtContext createFunctionStmt() throws RecognitionException {
		CreateFunctionStmtContext _localctx = new CreateFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_createFunctionStmt);
		try {
			setState(5090);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5053); match(CREATE);
				setState(5055);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(5054); opt_or_replace();
					}
					break;
				}
				setState(5057); match(FUNCTION);
				setState(5058); func_name();
				setState(5059); func_args_with_defaults();
				setState(5060); match(RETURNS);
				setState(5061); func_return();
				setState(5062); createfunc_opt_list(0);
				setState(5063); opt_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5065); match(CREATE);
				setState(5067);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(5066); opt_or_replace();
					}
					break;
				}
				setState(5069); match(FUNCTION);
				setState(5070); func_name();
				setState(5071); func_args_with_defaults();
				setState(5072); match(RETURNS);
				setState(5073); match(TABLE);
				setState(5074); match(T__7);
				setState(5075); table_func_column_list(0);
				setState(5076); match(T__13);
				setState(5077); createfunc_opt_list(0);
				setState(5078); opt_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5080); match(CREATE);
				setState(5082);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(5081); opt_or_replace();
					}
					break;
				}
				setState(5084); match(FUNCTION);
				setState(5085); func_name();
				setState(5086); func_args_with_defaults();
				setState(5087); createfunc_opt_list(0);
				setState(5088); opt_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_opt_or_replace);
		try {
			setState(5095);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5092); match(OR);
				setState(5093); match(REPLACE);
				}
				break;
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case RULE:
			case TRUSTED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_func_args);
		try {
			setState(5103);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5097); match(T__7);
				setState(5098); func_args_list(0);
				setState(5099); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5101); match(T__7);
				setState(5102); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 688;
		enterRecursionRule(_localctx, 688, RULE_func_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5106); func_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(5113);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					setState(5108);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5109); match(T__12);
					setState(5110); func_arg();
					}
					} 
				}
				setState(5115);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_func_args_with_defaults);
		try {
			setState(5122);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5116); match(T__7);
				setState(5117); func_args_with_defaults_list(0);
				setState(5118); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5120); match(T__7);
				setState(5121); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public Func_arg_with_defaultContext func_arg_with_default() {
			return getRuleContext(Func_arg_with_defaultContext.class,0);
		}
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 692;
		enterRecursionRule(_localctx, 692, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5125); func_arg_with_default();
			}
			_ctx.stop = _input.LT(-1);
			setState(5132);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					setState(5127);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5128); match(T__12);
					setState(5129); func_arg_with_default();
					}
					} 
				}
				setState(5134);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_func_arg);
		try {
			setState(5150);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5135); arg_class();
				setState(5136); param_name();
				setState(5137); func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5139); param_name();
				setState(5140); arg_class();
				setState(5141); func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5143); param_name();
				setState(5144); func_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5146); arg_class();
				setState(5147); func_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5149); func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode OUT_P() { return getToken(PlPgSqlParser.OUT_P, 0); }
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_arg_class);
		try {
			setState(5158);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5152); match(IN_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5153); match(OUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5154); match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5155); match(IN_P);
				setState(5156); match(OUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5157); match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5160); type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5162); func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_func_type);
		try {
			setState(5176);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5164); typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5165); type_function_name();
				setState(5166); attrs(0);
				setState(5167); match(T__16);
				setState(5168); match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5170); match(SETOF);
				setState(5171); type_function_name();
				setState(5172); attrs(0);
				setState(5173); match(T__16);
				setState(5174); match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_func_arg_with_default);
		try {
			setState(5187);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5178); func_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5179); func_arg();
				setState(5180); match(DEFAULT);
				setState(5181); a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5183); func_arg();
				setState(5184); match(T__4);
				setState(5185); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public Createfunc_opt_itemContext createfunc_opt_item() {
			return getRuleContext(Createfunc_opt_itemContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		return createfunc_opt_list(0);
	}

	private Createfunc_opt_listContext createfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, _parentState);
		Createfunc_opt_listContext _prevctx = _localctx;
		int _startState = 706;
		enterRecursionRule(_localctx, 706, RULE_createfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5190); createfunc_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5196);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createfunc_opt_list);
					setState(5192);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5193); createfunc_opt_item();
					}
					} 
				}
				setState(5198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode INVOKER() { return getToken(PlPgSqlParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(PlPgSqlParser.DEFINER, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(PlPgSqlParser.VOLATILE, 0); }
		public TerminalNode STRICT_P() { return getToken(PlPgSqlParser.STRICT_P, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlPgSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PlPgSqlParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PlPgSqlParser.NULL_P, i);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PlPgSqlParser.LEAKPROOF, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public TerminalNode STABLE() { return getToken(PlPgSqlParser.STABLE, 0); }
		public TerminalNode SECURITY() { return getToken(PlPgSqlParser.SECURITY, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PlPgSqlParser.COST, 0); }
		public TerminalNode CALLED() { return getToken(PlPgSqlParser.CALLED, 0); }
		public TerminalNode INPUT_P() { return getToken(PlPgSqlParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PlPgSqlParser.RETURNS, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PlPgSqlParser.IMMUTABLE, 0); }
		public FunctionsetResetClauseContext functionsetResetClause() {
			return getRuleContext(FunctionsetResetClauseContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_common_func_opt_item);
		try {
			setState(5230);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5199); match(CALLED);
				setState(5200); match(ON);
				setState(5201); match(NULL_P);
				setState(5202); match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5203); match(RETURNS);
				setState(5204); match(NULL_P);
				setState(5205); match(ON);
				setState(5206); match(NULL_P);
				setState(5207); match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5208); match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5209); match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5210); match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5211); match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5212); match(EXTERNAL);
				setState(5213); match(SECURITY);
				setState(5214); match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5215); match(EXTERNAL);
				setState(5216); match(SECURITY);
				setState(5217); match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5218); match(SECURITY);
				setState(5219); match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5220); match(SECURITY);
				setState(5221); match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5222); match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5223); match(NOT);
				setState(5224); match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5225); match(COST);
				setState(5226); numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5227); match(ROWS);
				setState(5228); numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5229); functionsetResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_createfunc_opt_item);
		try {
			setState(5238);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5232); match(AS);
				setState(5233); func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5234); match(LANGUAGE);
				setState(5235); colId_or_Sconst();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 3);
				{
				setState(5236); match(WINDOW);
				}
				break;
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case NOT:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5237); common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_func_as);
		try {
			setState(5245);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5240); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5241); sConst();
				setState(5242); match(T__12);
				setState(5243); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_opt_definition);
		try {
			setState(5250);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5247); match(WITH);
				setState(5248); definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5252); param_name();
			setState(5253); func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public Table_func_columnContext table_func_column() {
			return getRuleContext(Table_func_columnContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 718;
		enterRecursionRule(_localctx, 718, RULE_table_func_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5256); table_func_column();
			}
			_ctx.stop = _input.LT(-1);
			setState(5263);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					setState(5258);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5259); match(T__12);
					setState(5260); table_func_column();
					}
					} 
				}
				setState(5265);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterFunctionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public AlterFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterFunctionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterFunctionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStmtContext alterFunctionStmt() throws RecognitionException {
		AlterFunctionStmtContext _localctx = new AlterFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_alterFunctionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5266); match(ALTER);
			setState(5267); match(FUNCTION);
			setState(5268); function_with_argtypes();
			setState(5269); alterfunc_opt_list(0);
			setState(5270); opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 722;
		enterRecursionRule(_localctx, 722, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5273); common_func_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5279);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					setState(5275);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5276); common_func_opt_item();
					}
					} 
				}
				setState(5281);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_opt_restrict);
		try {
			setState(5284);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5282); match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveFuncStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RemoveFuncStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeFuncStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRemoveFuncStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRemoveFuncStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveFuncStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveFuncStmtContext removeFuncStmt() throws RecognitionException {
		RemoveFuncStmtContext _localctx = new RemoveFuncStmtContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_removeFuncStmt);
		try {
			setState(5300);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5286); match(DROP);
				setState(5287); match(FUNCTION);
				setState(5288); func_name();
				setState(5289); func_args();
				setState(5290); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5292); match(DROP);
				setState(5293); match(FUNCTION);
				setState(5294); match(IF_P);
				setState(5295); match(EXISTS);
				setState(5296); func_name();
				setState(5297); func_args();
				setState(5298); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveAggrStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RemoveAggrStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeAggrStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRemoveAggrStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRemoveAggrStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveAggrStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveAggrStmtContext removeAggrStmt() throws RecognitionException {
		RemoveAggrStmtContext _localctx = new RemoveAggrStmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_removeAggrStmt);
		try {
			setState(5316);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5302); match(DROP);
				setState(5303); match(AGGREGATE);
				setState(5304); func_name();
				setState(5305); aggr_args();
				setState(5306); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5308); match(DROP);
				setState(5309); match(AGGREGATE);
				setState(5310); match(IF_P);
				setState(5311); match(EXISTS);
				setState(5312); func_name();
				setState(5313); aggr_args();
				setState(5314); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveOperStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public RemoveOperStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeOperStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRemoveOperStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRemoveOperStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveOperStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveOperStmtContext removeOperStmt() throws RecognitionException {
		RemoveOperStmtContext _localctx = new RemoveOperStmtContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_removeOperStmt);
		try {
			setState(5332);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5318); match(DROP);
				setState(5319); match(OPERATOR);
				setState(5320); any_operator();
				setState(5321); oper_argtypes();
				setState(5322); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5324); match(DROP);
				setState(5325); match(OPERATOR);
				setState(5326); match(IF_P);
				setState(5327); match(EXISTS);
				setState(5328); any_operator();
				setState(5329); oper_argtypes();
				setState(5330); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode NONE() { return getToken(PlPgSqlParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_oper_argtypes);
		try {
			setState(5356);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5334); match(T__7);
				setState(5335); typename();
				setState(5336); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5338); match(T__7);
				setState(5339); typename();
				setState(5340); match(T__12);
				setState(5341); typename();
				setState(5342); match(T__13);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5344); match(T__7);
				setState(5345); match(NONE);
				setState(5346); match(T__12);
				setState(5347); typename();
				setState(5348); match(T__13);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5350); match(T__7);
				setState(5351); typename();
				setState(5352); match(T__12);
				setState(5353); match(NONE);
				setState(5354); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_any_operator);
		try {
			setState(5363);
			switch (_input.LA(1)) {
			case T__16:
			case T__15:
			case T__11:
			case T__10:
			case T__9:
			case T__5:
			case T__4:
			case T__2:
			case T__1:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(5358); all_Op();
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5359); colId();
				setState(5360); match(T__14);
				setState(5361); any_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DoStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDoStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDoStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDoStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStmtContext doStmt() throws RecognitionException {
		DoStmtContext _localctx = new DoStmtContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_doStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5365); match(DO);
			setState(5366); dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public Dostmt_opt_itemContext dostmt_opt_item() {
			return getRuleContext(Dostmt_opt_itemContext.class,0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 738;
		enterRecursionRule(_localctx, 738, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5369); dostmt_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5375);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					setState(5371);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5372); dostmt_opt_item();
					}
					} 
				}
				setState(5377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_dostmt_opt_item);
		try {
			setState(5381);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(5378); sConst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5379); match(LANGUAGE);
				setState(5380); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public CreateCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCastStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateCastStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateCastStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastStmtContext createCastStmt() throws RecognitionException {
		CreateCastStmtContext _localctx = new CreateCastStmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_createCastStmt);
		try {
			setState(5417);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5383); match(CREATE);
				setState(5384); match(CAST);
				setState(5385); match(T__7);
				setState(5386); typename();
				setState(5387); match(AS);
				setState(5388); typename();
				setState(5389); match(T__13);
				setState(5390); match(WITH);
				setState(5391); match(FUNCTION);
				setState(5392); function_with_argtypes();
				setState(5393); cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5395); match(CREATE);
				setState(5396); match(CAST);
				setState(5397); match(T__7);
				setState(5398); typename();
				setState(5399); match(AS);
				setState(5400); typename();
				setState(5401); match(T__13);
				setState(5402); match(WITHOUT);
				setState(5403); match(FUNCTION);
				setState(5404); cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5406); match(CREATE);
				setState(5407); match(CAST);
				setState(5408); match(T__7);
				setState(5409); typename();
				setState(5410); match(AS);
				setState(5411); typename();
				setState(5412); match(T__13);
				setState(5413); match(WITH);
				setState(5414); match(INOUT);
				setState(5415); cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PlPgSqlParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PlPgSqlParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_cast_context);
		try {
			setState(5424);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5419); match(AS);
				setState(5420); match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5421); match(AS);
				setState(5422); match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public DropCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCastStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropCastStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropCastStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastStmtContext dropCastStmt() throws RecognitionException {
		DropCastStmtContext _localctx = new DropCastStmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_dropCastStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5426); match(DROP);
			setState(5427); match(CAST);
			setState(5428); opt_if_exists();
			setState(5429); match(T__7);
			setState(5430); typename();
			setState(5431); match(AS);
			setState(5432); typename();
			setState(5433); match(T__13);
			setState(5434); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_opt_if_exists);
		try {
			setState(5439);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5436); match(IF_P);
				setState(5437); match(EXISTS);
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SYSTEM_P() { return getToken(PlPgSqlParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Opt_forceContext opt_force() {
			return getRuleContext(Opt_forceContext.class,0);
		}
		public Reindex_typeContext reindex_type() {
			return getRuleContext(Reindex_typeContext.class,0);
		}
		public TerminalNode REINDEX() { return getToken(PlPgSqlParser.REINDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReindexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReindexStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReindexStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReindexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexStmtContext reindexStmt() throws RecognitionException {
		ReindexStmtContext _localctx = new ReindexStmtContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_reindexStmt);
		try {
			setState(5456);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5441); match(REINDEX);
				setState(5442); reindex_type();
				setState(5443); qualified_name();
				setState(5444); opt_force();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5446); match(REINDEX);
				setState(5447); match(SYSTEM_P);
				setState(5448); name();
				setState(5449); opt_force();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5451); match(REINDEX);
				setState(5452); match(DATABASE);
				setState(5453); name();
				setState(5454); opt_force();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Reindex_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReindex_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReindex_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReindex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_typeContext reindex_type() throws RecognitionException {
		Reindex_typeContext _localctx = new Reindex_typeContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_reindex_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_forceContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PlPgSqlParser.FORCE, 0); }
		public Opt_forceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_force; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_force(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_force(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_force(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_forceContext opt_force() throws RecognitionException {
		Opt_forceContext _localctx = new Opt_forceContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_opt_force);
		try {
			setState(5462);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5460); match(FORCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlPgSqlParser.RENAME, 0); }
		public List<RoleIdContext> roleId() {
			return getRuleContexts(RoleIdContext.class);
		}
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public List<Database_nameContext> database_name() {
			return getRuleContexts(Database_nameContext.class);
		}
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode ATTRIBUTE() { return getToken(PlPgSqlParser.ATTRIBUTE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public RoleIdContext roleId(int i) {
			return getRuleContext(RoleIdContext.class,i);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Database_nameContext database_name(int i) {
			return getRuleContext(Database_nameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public RenameStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRenameStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRenameStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRenameStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameStmtContext renameStmt() throws RecognitionException {
		RenameStmtContext _localctx = new RenameStmtContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_renameStmt);
		try {
			setState(5802);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5464); match(ALTER);
				setState(5465); match(AGGREGATE);
				setState(5466); func_name();
				setState(5467); aggr_args();
				setState(5468); match(RENAME);
				setState(5469); match(TO);
				setState(5470); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5472); match(ALTER);
				setState(5473); match(COLLATION);
				setState(5474); any_name();
				setState(5475); match(RENAME);
				setState(5476); match(TO);
				setState(5477); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5479); match(ALTER);
				setState(5480); match(CONVERSION_P);
				setState(5481); any_name();
				setState(5482); match(RENAME);
				setState(5483); match(TO);
				setState(5484); name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5486); match(ALTER);
				setState(5487); match(DATABASE);
				setState(5488); database_name();
				setState(5489); match(RENAME);
				setState(5490); match(TO);
				setState(5491); database_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5493); match(ALTER);
				setState(5494); match(DOMAIN_P);
				setState(5495); any_name();
				setState(5496); match(RENAME);
				setState(5497); match(TO);
				setState(5498); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5500); match(ALTER);
				setState(5501); match(DOMAIN_P);
				setState(5502); any_name();
				setState(5503); match(RENAME);
				setState(5504); match(CONSTRAINT);
				setState(5505); name();
				setState(5506); match(TO);
				setState(5507); name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5509); match(ALTER);
				setState(5510); match(FOREIGN);
				setState(5511); match(DATA_P);
				setState(5512); match(WRAPPER);
				setState(5513); name();
				setState(5514); match(RENAME);
				setState(5515); match(TO);
				setState(5516); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5518); match(ALTER);
				setState(5519); match(FUNCTION);
				setState(5520); function_with_argtypes();
				setState(5521); match(RENAME);
				setState(5522); match(TO);
				setState(5523); name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5525); match(ALTER);
				setState(5526); match(GROUP_P);
				setState(5527); roleId();
				setState(5528); match(RENAME);
				setState(5529); match(TO);
				setState(5530); roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5532); match(ALTER);
				setState(5533); opt_procedural();
				setState(5534); match(LANGUAGE);
				setState(5535); name();
				setState(5536); match(RENAME);
				setState(5537); match(TO);
				setState(5538); name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5540); match(ALTER);
				setState(5541); match(OPERATOR);
				setState(5542); match(CLASS);
				setState(5543); any_name();
				setState(5544); match(USING);
				setState(5545); access_method();
				setState(5546); match(RENAME);
				setState(5547); match(TO);
				setState(5548); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5550); match(ALTER);
				setState(5551); match(OPERATOR);
				setState(5552); match(FAMILY);
				setState(5553); any_name();
				setState(5554); match(USING);
				setState(5555); access_method();
				setState(5556); match(RENAME);
				setState(5557); match(TO);
				setState(5558); name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5560); match(ALTER);
				setState(5561); match(SCHEMA);
				setState(5562); name();
				setState(5563); match(RENAME);
				setState(5564); match(TO);
				setState(5565); name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5567); match(ALTER);
				setState(5568); match(SERVER);
				setState(5569); name();
				setState(5570); match(RENAME);
				setState(5571); match(TO);
				setState(5572); name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5574); match(ALTER);
				setState(5575); match(TABLE);
				setState(5576); relation_expr();
				setState(5577); match(RENAME);
				setState(5578); match(TO);
				setState(5579); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5581); match(ALTER);
				setState(5582); match(TABLE);
				setState(5583); match(IF_P);
				setState(5584); match(EXISTS);
				setState(5585); relation_expr();
				setState(5586); match(RENAME);
				setState(5587); match(TO);
				setState(5588); name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5590); match(ALTER);
				setState(5591); match(SEQUENCE);
				setState(5592); qualified_name();
				setState(5593); match(RENAME);
				setState(5594); match(TO);
				setState(5595); name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5597); match(ALTER);
				setState(5598); match(SEQUENCE);
				setState(5599); match(IF_P);
				setState(5600); match(EXISTS);
				setState(5601); qualified_name();
				setState(5602); match(RENAME);
				setState(5603); match(TO);
				setState(5604); name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5606); match(ALTER);
				setState(5607); match(VIEW);
				setState(5608); qualified_name();
				setState(5609); match(RENAME);
				setState(5610); match(TO);
				setState(5611); name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5613); match(ALTER);
				setState(5614); match(VIEW);
				setState(5615); match(IF_P);
				setState(5616); match(EXISTS);
				setState(5617); qualified_name();
				setState(5618); match(RENAME);
				setState(5619); match(TO);
				setState(5620); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5622); match(ALTER);
				setState(5623); match(INDEX);
				setState(5624); qualified_name();
				setState(5625); match(RENAME);
				setState(5626); match(TO);
				setState(5627); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5629); match(ALTER);
				setState(5630); match(INDEX);
				setState(5631); match(IF_P);
				setState(5632); match(EXISTS);
				setState(5633); qualified_name();
				setState(5634); match(RENAME);
				setState(5635); match(TO);
				setState(5636); name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5638); match(ALTER);
				setState(5639); match(FOREIGN);
				setState(5640); match(TABLE);
				setState(5641); relation_expr();
				setState(5642); match(RENAME);
				setState(5643); match(TO);
				setState(5644); name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5646); match(ALTER);
				setState(5647); match(FOREIGN);
				setState(5648); match(TABLE);
				setState(5649); match(IF_P);
				setState(5650); match(EXISTS);
				setState(5651); relation_expr();
				setState(5652); match(RENAME);
				setState(5653); match(TO);
				setState(5654); name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5656); match(ALTER);
				setState(5657); match(TABLE);
				setState(5658); relation_expr();
				setState(5659); match(RENAME);
				setState(5660); opt_column();
				setState(5661); name();
				setState(5662); match(TO);
				setState(5663); name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5665); match(ALTER);
				setState(5666); match(TABLE);
				setState(5667); match(IF_P);
				setState(5668); match(EXISTS);
				setState(5669); relation_expr();
				setState(5670); match(RENAME);
				setState(5671); opt_column();
				setState(5672); name();
				setState(5673); match(TO);
				setState(5674); name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5676); match(ALTER);
				setState(5677); match(TABLE);
				setState(5678); relation_expr();
				setState(5679); match(RENAME);
				setState(5680); match(CONSTRAINT);
				setState(5681); name();
				setState(5682); match(TO);
				setState(5683); name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5685); match(ALTER);
				setState(5686); match(FOREIGN);
				setState(5687); match(TABLE);
				setState(5688); relation_expr();
				setState(5689); match(RENAME);
				setState(5690); opt_column();
				setState(5691); name();
				setState(5692); match(TO);
				setState(5693); name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5695); match(ALTER);
				setState(5696); match(FOREIGN);
				setState(5697); match(TABLE);
				setState(5698); match(IF_P);
				setState(5699); match(EXISTS);
				setState(5700); relation_expr();
				setState(5701); match(RENAME);
				setState(5702); opt_column();
				setState(5703); name();
				setState(5704); match(TO);
				setState(5705); name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5707); match(ALTER);
				setState(5708); match(TRIGGER);
				setState(5709); name();
				setState(5710); match(ON);
				setState(5711); qualified_name();
				setState(5712); match(RENAME);
				setState(5713); match(TO);
				setState(5714); name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5716); match(ALTER);
				setState(5717); match(ROLE);
				setState(5718); roleId();
				setState(5719); match(RENAME);
				setState(5720); match(TO);
				setState(5721); roleId();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5723); match(ALTER);
				setState(5724); match(USER);
				setState(5725); roleId();
				setState(5726); match(RENAME);
				setState(5727); match(TO);
				setState(5728); roleId();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5730); match(ALTER);
				setState(5731); match(TABLESPACE);
				setState(5732); name();
				setState(5733); match(RENAME);
				setState(5734); match(TO);
				setState(5735); name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5737); match(ALTER);
				setState(5738); match(TABLESPACE);
				setState(5739); name();
				setState(5740); match(SET);
				setState(5741); reloptions();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5743); match(ALTER);
				setState(5744); match(TABLESPACE);
				setState(5745); name();
				setState(5746); match(RESET);
				setState(5747); reloptions();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5749); match(ALTER);
				setState(5750); match(TEXT_P);
				setState(5751); match(SEARCH);
				setState(5752); match(PARSER);
				setState(5753); any_name();
				setState(5754); match(RENAME);
				setState(5755); match(TO);
				setState(5756); name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5758); match(ALTER);
				setState(5759); match(TEXT_P);
				setState(5760); match(SEARCH);
				setState(5761); match(DICTIONARY);
				setState(5762); any_name();
				setState(5763); match(RENAME);
				setState(5764); match(TO);
				setState(5765); name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5767); match(ALTER);
				setState(5768); match(TEXT_P);
				setState(5769); match(SEARCH);
				setState(5770); match(TEMPLATE);
				setState(5771); any_name();
				setState(5772); match(RENAME);
				setState(5773); match(TO);
				setState(5774); name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5776); match(ALTER);
				setState(5777); match(TEXT_P);
				setState(5778); match(SEARCH);
				setState(5779); match(CONFIGURATION);
				setState(5780); any_name();
				setState(5781); match(RENAME);
				setState(5782); match(TO);
				setState(5783); name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5785); match(ALTER);
				setState(5786); match(TYPE_P);
				setState(5787); any_name();
				setState(5788); match(RENAME);
				setState(5789); match(TO);
				setState(5790); name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5792); match(ALTER);
				setState(5793); match(TYPE_P);
				setState(5794); any_name();
				setState(5795); match(RENAME);
				setState(5796); match(ATTRIBUTE);
				setState(5797); name();
				setState(5798); match(TO);
				setState(5799); name();
				setState(5800); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_opt_column);
		try {
			setState(5806);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5804); match(COLUMN);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case IF_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_opt_set_data);
		try {
			setState(5811);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5808); match(SET);
				setState(5809); match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterObjectSchemaStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterObjectSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterObjectSchemaStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterObjectSchemaStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterObjectSchemaStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterObjectSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterObjectSchemaStmtContext alterObjectSchemaStmt() throws RecognitionException {
		AlterObjectSchemaStmtContext _localctx = new AlterObjectSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_alterObjectSchemaStmt);
		try {
			setState(5993);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5813); match(ALTER);
				setState(5814); match(AGGREGATE);
				setState(5815); func_name();
				setState(5816); aggr_args();
				setState(5817); match(SET);
				setState(5818); match(SCHEMA);
				setState(5819); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5821); match(ALTER);
				setState(5822); match(COLLATION);
				setState(5823); any_name();
				setState(5824); match(SET);
				setState(5825); match(SCHEMA);
				setState(5826); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5828); match(ALTER);
				setState(5829); match(CONVERSION_P);
				setState(5830); any_name();
				setState(5831); match(SET);
				setState(5832); match(SCHEMA);
				setState(5833); name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5835); match(ALTER);
				setState(5836); match(DOMAIN_P);
				setState(5837); any_name();
				setState(5838); match(SET);
				setState(5839); match(SCHEMA);
				setState(5840); name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5842); match(ALTER);
				setState(5843); match(EXTENSION);
				setState(5844); any_name();
				setState(5845); match(SET);
				setState(5846); match(SCHEMA);
				setState(5847); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5849); match(ALTER);
				setState(5850); match(FUNCTION);
				setState(5851); function_with_argtypes();
				setState(5852); match(SET);
				setState(5853); match(SCHEMA);
				setState(5854); name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5856); match(ALTER);
				setState(5857); match(OPERATOR);
				setState(5858); any_operator();
				setState(5859); oper_argtypes();
				setState(5860); match(SET);
				setState(5861); match(SCHEMA);
				setState(5862); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5864); match(ALTER);
				setState(5865); match(OPERATOR);
				setState(5866); match(CLASS);
				setState(5867); any_name();
				setState(5868); match(USING);
				setState(5869); access_method();
				setState(5870); match(SET);
				setState(5871); match(SCHEMA);
				setState(5872); name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5874); match(ALTER);
				setState(5875); match(OPERATOR);
				setState(5876); match(FAMILY);
				setState(5877); any_name();
				setState(5878); match(USING);
				setState(5879); access_method();
				setState(5880); match(SET);
				setState(5881); match(SCHEMA);
				setState(5882); name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5884); match(ALTER);
				setState(5885); match(TABLE);
				setState(5886); relation_expr();
				setState(5887); match(SET);
				setState(5888); match(SCHEMA);
				setState(5889); name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5891); match(ALTER);
				setState(5892); match(TABLE);
				setState(5893); match(IF_P);
				setState(5894); match(EXISTS);
				setState(5895); relation_expr();
				setState(5896); match(SET);
				setState(5897); match(SCHEMA);
				setState(5898); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5900); match(ALTER);
				setState(5901); match(TEXT_P);
				setState(5902); match(SEARCH);
				setState(5903); match(PARSER);
				setState(5904); any_name();
				setState(5905); match(SET);
				setState(5906); match(SCHEMA);
				setState(5907); name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5909); match(ALTER);
				setState(5910); match(TEXT_P);
				setState(5911); match(SEARCH);
				setState(5912); match(DICTIONARY);
				setState(5913); any_name();
				setState(5914); match(SET);
				setState(5915); match(SCHEMA);
				setState(5916); name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5918); match(ALTER);
				setState(5919); match(TEXT_P);
				setState(5920); match(SEARCH);
				setState(5921); match(TEMPLATE);
				setState(5922); any_name();
				setState(5923); match(SET);
				setState(5924); match(SCHEMA);
				setState(5925); name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5927); match(ALTER);
				setState(5928); match(TEXT_P);
				setState(5929); match(SEARCH);
				setState(5930); match(CONFIGURATION);
				setState(5931); any_name();
				setState(5932); match(SET);
				setState(5933); match(SCHEMA);
				setState(5934); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5936); match(ALTER);
				setState(5937); match(SEQUENCE);
				setState(5938); qualified_name();
				setState(5939); match(SET);
				setState(5940); match(SCHEMA);
				setState(5941); name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5943); match(ALTER);
				setState(5944); match(SEQUENCE);
				setState(5945); match(IF_P);
				setState(5946); match(EXISTS);
				setState(5947); qualified_name();
				setState(5948); match(SET);
				setState(5949); match(SCHEMA);
				setState(5950); name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5952); match(ALTER);
				setState(5953); match(VIEW);
				setState(5954); qualified_name();
				setState(5955); match(SET);
				setState(5956); match(SCHEMA);
				setState(5957); name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5959); match(ALTER);
				setState(5960); match(VIEW);
				setState(5961); match(IF_P);
				setState(5962); match(EXISTS);
				setState(5963); qualified_name();
				setState(5964); match(SET);
				setState(5965); match(SCHEMA);
				setState(5966); name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5968); match(ALTER);
				setState(5969); match(FOREIGN);
				setState(5970); match(TABLE);
				setState(5971); relation_expr();
				setState(5972); match(SET);
				setState(5973); match(SCHEMA);
				setState(5974); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5976); match(ALTER);
				setState(5977); match(FOREIGN);
				setState(5978); match(TABLE);
				setState(5979); match(IF_P);
				setState(5980); match(EXISTS);
				setState(5981); relation_expr();
				setState(5982); match(SET);
				setState(5983); match(SCHEMA);
				setState(5984); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5986); match(ALTER);
				setState(5987); match(TYPE_P);
				setState(5988); any_name();
				setState(5989); match(SET);
				setState(5990); match(SCHEMA);
				setState(5991); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOwnerStmtContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterOwnerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOwnerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterOwnerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterOwnerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOwnerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOwnerStmtContext alterOwnerStmt() throws RecognitionException {
		AlterOwnerStmtContext _localctx = new AlterOwnerStmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_alterOwnerStmt);
		try {
			setState(6137);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5995); match(ALTER);
				setState(5996); match(AGGREGATE);
				setState(5997); func_name();
				setState(5998); aggr_args();
				setState(5999); match(OWNER);
				setState(6000); match(TO);
				setState(6001); roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6003); match(ALTER);
				setState(6004); match(COLLATION);
				setState(6005); any_name();
				setState(6006); match(OWNER);
				setState(6007); match(TO);
				setState(6008); roleId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6010); match(ALTER);
				setState(6011); match(CONVERSION_P);
				setState(6012); any_name();
				setState(6013); match(OWNER);
				setState(6014); match(TO);
				setState(6015); roleId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6017); match(ALTER);
				setState(6018); match(DATABASE);
				setState(6019); database_name();
				setState(6020); match(OWNER);
				setState(6021); match(TO);
				setState(6022); roleId();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6024); match(ALTER);
				setState(6025); match(DOMAIN_P);
				setState(6026); any_name();
				setState(6027); match(OWNER);
				setState(6028); match(TO);
				setState(6029); roleId();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6031); match(ALTER);
				setState(6032); match(FUNCTION);
				setState(6033); function_with_argtypes();
				setState(6034); match(OWNER);
				setState(6035); match(TO);
				setState(6036); roleId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6038); match(ALTER);
				setState(6039); opt_procedural();
				setState(6040); match(LANGUAGE);
				setState(6041); name();
				setState(6042); match(OWNER);
				setState(6043); match(TO);
				setState(6044); roleId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6046); match(ALTER);
				setState(6047); match(LARGE_P);
				setState(6048); match(OBJECT_P);
				setState(6049); numericOnly();
				setState(6050); match(OWNER);
				setState(6051); match(TO);
				setState(6052); roleId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6054); match(ALTER);
				setState(6055); match(OPERATOR);
				setState(6056); any_operator();
				setState(6057); oper_argtypes();
				setState(6058); match(OWNER);
				setState(6059); match(TO);
				setState(6060); roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6062); match(ALTER);
				setState(6063); match(OPERATOR);
				setState(6064); match(CLASS);
				setState(6065); any_name();
				setState(6066); match(USING);
				setState(6067); access_method();
				setState(6068); match(OWNER);
				setState(6069); match(TO);
				setState(6070); roleId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6072); match(ALTER);
				setState(6073); match(OPERATOR);
				setState(6074); match(FAMILY);
				setState(6075); any_name();
				setState(6076); match(USING);
				setState(6077); access_method();
				setState(6078); match(OWNER);
				setState(6079); match(TO);
				setState(6080); roleId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6082); match(ALTER);
				setState(6083); match(SCHEMA);
				setState(6084); name();
				setState(6085); match(OWNER);
				setState(6086); match(TO);
				setState(6087); roleId();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6089); match(ALTER);
				setState(6090); match(TYPE_P);
				setState(6091); any_name();
				setState(6092); match(OWNER);
				setState(6093); match(TO);
				setState(6094); roleId();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6096); match(ALTER);
				setState(6097); match(TABLESPACE);
				setState(6098); name();
				setState(6099); match(OWNER);
				setState(6100); match(TO);
				setState(6101); roleId();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6103); match(ALTER);
				setState(6104); match(TEXT_P);
				setState(6105); match(SEARCH);
				setState(6106); match(DICTIONARY);
				setState(6107); any_name();
				setState(6108); match(OWNER);
				setState(6109); match(TO);
				setState(6110); roleId();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6112); match(ALTER);
				setState(6113); match(TEXT_P);
				setState(6114); match(SEARCH);
				setState(6115); match(CONFIGURATION);
				setState(6116); any_name();
				setState(6117); match(OWNER);
				setState(6118); match(TO);
				setState(6119); roleId();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6121); match(ALTER);
				setState(6122); match(FOREIGN);
				setState(6123); match(DATA_P);
				setState(6124); match(WRAPPER);
				setState(6125); name();
				setState(6126); match(OWNER);
				setState(6127); match(TO);
				setState(6128); roleId();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6130); match(ALTER);
				setState(6131); match(SERVER);
				setState(6132); name();
				setState(6133); match(OWNER);
				setState(6134); match(TO);
				setState(6135); roleId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRuleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRuleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleStmtContext ruleStmt() throws RecognitionException {
		RuleStmtContext _localctx = new RuleStmtContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_ruleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6139); match(CREATE);
			setState(6140); opt_or_replace();
			setState(6141); match(RULE);
			setState(6142); name();
			setState(6143); match(AS);
			setState(6144); match(ON);
			setState(6145); event();
			setState(6146); match(TO);
			setState(6147); qualified_name();
			setState(6148); where_clause();
			setState(6149); match(DO);
			setState(6150); opt_instead();
			setState(6151); ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PlPgSqlParser.NOTHING, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRuleActionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRuleActionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_ruleActionList);
		try {
			setState(6159);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6153); match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6154); ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6155); match(T__7);
				setState(6156); ruleActionMulti(0);
				setState(6157); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() {
			return getRuleContext(RuleActionStmtOrEmptyContext.class,0);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRuleActionMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRuleActionMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		return ruleActionMulti(0);
	}

	private RuleActionMultiContext ruleActionMulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, _parentState);
		RuleActionMultiContext _prevctx = _localctx;
		int _startState = 770;
		enterRecursionRule(_localctx, 770, RULE_ruleActionMulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6162); ruleActionStmtOrEmpty();
			}
			_ctx.stop = _input.LT(-1);
			setState(6169);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleActionMultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ruleActionMulti);
					setState(6164);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6165); match(T__3);
					setState(6166); ruleActionStmtOrEmpty();
					}
					} 
				}
				setState(6171);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRuleActionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRuleActionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_ruleActionStmt);
		try {
			setState(6177);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6172); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6173); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6174); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6175); deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6176); notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtOrEmptyContext extends ParserRuleContext {
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public RuleActionStmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRuleActionStmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRuleActionStmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionStmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() throws RecognitionException {
		RuleActionStmtOrEmptyContext _localctx = new RuleActionStmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_ruleActionStmtOrEmpty);
		try {
			setState(6181);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179); ruleActionStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6183);
			_la = _input.LA(1);
			if ( !(_la==DELETE_P || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode ALSO() { return getToken(PlPgSqlParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(PlPgSqlParser.INSTEAD, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_opt_instead);
		try {
			setState(6188);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6185); match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(6186); match(ALSO);
				}
				break;
			case T__7:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case SELECT:
			case TABLE:
			case UPDATE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropruleStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropruleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropruleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropruleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropruleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropruleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropruleStmtContext dropruleStmt() throws RecognitionException {
		DropruleStmtContext _localctx = new DropruleStmtContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_dropruleStmt);
		try {
			setState(6206);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6190); match(DROP);
				setState(6191); match(RULE);
				setState(6192); name();
				setState(6193); match(ON);
				setState(6194); any_name();
				setState(6195); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6197); match(DROP);
				setState(6198); match(RULE);
				setState(6199); match(IF_P);
				setState(6200); match(EXISTS);
				setState(6201); name();
				setState(6202); match(ON);
				setState(6203); any_name();
				setState(6204); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode NOTIFY() { return getToken(PlPgSqlParser.NOTIFY, 0); }
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_notifyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6208); match(NOTIFY);
			setState(6209); colId();
			setState(6210); notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_notify_payload);
		try {
			setState(6215);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6212); match(T__12);
				setState(6213); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LISTEN() { return getToken(PlPgSqlParser.LISTEN, 0); }
		public ListenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterListenStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitListenStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitListenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenStmtContext listenStmt() throws RecognitionException {
		ListenStmtContext _localctx = new ListenStmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_listenStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6217); match(LISTEN);
			setState(6218); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode UNLISTEN() { return getToken(PlPgSqlParser.UNLISTEN, 0); }
		public UnlistenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterUnlistenStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitUnlistenStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUnlistenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenStmtContext unlistenStmt() throws RecognitionException {
		UnlistenStmtContext _localctx = new UnlistenStmtContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_unlistenStmt);
		try {
			setState(6224);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6220); match(UNLISTEN);
				setState(6221); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6222); match(UNLISTEN);
				setState(6223); match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStmtContext extends ParserRuleContext {
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode ABORT_P() { return getToken(PlPgSqlParser.ABORT_P, 0); }
		public TerminalNode PREPARED() { return getToken(PlPgSqlParser.PREPARED, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PlPgSqlParser.BEGIN_P, 0); }
		public TerminalNode START() { return getToken(PlPgSqlParser.START, 0); }
		public TerminalNode RELEASE() { return getToken(PlPgSqlParser.RELEASE, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(PlPgSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlPgSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlPgSqlParser.SAVEPOINT, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public TransactionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTransactionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTransactionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransactionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStmtContext transactionStmt() throws RecognitionException {
		TransactionStmtContext _localctx = new TransactionStmtContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_transactionStmt);
		try {
			setState(6268);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6226); match(ABORT_P);
				setState(6227); opt_transaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6228); match(BEGIN_P);
				setState(6229); opt_transaction();
				setState(6230); transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6232); match(START);
				setState(6233); match(TRANSACTION);
				setState(6234); transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6235); match(COMMIT);
				setState(6236); opt_transaction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6237); match(END_P);
				setState(6238); opt_transaction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6239); match(ROLLBACK);
				setState(6240); opt_transaction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6241); match(SAVEPOINT);
				setState(6242); colId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6243); match(RELEASE);
				setState(6244); match(SAVEPOINT);
				setState(6245); colId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6246); match(RELEASE);
				setState(6247); colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6248); match(ROLLBACK);
				setState(6249); opt_transaction();
				setState(6250); match(TO);
				setState(6251); match(SAVEPOINT);
				setState(6252); colId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6254); match(ROLLBACK);
				setState(6255); opt_transaction();
				setState(6256); match(TO);
				setState(6257); colId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6259); match(PREPARE);
				setState(6260); match(TRANSACTION);
				setState(6261); sConst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6262); match(COMMIT);
				setState(6263); match(PREPARED);
				setState(6264); sConst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6265); match(ROLLBACK);
				setState(6266); match(PREPARED);
				setState(6267); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode WORK() { return getToken(PlPgSqlParser.WORK, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_opt_transaction);
		try {
			setState(6273);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6270); match(WORK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6271); match(TRANSACTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlPgSqlParser.WRITE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_transaction_mode_item);
		try {
			setState(6285);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6275); match(ISOLATION);
				setState(6276); match(LEVEL);
				setState(6277); iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6278); match(READ);
				setState(6279); match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6280); match(READ);
				setState(6281); match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6282); match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6283); match(NOT);
				setState(6284); match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_itemContext transaction_mode_item() {
			return getRuleContext(Transaction_mode_itemContext.class,0);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 796;
		enterRecursionRule(_localctx, 796, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6288); transaction_mode_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6297);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6295);
					switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(6290);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6291); match(T__12);
						setState(6292); transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(6293);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6294); transaction_mode_item();
						}
						break;
					}
					} 
				}
				setState(6299);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_transaction_mode_list_or_empty);
		try {
			setState(6302);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6300); transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public ViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterViewStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitViewStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewStmtContext viewStmt() throws RecognitionException {
		ViewStmtContext _localctx = new ViewStmtContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_viewStmt);
		try {
			setState(6326);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6304); match(CREATE);
				setState(6305); optTemp();
				setState(6306); match(VIEW);
				setState(6307); qualified_name();
				setState(6308); opt_column_list();
				setState(6309); opt_reloptions();
				setState(6310); match(AS);
				setState(6311); selectStmt();
				setState(6312); opt_check_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6314); match(CREATE);
				setState(6315); match(OR);
				setState(6316); match(REPLACE);
				setState(6317); optTemp();
				setState(6318); match(VIEW);
				setState(6319); qualified_name();
				setState(6320); opt_column_list();
				setState(6321); opt_reloptions();
				setState(6322); match(AS);
				setState(6323); selectStmt();
				setState(6324); opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode CASCADED() { return getToken(PlPgSqlParser.CASCADED, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_opt_check_option);
		try {
			setState(6340);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6328); match(WITH);
				setState(6329); match(CHECK);
				setState(6330); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6331); match(WITH);
				setState(6332); match(CASCADED);
				setState(6333); match(CHECK);
				setState(6334); match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6335); match(WITH);
				setState(6336); match(LOCAL);
				setState(6337); match(CHECK);
				setState(6338); match(OPTION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStmtContext extends ParserRuleContext {
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode LOAD() { return getToken(PlPgSqlParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLoadStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLoadStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLoadStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStmtContext loadStmt() throws RecognitionException {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_loadStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6342); match(LOAD);
			setState(6343); file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbStmtContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public CreatedbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatedbStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatedbStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbStmtContext createdbStmt() throws RecognitionException {
		CreatedbStmtContext _localctx = new CreatedbStmtContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_createdbStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6345); match(CREATE);
			setState(6346); match(DATABASE);
			setState(6347); database_name();
			setState(6349);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(6348); match(WITH);
				}
				break;
			}
			setState(6351); createdb_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public Createdb_opt_itemContext createdb_opt_item() {
			return getRuleContext(Createdb_opt_itemContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		return createdb_opt_list(0);
	}

	private Createdb_opt_listContext createdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, _parentState);
		Createdb_opt_listContext _prevctx = _localctx;
		int _startState = 808;
		enterRecursionRule(_localctx, 808, RULE_createdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_list);
					setState(6354);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6355); createdb_opt_item();
					}
					} 
				}
				setState(6360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PlPgSqlParser.LOCATION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode ENCODING() { return getToken(PlPgSqlParser.ENCODING, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(PlPgSqlParser.LC_CTYPE_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode LC_COLLATE_P() { return getToken(PlPgSqlParser.LC_COLLATE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			setState(6426);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6361); match(TABLESPACE);
				setState(6362); opt_equal();
				setState(6363); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6365); match(TABLESPACE);
				setState(6366); opt_equal();
				setState(6367); match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6369); match(LOCATION);
				setState(6370); opt_equal();
				setState(6371); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6373); match(LOCATION);
				setState(6374); opt_equal();
				setState(6375); match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6377); match(TEMPLATE);
				setState(6378); opt_equal();
				setState(6379); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6381); match(TEMPLATE);
				setState(6382); opt_equal();
				setState(6383); match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6385); match(ENCODING);
				setState(6386); opt_equal();
				setState(6387); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6389); match(ENCODING);
				setState(6390); opt_equal();
				setState(6391); iConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6393); match(ENCODING);
				setState(6394); opt_equal();
				setState(6395); match(DEFAULT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6397); match(LC_COLLATE_P);
				setState(6398); opt_equal();
				setState(6399); sConst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6401); match(LC_COLLATE_P);
				setState(6402); opt_equal();
				setState(6403); match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6405); match(LC_CTYPE_P);
				setState(6406); opt_equal();
				setState(6407); sConst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6409); match(LC_CTYPE_P);
				setState(6410); opt_equal();
				setState(6411); match(DEFAULT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6413); match(CONNECTION);
				setState(6414); match(LIMIT);
				setState(6415); opt_equal();
				setState(6416); signedIconst();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6418); match(OWNER);
				setState(6419); opt_equal();
				setState(6420); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6422); match(OWNER);
				setState(6423); opt_equal();
				setState(6424); match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_opt_equal);
		try {
			setState(6430);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(6428); match(T__4);
				}
				break;
			case T__11:
			case T__10:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case DEFAULT:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case ICONST:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterDatabaseStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterDatabaseStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterDatabaseStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDatabaseStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStmtContext alterDatabaseStmt() throws RecognitionException {
		AlterDatabaseStmtContext _localctx = new AlterDatabaseStmtContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_alterDatabaseStmt);
		try {
			setState(6447);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6432); match(ALTER);
				setState(6433); match(DATABASE);
				setState(6434); database_name();
				setState(6436);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(6435); match(WITH);
					}
					break;
				}
				setState(6438); alterdb_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6440); match(ALTER);
				setState(6441); match(DATABASE);
				setState(6442); database_name();
				setState(6443); match(SET);
				setState(6444); match(TABLESPACE);
				setState(6445); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseSetStmtContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterDatabaseSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterDatabaseSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDatabaseSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSetStmtContext alterDatabaseSetStmt() throws RecognitionException {
		AlterDatabaseSetStmtContext _localctx = new AlterDatabaseSetStmtContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_alterDatabaseSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6449); match(ALTER);
			setState(6450); match(DATABASE);
			setState(6451); database_name();
			setState(6452); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterdb_opt_listContext extends ParserRuleContext {
		public Alterdb_opt_itemContext alterdb_opt_item() {
			return getRuleContext(Alterdb_opt_itemContext.class,0);
		}
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public Alterdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterdb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterdb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterdb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_listContext alterdb_opt_list() throws RecognitionException {
		return alterdb_opt_list(0);
	}

	private Alterdb_opt_listContext alterdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterdb_opt_listContext _localctx = new Alterdb_opt_listContext(_ctx, _parentState);
		Alterdb_opt_listContext _prevctx = _localctx;
		int _startState = 818;
		enterRecursionRule(_localctx, 818, RULE_alterdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6459);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterdb_opt_list);
					setState(6455);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6456); alterdb_opt_item();
					}
					} 
				}
				setState(6461);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alterdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public Alterdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterdb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterdb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterdb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_itemContext alterdb_opt_item() throws RecognitionException {
		Alterdb_opt_itemContext _localctx = new Alterdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_alterdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6462); match(CONNECTION);
			setState(6463); match(LIMIT);
			setState(6464); opt_equal();
			setState(6465); signedIconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbStmtContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public DropdbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDropdbStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDropdbStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropdbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbStmtContext dropdbStmt() throws RecognitionException {
		DropdbStmtContext _localctx = new DropdbStmtContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_dropdbStmt);
		try {
			setState(6475);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6467); match(DROP);
				setState(6468); match(DATABASE);
				setState(6469); database_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6470); match(DROP);
				setState(6471); match(DATABASE);
				setState(6472); match(IF_P);
				setState(6473); match(EXISTS);
				setState(6474); database_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainStmtContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateDomainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateDomainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainStmtContext createDomainStmt() throws RecognitionException {
		CreateDomainStmtContext _localctx = new CreateDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_createDomainStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6477); match(CREATE);
			setState(6478); match(DOMAIN_P);
			setState(6479); any_name();
			setState(6480); opt_as();
			setState(6481); typename();
			setState(6482); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode VALIDATE() { return getToken(PlPgSqlParser.VALIDATE, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public AlterDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterDomainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterDomainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainStmtContext alterDomainStmt() throws RecognitionException {
		AlterDomainStmtContext _localctx = new AlterDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_alterDomainStmt);
		try {
			setState(6534);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6484); match(ALTER);
				setState(6485); match(DOMAIN_P);
				setState(6486); any_name();
				setState(6487); alter_column_default();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6489); match(ALTER);
				setState(6490); match(DOMAIN_P);
				setState(6491); any_name();
				setState(6492); match(DROP);
				setState(6493); match(NOT);
				setState(6494); match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6496); match(ALTER);
				setState(6497); match(DOMAIN_P);
				setState(6498); any_name();
				setState(6499); match(SET);
				setState(6500); match(NOT);
				setState(6501); match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6503); match(ALTER);
				setState(6504); match(DOMAIN_P);
				setState(6505); any_name();
				setState(6506); match(ADD_P);
				setState(6507); tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6509); match(ALTER);
				setState(6510); match(DOMAIN_P);
				setState(6511); any_name();
				setState(6512); match(DROP);
				setState(6513); match(CONSTRAINT);
				setState(6514); name();
				setState(6515); opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6517); match(ALTER);
				setState(6518); match(DOMAIN_P);
				setState(6519); any_name();
				setState(6520); match(DROP);
				setState(6521); match(CONSTRAINT);
				setState(6522); match(IF_P);
				setState(6523); match(EXISTS);
				setState(6524); name();
				setState(6525); opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6527); match(ALTER);
				setState(6528); match(DOMAIN_P);
				setState(6529); any_name();
				setState(6530); match(VALIDATE);
				setState(6531); match(CONSTRAINT);
				setState(6532); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_opt_as);
		try {
			setState(6538);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6536); match(AS);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case AUTHORIZATION:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NOTNULL:
			case NUMERIC:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case REAL:
			case RIGHT:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case TIME:
			case TIMESTAMP:
			case VARCHAR:
			case VERBOSE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSDictionaryStmtContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public AlterTSDictionaryStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSDictionaryStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterTSDictionaryStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterTSDictionaryStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTSDictionaryStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSDictionaryStmtContext alterTSDictionaryStmt() throws RecognitionException {
		AlterTSDictionaryStmtContext _localctx = new AlterTSDictionaryStmtContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_alterTSDictionaryStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6540); match(ALTER);
			setState(6541); match(TEXT_P);
			setState(6542); match(SEARCH);
			setState(6543); match(DICTIONARY);
			setState(6544); any_name();
			setState(6545); definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSConfigurationStmtContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode ALTER(int i) {
			return getToken(PlPgSqlParser.ALTER, i);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public List<TerminalNode> ALTER() { return getTokens(PlPgSqlParser.ALTER); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public AlterTSConfigurationStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSConfigurationStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlterTSConfigurationStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlterTSConfigurationStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTSConfigurationStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSConfigurationStmtContext alterTSConfigurationStmt() throws RecognitionException {
		AlterTSConfigurationStmtContext _localctx = new AlterTSConfigurationStmtContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_alterTSConfigurationStmt);
		try {
			setState(6619);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6547); match(ALTER);
				setState(6548); match(TEXT_P);
				setState(6549); match(SEARCH);
				setState(6550); match(CONFIGURATION);
				setState(6551); any_name();
				setState(6552); match(ADD_P);
				setState(6553); match(MAPPING);
				setState(6554); match(FOR);
				setState(6555); name_list(0);
				setState(6556); match(WITH);
				setState(6557); any_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6559); match(ALTER);
				setState(6560); match(TEXT_P);
				setState(6561); match(SEARCH);
				setState(6562); match(CONFIGURATION);
				setState(6563); any_name();
				setState(6564); match(ALTER);
				setState(6565); match(MAPPING);
				setState(6566); match(FOR);
				setState(6567); name_list(0);
				setState(6568); match(WITH);
				setState(6569); any_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6571); match(ALTER);
				setState(6572); match(TEXT_P);
				setState(6573); match(SEARCH);
				setState(6574); match(CONFIGURATION);
				setState(6575); any_name();
				setState(6576); match(ALTER);
				setState(6577); match(MAPPING);
				setState(6578); match(REPLACE);
				setState(6579); any_name();
				setState(6580); match(WITH);
				setState(6581); any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6583); match(ALTER);
				setState(6584); match(TEXT_P);
				setState(6585); match(SEARCH);
				setState(6586); match(CONFIGURATION);
				setState(6587); any_name();
				setState(6588); match(ALTER);
				setState(6589); match(MAPPING);
				setState(6590); match(FOR);
				setState(6591); name_list(0);
				setState(6592); match(REPLACE);
				setState(6593); any_name();
				setState(6594); match(WITH);
				setState(6595); any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6597); match(ALTER);
				setState(6598); match(TEXT_P);
				setState(6599); match(SEARCH);
				setState(6600); match(CONFIGURATION);
				setState(6601); any_name();
				setState(6602); match(DROP);
				setState(6603); match(MAPPING);
				setState(6604); match(FOR);
				setState(6605); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6607); match(ALTER);
				setState(6608); match(TEXT_P);
				setState(6609); match(SEARCH);
				setState(6610); match(CONFIGURATION);
				setState(6611); any_name();
				setState(6612); match(DROP);
				setState(6613); match(MAPPING);
				setState(6614); match(IF_P);
				setState(6615); match(EXISTS);
				setState(6616); match(FOR);
				setState(6617); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionStmtContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public CreateConversionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCreateConversionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCreateConversionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateConversionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionStmtContext createConversionStmt() throws RecognitionException {
		CreateConversionStmtContext _localctx = new CreateConversionStmtContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_createConversionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6621); match(CREATE);
			setState(6622); opt_default();
			setState(6623); match(CONVERSION_P);
			setState(6624); any_name();
			setState(6625); match(FOR);
			setState(6626); sConst();
			setState(6627); match(TO);
			setState(6628); sConst();
			setState(6629); match(FROM);
			setState(6630); any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode CLUSTER() { return getToken(PlPgSqlParser.CLUSTER, 0); }
		public ClusterStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterClusterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitClusterStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitClusterStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterStmtContext clusterStmt() throws RecognitionException {
		ClusterStmtContext _localctx = new ClusterStmtContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_clusterStmt);
		try {
			setState(6645);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6632); match(CLUSTER);
				setState(6633); opt_verbose();
				setState(6634); qualified_name();
				setState(6635); cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6637); match(CLUSTER);
				setState(6638); opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6639); match(CLUSTER);
				setState(6640); opt_verbose();
				setState(6641); index_name();
				setState(6642); match(ON);
				setState(6643); qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_cluster_index_specification);
		try {
			setState(6650);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6647); match(USING);
				setState(6648); index_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VACUUM() { return getToken(PlPgSqlParser.VACUUM, 0); }
		public VacuumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVacuumStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVacuumStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumStmtContext vacuumStmt() throws RecognitionException {
		VacuumStmtContext _localctx = new VacuumStmtContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_vacuumStmt);
		try {
			setState(6681);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6652); match(VACUUM);
				setState(6653); opt_full();
				setState(6654); opt_freeze();
				setState(6655); opt_verbose();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6657); match(VACUUM);
				setState(6658); opt_full();
				setState(6659); opt_freeze();
				setState(6660); opt_verbose();
				setState(6661); qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6663); match(VACUUM);
				setState(6664); opt_full();
				setState(6665); opt_freeze();
				setState(6666); opt_verbose();
				setState(6667); analyzeStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6669); match(VACUUM);
				setState(6670); match(T__7);
				setState(6671); vacuum_option_list(0);
				setState(6672); match(T__13);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6674); match(VACUUM);
				setState(6675); match(T__7);
				setState(6676); vacuum_option_list(0);
				setState(6677); match(T__13);
				setState(6678); qualified_name();
				setState(6679); opt_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_option_listContext extends ParserRuleContext {
		public Vacuum_option_elemContext vacuum_option_elem() {
			return getRuleContext(Vacuum_option_elemContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Vacuum_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVacuum_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVacuum_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuum_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_listContext vacuum_option_list() throws RecognitionException {
		return vacuum_option_list(0);
	}

	private Vacuum_option_listContext vacuum_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vacuum_option_listContext _localctx = new Vacuum_option_listContext(_ctx, _parentState);
		Vacuum_option_listContext _prevctx = _localctx;
		int _startState = 842;
		enterRecursionRule(_localctx, 842, RULE_vacuum_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6684); vacuum_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6691);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vacuum_option_list);
					setState(6686);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6687); match(T__12);
					setState(6688); vacuum_option_elem();
					}
					} 
				}
				setState(6693);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Vacuum_option_elemContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public Vacuum_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterVacuum_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitVacuum_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuum_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_elemContext vacuum_option_elem() throws RecognitionException {
		Vacuum_option_elemContext _localctx = new Vacuum_option_elemContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_vacuum_option_elem);
		try {
			setState(6698);
			switch (_input.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6694); analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6695); match(VERBOSE);
				}
				break;
			case FREEZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6696); match(FREEZE);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6697); match(FULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public AnalyzeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAnalyzeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAnalyzeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAnalyzeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeStmtContext analyzeStmt() throws RecognitionException {
		AnalyzeStmtContext _localctx = new AnalyzeStmtContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_analyzeStmt);
		try {
			setState(6708);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6700); analyze_keyword();
				setState(6701); opt_verbose();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6703); analyze_keyword();
				setState(6704); opt_verbose();
				setState(6705); qualified_name();
				setState(6706); opt_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PlPgSqlParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PlPgSqlParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6710);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_opt_verbose);
		try {
			setState(6714);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6712); match(VERBOSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_opt_full);
		try {
			setState(6718);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6716); match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_opt_freeze);
		try {
			setState(6722);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6720); match(FREEZE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_opt_name_list);
		try {
			setState(6729);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6724); match(T__7);
				setState(6725); name_list(0);
				setState(6726); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlPgSqlParser.EXPLAIN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public ExplainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStmtContext explainStmt() throws RecognitionException {
		ExplainStmtContext _localctx = new ExplainStmtContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_explainStmt);
		try {
			setState(6747);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6731); match(EXPLAIN);
				setState(6732); explainableStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6733); match(EXPLAIN);
				setState(6734); analyze_keyword();
				setState(6735); opt_verbose();
				setState(6736); explainableStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6738); match(EXPLAIN);
				setState(6739); match(VERBOSE);
				setState(6740); explainableStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6741); match(EXPLAIN);
				setState(6742); match(T__7);
				setState(6743); explain_option_list(0);
				setState(6744); match(T__13);
				setState(6745); explainableStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplainableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplainableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_explainableStmt);
		try {
			setState(6756);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6749); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6750); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6751); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6752); deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6753); declareCursorStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6754); createAsStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6755); executeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public Explain_option_elemContext explain_option_elem() {
			return getRuleContext(Explain_option_elemContext.class,0);
		}
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 862;
		enterRecursionRule(_localctx, 862, RULE_explain_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6759); explain_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6766);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					setState(6761);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6762); match(T__12);
					setState(6763); explain_option_elem();
					}
					} 
				}
				setState(6768);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6769); explain_option_name();
			setState(6770); explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_explain_option_name);
		try {
			setState(6775);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6772); colId();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6773); analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6774); match(VERBOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_explain_option_arg);
		try {
			setState(6780);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6777); opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6778); numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public PrepareStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrepareStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrepareStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrepareStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStmtContext prepareStmt() throws RecognitionException {
		PrepareStmtContext _localctx = new PrepareStmtContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_prepareStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6782); match(PREPARE);
			setState(6783); name();
			setState(6784); prep_type_clause();
			setState(6785); match(AS);
			setState(6786); preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_prep_type_clause);
		try {
			setState(6793);
			switch (_input.LA(1)) {
			case T__7:
				enterOuterAlt(_localctx, 1);
				{
				setState(6788); match(T__7);
				setState(6789); type_list(0);
				setState(6790); match(T__13);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_preparableStmt);
		try {
			setState(6799);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6795); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6796); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6797); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6798); deleteStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PlPgSqlParser.EXECUTE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExecuteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExecuteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_executeStmt);
		try {
			setState(6815);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6801); match(EXECUTE);
				setState(6802); name();
				setState(6803); execute_param_clause();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6805); match(CREATE);
				setState(6806); optTemp();
				setState(6807); match(TABLE);
				setState(6808); create_as_target();
				setState(6809); match(AS);
				setState(6810); match(EXECUTE);
				setState(6811); name();
				setState(6812); execute_param_clause();
				setState(6813); opt_with_data();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_execute_param_clause);
		try {
			setState(6822);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6817); match(T__7);
				setState(6818); expr_list(0);
				setState(6819); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateStmtContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PlPgSqlParser.DEALLOCATE, 0); }
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DeallocateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDeallocateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDeallocateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeallocateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateStmtContext deallocateStmt() throws RecognitionException {
		DeallocateStmtContext _localctx = new DeallocateStmtContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_deallocateStmt);
		try {
			setState(6834);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6824); match(DEALLOCATE);
				setState(6825); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6826); match(DEALLOCATE);
				setState(6827); match(PREPARE);
				setState(6828); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6829); match(DEALLOCATE);
				setState(6830); match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6831); match(DEALLOCATE);
				setState(6832); match(PREPARE);
				setState(6833); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public InsertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInsertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInsertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmtContext insertStmt() throws RecognitionException {
		InsertStmtContext _localctx = new InsertStmtContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_insertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6836); opt_with_clause();
			setState(6837); match(INSERT);
			setState(6838); match(INTO);
			setState(6839); qualified_name();
			setState(6840); insert_rest();
			setState(6841); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_insert_rest);
		try {
			setState(6851);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6843); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6844); match(T__7);
				setState(6845); insert_column_list(0);
				setState(6846); match(T__13);
				setState(6847); selectStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6849); match(DEFAULT);
				setState(6850); match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Insert_column_itemContext insert_column_item() {
			return getRuleContext(Insert_column_itemContext.class,0);
		}
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 886;
		enterRecursionRule(_localctx, 886, RULE_insert_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6854); insert_column_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6861);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					setState(6856);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6857); match(T__12);
					setState(6858); insert_column_item();
					}
					} 
				}
				setState(6863);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6864); colId();
			setState(6865); opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlPgSqlParser.RETURNING, 0); }
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_returning_clause);
		try {
			setState(6870);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6867); match(RETURNING);
				setState(6868); target_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStmtContext extends ParserRuleContext {
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public DeleteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDeleteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDeleteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeleteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStmtContext deleteStmt() throws RecognitionException {
		DeleteStmtContext _localctx = new DeleteStmtContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_deleteStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6872); opt_with_clause();
			setState(6873); match(DELETE_P);
			setState(6874); match(FROM);
			setState(6875); relation_expr_opt_alias();
			setState(6876); using_clause();
			setState(6877); where_or_current_clause();
			setState(6878); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_using_clause);
		try {
			setState(6883);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6880); match(USING);
				setState(6881); from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStmtContext extends ParserRuleContext {
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public TerminalNode LOCK_P() { return getToken(PlPgSqlParser.LOCK_P, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLockStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLockStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLockStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStmtContext lockStmt() throws RecognitionException {
		LockStmtContext _localctx = new LockStmtContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_lockStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6885); match(LOCK_P);
			setState(6886); opt_table();
			setState(6887); relation_expr_list(0);
			setState(6888); opt_lock();
			setState(6889); opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode MODE() { return getToken(PlPgSqlParser.MODE, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_opt_lock);
		try {
			setState(6896);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6891); match(IN_P);
				setState(6892); lock_type();
				setState(6893); match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode EXCLUSIVE() { return getToken(PlPgSqlParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(PlPgSqlParser.ACCESS, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PlPgSqlParser.SHARE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_lock_type);
		try {
			setState(6914);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6898); match(ACCESS);
				setState(6899); match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6900); match(ROW);
				setState(6901); match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6902); match(ROW);
				setState(6903); match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6904); match(SHARE);
				setState(6905); match(UPDATE);
				setState(6906); match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6907); match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6908); match(SHARE);
				setState(6909); match(ROW);
				setState(6910); match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6911); match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6912); match(ACCESS);
				setState(6913); match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PlPgSqlParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_opt_nowait);
		try {
			setState(6918);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6916); match(NOWAIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public UpdateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterUpdateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitUpdateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUpdateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStmtContext updateStmt() throws RecognitionException {
		UpdateStmtContext _localctx = new UpdateStmtContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_updateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6920); opt_with_clause();
			setState(6921); match(UPDATE);
			setState(6922); relation_expr_opt_alias();
			setState(6923); match(SET);
			setState(6924); set_clause_list(0);
			setState(6925); from_clause();
			setState(6926); where_or_current_clause();
			setState(6927); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 906;
		enterRecursionRule(_localctx, 906, RULE_set_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6930); set_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(6937);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					setState(6932);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6933); match(T__12);
					setState(6934); set_clause();
					}
					} 
				}
				setState(6939);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Multiple_set_clauseContext multiple_set_clause() {
			return getRuleContext(Multiple_set_clauseContext.class,0);
		}
		public Single_set_clauseContext single_set_clause() {
			return getRuleContext(Single_set_clauseContext.class,0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_set_clause);
		try {
			setState(6942);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6940); single_set_clause();
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				setState(6941); multiple_set_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Single_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSingle_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSingle_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSingle_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_set_clauseContext single_set_clause() throws RecognitionException {
		Single_set_clauseContext _localctx = new Single_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_single_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6944); set_target();
			setState(6945); match(T__4);
			setState(6946); ctext_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_set_clauseContext extends ParserRuleContext {
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Multiple_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterMultiple_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitMultiple_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitMultiple_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_set_clauseContext multiple_set_clause() throws RecognitionException {
		Multiple_set_clauseContext _localctx = new Multiple_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_multiple_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6948); match(T__7);
			setState(6949); set_target_list(0);
			setState(6950); match(T__13);
			setState(6951); match(T__4);
			setState(6952); ctext_row();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6954); colId();
			setState(6955); opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 916;
		enterRecursionRule(_localctx, 916, RULE_set_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6958); set_target();
			}
			_ctx.stop = _input.LT(-1);
			setState(6965);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					setState(6960);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6961); match(T__12);
					setState(6962); set_target();
					}
					} 
				}
				setState(6967);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DeclareCursorStmtContext extends ParserRuleContext {
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PlPgSqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode DECLARE() { return getToken(PlPgSqlParser.DECLARE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public DeclareCursorStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDeclareCursorStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDeclareCursorStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeclareCursorStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStmtContext declareCursorStmt() throws RecognitionException {
		DeclareCursorStmtContext _localctx = new DeclareCursorStmtContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_declareCursorStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6968); match(DECLARE);
			setState(6969); cursor_name();
			setState(6970); cursor_options(0);
			setState(6971); match(CURSOR);
			setState(6972); opt_hold();
			setState(6973); match(FOR);
			setState(6974); selectStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6976); name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public TerminalNode INSENSITIVE() { return getToken(PlPgSqlParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(PlPgSqlParser.SCROLL, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 922;
		enterRecursionRule(_localctx, 922, RULE_cursor_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6990);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,344,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6988);
					switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6979);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6980); match(NO);
						setState(6981); match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6982);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6983); match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6984);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6985); match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6986);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6987); match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				setState(6992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,344,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode HOLD() { return getToken(PlPgSqlParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_opt_hold);
		try {
			setState(6998);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(6994); match(WITH);
				setState(6995); match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6996); match(WITHOUT);
				setState(6997); match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelectStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelectStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelectStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtContext selectStmt() throws RecognitionException {
		SelectStmtContext _localctx = new SelectStmtContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_selectStmt);
		try {
			setState(7002);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7000); select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7001); select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		return select_with_parens(0);
	}

	private Select_with_parensContext select_with_parens(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, _parentState);
		Select_with_parensContext _prevctx = _localctx;
		int _startState = 928;
		enterRecursionRule(_localctx, 928, RULE_select_with_parens, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7013);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(7005); match(T__7);
				setState(7006); select_no_parens();
				setState(7007); match(T__13);
				}
				break;
			case 2:
				{
				setState(7009); match(T__7);
				setState(7010); select_with_parens(0);
				setState(7011); match(T__13);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7038);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7036);
					switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
					case 1:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7015);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7016); match(UNION);
						setState(7017); opt_all();
						setState(7020);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7018); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7019); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7022);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7023); match(INTERSECT);
						setState(7024); opt_all();
						setState(7027);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7025); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7026); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7029);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7030); match(EXCEPT);
						setState(7031); opt_all();
						setState(7034);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7032); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7033); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(7040);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_select_no_parens);
		try {
			setState(7074);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7041); simple_select(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7042); select_clause();
				setState(7043); sort_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7045); select_clause();
				setState(7046); opt_sort_clause();
				setState(7047); for_locking_clause();
				setState(7048); opt_select_limit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7050); select_clause();
				setState(7051); opt_sort_clause();
				setState(7052); select_limit();
				setState(7053); opt_for_locking_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7055); with_clause();
				setState(7056); select_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7058); with_clause();
				setState(7059); select_clause();
				setState(7060); sort_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7062); with_clause();
				setState(7063); select_clause();
				setState(7064); opt_sort_clause();
				setState(7065); for_locking_clause();
				setState(7066); opt_select_limit();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7068); with_clause();
				setState(7069); select_clause();
				setState(7070); opt_sort_clause();
				setState(7071); select_limit();
				setState(7072); opt_for_locking_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_select_clause);
		try {
			setState(7078);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7076); simple_select(0);
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				setState(7077); select_with_parens(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Opt_distinctContext opt_distinct() {
			return getRuleContext(Opt_distinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSimple_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 934;
		enterRecursionRule(_localctx, 934, RULE_simple_select, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7094);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(7081); match(SELECT);
				setState(7082); opt_distinct();
				setState(7083); target_list(0);
				setState(7084); into_clause();
				setState(7085); from_clause();
				setState(7086); where_clause();
				setState(7087); group_clause();
				setState(7088); having_clause();
				setState(7089); window_clause();
				}
				break;
			case VALUES:
				{
				setState(7091); values_clause(0);
				}
				break;
			case TABLE:
				{
				setState(7092); match(TABLE);
				setState(7093); relation_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(7119);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7117);
					switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7096);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7097); match(UNION);
						setState(7098); opt_all();
						setState(7101);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7099); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7100); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7103);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7104); match(INTERSECT);
						setState(7105); opt_all();
						setState(7108);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7106); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7107); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7110);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7111); match(EXCEPT);
						setState(7112); opt_all();
						setState(7115);
						switch (_input.LA(1)) {
						case T__7:
							{
							setState(7113); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(7114); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(7121);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PlPgSqlParser.RECURSIVE, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_with_clause);
		try {
			setState(7127);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7122); match(WITH);
				setState(7123); cte_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7124); match(WITH);
				setState(7125); match(RECURSIVE);
				setState(7126); cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public Common_table_exprContext common_table_expr() {
			return getRuleContext(Common_table_exprContext.class,0);
		}
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cte_listContext _localctx = new Cte_listContext(_ctx, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 938;
		enterRecursionRule(_localctx, 938, RULE_cte_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7130); common_table_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(7137);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,362,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					setState(7132);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7133); match(T__12);
					setState(7134); common_table_expr();
					}
					} 
				}
				setState(7139);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,362,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7140); name();
			setState(7141); opt_name_list();
			setState(7142); match(AS);
			setState(7143); match(T__7);
			setState(7144); preparableStmt();
			setState(7145); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_opt_with_clause);
		try {
			setState(7149);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(7147); with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_into_clause);
		try {
			setState(7154);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7151); match(INTO);
				setState(7152); optTempTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(PlPgSqlParser.UNLOGGED, 0); }
		public TerminalNode GLOBAL() { return getToken(PlPgSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_optTempTableName);
		try {
			setState(7191);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7156); match(TEMPORARY);
				setState(7157); opt_table();
				setState(7158); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7160); match(TEMP);
				setState(7161); opt_table();
				setState(7162); qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7164); match(LOCAL);
				setState(7165); match(TEMPORARY);
				setState(7166); opt_table();
				setState(7167); qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7169); match(LOCAL);
				setState(7170); match(TEMP);
				setState(7171); opt_table();
				setState(7172); qualified_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7174); match(GLOBAL);
				setState(7175); match(TEMPORARY);
				setState(7176); opt_table();
				setState(7177); qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7179); match(GLOBAL);
				setState(7180); match(TEMP);
				setState(7181); opt_table();
				setState(7182); qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7184); match(UNLOGGED);
				setState(7185); opt_table();
				setState(7186); qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7188); match(TABLE);
				setState(7189); qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7190); qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_opt_table);
		try {
			setState(7195);
			switch (_input.LA(1)) {
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7193); match(TABLE);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case ONLY:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public Opt_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_all(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_all(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_all(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_allContext opt_all() throws RecognitionException {
		Opt_allContext _localctx = new Opt_allContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_opt_all);
		try {
			setState(7200);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7197); match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7198); match(DISTINCT);
				}
				break;
			case T__7:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_distinctContext opt_distinct() throws RecognitionException {
		Opt_distinctContext _localctx = new Opt_distinctContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_opt_distinct);
		try {
			setState(7211);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7202); match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7203); match(DISTINCT);
				setState(7204); match(ON);
				setState(7205); match(T__7);
				setState(7206); expr_list(0);
				setState(7207); match(T__13);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7209); match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_opt_sort_clause);
		try {
			setState(7215);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7213); sort_clause();
				}
				break;
			case T__13:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7217); match(ORDER);
			setState(7218); match(BY);
			setState(7219); sortby_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public SortbyContext sortby() {
			return getRuleContext(SortbyContext.class,0);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		return sortby_list(0);
	}

	private Sortby_listContext sortby_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, _parentState);
		Sortby_listContext _prevctx = _localctx;
		int _startState = 958;
		enterRecursionRule(_localctx, 958, RULE_sortby_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7222); sortby();
			}
			_ctx.stop = _input.LT(-1);
			setState(7229);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sortby_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_sortby_list);
					setState(7224);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7225); match(T__12);
					setState(7226); sortby();
					}
					} 
				}
				setState(7231);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_sortby);
		try {
			setState(7241);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7232); a_expr(0);
				setState(7233); match(USING);
				setState(7234); qual_all_Op();
				setState(7235); opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7237); a_expr(0);
				setState(7238); opt_asc_desc();
				setState(7239); opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_select_limit);
		try {
			setState(7251);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7243); limit_clause();
				setState(7244); offset_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7246); offset_clause();
				setState(7247); limit_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7249); limit_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7250); offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_opt_select_limit);
		try {
			setState(7255);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7253); select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public Opt_select_fetch_first_valueContext opt_select_fetch_first_value() {
			return getRuleContext(Opt_select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_limit_clause);
		try {
			setState(7270);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7257); match(LIMIT);
				setState(7258); select_limit_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7259); match(LIMIT);
				setState(7260); select_limit_value();
				setState(7261); match(T__12);
				setState(7262); select_offset_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7264); match(FETCH);
				setState(7265); first_or_next();
				setState(7266); opt_select_fetch_first_value();
				setState(7267); row_or_rows();
				setState(7268); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(PlPgSqlParser.OFFSET, 0); }
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Select_offset_value2Context select_offset_value2() {
			return getRuleContext(Select_offset_value2Context.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_offset_clause);
		try {
			setState(7278);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7272); match(OFFSET);
				setState(7273); select_offset_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7274); match(OFFSET);
				setState(7275); select_offset_value2();
				setState(7276); row_or_rows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_select_limit_value);
		try {
			setState(7282);
			switch (_input.LA(1)) {
			case T__11:
			case T__10:
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case Op:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOT:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OPERATOR:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(7280); a_expr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7281); match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7284); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_fetch_first_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_select_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_select_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_select_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_fetch_first_valueContext opt_select_fetch_first_value() throws RecognitionException {
		Opt_select_fetch_first_valueContext _localctx = new Opt_select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_opt_select_fetch_first_value);
		try {
			setState(7292);
			switch (_input.LA(1)) {
			case T__11:
			case T__10:
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(7286); signedIconst();
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				setState(7287); match(T__7);
				setState(7288); a_expr(0);
				setState(7289); match(T__13);
				}
				break;
			case ROW:
			case ROWS:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_value2Context extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Select_offset_value2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSelect_offset_value2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSelect_offset_value2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_offset_value2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_value2Context select_offset_value2() throws RecognitionException {
		Select_offset_value2Context _localctx = new Select_offset_value2Context(_ctx, getState());
		enterRule(_localctx, 976, RULE_select_offset_value2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7294); c_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7296);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PlPgSqlParser.NEXT, 0); }
		public TerminalNode FIRST_P() { return getToken(PlPgSqlParser.FIRST_P, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7298);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_group_clause);
		try {
			setState(7304);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7300); match(GROUP_P);
				setState(7301); match(BY);
				setState(7302); expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(PlPgSqlParser.HAVING, 0); }
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_having_clause);
		try {
			setState(7309);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7306); match(HAVING);
				setState(7307); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_for_locking_clause);
		try {
			setState(7315);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7311); for_locking_items(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7312); match(FOR);
				setState(7313); match(READ);
				setState(7314); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_opt_for_locking_clause);
		try {
			setState(7319);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7317); for_locking_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public For_locking_itemContext for_locking_item() {
			return getRuleContext(For_locking_itemContext.class,0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 990;
		enterRecursionRule(_localctx, 990, RULE_for_locking_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7322); for_locking_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7328);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					setState(7324);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7325); for_locking_item();
					}
					} 
				}
				setState(7330);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PlPgSqlParser.SHARE, 0); }
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_for_locking_item);
		try {
			setState(7341);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7331); match(FOR);
				setState(7332); match(UPDATE);
				setState(7333); locked_rels_list();
				setState(7334); opt_nowait();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7336); match(FOR);
				setState(7337); match(SHARE);
				setState(7338); locked_rels_list();
				setState(7339); opt_nowait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_locked_rels_list);
		try {
			setState(7346);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7343); match(OF);
				setState(7344); qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 996;
		enterRecursionRule(_localctx, 996, RULE_values_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7349); match(VALUES);
			setState(7350); ctext_row();
			}
			_ctx.stop = _input.LT(-1);
			setState(7357);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					setState(7352);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7353); match(T__12);
					setState(7354); ctext_row();
					}
					} 
				}
				setState(7359);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_from_clause);
		try {
			setState(7363);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7360); match(FROM);
				setState(7361); from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		return from_list(0);
	}

	private From_listContext from_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_listContext _localctx = new From_listContext(_ctx, _parentState);
		From_listContext _prevctx = _localctx;
		int _startState = 1000;
		enterRecursionRule(_localctx, 1000, RULE_from_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7366); table_ref();
			}
			_ctx.stop = _input.LT(-1);
			setState(7373);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_list);
					setState(7368);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7369); match(T__12);
					setState(7370); table_ref();
					}
					} 
				}
				setState(7375);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_table_ref);
		try {
			setState(7378);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7376); joined_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7377); table_ref2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref2Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public Table_ref2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTable_ref2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTable_ref2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_ref2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref2Context table_ref2() throws RecognitionException {
		Table_ref2Context _localctx = new Table_ref2Context(_ctx, getState());
		enterRule(_localctx, 1004, RULE_table_ref2);
		try {
			setState(7411);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7380); relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7381); relation_expr();
				setState(7382); alias_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7384); func_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7385); func_table();
				setState(7386); alias_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7388); func_table();
				setState(7389); match(AS);
				setState(7390); match(T__7);
				setState(7391); tableFuncElementList(0);
				setState(7392); match(T__13);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7394); func_table();
				setState(7395); match(AS);
				setState(7396); colId();
				setState(7397); match(T__7);
				setState(7398); tableFuncElementList(0);
				setState(7399); match(T__13);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7401); func_table();
				setState(7402); colId();
				setState(7403); match(T__7);
				setState(7404); tableFuncElementList(0);
				setState(7405); match(T__13);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7407); select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7408); select_with_parens(0);
				setState(7409); alias_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlPgSqlParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PlPgSqlParser.NATURAL, 0); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(PlPgSqlParser.CROSS, 0); }
		public Table_ref2Context table_ref2(int i) {
			return getRuleContext(Table_ref2Context.class,i);
		}
		public List<Table_ref2Context> table_ref2() {
			return getRuleContexts(Table_ref2Context.class);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Join_qualContext join_qual() {
			return getRuleContext(Join_qualContext.class,0);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitJoined_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_joined_table);
		try {
			setState(7446);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7413); match(T__7);
				setState(7414); joined_table();
				setState(7415); match(T__13);
				setState(7417);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(7416); alias_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7419); table_ref2();
				setState(7420); match(CROSS);
				setState(7421); match(JOIN);
				setState(7422); table_ref2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7424); table_ref2();
				setState(7425); join_type();
				setState(7426); match(JOIN);
				setState(7427); table_ref2();
				setState(7428); join_qual();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7430); table_ref2();
				setState(7431); match(JOIN);
				setState(7432); table_ref2();
				setState(7433); join_qual();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7435); table_ref2();
				setState(7436); match(NATURAL);
				setState(7437); join_type();
				setState(7438); match(JOIN);
				setState(7439); table_ref2();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7441); table_ref2();
				setState(7442); match(NATURAL);
				setState(7443); match(JOIN);
				setState(7444); table_ref2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_alias_clause);
		try {
			setState(7462);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7448); match(AS);
				setState(7449); colId();
				setState(7450); match(T__7);
				setState(7451); name_list(0);
				setState(7452); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7454); match(AS);
				setState(7455); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7456); colId();
				setState(7457); match(T__7);
				setState(7458); name_list(0);
				setState(7459); match(T__13);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7461); colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode OUTER_P() { return getToken(PlPgSqlParser.OUTER_P, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode INNER_P() { return getToken(PlPgSqlParser.INNER_P, 0); }
		public TerminalNode LEFT() { return getToken(PlPgSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlPgSqlParser.RIGHT, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_join_type);
		int _la;
		try {
			setState(7477);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7464); match(FULL);
				setState(7466);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(7465); match(OUTER_P);
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7468); match(LEFT);
				setState(7470);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(7469); match(OUTER_P);
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7472); match(RIGHT);
				setState(7474);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(7473); match(OUTER_P);
					}
				}

				}
				break;
			case INNER_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(7476); match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_join_qual);
		try {
			setState(7486);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7479); match(USING);
				setState(7480); match(T__7);
				setState(7481); name_list(0);
				setState(7482); match(T__13);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7484); match(ON);
				setState(7485); a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_relation_expr);
		try {
			setState(7499);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7488); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7489); qualified_name();
				setState(7490); match(T__9);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7492); match(ONLY);
				setState(7493); qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7494); match(ONLY);
				setState(7495); match(T__7);
				setState(7496); qualified_name();
				setState(7497); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 1016;
		enterRecursionRule(_localctx, 1016, RULE_relation_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7502); relation_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(7509);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					setState(7504);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7505); match(T__12);
					setState(7506); relation_expr();
					}
					} 
				}
				setState(7511);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_relation_expr_opt_alias);
		try {
			setState(7520);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7512); relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7513); relation_expr();
				setState(7514); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7516); relation_expr();
				setState(7517); match(AS);
				setState(7518); colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_func_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7522); func_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_where_clause);
		try {
			setState(7527);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7524); match(WHERE);
				setState(7525); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_where_or_current_clause);
		try {
			setState(7536);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7529); match(WHERE);
				setState(7530); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7531); match(WHERE);
				setState(7532); match(CURRENT_P);
				setState(7533); match(OF);
				setState(7534); cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public OpttableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpttableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpttableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpttableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableFuncElementListContext opttableFuncElementList() throws RecognitionException {
		OpttableFuncElementListContext _localctx = new OpttableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_opttableFuncElementList);
		try {
			setState(7540);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7538); tableFuncElementList(0);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		return tableFuncElementList(0);
	}

	private TableFuncElementListContext tableFuncElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, _parentState);
		TableFuncElementListContext _prevctx = _localctx;
		int _startState = 1028;
		enterRecursionRule(_localctx, 1028, RULE_tableFuncElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7543); tableFuncElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(7550);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableFuncElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableFuncElementList);
					setState(7545);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7546); match(T__12);
					setState(7547); tableFuncElement();
					}
					} 
				}
				setState(7552);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_tableFuncElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7553); colId();
			setState(7554); typename();
			setState(7555); opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_typename);
		try {
			setState(7584);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7557); simpletypename();
				setState(7558); opt_array_bounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7560); match(SETOF);
				setState(7561); simpletypename();
				setState(7562); opt_array_bounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7564); simpletypename();
				setState(7565); match(ARRAY);
				setState(7566); match(T__8);
				setState(7567); iConst();
				setState(7568); match(T__17);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7570); match(SETOF);
				setState(7571); simpletypename();
				setState(7572); match(ARRAY);
				setState(7573); match(T__8);
				setState(7574); iConst();
				setState(7575); match(T__17);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7577); simpletypename();
				setState(7578); match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7580); match(SETOF);
				setState(7581); simpletypename();
				setState(7582); match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 1034;
		enterRecursionRule(_localctx, 1034, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7597);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7595);
					switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7587);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7588); match(T__8);
						setState(7589); match(T__17);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7590);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7591); match(T__8);
						setState(7592); iConst();
						setState(7593); match(T__17);
						}
						break;
					}
					} 
				}
				setState(7599);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpletypenameContext extends ParserRuleContext {
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_simpletypename);
		try {
			setState(7614);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7600); genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7601); numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7602); bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7603); character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7604); constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7605); constInterval();
				setState(7606); opt_interval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7608); constInterval();
				setState(7609); match(T__7);
				setState(7610); iConst();
				setState(7611); match(T__13);
				setState(7612); opt_interval();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsttypenameContext extends ParserRuleContext {
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_consttypename);
		try {
			setState(7620);
			switch (_input.LA(1)) {
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7616); numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7617); constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7618); constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7619); constDatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_genericType);
		try {
			setState(7629);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7622); type_function_name();
				setState(7623); opt_type_modifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7625); type_function_name();
				setState(7626); attrs(0);
				setState(7627); opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_opt_type_modifiers);
		try {
			setState(7636);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7631); match(T__7);
				setState(7632); expr_list(0);
				setState(7633); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode DOUBLE_P() { return getToken(PlPgSqlParser.DOUBLE_P, 0); }
		public TerminalNode DEC() { return getToken(PlPgSqlParser.DEC, 0); }
		public TerminalNode PRECISION() { return getToken(PlPgSqlParser.PRECISION, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(PlPgSqlParser.BOOLEAN_P, 0); }
		public TerminalNode FLOAT_P() { return getToken(PlPgSqlParser.FLOAT_P, 0); }
		public TerminalNode NUMERIC() { return getToken(PlPgSqlParser.NUMERIC, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DECIMAL_P() { return getToken(PlPgSqlParser.DECIMAL_P, 0); }
		public TerminalNode INT_P() { return getToken(PlPgSqlParser.INT_P, 0); }
		public TerminalNode REAL() { return getToken(PlPgSqlParser.REAL, 0); }
		public TerminalNode INTEGER() { return getToken(PlPgSqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(PlPgSqlParser.BIGINT, 0); }
		public TerminalNode SMALLINT() { return getToken(PlPgSqlParser.SMALLINT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_numeric);
		try {
			setState(7654);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7638); match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7639); match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7640); match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(7641); match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7642); match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(7643); match(FLOAT_P);
				setState(7644); opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(7645); match(DOUBLE_P);
				setState(7646); match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(7647); match(DECIMAL_P);
				setState(7648); opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(7649); match(DEC);
				setState(7650); opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(7651); match(NUMERIC);
				setState(7652); opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(7653); match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_opt_float);
		try {
			setState(7661);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7656); match(T__7);
				setState(7657); iConst();
				setState(7658); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_bit);
		try {
			setState(7665);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7663); bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7664); bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstbitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_constbit);
		try {
			setState(7669);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7667); bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7668); bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_bitWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7671); match(BIT);
			setState(7672); opt_varying();
			setState(7673); match(T__7);
			setState(7674); expr_list(0);
			setState(7675); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7677); match(BIT);
			setState(7678); opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_character);
		try {
			setState(7682);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7680); characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7681); characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstcharacterContext extends ParserRuleContext {
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_constcharacter);
		try {
			setState(7686);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7684); characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7685); characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Character_defContext character_def() {
			return getRuleContext(Character_defContext.class,0);
		}
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7688); character_def();
			setState(7689); match(T__7);
			setState(7690); iConst();
			setState(7691); match(T__13);
			setState(7692); opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public Character_defContext character_def() {
			return getRuleContext(Character_defContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7694); character_def();
			setState(7695); opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_defContext extends ParserRuleContext {
		public TerminalNode NATIONAL() { return getToken(PlPgSqlParser.NATIONAL, 0); }
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(PlPgSqlParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(PlPgSqlParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PlPgSqlParser.VARCHAR, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public Character_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCharacter_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCharacter_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacter_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_defContext character_def() throws RecognitionException {
		Character_defContext _localctx = new Character_defContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_character_def);
		try {
			setState(7710);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7697); match(CHARACTER);
				setState(7698); opt_varying();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7699); match(CHAR_P);
				setState(7700); opt_varying();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7701); match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7702); match(NATIONAL);
				setState(7703); match(CHARACTER);
				setState(7704); opt_varying();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7705); match(NATIONAL);
				setState(7706); match(CHAR_P);
				setState(7707); opt_varying();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7708); match(NCHAR);
				setState(7709); opt_varying();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PlPgSqlParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_opt_varying);
		try {
			setState(7714);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7712); match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_charsetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public Opt_charsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_charset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_charset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_charset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_charset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_charsetContext opt_charset() throws RecognitionException {
		Opt_charsetContext _localctx = new Opt_charsetContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_opt_charset);
		try {
			setState(7720);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7716); match(CHARACTER);
				setState(7717); match(SET);
				setState(7718); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlPgSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_constDatetime);
		try {
			setState(7738);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7722); match(TIMESTAMP);
				setState(7723); match(T__7);
				setState(7724); iConst();
				setState(7725); match(T__13);
				setState(7726); opt_timezone();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7728); match(TIMESTAMP);
				setState(7729); opt_timezone();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7730); match(TIME);
				setState(7731); match(T__7);
				setState(7732); iConst();
				setState(7733); match(T__13);
				setState(7734); opt_timezone();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7736); match(TIME);
				setState(7737); opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PlPgSqlParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7740); match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode WITH_TIME() { return getToken(PlPgSqlParser.WITH_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_opt_timezone);
		try {
			setState(7748);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7742); match(WITH_TIME);
				setState(7743); match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7744); match(WITHOUT);
				setState(7745); match(TIME);
				setState(7746); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode MONTH_P() { return getToken(PlPgSqlParser.MONTH_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PlPgSqlParser.MINUTE_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PlPgSqlParser.HOUR_P, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode YEAR_P() { return getToken(PlPgSqlParser.YEAR_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(PlPgSqlParser.DAY_P, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_opt_interval);
		try {
			setState(7778);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7750); match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7751); match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7752); match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7753); match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7754); match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7755); interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7756); match(YEAR_P);
				setState(7757); match(TO);
				setState(7758); match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7759); match(DAY_P);
				setState(7760); match(TO);
				setState(7761); match(HOUR_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7762); match(DAY_P);
				setState(7763); match(TO);
				setState(7764); match(MINUTE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7765); match(DAY_P);
				setState(7766); match(TO);
				setState(7767); interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7768); match(HOUR_P);
				setState(7769); match(TO);
				setState(7770); match(MINUTE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7771); match(HOUR_P);
				setState(7772); match(TO);
				setState(7773); interval_second();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7774); match(MINUTE_P);
				setState(7775); match(TO);
				setState(7776); interval_second();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PlPgSqlParser.SECOND_P, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_interval_second);
		try {
			setState(7786);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7780); match(SECOND_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7781); match(SECOND_P);
				setState(7782); match(T__7);
				setState(7783); iConst();
				setState(7784); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode TYPECAST() { return getToken(PlPgSqlParser.TYPECAST, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode UNKNOWN() { return getToken(PlPgSqlParser.UNKNOWN, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SIMILAR() { return getToken(PlPgSqlParser.SIMILAR, 0); }
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode NOTNULL() { return getToken(PlPgSqlParser.NOTNULL, 0); }
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_asymmetricContext opt_asymmetric() {
			return getRuleContext(Opt_asymmetricContext.class,0);
		}
		public TerminalNode ESCAPE() { return getToken(PlPgSqlParser.ESCAPE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PlPgSqlParser.SYMMETRIC, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public TerminalNode ISNULL() { return getToken(PlPgSqlParser.ISNULL, 0); }
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OVERLAPS() { return getToken(PlPgSqlParser.OVERLAPS, 0); }
		public TerminalNode AT() { return getToken(PlPgSqlParser.AT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		A_exprContext _localctx = new A_exprContext(_ctx, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 1080;
		enterRecursionRule(_localctx, 1080, RULE_a_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7805);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				setState(7789); match(T__11);
				setState(7790); a_expr(55);
				}
				break;
			case 2:
				{
				setState(7791); match(T__10);
				setState(7792); a_expr(54);
				}
				break;
			case 3:
				{
				setState(7793); qual_Op();
				setState(7794); a_expr(43);
				}
				break;
			case 4:
				{
				setState(7796); match(NOT);
				setState(7797); a_expr(39);
				}
				break;
			case 5:
				{
				setState(7798); c_expr();
				}
				break;
			case 6:
				{
				setState(7799); row();
				setState(7800); match(OVERLAPS);
				setState(7801); row();
				}
				break;
			case 7:
				{
				setState(7803); match(UNIQUE);
				setState(7804); select_with_parens(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,427,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8035);
					switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7807);
						if (!(precpred(_ctx, 56))) throw new FailedPredicateException(this, "precpred(_ctx, 56)");
						setState(7808); match(AT);
						setState(7809); match(TIME);
						setState(7810); match(ZONE);
						setState(7811); a_expr(57);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7812);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(7813); match(T__11);
						setState(7814); a_expr(54);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7815);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(7816); match(T__10);
						setState(7817); a_expr(53);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7818);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(7819); match(T__9);
						setState(7820); a_expr(52);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7821);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(7822); match(T__1);
						setState(7823); a_expr(51);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7824);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(7825); match(T__16);
						setState(7826); a_expr(50);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7827);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(7828); match(T__15);
						setState(7829); a_expr(49);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7830);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(7831); match(T__5);
						setState(7832); a_expr(48);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7833);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(7834); match(T__2);
						setState(7835); a_expr(47);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7836);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(7837); match(T__4);
						setState(7838); a_expr(46);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7839);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(7840); qual_Op();
						setState(7841); a_expr(45);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7843);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(7844); match(AND);
						setState(7845); a_expr(42);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7846);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(7847); match(OR);
						setState(7848); a_expr(41);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7849);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(7850); match(LIKE);
						setState(7851); a_expr(39);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7852);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(7853); match(LIKE);
						setState(7854); a_expr(0);
						setState(7855); match(ESCAPE);
						setState(7856); a_expr(38);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7858);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(7859); match(NOT);
						setState(7860); match(LIKE);
						setState(7861); a_expr(37);
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7862);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(7863); match(NOT);
						setState(7864); match(LIKE);
						setState(7865); a_expr(0);
						setState(7866); match(ESCAPE);
						setState(7867); a_expr(36);
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7869);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(7870); match(ILIKE);
						setState(7871); a_expr(35);
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7872);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(7873); match(ILIKE);
						setState(7874); a_expr(0);
						setState(7875); match(ESCAPE);
						setState(7876); a_expr(34);
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7878);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(7879); match(NOT);
						setState(7880); match(ILIKE);
						setState(7881); a_expr(33);
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7882);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(7883); match(NOT);
						setState(7884); match(ILIKE);
						setState(7885); a_expr(0);
						setState(7886); match(ESCAPE);
						setState(7887); a_expr(32);
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7889);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(7890); match(SIMILAR);
						setState(7891); match(TO);
						setState(7892); a_expr(31);
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7893);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(7894); match(SIMILAR);
						setState(7895); match(TO);
						setState(7896); a_expr(0);
						setState(7897); match(ESCAPE);
						setState(7898); a_expr(30);
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7900);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(7901); match(NOT);
						setState(7902); match(SIMILAR);
						setState(7903); match(TO);
						setState(7904); a_expr(29);
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7905);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(7906); match(NOT);
						setState(7907); match(SIMILAR);
						setState(7908); match(TO);
						setState(7909); a_expr(0);
						setState(7910); match(ESCAPE);
						setState(7911); a_expr(28);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7913);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(7914); match(IS);
						setState(7915); match(DISTINCT);
						setState(7916); match(FROM);
						setState(7917); a_expr(16);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7918);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(7919); match(IS);
						setState(7920); match(NOT);
						setState(7921); match(DISTINCT);
						setState(7922); match(FROM);
						setState(7923); a_expr(15);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7924);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(7925); match(TYPECAST);
						setState(7926); typename();
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7927);
						if (!(precpred(_ctx, 57))) throw new FailedPredicateException(this, "precpred(_ctx, 57)");
						setState(7928); match(COLLATE);
						setState(7929); any_name();
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7930);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(7931); qual_Op();
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7932);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(7933); match(IS);
						setState(7934); match(NULL_P);
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7935);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(7936); match(ISNULL);
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7937);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(7938); match(IS);
						setState(7939); match(NOT);
						setState(7940); match(NULL_P);
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7941);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(7942); match(NOTNULL);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7943);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(7944); match(IS);
						setState(7945); match(TRUE_P);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7946);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(7947); match(IS);
						setState(7948); match(NOT);
						setState(7949); match(TRUE_P);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7950);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(7951); match(IS);
						setState(7952); match(FALSE_P);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7953);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(7954); match(IS);
						setState(7955); match(NOT);
						setState(7956); match(FALSE_P);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7957);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(7958); match(IS);
						setState(7959); match(UNKNOWN);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7960);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(7961); match(IS);
						setState(7962); match(NOT);
						setState(7963); match(UNKNOWN);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7964);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(7965); match(IS);
						setState(7966); match(OF);
						setState(7967); match(T__7);
						setState(7968); type_list(0);
						setState(7969); match(T__13);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7971);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7972); match(IS);
						setState(7973); match(NOT);
						setState(7974); match(OF);
						setState(7975); match(T__7);
						setState(7976); type_list(0);
						setState(7977); match(T__13);
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7979);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(7980); match(BETWEEN);
						setState(7981); opt_asymmetric();
						setState(7982); b_expr(0);
						setState(7983); match(AND);
						setState(7984); b_expr(0);
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7986);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7987); match(NOT);
						setState(7988); match(BETWEEN);
						setState(7989); opt_asymmetric();
						setState(7990); b_expr(0);
						setState(7991); match(AND);
						setState(7992); b_expr(0);
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7994);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7995); match(BETWEEN);
						setState(7996); match(SYMMETRIC);
						setState(7997); b_expr(0);
						setState(7998); match(AND);
						setState(7999); b_expr(0);
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8001);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(8002); match(NOT);
						setState(8003); match(BETWEEN);
						setState(8004); match(SYMMETRIC);
						setState(8005); b_expr(0);
						setState(8006); match(AND);
						setState(8007); b_expr(0);
						}
						break;
					case 47:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8009);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8010); match(IN_P);
						setState(8011); in_expr();
						}
						break;
					case 48:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8012);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8013); match(NOT);
						setState(8014); match(IN_P);
						setState(8015); in_expr();
						}
						break;
					case 49:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8016);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8017); subquery_Op();
						setState(8018); sub_type();
						setState(8019); select_with_parens(0);
						}
						break;
					case 50:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8021);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8022); subquery_Op();
						setState(8023); sub_type();
						setState(8024); match(T__7);
						setState(8025); a_expr(0);
						setState(8026); match(T__13);
						}
						break;
					case 51:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8028);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8029); match(IS);
						setState(8030); match(DOCUMENT_P);
						}
						break;
					case 52:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8031);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8032); match(IS);
						setState(8033); match(NOT);
						setState(8034); match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(8039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,427,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode TYPECAST() { return getToken(PlPgSqlParser.TYPECAST, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1082;
		enterRecursionRule(_localctx, 1082, RULE_b_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8049);
			switch (_input.LA(1)) {
			case T__11:
				{
				setState(8041); match(T__11);
				setState(8042); b_expr(20);
				}
				break;
			case T__10:
				{
				setState(8043); match(T__10);
				setState(8044); b_expr(19);
				}
				break;
			case Op:
			case OPERATOR:
				{
				setState(8045); qual_Op();
				setState(8046); b_expr(8);
				}
				break;
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				{
				setState(8048); c_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(8122);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8120);
					switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8051);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(8052); match(T__11);
						setState(8053); b_expr(19);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8054);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(8055); match(T__10);
						setState(8056); b_expr(18);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8057);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(8058); match(T__9);
						setState(8059); b_expr(17);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8060);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(8061); match(T__1);
						setState(8062); b_expr(16);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8063);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(8064); match(T__16);
						setState(8065); b_expr(15);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8066);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(8067); match(T__15);
						setState(8068); b_expr(14);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8069);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(8070); match(T__5);
						setState(8071); b_expr(13);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8072);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(8073); match(T__2);
						setState(8074); b_expr(12);
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8075);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8076); match(T__4);
						setState(8077); b_expr(11);
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8078);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(8079); qual_Op();
						setState(8080); b_expr(10);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8082);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8083); match(IS);
						setState(8084); match(DISTINCT);
						setState(8085); match(FROM);
						setState(8086); b_expr(7);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8087);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8088); match(IS);
						setState(8089); match(NOT);
						setState(8090); match(DISTINCT);
						setState(8091); match(FROM);
						setState(8092); b_expr(6);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8093);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(8094); match(TYPECAST);
						setState(8095); typename();
						}
						break;
					case 14:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8096);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8097); qual_Op();
						}
						break;
					case 15:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8098);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8099); match(IS);
						setState(8100); match(OF);
						setState(8101); match(T__7);
						setState(8102); type_list(0);
						setState(8103); match(T__13);
						}
						break;
					case 16:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8105);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8106); match(IS);
						setState(8107); match(NOT);
						setState(8108); match(OF);
						setState(8109); match(T__7);
						setState(8110); type_list(0);
						setState(8111); match(T__13);
						}
						break;
					case 17:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8113);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8114); match(IS);
						setState(8115); match(DOCUMENT_P);
						}
						break;
					case 18:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8116);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8117); match(IS);
						setState(8118); match(NOT);
						setState(8119); match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(8124);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PlPgSqlParser.PARAM, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public RowContext row() {
			return getRuleContext(RowContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterC_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitC_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitC_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_c_expr);
		try {
			setState(8144);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8125); columnref();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8126); aexprConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8127); match(PARAM);
				setState(8128); opt_indirection(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8129); match(T__7);
				setState(8130); a_expr(0);
				setState(8131); match(T__13);
				setState(8132); opt_indirection(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8134); case_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8135); func_expr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8136); select_with_parens(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8137); match(EXISTS);
				setState(8138); select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8139); match(ARRAY);
				setState(8140); select_with_parens(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8141); match(ARRAY);
				setState(8142); array_expr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8143); row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public TerminalNode COALESCE() { return getToken(PlPgSqlParser.COALESCE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PlPgSqlParser.CURRENT_DATE, 0); }
		public TerminalNode NULLIF() { return getToken(PlPgSqlParser.NULLIF, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(PlPgSqlParser.TRIM, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PlPgSqlParser.CURRENT_TIME, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode XMLROOT() { return getToken(PlPgSqlParser.XMLROOT, 0); }
		public TerminalNode NAME_P() { return getToken(PlPgSqlParser.NAME_P, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode LOCALTIME() { return getToken(PlPgSqlParser.LOCALTIME, 0); }
		public TerminalNode GREATEST() { return getToken(PlPgSqlParser.GREATEST, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PlPgSqlParser.CURRENT_CATALOG, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PlPgSqlParser.XMLPI, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode TRAILING() { return getToken(PlPgSqlParser.TRAILING, 0); }
		public TerminalNode LEAST() { return getToken(PlPgSqlParser.LEAST, 0); }
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode LOCALTIMESTAMP() { return getToken(PlPgSqlParser.LOCALTIMESTAMP, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public TerminalNode CURRENT_ROLE() { return getToken(PlPgSqlParser.CURRENT_ROLE, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlPgSqlParser.XMLFOREST, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public TerminalNode SUBSTRING() { return getToken(PlPgSqlParser.SUBSTRING, 0); }
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlPgSqlParser.XMLEXISTS, 0); }
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(PlPgSqlParser.BOTH, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PlPgSqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode TREAT() { return getToken(PlPgSqlParser.TREAT, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PlPgSqlParser.OVERLAY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlPgSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode EXTRACT() { return getToken(PlPgSqlParser.EXTRACT, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode XMLCONCAT() { return getToken(PlPgSqlParser.XMLCONCAT, 0); }
		public TerminalNode LEADING() { return getToken(PlPgSqlParser.LEADING, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlPgSqlParser.XMLPARSE, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode XMLELEMENT() { return getToken(PlPgSqlParser.XMLELEMENT, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PlPgSqlParser.POSITION, 0); }
		public TerminalNode SESSION_USER() { return getToken(PlPgSqlParser.SESSION_USER, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_func_expr);
		try {
			setState(8403);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8146); func_name();
				setState(8147); match(T__7);
				setState(8148); match(T__13);
				setState(8149); over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8151); func_name();
				setState(8152); match(T__7);
				setState(8153); func_arg_list(0);
				setState(8154); match(T__13);
				setState(8155); over_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8157); func_name();
				setState(8158); match(T__7);
				setState(8159); match(VARIADIC);
				setState(8160); func_arg_expr();
				setState(8161); match(T__13);
				setState(8162); over_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8164); func_name();
				setState(8165); match(T__7);
				setState(8166); func_arg_list(0);
				setState(8167); match(T__12);
				setState(8168); match(VARIADIC);
				setState(8169); func_arg_expr();
				setState(8170); match(T__13);
				setState(8171); over_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8173); func_name();
				setState(8174); match(T__7);
				setState(8175); func_arg_list(0);
				setState(8176); sort_clause();
				setState(8177); match(T__13);
				setState(8178); over_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8180); func_name();
				setState(8181); match(T__7);
				setState(8182); match(ALL);
				setState(8183); func_arg_list(0);
				setState(8184); opt_sort_clause();
				setState(8185); match(T__13);
				setState(8186); over_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8188); func_name();
				setState(8189); match(T__7);
				setState(8190); match(DISTINCT);
				setState(8191); func_arg_list(0);
				setState(8192); opt_sort_clause();
				setState(8193); match(T__13);
				setState(8194); over_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8196); func_name();
				setState(8197); match(T__7);
				setState(8198); match(T__9);
				setState(8199); match(T__13);
				setState(8200); over_clause();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8202); match(COLLATION);
				setState(8203); match(FOR);
				setState(8204); match(T__7);
				setState(8205); a_expr(0);
				setState(8206); match(T__13);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8208); match(CURRENT_DATE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8209); match(CURRENT_TIME);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8210); match(CURRENT_TIME);
				setState(8211); match(T__7);
				setState(8212); iConst();
				setState(8213); match(T__13);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8215); match(CURRENT_TIMESTAMP);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8216); match(CURRENT_TIMESTAMP);
				setState(8217); match(T__7);
				setState(8218); iConst();
				setState(8219); match(T__13);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8221); match(LOCALTIME);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8222); match(LOCALTIME);
				setState(8223); match(T__7);
				setState(8224); iConst();
				setState(8225); match(T__13);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8227); match(LOCALTIMESTAMP);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8228); match(LOCALTIMESTAMP);
				setState(8229); match(T__7);
				setState(8230); iConst();
				setState(8231); match(T__13);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8233); match(CURRENT_ROLE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8234); match(CURRENT_USER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8235); match(SESSION_USER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8236); match(USER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8237); match(CURRENT_CATALOG);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8238); match(CURRENT_SCHEMA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8239); match(CAST);
				setState(8240); match(T__7);
				setState(8241); a_expr(0);
				setState(8242); match(AS);
				setState(8243); typename();
				setState(8244); match(T__13);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8246); match(EXTRACT);
				setState(8247); match(T__7);
				setState(8248); extract_list();
				setState(8249); match(T__13);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8251); match(OVERLAY);
				setState(8252); match(T__7);
				setState(8253); overlay_list();
				setState(8254); match(T__13);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8256); match(POSITION);
				setState(8257); match(T__7);
				setState(8258); position_list();
				setState(8259); match(T__13);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8261); match(SUBSTRING);
				setState(8262); match(T__7);
				setState(8263); substr_list();
				setState(8264); match(T__13);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8266); match(TREAT);
				setState(8267); match(T__7);
				setState(8268); a_expr(0);
				setState(8269); match(AS);
				setState(8270); typename();
				setState(8271); match(T__13);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(8273); match(TRIM);
				setState(8274); match(T__7);
				setState(8275); match(BOTH);
				setState(8276); trim_list();
				setState(8277); match(T__13);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(8279); match(TRIM);
				setState(8280); match(T__7);
				setState(8281); match(LEADING);
				setState(8282); trim_list();
				setState(8283); match(T__13);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(8285); match(TRIM);
				setState(8286); match(T__7);
				setState(8287); match(TRAILING);
				setState(8288); trim_list();
				setState(8289); match(T__13);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(8291); match(TRIM);
				setState(8292); match(T__7);
				setState(8293); trim_list();
				setState(8294); match(T__13);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(8296); match(NULLIF);
				setState(8297); match(T__7);
				setState(8298); a_expr(0);
				setState(8299); match(T__12);
				setState(8300); a_expr(0);
				setState(8301); match(T__13);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(8303); match(COALESCE);
				setState(8304); match(T__7);
				setState(8305); expr_list(0);
				setState(8306); match(T__13);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(8308); match(GREATEST);
				setState(8309); match(T__7);
				setState(8310); expr_list(0);
				setState(8311); match(T__13);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(8313); match(LEAST);
				setState(8314); match(T__7);
				setState(8315); expr_list(0);
				setState(8316); match(T__13);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(8318); match(XMLCONCAT);
				setState(8319); match(T__7);
				setState(8320); expr_list(0);
				setState(8321); match(T__13);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(8323); match(XMLELEMENT);
				setState(8324); match(T__7);
				setState(8325); match(NAME_P);
				setState(8326); colLabel();
				setState(8327); match(T__13);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(8329); match(XMLELEMENT);
				setState(8330); match(T__7);
				setState(8331); match(NAME_P);
				setState(8332); colLabel();
				setState(8333); match(T__12);
				setState(8334); xml_attributes();
				setState(8335); match(T__13);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(8337); match(XMLELEMENT);
				setState(8338); match(T__7);
				setState(8339); match(NAME_P);
				setState(8340); colLabel();
				setState(8341); match(T__12);
				setState(8342); expr_list(0);
				setState(8343); match(T__13);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(8345); match(XMLELEMENT);
				setState(8346); match(T__7);
				setState(8347); match(NAME_P);
				setState(8348); colLabel();
				setState(8349); match(T__12);
				setState(8350); xml_attributes();
				setState(8351); match(T__12);
				setState(8352); expr_list(0);
				setState(8353); match(T__13);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(8355); match(XMLEXISTS);
				setState(8356); match(T__7);
				setState(8357); c_expr();
				setState(8358); xmlexists_argument();
				setState(8359); match(T__13);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(8361); match(XMLFOREST);
				setState(8362); match(T__7);
				setState(8363); xml_attribute_list(0);
				setState(8364); match(T__13);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(8366); match(XMLPARSE);
				setState(8367); match(T__7);
				setState(8368); document_or_content();
				setState(8369); a_expr(0);
				setState(8370); xml_whitespace_option();
				setState(8371); match(T__13);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(8373); match(XMLPI);
				setState(8374); match(T__7);
				setState(8375); match(NAME_P);
				setState(8376); colLabel();
				setState(8377); match(T__13);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(8379); match(XMLPI);
				setState(8380); match(T__7);
				setState(8381); match(NAME_P);
				setState(8382); colLabel();
				setState(8383); match(T__12);
				setState(8384); a_expr(0);
				setState(8385); match(T__13);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(8387); match(XMLROOT);
				setState(8388); match(T__7);
				setState(8389); a_expr(0);
				setState(8390); match(T__12);
				setState(8391); xml_root_version();
				setState(8392); opt_xml_root_standalone();
				setState(8393); match(T__13);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(8395); match(XMLSERIALIZE);
				setState(8396); match(T__7);
				setState(8397); document_or_content();
				setState(8398); a_expr(0);
				setState(8399); match(AS);
				setState(8400); simpletypename();
				setState(8401); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_xml_root_version);
		try {
			setState(8410);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8405); match(VERSION_P);
				setState(8406); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8407); match(VERSION_P);
				setState(8408); match(NO);
				setState(8409); match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PlPgSqlParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PlPgSqlParser.YES_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_opt_xml_root_standalone);
		try {
			setState(8423);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8412); match(T__12);
				setState(8413); match(STANDALONE_P);
				setState(8414); match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8415); match(T__12);
				setState(8416); match(STANDALONE_P);
				setState(8417); match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8418); match(T__12);
				setState(8419); match(STANDALONE_P);
				setState(8420); match(NO);
				setState(8421); match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLATTRIBUTES() { return getToken(PlPgSqlParser.XMLATTRIBUTES, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8425); match(XMLATTRIBUTES);
			setState(8426); match(T__7);
			setState(8427); xml_attribute_list(0);
			setState(8428); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attribute_elContext xml_attribute_el() {
			return getRuleContext(Xml_attribute_elContext.class,0);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 1094;
		enterRecursionRule(_localctx, 1094, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8431); xml_attribute_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8438);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					setState(8433);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8434); match(T__12);
					setState(8435); xml_attribute_el();
					}
					} 
				}
				setState(8440);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_xml_attribute_el);
		try {
			setState(8446);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8441); a_expr(0);
				setState(8442); match(AS);
				setState(8443); colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8445); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode CONTENT_P() { return getToken(PlPgSqlParser.CONTENT_P, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8448);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode WHITESPACE_P() { return getToken(PlPgSqlParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PlPgSqlParser.STRIP_P, 0); }
		public TerminalNode PRESERVE() { return getToken(PlPgSqlParser.PRESERVE, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_xml_whitespace_option);
		try {
			setState(8455);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8450); match(PRESERVE);
				setState(8451); match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8452); match(STRIP_P);
				setState(8453); match(WHITESPACE_P);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public List<TerminalNode> REF() { return getTokens(PlPgSqlParser.REF); }
		public TerminalNode BY(int i) {
			return getToken(PlPgSqlParser.BY, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(PlPgSqlParser.BY); }
		public TerminalNode PASSING() { return getToken(PlPgSqlParser.PASSING, 0); }
		public TerminalNode REF(int i) {
			return getToken(PlPgSqlParser.REF, i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_xmlexists_argument);
		try {
			setState(8475);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8457); match(PASSING);
				setState(8458); c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8459); match(PASSING);
				setState(8460); c_expr();
				setState(8461); match(BY);
				setState(8462); match(REF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8464); match(PASSING);
				setState(8465); match(BY);
				setState(8466); match(REF);
				setState(8467); c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8468); match(PASSING);
				setState(8469); match(BY);
				setState(8470); match(REF);
				setState(8471); c_expr();
				setState(8472); match(BY);
				setState(8473); match(REF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_window_clause);
		try {
			setState(8480);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8477); match(WINDOW);
				setState(8478); window_definition_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 1106;
		enterRecursionRule(_localctx, 1106, RULE_window_definition_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8483); window_definition();
			}
			_ctx.stop = _input.LT(-1);
			setState(8490);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					setState(8485);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8486); match(T__12);
					setState(8487); window_definition();
					}
					} 
				}
				setState(8492);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8493); colId();
			setState(8494); match(AS);
			setState(8495); window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode OVER() { return getToken(PlPgSqlParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_over_clause);
		try {
			setState(8502);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8497); match(OVER);
				setState(8498); window_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8499); match(OVER);
				setState(8500); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8504); match(T__7);
			setState(8505); opt_existing_window_name();
			setState(8506); opt_partition_clause();
			setState(8507); opt_sort_clause();
			setState(8508); opt_frame_clause();
			setState(8509); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_opt_existing_window_name);
		try {
			setState(8513);
			switch (_input.LA(1)) {
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8511); colId();
				}
				break;
			case T__13:
			case ORDER:
			case PARTITION:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode PARTITION() { return getToken(PlPgSqlParser.PARTITION, 0); }
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_opt_partition_clause);
		try {
			setState(8519);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(8515); match(PARTITION);
				setState(8516); match(BY);
				setState(8517); expr_list(0);
				}
				break;
			case T__13:
			case ORDER:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PlPgSqlParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_opt_frame_clause);
		try {
			setState(8526);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8521); match(RANGE);
				setState(8522); frame_extent();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8523); match(ROWS);
				setState(8524); frame_extent();
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_frame_extent);
		try {
			setState(8534);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8528); frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8529); match(BETWEEN);
				setState(8530); frame_bound();
				setState(8531); match(AND);
				setState(8532); frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlPgSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlPgSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlPgSqlParser.FOLLOWING, 0); }
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_frame_bound);
		try {
			setState(8548);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8536); match(UNBOUNDED);
				setState(8537); match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8538); match(UNBOUNDED);
				setState(8539); match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8540); match(CURRENT_P);
				setState(8541); match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8542); a_expr(0);
				setState(8543); match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8545); a_expr(0);
				setState(8546); match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_row);
		try {
			setState(8564);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8550); match(ROW);
				setState(8551); match(T__7);
				setState(8552); expr_list(0);
				setState(8553); match(T__13);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8555); match(ROW);
				setState(8556); match(T__7);
				setState(8557); match(T__13);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8558); match(T__7);
				setState(8559); expr_list(0);
				setState(8560); match(T__12);
				setState(8561); a_expr(0);
				setState(8562); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlPgSqlParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlPgSqlParser.ANY, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8566);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_OpContext extends ParserRuleContext {
		public MathOpContext mathOp() {
			return getRuleContext(MathOpContext.class,0);
		}
		public TerminalNode Op() { return getToken(PlPgSqlParser.Op, 0); }
		public All_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAll_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAll_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAll_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_OpContext all_Op() throws RecognitionException {
		All_OpContext _localctx = new All_OpContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_all_Op);
		try {
			setState(8570);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8568); match(Op);
				}
				break;
			case T__16:
			case T__15:
			case T__11:
			case T__10:
			case T__9:
			case T__5:
			case T__4:
			case T__2:
			case T__1:
				enterOuterAlt(_localctx, 2);
				{
				setState(8569); mathOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOpContext extends ParserRuleContext {
		public MathOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterMathOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitMathOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitMathOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOpContext mathOp() throws RecognitionException {
		MathOpContext _localctx = new MathOpContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_mathOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8572);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__15) | (1L << T__11) | (1L << T__10) | (1L << T__9) | (1L << T__5) | (1L << T__4) | (1L << T__2) | (1L << T__1))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_OpContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode Op() { return getToken(PlPgSqlParser.Op, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Qual_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterQual_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitQual_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQual_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_OpContext qual_Op() throws RecognitionException {
		Qual_OpContext _localctx = new Qual_OpContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_qual_Op);
		try {
			setState(8580);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8574); match(Op);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8575); match(OPERATOR);
				setState(8576); match(T__7);
				setState(8577); any_operator();
				setState(8578); match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_OpContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Qual_all_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterQual_all_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitQual_all_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQual_all_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_OpContext qual_all_Op() throws RecognitionException {
		Qual_all_OpContext _localctx = new Qual_all_OpContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_qual_all_Op);
		try {
			setState(8588);
			switch (_input.LA(1)) {
			case T__16:
			case T__15:
			case T__11:
			case T__10:
			case T__9:
			case T__5:
			case T__4:
			case T__2:
			case T__1:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8582); all_Op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8583); match(OPERATOR);
				setState(8584); match(T__7);
				setState(8585); any_operator();
				setState(8586); match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_subquery_Op);
		try {
			setState(8602);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8590); all_Op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8591); match(OPERATOR);
				setState(8592); match(T__7);
				setState(8593); any_operator();
				setState(8594); match(T__13);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8596); match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8597); match(NOT);
				setState(8598); match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8599); match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8600); match(NOT);
				setState(8601); match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr_listContext _localctx = new Expr_listContext(_ctx, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 1138;
		enterRecursionRule(_localctx, 1138, RULE_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8605); a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					setState(8607);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8608); match(T__12);
					setState(8609); a_expr(0);
					}
					} 
				}
				setState(8614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 1140;
		enterRecursionRule(_localctx, 1140, RULE_func_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8616); func_arg_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8623);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					setState(8618);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8619); match(T__12);
					setState(8620); func_arg_expr();
					}
					} 
				}
				setState(8625);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PlPgSqlParser.COLON_EQUALS, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_func_arg_expr);
		try {
			setState(8631);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8626); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8627); param_name();
				setState(8628); match(COLON_EQUALS);
				setState(8629); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_listContext _localctx = new Type_listContext(_ctx, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 1144;
		enterRecursionRule(_localctx, 1144, RULE_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8634); typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(8641);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_list);
					setState(8636);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8637); match(T__12);
					setState(8638); typename();
					}
					} 
				}
				setState(8643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_array_expr);
		try {
			setState(8654);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8644); match(T__8);
				setState(8645); expr_list(0);
				setState(8646); match(T__17);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8648); match(T__8);
				setState(8649); array_expr_list(0);
				setState(8650); match(T__17);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8652); match(T__8);
				setState(8653); match(T__17);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 1148;
		enterRecursionRule(_localctx, 1148, RULE_array_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8657); array_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8664);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					setState(8659);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8660); match(T__12);
					setState(8661); array_expr();
					}
					} 
				}
				setState(8666);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_extract_list);
		try {
			setState(8672);
			switch (_input.LA(1)) {
			case DAY_P:
			case HOUR_P:
			case MINUTE_P:
			case MONTH_P:
			case SECOND_P:
			case YEAR_P:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8667); extract_arg();
				setState(8668); match(FROM);
				setState(8669); a_expr(0);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public TerminalNode MONTH_P() { return getToken(PlPgSqlParser.MONTH_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PlPgSqlParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PlPgSqlParser.SECOND_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PlPgSqlParser.HOUR_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PlPgSqlParser.YEAR_P, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(PlPgSqlParser.DAY_P, 0); }
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_extract_arg);
		try {
			setState(8682);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8674); match(IDENT);
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8675); match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(8676); match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(8677); match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(8678); match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8679); match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8680); match(SECOND_P);
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 8);
				{
				setState(8681); sConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext overlay_placing() {
			return getRuleContext(Overlay_placingContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_overlay_list);
		try {
			setState(8693);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8684); a_expr(0);
				setState(8685); overlay_placing();
				setState(8686); substr_from();
				setState(8687); substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8689); a_expr(0);
				setState(8690); overlay_placing();
				setState(8691); substr_from();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_placingContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode PLACING() { return getToken(PlPgSqlParser.PLACING, 0); }
		public Overlay_placingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_placing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOverlay_placing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOverlay_placing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOverlay_placing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_placingContext overlay_placing() throws RecognitionException {
		Overlay_placingContext _localctx = new Overlay_placingContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_overlay_placing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8695); match(PLACING);
			setState(8696); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_position_list);
		try {
			setState(8703);
			switch (_input.LA(1)) {
			case T__11:
			case T__10:
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case Op:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OPERATOR:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8698); b_expr(0);
				setState(8699); match(IN_P);
				setState(8700); b_expr(0);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_substr_list);
		try {
			setState(8721);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8705); a_expr(0);
				setState(8706); substr_from();
				setState(8707); substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8709); a_expr(0);
				setState(8710); substr_for();
				setState(8711); substr_from();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8713); a_expr(0);
				setState(8714); substr_from();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8716); a_expr(0);
				setState(8717); substr_for();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8719); expr_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_fromContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Substr_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSubstr_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSubstr_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_fromContext substr_from() throws RecognitionException {
		Substr_fromContext _localctx = new Substr_fromContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_substr_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8723); match(FROM);
			setState(8724); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_forContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Substr_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSubstr_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSubstr_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_forContext substr_for() throws RecognitionException {
		Substr_forContext _localctx = new Substr_forContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_substr_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8726); match(FOR);
			setState(8727); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_trim_list);
		try {
			setState(8736);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8729); a_expr(0);
				setState(8730); match(FROM);
				setState(8731); expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8733); match(FROM);
				setState(8734); expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8735); expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIn_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIn_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIn_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_in_expr);
		try {
			setState(8743);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8738); select_with_parens(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8739); match(T__7);
				setState(8740); expr_list(0);
				setState(8741); match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public TerminalNode CASE() { return getToken(PlPgSqlParser.CASE, 0); }
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8745); match(CASE);
			setState(8746); case_arg();
			setState(8747); when_clause_list(0);
			setState(8748); case_default();
			setState(8749); match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public When_clauseContext when_clause() {
			return getRuleContext(When_clauseContext.class,0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1172;
		enterRecursionRule(_localctx, 1172, RULE_when_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8752); when_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8758);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					setState(8754);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8755); when_clause();
					}
					} 
				}
				setState(8760);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8761); match(WHEN);
			setState(8762); a_expr(0);
			setState(8763); match(THEN);
			setState(8764); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_case_default);
		try {
			setState(8769);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8766); match(ELSE);
				setState(8767); a_expr(0);
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_case_arg);
		try {
			setState(8773);
			switch (_input.LA(1)) {
			case T__11:
			case T__10:
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case Op:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOT:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OPERATOR:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8771); a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_columnref);
		try {
			setState(8779);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8775); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8776); colId();
				setState(8777); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_indirection_el);
		try {
			setState(8795);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8781); match(T__14);
				setState(8782); attr_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8783); match(T__14);
				setState(8784); match(T__9);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8785); match(T__8);
				setState(8786); a_expr(0);
				setState(8787); match(T__17);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8789); match(T__8);
				setState(8790); a_expr(0);
				setState(8791); match(T__6);
				setState(8792); a_expr(0);
				setState(8793); match(T__17);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1184;
		enterRecursionRule(_localctx, 1184, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8798); indirection_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8804);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(8800);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8801); indirection_el();
					}
					} 
				}
				setState(8806);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1186;
		enterRecursionRule(_localctx, 1186, RULE_opt_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8812);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					setState(8808);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8809); indirection_el();
					}
					} 
				}
				setState(8814);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_asymmetricContext extends ParserRuleContext {
		public TerminalNode ASYMMETRIC() { return getToken(PlPgSqlParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asymmetric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterOpt_asymmetric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitOpt_asymmetric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_asymmetric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asymmetricContext opt_asymmetric() throws RecognitionException {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_opt_asymmetric);
		try {
			setState(8817);
			switch (_input.LA(1)) {
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(8815); match(ASYMMETRIC);
				}
				break;
			case T__11:
			case T__10:
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case Op:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OPERATOR:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_exprContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Ctext_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCtext_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCtext_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_exprContext ctext_expr() throws RecognitionException {
		Ctext_exprContext _localctx = new Ctext_exprContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_ctext_expr);
		try {
			setState(8821);
			switch (_input.LA(1)) {
			case T__11:
			case T__10:
			case T__7:
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
			case Op:
			case ARRAY:
			case AUTHORIZATION:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case CASE:
			case CAST:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case EXISTS:
			case EXTRACT:
			case FALSE_P:
			case FLOAT_P:
			case FREEZE:
			case FULL:
			case GREATEST:
			case ILIKE:
			case INNER_P:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case IS:
			case ISNULL:
			case JOIN:
			case LEAST:
			case LEFT:
			case LIKE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NONE:
			case NOT:
			case NOTNULL:
			case NULL_P:
			case NULLIF:
			case NUMERIC:
			case OPERATOR:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case RIGHT:
			case ROW:
			case SESSION_USER:
			case SETOF:
			case SIMILAR:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case VALUES:
			case VARCHAR:
			case VERBOSE:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case PARAM:
			case ICONST:
			case IDENT:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8819); a_expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8820); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_expr_listContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Ctext_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCtext_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCtext_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_expr_listContext ctext_expr_list() throws RecognitionException {
		return ctext_expr_list(0);
	}

	private Ctext_expr_listContext ctext_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Ctext_expr_listContext _localctx = new Ctext_expr_listContext(_ctx, _parentState);
		Ctext_expr_listContext _prevctx = _localctx;
		int _startState = 1192;
		enterRecursionRule(_localctx, 1192, RULE_ctext_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8824); ctext_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8831);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Ctext_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ctext_expr_list);
					setState(8826);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8827); match(T__12);
					setState(8828); ctext_expr();
					}
					} 
				}
				setState(8833);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Ctext_rowContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCtext_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCtext_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_rowContext ctext_row() throws RecognitionException {
		Ctext_rowContext _localctx = new Ctext_rowContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_ctext_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8834); match(T__7);
			setState(8835); ctext_expr_list(0);
			setState(8836); match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public Target_elContext target_el() {
			return getRuleContext(Target_elContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		return target_list(0);
	}

	private Target_listContext target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Target_listContext _localctx = new Target_listContext(_ctx, _parentState);
		Target_listContext _prevctx = _localctx;
		int _startState = 1196;
		enterRecursionRule(_localctx, 1196, RULE_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8839); target_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8846);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_target_list);
					setState(8841);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8842); match(T__12);
					setState(8843); target_el();
					}
					} 
				}
				setState(8848);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterTarget_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitTarget_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTarget_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_target_el);
		try {
			setState(8858);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8849); a_expr(0);
				setState(8850); match(AS);
				setState(8851); colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8853); a_expr(0);
				setState(8854); match(IDENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8856); a_expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8857); match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1200;
		enterRecursionRule(_localctx, 1200, RULE_qualified_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8861); qualified_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8868);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					setState(8863);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8864); match(T__12);
					setState(8865); qualified_name();
					}
					} 
				}
				setState(8870);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_qualified_name);
		try {
			setState(8875);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8871); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8872); colId();
				setState(8873); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1204;
		enterRecursionRule(_localctx, 1204, RULE_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8878); name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8885);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(8880);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8881); match(T__12);
					setState(8882); name();
					}
					} 
				}
				setState(8887);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8888); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterDatabase_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitDatabase_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDatabase_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_nameContext database_name() throws RecognitionException {
		Database_nameContext _localctx = new Database_nameContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_database_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8890); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_methodContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Access_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAccess_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAccess_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAccess_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_methodContext access_method() throws RecognitionException {
		Access_methodContext _localctx = new Access_methodContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_access_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8892); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8894); colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8896); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8898); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_func_name);
		try {
			setState(8904);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8900); type_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8901); colId();
				setState(8902); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode XCONST() { return getToken(PlPgSqlParser.XCONST, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode BCONST() { return getToken(PlPgSqlParser.BCONST, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_aexprConst);
		try {
			setState(8937);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8906); iConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8907); match(FCONST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8908); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8909); match(BCONST);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8910); match(XCONST);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8911); func_name();
				setState(8912); sConst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8914); func_name();
				setState(8915); match(T__7);
				setState(8916); func_arg_list(0);
				setState(8917); match(T__13);
				setState(8918); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8920); consttypename();
				setState(8921); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8923); constInterval();
				setState(8924); sConst();
				setState(8925); opt_interval();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8927); constInterval();
				setState(8928); match(T__7);
				setState(8929); iConst();
				setState(8930); match(T__13);
				setState(8931); sConst();
				setState(8932); opt_interval();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8934); match(TRUE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8935); match(FALSE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8936); match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IConstContext extends ParserRuleContext {
		public TerminalNode ICONST() { return getToken(PlPgSqlParser.ICONST, 0); }
		public IConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterIConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitIConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IConstContext iConst() throws RecognitionException {
		IConstContext _localctx = new IConstContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_iConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8939); match(ICONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SConstContext extends ParserRuleContext {
		public TerminalNode SCONST() { return getToken(PlPgSqlParser.SCONST, 0); }
		public SConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SConstContext sConst() throws RecognitionException {
		SConstContext _localctx = new SConstContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_sConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8941); match(SCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public RoleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterRoleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitRoleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRoleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdContext roleId() throws RecognitionException {
		RoleIdContext _localctx = new RoleIdContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_roleId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8943); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_signedIconst);
		try {
			setState(8950);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8945); iConst();
				}
				break;
			case T__11:
				enterOuterAlt(_localctx, 2);
				{
				setState(8946); match(T__11);
				setState(8947); iConst();
				}
				break;
			case T__10:
				enterOuterAlt(_localctx, 3);
				{
				setState(8948); match(T__10);
				setState(8949); iConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_colId);
		try {
			setState(8955);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8952); match(IDENT);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(8953); unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8954); col_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_type_function_name);
		try {
			setState(8960);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8957); match(IDENT);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(8958); unreserved_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8959); type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_colLabel);
		try {
			setState(8967);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8962); match(IDENT);
				}
				break;
			case K_ABSOLUTE:
			case K_ALIAS:
			case K_ARRAY:
			case K_BACKWARD:
			case K_CONSTANT:
			case K_CURRENT:
			case K_CURSOR:
			case K_DEBUG:
			case K_DETAIL:
			case K_DUMP:
			case K_ERRCODE:
			case K_ERROR:
			case K_FIRST:
			case K_FORWARD:
			case K_HINT:
			case K_INFO:
			case K_IS:
			case K_LAST:
			case K_LOG:
			case K_MESSAGE:
			case K_MESSAGE_TEXT:
			case K_NEXT:
			case K_NO:
			case K_NOTICE:
			case K_OPTION:
			case K_PG_EXCEPTION_CONTEXT:
			case K_PG_EXCEPTION_DETAIL:
			case K_PG_EXCEPTION_HINT:
			case K_PRIOR:
			case K_QUERY:
			case K_RELATIVE:
			case K_RESULT_OID:
			case K_RETURNED_SQLSTATE:
			case K_REVERSE:
			case K_ROW_COUNT:
			case K_ROWTYPE:
			case K_SCROLL:
			case K_SLICE:
			case K_SQLSTATE:
			case K_STACKED:
			case K_TYPE:
			case K_USE_COLUMN:
			case K_USE_VARIABLE:
			case K_VARIABLE_CONFLICT:
			case K_WARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(8963); unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8964); col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8965); type_func_name_keyword();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END_P:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
				enterOuterAlt(_localctx, 5);
				{
				setState(8966); reserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlPgSqlParser.TIMESTAMP, 0); }
		public TerminalNode COALESCE() { return getToken(PlPgSqlParser.COALESCE, 0); }
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode NULLIF() { return getToken(PlPgSqlParser.NULLIF, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode CHAR_P() { return getToken(PlPgSqlParser.CHAR_P, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlPgSqlParser.XMLEXISTS, 0); }
		public TerminalNode TRIM() { return getToken(PlPgSqlParser.TRIM, 0); }
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public TerminalNode DEC() { return getToken(PlPgSqlParser.DEC, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public TerminalNode XMLROOT() { return getToken(PlPgSqlParser.XMLROOT, 0); }
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode TREAT() { return getToken(PlPgSqlParser.TREAT, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PlPgSqlParser.DECIMAL_P, 0); }
		public TerminalNode INT_P() { return getToken(PlPgSqlParser.INT_P, 0); }
		public TerminalNode REAL() { return getToken(PlPgSqlParser.REAL, 0); }
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public TerminalNode GREATEST() { return getToken(PlPgSqlParser.GREATEST, 0); }
		public TerminalNode INTERVAL() { return getToken(PlPgSqlParser.INTERVAL, 0); }
		public TerminalNode BIGINT() { return getToken(PlPgSqlParser.BIGINT, 0); }
		public TerminalNode SMALLINT() { return getToken(PlPgSqlParser.SMALLINT, 0); }
		public TerminalNode XMLPI() { return getToken(PlPgSqlParser.XMLPI, 0); }
		public TerminalNode OVERLAY() { return getToken(PlPgSqlParser.OVERLAY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlPgSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode EXTRACT() { return getToken(PlPgSqlParser.EXTRACT, 0); }
		public TerminalNode LEAST() { return getToken(PlPgSqlParser.LEAST, 0); }
		public TerminalNode VARCHAR() { return getToken(PlPgSqlParser.VARCHAR, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PlPgSqlParser.XMLCONCAT, 0); }
		public TerminalNode PRECISION() { return getToken(PlPgSqlParser.PRECISION, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlPgSqlParser.XMLPARSE, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PlPgSqlParser.BOOLEAN_P, 0); }
		public TerminalNode FLOAT_P() { return getToken(PlPgSqlParser.FLOAT_P, 0); }
		public TerminalNode NATIONAL() { return getToken(PlPgSqlParser.NATIONAL, 0); }
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public TerminalNode NUMERIC() { return getToken(PlPgSqlParser.NUMERIC, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlPgSqlParser.XMLELEMENT, 0); }
		public TerminalNode OUT_P() { return getToken(PlPgSqlParser.OUT_P, 0); }
		public TerminalNode POSITION() { return getToken(PlPgSqlParser.POSITION, 0); }
		public TerminalNode NONE() { return getToken(PlPgSqlParser.NONE, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlPgSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlPgSqlParser.XMLFOREST, 0); }
		public TerminalNode NCHAR() { return getToken(PlPgSqlParser.NCHAR, 0); }
		public TerminalNode SUBSTRING() { return getToken(PlPgSqlParser.SUBSTRING, 0); }
		public TerminalNode INTEGER() { return getToken(PlPgSqlParser.INTEGER, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_col_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8969);
			_la = _input.LA(1);
			if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (BETWEEN - 133)) | (1L << (BIGINT - 133)) | (1L << (BIT - 133)) | (1L << (BOOLEAN_P - 133)) | (1L << (CHAR_P - 133)) | (1L << (CHARACTER - 133)) | (1L << (COALESCE - 133)) | (1L << (DEC - 133)) | (1L << (DECIMAL_P - 133)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (EXISTS - 225)) | (1L << (EXTRACT - 225)) | (1L << (FLOAT_P - 225)) | (1L << (GREATEST - 225)) | (1L << (INOUT - 225)) | (1L << (INT_P - 225)) | (1L << (INTEGER - 225)) | (1L << (INTERVAL - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (LEAST - 295)) | (1L << (NATIONAL - 295)) | (1L << (NCHAR - 295)) | (1L << (NONE - 295)) | (1L << (NULLIF - 295)) | (1L << (NUMERIC - 295)) | (1L << (OUT_P - 295)) | (1L << (OVERLAY - 295)) | (1L << (POSITION - 295)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (PRECISION - 360)) | (1L << (REAL - 360)) | (1L << (ROW - 360)) | (1L << (SETOF - 360)) | (1L << (SMALLINT - 360)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (SUBSTRING - 429)) | (1L << (TIME - 429)) | (1L << (TIMESTAMP - 429)) | (1L << (TREAT - 429)) | (1L << (TRIM - 429)) | (1L << (VALUES - 429)) | (1L << (VARCHAR - 429)) | (1L << (XMLATTRIBUTES - 429)) | (1L << (XMLCONCAT - 429)) | (1L << (XMLELEMENT - 429)) | (1L << (XMLEXISTS - 429)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (XMLFOREST - 493)) | (1L << (XMLPARSE - 493)) | (1L << (XMLPI - 493)) | (1L << (XMLROOT - 493)) | (1L << (XMLSERIALIZE - 493)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlPgSqlParser.JOIN, 0); }
		public TerminalNode OUTER_P() { return getToken(PlPgSqlParser.OUTER_P, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public TerminalNode INNER_P() { return getToken(PlPgSqlParser.INNER_P, 0); }
		public TerminalNode ISNULL() { return getToken(PlPgSqlParser.ISNULL, 0); }
		public TerminalNode OVERLAPS() { return getToken(PlPgSqlParser.OVERLAPS, 0); }
		public TerminalNode LEFT() { return getToken(PlPgSqlParser.LEFT, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public TerminalNode OVER() { return getToken(PlPgSqlParser.OVER, 0); }
		public TerminalNode NATURAL() { return getToken(PlPgSqlParser.NATURAL, 0); }
		public TerminalNode SIMILAR() { return getToken(PlPgSqlParser.SIMILAR, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public TerminalNode NOTNULL() { return getToken(PlPgSqlParser.NOTNULL, 0); }
		public TerminalNode CROSS() { return getToken(PlPgSqlParser.CROSS, 0); }
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PlPgSqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode RIGHT() { return getToken(PlPgSqlParser.RIGHT, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8971);
			_la = _input.LA(1);
			if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AUTHORIZATION - 129)) | (1L << (BINARY - 129)) | (1L << (COLLATION - 129)) | (1L << (CONCURRENTLY - 129)) | (1L << (CROSS - 129)) | (1L << (CURRENT_SCHEMA - 129)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (FREEZE - 240)) | (1L << (FULL - 240)) | (1L << (ILIKE - 240)) | (1L << (INNER_P - 240)) | (1L << (IS - 240)) | (1L << (ISNULL - 240)) | (1L << (JOIN - 240)) | (1L << (LEFT - 240)) | (1L << (LIKE - 240)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (NATURAL - 318)) | (1L << (NOTNULL - 318)) | (1L << (OUTER_P - 318)) | (1L << (OVER - 318)) | (1L << (OVERLAPS - 318)))) != 0) || _la==RIGHT || _la==SIMILAR || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PlPgSqlParser.CURRENT_DATE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PlPgSqlParser.CURRENT_TIME, 0); }
		public TerminalNode RETURNING() { return getToken(PlPgSqlParser.RETURNING, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public TerminalNode SOME() { return getToken(PlPgSqlParser.SOME, 0); }
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode LOCALTIME() { return getToken(PlPgSqlParser.LOCALTIME, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode ANALYSE() { return getToken(PlPgSqlParser.ANALYSE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PlPgSqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode ANALYZE() { return getToken(PlPgSqlParser.ANALYZE, 0); }
		public TerminalNode TRAILING() { return getToken(PlPgSqlParser.TRAILING, 0); }
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode ASC() { return getToken(PlPgSqlParser.ASC, 0); }
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode DESC() { return getToken(PlPgSqlParser.DESC, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PlPgSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PlPgSqlParser.CURRENT_ROLE, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public TerminalNode CASE() { return getToken(PlPgSqlParser.CASE, 0); }
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PlPgSqlParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PlPgSqlParser.BOTH, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode OFFSET() { return getToken(PlPgSqlParser.OFFSET, 0); }
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode HAVING() { return getToken(PlPgSqlParser.HAVING, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode PLACING() { return getToken(PlPgSqlParser.PLACING, 0); }
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PlPgSqlParser.SYMMETRIC, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public TerminalNode ANY() { return getToken(PlPgSqlParser.ANY, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public TerminalNode LEADING() { return getToken(PlPgSqlParser.LEADING, 0); }
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode SESSION_USER() { return getToken(PlPgSqlParser.SESSION_USER, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlPgSqlListener ) ((PlPgSqlListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8973);
			_la = _input.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (ALL - 113)) | (1L << (ANALYSE - 113)) | (1L << (ANALYZE - 113)) | (1L << (AND - 113)) | (1L << (ANY - 113)) | (1L << (ARRAY - 113)) | (1L << (AS - 113)) | (1L << (ASC - 113)) | (1L << (ASYMMETRIC - 113)) | (1L << (BOTH - 113)) | (1L << (CASE - 113)) | (1L << (CAST - 113)) | (1L << (CHECK - 113)) | (1L << (COLLATE - 113)) | (1L << (COLUMN - 113)) | (1L << (CONSTRAINT - 113)) | (1L << (CREATE - 113)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (CURRENT_CATALOG - 178)) | (1L << (CURRENT_DATE - 178)) | (1L << (CURRENT_ROLE - 178)) | (1L << (CURRENT_TIME - 178)) | (1L << (CURRENT_TIMESTAMP - 178)) | (1L << (CURRENT_USER - 178)) | (1L << (DEFAULT - 178)) | (1L << (DEFERRABLE - 178)) | (1L << (DESC - 178)) | (1L << (DISTINCT - 178)) | (1L << (DO - 178)) | (1L << (ELSE - 178)) | (1L << (END_P - 178)) | (1L << (EXCEPT - 178)) | (1L << (FALSE_P - 178)) | (1L << (FETCH - 178)) | (1L << (FOR - 178)) | (1L << (FOREIGN - 178)) | (1L << (FROM - 178)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (GRANT - 246)) | (1L << (GROUP_P - 246)) | (1L << (HAVING - 246)) | (1L << (IN_P - 246)) | (1L << (INITIALLY - 246)) | (1L << (INTERSECT - 246)) | (1L << (INTO - 246)) | (1L << (LEADING - 246)) | (1L << (LIMIT - 246)) | (1L << (LOCALTIME - 246)) | (1L << (LOCALTIMESTAMP - 246)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NOT - 323)) | (1L << (NULL_P - 323)) | (1L << (OFFSET - 323)) | (1L << (ON - 323)) | (1L << (ONLY - 323)) | (1L << (OR - 323)) | (1L << (ORDER - 323)) | (1L << (PLACING - 323)) | (1L << (PRIMARY - 323)) | (1L << (REFERENCES - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (RETURNING - 388)) | (1L << (SELECT - 388)) | (1L << (SESSION_USER - 388)) | (1L << (SOME - 388)) | (1L << (SYMMETRIC - 388)) | (1L << (TABLE - 388)) | (1L << (THEN - 388)) | (1L << (TO - 388)) | (1L << (TRAILING - 388)) | (1L << (TRUE_P - 388)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (UNION - 457)) | (1L << (UNIQUE - 457)) | (1L << (USER - 457)) | (1L << (USING - 457)) | (1L << (VARIADIC - 457)) | (1L << (WHEN - 457)) | (1L << (WHERE - 457)) | (1L << (WINDOW - 457)) | (1L << (WITH - 457)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return comp_options_sempred((Comp_optionsContext)_localctx, predIndex);
		case 7: return decl_stmts_sempred((Decl_stmtsContext)_localctx, predIndex);
		case 13: return decl_cursor_arglist_sempred((Decl_cursor_arglistContext)_localctx, predIndex);
		case 26: return proc_stmts_sempred((Proc_stmtsContext)_localctx, predIndex);
		case 32: return getdiag_list_sempred((Getdiag_listContext)_localctx, predIndex);
		case 36: return assign_var_sempred((Assign_varContext)_localctx, predIndex);
		case 38: return stmt_elsifs_sempred((Stmt_elsifsContext)_localctx, predIndex);
		case 42: return case_when_list_sempred((Case_when_listContext)_localctx, predIndex);
		case 67: return proc_exceptions_sempred((Proc_exceptionsContext)_localctx, predIndex);
		case 69: return proc_conditions_sempred((Proc_conditionsContext)_localctx, predIndex);
		case 81: return stmtmulti_sempred((StmtmultiContext)_localctx, predIndex);
		case 84: return optRoleList_sempred((OptRoleListContext)_localctx, predIndex);
		case 85: return alteroptRoleList_sempred((AlteroptRoleListContext)_localctx, predIndex);
		case 102: return optSchemaEltList_sempred((OptSchemaEltListContext)_localctx, predIndex);
		case 107: return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 108: return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 125: return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 133: return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 136: return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 143: return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 149: return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 152: return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 158: return tableElementList_sempred((TableElementListContext)_localctx, predIndex);
		case 159: return typedtableElementList_sempred((TypedtableElementListContext)_localctx, predIndex);
		case 164: return colQualList_sempred((ColQualListContext)_localctx, predIndex);
		case 169: return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 175: return columnList_sempred((ColumnListContext)_localctx, predIndex);
		case 178: return exclusionConstraintList_sempred((ExclusionConstraintListContext)_localctx, predIndex);
		case 197: return seqOptList_sempred((SeqOptListContext)_localctx, predIndex);
		case 201: return numericOnly_list_sempred((NumericOnly_listContext)_localctx, predIndex);
		case 214: return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 217: return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 222: return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 227: return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 229: return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 242: return foreigntableElementList_sempred((ForeigntableElementListContext)_localctx, predIndex);
		case 251: return triggerEvents_sempred((TriggerEventsContext)_localctx, predIndex);
		case 257: return triggerFuncArgs_sempred((TriggerFuncArgsContext)_localctx, predIndex);
		case 260: return constraintAttributeSpec_sempred((ConstraintAttributeSpecContext)_localctx, predIndex);
		case 267: return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 272: return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 275: return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 278: return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 286: return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 294: return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 296: return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 313: return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 316: return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 319: return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 326: return defACLOptionList_sempred((DefACLOptionListContext)_localctx, predIndex);
		case 335: return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 344: return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 346: return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 353: return createfunc_opt_list_sempred((Createfunc_opt_listContext)_localctx, predIndex);
		case 359: return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 361: return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 369: return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 385: return ruleActionMulti_sempred((RuleActionMultiContext)_localctx, predIndex);
		case 398: return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 404: return createdb_opt_list_sempred((Createdb_opt_listContext)_localctx, predIndex);
		case 409: return alterdb_opt_list_sempred((Alterdb_opt_listContext)_localctx, predIndex);
		case 421: return vacuum_option_list_sempred((Vacuum_option_listContext)_localctx, predIndex);
		case 431: return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 443: return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 453: return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 458: return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 461: return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 464: return select_with_parens_sempred((Select_with_parensContext)_localctx, predIndex);
		case 467: return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 469: return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 479: return sortby_list_sempred((Sortby_listContext)_localctx, predIndex);
		case 495: return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 498: return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 500: return from_list_sempred((From_listContext)_localctx, predIndex);
		case 508: return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 514: return tableFuncElementList_sempred((TableFuncElementListContext)_localctx, predIndex);
		case 517: return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 540: return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 541: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 547: return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 553: return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 569: return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 570: return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 572: return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 574: return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 586: return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 592: return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 593: return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 596: return ctext_expr_list_sempred((Ctext_expr_listContext)_localctx, predIndex);
		case 598: return target_list_sempred((Target_listContext)_localctx, predIndex);
		case 600: return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 602: return name_list_sempred((Name_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean sortby_list_sempred(Sortby_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean vacuum_option_list_sempred(Vacuum_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean createfunc_opt_list_sempred(Createfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean target_list_sempred(Target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alteroptRoleList_sempred(AlteroptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typedtableElementList_sempred(TypedtableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 160: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean columnList_sempred(ColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean constraintAttributeSpec_sempred(ConstraintAttributeSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean seqOptList_sempred(SeqOptListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerEvents_sempred(TriggerEventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean getdiag_list_sempred(Getdiag_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean stmt_elsifs_sempred(Stmt_elsifsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean foreigntableElementList_sempred(ForeigntableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean stmtmulti_sempred(StmtmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createdb_opt_list_sempred(Createdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean decl_cursor_arglist_sempred(Decl_cursor_arglistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean proc_stmts_sempred(Proc_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean select_with_parens_sempred(Select_with_parensContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return precpred(_ctx, 3);
		case 73: return precpred(_ctx, 2);
		case 74: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean comp_options_sempred(Comp_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableElementList_sempred(TableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return precpred(_ctx, 2);
		case 77: return precpred(_ctx, 1);
		case 75: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean colQualList_sempred(ColQualListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 137: return precpred(_ctx, 2);
		case 136: return precpred(_ctx, 4);
		case 138: return precpred(_ctx, 1);
		case 129: return precpred(_ctx, 11);
		case 128: return precpred(_ctx, 12);
		case 131: return precpred(_ctx, 9);
		case 130: return precpred(_ctx, 10);
		case 133: return precpred(_ctx, 7);
		case 132: return precpred(_ctx, 8);
		case 135: return precpred(_ctx, 5);
		case 134: return precpred(_ctx, 6);
		case 87: return precpred(_ctx, 56);
		case 93: return precpred(_ctx, 48);
		case 92: return precpred(_ctx, 49);
		case 95: return precpred(_ctx, 46);
		case 94: return precpred(_ctx, 47);
		case 89: return precpred(_ctx, 52);
		case 88: return precpred(_ctx, 53);
		case 91: return precpred(_ctx, 50);
		case 90: return precpred(_ctx, 51);
		case 102: return precpred(_ctx, 36);
		case 103: return precpred(_ctx, 35);
		case 100: return precpred(_ctx, 38);
		case 101: return precpred(_ctx, 37);
		case 98: return precpred(_ctx, 41);
		case 99: return precpred(_ctx, 40);
		case 96: return precpred(_ctx, 45);
		case 97: return precpred(_ctx, 44);
		case 110: return precpred(_ctx, 28);
		case 111: return precpred(_ctx, 27);
		case 108: return precpred(_ctx, 30);
		case 109: return precpred(_ctx, 29);
		case 106: return precpred(_ctx, 32);
		case 107: return precpred(_ctx, 31);
		case 104: return precpred(_ctx, 34);
		case 105: return precpred(_ctx, 33);
		case 119: return precpred(_ctx, 24);
		case 118: return precpred(_ctx, 25);
		case 117: return precpred(_ctx, 26);
		case 116: return precpred(_ctx, 42);
		case 115: return precpred(_ctx, 57);
		case 114: return precpred(_ctx, 58);
		case 113: return precpred(_ctx, 14);
		case 112: return precpred(_ctx, 15);
		case 127: return precpred(_ctx, 13);
		case 126: return precpred(_ctx, 16);
		case 125: return precpred(_ctx, 17);
		case 124: return precpred(_ctx, 18);
		case 123: return precpred(_ctx, 19);
		case 122: return precpred(_ctx, 20);
		case 121: return precpred(_ctx, 21);
		case 120: return precpred(_ctx, 23);
		}
		return true;
	}
	private boolean assign_var_sempred(Assign_varContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exclusionConstraintList_sempred(ExclusionConstraintListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optRoleList_sempred(OptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ruleActionMulti_sempred(RuleActionMultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableFuncElementList_sempred(TableFuncElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 139: return precpred(_ctx, 18);
		case 141: return precpred(_ctx, 16);
		case 140: return precpred(_ctx, 17);
		case 143: return precpred(_ctx, 14);
		case 142: return precpred(_ctx, 15);
		case 152: return precpred(_ctx, 7);
		case 153: return precpred(_ctx, 4);
		case 154: return precpred(_ctx, 3);
		case 155: return precpred(_ctx, 2);
		case 156: return precpred(_ctx, 1);
		case 144: return precpred(_ctx, 13);
		case 145: return precpred(_ctx, 12);
		case 146: return precpred(_ctx, 11);
		case 147: return precpred(_ctx, 10);
		case 148: return precpred(_ctx, 9);
		case 149: return precpred(_ctx, 6);
		case 150: return precpred(_ctx, 5);
		case 151: return precpred(_ctx, 21);
		}
		return true;
	}
	private boolean ctext_expr_list_sempred(Ctext_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return precpred(_ctx, 2);
		case 60: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean proc_conditions_sempred(Proc_conditionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean decl_stmts_sempred(Decl_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean defACLOptionList_sempred(DefACLOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optSchemaEltList_sempred(OptSchemaEltListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean numericOnly_list_sempred(NumericOnly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean from_list_sempred(From_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return precpred(_ctx, 3);
		case 26: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean case_when_list_sempred(Case_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return precpred(_ctx, 4);
		case 69: return precpred(_ctx, 3);
		case 70: return precpred(_ctx, 2);
		case 71: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alterdb_opt_list_sempred(Alterdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerFuncArgs_sempred(TriggerFuncArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85: return precpred(_ctx, 3);
		case 86: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean proc_exceptions_sempred(Proc_exceptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159: return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0238\u2312\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\3\2\3\2\3\2\3"+
		"\2\3\3\3\3\3\3\7\3\u04e4\n\3\f\3\16\3\u04e7\13\3\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04f5\n\4\3\5\3\5\5\5\u04f9\n\5\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u050a\n\7\3\b"+
		"\3\b\3\t\3\t\3\t\3\t\3\t\7\t\u0513\n\t\f\t\16\t\u0516\13\t\3\n\3\n\3\n"+
		"\3\n\3\n\3\n\5\n\u051e\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0534\n\13"+
		"\3\f\3\f\3\f\3\f\5\f\u053a\n\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\5\16\u0543"+
		"\n\16\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u054b\n\17\f\17\16\17\u054e\13"+
		"\17\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\5\23\u0559\n\23\3\24"+
		"\3\24\5\24\u055d\n\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u0566\n"+
		"\26\3\27\3\27\3\27\5\27\u056b\n\27\3\30\3\30\5\30\u056f\n\30\3\31\3\31"+
		"\5\31\u0573\n\31\3\32\3\32\3\33\3\33\5\33\u0579\n\33\3\34\3\34\3\34\3"+
		"\34\3\34\7\34\u0580\n\34\f\34\16\34\u0583\13\34\3\35\3\35\3\35\3\35\3"+
		"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3"+
		"\35\3\35\3\35\3\35\5\35\u059b\n\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3 \3 \3 \3 \3 \3 \3!\3!\3!\5!\u05ad\n!\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u05b5"+
		"\n\"\f\"\16\"\u05b8\13\"\3#\3#\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3&\7&"+
		"\u05c8\n&\f&\16&\u05cb\13&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3"+
		"(\3(\3(\3(\7(\u05dc\n(\f(\16(\u05df\13(\3)\3)\3)\5)\u05e4\n)\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3,\7,\u05f5\n,\f,\16,\u05f8\13,\3-\3"+
		"-\3-\3-\3.\3.\3.\5.\u0601\n.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61"+
		"\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\65\3\65\3\65\5\65\u0622\n\65\3\66\3\66\3\66\3\66"+
		"\3\67\3\67\38\38\39\39\3:\3:\3:\3:\3:\3:\3;\3;\3;\3<\3<\3=\3=\3=\3>\3"+
		">\3>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3A\3A\3A\3A\3B\3B\3B\3C\3C\3D\3D\3D\5"+
		"D\u0654\nD\3E\3E\3E\3E\3E\7E\u065b\nE\fE\16E\u065e\13E\3F\3F\3F\3F\3F"+
		"\3G\3G\3G\3G\3G\3G\7G\u066b\nG\fG\16G\u066e\13G\3H\3H\3I\3I\3J\3J\3K\3"+
		"K\3L\3L\3M\3M\3M\3M\3M\5M\u067f\nM\3N\3N\5N\u0683\nN\3O\3O\3O\5O\u0688"+
		"\nO\3P\3P\3Q\3Q\3R\3R\3S\3S\3S\3S\3S\3S\7S\u0696\nS\fS\16S\u0699\13S\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u070a\nT\3"+
		"U\3U\3U\3U\5U\u0710\nU\3U\3U\3V\3V\3V\7V\u0717\nV\fV\16V\u071a\13V\3W"+
		"\3W\3W\7W\u071f\nW\fW\16W\u0722\13W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0738\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3"+
		"Y\3Y\3Y\5Y\u0747\nY\3Z\3Z\3Z\3Z\5Z\u074d\nZ\3Z\3Z\3[\3[\3[\3[\5[\u0755"+
		"\n[\3[\3[\3\\\3\\\3\\\3\\\5\\\u075d\n\\\3]\3]\3]\3]\3]\3]\3^\3^\3^\3^"+
		"\5^\u0769\n^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3`\3`\5`\u077a\n`"+
		"\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0784\na\3b\3b\3b\3b\5b\u078a\nb\3b\3b\3c"+
		"\3c\3c\3c\3c\3c\3c\3d\3d\3e\3e\3e\3e\3e\3e\3e\3e\5e\u079f\ne\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u07ad\nf\3g\3g\5g\u07b1\ng\3h\3h\3h\7h"+
		"\u07b6\nh\fh\16h\u07b9\13h\3i\3i\3i\3i\3i\3i\5i\u07c1\ni\3j\3j\3j\3j\3"+
		"j\3j\3j\3j\5j\u07cb\nj\3k\3k\3k\3k\3k\3k\3k\3k\5k\u07d5\nk\3l\3l\3l\3"+
		"l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3"+
		"l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0802\nl\3m\3m\3"+
		"m\3m\3m\3m\7m\u080a\nm\fm\16m\u080d\13m\3n\3n\3n\3n\3n\3n\7n\u0815\nn"+
		"\fn\16n\u0818\13n\3o\3o\5o\u081c\no\3p\3p\3p\3p\3p\3p\3p\5p\u0825\np\3"+
		"q\3q\3q\3q\5q\u082b\nq\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\5r\u083d\nr\3s\3s\3s\5s\u0842\ns\3t\3t\5t\u0846\nt\3u\3u\3u\3u\3u\3"+
		"u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0856\nu\3v\3v\3v\5v\u085b\nv\3w\3w\3w\5"+
		"w\u0860\nw\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0870\nx\3y\3"+
		"y\3y\3y\3y\3z\3z\5z\u0879\nz\3{\3{\3|\3|\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0887"+
		"\n}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~"+
		"\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~"+
		"\3~\3~\3~\5~\u08b9\n~\3\177\3\177\3\177\3\177\3\177\3\177\7\177\u08c1"+
		"\n\177\f\177\16\177\u08c4\13\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u096b"+
		"\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0972\n\u0081"+
		"\3\u0082\3\u0082\3\u0082\5\u0082\u0977\n\u0082\3\u0083\3\u0083\3\u0083"+
		"\5\u0083\u097c\n\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u0981\n\u0084\3"+
		"\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\5\u0086\u098a\n"+
		"\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u0992\n"+
		"\u0087\f\u0087\16\u0087\u0995\13\u0087\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u09a6\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u09b3"+
		"\n\u008a\f\u008a\16\u008a\u09b6\13\u008a\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u09d2\n\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\5\u008c\u09d8\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u09e3\n\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u09ec\n\u008d"+
		"\3\u008d\3\u008d\5\u008d\u09f0\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u09f7\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\5\u0090\u09fe\n\u0090\3\u0091\3\u0091\3\u0091\7\u0091\u0a03\n\u0091\f"+
		"\u0091\16\u0091\u0a06\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\5\u0092\u0a28\n\u0092\3\u0093\3\u0093\5\u0093\u0a2c\n\u0093\3\u0094\3"+
		"\u0094\3\u0094\5\u0094\u0a31\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\5\u0095\u0a38\n\u0095\3\u0096\3\u0096\5\u0096\u0a3c\n\u0096\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0a44\n\u0097\f\u0097"+
		"\16\u0097\u0a47\13\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0a54\n\u0099\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0a5c\n\u009a\f\u009a"+
		"\16\u009a\u0a5f\13\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\5\u009c\u0a97\n\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0aa5\n\u009d\3\u009e\3\u009e\5\u009e\u0aa9\n\u009e\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ab0\n\u009f\3\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0ab8\n\u00a0\f\u00a0\16\u00a0"+
		"\u0abb\13\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\7\u00a1"+
		"\u0ac3\n\u00a1\f\u00a1\16\u00a1\u0ac6\13\u00a1\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0acb\n\u00a2\3\u00a3\3\u00a3\5\u00a3\u0acf\n\u00a3\3\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0ade\n\u00a6\f\u00a6\16\u00a6\u0ae1"+
		"\13\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\5\u00a7\u0aeb\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\5\u00a8\u0b07\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0b10\n\u00a9\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab"+
		"\u0b1d\n\u00ab\f\u00ab\16\u00ab\u0b20\13\u00ab\3\u00ac\3\u00ac\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0b29\n\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b61"+
		"\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0b66\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0b6d\n\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b75\n\u00b1\f\u00b1\16\u00b1\u0b78"+
		"\13\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\5\u00b3\u0b83\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\7\u00b4\u0b8b\n\u00b4\f\u00b4\16\u00b4\u0b8e\13\u00b4\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\5\u00b5\u0b9b\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0ba3\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bae\n\u00b7\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bc0\n\u00ba\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0bc8\n\u00bb\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0bd1\n\u00bc"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bdf\n\u00bd\3\u00be\3\u00be\3\u00be"+
		"\5\u00be\u0be4\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u0beb\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u0c05\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\5\u00c5\u0c19\n\u00c5\3\u00c6\3\u00c6\5\u00c6\u0c1d\n"+
		"\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u0c24\n\u00c7\f"+
		"\u00c7\16\u00c7\u0c27\13\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u0c3f\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0c45\n\u00c8\3"+
		"\u00c8\5\u00c8\u0c48\n\u00c8\3\u00c9\3\u00c9\5\u00c9\u0c4c\n\u00c9\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0c52\n\u00ca\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0c5a\n\u00cb\f\u00cb\16\u00cb\u0c5d"+
		"\13\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u0c71\n\u00cc\3\u00cd\3\u00cd\5\u00cd\u0c75\n\u00cd\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0c7b\n\u00ce\3\u00cf\3\u00cf\3"+
		"\u00cf\5\u00cf\u0c80\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0c86"+
		"\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u0c8a\n\u00d1\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u0c9a\n\u00d2\3\u00d3\3\u00d3\5\u00d3\u0c9e\n"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d5\5\u00d5\u0caa\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0cb4\n\u00d6\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\5\u00d7\u0cba\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0cc5\n\u00d7\3\u00d7"+
		"\3\u00d7\5\u00d7\u0cc9\n\u00d7\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0cce\n"+
		"\u00d8\f\u00d8\16\u00d8\u0cd1\13\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u0cd9\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\7\u00db\u0ce4\n\u00db\f\u00db"+
		"\16\u00db\u0ce7\13\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0d9e\n\u00dd\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0db0\n\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0db7\n\u00e0\f\u00e0\16\u00e0"+
		"\u0dba\13\u00e0\3\u00e1\3\u00e1\5\u00e1\u0dbe\n\u00e1\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0dd0\n\u00e2\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0de1\n\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0de9\n\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0df1\n\u00e5\f\u00e5"+
		"\16\u00e5\u0df4\13\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0e01\n\u00e7\f\u00e7"+
		"\16\u00e7\u0e04\13\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u0e0d\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0e24"+
		"\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0e2a\n\u00ee\3\u00ef"+
		"\3\u00ef\5\u00ef\u0e2e\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e3c"+
		"\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1"+
		"\u0e4e\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0e65\n\u00f2\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0e6d\n\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0e75\n\u00f4\f\u00f4"+
		"\16\u00f4\u0e78\13\u00f4\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u0e8a\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0e98"+
		"\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\5\u00f9\u0eac\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u0edc\n\u00fb\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0ee2\n\u00fc\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u0eea\n\u00fd\f\u00fd\16\u00fd\u0eed"+
		"\13\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe"+
		"\u0ef6\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0efd\n"+
		"\u00ff\3\u0100\3\u0100\5\u0100\u0f01\n\u0100\3\u0101\3\u0101\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0f0b\n\u0102\3\u0103\3"+
		"\u0103\3\u0103\5\u0103\u0f10\n\u0103\3\u0103\3\u0103\3\u0103\7\u0103\u0f15"+
		"\n\u0103\f\u0103\16\u0103\u0f18\13\u0103\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u0f1e\n\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u0f23\n\u0105\3"+
		"\u0106\3\u0106\3\u0106\7\u0106\u0f28\n\u0106\f\u0106\16\u0106\u0f2b\13"+
		"\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u0f38\n\u0107\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u0f4a\n\u0108\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u0fb1\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u0fbd\n\u010d\f\u010d\16\u010d"+
		"\u0fc0\13\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u0fc7"+
		"\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0fce\n\u010f"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u0fd7"+
		"\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\7\u0112\u0fe3\n\u0112\f\u0112\16\u0112\u0fe6\13\u0112"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0114\3\u0114\5\u0114\u0fee\n\u0114"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u0ff6\n\u0115"+
		"\f\u0115\16\u0115\u0ff9\13\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\5\u0116\u1014\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u102a"+
		"\n\u0118\f\u0118\16\u0118\u102d\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u104b\n\u0119"+
		"\3\u011a\3\u011a\5\u011a\u104f\n\u011a\3\u011b\3\u011b\3\u011b\5\u011b"+
		"\u1054\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\5\u011c\u105d\n\u011c\3\u011d\3\u011d\5\u011d\u1061\n\u011d\3\u011e\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u107c\n\u011f"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\7\u0120\u1084\n\u0120"+
		"\f\u0120\16\u0120\u1087\13\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1095"+
		"\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\5\u0122\u10a9\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u10bd\n\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\5\u0126\u10e6\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u1100\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\7\u0128\u1108\n\u0128\f\u0128\16\u0128\u110b\13\u0128\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u1111\n\u0129\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u111a\n\u012a\f\u012a\16\u012a"+
		"\u111d\13\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u112a\n\u012c\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u11c0\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u11d6"+
		"\n\u012e\3\u012f\3\u012f\5\u012f\u11da\n\u012f\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u120d\n\u0130\3\u0131\3\u0131\3\u0131\5\u0131\u1212\n"+
		"\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1220\n\u0132\3\u0133\3\u0133"+
		"\5\u0133\u1224\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u122a\n"+
		"\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u126e\n\u0135\3\u0136\3\u0136"+
		"\3\u0137\3\u0137\5\u0137\u1274\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1291\n\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u12a2\n\u013a\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\7\u013b\u12aa\n\u013b\f\u013b"+
		"\16\u013b\u12ad\13\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u12b8\n\u013c\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u12e6\n\u013d\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\7\u013e\u12ee\n\u013e\f\u013e"+
		"\16\u013e\u12f1\13\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u12f6\n\u013f"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u12fc\n\u0140\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141\u1304\n\u0141\f\u0141\16\u0141"+
		"\u1307\13\u0141\3\u0142\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1324\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\5\u0145\u132a\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1330\n"+
		"\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0148\3\u0148"+
		"\3\u0148\7\u0148\u133b\n\u0148\f\u0148\16\u0148\u133e\13\u0148\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149"+
		"\u1349\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\5\u014a\u1366\n\u014a\3\u014b\3\u014b\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\5\u014d\u137b\n\u014d"+
		"\3\u014e\3\u014e\5\u014e\u137f\n\u014e\3\u014f\3\u014f\5\u014f\u1383\n"+
		"\u014f\3\u0150\3\u0150\3\u0150\5\u0150\u1388\n\u0150\3\u0151\3\u0151\3"+
		"\u0151\3\u0151\3\u0151\3\u0151\7\u0151\u1390\n\u0151\f\u0151\16\u0151"+
		"\u1393\13\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u13a9\n\u0152\3\u0153\3\u0153"+
		"\3\u0153\5\u0153\u13ae\n\u0153\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154"+
		"\u13b4\n\u0154\3\u0155\3\u0155\3\u0155\5\u0155\u13b9\n\u0155\3\u0156\3"+
		"\u0156\3\u0156\5\u0156\u13be\n\u0156\3\u0157\3\u0157\5\u0157\u13c2\n\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\5\u0157\u13ce\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157"+
		"\u13dd\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157"+
		"\u13e5\n\u0157\3\u0158\3\u0158\3\u0158\5\u0158\u13ea\n\u0158\3\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u13f2\n\u0159\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\7\u015a\u13fa\n\u015a\f\u015a\16"+
		"\u015a\u13fd\13\u015a\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\5\u015b\u1405\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\7\u015c\u140d\n\u015c\f\u015c\16\u015c\u1410\13\u015c\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1421\n\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u1429\n\u015e\3\u015f\3\u015f"+
		"\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u143b\n\u0161\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162"+
		"\u1446\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\7\u0163\u144d\n"+
		"\u0163\f\u0163\16\u0163\u1450\13\u0163\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\5\u0164\u1471\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u1479\n\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166"+
		"\u1480\n\u0166\3\u0167\3\u0167\3\u0167\5\u0167\u1485\n\u0167\3\u0168\3"+
		"\u0168\3\u0168\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\7\u0169"+
		"\u1490\n\u0169\f\u0169\16\u0169\u1493\13\u0169\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\7\u016b"+
		"\u14a0\n\u016b\f\u016b\16\u016b\u14a3\13\u016b\3\u016c\3\u016c\5\u016c"+
		"\u14a7\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u14b7"+
		"\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u14c7\n\u016e"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u14d7\n\u016f\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\5\u0170\u14ef\n\u0170\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\5\u0171\u14f6\n\u0171\3\u0172\3\u0172\3\u0172\3\u0173"+
		"\3\u0173\3\u0173\3\u0173\3\u0173\7\u0173\u1500\n\u0173\f\u0173\16\u0173"+
		"\u1503\13\u0173\3\u0174\3\u0174\3\u0174\5\u0174\u1508\n\u0174\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u152c\n\u0175"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1533\n\u0176\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0178\3\u0178\3\u0178\5\u0178\u1542\n\u0178\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\5\u0179\u1553\n\u0179\3\u017a\3\u017a\3\u017b"+
		"\3\u017b\5\u017b\u1559\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\5\u017c\u16ad\n\u017c\3\u017d\3\u017d\5\u017d\u16b1\n\u017d\3\u017e\3"+
		"\u017e\3\u017e\5\u017e\u16b6\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3"+
		"\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u176c\n\u017f\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u17fc\n\u0180"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\5\u0182\u1812\n\u0182\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\7\u0183\u181a\n\u0183\f\u0183\16\u0183\u181d\13\u0183"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u1824\n\u0184\3\u0185"+
		"\3\u0185\5\u0185\u1828\n\u0185\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187"+
		"\5\u0187\u182f\n\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\5\u0188\u1841\n\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u184a\n\u018a\3\u018b\3\u018b\3\u018b\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\5\u018c\u1853\n\u018c\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\5\u018d\u187f\n\u018d\3\u018e\3\u018e\3\u018e"+
		"\5\u018e\u1884\n\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u1890\n\u018f\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\7\u0190\u189a\n\u0190"+
		"\f\u0190\16\u0190\u189d\13\u0190\3\u0191\3\u0191\5\u0191\u18a1\n\u0191"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u18b9\n\u0192\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\5\u0193\u18c7\n\u0193\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\5\u0195\u18d0\n\u0195\3\u0195\3\u0195\3\u0196\3\u0196"+
		"\3\u0196\7\u0196\u18d7\n\u0196\f\u0196\16\u0196\u18da\13\u0196\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\5\u0197\u191d\n\u0197\3\u0198\3\u0198\5\u0198\u1921\n\u0198\3"+
		"\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u1927\n\u0199\3\u0199\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u1932\n"+
		"\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b"+
		"\7\u019b\u193c\n\u019b\f\u019b\16\u019b\u193f\13\u019b\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\5\u019d\u194e\n\u019d\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f"+
		"\u1989\n\u019f\3\u01a0\3\u01a0\5\u01a0\u198d\n\u01a0\3\u01a1\3\u01a1\3"+
		"\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u19de\n\u01a2\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u19f8\n\u01a4\3\u01a5"+
		"\3\u01a5\3\u01a5\5\u01a5\u19fd\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a1c"+
		"\n\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\7\u01a7\u1a24"+
		"\n\u01a7\f\u01a7\16\u01a7\u1a27\13\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\5\u01a8\u1a2d\n\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\5\u01a9\u1a37\n\u01a9\3\u01aa\3\u01aa\3\u01ab\3\u01ab"+
		"\5\u01ab\u1a3d\n\u01ab\3\u01ac\3\u01ac\5\u01ac\u1a41\n\u01ac\3\u01ad\3"+
		"\u01ad\5\u01ad\u1a45\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5"+
		"\u01ae\u1a4c\n\u01ae\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3"+
		"\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\5\u01af\u1a5e\n\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\5\u01b0\u1a67\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\7\u01b1\u1a6f\n\u01b1\f\u01b1\16\u01b1\u1a72\13\u01b1"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u1a7a\n\u01b3"+
		"\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1a7f\n\u01b4\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6"+
		"\u1a8c\n\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1a92\n\u01b7\3"+
		"\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1aa2\n\u01b8\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1aa9\n\u01b9\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba"+
		"\u1ab5\n\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc"+
		"\u1ac6\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\7\u01bd"+
		"\u1ace\n\u01bd\f\u01bd\16\u01bd\u1ad1\13\u01bd\3\u01be\3\u01be\3\u01be"+
		"\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u1ad9\n\u01bf\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c1\5\u01c1"+
		"\u1ae6\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1af3\n\u01c3\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b05\n\u01c4\3\u01c5"+
		"\3\u01c5\5\u01c5\u1b09\n\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\7\u01c7\u1b1a\n\u01c7\f\u01c7\16\u01c7\u1b1d\13\u01c7\3\u01c8"+
		"\3\u01c8\5\u01c8\u1b21\n\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01ca"+
		"\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\7\u01cc\u1b36\n\u01cc\f\u01cc"+
		"\16\u01cc\u1b39\13\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\7\u01cf\u1b4f\n\u01cf\f\u01cf"+
		"\16\u01cf\u1b52\13\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0"+
		"\u1b59\n\u01d0\3\u01d1\3\u01d1\5\u01d1\u1b5d\n\u01d1\3\u01d2\3\u01d2\3"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b68\n"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b6f\n\u01d2\3"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b76\n\u01d2\3\u01d2\3"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b7d\n\u01d2\7\u01d2\u1b7f\n\u01d2"+
		"\f\u01d2\16\u01d2\u1b82\13\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\5\u01d3\u1ba5\n\u01d3\3\u01d4\3\u01d4\5\u01d4\u1ba9\n\u01d4\3"+
		"\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bb9\n\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bc0\n\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bc7\n\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\5\u01d5\u1bce\n\u01d5\7\u01d5\u1bd0\n\u01d5\f\u01d5\16"+
		"\u01d5\u1bd3\13\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6"+
		"\u1bda\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\7\u01d7"+
		"\u1be2\n\u01d7\f\u01d7\16\u01d7\u1be5\13\u01d7\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d9\3\u01d9\5\u01d9\u1bf0\n\u01d9"+
		"\3\u01da\3\u01da\3\u01da\5\u01da\u1bf5\n\u01da\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1c1a\n\u01db\3\u01dc"+
		"\3\u01dc\5\u01dc\u1c1e\n\u01dc\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1c23\n"+
		"\u01dd\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\3\u01de\5\u01de\u1c2e\n\u01de\3\u01df\3\u01df\5\u01df\u1c32\n\u01df\3"+
		"\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e1\7\u01e1\u1c3e\n\u01e1\f\u01e1\16\u01e1\u1c41\13\u01e1\3\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2"+
		"\u1c4c\n\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3"+
		"\3\u01e3\5\u01e3\u1c56\n\u01e3\3\u01e4\3\u01e4\5\u01e4\u1c5a\n\u01e4\3"+
		"\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u1c69\n\u01e5\3\u01e6\3\u01e6"+
		"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1c71\n\u01e6\3\u01e7\3\u01e7"+
		"\5\u01e7\u1c75\n\u01e7\3\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01e9\3\u01e9"+
		"\3\u01e9\3\u01e9\5\u01e9\u1c7f\n\u01e9\3\u01ea\3\u01ea\3\u01eb\3\u01eb"+
		"\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u1c8b\n\u01ed"+
		"\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1c90\n\u01ee\3\u01ef\3\u01ef\3\u01ef"+
		"\3\u01ef\5\u01ef\u1c96\n\u01ef\3\u01f0\3\u01f0\5\u01f0\u1c9a\n\u01f0\3"+
		"\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\7\u01f1\u1ca1\n\u01f1\f\u01f1\16"+
		"\u01f1\u1ca4\13\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u1cb0\n\u01f2\3\u01f3\3\u01f3"+
		"\3\u01f3\5\u01f3\u1cb5\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f4\7\u01f4\u1cbe\n\u01f4\f\u01f4\16\u01f4\u1cc1\13\u01f4"+
		"\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1cc6\n\u01f5\3\u01f6\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\3\u01f6\7\u01f6\u1cce\n\u01f6\f\u01f6\16\u01f6\u1cd1"+
		"\13\u01f6\3\u01f7\3\u01f7\5\u01f7\u1cd5\n\u01f7\3\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f8\5\u01f8\u1cf6\n\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9"+
		"\u1cfc\n\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\5\u01f9\u1d19\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\5\u01fa\u1d29\n\u01fa\3\u01fb\3\u01fb\5\u01fb\u1d2d\n\u01fb\3"+
		"\u01fb\3\u01fb\5\u01fb\u1d31\n\u01fb\3\u01fb\3\u01fb\5\u01fb\u1d35\n\u01fb"+
		"\3\u01fb\5\u01fb\u1d38\n\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc"+
		"\3\u01fc\3\u01fc\5\u01fc\u1d41\n\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1d4e"+
		"\n\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\7\u01fe\u1d56"+
		"\n\u01fe\f\u01fe\16\u01fe\u1d59\13\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1d63\n\u01ff\3\u0200\3\u0200"+
		"\3\u0201\3\u0201\3\u0201\5\u0201\u1d6a\n\u0201\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u1d73\n\u0202\3\u0203\3\u0203"+
		"\5\u0203\u1d77\n\u0203\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\7\u0204\u1d7f\n\u0204\f\u0204\16\u0204\u1d82\13\u0204\3\u0205\3\u0205"+
		"\3\u0205\3\u0205\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\5\u0206\u1da3\n\u0206\3\u0207\3\u0207\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\7\u0207\u1dae\n\u0207\f\u0207"+
		"\16\u0207\u1db1\13\u0207\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208"+
		"\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\5\u0208"+
		"\u1dc1\n\u0208\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1dc7\n\u0209\3"+
		"\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\5\u020a\u1dd0\n"+
		"\u020a\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1dd7\n\u020b\3"+
		"\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c"+
		"\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u1de9"+
		"\n\u020c\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1df0\n\u020d"+
		"\3\u020e\3\u020e\5\u020e\u1df4\n\u020e\3\u020f\3\u020f\5\u020f\u1df8\n"+
		"\u020f\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0211\3\u0211"+
		"\3\u0211\3\u0212\3\u0212\5\u0212\u1e05\n\u0212\3\u0213\3\u0213\5\u0213"+
		"\u1e09\n\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0215"+
		"\3\u0215\3\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u1e21\n\u0216"+
		"\3\u0217\3\u0217\5\u0217\u1e25\n\u0217\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\5\u0218\u1e2b\n\u0218\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219"+
		"\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219"+
		"\3\u0219\5\u0219\u1e3d\n\u0219\3\u021a\3\u021a\3\u021b\3\u021b\3\u021b"+
		"\3\u021b\3\u021b\3\u021b\5\u021b\u1e47\n\u021b\3\u021c\3\u021c\3\u021c"+
		"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c"+
		"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c"+
		"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\5\u021c\u1e65"+
		"\n\u021c\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1e6d"+
		"\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\5\u021e\u1e80\n\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\7\u021e\u1f66\n\u021e"+
		"\f\u021e\16\u021e\u1f69\13\u021e\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\5\u021f\u1f74\n\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\3\u021f\3\u021f\3\u021f\7\u021f\u1fbb\n\u021f\f\u021f\16\u021f"+
		"\u1fbe\13\u021f\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\5\u0220\u1fd3\n\u0220\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\3\u0221\5\u0221\u20d6\n\u0221\3\u0222\3\u0222\3\u0222\3\u0222"+
		"\3\u0222\5\u0222\u20dd\n\u0222\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223"+
		"\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u20ea\n\u0223"+
		"\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\3\u0225\3\u0225\3\u0225\3\u0225"+
		"\3\u0225\3\u0225\7\u0225\u20f7\n\u0225\f\u0225\16\u0225\u20fa\13\u0225"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u2101\n\u0226\3\u0227"+
		"\3\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u210a\n\u0228"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\5\u0229\u211e\n\u0229\3\u022a\3\u022a\3\u022a\5\u022a\u2123\n\u022a\3"+
		"\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\7\u022b\u212b\n\u022b\f"+
		"\u022b\16\u022b\u212e\13\u022b\3\u022c\3\u022c\3\u022c\3\u022c\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\5\u022d\u2139\n\u022d\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022f\3\u022f\5\u022f\u2144"+
		"\n\u022f\3\u0230\3\u0230\3\u0230\3\u0230\5\u0230\u214a\n\u0230\3\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u2151\n\u0231\3\u0232\3\u0232"+
		"\3\u0232\3\u0232\3\u0232\3\u0232\5\u0232\u2159\n\u0232\3\u0233\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233"+
		"\3\u0233\5\u0233\u2167\n\u0233\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234"+
		"\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234"+
		"\5\u0234\u2177\n\u0234\3\u0235\3\u0235\3\u0236\3\u0236\5\u0236\u217d\n"+
		"\u0236\3\u0237\3\u0237\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238"+
		"\5\u0238\u2187\n\u0238\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\5\u0239\u218f\n\u0239\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a"+
		"\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\5\u023a\u219d\n\u023a"+
		"\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\7\u023b\u21a5\n\u023b"+
		"\f\u023b\16\u023b\u21a8\13\u023b\3\u023c\3\u023c\3\u023c\3\u023c\3\u023c"+
		"\3\u023c\7\u023c\u21b0\n\u023c\f\u023c\16\u023c\u21b3\13\u023c\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u21ba\n\u023d\3\u023e\3\u023e"+
		"\3\u023e\3\u023e\3\u023e\3\u023e\7\u023e\u21c2\n\u023e\f\u023e\16\u023e"+
		"\u21c5\13\u023e\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\5\u023f\u21d1\n\u023f\3\u0240\3\u0240\3\u0240"+
		"\3\u0240\3\u0240\3\u0240\7\u0240\u21d9\n\u0240\f\u0240\16\u0240\u21dc"+
		"\13\u0240\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\5\u0241\u21e3\n\u0241"+
		"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\5\u0242"+
		"\u21ed\n\u0242\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243"+
		"\3\u0243\3\u0243\5\u0243\u21f8\n\u0243\3\u0244\3\u0244\3\u0244\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u2202\n\u0245\3\u0246\3\u0246"+
		"\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246"+
		"\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\5\u0246\u2214\n\u0246\3\u0247"+
		"\3\u0247\3\u0247\3\u0248\3\u0248\3\u0248\3\u0249\3\u0249\3\u0249\3\u0249"+
		"\3\u0249\3\u0249\3\u0249\5\u0249\u2223\n\u0249\3\u024a\3\u024a\3\u024a"+
		"\3\u024a\3\u024a\5\u024a\u222a\n\u024a\3\u024b\3\u024b\3\u024b\3\u024b"+
		"\3\u024b\3\u024b\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\7\u024c\u2237"+
		"\n\u024c\f\u024c\16\u024c\u223a\13\u024c\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024e\3\u024e\3\u024e\5\u024e\u2244\n\u024e\3\u024f\3\u024f"+
		"\5\u024f\u2248\n\u024f\3\u0250\3\u0250\3\u0250\3\u0250\5\u0250\u224e\n"+
		"\u0250\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251"+
		"\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\5\u0251\u225e\n\u0251"+
		"\3\u0252\3\u0252\3\u0252\3\u0252\3\u0252\7\u0252\u2265\n\u0252\f\u0252"+
		"\16\u0252\u2268\13\u0252\3\u0253\3\u0253\3\u0253\7\u0253\u226d\n\u0253"+
		"\f\u0253\16\u0253\u2270\13\u0253\3\u0254\3\u0254\5\u0254\u2274\n\u0254"+
		"\3\u0255\3\u0255\5\u0255\u2278\n\u0255\3\u0256\3\u0256\3\u0256\3\u0256"+
		"\3\u0256\3\u0256\7\u0256\u2280\n\u0256\f\u0256\16\u0256\u2283\13\u0256"+
		"\3\u0257\3\u0257\3\u0257\3\u0257\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258"+
		"\3\u0258\7\u0258\u228f\n\u0258\f\u0258\16\u0258\u2292\13\u0258\3\u0259"+
		"\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259"+
		"\u229d\n\u0259\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\3\u025a\7\u025a"+
		"\u22a5\n\u025a\f\u025a\16\u025a\u22a8\13\u025a\3\u025b\3\u025b\3\u025b"+
		"\3\u025b\5\u025b\u22ae\n\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\7\u025c\u22b6\n\u025c\f\u025c\16\u025c\u22b9\13\u025c\3\u025d"+
		"\3\u025d\3\u025e\3\u025e\3\u025f\3\u025f\3\u0260\3\u0260\3\u0261\3\u0261"+
		"\3\u0262\3\u0262\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263\u22cb\n\u0263"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264\u22ec\n\u0264\3\u0265\3\u0265"+
		"\3\u0266\3\u0266\3\u0267\3\u0267\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268"+
		"\5\u0268\u22f9\n\u0268\3\u0269\3\u0269\3\u0269\5\u0269\u22fe\n\u0269\3"+
		"\u026a\3\u026a\3\u026a\5\u026a\u2303\n\u026a\3\u026b\3\u026b\3\u026b\3"+
		"\u026b\3\u026b\5\u026b\u230a\n\u026b\3\u026c\3\u026c\3\u026d\3\u026d\3"+
		"\u026e\3\u026e\3\u026e\2^\4\20\34\66BJNV\u0088\u008c\u00a4\u00aa\u00ac"+
		"\u00ce\u00d8\u00da\u00fc\u010c\u0112\u0120\u012c\u0132\u013e\u0140\u014a"+
		"\u0154\u0160\u0166\u018c\u0194\u01ae\u01b4\u01be\u01c8\u01cc\u01e6\u01f8"+
		"\u0204\u020a\u0218\u0222\u0228\u022e\u023e\u024e\u0252\u0274\u027a\u0280"+
		"\u028e\u02a0\u02b2\u02b6\u02c4\u02d0\u02d4\u02e4\u0304\u031e\u032a\u0334"+
		"\u034c\u0360\u0378\u038c\u0396\u039c\u03a2\u03a8\u03ac\u03c0\u03e0\u03e6"+
		"\u03ea\u03fa\u0406\u040c\u043a\u043c\u0448\u0454\u0474\u0476\u047a\u047e"+
		"\u0496\u04a2\u04a4\u04aa\u04ae\u04b2\u04b6\u026f\2\4\6\b\n\f\16\20\22"+
		"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp"+
		"rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc"+
		"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4"+
		"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec"+
		"\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304"+
		"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c"+
		"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334"+
		"\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c"+
		"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364"+
		"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c"+
		"\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394"+
		"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac"+
		"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4"+
		"\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc"+
		"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4"+
		"\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c"+
		"\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424"+
		"\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c"+
		"\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454"+
		"\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c"+
		"\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484"+
		"\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c"+
		"\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4"+
		"\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc"+
		"\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\2\33\4\2&&MM\3\2\u0236\u0237"+
		"\4\2\20\20\u0223\u0223\3\2\u0236\u0238\4\2\33\33$$\4\2\u0236\u0236\u0238"+
		"\u0238\3\2=i\4\2oo\u00d5\u00d5\4\2\u00c7\u00c7\u0104\u0104\4\2\u00f3\u00f3"+
		"\u01bd\u01bd\b\2ss\u00a3\u00a3\u00aa\u00aa\u00c5\u00c5\u010b\u010b\u01ac"+
		"\u01ac\4\2\u018c\u018c\u01a8\u01a8\4\2\u00f3\u00f3\u0107\u0107\6\2\u00f6"+
		"\u00f6\u0197\u0197\u01b4\u01b4\u01c7\u01c7\4\2\u010a\u010a\u01b3\u01b3"+
		"\6\2\u00c9\u00c9\u0114\u0114\u0195\u0195\u01d1\u01d1\3\2wx\3\2\u018c\u018d"+
		"\4\2\u00eb\u00eb\u0142\u0142\4\2\u00ab\u00ab\u00d2\u00d2\5\2sszz\u01a4"+
		"\u01a4\6\2\4\5\t\13\17\20\22\23\"\2\u0087\u0088\u008a\u008b\u0096\u0097"+
		"\u009e\u009e\u00c1\u00c2\u00e3\u00e3\u00e7\u00e7\u00ec\u00ec\u00fa\u00fa"+
		"\u0111\u0111\u0116\u0117\u0119\u0119\u0129\u0129\u013f\u013f\u0141\u0141"+
		"\u0144\u0144\u014b\u014b\u014d\u014d\u015a\u015a\u015e\u015e\u0168\u0168"+
		"\u016a\u016a\u0176\u0176\u018c\u018c\u019d\u019d\u01a2\u01a2\u01af\u01af"+
		"\u01bb\u01bc\u01c0\u01c0\u01c2\u01c2\u01d9\u01da\u01eb\u01f3\26\2\u0083"+
		"\u0083\u0089\u0089\u00a0\u00a0\u00a6\u00a6\u00b1\u00b1\u00b7\u00b7\u00f2"+
		"\u00f2\u00f4\u00f4\u0103\u0103\u0110\u0110\u011c\u011d\u011f\u011f\u012a"+
		"\u012a\u012c\u012c\u0140\u0140\u0148\u0148\u015b\u015d\u0189\u0189\u01a0"+
		"\u01a0\u01dd\u01dd:\2ssw}\u0080\u0080\u008c\u008c\u0092\u0093\u0099\u0099"+
		"\u009f\u009f\u00a1\u00a1\u00a9\u00a9\u00b0\u00b0\u00b4\u00b6\u00b8\u00ba"+
		"\u00c4\u00c4\u00c6\u00c6\u00cc\u00cc\u00d0\u00d1\u00d7\u00d7\u00db\u00db"+
		"\u00de\u00de\u00e8\u00e8\u00ea\u00ea\u00ee\u00ee\u00f0\u00f0\u00f3\u00f3"+
		"\u00f8\u00f8\u00fb\u00fb\u00fd\u00fd\u0107\u0107\u010e\u010e\u0118\u0118"+
		"\u011a\u011a\u0127\u0127\u012d\u012d\u0131\u0132\u0145\u0145\u014a\u014a"+
		"\u0151\u0151\u0153\u0154\u0158\u0159\u0166\u0166\u016e\u016e\u017b\u017b"+
		"\u0186\u0186\u0195\u0195\u019b\u019b\u01a4\u01a4\u01b0\u01b0\u01b3\u01b3"+
		"\u01ba\u01ba\u01bd\u01be\u01c3\u01c3\u01cb\u01cc\u01d2\u01d3\u01db\u01db"+
		"\u01e1\u01e2\u01e4\u01e5\u2600\2\u04dc\3\2\2\2\4\u04e0\3\2\2\2\6\u04f4"+
		"\3\2\2\2\b\u04f8\3\2\2\2\n\u04fa\3\2\2\2\f\u0509\3\2\2\2\16\u050b\3\2"+
		"\2\2\20\u050d\3\2\2\2\22\u051d\3\2\2\2\24\u0533\3\2\2\2\26\u0539\3\2\2"+
		"\2\30\u053b\3\2\2\2\32\u0542\3\2\2\2\34\u0544\3\2\2\2\36\u054f\3\2\2\2"+
		" \u0552\3\2\2\2\"\u0554\3\2\2\2$\u0558\3\2\2\2&\u055c\3\2\2\2(\u055e\3"+
		"\2\2\2*\u0565\3\2\2\2,\u056a\3\2\2\2.\u056e\3\2\2\2\60\u0572\3\2\2\2\62"+
		"\u0574\3\2\2\2\64\u0578\3\2\2\2\66\u057a\3\2\2\28\u059a\3\2\2\2:\u059c"+
		"\3\2\2\2<\u059f\3\2\2\2>\u05a3\3\2\2\2@\u05ac\3\2\2\2B\u05ae\3\2\2\2D"+
		"\u05b9\3\2\2\2F\u05bd\3\2\2\2H\u05bf\3\2\2\2J\u05c1\3\2\2\2L\u05cc\3\2"+
		"\2\2N\u05d5\3\2\2\2P\u05e3\3\2\2\2R\u05e5\3\2\2\2T\u05ed\3\2\2\2V\u05ef"+
		"\3\2\2\2X\u05f9\3\2\2\2Z\u0600\3\2\2\2\\\u0602\3\2\2\2^\u0606\3\2\2\2"+
		"`\u060b\3\2\2\2b\u0610\3\2\2\2d\u0613\3\2\2\2f\u0615\3\2\2\2h\u0621\3"+
		"\2\2\2j\u0623\3\2\2\2l\u0627\3\2\2\2n\u0629\3\2\2\2p\u062b\3\2\2\2r\u062d"+
		"\3\2\2\2t\u0633\3\2\2\2v\u0636\3\2\2\2x\u0638\3\2\2\2z\u063b\3\2\2\2|"+
		"\u0640\3\2\2\2~\u0645\3\2\2\2\u0080\u0647\3\2\2\2\u0082\u064b\3\2\2\2"+
		"\u0084\u064e\3\2\2\2\u0086\u0653\3\2\2\2\u0088\u0655\3\2\2\2\u008a\u065f"+
		"\3\2\2\2\u008c\u0664\3\2\2\2\u008e\u066f\3\2\2\2\u0090\u0671\3\2\2\2\u0092"+
		"\u0673\3\2\2\2\u0094\u0675\3\2\2\2\u0096\u0677\3\2\2\2\u0098\u067e\3\2"+
		"\2\2\u009a\u0682\3\2\2\2\u009c\u0687\3\2\2\2\u009e\u0689\3\2\2\2\u00a0"+
		"\u068b\3\2\2\2\u00a2\u068d\3\2\2\2\u00a4\u068f\3\2\2\2\u00a6\u0709\3\2"+
		"\2\2\u00a8\u070b\3\2\2\2\u00aa\u0713\3\2\2\2\u00ac\u071b\3\2\2\2\u00ae"+
		"\u0737\3\2\2\2\u00b0\u0746\3\2\2\2\u00b2\u0748\3\2\2\2\u00b4\u0750\3\2"+
		"\2\2\u00b6\u075c\3\2\2\2\u00b8\u075e\3\2\2\2\u00ba\u0764\3\2\2\2\u00bc"+
		"\u076c\3\2\2\2\u00be\u0779\3\2\2\2\u00c0\u0783\3\2\2\2\u00c2\u0785\3\2"+
		"\2\2\u00c4\u078d\3\2\2\2\u00c6\u0794\3\2\2\2\u00c8\u079e\3\2\2\2\u00ca"+
		"\u07ac\3\2\2\2\u00cc\u07b0\3\2\2\2\u00ce\u07b2\3\2\2\2\u00d0\u07c0\3\2"+
		"\2\2\u00d2\u07ca\3\2\2\2\u00d4\u07d4\3\2\2\2\u00d6\u0801\3\2\2\2\u00d8"+
		"\u0803\3\2\2\2\u00da\u080e\3\2\2\2\u00dc\u081b\3\2\2\2\u00de\u0824\3\2"+
		"\2\2\u00e0\u082a\3\2\2\2\u00e2\u083c\3\2\2\2\u00e4\u0841\3\2\2\2\u00e6"+
		"\u0845\3\2\2\2\u00e8\u0855\3\2\2\2\u00ea\u085a\3\2\2\2\u00ec\u085f\3\2"+
		"\2\2\u00ee\u086f\3\2\2\2\u00f0\u0871\3\2\2\2\u00f2\u0878\3\2\2\2\u00f4"+
		"\u087a\3\2\2\2\u00f6\u087c\3\2\2\2\u00f8\u0886\3\2\2\2\u00fa\u08b8\3\2"+
		"\2\2\u00fc\u08ba\3\2\2\2\u00fe\u096a\3\2\2\2\u0100\u0971\3\2\2\2\u0102"+
		"\u0976\3\2\2\2\u0104\u097b\3\2\2\2\u0106\u0980\3\2\2\2\u0108\u0982\3\2"+
		"\2\2\u010a\u0989\3\2\2\2\u010c\u098b\3\2\2\2\u010e\u09a5\3\2\2\2\u0110"+
		"\u09a7\3\2\2\2\u0112\u09ac\3\2\2\2\u0114\u09d1\3\2\2\2\u0116\u09d7\3\2"+
		"\2\2\u0118\u09ef\3\2\2\2\u011a\u09f1\3\2\2\2\u011c\u09f6\3\2\2\2\u011e"+
		"\u09fd\3\2\2\2\u0120\u09ff\3\2\2\2\u0122\u0a27\3\2\2\2\u0124\u0a2b\3\2"+
		"\2\2\u0126\u0a30\3\2\2\2\u0128\u0a37\3\2\2\2\u012a\u0a3b\3\2\2\2\u012c"+
		"\u0a3d\3\2\2\2\u012e\u0a48\3\2\2\2\u0130\u0a53\3\2\2\2\u0132\u0a55\3\2"+
		"\2\2\u0134\u0a60\3\2\2\2\u0136\u0a96\3\2\2\2\u0138\u0aa4\3\2\2\2\u013a"+
		"\u0aa8\3\2\2\2\u013c\u0aaf\3\2\2\2\u013e\u0ab1\3\2\2\2\u0140\u0abc\3\2"+
		"\2\2\u0142\u0aca\3\2\2\2\u0144\u0ace\3\2\2\2\u0146\u0ad0\3\2\2\2\u0148"+
		"\u0ad5\3\2\2\2\u014a\u0ada\3\2\2\2\u014c\u0aea\3\2\2\2\u014e\u0b06\3\2"+
		"\2\2\u0150\u0b0f\3\2\2\2\u0152\u0b11\3\2\2\2\u0154\u0b15\3\2\2\2\u0156"+
		"\u0b21\3\2\2\2\u0158\u0b28\3\2\2\2\u015a\u0b60\3\2\2\2\u015c\u0b65\3\2"+
		"\2\2\u015e\u0b6c\3\2\2\2\u0160\u0b6e\3\2\2\2\u0162\u0b79\3\2\2\2\u0164"+
		"\u0b82\3\2\2\2\u0166\u0b84\3\2\2\2\u0168\u0b9a\3\2\2\2\u016a\u0ba2\3\2"+
		"\2\2\u016c\u0bad\3\2\2\2\u016e\u0baf\3\2\2\2\u0170\u0bb3\3\2\2\2\u0172"+
		"\u0bbf\3\2\2\2\u0174\u0bc7\3\2\2\2\u0176\u0bd0\3\2\2\2\u0178\u0bde\3\2"+
		"\2\2\u017a\u0be3\3\2\2\2\u017c\u0bea\3\2\2\2\u017e\u0bec\3\2\2\2\u0180"+
		"\u0bf0\3\2\2\2\u0182\u0bf8\3\2\2\2\u0184\u0c04\3\2\2\2\u0186\u0c06\3\2"+
		"\2\2\u0188\u0c18\3\2\2\2\u018a\u0c1c\3\2\2\2\u018c\u0c1e\3\2\2\2\u018e"+
		"\u0c47\3\2\2\2\u0190\u0c4b\3\2\2\2\u0192\u0c51\3\2\2\2\u0194\u0c53\3\2"+
		"\2\2\u0196\u0c70\3\2\2\2\u0198\u0c74\3\2\2\2\u019a\u0c7a\3\2\2\2\u019c"+
		"\u0c7f\3\2\2\2\u019e\u0c85\3\2\2\2\u01a0\u0c89\3\2\2\2\u01a2\u0c99\3\2"+
		"\2\2\u01a4\u0c9d\3\2\2\2\u01a6\u0c9f\3\2\2\2\u01a8\u0ca9\3\2\2\2\u01aa"+
		"\u0cb3\3\2\2\2\u01ac\u0cc8\3\2\2\2\u01ae\u0cca\3\2\2\2\u01b0\u0cd8\3\2"+
		"\2\2\u01b2\u0cda\3\2\2\2\u01b4\u0ce0\3\2\2\2\u01b6\u0ce8\3\2\2\2\u01b8"+
		"\u0d9d\3\2\2\2\u01ba\u0d9f\3\2\2\2\u01bc\u0daf\3\2\2\2\u01be\u0db1\3\2"+
		"\2\2\u01c0\u0dbd\3\2\2\2\u01c2\u0dcf\3\2\2\2\u01c4\u0de0\3\2\2\2\u01c6"+
		"\u0de8\3\2\2\2\u01c8\u0dea\3\2\2\2\u01ca\u0df5\3\2\2\2\u01cc\u0dfa\3\2"+
		"\2\2\u01ce\u0e0c\3\2\2\2\u01d0\u0e0e\3\2\2\2\u01d2\u0e11\3\2\2\2\u01d4"+
		"\u0e13\3\2\2\2\u01d6\u0e15\3\2\2\2\u01d8\u0e23\3\2\2\2\u01da\u0e29\3\2"+
		"\2\2\u01dc\u0e2d\3\2\2\2\u01de\u0e3b\3\2\2\2\u01e0\u0e4d\3\2\2\2\u01e2"+
		"\u0e64\3\2\2\2\u01e4\u0e6c\3\2\2\2\u01e6\u0e6e\3\2\2\2\u01e8\u0e79\3\2"+
		"\2\2\u01ea\u0e89\3\2\2\2\u01ec\u0e8b\3\2\2\2\u01ee\u0e97\3\2\2\2\u01f0"+
		"\u0eab\3\2\2\2\u01f2\u0ead\3\2\2\2\u01f4\u0edb\3\2\2\2\u01f6\u0ee1\3\2"+
		"\2\2\u01f8\u0ee3\3\2\2\2\u01fa\u0ef5\3\2\2\2\u01fc\u0efc\3\2\2\2\u01fe"+
		"\u0f00\3\2\2\2\u0200\u0f02\3\2\2\2\u0202\u0f0a\3\2\2\2\u0204\u0f0f\3\2"+
		"\2\2\u0206\u0f1d\3\2\2\2\u0208\u0f22\3\2\2\2\u020a\u0f24\3\2\2\2\u020c"+
		"\u0f37\3\2\2\2\u020e\u0f49\3\2\2\2\u0210\u0f4b\3\2\2\2\u0212\u0f54\3\2"+
		"\2\2\u0214\u0fb0\3\2\2\2\u0216\u0fb2\3\2\2\2\u0218\u0fb6\3\2\2\2\u021a"+
		"\u0fc6\3\2\2\2\u021c\u0fcd\3\2\2\2\u021e\u0fd6\3\2\2\2\u0220\u0fd8\3\2"+
		"\2\2\u0222\u0fdc\3\2\2\2\u0224\u0fe7\3\2\2\2\u0226\u0fed\3\2\2\2\u0228"+
		"\u0fef\3\2\2\2\u022a\u1013\3\2\2\2\u022c\u1015\3\2\2\2\u022e\u1023\3\2"+
		"\2\2\u0230\u104a\3\2\2\2\u0232\u104e\3\2\2\2\u0234\u1053\3\2\2\2\u0236"+
		"\u105c\3\2\2\2\u0238\u1060\3\2\2\2\u023a\u1062\3\2\2\2\u023c\u107b\3\2"+
		"\2\2\u023e\u107d\3\2\2\2\u0240\u1094\3\2\2\2\u0242\u10a8\3\2\2\2\u0244"+
		"\u10bc\3\2\2\2\u0246\u10be\3\2\2\2\u0248\u10c4\3\2\2\2\u024a\u10e5\3\2"+
		"\2\2\u024c\u10ff\3\2\2\2\u024e\u1101\3\2\2\2\u0250\u1110\3\2\2\2\u0252"+
		"\u1112\3\2\2\2\u0254\u111e\3\2\2\2\u0256\u1129\3\2\2\2\u0258\u11bf\3\2"+
		"\2\2\u025a\u11d5\3\2\2\2\u025c\u11d9\3\2\2\2\u025e\u120c\3\2\2\2\u0260"+
		"\u1211\3\2\2\2\u0262\u121f\3\2\2\2\u0264\u1223\3\2\2\2\u0266\u1229\3\2"+
		"\2\2\u0268\u126d\3\2\2\2\u026a\u126f\3\2\2\2\u026c\u1273\3\2\2\2\u026e"+
		"\u1275\3\2\2\2\u0270\u1290\3\2\2\2\u0272\u12a1\3\2\2\2\u0274\u12a3\3\2"+
		"\2\2\u0276\u12b7\3\2\2\2\u0278\u12e5\3\2\2\2\u027a\u12e7\3\2\2\2\u027c"+
		"\u12f5\3\2\2\2\u027e\u12fb\3\2\2\2\u0280\u12fd\3\2\2\2\u0282\u1308\3\2"+
		"\2\2\u0284\u130b\3\2\2\2\u0286\u1323\3\2\2\2\u0288\u1329\3\2\2\2\u028a"+
		"\u132f\3\2\2\2\u028c\u1331\3\2\2\2\u028e\u1337\3\2\2\2\u0290\u1348\3\2"+
		"\2\2\u0292\u1365\3\2\2\2\u0294\u1367\3\2\2\2\u0296\u1369\3\2\2\2\u0298"+
		"\u137a\3\2\2\2\u029a\u137e\3\2\2\2\u029c\u1382\3\2\2\2\u029e\u1387\3\2"+
		"\2\2\u02a0\u1389\3\2\2\2\u02a2\u13a8\3\2\2\2\u02a4\u13ad\3\2\2\2\u02a6"+
		"\u13b3\3\2\2\2\u02a8\u13b8\3\2\2\2\u02aa\u13bd\3\2\2\2\u02ac\u13e4\3\2"+
		"\2\2\u02ae\u13e9\3\2\2\2\u02b0\u13f1\3\2\2\2\u02b2\u13f3\3\2\2\2\u02b4"+
		"\u1404\3\2\2\2\u02b6\u1406\3\2\2\2\u02b8\u1420\3\2\2\2\u02ba\u1428\3\2"+
		"\2\2\u02bc\u142a\3\2\2\2\u02be\u142c\3\2\2\2\u02c0\u143a\3\2\2\2\u02c2"+
		"\u1445\3\2\2\2\u02c4\u1447\3\2\2\2\u02c6\u1470\3\2\2\2\u02c8\u1478\3\2"+
		"\2\2\u02ca\u147f\3\2\2\2\u02cc\u1484\3\2\2\2\u02ce\u1486\3\2\2\2\u02d0"+
		"\u1489\3\2\2\2\u02d2\u1494\3\2\2\2\u02d4\u149a\3\2\2\2\u02d6\u14a6\3\2"+
		"\2\2\u02d8\u14b6\3\2\2\2\u02da\u14c6\3\2\2\2\u02dc\u14d6\3\2\2\2\u02de"+
		"\u14ee\3\2\2\2\u02e0\u14f5\3\2\2\2\u02e2\u14f7\3\2\2\2\u02e4\u14fa\3\2"+
		"\2\2\u02e6\u1507\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u02e8\u152b\3\2\2\2\u02ea\u1532\3\2\2\2\u02ec\u1534\3\2\2\2\u02ee\u1541"+
		"\3\2\2\2\u02f0\u1552\3\2\2\2\u02f2\u1554\3\2\2\2\u02f4\u1558\3\2\2\2\u02f6"+
		"\u16ac\3\2\2\2\u02f8\u16b0\3\2\2\2\u02fa\u16b5\3\2\2\2\u02fc\u176b\3\2"+
		"\2\2\u02fe\u17fb\3\2\2\2\u0300\u17fd\3\2\2\2\u0302\u1811\3\2\2\2\u0304"+
		"\u1813\3\2\2\2\u0306\u1823\3\2\2\2\u0308\u1827\3\2\2\2\u030a\u1829\3\2"+
		"\2\2\u030c\u182e\3\2\2\2\u030e\u1840\3\2\2\2\u0310\u1842\3\2\2\2\u0312"+
		"\u1849\3\2\2\2\u0314\u184b\3\2\2\2\u0316\u1852\3\2\2\2\u0318\u187e\3\2"+
		"\2\2\u031a\u1883\3\2\2\2\u031c\u188f\3\2\2\2\u031e\u1891\3\2\2\2\u0320"+
		"\u18a0\3\2\2\2\u0322\u18b8\3\2\2\2\u0324\u18c6\3\2\2\2\u0326\u18c8\3\2"+
		"\2\2\u0328\u18cb\3\2\2\2\u032a\u18d3\3\2\2\2\u032c\u191c\3\2\2\2\u032e"+
		"\u1920\3\2\2\2\u0330\u1931\3\2\2\2\u0332\u1933\3\2\2\2\u0334\u1938\3\2"+
		"\2\2\u0336\u1940\3\2\2\2\u0338\u194d\3\2\2\2\u033a\u194f\3\2\2\2\u033c"+
		"\u1988\3\2\2\2\u033e\u198c\3\2\2\2\u0340\u198e\3\2\2\2\u0342\u19dd\3\2"+
		"\2\2\u0344\u19df\3\2\2\2\u0346\u19f7\3\2\2\2\u0348\u19fc\3\2\2\2\u034a"+
		"\u1a1b\3\2\2\2\u034c\u1a1d\3\2\2\2\u034e\u1a2c\3\2\2\2\u0350\u1a36\3\2"+
		"\2\2\u0352\u1a38\3\2\2\2\u0354\u1a3c\3\2\2\2\u0356\u1a40\3\2\2\2\u0358"+
		"\u1a44\3\2\2\2\u035a\u1a4b\3\2\2\2\u035c\u1a5d\3\2\2\2\u035e\u1a66\3\2"+
		"\2\2\u0360\u1a68\3\2\2\2\u0362\u1a73\3\2\2\2\u0364\u1a79\3\2\2\2\u0366"+
		"\u1a7e\3\2\2\2\u0368\u1a80\3\2\2\2\u036a\u1a8b\3\2\2\2\u036c\u1a91\3\2"+
		"\2\2\u036e\u1aa1\3\2\2\2\u0370\u1aa8\3\2\2\2\u0372\u1ab4\3\2\2\2\u0374"+
		"\u1ab6\3\2\2\2\u0376\u1ac5\3\2\2\2\u0378\u1ac7\3\2\2\2\u037a\u1ad2\3\2"+
		"\2\2\u037c\u1ad8\3\2\2\2\u037e\u1ada\3\2\2\2\u0380\u1ae5\3\2\2\2\u0382"+
		"\u1ae7\3\2\2\2\u0384\u1af2\3\2\2\2\u0386\u1b04\3\2\2\2\u0388\u1b08\3\2"+
		"\2\2\u038a\u1b0a\3\2\2\2\u038c\u1b13\3\2\2\2\u038e\u1b20\3\2\2\2\u0390"+
		"\u1b22\3\2\2\2\u0392\u1b26\3\2\2\2\u0394\u1b2c\3\2\2\2\u0396\u1b2f\3\2"+
		"\2\2\u0398\u1b3a\3\2\2\2\u039a\u1b42\3\2\2\2\u039c\u1b44\3\2\2\2\u039e"+
		"\u1b58\3\2\2\2\u03a0\u1b5c\3\2\2\2\u03a2\u1b67\3\2\2\2\u03a4\u1ba4\3\2"+
		"\2\2\u03a6\u1ba8\3\2\2\2\u03a8\u1bb8\3\2\2\2\u03aa\u1bd9\3\2\2\2\u03ac"+
		"\u1bdb\3\2\2\2\u03ae\u1be6\3\2\2\2\u03b0\u1bef\3\2\2\2\u03b2\u1bf4\3\2"+
		"\2\2\u03b4\u1c19\3\2\2\2\u03b6\u1c1d\3\2\2\2\u03b8\u1c22\3\2\2\2\u03ba"+
		"\u1c2d\3\2\2\2\u03bc\u1c31\3\2\2\2\u03be\u1c33\3\2\2\2\u03c0\u1c37\3\2"+
		"\2\2\u03c2\u1c4b\3\2\2\2\u03c4\u1c55\3\2\2\2\u03c6\u1c59\3\2\2\2\u03c8"+
		"\u1c68\3\2\2\2\u03ca\u1c70\3\2\2\2\u03cc\u1c74\3\2\2\2\u03ce\u1c76\3\2"+
		"\2\2\u03d0\u1c7e\3\2\2\2\u03d2\u1c80\3\2\2\2\u03d4\u1c82\3\2\2\2\u03d6"+
		"\u1c84\3\2\2\2\u03d8\u1c8a\3\2\2\2\u03da\u1c8f\3\2\2\2\u03dc\u1c95\3\2"+
		"\2\2\u03de\u1c99\3\2\2\2\u03e0\u1c9b\3\2\2\2\u03e2\u1caf\3\2\2\2\u03e4"+
		"\u1cb4\3\2\2\2\u03e6\u1cb6\3\2\2\2\u03e8\u1cc5\3\2\2\2\u03ea\u1cc7\3\2"+
		"\2\2\u03ec\u1cd4\3\2\2\2\u03ee\u1cf5\3\2\2\2\u03f0\u1d18\3\2\2\2\u03f2"+
		"\u1d28\3\2\2\2\u03f4\u1d37\3\2\2\2\u03f6\u1d40\3\2\2\2\u03f8\u1d4d\3\2"+
		"\2\2\u03fa\u1d4f\3\2\2\2\u03fc\u1d62\3\2\2\2\u03fe\u1d64\3\2\2\2\u0400"+
		"\u1d69\3\2\2\2\u0402\u1d72\3\2\2\2\u0404\u1d76\3\2\2\2\u0406\u1d78\3\2"+
		"\2\2\u0408\u1d83\3\2\2\2\u040a\u1da2\3\2\2\2\u040c\u1da4\3\2\2\2\u040e"+
		"\u1dc0\3\2\2\2\u0410\u1dc6\3\2\2\2\u0412\u1dcf\3\2\2\2\u0414\u1dd6\3\2"+
		"\2\2\u0416\u1de8\3\2\2\2\u0418\u1def\3\2\2\2\u041a\u1df3\3\2\2\2\u041c"+
		"\u1df7\3\2\2\2\u041e\u1df9\3\2\2\2\u0420\u1dff\3\2\2\2\u0422\u1e04\3\2"+
		"\2\2\u0424\u1e08\3\2\2\2\u0426\u1e0a\3\2\2\2\u0428\u1e10\3\2\2\2\u042a"+
		"\u1e20\3\2\2\2\u042c\u1e24\3\2\2\2\u042e\u1e2a\3\2\2\2\u0430\u1e3c\3\2"+
		"\2\2\u0432\u1e3e\3\2\2\2\u0434\u1e46\3\2\2\2\u0436\u1e64\3\2\2\2\u0438"+
		"\u1e6c\3\2\2\2\u043a\u1e7f\3\2\2\2\u043c\u1f73\3\2\2\2\u043e\u1fd2\3\2"+
		"\2\2\u0440\u20d5\3\2\2\2\u0442\u20dc\3\2\2\2\u0444\u20e9\3\2\2\2\u0446"+
		"\u20eb\3\2\2\2\u0448\u20f0\3\2\2\2\u044a\u2100\3\2\2\2\u044c\u2102\3\2"+
		"\2\2\u044e\u2109\3\2\2\2\u0450\u211d\3\2\2\2\u0452\u2122\3\2\2\2\u0454"+
		"\u2124\3\2\2\2\u0456\u212f\3\2\2\2\u0458\u2138\3\2\2\2\u045a\u213a\3\2"+
		"\2\2\u045c\u2143\3\2\2\2\u045e\u2149\3\2\2\2\u0460\u2150\3\2\2\2\u0462"+
		"\u2158\3\2\2\2\u0464\u2166\3\2\2\2\u0466\u2176\3\2\2\2\u0468\u2178\3\2"+
		"\2\2\u046a\u217c\3\2\2\2\u046c\u217e\3\2\2\2\u046e\u2186\3\2\2\2\u0470"+
		"\u218e\3\2\2\2\u0472\u219c\3\2\2\2\u0474\u219e\3\2\2\2\u0476\u21a9\3\2"+
		"\2\2\u0478\u21b9\3\2\2\2\u047a\u21bb\3\2\2\2\u047c\u21d0\3\2\2\2\u047e"+
		"\u21d2\3\2\2\2\u0480\u21e2\3\2\2\2\u0482\u21ec\3\2\2\2\u0484\u21f7\3\2"+
		"\2\2\u0486\u21f9\3\2\2\2\u0488\u2201\3\2\2\2\u048a\u2213\3\2\2\2\u048c"+
		"\u2215\3\2\2\2\u048e\u2218\3\2\2\2\u0490\u2222\3\2\2\2\u0492\u2229\3\2"+
		"\2\2\u0494\u222b\3\2\2\2\u0496\u2231\3\2\2\2\u0498\u223b\3\2\2\2\u049a"+
		"\u2243\3\2\2\2\u049c\u2247\3\2\2\2\u049e\u224d\3\2\2\2\u04a0\u225d\3\2"+
		"\2\2\u04a2\u225f\3\2\2\2\u04a4\u2269\3\2\2\2\u04a6\u2273\3\2\2\2\u04a8"+
		"\u2277\3\2\2\2\u04aa\u2279\3\2\2\2\u04ac\u2284\3\2\2\2\u04ae\u2288\3\2"+
		"\2\2\u04b0\u229c\3\2\2\2\u04b2\u229e\3\2\2\2\u04b4\u22ad\3\2\2\2\u04b6"+
		"\u22af\3\2\2\2\u04b8\u22ba\3\2\2\2\u04ba\u22bc\3\2\2\2\u04bc\u22be\3\2"+
		"\2\2\u04be\u22c0\3\2\2\2\u04c0\u22c2\3\2\2\2\u04c2\u22c4\3\2\2\2\u04c4"+
		"\u22ca\3\2\2\2\u04c6\u22eb\3\2\2\2\u04c8\u22ed\3\2\2\2\u04ca\u22ef\3\2"+
		"\2\2\u04cc\u22f1\3\2\2\2\u04ce\u22f8\3\2\2\2\u04d0\u22fd\3\2\2\2\u04d2"+
		"\u2302\3\2\2\2\u04d4\u2309\3\2\2\2\u04d6\u230b\3\2\2\2\u04d8\u230d\3\2"+
		"\2\2\u04da\u230f\3\2\2\2\u04dc\u04dd\5\4\3\2\u04dd\u04de\5\n\6\2\u04de"+
		"\u04df\5\b\5\2\u04df\3\3\2\2\2\u04e0\u04e5\b\3\1\2\u04e1\u04e2\f\3\2\2"+
		"\u04e2\u04e4\5\6\4\2\u04e3\u04e1\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e3"+
		"\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\5\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e8"+
		"\u04e9\7\24\2\2\u04e9\u04ea\7U\2\2\u04ea\u04f5\7F\2\2\u04eb\u04ec\7\24"+
		"\2\2\u04ec\u04ed\7h\2\2\u04ed\u04f5\7H\2\2\u04ee\u04ef\7\24\2\2\u04ef"+
		"\u04f0\7h\2\2\u04f0\u04f5\7g\2\2\u04f1\u04f2\7\24\2\2\u04f2\u04f3\7h\2"+
		"\2\u04f3\u04f5\7f\2\2\u04f4\u04e8\3\2\2\2\u04f4\u04eb\3\2\2\2\u04f4\u04ee"+
		"\3\2\2\2\u04f4\u04f1\3\2\2\2\u04f5\7\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7"+
		"\u04f9\7\21\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f7\3\2\2\2\u04f9\t\3\2\2"+
		"\2\u04fa\u04fb\5\f\7\2\u04fb\u04fc\7\26\2\2\u04fc\u04fd\5\64\33\2\u04fd"+
		"\u04fe\5\u0086D\2\u04fe\u04ff\7!\2\2\u04ff\u0500\5\u009aN\2\u0500\13\3"+
		"\2\2\2\u0501\u050a\5\u0098M\2\u0502\u0503\5\u0098M\2\u0503\u0504\5\16"+
		"\b\2\u0504\u050a\3\2\2\2\u0505\u0506\5\u0098M\2\u0506\u0507\5\16\b\2\u0507"+
		"\u0508\5\20\t\2\u0508\u050a\3\2\2\2\u0509\u0501\3\2\2\2\u0509\u0502\3"+
		"\2\2\2\u0509\u0505\3\2\2\2\u050a\r\3\2\2\2\u050b\u050c\7\34\2\2\u050c"+
		"\17\3\2\2\2\u050d\u050e\b\t\1\2\u050e\u050f\5\22\n\2\u050f\u0514\3\2\2"+
		"\2\u0510\u0511\f\4\2\2\u0511\u0513\5\22\n\2\u0512\u0510\3\2\2\2\u0513"+
		"\u0516\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\21\3\2\2"+
		"\2\u0516\u0514\3\2\2\2\u0517\u051e\5\24\13\2\u0518\u051e\7\34\2\2\u0519"+
		"\u051a\7\u022d\2\2\u051a\u051b\5\u009eP\2\u051b\u051c\7\u022e\2\2\u051c"+
		"\u051e\3\2\2\2\u051d\u0517\3\2\2\2\u051d\u0518\3\2\2\2\u051d\u0519\3\2"+
		"\2\2\u051e\23\3\2\2\2\u051f\u0520\5$\23\2\u0520\u0521\5&\24\2\u0521\u0522"+
		"\5(\25\2\u0522\u0523\5*\26\2\u0523\u0524\5,\27\2\u0524\u0525\5.\30\2\u0525"+
		"\u0534\3\2\2\2\u0526\u0527\5$\23\2\u0527\u0528\7>\2\2\u0528\u0529\7&\2"+
		"\2\u0529\u052a\5\"\22\2\u052a\u052b\7\21\2\2\u052b\u0534\3\2\2\2\u052c"+
		"\u052d\5$\23\2\u052d\u052e\5\26\f\2\u052e\u052f\7C\2\2\u052f\u0530\5\32"+
		"\16\2\u0530\u0531\5 \21\2\u0531\u0532\5\30\r\2\u0532\u0534\3\2\2\2\u0533"+
		"\u051f\3\2\2\2\u0533\u0526\3\2\2\2\u0533\u052c\3\2\2\2\u0534\25\3\2\2"+
		"\2\u0535\u053a\3\2\2\2\u0536\u0537\7S\2\2\u0537\u053a\7a\2\2\u0538\u053a"+
		"\7a\2\2\u0539\u0535\3\2\2\2\u0539\u0536\3\2\2\2\u0539\u0538\3\2\2\2\u053a"+
		"\27\3\2\2\2\u053b\u053c\3\2\2\2\u053c\31\3\2\2\2\u053d\u0543\3\2\2\2\u053e"+
		"\u053f\7\r\2\2\u053f\u0540\5\34\17\2\u0540\u0541\7\7\2\2\u0541\u0543\3"+
		"\2\2\2\u0542\u053d\3\2\2\2\u0542\u053e\3\2\2\2\u0543\33\3\2\2\2\u0544"+
		"\u0545\b\17\1\2\u0545\u0546\5\36\20\2\u0546\u054c\3\2\2\2\u0547\u0548"+
		"\f\3\2\2\u0548\u0549\7\b\2\2\u0549\u054b\5\36\20\2\u054a\u0547\3\2\2\2"+
		"\u054b\u054e\3\2\2\2\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d\35"+
		"\3\2\2\2\u054e\u054c\3\2\2\2\u054f\u0550\5$\23\2\u0550\u0551\5(\25\2\u0551"+
		"\37\3\2\2\2\u0552\u0553\t\2\2\2\u0553!\3\2\2\2\u0554\u0555\t\3\2\2\u0555"+
		"#\3\2\2\2\u0556\u0559\7\u0236\2\2\u0557\u0559\5\u00a0Q\2\u0558\u0556\3"+
		"\2\2\2\u0558\u0557\3\2\2\2\u0559%\3\2\2\2\u055a\u055d\3\2\2\2\u055b\u055d"+
		"\7A\2\2\u055c\u055a\3\2\2\2\u055c\u055b\3\2\2\2\u055d\'\3\2\2\2\u055e"+
		"\u055f\3\2\2\2\u055f)\3\2\2\2\u0560\u0566\3\2\2\2\u0561\u0562\7\32\2\2"+
		"\u0562\u0566\7\u0236\2\2\u0563\u0564\7\32\2\2\u0564\u0566\7\u0237\2\2"+
		"\u0565\u0560\3\2\2\2\u0565\u0561\3\2\2\2\u0565\u0563\3\2\2\2\u0566+\3"+
		"\2\2\2\u0567\u056b\3\2\2\2\u0568\u0569\7\60\2\2\u0569\u056b\7\61\2\2\u056a"+
		"\u0567\3\2\2\2\u056a\u0568\3\2\2\2\u056b-\3\2\2\2\u056c\u056f\7\21\2\2"+
		"\u056d\u056f\5\60\31\2\u056e\u056c\3\2\2\2\u056e\u056d\3\2\2\2\u056f/"+
		"\3\2\2\2\u0570\u0573\5\62\32\2\u0571\u0573\7\35\2\2\u0572\u0570\3\2\2"+
		"\2\u0572\u0571\3\2\2\2\u0573\61\3\2\2\2\u0574\u0575\t\4\2\2\u0575\63\3"+
		"\2\2\2\u0576\u0579\3\2\2\2\u0577\u0579\5\66\34\2\u0578\u0576\3\2\2\2\u0578"+
		"\u0577\3\2\2\2\u0579\65\3\2\2\2\u057a\u057b\b\34\1\2\u057b\u057c\58\35"+
		"\2\u057c\u0581\3\2\2\2\u057d\u057e\f\4\2\2\u057e\u0580\58\35\2\u057f\u057d"+
		"\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2\u0582"+
		"\67\3\2\2\2\u0583\u0581\3\2\2\2\u0584\u0585\5\n\6\2\u0585\u0586\7\21\2"+
		"\2\u0586\u059b\3\2\2\2\u0587\u059b\5<\37\2\u0588\u059b\5L\'\2\u0589\u059b"+
		"\5R*\2\u058a\u059b\5\\/\2\u058b\u059b\5^\60\2\u058c\u059b\5`\61\2\u058d"+
		"\u059b\5f\64\2\u058e\u059b\5j\66\2\u058f\u059b\5n8\2\u0590\u059b\5p9\2"+
		"\u0591\u059b\5t;\2\u0592\u059b\5v<\2\u0593\u059b\5:\36\2\u0594\u059b\5"+
		"> \2\u0595\u059b\5x=\2\u0596\u059b\5z>\2\u0597\u059b\5|?\2\u0598\u059b"+
		"\5\u0080A\2\u0599\u059b\5\u0082B\2\u059a\u0584\3\2\2\2\u059a\u0587\3\2"+
		"\2\2\u059a\u0588\3\2\2\2\u059a\u0589\3\2\2\2\u059a\u058a\3\2\2\2\u059a"+
		"\u058b\3\2\2\2\u059a\u058c\3\2\2\2\u059a\u058d\3\2\2\2\u059a\u058e\3\2"+
		"\2\2\u059a\u058f\3\2\2\2\u059a\u0590\3\2\2\2\u059a\u0591\3\2\2\2\u059a"+
		"\u0592\3\2\2\2\u059a\u0593\3\2\2\2\u059a\u0594\3\2\2\2\u059a\u0595\3\2"+
		"\2\2\u059a\u0596\3\2\2\2\u059a\u0597\3\2\2\2\u059a\u0598\3\2\2\2\u059a"+
		"\u0599\3\2\2\2\u059b9\3\2\2\2\u059c\u059d\7\64\2\2\u059d\u059e\5\u0090"+
		"I\2\u059e;\3\2\2\2\u059f\u05a0\5J&\2\u05a0\u05a1\5\62\32\2\u05a1\u05a2"+
		"\5\u0090I\2\u05a2=\3\2\2\2\u05a3\u05a4\7)\2\2\u05a4\u05a5\5@!\2\u05a5"+
		"\u05a6\7\36\2\2\u05a6\u05a7\5B\"\2\u05a7\u05a8\7\21\2\2\u05a8?\3\2\2\2"+
		"\u05a9\u05ad\3\2\2\2\u05aa\u05ad\7B\2\2\u05ab\u05ad\7d\2\2\u05ac\u05a9"+
		"\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3\2\2\2\u05adA\3\2\2\2\u05ae"+
		"\u05af\b\"\1\2\u05af\u05b0\5D#\2\u05b0\u05b6\3\2\2\2\u05b1\u05b2\f\4\2"+
		"\2\u05b2\u05b3\7\b\2\2\u05b3\u05b5\5D#\2\u05b4\u05b1\3\2\2\2\u05b5\u05b8"+
		"\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7C\3\2\2\2\u05b8"+
		"\u05b6\3\2\2\2\u05b9\u05ba\5H%\2\u05ba\u05bb\5\62\32\2\u05bb\u05bc\5F"+
		"$\2\u05bcE\3\2\2\2\u05bd\u05be\3\2\2\2\u05beG\3\2\2\2\u05bf\u05c0\t\5"+
		"\2\2\u05c0I\3\2\2\2\u05c1\u05c2\b&\1\2\u05c2\u05c3\7\u0238\2\2\u05c3\u05c9"+
		"\3\2\2\2\u05c4\u05c5\f\3\2\2\u05c5\u05c6\7\f\2\2\u05c6\u05c8\5\u0092J"+
		"\2\u05c7\u05c4\3\2\2\2\u05c8\u05cb\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05ca"+
		"\3\2\2\2\u05caK\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc\u05cd\7*\2\2\u05cd\u05ce"+
		"\5\u0094K\2\u05ce\u05cf\5\64\33\2\u05cf\u05d0\5N(\2\u05d0\u05d1\5P)\2"+
		"\u05d1\u05d2\7!\2\2\u05d2\u05d3\7*\2\2\u05d3\u05d4\7\21\2\2\u05d4M\3\2"+
		"\2\2\u05d5\u05dd\b(\1\2\u05d6\u05d7\f\3\2\2\u05d7\u05d8\7 \2\2\u05d8\u05d9"+
		"\5\u0094K\2\u05d9\u05da\5\64\33\2\u05da\u05dc\3\2\2\2\u05db\u05d6\3\2"+
		"\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05de"+
		"O\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e4\3\2\2\2\u05e1\u05e2\7\37\2\2"+
		"\u05e2\u05e4\5\64\33\2\u05e3\u05e0\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4Q"+
		"\3\2\2\2\u05e5\u05e6\7\30\2\2\u05e6\u05e7\5T+\2\u05e7\u05e8\5V,\2\u05e8"+
		"\u05e9\5Z.\2\u05e9\u05ea\7!\2\2\u05ea\u05eb\7\30\2\2\u05eb\u05ec\7\21"+
		"\2\2\u05ecS\3\2\2\2\u05ed\u05ee\3\2\2\2\u05eeU\3\2\2\2\u05ef\u05f0\b,"+
		"\1\2\u05f0\u05f1\5X-\2\u05f1\u05f6\3\2\2\2\u05f2\u05f3\f\4\2\2\u05f3\u05f5"+
		"\5X-\2\u05f4\u05f2\3\2\2\2\u05f5\u05f8\3\2\2\2\u05f6\u05f4\3\2\2\2\u05f6"+
		"\u05f7\3\2\2\2\u05f7W\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f9\u05fa\7;\2\2\u05fa"+
		"\u05fb\5\u0094K\2\u05fb\u05fc\5\64\33\2\u05fcY\3\2\2\2\u05fd\u0601\3\2"+
		"\2\2\u05fe\u05ff\7\37\2\2\u05ff\u0601\5\64\33\2\u0600\u05fd\3\2\2\2\u0600"+
		"\u05fe\3\2\2\2\u0601[\3\2\2\2\u0602\u0603\5\u0098M\2\u0603\u0604\7.\2"+
		"\2\u0604\u0605\5r:\2\u0605]\3\2\2\2\u0606\u0607\5\u0098M\2\u0607\u0608"+
		"\7<\2\2\u0608\u0609\5\u0096L\2\u0609\u060a\5r:\2\u060a_\3\2\2\2\u060b"+
		"\u060c\5\u0098M\2\u060c\u060d\7&\2\2\u060d\u060e\5b\62\2\u060e\u060f\5"+
		"r:\2\u060fa\3\2\2\2\u0610\u0611\5d\63\2\u0611\u0612\7+\2\2\u0612c\3\2"+
		"\2\2\u0613\u0614\t\5\2\2\u0614e\3\2\2\2\u0615\u0616\5\u0098M\2\u0616\u0617"+
		"\7\'\2\2\u0617\u0618\5d\63\2\u0618\u0619\5h\65\2\u0619\u061a\7+\2\2\u061a"+
		"\u061b\7?\2\2\u061b\u061c\5\u0096L\2\u061c\u061d\5r:\2\u061dg\3\2\2\2"+
		"\u061e\u0622\3\2\2\2\u061f\u0620\7b\2\2\u0620\u0622\7\u022f\2\2\u0621"+
		"\u061e\3\2\2\2\u0621\u061f\3\2\2\2\u0622i\3\2\2\2\u0623\u0624\5l\67\2"+
		"\u0624\u0625\5\u009aN\2\u0625\u0626\5\u009cO\2\u0626k\3\2\2\2\u0627\u0628"+
		"\t\6\2\2\u0628m\3\2\2\2\u0629\u062a\7\66\2\2\u062ao\3\2\2\2\u062b\u062c"+
		"\7\65\2\2\u062cq\3\2\2\2\u062d\u062e\5\64\33\2\u062e\u062f\7!\2\2\u062f"+
		"\u0630\7.\2\2\u0630\u0631\5\u009aN\2\u0631\u0632\7\21\2\2\u0632s\3\2\2"+
		"\2\u0633\u0634\5\u00a6T\2\u0634\u0635\7\21\2\2\u0635u\3\2\2\2\u0636\u0637"+
		"\7#\2\2\u0637w\3\2\2\2\u0638\u0639\7\62\2\2\u0639\u063a\5\u0084C\2\u063a"+
		"y\3\2\2\2\u063b\u063c\7%\2\2\u063c\u063d\5~@\2\u063d\u063e\5\u0084C\2"+
		"\u063e\u063f\7-\2\2\u063f{\3\2\2\2\u0640\u0641\7/\2\2\u0641\u0642\5~@"+
		"\2\u0642\u0643\5\u0084C\2\u0643\u0644\7\21\2\2\u0644}\3\2\2\2\u0645\u0646"+
		"\3\2\2\2\u0646\177\3\2\2\2\u0647\u0648\7\31\2\2\u0648\u0649\5\u0084C\2"+
		"\u0649\u064a\7\21\2\2\u064a\u0081\3\2\2\2\u064b\u064c\7\61\2\2\u064c\u064d"+
		"\7\21\2\2\u064d\u0083\3\2\2\2\u064e\u064f\t\5\2\2\u064f\u0085\3\2\2\2"+
		"\u0650\u0654\3\2\2\2\u0651\u0652\7\"\2\2\u0652\u0654\5\u0088E\2\u0653"+
		"\u0650\3\2\2\2\u0653\u0651\3\2\2\2\u0654\u0087\3\2\2\2\u0655\u0656\bE"+
		"\1\2\u0656\u0657\5\u008aF\2\u0657\u065c\3\2\2\2\u0658\u0659\f\4\2\2\u0659"+
		"\u065b\5\u008aF\2\u065a\u0658\3\2\2\2\u065b\u065e\3\2\2\2\u065c\u065a"+
		"\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u0089\3\2\2\2\u065e\u065c\3\2\2\2\u065f"+
		"\u0660\7;\2\2\u0660\u0661\5\u008cG\2\u0661\u0662\78\2\2\u0662\u0663\5"+
		"\64\33\2\u0663\u008b\3\2\2\2\u0664\u0665\bG\1\2\u0665\u0666\5\u008eH\2"+
		"\u0666\u066c\3\2\2\2\u0667\u0668\f\4\2\2\u0668\u0669\7\63\2\2\u0669\u066b"+
		"\5\u008eH\2\u066a\u0667\3\2\2\2\u066b\u066e\3\2\2\2\u066c\u066a\3\2\2"+
		"\2\u066c\u066d\3\2\2\2\u066d\u008d\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u0670"+
		"\5\u009eP\2\u0670\u008f\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0091\3\2\2"+
		"\2\u0673\u0674\3\2\2\2\u0674\u0093\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0095"+
		"\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0097\3\2\2\2\u0679\u067f\3\2\2\2\u067a"+
		"\u067b\7\u022d\2\2\u067b\u067c\5\u009eP\2\u067c\u067d\7\u022e\2\2\u067d"+
		"\u067f\3\2\2\2\u067e\u0679\3\2\2\2\u067e\u067a\3\2\2\2\u067f\u0099\3\2"+
		"\2\2\u0680\u0683\3\2\2\2\u0681\u0683\5\u009eP\2\u0682\u0680\3\2\2\2\u0682"+
		"\u0681\3\2\2\2\u0683\u009b\3\2\2\2\u0684\u0688\7\21\2\2\u0685\u0686\7"+
		";\2\2\u0686\u0688\5\u0090I\2\u0687\u0684\3\2\2\2\u0687\u0685\3\2\2\2\u0688"+
		"\u009d\3\2\2\2\u0689\u068a\t\7\2\2\u068a\u009f\3\2\2\2\u068b\u068c\t\b"+
		"\2\2\u068c\u00a1\3\2\2\2\u068d\u068e\5\u00a4S\2\u068e\u00a3\3\2\2\2\u068f"+
		"\u0690\bS\1\2\u0690\u0691\5\u00a6T\2\u0691\u0697\3\2\2\2\u0692\u0693\f"+
		"\4\2\2\u0693\u0694\7\21\2\2\u0694\u0696\5\u00a6T\2\u0695\u0692\3\2\2\2"+
		"\u0696\u0699\3\2\2\2\u0697\u0695\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u00a5"+
		"\3\2\2\2\u0699\u0697\3\2\2\2\u069a\u070a\5\u0330\u0199\2\u069b\u070a\5"+
		"\u0332\u019a\2\u069c\u070a\5\u028c\u0147\2\u069d\u070a\5\u033c\u019f\2"+
		"\u069e\u070a\5\u022a\u0116\2\u069f\u070a\5\u01b2\u00da\2\u06a0\u070a\5"+
		"\u01b8\u00dd\2\u06a1\u070a\5\u01c4\u00e3\2\u06a2\u070a\5\u01e0\u00f1\2"+
		"\u06a3\u070a\5\u01ea\u00f6\2\u06a4\u070a\5\u02d2\u016a\2\u06a5\u070a\5"+
		"\u00c4c\2\u06a6\u070a\5\u02fc\u017f\2\u06a7\u070a\5\u02fe\u0180\2\u06a8"+
		"\u070a\5\u0188\u00c5\2\u06a9\u070a\5\u00fa~\2\u06aa\u070a\5\u0110\u0089"+
		"\2\u06ab\u070a\5\u00b8]\2\u06ac\u070a\5\u00b4[\2\u06ad\u070a\5\u0342\u01a2"+
		"\2\u06ae\u070a\5\u0340\u01a1\2\u06af\u070a\5\u01f2\u00fa\2\u06b0\u070a"+
		"\5\u00bc_\2\u06b1\u070a\5\u00ba^\2\u06b2\u070a\5\u0350\u01a9\2\u06b3\u070a"+
		"\5\u00f6|\2\u06b4\u070a\5\u0116\u008c\2\u06b5\u070a\5\u0346\u01a4\2\u06b6"+
		"\u070a\5\u0258\u012d\2\u06b7\u070a\5\u00f0y\2\u06b8\u070a\5\u0118\u008d"+
		"\2\u06b9\u070a\5\u0180\u00c1\2\u06ba\u070a\5\u0210\u0109\2\u06bb\u070a"+
		"\5\u02e8\u0175\2\u06bc\u070a\5\u0344\u01a3\2\u06bd\u070a\5\u033a\u019e"+
		"\2\u06be\u070a\5\u01ac\u00d7\2\u06bf\u070a\5\u01ba\u00de\2\u06c0\u070a"+
		"\5\u01d6\u00ec\2\u06c1\u070a\5\u01e2\u00f2\2\u06c2\u070a\5\u02ac\u0157"+
		"\2\u06c3\u070a\5\u00c2b\2\u06c4\u070a\5\u022c\u0117\2\u06c5\u070a\5\u023a"+
		"\u011e\2\u06c6\u070a\5\u023c\u011f\2\u06c7\u070a\5\u0196\u00cc\2\u06c8"+
		"\u070a\5\u00caf\2\u06c9\u070a\5\u0186\u00c4\2\u06ca\u070a\5\u0136\u009c"+
		"\2\u06cb\u070a\5\u01a6\u00d4\2\u06cc\u070a\5\u01f4\u00fb\2\u06cd\u070a"+
		"\5\u00a8U\2\u06ce\u070a\5\u00b2Z\2\u06cf\u070a\5\u01ec\u00f7\2\u06d0\u070a"+
		"\5\u0328\u0195\2\u06d1\u070a\5\u0372\u01ba\2\u06d2\u070a\5\u0398\u01cd"+
		"\2\u06d3\u070a\5\u0214\u010b\2\u06d4\u070a\5\u037e\u01c0\2\u06d5\u070a"+
		"\5\u00f8}\2\u06d6\u070a\5\u02e2\u0172\2\u06d7\u070a\5\u0212\u010a\2\u06d8"+
		"\u070a\5\u02ec\u0177\2\u06d9\u070a\5\u01c2\u00e2\2\u06da\u070a\5\u01de"+
		"\u00f0\2\u06db\u070a\5\u00c8e\2\u06dc\u070a\5\u0242\u0122\2\u06dd\u070a"+
		"\5\u0244\u0123\2\u06de\u070a\5\u0246\u0124\2\u06df\u070a\5\u01a2\u00d2"+
		"\2\u06e0\u070a\5\u030e\u0188\2\u06e1\u070a\5\u024a\u0126\2\u06e2\u070a"+
		"\5\u01aa\u00d6\2\u06e3\u070a\5\u020e\u0108\2\u06e4\u070a\5\u00be`\2\u06e5"+
		"\u070a\5\u00c0a\2\u06e6\u070a\5\u01f0\u00f9\2\u06e7\u070a\5\u0338\u019d"+
		"\2\u06e8\u070a\5\u036e\u01b8\2\u06e9\u070a\5\u035c\u01af\2\u06ea\u070a"+
		"\5\u0266\u0134\2\u06eb\u070a\5\u026e\u0138\2\u06ec\u070a\5\u0284\u0143"+
		"\2\u06ed\u070a\5\u0296\u014c\2\u06ee\u070a\5\u0374\u01bb\2\u06ef\u070a"+
		"\5\u0314\u018b\2\u06f0\u070a\5\u0326\u0194\2\u06f1\u070a\5\u0382\u01c2"+
		"\2\u06f2\u070a\5\u0310\u0189\2\u06f3\u070a\5\u0368\u01b5\2\u06f4\u070a"+
		"\5\u0248\u0125\2\u06f5\u070a\5\u02f0\u0179\2\u06f6\u070a\5\u02da\u016e"+
		"\2\u06f7\u070a\5\u02d8\u016d\2\u06f8\u070a\5\u02dc\u016f\2\u06f9\u070a"+
		"\5\u02f6\u017c\2\u06fa\u070a\5\u0270\u0139\2\u06fb\u070a\5\u0286\u0144"+
		"\2\u06fc\u070a\5\u0300\u0181\2\u06fd\u070a\5\u025e\u0130\2\u06fe\u070a"+
		"\5\u03a0\u01d1\2\u06ff\u070a\5\u0318\u018d\2\u0700\u070a\5\u0254\u012b"+
		"\2\u0701\u070a\5\u0316\u018c\2\u0702\u070a\5\u038a\u01c6\2\u0703\u070a"+
		"\5\u034a\u01a6\2\u0704\u070a\5\u00e8u\2\u0705\u070a\5\u00d2j\2\u0706\u070a"+
		"\5\u00eex\2\u0707\u070a\5\u0322\u0192\2\u0708\u070a\3\2\2\2\u0709\u069a"+
		"\3\2\2\2\u0709\u069b\3\2\2\2\u0709\u069c\3\2\2\2\u0709\u069d\3\2\2\2\u0709"+
		"\u069e\3\2\2\2\u0709\u069f\3\2\2\2\u0709\u06a0\3\2\2\2\u0709\u06a1\3\2"+
		"\2\2\u0709\u06a2\3\2\2\2\u0709\u06a3\3\2\2\2\u0709\u06a4\3\2\2\2\u0709"+
		"\u06a5\3\2\2\2\u0709\u06a6\3\2\2\2\u0709\u06a7\3\2\2\2\u0709\u06a8\3\2"+
		"\2\2\u0709\u06a9\3\2\2\2\u0709\u06aa\3\2\2\2\u0709\u06ab\3\2\2\2\u0709"+
		"\u06ac\3\2\2\2\u0709\u06ad\3\2\2\2\u0709\u06ae\3\2\2\2\u0709\u06af\3\2"+
		"\2\2\u0709\u06b0\3\2\2\2\u0709\u06b1\3\2\2\2\u0709\u06b2\3\2\2\2\u0709"+
		"\u06b3\3\2\2\2\u0709\u06b4\3\2\2\2\u0709\u06b5\3\2\2\2\u0709\u06b6\3\2"+
		"\2\2\u0709\u06b7\3\2\2\2\u0709\u06b8\3\2\2\2\u0709\u06b9\3\2\2\2\u0709"+
		"\u06ba\3\2\2\2\u0709\u06bb\3\2\2\2\u0709\u06bc\3\2\2\2\u0709\u06bd\3\2"+
		"\2\2\u0709\u06be\3\2\2\2\u0709\u06bf\3\2\2\2\u0709\u06c0\3\2\2\2\u0709"+
		"\u06c1\3\2\2\2\u0709\u06c2\3\2\2\2\u0709\u06c3\3\2\2\2\u0709\u06c4\3\2"+
		"\2\2\u0709\u06c5\3\2\2\2\u0709\u06c6\3\2\2\2\u0709\u06c7\3\2\2\2\u0709"+
		"\u06c8\3\2\2\2\u0709\u06c9\3\2\2\2\u0709\u06ca\3\2\2\2\u0709\u06cb\3\2"+
		"\2\2\u0709\u06cc\3\2\2\2\u0709\u06cd\3\2\2\2\u0709\u06ce\3\2\2\2\u0709"+
		"\u06cf\3\2\2\2\u0709\u06d0\3\2\2\2\u0709\u06d1\3\2\2\2\u0709\u06d2\3\2"+
		"\2\2\u0709\u06d3\3\2\2\2\u0709\u06d4\3\2\2\2\u0709\u06d5\3\2\2\2\u0709"+
		"\u06d6\3\2\2\2\u0709\u06d7\3\2\2\2\u0709\u06d8\3\2\2\2\u0709\u06d9\3\2"+
		"\2\2\u0709\u06da\3\2\2\2\u0709\u06db\3\2\2\2\u0709\u06dc\3\2\2\2\u0709"+
		"\u06dd\3\2\2\2\u0709\u06de\3\2\2\2\u0709\u06df\3\2\2\2\u0709\u06e0\3\2"+
		"\2\2\u0709\u06e1\3\2\2\2\u0709\u06e2\3\2\2\2\u0709\u06e3\3\2\2\2\u0709"+
		"\u06e4\3\2\2\2\u0709\u06e5\3\2\2\2\u0709\u06e6\3\2\2\2\u0709\u06e7\3\2"+
		"\2\2\u0709\u06e8\3\2\2\2\u0709\u06e9\3\2\2\2\u0709\u06ea\3\2\2\2\u0709"+
		"\u06eb\3\2\2\2\u0709\u06ec\3\2\2\2\u0709\u06ed\3\2\2\2\u0709\u06ee\3\2"+
		"\2\2\u0709\u06ef\3\2\2\2\u0709\u06f0\3\2\2\2\u0709\u06f1\3\2\2\2\u0709"+
		"\u06f2\3\2\2\2\u0709\u06f3\3\2\2\2\u0709\u06f4\3\2\2\2\u0709\u06f5\3\2"+
		"\2\2\u0709\u06f6\3\2\2\2\u0709\u06f7\3\2\2\2\u0709\u06f8\3\2\2\2\u0709"+
		"\u06f9\3\2\2\2\u0709\u06fa\3\2\2\2\u0709\u06fb\3\2\2\2\u0709\u06fc\3\2"+
		"\2\2\u0709\u06fd\3\2\2\2\u0709\u06fe\3\2\2\2\u0709\u06ff\3\2\2\2\u0709"+
		"\u0700\3\2\2\2\u0709\u0701\3\2\2\2\u0709\u0702\3\2\2\2\u0709\u0703\3\2"+
		"\2\2\u0709\u0704\3\2\2\2\u0709\u0705\3\2\2\2\u0709\u0706\3\2\2\2\u0709"+
		"\u0707\3\2\2\2\u0709\u0708\3\2\2\2\u070a\u00a7\3\2\2\2\u070b\u070c\7\u00b0"+
		"\2\2\u070c\u070d\7\u018a\2\2\u070d\u070f\5\u04cc\u0267\2\u070e\u0710\7"+
		"\u01e5\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0711\3\2\2\2"+
		"\u0711\u0712\5\u00aaV\2\u0712\u00a9\3\2\2\2\u0713\u0718\bV\1\2\u0714\u0715"+
		"\f\4\2\2\u0715\u0717\5\u00b0Y\2\u0716\u0714\3\2\2\2\u0717\u071a\3\2\2"+
		"\2\u0718\u0716\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u00ab\3\2\2\2\u071a\u0718"+
		"\3\2\2\2\u071b\u0720\bW\1\2\u071c\u071d\f\4\2\2\u071d\u071f\5\u00aeX\2"+
		"\u071e\u071c\3\2\2\2\u071f\u0722\3\2\2\2\u0720\u071e\3\2\2\2\u0720\u0721"+
		"\3\2\2\2\u0721\u00ad\3\2\2\2\u0722\u0720\3\2\2\2\u0723\u0724\7\u0165\2"+
		"\2\u0724\u0738\5\u04ca\u0266\2\u0725\u0726\7\u0165\2\2\u0726\u0738\7\u014a"+
		"\2\2\u0727\u0728\7\u00da\2\2\u0728\u0729\7\u0165\2\2\u0729\u0738\5\u04ca"+
		"\u0266\2\u072a\u072b\7\u01ca\2\2\u072b\u072c\7\u0165\2\2\u072c\u0738\5"+
		"\u04ca\u0266\2\u072d\u0738\7\u010c\2\2\u072e\u072f\7\u00a8\2\2\u072f\u0730"+
		"\7\u012d\2\2\u0730\u0738\5\u04ce\u0268\2\u0731\u0732\7\u01d5\2\2\u0732"+
		"\u0733\7\u01d0\2\2\u0733\u0738\5\u04ca\u0266\2\u0734\u0735\7\u01d2\2\2"+
		"\u0735\u0738\5\u04b6\u025c\2\u0736\u0738\7\u0230\2\2\u0737\u0723\3\2\2"+
		"\2\u0737\u0725\3\2\2\2\u0737\u0727\3\2\2\2\u0737\u072a\3\2\2\2\u0737\u072d"+
		"\3\2\2\2\u0737\u072e\3\2\2\2\u0737\u0731\3\2\2\2\u0737\u0734\3\2\2\2\u0737"+
		"\u0736\3\2\2\2\u0738\u00af\3\2\2\2\u0739\u0747\5\u00aeX\2\u073a\u073b"+
		"\7\u01b1\2\2\u073b\u0747\5\u04c8\u0265\2\u073c\u073d\7p\2\2\u073d\u0747"+
		"\5\u04b6\u025c\2\u073e\u073f\7\u018a\2\2\u073f\u0747\5\u04b6\u025c\2\u0740"+
		"\u0741\7\u0107\2\2\u0741\u0742\7\u018a\2\2\u0742\u0747\5\u04b6\u025c\2"+
		"\u0743\u0744\7\u0107\2\2\u0744\u0745\7\u00fb\2\2\u0745\u0747\5\u04b6\u025c"+
		"\2\u0746\u0739\3\2\2\2\u0746\u073a\3\2\2\2\u0746\u073c\3\2\2\2\u0746\u073e"+
		"\3\2\2\2\u0746\u0740\3\2\2\2\u0746\u0743\3\2\2\2\u0747\u00b1\3\2\2\2\u0748"+
		"\u0749\7\u00b0\2\2\u0749\u074a\7\u01d2\2\2\u074a\u074c\5\u04cc\u0267\2"+
		"\u074b\u074d\7\u01e5\2\2\u074c\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d"+
		"\u074e\3\2\2\2\u074e\u074f\5\u00aaV\2\u074f\u00b3\3\2\2\2\u0750\u0751"+
		"\7u\2\2\u0751\u0752\7\u018a\2\2\u0752\u0754\5\u04cc\u0267\2\u0753\u0755"+
		"\7\u01e5\2\2\u0754\u0753\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756\3\2\2"+
		"\2\u0756\u0757\5\u00acW\2\u0757\u00b5\3\2\2\2\u0758\u075d\3\2\2\2\u0759"+
		"\u075a\7\u0107\2\2\u075a\u075b\7\u00be\2\2\u075b\u075d\5\u04ba\u025e\2"+
		"\u075c\u0758\3\2\2\2\u075c\u0759\3\2\2\2\u075d\u00b7\3\2\2\2\u075e\u075f"+
		"\7u\2\2\u075f\u0760\7\u018a\2\2\u0760\u0761\5\u04cc\u0267\2\u0761\u0762"+
		"\5\u00b6\\\2\u0762\u0763\5\u00eav\2\u0763\u00b9\3\2\2\2\u0764\u0765\7"+
		"u\2\2\u0765\u0766\7\u01d2\2\2\u0766\u0768\5\u04cc\u0267\2\u0767\u0769"+
		"\7\u01e5\2\2\u0768\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076a\3\2\2"+
		"\2\u076a\u076b\5\u00acW\2\u076b\u00bb\3\2\2\2\u076c\u076d\7u\2\2\u076d"+
		"\u076e\7\u01d2\2\2\u076e\u076f\5\u04cc\u0267\2\u076f\u0770\5\u00eav\2"+
		"\u0770\u00bd\3\2\2\2\u0771\u0772\7\u00d5\2\2\u0772\u0773\7\u018a\2\2\u0773"+
		"\u077a\5\u04b6\u025c\2\u0774\u0775\7\u00d5\2\2\u0775\u0776\7\u018a\2\2"+
		"\u0776\u0777\7\u0102\2\2\u0777\u0778\7\u00e3\2\2\u0778\u077a\5\u04b6\u025c"+
		"\2\u0779\u0771\3\2\2\2\u0779\u0774\3\2\2\2\u077a\u00bf\3\2\2\2\u077b\u077c"+
		"\7\u00d5\2\2\u077c\u077d\7\u01d2\2\2\u077d\u0784\5\u04b6\u025c\2\u077e"+
		"\u077f\7\u00d5\2\2\u077f\u0780\7\u01d2\2\2\u0780\u0781\7\u0102\2\2\u0781"+
		"\u0782\7\u00e3\2\2\u0782\u0784\5\u04b6\u025c\2\u0783\u077b\3\2\2\2\u0783"+
		"\u077e\3\2\2\2\u0784\u00c1\3\2\2\2\u0785\u0786\7\u00b0\2\2\u0786\u0787"+
		"\7\u00fb\2\2\u0787\u0789\5\u04cc\u0267\2\u0788\u078a\7\u01e5\2\2\u0789"+
		"\u0788\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c\5\u00aa"+
		"V\2\u078c\u00c3\3\2\2\2\u078d\u078e\7u\2\2\u078e\u078f\7\u00fb\2\2\u078f"+
		"\u0790\5\u04cc\u0267\2\u0790\u0791\5\u00c6d\2\u0791\u0792\7\u01d2\2\2"+
		"\u0792\u0793\5\u04b6\u025c\2\u0793\u00c5\3\2\2\2\u0794\u0795\t\t\2\2\u0795"+
		"\u00c7\3\2\2\2\u0796\u0797\7\u00d5\2\2\u0797\u0798\7\u00fb\2\2\u0798\u079f"+
		"\5\u04b6\u025c\2\u0799\u079a\7\u00d5\2\2\u079a\u079b\7\u00fb\2\2\u079b"+
		"\u079c\7\u0102\2\2\u079c\u079d\7\u00e3\2\2\u079d\u079f\5\u04b6\u025c\2"+
		"\u079e\u0796\3\2\2\2\u079e\u0799\3\2\2\2\u079f\u00c9\3\2\2\2\u07a0\u07a1"+
		"\7\u00b0\2\2\u07a1\u07a2\7\u0190\2\2\u07a2\u07a3\5\u00ccg\2\u07a3\u07a4"+
		"\7\u0083\2\2\u07a4\u07a5\5\u04cc\u0267\2\u07a5\u07a6\5\u00ceh\2\u07a6"+
		"\u07ad\3\2\2\2\u07a7\u07a8\7\u00b0\2\2\u07a8\u07a9\7\u0190\2\2\u07a9\u07aa"+
		"\5\u04d0\u0269\2\u07aa\u07ab\5\u00ceh\2\u07ab\u07ad\3\2\2\2\u07ac\u07a0"+
		"\3\2\2\2\u07ac\u07a7\3\2\2\2\u07ad\u00cb\3\2\2\2\u07ae\u07b1\5\u04d0\u0269"+
		"\2\u07af\u07b1\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b0\u07af\3\2\2\2\u07b1\u00cd"+
		"\3\2\2\2\u07b2\u07b7\bh\1\2\u07b3\u07b4\f\4\2\2\u07b4\u07b6\5\u00d0i\2"+
		"\u07b5\u07b3\3\2\2\2\u07b6\u07b9\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b7\u07b8"+
		"\3\2\2\2\u07b8\u00cf\3\2\2\2\u07b9\u07b7\3\2\2\2\u07ba\u07c1\5\u0136\u009c"+
		"\2\u07bb\u07c1\5\u0296\u014c\2\u07bc\u07c1\5\u0186\u00c4\2\u07bd\u07c1"+
		"\5\u01f4\u00fb\2\u07be\u07c1\5\u026e\u0138\2\u07bf\u07c1\5\u0322\u0192"+
		"\2\u07c0\u07ba\3\2\2\2\u07c0\u07bb\3\2\2\2\u07c0\u07bc\3\2\2\2\u07c0\u07bd"+
		"\3\2\2\2\u07c0\u07be\3\2\2\2\u07c0\u07bf\3\2\2\2\u07c1\u00d1\3\2\2\2\u07c2"+
		"\u07c3\7\u019c\2\2\u07c3\u07cb\5\u00d4k\2\u07c4\u07c5\7\u019c\2\2\u07c5"+
		"\u07c6\7\u0130\2\2\u07c6\u07cb\5\u00d4k\2\u07c7\u07c8\7\u019c\2\2\u07c8"+
		"\u07c9\7\u019a\2\2\u07c9\u07cb\5\u00d4k\2\u07ca\u07c2\3\2\2\2\u07ca\u07c4"+
		"\3\2\2\2\u07ca\u07c7\3\2\2\2\u07cb\u00d3\3\2\2\2\u07cc\u07cd\7\u01bf\2"+
		"\2\u07cd\u07d5\5\u031e\u0190\2\u07ce\u07cf\7\u019a\2\2\u07cf\u07d0\7\u0098"+
		"\2\2\u07d0\u07d1\7|\2\2\u07d1\u07d2\7\u01bf\2\2\u07d2\u07d5\5\u031e\u0190"+
		"\2\u07d3\u07d5\5\u00d6l\2\u07d4\u07cc\3\2\2\2\u07d4\u07ce\3\2\2\2\u07d4"+
		"\u07d3\3\2\2\2\u07d5\u00d5\3\2\2\2\u07d6\u07d7\5\u00d8m\2\u07d7\u07d8"+
		"\7\u01bd\2\2\u07d8\u07d9\5\u00dan\2\u07d9\u0802\3\2\2\2\u07da\u07db\5"+
		"\u00d8m\2\u07db\u07dc\7\20\2\2\u07dc\u07dd\5\u00dan\2\u07dd\u0802\3\2"+
		"\2\2\u07de\u07df\5\u00d8m\2\u07df\u07e0\7\u01bd\2\2\u07e0\u07e1\7\u00c4"+
		"\2\2\u07e1\u0802\3\2\2\2\u07e2\u07e3\5\u00d8m\2\u07e3\u07e4\7\20\2\2\u07e4"+
		"\u07e5\7\u00c4\2\2\u07e5\u0802\3\2\2\2\u07e6\u07e7\5\u00d8m\2\u07e7\u07e8"+
		"\7\u00f3\2\2\u07e8\u07e9\7\u00b3\2\2\u07e9\u0802\3\2\2\2\u07ea\u07eb\7"+
		"\u01bb\2\2\u07eb\u07ec\7\u01f6\2\2\u07ec\u0802\5\u00e2r\2\u07ed\u07ee"+
		"\7\u0094\2\2\u07ee\u0802\5\u04ca\u0266\2\u07ef\u07f0\7\u0190\2\2\u07f0"+
		"\u0802\5\u04ca\u0266\2\u07f1\u07f2\7\u013e\2\2\u07f2\u0802\5\u00e4s\2"+
		"\u07f3\u07f4\7\u018a\2\2\u07f4\u0802\5\u00e6t\2\u07f5\u07f6\7\u019a\2"+
		"\2\u07f6\u07f7\7\u0083\2\2\u07f7\u0802\5\u00e6t\2\u07f8\u07f9\7\u019a"+
		"\2\2\u07f9\u07fa\7\u0083\2\2\u07fa\u0802\7\u00c4\2\2\u07fb\u07fc\7\u01ea"+
		"\2\2\u07fc\u07fd\7\u0156\2\2\u07fd\u0802\5\u044c\u0227\2\u07fe\u07ff\7"+
		"\u01bf\2\2\u07ff\u0800\7\u01a3\2\2\u0800\u0802\5\u04ca\u0266\2\u0801\u07d6"+
		"\3\2\2\2\u0801\u07da\3\2\2\2\u0801\u07de\3\2\2\2\u0801\u07e2\3\2\2\2\u0801"+
		"\u07e6\3\2\2\2\u0801\u07ea\3\2\2\2\u0801\u07ed\3\2\2\2\u0801\u07ef\3\2"+
		"\2\2\u0801\u07f1\3\2\2\2\u0801\u07f3\3\2\2\2\u0801\u07f5\3\2\2\2\u0801"+
		"\u07f8\3\2\2\2\u0801\u07fb\3\2\2\2\u0801\u07fe\3\2\2\2\u0802\u00d7\3\2"+
		"\2\2\u0803\u0804\bm\1\2\u0804\u0805\5\u04d0\u0269\2\u0805\u080b\3\2\2"+
		"\2\u0806\u0807\f\3\2\2\u0807\u0808\7\6\2\2\u0808\u080a\5\u04d0\u0269\2"+
		"\u0809\u0806\3\2\2\2\u080a\u080d\3\2\2\2\u080b\u0809\3\2\2\2\u080b\u080c"+
		"\3\2\2\2\u080c\u00d9\3\2\2\2\u080d\u080b\3\2\2\2\u080e\u080f\bn\1\2\u080f"+
		"\u0810\5\u00dco\2\u0810\u0816\3\2\2\2\u0811\u0812\f\3\2\2\u0812\u0813"+
		"\7\b\2\2\u0813\u0815\5\u00dco\2\u0814\u0811\3\2\2\2\u0815\u0818\3\2\2"+
		"\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u00db\3\2\2\2\u0818\u0816"+
		"\3\2\2\2\u0819\u081c\5\u00e0q\2\u081a\u081c\5\u0192\u00ca\2\u081b\u0819"+
		"\3\2\2\2\u081b\u081a\3\2\2\2\u081c\u00dd\3\2\2\2\u081d\u081e\7\u0175\2"+
		"\2\u081e\u0825\7\u01c9\2\2\u081f\u0820\7\u0175\2\2\u0820\u0825\7\u00a5"+
		"\2\2\u0821\u0822\7\u0180\2\2\u0822\u0825\7\u0175\2\2\u0823\u0825\7\u0198"+
		"\2\2\u0824\u081d\3\2\2\2\u0824\u081f\3\2\2\2\u0824\u0821\3\2\2\2\u0824"+
		"\u0823\3\2\2\2\u0825\u00df\3\2\2\2\u0826\u082b\7\u01c3\2\2\u0827\u082b"+
		"\7\u00e8\2\2\u0828\u082b\7\u0153\2\2\u0829\u082b\5\u00e6t\2\u082a\u0826"+
		"\3\2\2\2\u082a\u0827\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u0829\3\2\2\2\u082b"+
		"\u00e1\3\2\2\2\u082c\u083d\5\u04ca\u0266\2\u082d\u083d\7\u0230\2\2\u082e"+
		"\u082f\5\u0432\u021a\2\u082f\u0830\5\u04ca\u0266\2\u0830\u0831\5\u0436"+
		"\u021c\2\u0831\u083d\3\2\2\2\u0832\u0833\5\u0432\u021a\2\u0833\u0834\7"+
		"\r\2\2\u0834\u0835\5\u04c8\u0265\2\u0835\u0836\7\7\2\2\u0836\u0837\5\u04ca"+
		"\u0266\2\u0837\u0838\5\u0436\u021c\2\u0838\u083d\3\2\2\2\u0839\u083d\5"+
		"\u0192\u00ca\2\u083a\u083d\7\u00c4\2\2\u083b\u083d\7\u0130\2\2\u083c\u082c"+
		"\3\2\2\2\u083c\u082d\3\2\2\2\u083c\u082e\3\2\2\2\u083c\u0832\3\2\2\2\u083c"+
		"\u0839\3\2\2\2\u083c\u083a\3\2\2\2\u083c\u083b\3\2\2\2\u083d\u00e3\3\2"+
		"\2\2\u083e\u0842\5\u04ca\u0266\2\u083f\u0842\7\u00c4\2\2\u0840\u0842\3"+
		"\2\2\2\u0841\u083e\3\2\2\2\u0841\u083f\3\2\2\2\u0841\u0840\3\2\2\2\u0842"+
		"\u00e5\3\2\2\2\u0843\u0846\5\u04d0\u0269\2\u0844\u0846\5\u04ca\u0266\2"+
		"\u0845\u0843\3\2\2\2\u0845\u0844\3\2\2\2\u0846\u00e7\3\2\2\2\u0847\u0848"+
		"\7\u0183\2\2\u0848\u0856\5\u00d8m\2\u0849\u084a\7\u0183\2\2\u084a\u084b"+
		"\7\u01bb\2\2\u084b\u0856\7\u01f6\2\2\u084c\u084d\7\u0183\2\2\u084d\u084e"+
		"\7\u01bf\2\2\u084e\u084f\7\u011e\2\2\u084f\u0856\7\u012b\2\2\u0850\u0851"+
		"\7\u0183\2\2\u0851\u0852\7\u019a\2\2\u0852\u0856\7\u0083\2\2\u0853\u0854"+
		"\7\u0183\2\2\u0854\u0856\7s\2\2\u0855\u0847\3\2\2\2\u0855\u0849\3\2\2"+
		"\2\u0855\u084c\3\2\2\2\u0855\u0850\3\2\2\2\u0855\u0853\3\2\2\2\u0856\u00e9"+
		"\3\2\2\2\u0857\u0858\7\u019c\2\2\u0858\u085b\5\u00d4k\2\u0859\u085b\5"+
		"\u00e8u\2\u085a\u0857\3\2\2\2\u085a\u0859\3\2\2\2\u085b\u00eb\3\2\2\2"+
		"\u085c\u085d\7\u019c\2\2\u085d\u0860\5\u00d6l\2\u085e\u0860\5\u00e8u\2"+
		"\u085f\u085c\3\2\2\2\u085f\u085e\3\2\2\2\u0860\u00ed\3\2\2\2\u0861\u0862"+
		"\7\u019f\2\2\u0862\u0870\5\u00d8m\2\u0863\u0864\7\u019f\2\2\u0864\u0865"+
		"\7\u01bb\2\2\u0865\u0870\7\u01f6\2\2\u0866\u0867\7\u019f\2\2\u0867\u0868"+
		"\7\u01bf\2\2\u0868\u0869\7\u011e\2\2\u0869\u0870\7\u012b\2\2\u086a\u086b"+
		"\7\u019f\2\2\u086b\u086c\7\u019a\2\2\u086c\u0870\7\u0083\2\2\u086d\u086e"+
		"\7\u019f\2\2\u086e\u0870\7s\2\2\u086f\u0861\3\2\2\2\u086f\u0863\3\2\2"+
		"\2\u086f\u0866\3\2\2\2\u086f\u086a\3\2\2\2\u086f\u086d\3\2\2\2\u0870\u00ef"+
		"\3\2\2\2\u0871\u0872\7\u019c\2\2\u0872\u0873\7\u00aa\2\2\u0873\u0874\5"+
		"\u00f2z\2\u0874\u0875\5\u00f4{\2\u0875\u00f1\3\2\2\2\u0876\u0879\7s\2"+
		"\2\u0877\u0879\5\u04b2\u025a\2\u0878\u0876\3\2\2\2\u0878\u0877\3\2\2\2"+
		"\u0879\u00f3\3\2\2\2\u087a\u087b\t\n\2\2\u087b\u00f5\3\2\2\2\u087c\u087d"+
		"\7\u009a\2\2\u087d\u00f7\3\2\2\2\u087e\u087f\7\u00cf\2\2\u087f\u0887\7"+
		"s\2\2\u0880\u0881\7\u00cf\2\2\u0881\u0887\7\u01b6\2\2\u0882\u0883\7\u00cf"+
		"\2\2\u0883\u0887\7\u01b8\2\2\u0884\u0885\7\u00cf\2\2\u0885\u0887\7\u0167"+
		"\2\2\u0886\u087e\3\2\2\2\u0886\u0880\3\2\2\2\u0886\u0882\3\2\2\2\u0886"+
		"\u0884\3\2\2\2\u0887\u00f9\3\2\2\2\u0888\u0889\7u\2\2\u0889\u088a\7\u01b3"+
		"\2\2\u088a\u088b\5\u03f8\u01fd\2\u088b\u088c\5\u00fc\177\2\u088c\u08b9"+
		"\3\2\2\2\u088d\u088e\7u\2\2\u088e\u088f\7\u01b3\2\2\u088f\u0890\7\u0102"+
		"\2\2\u0890\u0891\7\u00e3\2\2\u0891\u0892\5\u03f8\u01fd\2\u0892\u0893\5"+
		"\u00fc\177\2\u0893\u08b9\3\2\2\2\u0894\u0895\7u\2\2\u0895\u0896\7\u010a"+
		"\2\2\u0896\u0897\5\u04b4\u025b\2\u0897\u0898\5\u00fc\177\2\u0898\u08b9"+
		"\3\2\2\2\u0899\u089a\7u\2\2\u089a\u089b\7\u010a\2\2\u089b\u089c\7\u0102"+
		"\2\2\u089c\u089d\7\u00e3\2\2\u089d\u089e\5\u04b4\u025b\2\u089e\u089f\5"+
		"\u00fc\177\2\u089f\u08b9\3\2\2\2\u08a0\u08a1\7u\2\2\u08a1\u08a2\7\u0196"+
		"\2\2\u08a2\u08a3\5\u04b4\u025b\2\u08a3\u08a4\5\u00fc\177\2\u08a4\u08b9"+
		"\3\2\2\2\u08a5\u08a6\7u\2\2\u08a6\u08a7\7\u0196\2\2\u08a7\u08a8\7\u0102"+
		"\2\2\u08a8\u08a9\7\u00e3\2\2\u08a9\u08aa\5\u04b4\u025b\2\u08aa\u08ab\5"+
		"\u00fc\177\2\u08ab\u08b9\3\2\2\2\u08ac\u08ad\7u\2\2\u08ad\u08ae\7\u01df"+
		"\2\2\u08ae\u08af\5\u04b4\u025b\2\u08af\u08b0\5\u00fc\177\2\u08b0\u08b9"+
		"\3\2\2\2\u08b1\u08b2\7u\2\2\u08b2\u08b3\7\u01df\2\2\u08b3\u08b4\7\u0102"+
		"\2\2\u08b4\u08b5\7\u00e3\2\2\u08b5\u08b6\5\u04b4\u025b\2\u08b6\u08b7\5"+
		"\u00fc\177\2\u08b7\u08b9\3\2\2\2\u08b8\u0888\3\2\2\2\u08b8\u088d\3\2\2"+
		"\2\u08b8\u0894\3\2\2\2\u08b8\u0899\3\2\2\2\u08b8\u08a0\3\2\2\2\u08b8\u08a5"+
		"\3\2\2\2\u08b8\u08ac\3\2\2\2\u08b8\u08b1\3\2\2\2\u08b9\u00fb\3\2\2\2\u08ba"+
		"\u08bb\b\177\1\2\u08bb\u08bc\5\u00fe\u0080\2\u08bc\u08c2\3\2\2\2\u08bd"+
		"\u08be\f\3\2\2\u08be\u08bf\7\b\2\2\u08bf\u08c1\5\u00fe\u0080\2\u08c0\u08bd"+
		"\3\2\2\2\u08c1\u08c4\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3"+
		"\u00fd\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c5\u08c6\7o\2\2\u08c6\u096b\5\u0146"+
		"\u00a4\2\u08c7\u08c8\7o\2\2\u08c8\u08c9\7\u00a1\2\2\u08c9\u096b\5\u0146"+
		"\u00a4\2\u08ca\u08cb\7u\2\2\u08cb\u08cc\5\u02f8\u017d\2\u08cc\u08cd\5"+
		"\u04d0\u0269\2\u08cd\u08ce\5\u0100\u0081\2\u08ce\u096b\3\2\2\2\u08cf\u08d0"+
		"\7u\2\2\u08d0\u08d1\5\u02f8\u017d\2\u08d1\u08d2\5\u04d0\u0269\2\u08d2"+
		"\u08d3\7\u00d5\2\2\u08d3\u08d4\7\u0145\2\2\u08d4\u08d5\7\u014a\2\2\u08d5"+
		"\u096b\3\2\2\2\u08d6\u08d7\7u\2\2\u08d7\u08d8\5\u02f8\u017d\2\u08d8\u08d9"+
		"\5\u04d0\u0269\2\u08d9\u08da\7\u019c\2\2\u08da\u08db\7\u0145\2\2\u08db"+
		"\u08dc\7\u014a\2\2\u08dc\u096b\3\2\2\2\u08dd\u08de\7u\2\2\u08de\u08df"+
		"\5\u02f8\u017d\2\u08df\u08e0\5\u04d0\u0269\2\u08e0\u08e1\7\u019c\2\2\u08e1"+
		"\u08e2\7\u01a9\2\2\u08e2\u08e3\5\u04ce\u0268\2\u08e3\u096b\3\2\2\2\u08e4"+
		"\u08e5\7u\2\2\u08e5\u08e6\5\u02f8\u017d\2\u08e6\u08e7\5\u04d0\u0269\2"+
		"\u08e7\u08e8\7\u019c\2\2\u08e8\u08e9\5\u0108\u0085\2\u08e9\u096b\3\2\2"+
		"\2\u08ea\u08eb\7u\2\2\u08eb\u08ec\5\u02f8\u017d\2\u08ec\u08ed\5\u04d0"+
		"\u0269\2\u08ed\u08ee\7\u0183\2\2\u08ee\u08ef\5\u0108\u0085\2\u08ef\u096b"+
		"\3\2\2\2\u08f0\u08f1\7u\2\2\u08f1\u08f2\5\u02f8\u017d\2\u08f2\u08f3\5"+
		"\u04d0\u0269\2\u08f3\u08f4\7\u019c\2\2\u08f4\u08f5\7\u01ac\2\2\u08f5\u08f6"+
		"\5\u04d0\u0269\2\u08f6\u096b\3\2\2\2\u08f7\u08f8\7\u00d5\2\2\u08f8\u08f9"+
		"\5\u02f8\u017d\2\u08f9\u08fa\7\u0102\2\2\u08fa\u08fb\7\u00e3\2\2\u08fb"+
		"\u08fc\5\u04d0\u0269\2\u08fc\u08fd\5\u0102\u0082\2\u08fd\u096b\3\2\2\2"+
		"\u08fe\u08ff\7\u00d5\2\2\u08ff\u0900\5\u02f8\u017d\2\u0900\u0901\5\u04d0"+
		"\u0269\2\u0901\u0902\5\u0102\u0082\2\u0902\u096b\3\2\2\2\u0903\u0904\7"+
		"u\2\2\u0904\u0905\5\u02f8\u017d\2\u0905\u0906\5\u04d0\u0269\2\u0906\u0907"+
		"\5\u02fa\u017e\2\u0907\u0908\7\u01c6\2\2\u0908\u0909\5\u040a\u0206\2\u0909"+
		"\u090a\5\u0104\u0083\2\u090a\u090b\5\u0106\u0084\2\u090b\u096b\3\2\2\2"+
		"\u090c\u090d\7u\2\2\u090d\u090e\5\u02f8\u017d\2\u090e\u090f\5\u04d0\u0269"+
		"\2\u090f\u0910\5\u01ca\u00e6\2\u0910\u096b\3\2\2\2\u0911\u0912\7o\2\2"+
		"\u0912\u096b\5\u0158\u00ad\2\u0913\u0914\7\u01d6\2\2\u0914\u0915\7\u00a9"+
		"\2\2\u0915\u096b\5\u04b8\u025d\2\u0916\u0917\7\u00d5\2\2\u0917\u0918\7"+
		"\u00a9\2\2\u0918\u0919\7\u0102\2\2\u0919\u091a\7\u00e3\2\2\u091a\u091b"+
		"\5\u04b8\u025d\2\u091b\u091c\5\u0102\u0082\2\u091c\u096b\3\2\2\2\u091d"+
		"\u091e\7\u00d5\2\2\u091e\u091f\7\u00a9\2\2\u091f\u0920\5\u04b8\u025d\2"+
		"\u0920\u0921\5\u0102\u0082\2\u0921\u096b\3\2\2\2\u0922\u0923\7\u019c\2"+
		"\2\u0923\u0924\7\u01e5\2\2\u0924\u096b\7\u0152\2\2\u0925\u0926\7\u019c"+
		"\2\2\u0926\u0927\7\u01e6\2\2\u0927\u096b\7\u0152\2\2\u0928\u0929\7\u009d"+
		"\2\2\u0929\u092a\7\u0153\2\2\u092a\u096b\5\u04b8\u025d\2\u092b\u092c\7"+
		"\u019c\2\2\u092c\u092d\7\u01e6\2\2\u092d\u096b\7\u009d\2\2\u092e\u092f"+
		"\7\u00d8\2\2\u092f\u0930\7\u01c1\2\2\u0930\u096b\5\u04b8\u025d\2\u0931"+
		"\u0932\7\u00d8\2\2\u0932\u0933\7v\2\2\u0933\u0934\7\u01c1\2\2\u0934\u096b"+
		"\5\u04b8\u025d\2\u0935\u0936\7\u00d8\2\2\u0936\u0937\7\u0182\2\2\u0937"+
		"\u0938\7\u01c1\2\2\u0938\u096b\5\u04b8\u025d\2\u0939\u093a\7\u00d8\2\2"+
		"\u093a\u093b\7\u01c1\2\2\u093b\u096b\7s\2\2\u093c\u093d\7\u00d8\2\2\u093d"+
		"\u093e\7\u01c1\2\2\u093e\u096b\7\u01d2\2\2\u093f\u0940\7\u00ce\2\2\u0940"+
		"\u0941\7\u01c1\2\2\u0941\u096b\5\u04b8\u025d\2\u0942\u0943\7\u00ce\2\2"+
		"\u0943\u0944\7\u01c1\2\2\u0944\u096b\7s\2\2\u0945\u0946\7\u00ce\2\2\u0946"+
		"\u0947\7\u01c1\2\2\u0947\u096b\7\u01d2\2\2\u0948\u0949\7\u00d8\2\2\u0949"+
		"\u094a\7\u018e\2\2\u094a\u096b\5\u04b8\u025d\2\u094b\u094c\7\u00d8\2\2"+
		"\u094c\u094d\7v\2\2\u094d\u094e\7\u018e\2\2\u094e\u096b\5\u04b8\u025d"+
		"\2\u094f\u0950\7\u00d8\2\2\u0950\u0951\7\u0182\2\2\u0951\u0952\7\u018e"+
		"\2\2\u0952\u096b\5\u04b8\u025d\2\u0953\u0954\7\u00ce\2\2\u0954\u0955\7"+
		"\u018e\2\2\u0955\u096b\5\u04b8\u025d\2\u0956\u0957\7\u010c\2\2\u0957\u096b"+
		"\5\u04b4\u025b\2\u0958\u0959\7\u0143\2\2\u0959\u095a\7\u010c\2\2\u095a"+
		"\u096b\5\u04b4\u025b\2\u095b\u095c\7\u014f\2\2\u095c\u096b\5\u0250\u0129"+
		"\2\u095d\u095e\7\u0145\2\2\u095e\u096b\7\u014f\2\2\u095f\u0960\7\u0160"+
		"\2\2\u0960\u0961\7\u01bd\2\2\u0961\u096b\5\u04cc\u0267\2\u0962\u0963\7"+
		"\u019c\2\2\u0963\u0964\7\u01b5\2\2\u0964\u096b\5\u04b8\u025d\2\u0965\u0966"+
		"\7\u019c\2\2\u0966\u096b\5\u0108\u0085\2\u0967\u0968\7\u0183\2\2\u0968"+
		"\u096b\5\u0108\u0085\2\u0969\u096b\5\u01ca\u00e6\2\u096a\u08c5\3\2\2\2"+
		"\u096a\u08c7\3\2\2\2\u096a\u08ca\3\2\2\2\u096a\u08cf\3\2\2\2\u096a\u08d6"+
		"\3\2\2\2\u096a\u08dd\3\2\2\2\u096a\u08e4\3\2\2\2\u096a\u08ea\3\2\2\2\u096a"+
		"\u08f0\3\2\2\2\u096a\u08f7\3\2\2\2\u096a\u08fe\3\2\2\2\u096a\u0903\3\2"+
		"\2\2\u096a\u090c\3\2\2\2\u096a\u0911\3\2\2\2\u096a\u0913\3\2\2\2\u096a"+
		"\u0916\3\2\2\2\u096a\u091d\3\2\2\2\u096a\u0922\3\2\2\2\u096a\u0925\3\2"+
		"\2\2\u096a\u0928\3\2\2\2\u096a\u092b\3\2\2\2\u096a\u092e\3\2\2\2\u096a"+
		"\u0931\3\2\2\2\u096a\u0935\3\2\2\2\u096a\u0939\3\2\2\2\u096a\u093c\3\2"+
		"\2\2\u096a\u093f\3\2\2\2\u096a\u0942\3\2\2\2\u096a\u0945\3\2\2\2\u096a"+
		"\u0948\3\2\2\2\u096a\u094b\3\2\2\2\u096a\u094f\3\2\2\2\u096a\u0953\3\2"+
		"\2\2\u096a\u0956\3\2\2\2\u096a\u0958\3\2\2\2\u096a\u095b\3\2\2\2\u096a"+
		"\u095d\3\2\2\2\u096a\u095f\3\2\2\2\u096a\u0962\3\2\2\2\u096a\u0965\3\2"+
		"\2\2\u096a\u0967\3\2\2\2\u096a\u0969\3\2\2\2\u096b\u00ff\3\2\2\2\u096c"+
		"\u096d\7\u019c\2\2\u096d\u096e\7\u00c4\2\2\u096e\u0972\5\u043a\u021e\2"+
		"\u096f\u0970\7\u00d5\2\2\u0970\u0972\7\u00c4\2\2\u0971\u096c\3\2\2\2\u0971"+
		"\u096f\3\2\2\2\u0972\u0101\3\2\2\2\u0973\u0977\7\u0090\2\2\u0974\u0977"+
		"\7\u0185\2\2\u0975\u0977\3\2\2\2\u0976\u0973\3\2\2\2\u0976\u0974\3\2\2"+
		"\2\u0976\u0975\3\2\2\2\u0977\u0103\3\2\2\2\u0978\u0979\7\u009f\2\2\u0979"+
		"\u097c\5\u0250\u0129\2\u097a\u097c\3\2\2\2\u097b\u0978\3\2\2\2\u097b\u097a"+
		"\3\2\2\2\u097c\u0105\3\2\2\2\u097d\u097e\7\u01d3\2\2\u097e\u0981\5\u043a"+
		"\u021e\2\u097f\u0981\3\2\2\2\u0980\u097d\3\2\2\2\u0980\u097f\3\2\2\2\u0981"+
		"\u0107\3\2\2\2\u0982\u0983\7\r\2\2\u0983\u0984\5\u010c\u0087\2\u0984\u0985"+
		"\7\7\2\2\u0985\u0109\3\2\2\2\u0986\u0987\7\u01e5\2\2\u0987\u098a\5\u0108"+
		"\u0085\2\u0988\u098a\3\2\2\2\u0989\u0986\3\2\2\2\u0989\u0988\3\2\2\2\u098a"+
		"\u010b\3\2\2\2\u098b\u098c\b\u0087\1\2\u098c\u098d\5\u010e\u0088\2\u098d"+
		"\u0993\3\2\2\2\u098e\u098f\f\3\2\2\u098f\u0990\7\b\2\2\u0990\u0992\5\u010e"+
		"\u0088\2\u0991\u098e\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0991\3\2\2\2\u0993"+
		"\u0994\3\2\2\2\u0994\u010d\3\2\2\2\u0995\u0993\3\2\2\2\u0996\u0997\5\u04d4"+
		"\u026b\2\u0997\u0998\7\20\2\2\u0998\u0999\5\u021c\u010f\2\u0999\u09a6"+
		"\3\2\2\2\u099a\u09a6\5\u04d4\u026b\2\u099b\u099c\5\u04d4\u026b\2\u099c"+
		"\u099d\7\6\2\2\u099d\u099e\5\u04d4\u026b\2\u099e\u099f\7\20\2\2\u099f"+
		"\u09a0\5\u021c\u010f\2\u09a0\u09a6\3\2\2\2\u09a1\u09a2\5\u04d4\u026b\2"+
		"\u09a2\u09a3\7\6\2\2\u09a3\u09a4\5\u04d4\u026b\2\u09a4\u09a6\3\2\2\2\u09a5"+
		"\u0996\3\2\2\2\u09a5\u099a\3\2\2\2\u09a5\u099b\3\2\2\2\u09a5\u09a1\3\2"+
		"\2\2\u09a6\u010f\3\2\2\2\u09a7\u09a8\7u\2\2\u09a8\u09a9\7\u01c6\2\2\u09a9"+
		"\u09aa\5\u0250\u0129\2\u09aa\u09ab\5\u0112\u008a\2\u09ab\u0111\3\2\2\2"+
		"\u09ac\u09ad\b\u008a\1\2\u09ad\u09ae\5\u0114\u008b\2\u09ae\u09b4\3\2\2"+
		"\2\u09af\u09b0\f\3\2\2\u09b0\u09b1\7\b\2\2\u09b1\u09b3\5\u0114\u008b\2"+
		"\u09b2\u09af\3\2\2\2\u09b3\u09b6\3\2\2\2\u09b4\u09b2\3\2\2\2\u09b4\u09b5"+
		"\3\2\2\2\u09b5\u0113\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b7\u09b8\7o\2\2\u09b8"+
		"\u09b9\7\u0082\2\2\u09b9\u09ba\5\u0408\u0205\2\u09ba\u09bb\5\u0102\u0082"+
		"\2\u09bb\u09d2\3\2\2\2\u09bc\u09bd\7\u00d5\2\2\u09bd\u09be\7\u0082\2\2"+
		"\u09be\u09bf\7\u0102\2\2\u09bf\u09c0\7\u00e3\2\2\u09c0\u09c1\5\u04d0\u0269"+
		"\2\u09c1\u09c2\5\u0102\u0082\2\u09c2\u09d2\3\2\2\2\u09c3\u09c4\7\u00d5"+
		"\2\2\u09c4\u09c5\7\u0082\2\2\u09c5\u09c6\5\u04d0\u0269\2\u09c6\u09c7\5"+
		"\u0102\u0082\2\u09c7\u09d2\3\2\2\2\u09c8\u09c9\7u\2\2\u09c9\u09ca\7\u0082"+
		"\2\2\u09ca\u09cb\5\u04d0\u0269\2\u09cb\u09cc\5\u02fa\u017e\2\u09cc\u09cd"+
		"\7\u01c6\2\2\u09cd\u09ce\5\u040a\u0206\2\u09ce\u09cf\5\u0104\u0083\2\u09cf"+
		"\u09d0\5\u0102\u0082\2\u09d0\u09d2\3\2\2\2\u09d1\u09b7\3\2\2\2\u09d1\u09bc"+
		"\3\2\2\2\u09d1\u09c3\3\2\2\2\u09d1\u09c8\3\2\2\2\u09d2\u0115\3\2\2\2\u09d3"+
		"\u09d4\7\u009c\2\2\u09d4\u09d8\5\u039a\u01ce\2\u09d5\u09d6\7\u009c\2\2"+
		"\u09d6\u09d8\7s\2\2\u09d7\u09d3\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d8\u0117"+
		"\3\2\2\2\u09d9\u09da\7\u00ae\2\2\u09da\u09db\5\u0124\u0093\2\u09db\u09dc"+
		"\5\u04b4\u025b\2\u09dc\u09dd\5\u015e\u00b0\2\u09dd\u09de\5\u0126\u0094"+
		"\2\u09de\u09df\5\u011a\u008e\2\u09df\u09e0\5\u011c\u008f\2\u09e0\u09e2"+
		"\5\u0128\u0095\2\u09e1\u09e3\7\u01e5\2\2\u09e2\u09e1\3\2\2\2\u09e2\u09e3"+
		"\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4\u09e5\5\u011e\u0090\2\u09e5\u09f0\3"+
		"\2\2\2\u09e6\u09e7\7\u00ae\2\2\u09e7\u09e8\5\u03a2\u01d2\2\u09e8\u09e9"+
		"\7\u01bd\2\2\u09e9\u09eb\5\u011c\u008f\2\u09ea\u09ec\7\u01e5\2\2\u09eb"+
		"\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\5\u011e"+
		"\u0090\2\u09ee\u09f0\3\2\2\2\u09ef\u09d9\3\2\2\2\u09ef\u09e6\3\2\2\2\u09f0"+
		"\u0119\3\2\2\2\u09f1\u09f2\t\13\2\2\u09f2\u011b\3\2\2\2\u09f3\u09f7\5"+
		"\u04ca\u0266\2\u09f4\u09f7\7\u01aa\2\2\u09f5\u09f7\7\u01ab\2\2\u09f6\u09f3"+
		"\3\2\2\2\u09f6\u09f4\3\2\2\2\u09f6\u09f5\3\2\2\2\u09f7\u011d\3\2\2\2\u09f8"+
		"\u09fe\5\u0120\u0091\2\u09f9\u09fa\7\r\2\2\u09fa\u09fb\5\u012c\u0097\2"+
		"\u09fb\u09fc\7\7\2\2\u09fc\u09fe\3\2\2\2\u09fd\u09f8\3\2\2\2\u09fd\u09f9"+
		"\3\2\2\2\u09fe\u011f\3\2\2\2\u09ff\u0a04\b\u0091\1\2\u0a00\u0a01\f\4\2"+
		"\2\u0a01\u0a03\5\u0122\u0092\2\u0a02\u0a00\3\2\2\2\u0a03\u0a06\3\2\2\2"+
		"\u0a04\u0a02\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u0121\3\2\2\2\u0a06\u0a04"+
		"\3\2\2\2\u0a07\u0a28\7\u0089\2\2\u0a08\u0a28\7\u0152\2\2\u0a09\u0a0a\7"+
		"\u00ca\2\2\u0a0a\u0a0b\5\u033e\u01a0\2\u0a0b\u0a0c\5\u04ca\u0266\2\u0a0c"+
		"\u0a28\3\2\2\2\u0a0d\u0a0e\7\u014a\2\2\u0a0e\u0a0f\5\u033e\u01a0\2\u0a0f"+
		"\u0a10\5\u04ca\u0266\2\u0a10\u0a28\3\2\2\2\u0a11\u0a28\7\u00b2\2\2\u0a12"+
		"\u0a28\7\u00fe\2\2\u0a13\u0a14\7\u0173\2\2\u0a14\u0a15\5\u033e\u01a0\2"+
		"\u0a15\u0a16\5\u04ca\u0266\2\u0a16\u0a28\3\2\2\2\u0a17\u0a18\7\u00dd\2"+
		"\2\u0a18\u0a19\5\u033e\u01a0\2\u0a19\u0a1a\5\u04ca\u0266\2\u0a1a\u0a28"+
		"\3\2\2\2\u0a1b\u0a1c\7\u00ef\2\2\u0a1c\u0a1d\7\u0173\2\2\u0a1d\u0a28\5"+
		"\u0160\u00b1\2\u0a1e\u0a1f\7\u00ef\2\2\u0a1f\u0a20\7\u0173\2\2\u0a20\u0a28"+
		"\7\13\2\2\u0a21\u0a22\7\u00ef\2\2\u0a22\u0a23\7\u0145\2\2\u0a23\u0a24"+
		"\7\u014a\2\2\u0a24\u0a28\5\u0160\u00b1\2\u0a25\u0a26\7\u00d9\2\2\u0a26"+
		"\u0a28\5\u04ca\u0266\2\u0a27\u0a07\3\2\2\2\u0a27\u0a08\3\2\2\2\u0a27\u0a09"+
		"\3\2\2\2\u0a27\u0a0d\3\2\2\2\u0a27\u0a11\3\2\2\2\u0a27\u0a12\3\2\2\2\u0a27"+
		"\u0a13\3\2\2\2\u0a27\u0a17\3\2\2\2\u0a27\u0a1b\3\2\2\2\u0a27\u0a1e\3\2"+
		"\2\2\u0a27\u0a21\3\2\2\2\u0a27\u0a25\3\2\2\2\u0a28\u0123\3\2\2\2\u0a29"+
		"\u0a2c\7\u0089\2\2\u0a2a\u0a2c\3\2\2\2\u0a2b\u0a29\3\2\2\2\u0a2b\u0a2a"+
		"\3\2\2\2\u0a2c\u0125\3\2\2\2\u0a2d\u0a2e\7\u01e5\2\2\u0a2e\u0a31\7\u0152"+
		"\2\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2d\3\2\2\2\u0a30\u0a2f\3\2\2\2\u0a31"+
		"\u0127\3\2\2\2\u0a32\u0a33\5\u012a\u0096\2\u0a33\u0a34\7\u00cb\2\2\u0a34"+
		"\u0a35\5\u04ca\u0266\2\u0a35\u0a38\3\2\2\2\u0a36\u0a38\3\2\2\2\u0a37\u0a32"+
		"\3\2\2\2\u0a37\u0a36\3\2\2\2\u0a38\u0129\3\2\2\2\u0a39\u0a3c\7\u01d3\2"+
		"\2\u0a3a\u0a3c\3\2\2\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3a\3\2\2\2\u0a3c\u012b"+
		"\3\2\2\2\u0a3d\u0a3e\b\u0097\1\2\u0a3e\u0a3f\5\u012e\u0098\2\u0a3f\u0a45"+
		"\3\2\2\2\u0a40\u0a41\f\3\2\2\u0a41\u0a42\7\b\2\2\u0a42\u0a44\5\u012e\u0098"+
		"\2\u0a43\u0a40\3\2\2\2\u0a44\u0a47\3\2\2\2\u0a45\u0a43\3\2\2\2\u0a45\u0a46"+
		"\3\2\2\2\u0a46\u012d\3\2\2\2\u0a47\u0a45\3\2\2\2\u0a48\u0a49\5\u04d4\u026b"+
		"\2\u0a49\u0a4a\5\u0130\u0099\2\u0a4a\u012f\3\2\2\2\u0a4b\u0a54\5\u00e0"+
		"q\2\u0a4c\u0a54\5\u0192\u00ca\2\u0a4d\u0a54\7\13\2\2\u0a4e\u0a4f\7\r\2"+
		"\2\u0a4f\u0a50\5\u0132\u009a\2\u0a50\u0a51\7\7\2\2\u0a51\u0a54\3\2\2\2"+
		"\u0a52\u0a54\3\2\2\2\u0a53\u0a4b\3\2\2\2\u0a53\u0a4c\3\2\2\2\u0a53\u0a4d"+
		"\3\2\2\2\u0a53\u0a4e\3\2\2\2\u0a53\u0a52\3\2\2\2\u0a54\u0131\3\2\2\2\u0a55"+
		"\u0a56\b\u009a\1\2\u0a56\u0a57\5\u0134\u009b\2\u0a57\u0a5d\3\2\2\2\u0a58"+
		"\u0a59\f\3\2\2\u0a59\u0a5a\7\b\2\2\u0a5a\u0a5c\5\u0134\u009b\2\u0a5b\u0a58"+
		"\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e"+
		"\u0133\3\2\2\2\u0a5f\u0a5d\3\2\2\2\u0a60\u0a61\5\u00e0q\2\u0a61\u0135"+
		"\3\2\2\2\u0a62\u0a63\7\u00b0\2\2\u0a63\u0a64\5\u0138\u009d\2\u0a64\u0a65"+
		"\7\u01b3\2\2\u0a65\u0a66\5\u04b4\u025b\2\u0a66\u0a67\7\r\2\2\u0a67\u0a68"+
		"\5\u013a\u009e\2\u0a68\u0a69\7\7\2\2\u0a69\u0a6a\5\u0174\u00bb\2\u0a6a"+
		"\u0a6b\5\u0176\u00bc\2\u0a6b\u0a6c\5\u0178\u00bd\2\u0a6c\u0a6d\5\u017a"+
		"\u00be\2\u0a6d\u0a97\3\2\2\2\u0a6e\u0a6f\7\u00b0\2\2\u0a6f\u0a70\5\u0138"+
		"\u009d\2\u0a70\u0a71\7\u01b3\2\2\u0a71\u0a72\7\u0102\2\2\u0a72\u0a73\7"+
		"\u0145\2\2\u0a73\u0a74\7\u00e3\2\2\u0a74\u0a75\5\u04b4\u025b\2\u0a75\u0a76"+
		"\7\r\2\2\u0a76\u0a77\5\u013a\u009e\2\u0a77\u0a78\7\7\2\2\u0a78\u0a79\5"+
		"\u0174\u00bb\2\u0a79\u0a7a\5\u0176\u00bc\2\u0a7a\u0a7b\5\u0178\u00bd\2"+
		"\u0a7b\u0a7c\5\u017a\u00be\2\u0a7c\u0a97\3\2\2\2\u0a7d\u0a7e\7\u00b0\2"+
		"\2\u0a7e\u0a7f\5\u0138\u009d\2\u0a7f\u0a80\7\u01b3\2\2\u0a80\u0a81\5\u04b4"+
		"\u025b\2\u0a81\u0a82\7\u014f\2\2\u0a82\u0a83\5\u0250\u0129\2\u0a83\u0a84"+
		"\5\u013c\u009f\2\u0a84\u0a85\5\u0176\u00bc\2\u0a85\u0a86\5\u0178\u00bd"+
		"\2\u0a86\u0a87\5\u017a\u00be\2\u0a87\u0a97\3\2\2\2\u0a88\u0a89\7\u00b0"+
		"\2\2\u0a89\u0a8a\5\u0138\u009d\2\u0a8a\u0a8b\7\u01b3\2\2\u0a8b\u0a8c\7"+
		"\u0102\2\2\u0a8c\u0a8d\7\u0145\2\2\u0a8d\u0a8e\7\u00e3\2\2\u0a8e\u0a8f"+
		"\5\u04b4\u025b\2\u0a8f\u0a90\7\u014f\2\2\u0a90\u0a91\5\u0250\u0129\2\u0a91"+
		"\u0a92\5\u013c\u009f\2\u0a92\u0a93\5\u0176\u00bc\2\u0a93\u0a94\5\u0178"+
		"\u00bd\2\u0a94\u0a95\5\u017a\u00be\2\u0a95\u0a97\3\2\2\2\u0a96\u0a62\3"+
		"\2\2\2\u0a96\u0a6e\3\2\2\2\u0a96\u0a7d\3\2\2\2\u0a96\u0a88\3\2\2\2\u0a97"+
		"\u0137\3\2\2\2\u0a98\u0aa5\7\u01b8\2\2\u0a99\u0aa5\7\u01b6\2\2\u0a9a\u0a9b"+
		"\7\u0130\2\2\u0a9b\u0aa5\7\u01b8\2\2\u0a9c\u0a9d\7\u0130\2\2\u0a9d\u0aa5"+
		"\7\u01b6\2\2\u0a9e\u0a9f\7\u00f7\2\2\u0a9f\u0aa5\7\u01b8\2\2\u0aa0\u0aa1"+
		"\7\u00f7\2\2\u0aa1\u0aa5\7\u01b6\2\2\u0aa2\u0aa5\7\u01cf\2\2\u0aa3\u0aa5"+
		"\3\2\2\2\u0aa4\u0a98\3\2\2\2\u0aa4\u0a99\3\2\2\2\u0aa4\u0a9a\3\2\2\2\u0aa4"+
		"\u0a9c\3\2\2\2\u0aa4\u0a9e\3\2\2\2\u0aa4\u0aa0\3\2\2\2\u0aa4\u0aa2\3\2"+
		"\2\2\u0aa4\u0aa3\3\2\2\2\u0aa5\u0139\3\2\2\2\u0aa6\u0aa9\5\u013e\u00a0"+
		"\2\u0aa7\u0aa9\3\2\2\2\u0aa8\u0aa6\3\2\2\2\u0aa8\u0aa7\3\2\2\2\u0aa9\u013b"+
		"\3\2\2\2\u0aaa\u0aab\7\r\2\2\u0aab\u0aac\5\u0140\u00a1\2\u0aac\u0aad\7"+
		"\7\2\2\u0aad\u0ab0\3\2\2\2\u0aae\u0ab0\3\2\2\2\u0aaf\u0aaa\3\2\2\2\u0aaf"+
		"\u0aae\3\2\2\2\u0ab0\u013d\3\2\2\2\u0ab1\u0ab2\b\u00a0\1\2\u0ab2\u0ab3"+
		"\5\u0142\u00a2\2\u0ab3\u0ab9\3\2\2\2\u0ab4\u0ab5\f\3\2\2\u0ab5\u0ab6\7"+
		"\b\2\2\u0ab6\u0ab8\5\u0142\u00a2\2\u0ab7\u0ab4\3\2\2\2\u0ab8\u0abb\3\2"+
		"\2\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u013f\3\2\2\2\u0abb"+
		"\u0ab9\3\2\2\2\u0abc\u0abd\b\u00a1\1\2\u0abd\u0abe\5\u0144\u00a3\2\u0abe"+
		"\u0ac4\3\2\2\2\u0abf\u0ac0\f\3\2\2\u0ac0\u0ac1\7\b\2\2\u0ac1\u0ac3\5\u0144"+
		"\u00a3\2\u0ac2\u0abf\3\2\2\2\u0ac3\u0ac6\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4"+
		"\u0ac5\3\2\2\2\u0ac5\u0141\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0acb\5\u0146"+
		"\u00a4\2\u0ac8\u0acb\5\u0152\u00aa\2\u0ac9\u0acb\5\u0158\u00ad\2\u0aca"+
		"\u0ac7\3\2\2\2\u0aca\u0ac8\3\2\2\2\u0aca\u0ac9\3\2\2\2\u0acb\u0143\3\2"+
		"\2\2\u0acc\u0acf\5\u0148\u00a5\2\u0acd\u0acf\5\u0158\u00ad\2\u0ace\u0acc"+
		"\3\2\2\2\u0ace\u0acd\3\2\2\2\u0acf\u0145\3\2\2\2\u0ad0\u0ad1\5\u04d0\u0269"+
		"\2\u0ad1\u0ad2\5\u040a\u0206\2\u0ad2\u0ad3\5\u01c6\u00e4\2\u0ad3\u0ad4"+
		"\5\u014a\u00a6\2\u0ad4\u0147\3\2\2\2\u0ad5\u0ad6\5\u04d0\u0269\2\u0ad6"+
		"\u0ad7\7\u01e5\2\2\u0ad7\u0ad8\7\u0157\2\2\u0ad8\u0ad9\5\u014a\u00a6\2"+
		"\u0ad9\u0149\3\2\2\2\u0ada\u0adf\b\u00a6\1\2\u0adb\u0adc\f\4\2\2\u0adc"+
		"\u0ade\5\u014c\u00a7\2\u0add\u0adb\3\2\2\2\u0ade\u0ae1\3\2\2\2\u0adf\u0add"+
		"\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u014b\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae2"+
		"\u0ae3\7\u00a9\2\2\u0ae3\u0ae4\5\u04b8\u025d\2\u0ae4\u0ae5\5\u014e\u00a8"+
		"\2\u0ae5\u0aeb\3\2\2\2\u0ae6\u0aeb\5\u014e\u00a8\2\u0ae7\u0aeb\5\u0150"+
		"\u00a9\2\u0ae8\u0ae9\7\u009f\2\2\u0ae9\u0aeb\5\u0250\u0129\2\u0aea\u0ae2"+
		"\3\2\2\2\u0aea\u0ae6\3\2\2\2\u0aea\u0ae7\3\2\2\2\u0aea\u0ae8\3\2\2\2\u0aeb"+
		"\u014d\3\2\2\2\u0aec\u0aed\7\u0145\2\2\u0aed\u0b07\7\u014a\2\2\u0aee\u0b07"+
		"\7\u014a\2\2\u0aef\u0af0\7\u01cc\2\2\u0af0\u0af1\5\u02cc\u0167\2\u0af1"+
		"\u0af2\5\u017c\u00bf\2\u0af2\u0b07\3\2\2\2\u0af3\u0af4\7\u016e\2\2\u0af4"+
		"\u0af5\7\u0120\2\2\u0af5\u0af6\5\u02cc\u0167\2\u0af6\u0af7\5\u017c\u00bf"+
		"\2\u0af7\u0b07\3\2\2\2\u0af8\u0af9\7\u0099\2\2\u0af9\u0afa\7\r\2\2\u0afa"+
		"\u0afb\5\u043a\u021e\2\u0afb\u0afc\7\7\2\2\u0afc\u0afd\5\u015c\u00af\2"+
		"\u0afd\u0b07\3\2\2\2\u0afe\u0aff\7\u00c4\2\2\u0aff\u0b07\5\u043c\u021f"+
		"\2\u0b00\u0b01\7\u017b\2\2\u0b01\u0b02\5\u04b4\u025b\2\u0b02\u0b03\5\u015e"+
		"\u00b0\2\u0b03\u0b04\5\u0164\u00b3\2\u0b04\u0b05\5\u016c\u00b7\2\u0b05"+
		"\u0b07\3\2\2\2\u0b06\u0aec\3\2\2\2\u0b06\u0aee\3\2\2\2\u0b06\u0aef\3\2"+
		"\2\2\u0b06\u0af3\3\2\2\2\u0b06\u0af8\3\2\2\2\u0b06\u0afe\3\2\2\2\u0b06"+
		"\u0b00\3\2\2\2\u0b07\u014f\3\2\2\2\u0b08\u0b10\7\u00c6\2\2\u0b09\u0b0a"+
		"\7\u0145\2\2\u0b0a\u0b10\7\u00c6\2\2\u0b0b\u0b0c\7\u010e\2\2\u0b0c\u0b10"+
		"\7\u00c7\2\2\u0b0d\u0b0e\7\u010e\2\2\u0b0e\u0b10\7\u0104\2\2\u0b0f\u0b08"+
		"\3\2\2\2\u0b0f\u0b09\3\2\2\2\u0b0f\u0b0b\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10"+
		"\u0151\3\2\2\2\u0b11\u0b12\7\u012c\2\2\u0b12\u0b13\5\u04b4\u025b\2\u0b13"+
		"\u0b14\5\u0154\u00ab\2\u0b14\u0153\3\2\2\2\u0b15\u0b1e\b\u00ab\1\2\u0b16"+
		"\u0b17\f\5\2\2\u0b17\u0b18\7\u0108\2\2\u0b18\u0b1d\5\u0156\u00ac\2\u0b19"+
		"\u0b1a\f\4\2\2\u0b1a\u0b1b\7\u00e0\2\2\u0b1b\u0b1d\5\u0156\u00ac\2\u0b1c"+
		"\u0b16\3\2\2\2\u0b1c\u0b19\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c\3\2"+
		"\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0155\3\2\2\2\u0b20\u0b1e\3\2\2\2\u0b21"+
		"\u0b22\t\f\2\2\u0b22\u0157\3\2\2\2\u0b23\u0b24\7\u00a9\2\2\u0b24\u0b25"+
		"\5\u04b8\u025d\2\u0b25\u0b26\5\u015a\u00ae\2\u0b26\u0b29\3\2\2\2\u0b27"+
		"\u0b29\5\u015a\u00ae\2\u0b28\u0b23\3\2\2\2\u0b28\u0b27\3\2\2\2\u0b29\u0159"+
		"\3\2\2\2\u0b2a\u0b2b\7\u0099\2\2\u0b2b\u0b2c\7\r\2\2\u0b2c\u0b2d\5\u043a"+
		"\u021e\2\u0b2d\u0b2e\7\7\2\2\u0b2e\u0b2f\5\u020a\u0106\2\u0b2f\u0b61\3"+
		"\2\2\2\u0b30\u0b31\7\u01cc\2\2\u0b31\u0b32\7\r\2\2\u0b32\u0b33\5\u0160"+
		"\u00b1\2\u0b33\u0b34\7\7\2\2\u0b34\u0b35\5\u02cc\u0167\2\u0b35\u0b36\5"+
		"\u017c\u00bf\2\u0b36\u0b37\5\u020a\u0106\2\u0b37\u0b61\3\2\2\2\u0b38\u0b39"+
		"\7\u01cc\2\2\u0b39\u0b3a\5\u017e\u00c0\2\u0b3a\u0b3b\5\u020a\u0106\2\u0b3b"+
		"\u0b61\3\2\2\2\u0b3c\u0b3d\7\u016e\2\2\u0b3d\u0b3e\7\u0120\2\2\u0b3e\u0b3f"+
		"\7\r\2\2\u0b3f\u0b40\5\u0160\u00b1\2\u0b40\u0b41\7\7\2\2\u0b41\u0b42\5"+
		"\u02cc\u0167\2\u0b42\u0b43\5\u017c\u00bf\2\u0b43\u0b44\5\u020a\u0106\2"+
		"\u0b44\u0b61\3\2\2\2\u0b45\u0b46\7\u016e\2\2\u0b46\u0b47\7\u0120\2\2\u0b47"+
		"\u0b48\5\u017e\u00c0\2\u0b48\u0b49\5\u020a\u0106\2\u0b49\u0b61\3\2\2\2"+
		"\u0b4a\u0b4b\7\u00df\2\2\u0b4b\u0b4c\5\u029e\u0150\2\u0b4c\u0b4d\7\r\2"+
		"\2\u0b4d\u0b4e\5\u0166\u00b4\2\u0b4e\u0b4f\7\7\2\2\u0b4f\u0b50\5\u02cc"+
		"\u0167\2\u0b50\u0b51\5\u017c\u00bf\2\u0b51\u0b52\5\u016a\u00b6\2\u0b52"+
		"\u0b53\5\u020a\u0106\2\u0b53\u0b61\3\2\2\2\u0b54\u0b55\7\u00f0\2\2\u0b55"+
		"\u0b56\7\u0120\2\2\u0b56\u0b57\7\r\2\2\u0b57\u0b58\5\u0160\u00b1\2\u0b58"+
		"\u0b59\7\7\2\2\u0b59\u0b5a\7\u017b\2\2\u0b5a\u0b5b\5\u04b4\u025b\2\u0b5b"+
		"\u0b5c\5\u015e\u00b0\2\u0b5c\u0b5d\5\u0164\u00b3\2\u0b5d\u0b5e\5\u016c"+
		"\u00b7\2\u0b5e\u0b5f\5\u020a\u0106\2\u0b5f\u0b61\3\2\2\2\u0b60\u0b2a\3"+
		"\2\2\2\u0b60\u0b30\3\2\2\2\u0b60\u0b38\3\2\2\2\u0b60\u0b3c\3\2\2\2\u0b60"+
		"\u0b45\3\2\2\2\u0b60\u0b4a\3\2\2\2\u0b60\u0b54\3\2\2\2\u0b61\u015b\3\2"+
		"\2\2\u0b62\u0b63\7\u0143\2\2\u0b63\u0b66\7\u010c\2\2\u0b64\u0b66\3\2\2"+
		"\2\u0b65\u0b62\3\2\2\2\u0b65\u0b64\3\2\2\2\u0b66\u015d\3\2\2\2\u0b67\u0b68"+
		"\7\r\2\2\u0b68\u0b69\5\u0160\u00b1\2\u0b69\u0b6a\7\7\2\2\u0b6a\u0b6d\3"+
		"\2\2\2\u0b6b\u0b6d\3\2\2\2\u0b6c\u0b67\3\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d"+
		"\u015f\3\2\2\2\u0b6e\u0b6f\b\u00b1\1\2\u0b6f\u0b70\5\u0162\u00b2\2\u0b70"+
		"\u0b76\3\2\2\2\u0b71\u0b72\f\3\2\2\u0b72\u0b73\7\b\2\2\u0b73\u0b75\5\u0162"+
		"\u00b2\2\u0b74\u0b71\3\2\2\2\u0b75\u0b78\3\2\2\2\u0b76\u0b74\3\2\2\2\u0b76"+
		"\u0b77\3\2\2\2\u0b77\u0161\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b79\u0b7a\5\u04d0"+
		"\u0269\2\u0b7a\u0163\3\2\2\2\u0b7b\u0b7c\7\u0136\2\2\u0b7c\u0b83\7\u00f4"+
		"\2\2\u0b7d\u0b7e\7\u0136\2\2\u0b7e\u0b83\7\u0162\2\2\u0b7f\u0b80\7\u0136"+
		"\2\2\u0b80\u0b83\7\u01a1\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b7b\3\2\2\2\u0b82"+
		"\u0b7d\3\2\2\2\u0b82\u0b7f\3\2\2\2\u0b82\u0b81\3\2\2\2\u0b83\u0165\3\2"+
		"\2\2\u0b84\u0b85\b\u00b4\1\2\u0b85\u0b86\5\u0168\u00b5\2\u0b86\u0b8c\3"+
		"\2\2\2\u0b87\u0b88\f\3\2\2\u0b88\u0b89\7\b\2\2\u0b89\u0b8b\5\u0168\u00b5"+
		"\2\u0b8a\u0b87\3\2\2\2\u0b8b\u0b8e\3\2\2\2\u0b8c\u0b8a\3\2\2\2\u0b8c\u0b8d"+
		"\3\2\2\2\u0b8d\u0167\3\2\2\2\u0b8e\u0b8c\3\2\2\2\u0b8f\u0b90\5\u02a2\u0152"+
		"\2\u0b90\u0b91\7\u01e5\2\2\u0b91\u0b92\5\u02e0\u0171\2\u0b92\u0b9b\3\2"+
		"\2\2\u0b93\u0b94\5\u02a2\u0152\2\u0b94\u0b95\7\u01e5\2\2\u0b95\u0b96\7"+
		"\u0155\2\2\u0b96\u0b97\7\r\2\2\u0b97\u0b98\5\u02e0\u0171\2\u0b98\u0b99"+
		"\7\7\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b8f\3\2\2\2\u0b9a\u0b93\3\2\2\2\u0b9b"+
		"\u0169\3\2\2\2\u0b9c\u0b9d\7\u01e2\2\2\u0b9d\u0b9e\7\r\2\2\u0b9e\u0b9f"+
		"\5\u043a\u021e\2\u0b9f\u0ba0\7\7\2\2\u0ba0\u0ba3\3\2\2\2\u0ba1\u0ba3\3"+
		"\2\2\2\u0ba2\u0b9c\3\2\2\2\u0ba2\u0ba1\3\2\2\2\u0ba3\u016b\3\2\2\2\u0ba4"+
		"\u0bae\5\u016e\u00b8\2\u0ba5\u0bae\5\u0170\u00b9\2\u0ba6\u0ba7\5\u016e"+
		"\u00b8\2\u0ba7\u0ba8\5\u0170\u00b9\2\u0ba8\u0bae\3\2\2\2\u0ba9\u0baa\5"+
		"\u0170\u00b9\2\u0baa\u0bab\5\u016e\u00b8\2\u0bab\u0bae\3\2\2\2\u0bac\u0bae"+
		"\3\2\2\2\u0bad\u0ba4\3\2\2\2\u0bad\u0ba5\3\2\2\2\u0bad\u0ba6\3\2\2\2\u0bad"+
		"\u0ba9\3\2\2\2\u0bad\u0bac\3\2\2\2\u0bae\u016d\3\2\2\2\u0baf\u0bb0\7\u0153"+
		"\2\2\u0bb0\u0bb1\7\u01d1\2\2\u0bb1\u0bb2\5\u0172\u00ba\2\u0bb2\u016f\3"+
		"\2\2\2\u0bb3\u0bb4\7\u0153\2\2\u0bb4\u0bb5\7\u00c9\2\2\u0bb5\u0bb6\5\u0172"+
		"\u00ba\2\u0bb6\u0171\3\2\2\2\u0bb7\u0bb8\7\u0143\2\2\u0bb8\u0bc0\7n\2"+
		"\2\u0bb9\u0bc0\7\u0185\2\2\u0bba\u0bc0\7\u0090\2\2\u0bbb\u0bbc\7\u019c"+
		"\2\2\u0bbc\u0bc0\7\u014a\2\2\u0bbd\u0bbe\7\u019c\2\2\u0bbe\u0bc0\7\u00c4"+
		"\2\2\u0bbf\u0bb7\3\2\2\2\u0bbf\u0bb9\3\2\2\2\u0bbf\u0bba\3\2\2\2\u0bbf"+
		"\u0bbb\3\2\2\2\u0bbf\u0bbd\3\2\2\2\u0bc0\u0173\3\2\2\2\u0bc1\u0bc2\7\u010d"+
		"\2\2\u0bc2\u0bc3\7\r\2\2\u0bc3\u0bc4\5\u04b2\u025a\2\u0bc4\u0bc5\7\7\2"+
		"\2\u0bc5\u0bc8\3\2\2\2\u0bc6\u0bc8\3\2\2\2\u0bc7\u0bc1\3\2\2\2\u0bc7\u0bc6"+
		"\3\2\2\2\u0bc8\u0175\3\2\2\2\u0bc9\u0bca\7\u01e5\2\2\u0bca\u0bd1\5\u0108"+
		"\u0085\2\u0bcb\u0bcc\7\u01e5\2\2\u0bcc\u0bd1\7\u0152\2\2\u0bcd\u0bce\7"+
		"\u01e6\2\2\u0bce\u0bd1\7\u0152\2\2\u0bcf\u0bd1\3\2\2\2\u0bd0\u0bc9\3\2"+
		"\2\2\u0bd0\u0bcb\3\2\2\2\u0bd0\u0bcd\3\2\2\2\u0bd0\u0bcf\3\2\2\2\u0bd1"+
		"\u0177\3\2\2\2\u0bd2\u0bd3\7\u0153\2\2\u0bd3\u0bd4\7\u00a4\2\2\u0bd4\u0bdf"+
		"\7\u00d5\2\2\u0bd5\u0bd6\7\u0153\2\2\u0bd6\u0bd7\7\u00a4\2\2\u0bd7\u0bd8"+
		"\7\u00c9\2\2\u0bd8\u0bdf\7\u018d\2\2\u0bd9\u0bda\7\u0153\2\2\u0bda\u0bdb"+
		"\7\u00a4\2\2\u0bdb\u0bdc\7\u016d\2\2\u0bdc\u0bdf\7\u018d\2\2\u0bdd\u0bdf"+
		"\3\2\2\2\u0bde\u0bd2\3\2\2\2\u0bde\u0bd5\3\2\2\2\u0bde\u0bd9\3\2\2\2\u0bde"+
		"\u0bdd\3\2\2\2\u0bdf\u0179\3\2\2\2\u0be0\u0be1\7\u01b5\2\2\u0be1\u0be4"+
		"\5\u04b8\u025d\2\u0be2\u0be4\3\2\2\2\u0be3\u0be0\3\2\2\2\u0be3\u0be2\3"+
		"\2\2\2\u0be4\u017b\3\2\2\2\u0be5\u0be6\7\u01d3\2\2\u0be6\u0be7\7\u010a"+
		"\2\2\u0be7\u0be8\7\u01b5\2\2\u0be8\u0beb\5\u04b8\u025d\2\u0be9\u0beb\3"+
		"\2\2\2\u0bea\u0be5\3\2\2\2\u0bea\u0be9\3\2\2\2\u0beb\u017d\3\2\2\2\u0bec"+
		"\u0bed\7\u01d3\2\2\u0bed\u0bee\7\u010a\2\2\u0bee\u0bef\5\u04c0\u0261\2"+
		"\u0bef\u017f\3\2\2\2\u0bf0\u0bf1\7\u00b0\2\2\u0bf1\u0bf2\5\u0138\u009d"+
		"\2\u0bf2\u0bf3\7\u01b3\2\2\u0bf3\u0bf4\5\u0182\u00c2\2\u0bf4\u0bf5\7|"+
		"\2\2\u0bf5\u0bf6\5\u03a0\u01d1\2\u0bf6\u0bf7\5\u0184\u00c3\2\u0bf7\u0181"+
		"\3\2\2\2\u0bf8\u0bf9\5\u04b4\u025b\2\u0bf9\u0bfa\5\u015e\u00b0\2\u0bfa"+
		"\u0bfb\5\u0176\u00bc\2\u0bfb\u0bfc\5\u0178\u00bd\2\u0bfc\u0bfd\5\u017a"+
		"\u00be\2\u0bfd\u0183\3\2\2\2\u0bfe\u0bff\7\u01e5\2\2\u0bff\u0c05\7\u00bd"+
		"\2\2\u0c00\u0c01\7\u01e5\2\2\u0c01\u0c02\7\u0143\2\2\u0c02\u0c05\7\u00bd"+
		"\2\2\u0c03\u0c05\3\2\2\2\u0c04\u0bfe\3\2\2\2\u0c04\u0c00\3\2\2\2\u0c04"+
		"\u0c03\3\2\2\2\u0c05\u0185\3\2\2\2\u0c06\u0c07\7\u00b0\2\2\u0c07\u0c08"+
		"\5\u0138\u009d\2\u0c08\u0c09\7\u0196\2\2\u0c09\u0c0a\5\u04b4\u025b\2\u0c0a"+
		"\u0c0b\5\u018a\u00c6\2\u0c0b\u0187\3\2\2\2\u0c0c\u0c0d\7u\2\2\u0c0d\u0c0e"+
		"\7\u0196\2\2\u0c0e\u0c0f\5\u04b4\u025b\2\u0c0f\u0c10\5\u018c\u00c7\2\u0c10"+
		"\u0c19\3\2\2\2\u0c11\u0c12\7u\2\2\u0c12\u0c13\7\u0196\2\2\u0c13\u0c14"+
		"\7\u0102\2\2\u0c14\u0c15\7\u00e3\2\2\u0c15\u0c16\5\u04b4\u025b\2\u0c16"+
		"\u0c17\5\u018c\u00c7\2\u0c17\u0c19\3\2\2\2\u0c18\u0c0c\3\2\2\2\u0c18\u0c11"+
		"\3\2\2\2\u0c19\u0189\3\2\2\2\u0c1a\u0c1d\5\u018c\u00c7\2\u0c1b\u0c1d\3"+
		"\2\2\2\u0c1c\u0c1a\3\2\2\2\u0c1c\u0c1b\3\2\2\2\u0c1d\u018b\3\2\2\2\u0c1e"+
		"\u0c1f\b\u00c7\1\2\u0c1f\u0c20\5\u018e\u00c8\2\u0c20\u0c25\3\2\2\2\u0c21"+
		"\u0c22\f\3\2\2\u0c22\u0c24\5\u018e\u00c8\2\u0c23\u0c21\3\2\2\2\u0c24\u0c27"+
		"\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u018d\3\2\2\2\u0c27"+
		"\u0c25\3\2\2\2\u0c28\u0c29\7\u008e\2\2\u0c29\u0c48\5\u0192\u00ca\2\u0c2a"+
		"\u0c48\7\u00bc\2\2\u0c2b\u0c2c\7\u0143\2\2\u0c2c\u0c48\7\u00bc\2\2\u0c2d"+
		"\u0c2e\7\u0109\2\2\u0c2e\u0c2f\5\u0190\u00c9\2\u0c2f\u0c30\5\u0192\u00ca"+
		"\2\u0c30\u0c48\3\2\2\2\u0c31\u0c32\7\u0137\2\2\u0c32\u0c48\5\u0192\u00ca"+
		"\2\u0c33\u0c34\7\u0139\2\2\u0c34\u0c48\5\u0192\u00ca\2\u0c35\u0c36\7\u0143"+
		"\2\2\u0c36\u0c48\7\u0137\2\2\u0c37\u0c38\7\u0143\2\2\u0c38\u0c48\7\u0139"+
		"\2\2\u0c39\u0c3a\7\u015f\2\2\u0c3a\u0c3b\7\u008d\2\2\u0c3b\u0c48\5\u0250"+
		"\u0129\2\u0c3c\u0c3e\7\u01a7\2\2\u0c3d\u0c3f\7\u01e5\2\2\u0c3e\u0c3d\3"+
		"\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c48\5\u0192\u00ca"+
		"\2\u0c41\u0c48\7\u0184\2\2\u0c42\u0c44\7\u0184\2\2\u0c43\u0c45\7\u01e5"+
		"\2\2\u0c44\u0c43\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46"+
		"\u0c48\5\u0192\u00ca\2\u0c47\u0c28\3\2\2\2\u0c47\u0c2a\3\2\2\2\u0c47\u0c2b"+
		"\3\2\2\2\u0c47\u0c2d\3\2\2\2\u0c47\u0c31\3\2\2\2\u0c47\u0c33\3\2\2\2\u0c47"+
		"\u0c35\3\2\2\2\u0c47\u0c37\3\2\2\2\u0c47\u0c39\3\2\2\2\u0c47\u0c3c\3\2"+
		"\2\2\u0c47\u0c41\3\2\2\2\u0c47\u0c42\3\2\2\2\u0c48\u018f\3\2\2\2\u0c49"+
		"\u0c4c\7\u008d\2\2\u0c4a\u0c4c\3\2\2\2\u0c4b\u0c49\3\2\2\2\u0c4b\u0c4a"+
		"\3\2\2\2\u0c4c\u0191\3\2\2\2\u0c4d\u0c52\7\u0231\2\2\u0c4e\u0c4f\7\n\2"+
		"\2\u0c4f\u0c52\7\u0231\2\2\u0c50\u0c52\5\u04ce\u0268\2\u0c51\u0c4d\3\2"+
		"\2\2\u0c51\u0c4e\3\2\2\2\u0c51\u0c50\3\2\2\2\u0c52\u0193\3\2\2\2\u0c53"+
		"\u0c54\b\u00cb\1\2\u0c54\u0c55\5\u0192\u00ca\2\u0c55\u0c5b\3\2\2\2\u0c56"+
		"\u0c57\f\3\2\2\u0c57\u0c58\7\b\2\2\u0c58\u0c5a\5\u0192\u00ca\2\u0c59\u0c56"+
		"\3\2\2\2\u0c5a\u0c5d\3\2\2\2\u0c5b\u0c59\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c"+
		"\u0195\3\2\2\2\u0c5d\u0c5b\3\2\2\2\u0c5e\u0c5f\7\u00b0\2\2\u0c5f\u0c60"+
		"\5\u02ae\u0158\2\u0c60\u0c61\5\u0198\u00cd\2\u0c61\u0c62\5\u01a4\u00d3"+
		"\2\u0c62\u0c63\7\u0122\2\2\u0c63\u0c64\5\u00e6t\2\u0c64\u0c71\3\2\2\2"+
		"\u0c65\u0c66\7\u00b0\2\2\u0c66\u0c67\5\u02ae\u0158\2\u0c67\u0c68\5\u0198"+
		"\u00cd\2\u0c68\u0c69\5\u01a4\u00d3\2\u0c69\u0c6a\7\u0122\2\2\u0c6a\u0c6b"+
		"\5\u00e6t\2\u0c6b\u0c6c\7\u00fc\2\2\u0c6c\u0c6d\5\u019a\u00ce\2\u0c6d"+
		"\u0c6e\5\u019c\u00cf\2\u0c6e\u0c6f\5\u01a0\u00d1\2\u0c6f\u0c71\3\2\2\2"+
		"\u0c70\u0c5e\3\2\2\2\u0c70\u0c65\3\2\2\2\u0c71\u0197\3\2\2\2\u0c72\u0c75"+
		"\7\u01c5\2\2\u0c73\u0c75\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c73\3\2\2"+
		"\2\u0c75\u0199\3\2\2\2\u0c76\u0c7b\5\u04b8\u025d\2\u0c77\u0c78\5\u04b8"+
		"\u025d\2\u0c78\u0c79\5\u0252\u012a\2\u0c79\u0c7b\3\2\2\2\u0c7a\u0c76\3"+
		"\2\2\2\u0c7a\u0c77\3\2\2\2\u0c7b\u019b\3\2\2\2\u0c7c\u0c7d\7\u010f\2\2"+
		"\u0c7d\u0c80\5\u019a\u00ce\2\u0c7e\u0c80\3\2\2\2\u0c7f\u0c7c\3\2\2\2\u0c7f"+
		"\u0c7e\3\2\2\2\u0c80\u019d\3\2\2\2\u0c81\u0c82\7\u01d7\2\2\u0c82\u0c86"+
		"\5\u019a\u00ce\2\u0c83\u0c84\7\u0143\2\2\u0c84\u0c86\7\u01d7\2\2\u0c85"+
		"\u0c81\3\2\2\2\u0c85\u0c83\3\2\2\2\u0c86\u019f\3\2\2\2\u0c87\u0c8a\5\u019e"+
		"\u00d0\2\u0c88\u0c8a\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c89\u0c88\3\2\2\2\u0c8a"+
		"\u01a1\3\2\2\2\u0c8b\u0c8c\7\u00d5\2\2\u0c8c\u0c8d\5\u01a4\u00d3\2\u0c8d"+
		"\u0c8e\7\u0122\2\2\u0c8e\u0c8f\5\u00e6t\2\u0c8f\u0c90\5\u0102\u0082\2"+
		"\u0c90\u0c9a\3\2\2\2\u0c91\u0c92\7\u00d5\2\2\u0c92\u0c93\5\u01a4\u00d3"+
		"\2\u0c93\u0c94\7\u0122\2\2\u0c94\u0c95\7\u0102\2\2\u0c95\u0c96\7\u00e3"+
		"\2\2\u0c96\u0c97\5\u00e6t\2\u0c97\u0c98\5\u0102\u0082\2\u0c98\u0c9a\3"+
		"\2\2\2\u0c99\u0c8b\3\2\2\2\u0c99\u0c91\3\2\2\2\u0c9a\u01a3\3\2\2\2\u0c9b"+
		"\u0c9e\7\u0171\2\2\u0c9c\u0c9e\3\2\2\2\u0c9d\u0c9b\3\2\2\2\u0c9d\u0c9c"+
		"\3\2\2\2\u0c9e\u01a5\3\2\2\2\u0c9f\u0ca0\7\u00b0\2\2\u0ca0\u0ca1\7\u01b5"+
		"\2\2\u0ca1\u0ca2\5\u04b8\u025d\2\u0ca2\u0ca3\5\u01a8\u00d5\2\u0ca3\u0ca4"+
		"\7\u0133\2\2\u0ca4\u0ca5\5\u04ca\u0266\2\u0ca5\u01a7\3\2\2\2\u0ca6\u0ca7"+
		"\7\u0160\2\2\u0ca7\u0caa\5\u04b8\u025d\2\u0ca8\u0caa\3\2\2\2\u0ca9\u0ca6"+
		"\3\2\2\2\u0ca9\u0ca8\3\2\2\2\u0caa\u01a9\3\2\2\2\u0cab\u0cac\7\u00d5\2"+
		"\2\u0cac\u0cad\7\u01b5\2\2\u0cad\u0cb4\5\u04b8\u025d\2\u0cae\u0caf\7\u00d5"+
		"\2\2\u0caf\u0cb0\7\u01b5\2\2\u0cb0\u0cb1\7\u0102\2\2\u0cb1\u0cb2\7\u00e3"+
		"\2\2\u0cb2\u0cb4\5\u04b8\u025d\2\u0cb3\u0cab\3\2\2\2\u0cb3\u0cae\3\2\2"+
		"\2\u0cb4\u01ab\3\2\2\2\u0cb5\u0cb6\7\u00b0\2\2\u0cb6\u0cb7\7\u00e5\2\2"+
		"\u0cb7\u0cb9\5\u04b8\u025d\2\u0cb8\u0cba\7\u01e5\2\2\u0cb9\u0cb8\3\2\2"+
		"\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\5\u01ae\u00d8\2"+
		"\u0cbc\u0cc9\3\2\2\2\u0cbd\u0cbe\7\u00b0\2\2\u0cbe\u0cbf\7\u00e5\2\2\u0cbf"+
		"\u0cc0\7\u0102\2\2\u0cc0\u0cc1\7\u0145\2\2\u0cc1\u0cc2\7\u00e3\2\2\u0cc2"+
		"\u0cc4\5\u04b8\u025d\2\u0cc3\u0cc5\7\u01e5\2\2\u0cc4\u0cc3\3\2\2\2\u0cc4"+
		"\u0cc5\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\5\u01ae\u00d8\2\u0cc7\u0cc9"+
		"\3\2\2\2\u0cc8\u0cb5\3\2\2\2\u0cc8\u0cbd\3\2\2\2\u0cc9\u01ad\3\2\2\2\u0cca"+
		"\u0ccf\b\u00d8\1\2\u0ccb\u0ccc\f\4\2\2\u0ccc\u0cce\5\u01b0\u00d9\2\u0ccd"+
		"\u0ccb\3\2\2\2\u0cce\u0cd1\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cd0\3\2"+
		"\2\2\u0cd0\u01af\3\2\2\2\u0cd1\u0ccf\3\2\2\2\u0cd2\u0cd3\7\u0190\2\2\u0cd3"+
		"\u0cd9\5\u04b8\u025d\2\u0cd4\u0cd5\7\u01de\2\2\u0cd5\u0cd9\5\u00e6t\2"+
		"\u0cd6\u0cd7\7\u00f3\2\2\u0cd7\u0cd9\5\u00e6t\2\u0cd8\u0cd2\3\2\2\2\u0cd8"+
		"\u0cd4\3\2\2\2\u0cd8\u0cd6\3\2\2\2\u0cd9\u01b1\3\2\2\2\u0cda\u0cdb\7u"+
		"\2\2\u0cdb\u0cdc\7\u00e5\2\2\u0cdc\u0cdd\5\u04b8\u025d\2\u0cdd\u0cde\7"+
		"\u01d1\2\2\u0cde\u0cdf\5\u01b4\u00db\2\u0cdf\u01b3\3\2\2\2\u0ce0\u0ce5"+
		"\b\u00db\1\2\u0ce1\u0ce2\f\4\2\2\u0ce2\u0ce4\5\u01b6\u00dc\2\u0ce3\u0ce1"+
		"\3\2\2\2\u0ce4\u0ce7\3\2\2\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6"+
		"\u01b5\3\2\2\2\u0ce7\u0ce5\3\2\2\2\u0ce8\u0ce9\7\u01bd\2\2\u0ce9\u0cea"+
		"\5\u00e6t\2\u0cea\u01b7\3\2\2\2\u0ceb\u0cec\7u\2\2\u0cec\u0ced\7\u00e5"+
		"\2\2\u0ced\u0cee\5\u04b8\u025d\2\u0cee\u0cef\5\u00c6d\2\u0cef\u0cf0\7"+
		"r\2\2\u0cf0\u0cf1\5\u04c4\u0263\2\u0cf1\u0cf2\5\u021e\u0110\2\u0cf2\u0d9e"+
		"\3\2\2\2\u0cf3\u0cf4\7u\2\2\u0cf4\u0cf5\7\u00e5\2\2\u0cf5\u0cf6\5\u04b8"+
		"\u025d\2\u0cf6\u0cf7\5\u00c6d\2\u0cf7\u0cf8\7\u0093\2\2\u0cf8\u0cf9\7"+
		"\r\2\2\u0cf9\u0cfa\5\u040a\u0206\2\u0cfa\u0cfb\7|\2\2\u0cfb\u0cfc\5\u040a"+
		"\u0206\2\u0cfc\u0cfd\7\7\2\2\u0cfd\u0d9e\3\2\2\2\u0cfe\u0cff\7u\2\2\u0cff"+
		"\u0d00\7\u00e5\2\2\u0d00\u0d01\5\u04b8\u025d\2\u0d01\u0d02\5\u00c6d\2"+
		"\u0d02\u0d03\7\u00a0\2\2\u0d03\u0d04\5\u0250\u0129\2\u0d04\u0d9e\3\2\2"+
		"\2\u0d05\u0d06\7u\2\2\u0d06\u0d07\7\u00e5\2\2\u0d07\u0d08\5\u04b8\u025d"+
		"\2\u0d08\u0d09\5\u00c6d\2\u0d09\u0d0a\7\u00ad\2\2\u0d0a\u0d0b\5\u0250"+
		"\u0129\2\u0d0b\u0d9e\3\2\2\2\u0d0c\u0d0d\7u\2\2\u0d0d\u0d0e\7\u00e5\2"+
		"\2\u0d0e\u0d0f\5\u04b8\u025d\2\u0d0f\u0d10\5\u00c6d\2\u0d10\u0d11\7\u00d3"+
		"\2\2\u0d11\u0d12\5\u0250\u0129\2\u0d12\u0d9e\3\2\2\2\u0d13\u0d14\7u\2"+
		"\2\u0d14\u0d15\7\u00e5\2\2\u0d15\u0d16\5\u04b8\u025d\2\u0d16\u0d17\5\u00c6"+
		"d\2\u0d17\u0d18\7\u00f5\2\2\u0d18\u0d19\5\u0282\u0142\2\u0d19\u0d9e\3"+
		"\2\2\2\u0d1a\u0d1b\7u\2\2\u0d1b\u0d1c\7\u00e5\2\2\u0d1c\u0d1d\5\u04b8"+
		"\u025d\2\u0d1d\u0d1e\5\u00c6d\2\u0d1e\u0d1f\5\u01a4\u00d3\2\u0d1f\u0d20"+
		"\7\u0122\2\2\u0d20\u0d21\5\u04b8\u025d\2\u0d21\u0d9e\3\2\2\2\u0d22\u0d23"+
		"\7u\2\2\u0d23\u0d24\7\u00e5\2\2\u0d24\u0d25\5\u04b8\u025d\2\u0d25\u0d26"+
		"\5\u00c6d\2\u0d26\u0d27\7\u0155\2\2\u0d27\u0d28\5\u02e0\u0171\2\u0d28"+
		"\u0d29\5\u02de\u0170\2\u0d29\u0d9e\3\2\2\2\u0d2a\u0d2b\7u\2\2\u0d2b\u0d2c"+
		"\7\u00e5\2\2\u0d2c\u0d2d\5\u04b8\u025d\2\u0d2d\u0d2e\5\u00c6d\2\u0d2e"+
		"\u0d2f\7\u0155\2\2\u0d2f\u0d30\7\u009b\2\2\u0d30\u0d31\5\u0250\u0129\2"+
		"\u0d31\u0d32\7\u01d3\2\2\u0d32\u0d33\5\u04bc\u025f\2\u0d33\u0d9e\3\2\2"+
		"\2\u0d34\u0d35\7u\2\2\u0d35\u0d36\7\u00e5\2\2\u0d36\u0d37\5\u04b8\u025d"+
		"\2\u0d37\u0d38\5\u00c6d\2\u0d38\u0d39\7\u0155\2\2\u0d39\u0d3a\7\u00e9"+
		"\2\2\u0d3a\u0d3b\5\u0250\u0129\2\u0d3b\u0d3c\7\u01d3\2\2\u0d3c\u0d3d\5"+
		"\u04bc\u025f\2\u0d3d\u0d9e\3\2\2\2\u0d3e\u0d3f\7u\2\2\u0d3f\u0d40\7\u00e5"+
		"\2\2\u0d40\u0d41\5\u04b8\u025d\2\u0d41\u0d42\5\u00c6d\2\u0d42\u0d43\7"+
		"\u0190\2\2\u0d43\u0d44\5\u04b8\u025d\2\u0d44\u0d9e\3\2\2\2\u0d45\u0d46"+
		"\7u\2\2\u0d46\u0d47\7\u00e5\2\2\u0d47\u0d48\5\u04b8\u025d\2\u0d48\u0d49"+
		"\5\u00c6d\2\u0d49\u0d4a\7\u01b3\2\2\u0d4a\u0d4b\5\u0250\u0129\2\u0d4b"+
		"\u0d9e\3\2\2\2\u0d4c\u0d4d\7u\2\2\u0d4d\u0d4e\7\u00e5\2\2\u0d4e\u0d4f"+
		"\5\u04b8\u025d\2\u0d4f\u0d50\5\u00c6d\2\u0d50\u0d51\7\u01b9\2\2\u0d51"+
		"\u0d52\7\u0192\2\2\u0d52\u0d53\7\u0161\2\2\u0d53\u0d54\5\u0250\u0129\2"+
		"\u0d54\u0d9e\3\2\2\2\u0d55\u0d56\7u\2\2\u0d56\u0d57\7\u00e5\2\2\u0d57"+
		"\u0d58\5\u04b8\u025d\2\u0d58\u0d59\5\u00c6d\2\u0d59\u0d5a\7\u01b9\2\2"+
		"\u0d5a\u0d5b\7\u0192\2\2\u0d5b\u0d5c\7\u00cd\2\2\u0d5c\u0d5d\5\u0250\u0129"+
		"\2\u0d5d\u0d9e\3\2\2\2\u0d5e\u0d5f\7u\2\2\u0d5f\u0d60\7\u00e5\2\2\u0d60"+
		"\u0d61\5\u04b8\u025d\2\u0d61\u0d62\5\u00c6d\2\u0d62\u0d63\7\u01b9\2\2"+
		"\u0d63\u0d64\7\u0192\2\2\u0d64\u0d65\7\u01b7\2\2\u0d65\u0d66\5\u0250\u0129"+
		"\2\u0d66\u0d9e\3\2\2\2\u0d67\u0d68\7u\2\2\u0d68\u0d69\7\u00e5\2\2\u0d69"+
		"\u0d6a\5\u04b8\u025d\2\u0d6a\u0d6b\5\u00c6d\2\u0d6b\u0d6c\7\u01b9\2\2"+
		"\u0d6c\u0d6d\7\u0192\2\2\u0d6d\u0d6e\7\u00a7\2\2\u0d6e\u0d6f\5\u0250\u0129"+
		"\2\u0d6f\u0d9e\3\2\2\2\u0d70\u0d71\7u\2\2\u0d71\u0d72\7\u00e5\2\2\u0d72"+
		"\u0d73\5\u04b8\u025d\2\u0d73\u0d74\5\u00c6d\2\u0d74\u0d75\7\u0196\2\2"+
		"\u0d75\u0d76\5\u0250\u0129\2\u0d76\u0d9e\3\2\2\2\u0d77\u0d78\7u\2\2\u0d78"+
		"\u0d79\7\u00e5\2\2\u0d79\u0d7a\5\u04b8\u025d\2\u0d7a\u0d7b\5\u00c6d\2"+
		"\u0d7b\u0d7c\7\u01df\2\2\u0d7c\u0d7d\5\u0250\u0129\2\u0d7d\u0d9e\3\2\2"+
		"\2\u0d7e\u0d7f\7u\2\2\u0d7f\u0d80\7\u00e5\2\2\u0d80\u0d81\5\u04b8\u025d"+
		"\2\u0d81\u0d82\5\u00c6d\2\u0d82\u0d83\7\u00f0\2\2\u0d83\u0d84\7\u01b3"+
		"\2\2\u0d84\u0d85\5\u0250\u0129\2\u0d85\u0d9e\3\2\2\2\u0d86\u0d87\7u\2"+
		"\2\u0d87\u0d88\7\u00e5\2\2\u0d88\u0d89\5\u04b8\u025d\2\u0d89\u0d8a\5\u00c6"+
		"d\2\u0d8a\u0d8b\7\u00f0\2\2\u0d8b\u0d8c\7\u00bd\2\2\u0d8c\u0d8d\7\u01e8"+
		"\2\2\u0d8d\u0d8e\5\u04b8\u025d\2\u0d8e\u0d9e\3\2\2\2\u0d8f\u0d90\7u\2"+
		"\2\u0d90\u0d91\7\u00e5\2\2\u0d91\u0d92\5\u04b8\u025d\2\u0d92\u0d93\5\u00c6"+
		"d\2\u0d93\u0d94\7\u0199\2\2\u0d94\u0d95\5\u04b8\u025d\2\u0d95\u0d9e\3"+
		"\2\2\2\u0d96\u0d97\7u\2\2\u0d97\u0d98\7\u00e5\2\2\u0d98\u0d99\5\u04b8"+
		"\u025d\2\u0d99\u0d9a\5\u00c6d\2\u0d9a\u0d9b\7\u01c6\2\2\u0d9b\u0d9c\5"+
		"\u0250\u0129\2\u0d9c\u0d9e\3\2\2\2\u0d9d\u0ceb\3\2\2\2\u0d9d\u0cf3\3\2"+
		"\2\2\u0d9d\u0cfe\3\2\2\2\u0d9d\u0d05\3\2\2\2\u0d9d\u0d0c\3\2\2\2\u0d9d"+
		"\u0d13\3\2\2\2\u0d9d\u0d1a\3\2\2\2\u0d9d\u0d22\3\2\2\2\u0d9d\u0d2a\3\2"+
		"\2\2\u0d9d\u0d34\3\2\2\2\u0d9d\u0d3e\3\2\2\2\u0d9d\u0d45\3\2\2\2\u0d9d"+
		"\u0d4c\3\2\2\2\u0d9d\u0d55\3\2\2\2\u0d9d\u0d5e\3\2\2\2\u0d9d\u0d67\3\2"+
		"\2\2\u0d9d\u0d70\3\2\2\2\u0d9d\u0d77\3\2\2\2\u0d9d\u0d7e\3\2\2\2\u0d9d"+
		"\u0d86\3\2\2\2\u0d9d\u0d8f\3\2\2\2\u0d9d\u0d96\3\2\2\2\u0d9e\u01b9\3\2"+
		"\2\2\u0d9f\u0da0\7\u00b0\2\2\u0da0\u0da1\7\u00f0\2\2\u0da1\u0da2\7\u00bd"+
		"\2\2\u0da2\u0da3\7\u01e8\2\2\u0da3\u0da4\5\u04b8\u025d\2\u0da4\u0da5\5"+
		"\u01c0\u00e1\2\u0da5\u0da6\5\u01c6\u00e4\2\u0da6\u01bb\3\2\2\2\u0da7\u0da8"+
		"\7\u00fc\2\2\u0da8\u0db0\5\u019a\u00ce\2\u0da9\u0daa\7\u0143\2\2\u0daa"+
		"\u0db0\7\u00fc\2\2\u0dab\u0dac\7\u01d7\2\2\u0dac\u0db0\5\u019a\u00ce\2"+
		"\u0dad\u0dae\7\u0143\2\2\u0dae\u0db0\7\u01d7\2\2\u0daf\u0da7\3\2\2\2\u0daf"+
		"\u0da9\3\2\2\2\u0daf\u0dab\3\2\2\2\u0daf\u0dad\3\2\2\2\u0db0\u01bd\3\2"+
		"\2\2\u0db1\u0db2\b\u00e0\1\2\u0db2\u0db3\5\u01bc\u00df\2\u0db3\u0db8\3"+
		"\2\2\2\u0db4\u0db5\f\3\2\2\u0db5\u0db7\5\u01bc\u00df\2\u0db6\u0db4\3\2"+
		"\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db6\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9"+
		"\u01bf\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dbb\u0dbe\5\u01be\u00e0\2\u0dbc\u0dbe"+
		"\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd\u0dbc\3\2\2\2\u0dbe\u01c1\3\2\2\2\u0dbf"+
		"\u0dc0\7\u00d5\2\2\u0dc0\u0dc1\7\u00f0\2\2\u0dc1\u0dc2\7\u00bd\2\2\u0dc2"+
		"\u0dc3\7\u01e8\2\2\u0dc3\u0dc4\5\u04b8\u025d\2\u0dc4\u0dc5\5\u0102\u0082"+
		"\2\u0dc5\u0dd0\3\2\2\2\u0dc6\u0dc7\7\u00d5\2\2\u0dc7\u0dc8\7\u00f0\2\2"+
		"\u0dc8\u0dc9\7\u00bd\2\2\u0dc9\u0dca\7\u01e8\2\2\u0dca\u0dcb\7\u0102\2"+
		"\2\u0dcb\u0dcc\7\u00e3\2\2\u0dcc\u0dcd\5\u04b8\u025d\2\u0dcd\u0dce\5\u0102"+
		"\u0082\2\u0dce\u0dd0\3\2\2\2\u0dcf\u0dbf\3\2\2\2\u0dcf\u0dc6\3\2\2\2\u0dd0"+
		"\u01c3\3\2\2\2\u0dd1\u0dd2\7u\2\2\u0dd2\u0dd3\7\u00f0\2\2\u0dd3\u0dd4"+
		"\7\u00bd\2\2\u0dd4\u0dd5\7\u01e8\2\2\u0dd5\u0dd6\5\u04b8\u025d\2\u0dd6"+
		"\u0dd7\5\u01c0\u00e1\2\u0dd7\u0dd8\5\u01ca\u00e6\2\u0dd8\u0de1\3\2\2\2"+
		"\u0dd9\u0dda\7u\2\2\u0dda\u0ddb\7\u00f0\2\2\u0ddb\u0ddc\7\u00bd\2\2\u0ddc"+
		"\u0ddd\7\u01e8\2\2\u0ddd\u0dde\5\u04b8\u025d\2\u0dde\u0ddf\5\u01be\u00e0"+
		"\2\u0ddf\u0de1\3\2\2\2\u0de0\u0dd1\3\2\2\2\u0de0\u0dd9\3\2\2\2\u0de1\u01c5"+
		"\3\2\2\2\u0de2\u0de3\7\u0157\2\2\u0de3\u0de4\7\r\2\2\u0de4\u0de5\5\u01c8"+
		"\u00e5\2\u0de5\u0de6\7\7\2\2\u0de6\u0de9\3\2\2\2\u0de7\u0de9\3\2\2\2\u0de8"+
		"\u0de2\3\2\2\2\u0de8\u0de7\3\2\2\2\u0de9\u01c7\3\2\2\2\u0dea\u0deb\b\u00e5"+
		"\1\2\u0deb\u0dec\5\u01d0\u00e9\2\u0dec\u0df2\3\2\2\2\u0ded\u0dee\f\3\2"+
		"\2\u0dee\u0def\7\b\2\2\u0def\u0df1\5\u01d0\u00e9\2\u0df0\u0ded\3\2\2\2"+
		"\u0df1\u0df4\3\2\2\2\u0df2\u0df0\3\2\2\2\u0df2\u0df3\3\2\2\2\u0df3\u01c9"+
		"\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df5\u0df6\7\u0157\2\2\u0df6\u0df7\7\r\2"+
		"\2\u0df7\u0df8\5\u01cc\u00e7\2\u0df8\u0df9\7\7\2\2\u0df9\u01cb\3\2\2\2"+
		"\u0dfa\u0dfb\b\u00e7\1\2\u0dfb\u0dfc\5\u01ce\u00e8\2\u0dfc\u0e02\3\2\2"+
		"\2\u0dfd\u0dfe\f\3\2\2\u0dfe\u0dff\7\b\2\2\u0dff\u0e01\5\u01ce\u00e8\2"+
		"\u0e00\u0dfd\3\2\2\2\u0e01\u0e04\3\2\2\2\u0e02\u0e00\3\2\2\2\u0e02\u0e03"+
		"\3\2\2\2\u0e03\u01cd\3\2\2\2\u0e04\u0e02\3\2\2\2\u0e05\u0e0d\5\u01d0\u00e9"+
		"\2\u0e06\u0e07\7\u019c\2\2\u0e07\u0e0d\5\u01d0\u00e9\2\u0e08\u0e09\7o"+
		"\2\2\u0e09\u0e0d\5\u01d0\u00e9\2\u0e0a\u0e0b\7\u00d5\2\2\u0e0b\u0e0d\5"+
		"\u01d2\u00ea\2\u0e0c\u0e05\3\2\2\2\u0e0c\u0e06\3\2\2\2\u0e0c\u0e08\3\2"+
		"\2\2\u0e0c\u0e0a\3\2\2\2\u0e0d\u01cf\3\2\2\2\u0e0e\u0e0f\5\u01d2\u00ea"+
		"\2\u0e0f\u0e10\5\u01d4\u00eb\2\u0e10\u01d1\3\2\2\2\u0e11\u0e12\5\u04d4"+
		"\u026b\2\u0e12\u01d3\3\2\2\2\u0e13\u0e14\5\u04ca\u0266\2\u0e14\u01d5\3"+
		"\2\2\2\u0e15\u0e16\7\u00b0\2\2\u0e16\u0e17\7\u0199\2\2\u0e17\u0e18\5\u04b8"+
		"\u025d\2\u0e18\u0e19\5\u01d8\u00ed\2\u0e19\u0e1a\5\u01dc\u00ef\2\u0e1a"+
		"\u0e1b\7\u00f0\2\2\u0e1b\u0e1c\7\u00bd\2\2\u0e1c\u0e1d\7\u01e8\2\2\u0e1d"+
		"\u0e1e\5\u04b8\u025d\2\u0e1e\u0e1f\5\u01c6\u00e4\2\u0e1f\u01d7\3\2\2\2"+
		"\u0e20\u0e21\7\u01c6\2\2\u0e21\u0e24\5\u04ca\u0266\2\u0e22\u0e24\3\2\2"+
		"\2\u0e23\u0e20\3\2\2\2\u0e23\u0e22\3\2\2\2\u0e24\u01d9\3\2\2\2\u0e25\u0e26"+
		"\7\u01de\2\2\u0e26\u0e2a\5\u04ca\u0266\2\u0e27\u0e28\7\u01de\2\2\u0e28"+
		"\u0e2a\7\u014a\2\2\u0e29\u0e25\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e2a\u01db"+
		"\3\2\2\2\u0e2b\u0e2e\5\u01da\u00ee\2\u0e2c\u0e2e\3\2\2\2\u0e2d\u0e2b\3"+
		"\2\2\2\u0e2d\u0e2c\3\2\2\2\u0e2e\u01dd\3\2\2\2\u0e2f\u0e30\7\u00d5\2\2"+
		"\u0e30\u0e31\7\u0199\2\2\u0e31\u0e32\5\u04b8\u025d\2\u0e32\u0e33\5\u0102"+
		"\u0082\2\u0e33\u0e3c\3\2\2\2\u0e34\u0e35\7\u00d5\2\2\u0e35\u0e36\7\u0199"+
		"\2\2\u0e36\u0e37\7\u0102\2\2\u0e37\u0e38\7\u00e3\2\2\u0e38\u0e39\5\u04b8"+
		"\u025d\2\u0e39\u0e3a\5\u0102\u0082\2\u0e3a\u0e3c\3\2\2\2\u0e3b\u0e2f\3"+
		"\2\2\2\u0e3b\u0e34\3\2\2\2\u0e3c\u01df\3\2\2\2\u0e3d\u0e3e\7u\2\2\u0e3e"+
		"\u0e3f\7\u0199\2\2\u0e3f\u0e40\5\u04b8\u025d\2\u0e40\u0e41\5\u01da\u00ee"+
		"\2\u0e41\u0e42\5\u01ca\u00e6\2\u0e42\u0e4e\3\2\2\2\u0e43\u0e44\7u\2\2"+
		"\u0e44\u0e45\7\u0199\2\2\u0e45\u0e46\5\u04b8\u025d\2\u0e46\u0e47\5\u01da"+
		"\u00ee\2\u0e47\u0e4e\3\2\2\2\u0e48\u0e49\7u\2\2\u0e49\u0e4a\7\u0199\2"+
		"\2\u0e4a\u0e4b\5\u04b8\u025d\2\u0e4b\u0e4c\5\u01ca\u00e6\2\u0e4c\u0e4e"+
		"\3\2\2\2\u0e4d\u0e3d\3\2\2\2\u0e4d\u0e43\3\2\2\2\u0e4d\u0e48\3\2\2\2\u0e4e"+
		"\u01e1\3\2\2\2\u0e4f\u0e50\7\u00b0\2\2\u0e50\u0e51\7\u00f0\2\2\u0e51\u0e52"+
		"\7\u01b3\2\2\u0e52\u0e53\5\u04b4\u025b\2\u0e53\u0e54\5\u01e4\u00f3\2\u0e54"+
		"\u0e55\7\u0199\2\2\u0e55\u0e56\5\u04b8\u025d\2\u0e56\u0e57\5\u01c6\u00e4"+
		"\2\u0e57\u0e65\3\2\2\2\u0e58\u0e59\7\u00b0\2\2\u0e59\u0e5a\7\u00f0\2\2"+
		"\u0e5a\u0e5b\7\u01b3\2\2\u0e5b\u0e5c\7\u0102\2\2\u0e5c\u0e5d\7\u0145\2"+
		"\2\u0e5d\u0e5e\7\u00e3\2\2\u0e5e\u0e5f\5\u04b4\u025b\2\u0e5f\u0e60\5\u01e4"+
		"\u00f3\2\u0e60\u0e61\7\u0199\2\2\u0e61\u0e62\5\u04b8\u025d\2\u0e62\u0e63"+
		"\5\u01c6\u00e4\2\u0e63\u0e65\3\2\2\2\u0e64\u0e4f\3\2\2\2\u0e64\u0e58\3"+
		"\2\2\2\u0e65\u01e3\3\2\2\2\u0e66\u0e67\7\r\2\2\u0e67\u0e68\5\u01e6\u00f4"+
		"\2\u0e68\u0e69\7\7\2\2\u0e69\u0e6d\3\2\2\2\u0e6a\u0e6b\7\r\2\2\u0e6b\u0e6d"+
		"\7\7\2\2\u0e6c\u0e66\3\2\2\2\u0e6c\u0e6a\3\2\2\2\u0e6d\u01e5\3\2\2\2\u0e6e"+
		"\u0e6f\b\u00f4\1\2\u0e6f\u0e70\5\u01e8\u00f5\2\u0e70\u0e76\3\2\2\2\u0e71"+
		"\u0e72\f\3\2\2\u0e72\u0e73\7\b\2\2\u0e73\u0e75\5\u01e8\u00f5\2\u0e74\u0e71"+
		"\3\2\2\2\u0e75\u0e78\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77"+
		"\u01e7\3\2\2\2\u0e78\u0e76\3\2\2\2\u0e79\u0e7a\5\u0146\u00a4\2\u0e7a\u01e9"+
		"\3\2\2\2\u0e7b\u0e7c\7u\2\2\u0e7c\u0e7d\7\u00f0\2\2\u0e7d\u0e7e\7\u01b3"+
		"\2\2\u0e7e\u0e7f\5\u03f8\u01fd\2\u0e7f\u0e80\5\u00fc\177\2\u0e80\u0e8a"+
		"\3\2\2\2\u0e81\u0e82\7u\2\2\u0e82\u0e83\7\u00f0\2\2\u0e83\u0e84\7\u01b3"+
		"\2\2\u0e84\u0e85\7\u0102\2\2\u0e85\u0e86\7\u00e3\2\2\u0e86\u0e87\5\u03f8"+
		"\u01fd\2\u0e87\u0e88\5\u00fc\177\2\u0e88\u0e8a\3\2\2\2\u0e89\u0e7b\3\2"+
		"\2\2\u0e89\u0e81\3\2\2\2\u0e8a\u01eb\3\2\2\2\u0e8b\u0e8c\7\u00b0\2\2\u0e8c"+
		"\u0e8d\7\u01d2\2\2\u0e8d\u0e8e\7\u0135\2\2\u0e8e\u0e8f\7\u00ee\2\2\u0e8f"+
		"\u0e90\5\u01ee\u00f8\2\u0e90\u0e91\7\u0199\2\2\u0e91\u0e92\5\u04b8\u025d"+
		"\2\u0e92\u0e93\5\u01c6\u00e4\2\u0e93\u01ed\3\2\2\2\u0e94\u0e98\7\u00ba"+
		"\2\2\u0e95\u0e98\7\u01d2\2\2\u0e96\u0e98\5\u04cc\u0267\2\u0e97\u0e94\3"+
		"\2\2\2\u0e97\u0e95\3\2\2\2\u0e97\u0e96\3\2\2\2\u0e98\u01ef\3\2\2\2\u0e99"+
		"\u0e9a\7\u00d5\2\2\u0e9a\u0e9b\7\u01d2\2\2\u0e9b\u0e9c\7\u0135\2\2\u0e9c"+
		"\u0e9d\7\u00ee\2\2\u0e9d\u0e9e\5\u01ee\u00f8\2\u0e9e\u0e9f\7\u0199\2\2"+
		"\u0e9f\u0ea0\5\u04b8\u025d\2\u0ea0\u0eac\3\2\2\2\u0ea1\u0ea2\7\u00d5\2"+
		"\2\u0ea2\u0ea3\7\u01d2\2\2\u0ea3\u0ea4\7\u0135\2\2\u0ea4\u0ea5\7\u0102"+
		"\2\2\u0ea5\u0ea6\7\u00e3\2\2\u0ea6\u0ea7\7\u00ee\2\2\u0ea7\u0ea8\5\u01ee"+
		"\u00f8\2\u0ea8\u0ea9\7\u0199\2\2\u0ea9\u0eaa\5\u04b8\u025d\2\u0eaa\u0eac"+
		"\3\2\2\2\u0eab\u0e99\3\2\2\2\u0eab\u0ea1\3\2\2\2\u0eac\u01f1\3\2\2\2\u0ead"+
		"\u0eae\7u\2\2\u0eae\u0eaf\7\u01d2\2\2\u0eaf\u0eb0\7\u0135\2\2\u0eb0\u0eb1"+
		"\7\u00ee\2\2\u0eb1\u0eb2\5\u01ee\u00f8\2\u0eb2\u0eb3\7\u0199\2\2\u0eb3"+
		"\u0eb4\5\u04b8\u025d\2\u0eb4\u0eb5\5\u01ca\u00e6\2\u0eb5\u01f3\3\2\2\2"+
		"\u0eb6\u0eb7\7\u00b0\2\2\u0eb7\u0eb8\7\u01c1\2\2\u0eb8\u0eb9\5\u04b8\u025d"+
		"\2\u0eb9\u0eba\5\u01f6\u00fc\2\u0eba\u0ebb\5\u01f8\u00fd\2\u0ebb\u0ebc"+
		"\7\u0153\2\2\u0ebc\u0ebd\5\u04b4\u025b\2\u0ebd\u0ebe\5\u01fc\u00ff\2\u0ebe"+
		"\u0ebf\5\u0202\u0102\2\u0ebf\u0ec0\7\u00e2\2\2\u0ec0\u0ec1\7\u0172\2\2"+
		"\u0ec1\u0ec2\5\u04c4\u0263\2\u0ec2\u0ec3\7\r\2\2\u0ec3\u0ec4\5\u0204\u0103"+
		"\2\u0ec4\u0ec5\7\7\2\2\u0ec5\u0edc\3\2\2\2\u0ec6\u0ec7\7\u00b0\2\2\u0ec7"+
		"\u0ec8\7\u00a9\2\2\u0ec8\u0ec9\7\u01c1\2\2\u0ec9\u0eca\5\u04b8\u025d\2"+
		"\u0eca\u0ecb\7q\2\2\u0ecb\u0ecc\5\u01f8\u00fd\2\u0ecc\u0ecd\7\u0153\2"+
		"\2\u0ecd\u0ece\5\u04b4\u025b\2\u0ece\u0ecf\5\u0208\u0105\2\u0ecf\u0ed0"+
		"\5\u020a\u0106\2\u0ed0\u0ed1\7\u00ee\2\2\u0ed1\u0ed2\7\u00d6\2\2\u0ed2"+
		"\u0ed3\7\u018c\2\2\u0ed3\u0ed4\5\u0202\u0102\2\u0ed4\u0ed5\7\u00e2\2\2"+
		"\u0ed5\u0ed6\7\u0172\2\2\u0ed6\u0ed7\5\u04c4\u0263\2\u0ed7\u0ed8\7\r\2"+
		"\2\u0ed8\u0ed9\5\u0204\u0103\2\u0ed9\u0eda\7\7\2\2\u0eda\u0edc\3\2\2\2"+
		"\u0edb\u0eb6\3\2\2\2\u0edb\u0ec6\3\2\2\2\u0edc\u01f5\3\2\2\2\u0edd\u0ee2"+
		"\7\u0085\2\2\u0ede\u0ee2\7q\2\2\u0edf\u0ee0\7\u0115\2\2\u0ee0\u0ee2\7"+
		"\u014f\2\2\u0ee1\u0edd\3\2\2\2\u0ee1\u0ede\3\2\2\2\u0ee1\u0edf\3\2\2\2"+
		"\u0ee2\u01f7\3\2\2\2\u0ee3\u0ee4\b\u00fd\1\2\u0ee4\u0ee5\5\u01fa\u00fe"+
		"\2\u0ee5\u0eeb\3\2\2\2\u0ee6\u0ee7\f\3\2\2\u0ee7\u0ee8\7\u0158\2\2\u0ee8"+
		"\u0eea\5\u01fa\u00fe\2\u0ee9\u0ee6\3\2\2\2\u0eea\u0eed\3\2\2\2\u0eeb\u0ee9"+
		"\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u01f9\3\2\2\2\u0eed\u0eeb\3\2\2\2\u0eee"+
		"\u0ef6\7\u0114\2\2\u0eef\u0ef6\7\u00c9\2\2\u0ef0\u0ef6\7\u01d1\2\2\u0ef1"+
		"\u0ef2\7\u01d1\2\2\u0ef2\u0ef3\7\u014f\2\2\u0ef3\u0ef6\5\u0160\u00b1\2"+
		"\u0ef4\u0ef6\7\u01c4\2\2\u0ef5\u0eee\3\2\2\2\u0ef5\u0eef\3\2\2\2\u0ef5"+
		"\u0ef0\3\2\2\2\u0ef5\u0ef1\3\2\2\2\u0ef5\u0ef4\3\2\2\2\u0ef6\u01fb\3\2"+
		"\2\2\u0ef7\u0ef8\7\u00ee\2\2\u0ef8\u0ef9\5\u01fe\u0100\2\u0ef9\u0efa\5"+
		"\u0200\u0101\2\u0efa\u0efd\3\2\2\2\u0efb\u0efd\3\2\2\2\u0efc\u0ef7\3\2"+
		"\2\2\u0efc\u0efb\3\2\2\2\u0efd\u01fd\3\2\2\2\u0efe\u0f01\7\u00d6\2\2\u0eff"+
		"\u0f01\3\2\2\2\u0f00\u0efe\3\2\2\2\u0f00\u0eff\3\2\2\2\u0f01\u01ff\3\2"+
		"\2\2\u0f02\u0f03\t\r\2\2\u0f03\u0201\3\2\2\2\u0f04\u0f05\7\u01e1\2\2\u0f05"+
		"\u0f06\7\r\2\2\u0f06\u0f07\5\u043a\u021e\2\u0f07\u0f08\7\7\2\2\u0f08\u0f0b"+
		"\3\2\2\2\u0f09\u0f0b\3\2\2\2\u0f0a\u0f04\3\2\2\2\u0f0a\u0f09\3\2\2\2\u0f0b"+
		"\u0203\3\2\2\2\u0f0c\u0f0d\b\u0103\1\2\u0f0d\u0f10\5\u0206\u0104\2\u0f0e"+
		"\u0f10\3\2\2\2\u0f0f\u0f0c\3\2\2\2\u0f0f\u0f0e\3\2\2\2\u0f10\u0f16\3\2"+
		"\2\2\u0f11\u0f12\f\4\2\2\u0f12\u0f13\7\b\2\2\u0f13\u0f15\5\u0206\u0104"+
		"\2\u0f14\u0f11\3\2\2\2\u0f15\u0f18\3\2\2\2\u0f16\u0f14\3\2\2\2\u0f16\u0f17"+
		"\3\2\2\2\u0f17\u0205\3\2\2\2\u0f18\u0f16\3\2\2\2\u0f19\u0f1e\5\u04c8\u0265"+
		"\2\u0f1a\u0f1e\7\u0231\2\2\u0f1b\u0f1e\5\u04ca\u0266\2\u0f1c\u0f1e\5\u04d4"+
		"\u026b\2\u0f1d\u0f19\3\2\2\2\u0f1d\u0f1a\3\2\2\2\u0f1d\u0f1b\3\2\2\2\u0f1d"+
		"\u0f1c\3\2\2\2\u0f1e\u0207\3\2\2\2\u0f1f\u0f20\7\u00f3\2\2\u0f20\u0f23"+
		"\5\u04b4\u025b\2\u0f21\u0f23\3\2\2\2\u0f22\u0f1f\3\2\2\2\u0f22\u0f21\3"+
		"\2\2\2\u0f23\u0209\3\2\2\2\u0f24\u0f29\b\u0106\1\2\u0f25\u0f26\f\3\2\2"+
		"\u0f26\u0f28\5\u020c\u0107\2\u0f27\u0f25\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29"+
		"\u0f27\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u020b\3\2\2\2\u0f2b\u0f29\3\2"+
		"\2\2\u0f2c\u0f2d\7\u0145\2\2\u0f2d\u0f38\7\u00c6\2\2\u0f2e\u0f38\7\u00c6"+
		"\2\2\u0f2f\u0f30\7\u010e\2\2\u0f30\u0f38\7\u0104\2\2\u0f31\u0f32\7\u010e"+
		"\2\2\u0f32\u0f38\7\u00c7\2\2\u0f33\u0f34\7\u0145\2\2\u0f34\u0f38\7\u01d5"+
		"\2\2\u0f35\u0f36\7\u0143\2\2\u0f36\u0f38\7\u010c\2\2\u0f37\u0f2c\3\2\2"+
		"\2\u0f37\u0f2e\3\2\2\2\u0f37\u0f2f\3\2\2\2\u0f37\u0f31\3\2\2\2\u0f37\u0f33"+
		"\3\2\2\2\u0f37\u0f35\3\2\2\2\u0f38\u020d\3\2\2\2\u0f39\u0f3a\7\u00d5\2"+
		"\2\u0f3a\u0f3b\7\u01c1\2\2\u0f3b\u0f3c\5\u04b8\u025d\2\u0f3c\u0f3d\7\u0153"+
		"\2\2\u0f3d\u0f3e\5\u0250\u0129\2\u0f3e\u0f3f\5\u0102\u0082\2\u0f3f\u0f4a"+
		"\3\2\2\2\u0f40\u0f41\7\u00d5\2\2\u0f41\u0f42\7\u01c1\2\2\u0f42\u0f43\7"+
		"\u0102\2\2\u0f43\u0f44\7\u00e3\2\2\u0f44\u0f45\5\u04b8\u025d\2\u0f45\u0f46"+
		"\7\u0153\2\2\u0f46\u0f47\5\u0250\u0129\2\u0f47\u0f48\5\u0102\u0082\2\u0f48"+
		"\u0f4a\3\2\2\2\u0f49\u0f39\3\2\2\2\u0f49\u0f40\3\2\2\2\u0f4a\u020f\3\2"+
		"\2\2\u0f4b\u0f4c\7\u00b0\2\2\u0f4c\u0f4d\7~\2\2\u0f4d\u0f4e\5\u04b8\u025d"+
		"\2\u0f4e\u0f4f\7\u0099\2\2\u0f4f\u0f50\7\r\2\2\u0f50\u0f51\5\u043a\u021e"+
		"\2\u0f51\u0f52\7\7\2\2\u0f52\u0f53\5\u020a\u0106\2\u0f53\u0211\3\2\2\2"+
		"\u0f54\u0f55\7\u00d5\2\2\u0f55\u0f56\7~\2\2\u0f56\u0f57\5\u04b8\u025d"+
		"\2\u0f57\u0f58\5\u0102\u0082\2\u0f58\u0213\3\2\2\2\u0f59\u0f5a\7\u00b0"+
		"\2\2\u0f5a\u0f5b\7r\2\2\u0f5b\u0f5c\5\u04c4\u0263\2\u0f5c\u0f5d\5\u021e"+
		"\u0110\2\u0f5d\u0f5e\5\u0216\u010c\2\u0f5e\u0fb1\3\2\2\2\u0f5f\u0f60\7"+
		"\u00b0\2\2\u0f60\u0f61\7r\2\2\u0f61\u0f62\5\u04c4\u0263\2\u0f62\u0f63"+
		"\5\u0220\u0111\2\u0f63\u0fb1\3\2\2\2\u0f64\u0f65\7\u00b0\2\2\u0f65\u0f66"+
		"\7\u0155\2\2\u0f66\u0f67\5\u02e0\u0171\2\u0f67\u0f68\5\u0216\u010c\2\u0f68"+
		"\u0fb1\3\2\2\2\u0f69\u0f6a\7\u00b0\2\2\u0f6a\u0f6b\7\u01c6\2\2\u0f6b\u0f6c"+
		"\5\u0250\u0129\2\u0f6c\u0f6d\5\u0216\u010c\2\u0f6d\u0fb1\3\2\2\2\u0f6e"+
		"\u0f6f\7\u00b0\2\2\u0f6f\u0f70\7\u01c6\2\2\u0f70\u0fb1\5\u0250\u0129\2"+
		"\u0f71\u0f72\7\u00b0\2\2\u0f72\u0f73\7\u01c6\2\2\u0f73\u0f74\5\u0250\u0129"+
		"\2\u0f74\u0f75\7|\2\2\u0f75\u0f76\7\r\2\2\u0f76\u0f77\5\u0404\u0203\2"+
		"\u0f77\u0f78\7\7\2\2\u0f78\u0fb1\3\2\2\2\u0f79\u0f7a\7\u00b0\2\2\u0f7a"+
		"\u0f7b\7\u01c6\2\2\u0f7b\u0f7c\5\u0250\u0129\2\u0f7c\u0f7d\7|\2\2\u0f7d"+
		"\u0f7e\7\u00dc\2\2\u0f7e\u0f7f\7\r\2\2\u0f7f\u0f80\5\u0226\u0114\2\u0f80"+
		"\u0f81\7\7\2\2\u0f81\u0fb1\3\2\2\2\u0f82\u0f83\7\u00b0\2\2\u0f83\u0f84"+
		"\7\u01c6\2\2\u0f84\u0f85\5\u0250\u0129\2\u0f85\u0f86\7|\2\2\u0f86\u0f87"+
		"\7\u0174\2\2\u0f87\u0f88\5\u0216\u010c\2\u0f88\u0fb1\3\2\2\2\u0f89\u0f8a"+
		"\7\u00b0\2\2\u0f8a\u0f8b\7\u01b9\2\2\u0f8b\u0f8c\7\u0192\2\2\u0f8c\u0f8d"+
		"\7\u0161\2\2\u0f8d\u0f8e\5\u0250\u0129\2\u0f8e\u0f8f\5\u0216\u010c\2\u0f8f"+
		"\u0fb1\3\2\2\2\u0f90\u0f91\7\u00b0\2\2\u0f91\u0f92\7\u01b9\2\2\u0f92\u0f93"+
		"\7\u0192\2\2\u0f93\u0f94\7\u00cd\2\2\u0f94\u0f95\5\u0250\u0129\2\u0f95"+
		"\u0f96\5\u0216\u010c\2\u0f96\u0fb1\3\2\2\2\u0f97\u0f98\7\u00b0\2\2\u0f98"+
		"\u0f99\7\u01b9\2\2\u0f99\u0f9a\7\u0192\2\2\u0f9a\u0f9b\7\u01b7\2\2\u0f9b"+
		"\u0f9c\5\u0250\u0129\2\u0f9c\u0f9d\5\u0216\u010c\2\u0f9d\u0fb1\3\2\2\2"+
		"\u0f9e\u0f9f\7\u00b0\2\2\u0f9f\u0fa0\7\u01b9\2\2\u0fa0\u0fa1\7\u0192\2"+
		"\2\u0fa1\u0fa2\7\u00a7\2\2\u0fa2\u0fa3\5\u0250\u0129\2\u0fa3\u0fa4\5\u0216"+
		"\u010c\2\u0fa4\u0fb1\3\2\2\2\u0fa5\u0fa6\7\u00b0\2\2\u0fa6\u0fa7\7\u00a0"+
		"\2\2\u0fa7\u0fa8\5\u0250\u0129\2\u0fa8\u0fa9\5\u0216\u010c\2\u0fa9\u0fb1"+
		"\3\2\2\2\u0faa\u0fab\7\u00b0\2\2\u0fab\u0fac\7\u00a0\2\2\u0fac\u0fad\5"+
		"\u0250\u0129\2\u0fad\u0fae\7\u00f3\2\2\u0fae\u0faf\5\u0250\u0129\2\u0faf"+
		"\u0fb1\3\2\2\2\u0fb0\u0f59\3\2\2\2\u0fb0\u0f5f\3\2\2\2\u0fb0\u0f64\3\2"+
		"\2\2\u0fb0\u0f69\3\2\2\2\u0fb0\u0f6e\3\2\2\2\u0fb0\u0f71\3\2\2\2\u0fb0"+
		"\u0f79\3\2\2\2\u0fb0\u0f82\3\2\2\2\u0fb0\u0f89\3\2\2\2\u0fb0\u0f90\3\2"+
		"\2\2\u0fb0\u0f97\3\2\2\2\u0fb0\u0f9e\3\2\2\2\u0fb0\u0fa5\3\2\2\2\u0fb0"+
		"\u0faa\3\2\2\2\u0fb1\u0215\3\2\2\2\u0fb2\u0fb3\7\r\2\2\u0fb3\u0fb4\5\u0218"+
		"\u010d\2\u0fb4\u0fb5\7\7\2\2\u0fb5\u0217\3\2\2\2\u0fb6\u0fb7\b\u010d\1"+
		"\2\u0fb7\u0fb8\5\u021a\u010e\2\u0fb8\u0fbe\3\2\2\2\u0fb9\u0fba\f\3\2\2"+
		"\u0fba\u0fbb\7\b\2\2\u0fbb\u0fbd\5\u021a\u010e\2\u0fbc\u0fb9\3\2\2\2\u0fbd"+
		"\u0fc0\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf\u0219\3\2"+
		"\2\2\u0fc0\u0fbe\3\2\2\2\u0fc1\u0fc2\5\u04d4\u026b\2\u0fc2\u0fc3\7\20"+
		"\2\2\u0fc3\u0fc4\5\u021c\u010f\2\u0fc4\u0fc7\3\2\2\2\u0fc5\u0fc7\5\u04d4"+
		"\u026b\2\u0fc6\u0fc1\3\2\2\2\u0fc6\u0fc5\3\2\2\2\u0fc7\u021b\3\2\2\2\u0fc8"+
		"\u0fce\5\u02c0\u0161\2\u0fc9\u0fce\5\u04da\u026e\2\u0fca\u0fce\5\u0470"+
		"\u0239\2\u0fcb\u0fce\5\u0192\u00ca\2\u0fcc\u0fce\5\u04ca\u0266\2\u0fcd"+
		"\u0fc8\3\2\2\2\u0fcd\u0fc9\3\2\2\2\u0fcd\u0fca\3\2\2\2\u0fcd\u0fcb\3\2"+
		"\2\2\u0fcd\u0fcc\3\2\2\2\u0fce\u021d\3\2\2\2\u0fcf\u0fd0\7\r\2\2\u0fd0"+
		"\u0fd1\5\u047a\u023e\2\u0fd1\u0fd2\7\7\2\2\u0fd2\u0fd7\3\2\2\2\u0fd3\u0fd4"+
		"\7\r\2\2\u0fd4\u0fd5\7\13\2\2\u0fd5\u0fd7\7\7\2\2\u0fd6\u0fcf\3\2\2\2"+
		"\u0fd6\u0fd3\3\2\2\2\u0fd7\u021f\3\2\2\2\u0fd8\u0fd9\7\r\2\2\u0fd9\u0fda"+
		"\5\u0222\u0112\2\u0fda\u0fdb\7\7\2\2\u0fdb\u0221\3\2\2\2\u0fdc\u0fdd\b"+
		"\u0112\1\2\u0fdd\u0fde\5\u0224\u0113\2\u0fde\u0fe4\3\2\2\2\u0fdf\u0fe0"+
		"\f\3\2\2\u0fe0\u0fe1\7\b\2\2\u0fe1\u0fe3\5\u0224\u0113\2\u0fe2\u0fdf\3"+
		"\2\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5"+
		"\u0223\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fe8\7\u0230\2\2\u0fe8\u0fe9"+
		"\7\20\2\2\u0fe9\u0fea\5\u021c\u010f\2\u0fea\u0225\3\2\2\2\u0feb\u0fee"+
		"\5\u0228\u0115\2\u0fec\u0fee\3\2\2\2\u0fed\u0feb\3\2\2\2\u0fed\u0fec\3"+
		"\2\2\2\u0fee\u0227\3\2\2\2\u0fef\u0ff0\b\u0115\1\2\u0ff0\u0ff1\5\u04ca"+
		"\u0266\2\u0ff1\u0ff7\3\2\2\2\u0ff2\u0ff3\f\3\2\2\u0ff3\u0ff4\7\b\2\2\u0ff4"+
		"\u0ff6\5\u04ca\u0266\2\u0ff5\u0ff2\3\2\2\2\u0ff6\u0ff9\3\2\2\2\u0ff7\u0ff5"+
		"\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0229\3\2\2\2\u0ff9\u0ff7\3\2\2\2\u0ffa"+
		"\u0ffb\7u\2\2\u0ffb\u0ffc\7\u01c6\2\2\u0ffc\u0ffd\5\u0250\u0129\2\u0ffd"+
		"\u0ffe\7o\2";
	private static final String _serializedATNSegment2 =
		"\2\u0ffe\u0fff\7\u01d8\2\2\u0fff\u1000\5\u04ca\u0266\2\u1000\u1014\3\2"+
		"\2\2\u1001\u1002\7u\2\2\u1002\u1003\7\u01c6\2\2\u1003\u1004\5\u0250\u0129"+
		"\2\u1004\u1005\7o\2\2\u1005\u1006\7\u01d8\2\2\u1006\u1007\5\u04ca\u0266"+
		"\2\u1007\u1008\7\u0085\2\2\u1008\u1009\5\u04ca\u0266\2\u1009\u1014\3\2"+
		"\2\2\u100a\u100b\7u\2\2\u100b\u100c\7\u01c6\2\2\u100c\u100d\5\u0250\u0129"+
		"\2\u100d\u100e\7o\2\2\u100e\u100f\7\u01d8\2\2\u100f\u1010\5\u04ca\u0266"+
		"\2\u1010\u1011\7q\2\2\u1011\u1012\5\u04ca\u0266\2\u1012\u1014\3\2\2\2"+
		"\u1013\u0ffa\3\2\2\2\u1013\u1001\3\2\2\2\u1013\u100a\3\2\2\2\u1014\u022b"+
		"\3\2\2\2\u1015\u1016\7\u00b0\2\2\u1016\u1017\7\u0155\2\2\u1017\u1018\7"+
		"\u009b\2\2\u1018\u1019\5\u0250\u0129\2\u1019\u101a\5\u0232\u011a\2\u101a"+
		"\u101b\7\u00ee\2\2\u101b\u101c\7\u01c6\2\2\u101c\u101d\5\u040a\u0206\2"+
		"\u101d\u101e\7\u01d3\2\2\u101e\u101f\5\u04bc\u025f\2\u101f\u1020\5\u0234"+
		"\u011b\2\u1020\u1021\7|\2\2\u1021\u1022\5\u022e\u0118\2\u1022\u022d\3"+
		"\2\2\2\u1023\u1024\b\u0118\1\2\u1024\u1025\5\u0230\u0119\2\u1025\u102b"+
		"\3\2\2\2\u1026\u1027\f\3\2\2\u1027\u1028\7\b\2\2\u1028\u102a\5\u0230\u0119"+
		"\2\u1029\u1026\3\2\2\2\u102a\u102d\3\2\2\2\u102b\u1029\3\2\2\2\u102b\u102c"+
		"\3\2\2\2\u102c\u022f\3\2\2\2\u102d\u102b\3\2\2\2\u102e\u102f\7\u0155\2"+
		"\2\u102f\u1030\5\u04c8\u0265\2\u1030\u1031\5\u02e0\u0171\2\u1031\u1032"+
		"\5\u0236\u011c\2\u1032\u1033\5\u0238\u011d\2\u1033\u104b\3\2\2\2\u1034"+
		"\u1035\7\u0155\2\2\u1035\u1036\5\u04c8\u0265\2\u1036\u1037\5\u02e0\u0171"+
		"\2\u1037\u1038\5\u02de\u0170\2\u1038\u1039\5\u0236\u011c\2\u1039\u103a"+
		"\5\u0238\u011d\2\u103a\u104b\3\2\2\2\u103b\u103c\7\u00f5\2\2\u103c\u103d"+
		"\5\u04c8\u0265\2\u103d\u103e\5\u04c4\u0263\2\u103e\u103f\5\u02b0\u0159"+
		"\2\u103f\u104b\3\2\2\2\u1040\u1041\7\u00f5\2\2\u1041\u1042\5\u04c8\u0265"+
		"\2\u1042\u1043\7\r\2\2\u1043\u1044\5\u047a\u023e\2\u1044\u1045\7\7\2\2"+
		"\u1045\u1046\5\u04c4\u0263\2\u1046\u1047\5\u02b0\u0159\2\u1047\u104b\3"+
		"\2\2\2\u1048\u1049\7\u01ac\2\2\u1049\u104b\5\u040a\u0206\2\u104a\u102e"+
		"\3\2\2\2\u104a\u1034\3\2\2\2\u104a\u103b\3\2\2\2\u104a\u1040\3\2\2\2\u104a"+
		"\u1048\3\2\2\2\u104b\u0231\3\2\2\2\u104c\u104f\7\u00c4\2\2\u104d\u104f"+
		"\3\2\2\2\u104e\u104c\3\2\2\2\u104e\u104d\3\2\2\2\u104f\u0233\3\2\2\2\u1050"+
		"\u1051\7\u00e9\2\2\u1051\u1054\5\u0250\u0129\2\u1052\u1054\3\2\2\2\u1053"+
		"\u1050\3\2\2\2\u1053\u1052\3\2\2\2\u1054\u0235\3\2\2\2\u1055\u1056\7\u00ee"+
		"\2\2\u1056\u105d\7\u0192\2\2\u1057\u1058\7\u00ee\2\2\u1058\u1059\7\u0159"+
		"\2\2\u1059\u105a\7\u008d\2\2\u105a\u105d\5\u0250\u0129\2\u105b\u105d\3"+
		"\2\2\2\u105c\u1055\3\2\2\2\u105c\u1057\3\2\2\2\u105c\u105b\3\2\2\2\u105d"+
		"\u0237\3\2\2\2\u105e\u1061\7\u0178\2\2\u105f\u1061\3\2\2\2\u1060\u105e"+
		"\3\2\2\2\u1060\u105f\3\2\2\2\u1061\u0239\3\2\2\2\u1062\u1063\7\u00b0\2"+
		"\2\u1063\u1064\7\u0155\2\2\u1064\u1065\7\u00e9\2\2\u1065\u1066\5\u0250"+
		"\u0129\2\u1066\u1067\7\u01d3\2\2\u1067\u1068\5\u04bc\u025f\2\u1068\u023b"+
		"\3\2\2\2\u1069\u106a\7u\2\2\u106a\u106b\7\u0155\2\2\u106b\u106c\7\u00e9"+
		"\2\2\u106c\u106d\5\u0250\u0129\2\u106d\u106e\7\u01d3\2\2\u106e\u106f\5"+
		"\u04bc\u025f\2\u106f\u1070\7o\2\2\u1070\u1071\5\u022e\u0118\2\u1071\u107c"+
		"\3\2\2\2\u1072\u1073\7u\2\2\u1073\u1074\7\u0155\2\2\u1074\u1075\7\u00e9"+
		"\2\2\u1075\u1076\5\u0250\u0129\2\u1076\u1077\7\u01d3\2\2\u1077\u1078\5"+
		"\u04bc\u025f\2\u1078\u1079\7\u00d5\2\2\u1079\u107a\5\u023e\u0120\2\u107a"+
		"\u107c\3\2\2\2\u107b\u1069\3\2\2\2\u107b\u1072\3\2\2\2\u107c\u023d\3\2"+
		"\2\2\u107d\u107e\b\u0120\1\2\u107e\u107f\5\u0240\u0121\2\u107f\u1085\3"+
		"\2\2\2\u1080\u1081\f\3\2\2\u1081\u1082\7\b\2\2\u1082\u1084\5\u0240\u0121"+
		"\2\u1083\u1080\3\2\2\2\u1084\u1087\3\2\2\2\u1085\u1083\3\2\2\2\u1085\u1086"+
		"\3\2\2\2\u1086\u023f\3\2\2\2\u1087\u1085\3\2\2\2\u1088\u1089\7\u0155\2"+
		"\2\u1089\u108a\5\u04c8\u0265\2\u108a\u108b\7\r\2\2\u108b\u108c\5\u047a"+
		"\u023e\2\u108c\u108d\7\7\2\2\u108d\u1095\3\2\2\2\u108e\u108f\7\u00f5\2"+
		"\2\u108f\u1090\5\u04c8\u0265\2\u1090\u1091\7\r\2\2\u1091\u1092\5\u047a"+
		"\u023e\2\u1092\u1093\7\7\2\2\u1093\u1095\3\2\2\2\u1094\u1088\3\2\2\2\u1094"+
		"\u108e\3\2\2\2\u1095\u0241\3\2\2\2\u1096\u1097\7\u00d5\2\2\u1097\u1098"+
		"\7\u0155\2\2\u1098\u1099\7\u009b\2\2\u1099\u109a\5\u0250\u0129\2\u109a"+
		"\u109b\7\u01d3\2\2\u109b\u109c\5\u04bc\u025f\2\u109c\u109d\5\u0102\u0082"+
		"\2\u109d\u10a9\3\2\2\2\u109e\u109f\7\u00d5\2\2\u109f\u10a0\7\u0155\2\2"+
		"\u10a0\u10a1\7\u009b\2\2\u10a1\u10a2\7\u0102\2\2\u10a2\u10a3\7\u00e3\2"+
		"\2\u10a3\u10a4\5\u0250\u0129\2\u10a4\u10a5\7\u01d3\2\2\u10a5\u10a6\5\u04bc"+
		"\u025f\2\u10a6\u10a7\5\u0102\u0082\2\u10a7\u10a9\3\2\2\2\u10a8\u1096\3"+
		"\2\2\2\u10a8\u109e\3\2\2\2\u10a9\u0243\3\2\2\2\u10aa\u10ab\7\u00d5\2\2"+
		"\u10ab\u10ac\7\u0155\2\2\u10ac\u10ad\7\u00e9\2\2\u10ad\u10ae\5\u0250\u0129"+
		"\2\u10ae\u10af\7\u01d3\2\2\u10af\u10b0\5\u04bc\u025f\2\u10b0\u10b1\5\u0102"+
		"\u0082\2\u10b1\u10bd\3\2\2\2\u10b2\u10b3\7\u00d5\2\2\u10b3\u10b4\7\u0155"+
		"\2\2\u10b4\u10b5\7\u00e9\2\2\u10b5\u10b6\7\u0102\2\2\u10b6\u10b7\7\u00e3"+
		"\2\2\u10b7\u10b8\5\u0250\u0129\2\u10b8\u10b9\7\u01d3\2\2\u10b9\u10ba\5"+
		"\u04bc\u025f\2\u10ba\u10bb\5\u0102\u0082\2\u10bb\u10bd\3\2\2\2\u10bc\u10aa"+
		"\3\2\2\2\u10bc\u10b2\3\2\2\2\u10bd\u0245\3\2\2\2\u10be\u10bf\7\u00d5\2"+
		"\2\u10bf\u10c0\7\u015f\2\2\u10c0\u10c1\7\u008d\2\2\u10c1\u10c2\5\u04b6"+
		"\u025c\2\u10c2\u10c3\5\u0102\u0082\2\u10c3\u0247\3\2\2\2\u10c4\u10c5\7"+
		"\u0177\2\2\u10c5\u10c6\7\u015f\2\2\u10c6\u10c7\7\u008d\2\2\u10c7\u10c8"+
		"\5\u04b6\u025c\2\u10c8\u10c9\7\u01bd\2\2\u10c9\u10ca\5\u04b8\u025d\2\u10ca"+
		"\u0249\3\2\2\2\u10cb\u10cc\7\u00d5\2\2\u10cc\u10cd\5\u024c\u0127\2\u10cd"+
		"\u10ce\7\u0102\2\2\u10ce\u10cf\7\u00e3\2\2\u10cf\u10d0\5\u024e\u0128\2"+
		"\u10d0\u10d1\5\u0102\u0082\2\u10d1\u10e6\3\2\2\2\u10d2\u10d3\7\u00d5\2"+
		"\2\u10d3\u10d4\5\u024c\u0127\2\u10d4\u10d5\5\u024e\u0128\2\u10d5\u10d6"+
		"\5\u0102\u0082\2\u10d6\u10e6\3\2\2\2\u10d7\u10d8\7\u00d5\2\2\u10d8\u10d9"+
		"\7\u010a\2\2\u10d9\u10da\7\u00a6\2\2\u10da\u10db\5\u024e\u0128\2\u10db"+
		"\u10dc\5\u0102\u0082\2\u10dc\u10e6\3\2\2\2\u10dd\u10de\7\u00d5\2\2\u10de"+
		"\u10df\7\u010a\2\2\u10df\u10e0\7\u00a6\2\2\u10e0\u10e1\7\u0102\2\2\u10e1"+
		"\u10e2\7\u00e3\2\2\u10e2\u10e3\5\u024e\u0128\2\u10e3\u10e4\5\u0102\u0082"+
		"\2\u10e4\u10e6\3\2\2\2\u10e5\u10cb\3\2\2\2\u10e5\u10d2\3\2\2\2\u10e5\u10d7"+
		"\3\2\2\2\u10e5\u10dd\3\2\2\2\u10e6\u024b\3\2\2\2\u10e7\u1100\7\u01b3\2"+
		"\2\u10e8\u1100\7\u0196\2\2\u10e9\u1100\7\u01df\2\2\u10ea\u1100\7\u010a"+
		"\2\2\u10eb\u10ec\7\u00f0\2\2\u10ec\u1100\7\u01b3\2\2\u10ed\u1100\7\u01c6"+
		"\2\2\u10ee\u1100\7\u00d3\2\2\u10ef\u1100\7\u00a0\2\2\u10f0\u1100\7\u00ad"+
		"\2\2\u10f1\u1100\7\u0190\2\2\u10f2\u1100\7\u00e5\2\2\u10f3\u10f4\7\u01b9"+
		"\2\2\u10f4\u10f5\7\u0192\2\2\u10f5\u1100\7\u0161\2\2\u10f6\u10f7\7\u01b9"+
		"\2\2\u10f7\u10f8\7\u0192\2\2\u10f8\u1100\7\u00cd\2\2\u10f9\u10fa\7\u01b9"+
		"\2\2\u10fa\u10fb\7\u0192\2\2\u10fb\u1100\7\u01b7\2\2\u10fc\u10fd\7\u01b9"+
		"\2\2\u10fd\u10fe\7\u0192\2\2\u10fe\u1100\7\u00a7\2\2\u10ff\u10e7\3\2\2"+
		"\2\u10ff\u10e8\3\2\2\2\u10ff\u10e9\3\2\2\2\u10ff\u10ea\3\2\2\2\u10ff\u10eb"+
		"\3\2\2\2\u10ff\u10ed\3\2\2\2\u10ff\u10ee\3\2\2\2\u10ff\u10ef\3\2\2\2\u10ff"+
		"\u10f0\3\2\2\2\u10ff\u10f1\3\2\2\2\u10ff\u10f2\3\2\2\2\u10ff\u10f3\3\2"+
		"\2\2\u10ff\u10f6\3\2\2\2\u10ff\u10f9\3\2\2\2\u10ff\u10fc\3\2\2\2\u1100"+
		"\u024d\3\2\2\2\u1101\u1102\b\u0128\1\2\u1102\u1103\5\u0250\u0129\2\u1103"+
		"\u1109\3\2\2\2\u1104\u1105\f\3\2\2\u1105\u1106\7\b\2\2\u1106\u1108\5\u0250"+
		"\u0129\2\u1107\u1104\3\2\2\2\u1108\u110b\3\2\2\2\u1109\u1107\3\2\2\2\u1109"+
		"\u110a\3\2\2\2\u110a\u024f\3\2\2\2\u110b\u1109\3\2\2\2\u110c\u1111\5\u04d0"+
		"\u0269\2\u110d\u110e\5\u04d0\u0269\2\u110e\u110f\5\u0252\u012a\2\u110f"+
		"\u1111\3\2\2\2\u1110\u110c\3\2\2\2\u1110\u110d\3\2\2\2\u1111\u0251\3\2"+
		"\2\2\u1112\u1113\b\u012a\1\2\u1113\u1114\7\6\2\2\u1114\u1115\5\u04be\u0260"+
		"\2\u1115\u111b\3\2\2\2\u1116\u1117\f\3\2\2\u1117\u1118\7\6\2\2\u1118\u111a"+
		"\5\u04be\u0260\2\u1119\u1116\3\2\2\2\u111a\u111d\3\2\2\2\u111b\u1119\3"+
		"\2\2\2\u111b\u111c\3\2\2\2\u111c\u0253\3\2\2\2\u111d\u111b\3\2\2\2\u111e"+
		"\u111f\7\u01c4\2\2\u111f\u1120\5\u03b6\u01dc\2\u1120\u1121\5\u03fa\u01fe"+
		"\2\u1121\u1122\5\u0256\u012c\2\u1122\u1123\5\u0102\u0082\2\u1123\u0255"+
		"\3\2\2\2\u1124\u1125\7\u00ac\2\2\u1125\u112a\7\u0101\2\2\u1126\u1127\7"+
		"\u0184\2\2\u1127\u112a\7\u0101\2\2\u1128\u112a\3\2\2\2\u1129\u1124\3\2"+
		"\2\2\u1129\u1126\3\2\2\2\u1129\u1128\3\2\2\2\u112a\u0257\3\2\2\2\u112b"+
		"\u112c\7\u00a2\2\2\u112c\u112d\7\u0153\2\2\u112d\u112e\5\u025a\u012e\2"+
		"\u112e\u112f\5\u0250\u0129\2\u112f\u1130\7\u011c\2\2\u1130\u1131\5\u025c"+
		"\u012f\2\u1131\u11c0\3\2\2\2\u1132\u1133\7\u00a2\2\2\u1133\u1134\7\u0153"+
		"\2\2\u1134\u1135\7r\2\2\u1135\u1136\5\u04c4\u0263\2\u1136\u1137\5\u021e"+
		"\u0110\2\u1137\u1138\7\u011c\2\2\u1138\u1139\5\u025c\u012f\2\u1139\u11c0"+
		"\3\2\2\2\u113a\u113b\7\u00a2\2\2\u113b\u113c\7\u0153\2\2\u113c\u113d\7"+
		"\u00f5\2\2\u113d\u113e\5\u04c4\u0263\2\u113e\u113f\5\u02b0\u0159\2\u113f"+
		"\u1140\7\u011c\2\2\u1140\u1141\5\u025c\u012f\2\u1141\u11c0\3\2\2\2\u1142"+
		"\u1143\7\u00a2\2\2\u1143\u1144\7\u0153\2\2\u1144\u1145\7\u0155\2\2\u1145"+
		"\u1146\5\u02e0\u0171\2\u1146\u1147\5\u02de\u0170\2\u1147\u1148\7\u011c"+
		"\2\2\u1148\u1149\5\u025c\u012f\2\u1149\u11c0\3\2\2\2\u114a\u114b\7\u00a2"+
		"\2\2\u114b\u114c\7\u0153\2\2\u114c\u114d\7\u00a9\2\2\u114d\u114e\5\u04b8"+
		"\u025d\2\u114e\u114f\7\u0153\2\2\u114f\u1150\5\u0250\u0129\2\u1150\u1151"+
		"\7\u011c\2\2\u1151\u1152\5\u025c\u012f\2\u1152\u11c0\3\2\2\2\u1153\u1154"+
		"\7\u00a2\2\2\u1154\u1155\7\u0153\2\2\u1155\u1156\7\u018e\2\2\u1156\u1157"+
		"\5\u04b8\u025d\2\u1157\u1158\7\u0153\2\2\u1158\u1159\5\u0250\u0129\2\u1159"+
		"\u115a\7\u011c\2\2\u115a\u115b\5\u025c\u012f\2\u115b\u11c0\3\2\2\2\u115c"+
		"\u115d\7\u00a2\2\2\u115d\u115e\7\u0153\2\2\u115e\u115f\7\u018e\2\2\u115f"+
		"\u1160\5\u04b8\u025d\2\u1160\u1161\7\u011c\2\2\u1161\u1162\5\u025c\u012f"+
		"\2\u1162\u11c0\3\2\2\2\u1163\u1164\7\u00a2\2\2\u1164\u1165\7\u0153\2\2"+
		"\u1165\u1166\7\u01c1\2\2\u1166\u1167\5\u04b8\u025d\2\u1167\u1168\7\u0153"+
		"\2\2\u1168\u1169\5\u0250\u0129\2\u1169\u116a\7\u011c\2\2\u116a\u116b\5"+
		"\u025c\u012f\2\u116b\u11c0\3\2\2\2\u116c\u116d\7\u00a2\2\2\u116d\u116e"+
		"\7\u0153\2\2\u116e\u116f\7\u0155\2\2\u116f\u1170\7\u009b\2\2\u1170\u1171"+
		"\5\u0250\u0129\2\u1171\u1172\7\u01d3\2\2\u1172\u1173\5\u04bc\u025f\2\u1173"+
		"\u1174\7\u011c\2\2\u1174\u1175\5\u025c\u012f\2\u1175\u11c0\3\2\2\2\u1176"+
		"\u1177\7\u00a2\2\2\u1177\u1178\7\u0153\2\2\u1178\u1179\7\u0155\2\2\u1179"+
		"\u117a\7\u00e9\2\2\u117a\u117b\5\u0250\u0129\2\u117b\u117c\7\u01d3\2\2"+
		"\u117c\u117d\5\u04bc\u025f\2\u117d\u117e\7\u011c\2\2\u117e\u117f\5\u025c"+
		"\u012f\2\u117f\u11c0\3\2\2\2\u1180\u1181\7\u00a2\2\2\u1181\u1182\7\u0153"+
		"\2\2\u1182\u1183\7\u0123\2\2\u1183\u1184\7\u014e\2\2\u1184\u1185\5\u0192"+
		"\u00ca\2\u1185\u1186\7\u011c\2\2\u1186\u1187\5\u025c\u012f\2\u1187\u11c0"+
		"\3\2\2\2\u1188\u1189\7\u00a2\2\2\u1189\u118a\7\u0153\2\2\u118a\u118b\7"+
		"\u0093\2\2\u118b\u118c\7\r\2\2\u118c\u118d\5\u040a\u0206\2\u118d\u118e"+
		"\7|\2\2\u118e\u118f\5\u040a\u0206\2\u118f\u1190\7\7\2\2\u1190\u1191\7"+
		"\u011c\2\2\u1191\u1192\5\u025c\u012f\2\u1192\u11c0\3\2\2\2\u1193\u1194"+
		"\7\u00a2\2\2\u1194\u1195\7\u0153\2\2\u1195\u1196\5\u01a4\u00d3\2\u1196"+
		"\u1197\7\u0122\2\2\u1197\u1198\5\u0250\u0129\2\u1198\u1199\7\u011c\2\2"+
		"\u1199\u119a\5\u025c\u012f\2\u119a\u11c0\3\2\2\2\u119b\u119c\7\u00a2\2"+
		"\2\u119c\u119d\7\u0153\2\2\u119d\u119e\7\u01b9\2\2\u119e\u119f\7\u0192"+
		"\2\2\u119f\u11a0\7\u0161\2\2\u11a0\u11a1\5\u0250\u0129\2\u11a1\u11a2\7"+
		"\u011c\2\2\u11a2\u11a3\5\u025c\u012f\2\u11a3\u11c0\3\2\2\2\u11a4\u11a5"+
		"\7\u00a2\2\2\u11a5\u11a6\7\u0153\2\2\u11a6\u11a7\7\u01b9\2\2\u11a7\u11a8"+
		"\7\u0192\2\2\u11a8\u11a9\7\u00cd\2\2\u11a9\u11aa\5\u0250\u0129\2\u11aa"+
		"\u11ab\7\u011c\2\2\u11ab\u11ac\5\u025c\u012f\2\u11ac\u11c0\3\2\2\2\u11ad"+
		"\u11ae\7\u00a2\2\2\u11ae\u11af\7\u0153\2\2\u11af\u11b0\7\u01b9\2\2\u11b0"+
		"\u11b1\7\u0192\2\2\u11b1\u11b2\7\u01b7\2\2\u11b2\u11b3\5\u0250\u0129\2"+
		"\u11b3\u11b4\7\u011c\2\2\u11b4\u11b5\5\u025c\u012f\2\u11b5\u11c0\3\2\2"+
		"\2\u11b6\u11b7\7\u00a2\2\2\u11b7\u11b8\7\u0153\2\2\u11b8\u11b9\7\u01b9"+
		"\2\2\u11b9\u11ba\7\u0192\2\2\u11ba\u11bb\7\u00a7\2\2\u11bb\u11bc\5\u0250"+
		"\u0129\2\u11bc\u11bd\7\u011c\2\2\u11bd\u11be\5\u025c\u012f\2\u11be\u11c0"+
		"\3\2\2\2\u11bf\u112b\3\2\2\2\u11bf\u1132\3\2\2\2\u11bf\u113a\3\2\2\2\u11bf"+
		"\u1142\3\2\2\2\u11bf\u114a\3\2\2\2\u11bf\u1153\3\2\2\2\u11bf\u115c\3\2"+
		"\2\2\u11bf\u1163\3\2\2\2\u11bf\u116c\3\2\2\2\u11bf\u1176\3\2\2\2\u11bf"+
		"\u1180\3\2\2\2\u11bf\u1188\3\2\2\2\u11bf\u1193\3\2\2\2\u11bf\u119b\3\2"+
		"\2\2\u11bf\u11a4\3\2\2\2\u11bf\u11ad\3\2\2\2\u11bf\u11b6\3\2\2\2\u11c0"+
		"\u0259\3\2\2\2\u11c1\u11d6\7\u00a1\2\2\u11c2\u11d6\7\u00be\2\2\u11c3\u11d6"+
		"\7\u0190\2\2\u11c4\u11d6\7\u010a\2\2\u11c5\u11d6\7\u0196\2\2\u11c6\u11d6"+
		"\7\u01b3\2\2\u11c7\u11d6\7\u00d3\2\2\u11c8\u11d6\7\u01c6\2\2\u11c9\u11d6"+
		"\7\u01df\2\2\u11ca\u11d6\7\u00a0\2\2\u11cb\u11d6\7\u00ad\2\2\u11cc\u11d6"+
		"\7\u01b5\2\2\u11cd\u11d6\7\u00e5\2\2\u11ce\u11d6\7\u018a\2\2\u11cf\u11d0"+
		"\7\u00f0\2\2\u11d0\u11d6\7\u01b3\2\2\u11d1\u11d6\7\u0199\2\2\u11d2\u11d3"+
		"\7\u00f0\2\2\u11d3\u11d4\7\u00bd\2\2\u11d4\u11d6\7\u01e8\2\2\u11d5\u11c1"+
		"\3\2\2\2\u11d5\u11c2\3\2\2\2\u11d5\u11c3\3\2\2\2\u11d5\u11c4\3\2\2\2\u11d5"+
		"\u11c5\3\2\2\2\u11d5\u11c6\3\2\2\2\u11d5\u11c7\3\2\2\2\u11d5\u11c8\3\2"+
		"\2\2\u11d5\u11c9\3\2\2\2\u11d5\u11ca\3\2\2\2\u11d5\u11cb\3\2\2\2\u11d5"+
		"\u11cc\3\2\2\2\u11d5\u11cd\3\2\2\2\u11d5\u11ce\3\2\2\2\u11d5\u11cf\3\2"+
		"\2\2\u11d5\u11d1\3\2\2\2\u11d5\u11d2\3\2\2\2\u11d6\u025b\3\2\2\2\u11d7"+
		"\u11da\5\u04ca\u0266\2\u11d8\u11da\7\u014a\2\2\u11d9\u11d7\3\2\2\2\u11d9"+
		"\u11d8\3\2\2\2\u11da\u025d\3\2\2\2\u11db\u11dc\7\u0194\2\2\u11dc\u11dd"+
		"\7\u0121\2\2\u11dd\u11de\5\u0260\u0131\2\u11de\u11df\7\u0153\2\2\u11df"+
		"\u11e0\5\u0262\u0132\2\u11e0\u11e1\5\u0250\u0129\2\u11e1\u11e2\7\u011c"+
		"\2\2\u11e2\u11e3\5\u0264\u0133\2\u11e3\u120d\3\2\2\2\u11e4\u11e5\7\u0194"+
		"\2\2\u11e5\u11e6\7\u0121\2\2\u11e6\u11e7\5\u0260\u0131\2\u11e7\u11e8\7"+
		"\u0153\2\2\u11e8\u11e9\7r\2\2\u11e9\u11ea\5\u04c4\u0263\2\u11ea\u11eb"+
		"\5\u021e\u0110\2\u11eb\u11ec\7\u011c\2\2\u11ec\u11ed\5\u0264\u0133\2\u11ed"+
		"\u120d\3\2\2\2\u11ee\u11ef\7\u0194\2\2\u11ef\u11f0\7\u0121\2\2\u11f0\u11f1"+
		"\5\u0260\u0131\2\u11f1\u11f2\7\u0153\2\2\u11f2\u11f3\7\u00f5\2\2\u11f3"+
		"\u11f4\5\u04c4\u0263\2\u11f4\u11f5\5\u02b0\u0159\2\u11f5\u11f6\7\u011c"+
		"\2\2\u11f6\u11f7\5\u0264\u0133\2\u11f7\u120d\3\2\2\2\u11f8\u11f9\7\u0194"+
		"\2\2\u11f9\u11fa\7\u0121\2\2\u11fa\u11fb\5\u0260\u0131\2\u11fb\u11fc\7"+
		"\u0153\2\2\u11fc\u11fd\7\u0123\2\2\u11fd\u11fe\7\u014e\2\2\u11fe\u11ff"+
		"\5\u0192\u00ca\2\u11ff\u1200\7\u011c\2\2\u1200\u1201\5\u0264\u0133\2\u1201"+
		"\u120d\3\2\2\2\u1202\u1203\7\u0194\2\2\u1203\u1204\7\u0121\2\2\u1204\u1205"+
		"\5\u0260\u0131\2\u1205\u1206\7\u0153\2\2\u1206\u1207\5\u01a4\u00d3\2\u1207"+
		"\u1208\7\u0122\2\2\u1208\u1209\5\u0250\u0129\2\u1209\u120a\7\u011c\2\2"+
		"\u120a\u120b\5\u0264\u0133\2\u120b\u120d\3\2\2\2\u120c\u11db\3\2\2\2\u120c"+
		"\u11e4\3\2\2\2\u120c\u11ee\3\2\2\2\u120c\u11f8\3\2\2\2\u120c\u1202\3\2"+
		"\2\2\u120d\u025f\3\2\2\2\u120e\u120f\7\u00ee\2\2\u120f\u1212\5\u00e6t"+
		"\2\u1210\u1212\3\2\2\2\u1211\u120e\3\2\2\2\u1211\u1210\3\2\2\2\u1212\u0261"+
		"\3\2\2\2\u1213\u1220\7\u00a1\2\2\u1214\u1220\7\u00be\2\2\u1215\u1216\7"+
		"\u00f0\2\2\u1216\u1220\7\u01b3\2\2\u1217\u1220\7\u0190\2\2\u1218\u1220"+
		"\7\u0196\2\2\u1219\u1220\7\u01b3\2\2\u121a\u1220\7\u00d3\2\2\u121b\u1220"+
		"\7\u018a\2\2\u121c\u1220\7\u01b5\2\2\u121d\u1220\7\u01c6\2\2\u121e\u1220"+
		"\7\u01df\2\2\u121f\u1213\3\2\2\2\u121f\u1214\3\2\2\2\u121f\u1215\3\2\2"+
		"\2\u121f\u1217\3\2\2\2\u121f\u1218\3\2\2\2\u121f\u1219\3\2\2\2\u121f\u121a"+
		"\3\2\2\2\u121f\u121b\3\2\2\2\u121f\u121c\3\2\2\2\u121f\u121d\3\2\2\2\u121f"+
		"\u121e\3\2\2\2\u1220\u0263\3\2\2\2\u1221\u1224\5\u04ca\u0266\2\u1222\u1224"+
		"\7\u014a\2\2\u1223\u1221\3\2\2\2\u1223\u1222\3\2\2\2\u1224\u0265\3\2\2"+
		"\2\u1225\u1226\7\u00ea\2\2\u1226\u122a\5\u0268\u0135\2\u1227\u1228\7\u013c"+
		"\2\2\u1228\u122a\5\u0268\u0135\2\u1229\u1225\3\2\2\2\u1229\u1227\3\2\2"+
		"\2\u122a\u0267\3\2\2\2\u122b\u126e\5\u039a\u01ce\2\u122c\u122d\5\u026a"+
		"\u0136\2\u122d\u122e\5\u039a\u01ce\2\u122e\u126e\3\2\2\2\u122f\u1230\7"+
		"\u0142\2\2\u1230\u1231\5\u026c\u0137\2\u1231\u1232\5\u039a\u01ce\2\u1232"+
		"\u126e\3\2\2\2\u1233\u1234\7\u016f\2\2\u1234\u1235\5\u026c\u0137\2\u1235"+
		"\u1236\5\u039a\u01ce\2\u1236\u126e\3\2\2\2\u1237\u1238\7\u00eb\2\2\u1238"+
		"\u1239\5\u026c\u0137\2\u1239\u123a\5\u039a\u01ce\2\u123a\u126e\3\2\2\2"+
		"\u123b\u123c\7\u0124\2\2\u123c\u123d\5\u026c\u0137\2\u123d\u123e\5\u039a"+
		"\u01ce\2\u123e\u126e\3\2\2\2\u123f\u1240\7l\2\2\u1240\u1241\5\u04ce\u0268"+
		"\2\u1241\u1242\5\u026c\u0137\2\u1242\u1243\5\u039a\u01ce\2\u1243\u126e"+
		"\3\2\2\2\u1244\u1245\7\u017d\2\2\u1245\u1246\5\u04ce\u0268\2\u1246\u1247"+
		"\5\u026c\u0137\2\u1247\u1248\5\u039a\u01ce\2\u1248\u126e\3\2\2\2\u1249"+
		"\u124a\5\u04ce\u0268\2\u124a\u124b\5\u026c\u0137\2\u124b\u124c\5\u039a"+
		"\u01ce\2\u124c\u126e\3\2\2\2\u124d\u124e\7s\2\2\u124e\u124f\5\u026c\u0137"+
		"\2\u124f\u1250\5\u039a\u01ce\2\u1250\u126e\3\2\2\2\u1251\u1252\7\u00f1"+
		"\2\2\u1252\u1253\5\u026c\u0137\2\u1253\u1254\5\u039a\u01ce\2\u1254\u126e"+
		"\3\2\2\2\u1255\u1256\7\u00f1\2\2\u1256\u1257\5\u04ce\u0268\2\u1257\u1258"+
		"\5\u026c\u0137\2\u1258\u1259\5\u039a\u01ce\2\u1259\u126e\3\2\2\2\u125a"+
		"\u125b\7\u00f1\2\2\u125b\u125c\7s\2\2\u125c\u125d\5\u026c\u0137\2\u125d"+
		"\u125e\5\u039a\u01ce\2\u125e\u126e\3\2\2\2\u125f\u1260\7\u0084\2\2\u1260"+
		"\u1261\5\u026c\u0137\2\u1261\u1262\5\u039a\u01ce\2\u1262\u126e\3\2\2\2"+
		"\u1263\u1264\7\u0084\2\2\u1264\u1265\5\u04ce\u0268\2\u1265\u1266\5\u026c"+
		"\u0137\2\u1266\u1267\5\u039a\u01ce\2\u1267\u126e\3\2\2\2\u1268\u1269\7"+
		"\u0084\2\2\u1269\u126a\7s\2\2\u126a\u126b\5\u026c\u0137\2\u126b\u126c"+
		"\5\u039a\u01ce\2\u126c\u126e\3\2\2\2\u126d\u122b\3\2\2\2\u126d\u122c\3"+
		"\2\2\2\u126d\u122f\3\2\2\2\u126d\u1233\3\2\2\2\u126d\u1237\3\2\2\2\u126d"+
		"\u123b\3\2\2\2\u126d\u123f\3\2\2\2\u126d\u1244\3\2\2\2\u126d\u1249\3\2"+
		"\2\2\u126d\u124d\3\2\2\2\u126d\u1251\3\2\2\2\u126d\u1255\3\2\2\2\u126d"+
		"\u125a\3\2\2\2\u126d\u125f\3\2\2\2\u126d\u1263\3\2\2\2\u126d\u1268\3\2"+
		"\2\2\u126e\u0269\3\2\2\2\u126f\u1270\t\16\2\2\u1270\u026b\3\2\2\2\u1271"+
		"\u1274\5\u026a\u0136\2\u1272\u1274\3\2\2\2\u1273\u1271\3\2\2\2\u1273\u1272"+
		"\3\2\2\2\u1274\u026d\3\2\2\2\u1275\u1276\7\u00f8\2\2\u1276\u1277\5\u0272"+
		"\u013a\2\u1277\u1278\7\u0153\2\2\u1278\u1279\5\u0278\u013d\2\u1279\u127a"+
		"\7\u01bd\2\2\u127a\u127b\5\u027a\u013e\2\u127b\u127c\5\u027e\u0140\2\u127c"+
		"\u026f\3\2\2\2\u127d\u127e\7\u0188\2\2\u127e\u127f\5\u0272\u013a\2\u127f"+
		"\u1280\7\u0153\2\2\u1280\u1281\5\u0278\u013d\2\u1281\u1282\7\u00f3\2\2"+
		"\u1282\u1283\5\u027a\u013e\2\u1283\u1284\5\u0102\u0082\2\u1284\u1291\3"+
		"\2\2\2\u1285\u1286\7\u0188\2\2\u1286\u1287\7\u00f8\2\2\u1287\u1288\7\u0156"+
		"\2\2\u1288\u1289\7\u00ee\2\2\u1289\u128a\5\u0272\u013a\2\u128a\u128b\7"+
		"\u0153\2\2\u128b\u128c\5\u0278\u013d\2\u128c\u128d\7\u00f3\2\2\u128d\u128e"+
		"\5\u027a\u013e\2\u128e\u128f\5\u0102\u0082\2\u128f\u1291\3\2\2\2\u1290"+
		"\u127d\3\2\2\2\u1290\u1285\3\2\2\2\u1291\u0271\3\2\2\2\u1292\u12a2\5\u0274"+
		"\u013b\2\u1293\u12a2\7s\2\2\u1294\u1295\7s\2\2\u1295\u12a2\7\u0170\2\2"+
		"\u1296\u1297\7s\2\2\u1297\u1298\7\r\2\2\u1298\u1299\5\u0160\u00b1\2\u1299"+
		"\u129a\7\7\2\2\u129a\u12a2\3\2\2\2\u129b\u129c\7s\2\2\u129c\u129d\7\u0170"+
		"\2\2\u129d\u129e\7\r\2\2\u129e\u129f\5\u0160\u00b1\2\u129f\u12a0\7\7\2"+
		"\2\u12a0\u12a2\3\2\2\2\u12a1\u1292\3\2\2\2\u12a1\u1293\3\2\2\2\u12a1\u1294"+
		"\3\2\2\2\u12a1\u1296\3\2\2\2\u12a1\u129b\3\2\2\2\u12a2\u0273\3\2\2\2\u12a3"+
		"\u12a4\b\u013b\1\2\u12a4\u12a5\5\u0276\u013c\2\u12a5\u12ab\3\2\2\2\u12a6"+
		"\u12a7\f\3\2\2\u12a7\u12a8\7\b\2\2\u12a8\u12aa\5\u0276\u013c\2\u12a9\u12a6"+
		"\3\2\2\2\u12aa\u12ad\3\2\2\2\u12ab\u12a9\3\2\2\2\u12ab\u12ac\3\2\2\2\u12ac"+
		"\u0275\3\2\2\2\u12ad\u12ab\3\2\2\2\u12ae\u12af\7\u0195\2\2\u12af\u12b8"+
		"\5\u015e\u00b0\2\u12b0\u12b1\7\u017b\2\2\u12b1\u12b8\5\u015e\u00b0\2\u12b2"+
		"\u12b3\7\u00b0\2\2\u12b3\u12b8\5\u015e\u00b0\2\u12b4\u12b5\5\u04d0\u0269"+
		"\2\u12b5\u12b6\5\u015e\u00b0\2\u12b6\u12b8\3\2\2\2\u12b7\u12ae\3\2\2\2"+
		"\u12b7\u12b0\3\2\2\2\u12b7\u12b2\3\2\2\2\u12b7\u12b4\3\2\2\2\u12b8\u0277"+
		"\3\2\2\2\u12b9\u12e6\5\u04b2\u025a\2\u12ba\u12bb\7\u01b3\2\2\u12bb\u12e6"+
		"\5\u04b2\u025a\2\u12bc\u12bd\7\u0196\2\2\u12bd\u12e6\5\u04b2\u025a\2\u12be"+
		"\u12bf\7\u00f0\2\2\u12bf\u12c0\7\u00bd\2\2\u12c0\u12c1\7\u01e8\2\2\u12c1"+
		"\u12e6\5\u04b6\u025c\2\u12c2\u12c3\7\u00f0\2\2\u12c3\u12c4\7\u0199\2\2"+
		"\u12c4\u12e6\5\u04b6\u025c\2\u12c5\u12c6\7\u00f5\2\2\u12c6\u12e6\5\u0280"+
		"\u0141\2\u12c7\u12c8\7\u00be\2\2\u12c8\u12e6\5\u04b6\u025c\2\u12c9\u12ca"+
		"\7\u00d3\2\2\u12ca\u12e6\5\u024e\u0128\2\u12cb\u12cc\7\u0122\2\2\u12cc"+
		"\u12e6\5\u04b6\u025c\2\u12cd\u12ce\7\u0123\2\2\u12ce\u12cf\7\u014e\2\2"+
		"\u12cf\u12e6\5\u0194\u00cb\2\u12d0\u12d1\7\u0190\2\2\u12d1\u12e6\5\u04b6"+
		"\u025c\2\u12d2\u12d3\7\u01b5\2\2\u12d3\u12e6\5\u04b6\u025c\2\u12d4\u12d5"+
		"\7\u01c6\2\2\u12d5\u12e6\5\u024e\u0128\2\u12d6\u12d7\7s\2\2\u12d7\u12d8"+
		"\7\u01b4\2\2\u12d8\u12d9\7\u0107\2\2\u12d9\u12da\7\u0190\2\2\u12da\u12e6"+
		"\5\u04b6\u025c\2\u12db\u12dc\7s\2\2\u12dc\u12dd\7\u0197\2\2\u12dd\u12de"+
		"\7\u0107\2\2\u12de\u12df\7\u0190\2\2\u12df\u12e6\5\u04b6\u025c\2\u12e0"+
		"\u12e1\7s\2\2\u12e1\u12e2\7\u00f6\2\2\u12e2\u12e3\7\u0107\2\2\u12e3\u12e4"+
		"\7\u0190\2\2\u12e4\u12e6\5\u04b6\u025c\2\u12e5\u12b9\3\2\2\2\u12e5\u12ba"+
		"\3\2\2\2\u12e5\u12bc\3\2\2\2\u12e5\u12be\3\2\2\2\u12e5\u12c2\3\2\2\2\u12e5"+
		"\u12c5\3\2\2\2\u12e5\u12c7\3\2\2\2\u12e5\u12c9\3\2\2\2\u12e5\u12cb\3\2"+
		"\2\2\u12e5\u12cd\3\2\2\2\u12e5\u12d0\3\2\2\2\u12e5\u12d2\3\2\2\2\u12e5"+
		"\u12d4\3\2\2\2\u12e5\u12d6\3\2\2\2\u12e5\u12db\3\2\2\2\u12e5\u12e0\3\2"+
		"\2\2\u12e6\u0279\3\2\2\2\u12e7\u12e8\b\u013e\1\2\u12e8\u12e9\5\u027c\u013f"+
		"\2\u12e9\u12ef\3\2\2\2\u12ea\u12eb\f\3\2\2\u12eb\u12ec\7\b\2\2\u12ec\u12ee"+
		"\5\u027c\u013f\2\u12ed\u12ea\3\2\2\2\u12ee\u12f1\3\2\2\2\u12ef\u12ed\3"+
		"\2\2\2\u12ef\u12f0\3\2\2\2\u12f0\u027b\3\2\2\2\u12f1\u12ef\3\2\2\2\u12f2"+
		"\u12f6\5\u04cc\u0267\2\u12f3\u12f4\7\u00fb\2\2\u12f4\u12f6\5\u04cc\u0267"+
		"\2\u12f5\u12f2\3\2\2\2\u12f5\u12f3\3\2\2\2\u12f6\u027d\3\2\2\2\u12f7\u12f8"+
		"\7\u01e5\2\2\u12f8\u12f9\7\u00f8\2\2\u12f9\u12fc\7\u0156\2\2\u12fa\u12fc"+
		"\3\2\2\2\u12fb\u12f7\3\2\2\2\u12fb\u12fa\3\2\2\2\u12fc\u027f\3\2\2\2\u12fd"+
		"\u12fe\b\u0141\1\2\u12fe\u12ff\5\u0282\u0142\2\u12ff\u1305\3\2\2\2\u1300"+
		"\u1301\f\3\2\2\u1301\u1302\7\b\2\2\u1302\u1304\5\u0282\u0142\2\u1303\u1300"+
		"\3\2\2\2\u1304\u1307\3\2\2\2\u1305\u1303\3\2\2\2\u1305\u1306\3\2\2\2\u1306"+
		"\u0281\3\2\2\2\u1307\u1305\3\2\2\2\u1308\u1309\5\u04c4\u0263\2\u1309\u130a"+
		"\5\u02b0\u0159\2\u130a\u0283\3\2\2\2\u130b\u130c\7\u00f8\2\2\u130c\u130d"+
		"\5\u0274\u013b\2\u130d\u130e\7\u01bd\2\2\u130e\u130f\5\u04b6\u025c\2\u130f"+
		"\u1310\5\u0288\u0145\2\u1310\u1311\5\u028a\u0146\2\u1311\u0285\3\2\2\2"+
		"\u1312\u1313\7\u0188\2\2\u1313\u1314\5\u0274\u013b\2\u1314\u1315\7\u00f3"+
		"\2\2\u1315\u1316\5\u04b6\u025c\2\u1316\u1317\5\u028a\u0146\2\u1317\u1318"+
		"\5\u0102\u0082\2\u1318\u1324\3\2\2\2\u1319\u131a\7\u0188\2\2\u131a\u131b"+
		"\7p\2\2\u131b\u131c\7\u0156\2\2\u131c\u131d\7\u00ee\2\2\u131d\u131e\5"+
		"\u0274\u013b\2\u131e\u131f\7\u00f3\2\2\u131f\u1320\5\u04b6\u025c\2\u1320"+
		"\u1321\5\u028a\u0146\2\u1321\u1322\5\u0102\u0082\2\u1322\u1324\3\2\2\2"+
		"\u1323\u1312\3\2\2\2\u1323\u1319\3\2\2\2\u1324\u0287\3\2\2\2\u1325\u1326"+
		"\7\u01e5\2\2\u1326\u1327\7p\2\2\u1327\u132a\7\u0156\2\2\u1328\u132a\3"+
		"\2\2\2\u1329\u1325\3\2\2\2\u1329\u1328\3\2\2\2\u132a\u0289\3\2\2\2\u132b"+
		"\u132c\7\u00f9\2\2\u132c\u132d\7\u008d\2\2\u132d\u1330\5\u04cc\u0267\2"+
		"\u132e\u1330\3\2\2\2\u132f\u132b\3\2\2\2\u132f\u132e\3\2\2\2\u1330\u028b"+
		"\3\2\2\2\u1331\u1332\7u\2\2\u1332\u1333\7\u00c4\2\2\u1333\u1334\7\u0170"+
		"\2\2\u1334\u1335\5\u028e\u0148\2\u1335\u1336\5\u0292\u014a\2\u1336\u028d"+
		"\3\2\2\2\u1337\u133c\b\u0148\1\2\u1338\u1339\f\4\2\2\u1339\u133b\5\u0290"+
		"\u0149\2\u133a\u1338\3\2\2\2\u133b\u133e\3\2\2\2\u133c\u133a\3\2\2\2\u133c"+
		"\u133d\3\2\2\2\u133d\u028f\3\2\2\2\u133e\u133c\3\2\2\2\u133f\u1340\7\u0107"+
		"\2\2\u1340\u1341\7\u0190\2\2\u1341\u1349\5\u04b6\u025c\2\u1342\u1343\7"+
		"\u00ee\2\2\u1343\u1344\7\u018a\2\2\u1344\u1349\5\u04b6\u025c\2\u1345\u1346"+
		"\7\u00ee\2\2\u1346\u1347\7\u01d2\2\2\u1347\u1349\5\u04b6\u025c\2\u1348"+
		"\u133f\3\2\2\2\u1348\u1342\3\2\2\2\u1348\u1345\3\2\2\2\u1349\u0291\3\2"+
		"\2\2\u134a\u134b\7\u00f8\2\2\u134b\u134c\5\u0272\u013a\2\u134c\u134d\7"+
		"\u0153\2\2\u134d\u134e\5\u0294\u014b\2\u134e\u134f\7\u01bd\2\2\u134f\u1350"+
		"\5\u027a\u013e\2\u1350\u1351\5\u027e\u0140\2\u1351\u1366\3\2\2\2\u1352"+
		"\u1353\7\u0188\2\2\u1353\u1354\5\u0272\u013a\2\u1354\u1355\7\u0153\2\2"+
		"\u1355\u1356\5\u0294\u014b\2\u1356\u1357\7\u00f3\2\2\u1357\u1358\5\u027a"+
		"\u013e\2\u1358\u1359\5\u0102\u0082\2\u1359\u1366\3\2\2\2\u135a\u135b\7"+
		"\u0188\2\2\u135b\u135c\7\u00f8\2\2\u135c\u135d\7\u0156\2\2\u135d\u135e"+
		"\7\u00ee\2\2\u135e\u135f\5\u0272\u013a\2\u135f\u1360\7\u0153\2\2\u1360"+
		"\u1361\5\u0294\u014b\2\u1361\u1362\7\u00f3\2\2\u1362\u1363\5\u027a\u013e"+
		"\2\u1363\u1364\5\u0102\u0082\2\u1364\u1366\3\2\2\2\u1365\u134a\3\2\2\2"+
		"\u1365\u1352\3\2\2\2\u1365\u135a\3\2\2\2\u1366\u0293\3\2\2\2\u1367\u1368"+
		"\t\17\2\2\u1368\u0295\3\2\2\2\u1369\u136a\7\u00b0\2\2\u136a\u136b\5\u0298"+
		"\u014d\2\u136b\u136c\7\u010a\2\2\u136c\u136d\5\u029a\u014e\2\u136d\u136e"+
		"\5\u029c\u014f\2\u136e\u136f\7\u0153\2\2\u136f\u1370\5\u04b4\u025b\2\u1370"+
		"\u1371\5\u029e\u0150\2\u1371\u1372\7\r\2\2\u1372\u1373\5\u02a0\u0151\2"+
		"\u1373\u1374\7\7\2\2\u1374\u1375\5\u010a\u0086\2\u1375\u1376\5\u017a\u00be"+
		"\2\u1376\u1377\5\u0400\u0201\2\u1377\u0297\3\2\2\2\u1378\u137b\7\u01cc"+
		"\2\2\u1379\u137b\3\2\2\2\u137a\u1378\3\2\2\2\u137a\u1379\3\2\2\2\u137b"+
		"\u0299\3\2\2\2\u137c\u137f\7\u00a6\2\2\u137d\u137f\3\2\2\2\u137e\u137c"+
		"\3\2\2\2\u137e\u137d\3\2\2\2\u137f\u029b\3\2\2\2\u1380\u1383\5\u04c0\u0261"+
		"\2\u1381\u1383\3\2\2\2\u1382\u1380\3\2\2\2\u1382\u1381\3\2\2\2\u1383\u029d"+
		"\3\2\2\2\u1384\u1385\7\u01d3\2\2\u1385\u1388\5\u04bc\u025f\2\u1386\u1388"+
		"\3\2\2\2\u1387\u1384\3\2\2\2\u1387\u1386\3\2\2\2\u1388\u029f\3\2\2\2\u1389"+
		"\u138a\b\u0151\1\2\u138a\u138b\5\u02a2\u0152\2\u138b\u1391\3\2\2\2\u138c"+
		"\u138d\f\3\2\2\u138d\u138e\7\b\2\2\u138e\u1390\5\u02a2\u0152\2\u138f\u138c"+
		"\3\2\2\2\u1390\u1393\3\2\2\2\u1391\u138f\3\2\2\2\u1391\u1392\3\2\2\2\u1392"+
		"\u02a1\3\2\2\2\u1393\u1391\3\2\2\2\u1394\u1395\5\u04d0\u0269\2\u1395\u1396"+
		"\5\u02a4\u0153\2\u1396\u1397\5\u02a6\u0154\2\u1397\u1398\5\u02a8\u0155"+
		"\2\u1398\u1399\5\u02aa\u0156\2\u1399\u13a9\3\2\2\2\u139a\u139b\5\u0440"+
		"\u0221\2\u139b\u139c\5\u02a4\u0153\2\u139c\u139d\5\u02a6\u0154\2\u139d"+
		"\u139e\5\u02a8\u0155\2\u139e\u139f\5\u02aa\u0156\2\u139f\u13a9\3\2\2\2"+
		"\u13a0\u13a1\7\r\2\2\u13a1\u13a2\5\u043a\u021e\2\u13a2\u13a3\7\7\2\2\u13a3"+
		"\u13a4\5\u02a4\u0153\2\u13a4\u13a5\5\u02a6\u0154\2\u13a5\u13a6\5\u02a8"+
		"\u0155\2\u13a6\u13a7\5\u02aa\u0156\2\u13a7\u13a9\3\2\2\2\u13a8\u1394\3"+
		"\2\2\2\u13a8\u139a\3\2\2\2\u13a8\u13a0\3\2\2\2\u13a9\u02a3\3\2\2\2\u13aa"+
		"\u13ab\7\u009f\2\2\u13ab\u13ae\5\u0250\u0129\2\u13ac\u13ae\3\2\2\2\u13ad"+
		"\u13aa\3\2\2\2\u13ad\u13ac\3\2\2\2\u13ae\u02a5\3\2\2\2\u13af\u13b4\5\u0250"+
		"\u0129\2\u13b0\u13b1\7\u01d3\2\2\u13b1\u13b4\5\u0250\u0129\2\u13b2\u13b4"+
		"\3\2\2\2\u13b3\u13af\3\2\2\2\u13b3\u13b0\3\2\2\2\u13b3\u13b2\3\2\2\2\u13b4"+
		"\u02a7\3\2\2\2\u13b5\u13b9\7}\2\2\u13b6\u13b9\7\u00cc\2\2\u13b7\u13b9"+
		"\3\2\2\2\u13b8\u13b5\3\2\2\2\u13b8\u13b6\3\2\2\2\u13b8\u13b7\3\2\2\2\u13b9"+
		"\u02a9\3\2\2\2\u13ba\u13be\7\u022b\2\2\u13bb\u13be\7\u022c\2\2\u13bc\u13be"+
		"\3\2\2\2\u13bd\u13ba\3\2\2\2\u13bd\u13bb\3\2\2\2\u13bd\u13bc\3\2\2\2\u13be"+
		"\u02ab\3\2\2\2\u13bf\u13c1\7\u00b0\2\2\u13c0\u13c2\5\u02ae\u0158\2\u13c1"+
		"\u13c0\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3\u13c4\7\u00f5"+
		"\2\2\u13c4\u13c5\5\u04c4\u0263\2\u13c5\u13c6\5\u02b4\u015b\2\u13c6\u13c7"+
		"\7\u0187\2\2\u13c7\u13c8\5\u02be\u0160\2\u13c8\u13c9\5\u02c4\u0163\2\u13c9"+
		"\u13ca\5\u02cc\u0167\2\u13ca\u13e5\3\2\2\2\u13cb\u13cd\7\u00b0\2\2\u13cc"+
		"\u13ce\5\u02ae\u0158\2\u13cd\u13cc\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13cf"+
		"\3\2\2\2\u13cf\u13d0\7\u00f5\2\2\u13d0\u13d1\5\u04c4\u0263\2\u13d1\u13d2"+
		"\5\u02b4\u015b\2\u13d2\u13d3\7\u0187\2\2\u13d3\u13d4\7\u01b3\2\2\u13d4"+
		"\u13d5\7\r\2\2\u13d5\u13d6\5\u02d0\u0169\2\u13d6\u13d7\7\7\2\2\u13d7\u13d8"+
		"\5\u02c4\u0163\2\u13d8\u13d9\5\u02cc\u0167\2\u13d9\u13e5\3\2\2\2\u13da"+
		"\u13dc\7\u00b0\2\2\u13db\u13dd\5\u02ae\u0158\2\u13dc\u13db\3\2\2\2\u13dc"+
		"\u13dd\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13df\7\u00f5\2\2\u13df\u13e0"+
		"\5\u04c4\u0263\2\u13e0\u13e1\5\u02b4\u015b\2\u13e1\u13e2\5\u02c4\u0163"+
		"\2\u13e2\u13e3\5\u02cc\u0167\2\u13e3\u13e5\3\2\2\2\u13e4\u13bf\3\2\2\2"+
		"\u13e4\u13cb\3\2\2\2\u13e4\u13da\3\2\2\2\u13e5\u02ad\3\2\2\2\u13e6\u13e7"+
		"\7\u0158\2\2\u13e7\u13ea\7\u0181\2\2\u13e8\u13ea\3\2\2\2\u13e9\u13e6\3"+
		"\2\2\2\u13e9\u13e8\3\2\2\2\u13ea\u02af\3\2\2\2\u13eb\u13ec\7\r\2\2\u13ec"+
		"\u13ed\5\u02b2\u015a\2\u13ed\u13ee\7\7\2\2\u13ee\u13f2\3\2\2\2\u13ef\u13f0"+
		"\7\r\2\2\u13f0\u13f2\7\7\2\2\u13f1\u13eb\3\2\2\2\u13f1\u13ef\3\2\2\2\u13f2"+
		"\u02b1\3\2\2\2\u13f3\u13f4\b\u015a\1\2\u13f4\u13f5\5\u02b8\u015d\2\u13f5"+
		"\u13fb\3\2\2\2\u13f6\u13f7\f\3\2\2\u13f7\u13f8\7\b\2\2\u13f8\u13fa\5\u02b8"+
		"\u015d\2\u13f9\u13f6\3\2\2\2\u13fa\u13fd\3\2\2\2\u13fb\u13f9\3\2\2\2\u13fb"+
		"\u13fc\3\2\2\2\u13fc\u02b3\3\2\2\2\u13fd\u13fb\3\2\2\2\u13fe\u13ff\7\r"+
		"\2\2\u13ff\u1400\5\u02b6\u015c\2\u1400\u1401\7\7\2\2\u1401\u1405\3\2\2"+
		"\2\u1402\u1403\7\r\2\2\u1403\u1405\7\7\2\2\u1404\u13fe\3\2\2\2\u1404\u1402"+
		"\3\2\2\2\u1405\u02b5\3\2\2\2\u1406\u1407\b\u015c\1\2\u1407\u1408\5\u02c2"+
		"\u0162\2\u1408\u140e\3\2\2\2\u1409\u140a\f\3\2\2\u140a\u140b\7\b\2\2\u140b"+
		"\u140d\5\u02c2\u0162\2\u140c\u1409\3\2\2\2\u140d\u1410\3\2\2\2\u140e\u140c"+
		"\3\2\2\2\u140e\u140f\3\2\2\2\u140f\u02b7\3\2\2\2\u1410\u140e\3\2\2\2\u1411"+
		"\u1412\5\u02ba\u015e\2\u1412\u1413\5\u02bc\u015f\2\u1413\u1414\5\u02c0"+
		"\u0161\2\u1414\u1421\3\2\2\2\u1415\u1416\5\u02bc\u015f\2\u1416\u1417\5"+
		"\u02ba\u015e\2\u1417\u1418\5\u02c0\u0161\2\u1418\u1421\3\2\2\2\u1419\u141a"+
		"\5\u02bc\u015f\2\u141a\u141b\5\u02c0\u0161\2\u141b\u1421\3\2\2\2\u141c"+
		"\u141d\5\u02ba\u015e\2\u141d\u141e\5\u02c0\u0161\2\u141e\u1421\3\2\2\2"+
		"\u141f\u1421\5\u02c0\u0161\2\u1420\u1411\3\2\2\2\u1420\u1415\3\2\2\2\u1420"+
		"\u1419\3\2\2\2\u1420\u141c\3\2\2\2\u1420\u141f\3\2\2\2\u1421\u02b9\3\2"+
		"\2\2\u1422\u1429\7\u0107\2\2\u1423\u1429\7\u015a\2\2\u1424\u1429\7\u0111"+
		"\2\2\u1425\u1426\7\u0107\2\2\u1426\u1429\7\u015a\2\2\u1427\u1429\7\u01db"+
		"\2\2\u1428\u1422\3\2\2\2\u1428\u1423\3\2\2\2\u1428\u1424\3\2\2\2\u1428"+
		"\u1425\3\2\2\2\u1428\u1427\3\2\2\2\u1429\u02bb\3\2\2\2\u142a\u142b\5\u04d2"+
		"\u026a\2\u142b\u02bd\3\2\2\2\u142c\u142d\5\u02c0\u0161\2\u142d\u02bf\3"+
		"\2\2\2\u142e\u143b\5\u040a\u0206\2\u142f\u1430\5\u04d2\u026a\2\u1430\u1431"+
		"\5\u0252\u012a\2\u1431\u1432\7\4\2\2\u1432\u1433\7\u01c6\2\2\u1433\u143b"+
		"\3\2\2\2\u1434\u1435\7\u019d\2\2\u1435\u1436\5\u04d2\u026a\2\u1436\u1437"+
		"\5\u0252\u012a\2\u1437\u1438\7\4\2\2\u1438\u1439\7\u01c6\2\2\u1439\u143b"+
		"\3\2\2\2\u143a\u142e\3\2\2\2\u143a\u142f\3\2\2\2\u143a\u1434\3\2\2\2\u143b"+
		"\u02c1\3\2\2\2\u143c\u1446\5\u02b8\u015d\2\u143d\u143e\5\u02b8\u015d\2"+
		"\u143e\u143f\7\u00c4\2\2\u143f\u1440\5\u043a\u021e\2\u1440\u1446\3\2\2"+
		"\2\u1441\u1442\5\u02b8\u015d\2\u1442\u1443\7\20\2\2\u1443\u1444\5\u043a"+
		"\u021e\2\u1444\u1446\3\2\2\2\u1445\u143c\3\2\2\2\u1445\u143d\3\2\2\2\u1445"+
		"\u1441\3\2\2\2\u1446\u02c3\3\2\2\2\u1447\u1448\b\u0163\1\2\u1448\u1449"+
		"\5\u02c8\u0165\2\u1449\u144e\3\2\2\2\u144a\u144b\f\3\2\2\u144b\u144d\5"+
		"\u02c8\u0165\2\u144c\u144a\3\2\2\2\u144d\u1450\3\2\2\2\u144e\u144c\3\2"+
		"\2\2\u144e\u144f\3\2\2\2\u144f\u02c5\3\2\2\2\u1450\u144e\3\2\2\2\u1451"+
		"\u1452\7\u008f\2\2\u1452\u1453\7\u0153\2\2\u1453\u1454\7\u014a\2\2\u1454"+
		"\u1471\7\u0112\2\2\u1455\u1456\7\u0187\2\2\u1456\u1457\7\u014a\2\2\u1457"+
		"\u1458\7\u0153\2\2\u1458\u1459\7\u014a\2\2\u1459\u1471\7\u0112\2\2\u145a"+
		"\u1471\7\u01ad\2\2\u145b\u1471\7\u0105\2\2\u145c\u1471\7\u01a5\2\2\u145d"+
		"\u1471\7\u01e0\2\2\u145e\u145f\7\u00e6\2\2\u145f\u1460\7\u0194\2\2\u1460"+
		"\u1471\7\u00c8\2\2\u1461\u1462\7\u00e6\2\2\u1462\u1463\7\u0194\2\2\u1463"+
		"\u1471\7\u011b\2\2\u1464\u1465\7\u0194\2\2\u1465\u1471\7\u00c8\2\2\u1466"+
		"\u1467\7\u0194\2\2\u1467\u1471\7\u011b\2\2\u1468\u1471\7\u0128\2\2\u1469"+
		"\u146a\7\u0145\2\2\u146a\u1471\7\u0128\2\2\u146b\u146c\7\u00af\2\2\u146c"+
		"\u1471\5\u0192\u00ca\2\u146d\u146e\7\u018d\2\2\u146e\u1471\5\u0192\u00ca"+
		"\2\u146f\u1471\5\u00ecw\2\u1470\u1451\3\2\2\2\u1470\u1455\3\2\2\2\u1470"+
		"\u145a\3\2\2\2\u1470\u145b\3\2\2\2\u1470\u145c\3\2\2\2\u1470\u145d\3\2"+
		"\2\2\u1470\u145e\3\2\2\2\u1470\u1461\3\2\2\2\u1470\u1464\3\2\2\2\u1470"+
		"\u1466\3\2\2\2\u1470\u1468\3\2\2\2\u1470\u1469\3\2\2\2\u1470\u146b\3\2"+
		"\2\2\u1470\u146d\3\2\2\2\u1470\u146f\3\2\2\2\u1471\u02c7\3\2\2\2\u1472"+
		"\u1473\7|\2\2\u1473\u1479\5\u02ca\u0166\2\u1474\u1475\7\u0122\2\2\u1475"+
		"\u1479\5\u00e6t\2\u1476\u1479\7\u01e4\2\2\u1477\u1479\5\u02c6\u0164\2"+
		"\u1478\u1472\3\2\2\2\u1478\u1474\3\2\2\2\u1478\u1476\3\2\2\2\u1478\u1477"+
		"\3\2\2\2\u1479\u02c9\3\2\2\2\u147a\u1480\5\u04ca\u0266\2\u147b\u147c\5"+
		"\u04ca\u0266\2\u147c\u147d\7\b\2\2\u147d\u147e\5\u04ca\u0266\2\u147e\u1480"+
		"\3\2\2\2\u147f\u147a\3\2\2\2\u147f\u147b\3\2\2\2\u1480\u02cb\3\2\2\2\u1481"+
		"\u1482\7\u01e5\2\2\u1482\u1485\5\u0216\u010c\2\u1483\u1485\3\2\2\2\u1484"+
		"\u1481\3\2\2\2\u1484\u1483\3\2\2\2\u1485\u02cd\3\2\2\2\u1486\u1487\5\u02bc"+
		"\u015f\2\u1487\u1488\5\u02c0\u0161\2\u1488\u02cf\3\2\2\2\u1489\u148a\b"+
		"\u0169\1\2\u148a\u148b\5\u02ce\u0168\2\u148b\u1491\3\2\2\2\u148c\u148d"+
		"\f\3\2\2\u148d\u148e\7\b\2\2\u148e\u1490\5\u02ce\u0168\2\u148f\u148c\3"+
		"\2\2\2\u1490\u1493\3\2\2\2\u1491\u148f\3\2\2\2\u1491\u1492\3\2\2\2\u1492"+
		"\u02d1\3\2\2\2\u1493\u1491\3\2\2\2\u1494\u1495\7u\2\2\u1495\u1496\7\u00f5"+
		"\2\2\u1496\u1497\5\u0282\u0142\2\u1497\u1498\5\u02d4\u016b\2\u1498\u1499"+
		"\5\u02d6\u016c\2\u1499\u02d3\3\2\2\2\u149a\u149b\b\u016b\1\2\u149b\u149c"+
		"\5\u02c6\u0164\2\u149c\u14a1\3\2\2\2\u149d\u149e\f\3\2\2\u149e\u14a0\5"+
		"\u02c6\u0164\2\u149f\u149d\3\2\2\2\u14a0\u14a3\3\2\2\2\u14a1\u149f\3\2"+
		"\2\2\u14a1\u14a2\3\2\2\2\u14a2\u02d5\3\2\2\2\u14a3\u14a1\3\2\2\2\u14a4"+
		"\u14a7\7\u0185\2\2\u14a5\u14a7\3\2\2\2\u14a6\u14a4\3\2\2\2\u14a6\u14a5"+
		"\3\2\2\2\u14a7\u02d7\3\2\2\2\u14a8\u14a9\7\u00d5\2\2\u14a9\u14aa\7\u00f5"+
		"\2\2\u14aa\u14ab\5\u04c4\u0263\2\u14ab\u14ac\5\u02b0\u0159\2\u14ac\u14ad"+
		"\5\u0102\u0082\2\u14ad\u14b7\3\2\2\2\u14ae\u14af\7\u00d5\2\2\u14af\u14b0"+
		"\7\u00f5\2\2\u14b0\u14b1\7\u0102\2\2\u14b1\u14b2\7\u00e3\2\2\u14b2\u14b3"+
		"\5\u04c4\u0263\2\u14b3\u14b4\5\u02b0\u0159\2\u14b4\u14b5\5\u0102\u0082"+
		"\2\u14b5\u14b7\3\2\2\2\u14b6\u14a8\3\2\2\2\u14b6\u14ae\3\2\2\2\u14b7\u02d9"+
		"\3\2\2\2\u14b8\u14b9\7\u00d5\2\2\u14b9\u14ba\7r\2\2\u14ba\u14bb\5\u04c4"+
		"\u0263\2\u14bb\u14bc\5\u021e\u0110\2\u14bc\u14bd\5\u0102\u0082\2\u14bd"+
		"\u14c7\3\2\2\2\u14be\u14bf\7\u00d5\2\2\u14bf\u14c0\7r\2\2\u14c0\u14c1"+
		"\7\u0102\2\2\u14c1\u14c2\7\u00e3\2\2\u14c2\u14c3\5\u04c4\u0263\2\u14c3"+
		"\u14c4\5\u021e\u0110\2\u14c4\u14c5\5\u0102\u0082\2\u14c5\u14c7\3\2\2\2"+
		"\u14c6\u14b8\3\2\2\2\u14c6\u14be\3\2\2\2\u14c7\u02db\3\2\2\2\u14c8\u14c9"+
		"\7\u00d5\2\2\u14c9\u14ca\7\u0155\2\2\u14ca\u14cb\5\u02e0\u0171\2\u14cb"+
		"\u14cc\5\u02de\u0170\2\u14cc\u14cd\5\u0102\u0082\2\u14cd\u14d7\3\2\2\2"+
		"\u14ce\u14cf\7\u00d5\2\2\u14cf\u14d0\7\u0155\2\2\u14d0\u14d1\7\u0102\2"+
		"\2\u14d1\u14d2\7\u00e3\2\2\u14d2\u14d3\5\u02e0\u0171\2\u14d3\u14d4\5\u02de"+
		"\u0170\2\u14d4\u14d5\5\u0102\u0082\2\u14d5\u14d7\3\2\2\2\u14d6\u14c8\3"+
		"\2\2\2\u14d6\u14ce\3\2\2\2\u14d7\u02dd\3\2\2\2\u14d8\u14d9\7\r\2\2\u14d9"+
		"\u14da\5\u040a\u0206\2\u14da\u14db\7\7\2\2\u14db\u14ef\3\2\2\2\u14dc\u14dd"+
		"\7\r\2\2\u14dd\u14de\5\u040a\u0206\2\u14de\u14df\7\b\2\2\u14df\u14e0\5"+
		"\u040a\u0206\2\u14e0\u14e1\7\7\2\2\u14e1\u14ef\3\2\2\2\u14e2\u14e3\7\r"+
		"\2\2\u14e3\u14e4\7\u0144\2\2\u14e4\u14e5\7\b\2\2\u14e5\u14e6\5\u040a\u0206"+
		"\2\u14e6\u14e7\7\7\2\2\u14e7\u14ef\3\2\2\2\u14e8\u14e9\7\r\2\2\u14e9\u14ea"+
		"\5\u040a\u0206\2\u14ea\u14eb\7\b\2\2\u14eb\u14ec\7\u0144\2\2\u14ec\u14ed"+
		"\7\7\2\2\u14ed\u14ef\3\2\2\2\u14ee\u14d8\3\2\2\2\u14ee\u14dc\3\2\2\2\u14ee"+
		"\u14e2\3\2\2\2\u14ee\u14e8\3\2\2\2\u14ef\u02df\3\2\2\2\u14f0\u14f6\5\u046a"+
		"\u0236\2\u14f1\u14f2\5\u04d0\u0269\2\u14f2\u14f3\7\6\2\2\u14f3\u14f4\5"+
		"\u02e0\u0171\2\u14f4\u14f6\3\2\2\2\u14f5\u14f0\3\2\2\2\u14f5\u14f1\3\2"+
		"\2\2\u14f6\u02e1\3\2\2\2\u14f7\u14f8\7\u00d1\2\2\u14f8\u14f9\5\u02e4\u0173"+
		"\2\u14f9\u02e3\3\2\2\2\u14fa\u14fb\b\u0173\1\2\u14fb\u14fc\5\u02e6\u0174"+
		"\2\u14fc\u1501\3\2\2\2\u14fd\u14fe\f\3\2\2\u14fe\u1500\5\u02e6\u0174\2"+
		"\u14ff\u14fd\3\2\2\2\u1500\u1503\3\2\2\2\u1501\u14ff\3\2\2\2\u1501\u1502"+
		"\3\2\2\2\u1502\u02e5\3\2\2\2\u1503\u1501\3\2\2\2\u1504\u1508\5\u04ca\u0266"+
		"\2\u1505\u1506\7\u0122\2\2\u1506\u1508\5\u00e6t\2\u1507\u1504\3\2\2\2"+
		"\u1507\u1505\3\2\2\2\u1508\u02e7\3\2\2\2\u1509\u150a\7\u00b0\2\2\u150a"+
		"\u150b\7\u0093\2\2\u150b\u150c\7\r\2\2\u150c\u150d\5\u040a\u0206\2\u150d"+
		"\u150e\7|\2\2\u150e\u150f\5\u040a\u0206\2\u150f\u1510\7\7\2\2\u1510\u1511"+
		"\7\u01e5\2\2\u1511\u1512\7\u00f5\2\2\u1512\u1513\5\u0282\u0142\2\u1513"+
		"\u1514\5\u02ea\u0176\2\u1514\u152c\3\2\2\2\u1515\u1516\7\u00b0\2\2\u1516"+
		"\u1517\7\u0093\2\2\u1517\u1518\7\r\2\2\u1518\u1519\5\u040a\u0206\2\u1519"+
		"\u151a\7|\2\2\u151a\u151b\5\u040a\u0206\2\u151b\u151c\7\7\2\2\u151c\u151d"+
		"\7\u01e6\2\2\u151d\u151e\7\u00f5\2\2\u151e\u151f\5\u02ea\u0176\2\u151f"+
		"\u152c\3\2\2\2\u1520\u1521\7\u00b0\2\2\u1521\u1522\7\u0093\2\2\u1522\u1523"+
		"\7\r\2\2\u1523\u1524\5\u040a\u0206\2\u1524\u1525\7|\2\2\u1525\u1526\5"+
		"\u040a\u0206\2\u1526\u1527\7\7\2\2\u1527\u1528\7\u01e5\2\2\u1528\u1529"+
		"\7\u0111\2\2\u1529\u152a\5\u02ea\u0176\2\u152a\u152c\3\2\2\2\u152b\u1509"+
		"\3\2\2\2\u152b\u1515\3\2\2\2\u152b\u1520\3\2\2\2\u152c\u02e9\3\2\2\2\u152d"+
		"\u152e\7|\2\2\u152e\u1533\7\u0106\2\2\u152f\u1530\7|\2\2\u1530\u1533\7"+
		"\177\2\2\u1531\u1533\3\2\2\2\u1532\u152d\3\2\2\2\u1532\u152f\3\2\2\2\u1532"+
		"\u1531\3\2\2\2\u1533\u02eb\3\2\2\2\u1534\u1535\7\u00d5\2\2\u1535\u1536"+
		"\7\u0093\2\2\u1536\u1537\5\u02ee\u0178\2\u1537\u1538\7\r\2\2\u1538\u1539"+
		"\5\u040a\u0206\2\u1539\u153a\7|\2\2\u153a\u153b\5\u040a\u0206\2\u153b"+
		"\u153c\7\7\2\2\u153c\u153d\5\u0102\u0082\2\u153d\u02ed\3\2\2\2\u153e\u153f"+
		"\7\u0102\2\2\u153f\u1542\7\u00e3\2\2\u1540\u1542\3\2\2\2\u1541\u153e\3"+
		"\2\2\2\u1541\u1540\3\2\2\2\u1542\u02ef\3\2\2\2\u1543\u1544\7\u017c\2\2"+
		"\u1544\u1545\5\u02f2\u017a\2\u1545\u1546\5\u04b4\u025b\2\u1546\u1547\5"+
		"\u02f4\u017b\2\u1547\u1553\3\2\2\2\u1548\u1549\7\u017c\2\2\u1549\u154a"+
		"\7\u01b2\2\2\u154a\u154b\5\u04b8\u025d\2\u154b\u154c\5\u02f4\u017b\2\u154c"+
		"\u1553\3\2\2\2\u154d\u154e\7\u017c\2\2\u154e\u154f\7\u00be\2\2\u154f\u1550"+
		"\5\u04b8\u025d\2\u1550\u1551\5\u02f4\u017b\2\u1551\u1553\3\2\2\2\u1552"+
		"\u1543\3\2\2\2\u1552\u1548\3\2\2\2\u1552\u154d\3\2\2\2\u1553\u02f1\3\2"+
		"\2\2\u1554\u1555\t\20\2\2\u1555\u02f3\3\2\2\2\u1556\u1559\7\u00ef\2\2"+
		"\u1557\u1559\3\2\2\2\u1558\u1556\3\2\2\2\u1558\u1557\3\2\2\2\u1559\u02f5"+
		"\3\2\2\2\u155a\u155b\7u\2\2\u155b\u155c\7r\2\2\u155c\u155d\5\u04c4\u0263"+
		"\2\u155d\u155e\5\u021e\u0110\2\u155e\u155f\7\u017f\2\2\u155f\u1560\7\u01bd"+
		"\2\2\u1560\u1561\5\u04b8\u025d\2\u1561\u16ad\3\2\2\2\u1562\u1563\7u\2"+
		"\2\u1563\u1564\7\u00a0\2\2\u1564\u1565\5\u0250\u0129\2\u1565\u1566\7\u017f"+
		"\2\2\u1566\u1567\7\u01bd\2\2\u1567\u1568\5\u04b8\u025d\2\u1568\u16ad\3"+
		"\2\2\2\u1569\u156a\7u\2\2\u156a\u156b\7\u00ad\2\2\u156b\u156c\5\u0250"+
		"\u0129\2\u156c\u156d\7\u017f\2\2\u156d\u156e\7\u01bd\2\2\u156e\u156f\5"+
		"\u04b8\u025d\2\u156f\u16ad\3\2\2\2\u1570\u1571\7u\2\2\u1571\u1572\7\u00be"+
		"\2\2\u1572\u1573\5\u04ba\u025e\2\u1573\u1574\7\u017f\2\2\u1574\u1575\7"+
		"\u01bd\2\2\u1575\u1576\5\u04ba\u025e\2\u1576\u16ad\3\2\2\2\u1577\u1578"+
		"\7u\2\2\u1578\u1579\7\u00d3\2\2\u1579\u157a\5\u0250\u0129\2\u157a\u157b"+
		"\7\u017f\2\2\u157b\u157c\7\u01bd\2\2\u157c\u157d\5\u04b8\u025d\2\u157d"+
		"\u16ad\3\2\2\2\u157e\u157f\7u\2\2\u157f\u1580\7\u00d3\2\2\u1580\u1581"+
		"\5\u0250\u0129\2\u1581\u1582\7\u017f\2\2\u1582\u1583\7\u00a9\2\2\u1583"+
		"\u1584\5\u04b8\u025d\2\u1584\u1585\7\u01bd\2\2\u1585\u1586\5\u04b8\u025d"+
		"\2\u1586\u16ad\3\2\2\2\u1587\u1588\7u\2\2\u1588\u1589\7\u00f0\2\2\u1589"+
		"\u158a\7\u00bd\2\2\u158a\u158b\7\u01e8\2\2\u158b\u158c\5\u04b8\u025d\2"+
		"\u158c\u158d\7\u017f\2\2\u158d\u158e\7\u01bd\2\2\u158e\u158f\5\u04b8\u025d"+
		"\2\u158f\u16ad\3\2\2\2\u1590\u1591\7u\2\2\u1591\u1592\7\u00f5\2\2\u1592"+
		"\u1593\5\u0282\u0142\2\u1593\u1594\7\u017f\2\2\u1594\u1595\7\u01bd\2\2"+
		"\u1595\u1596\5\u04b8\u025d\2\u1596\u16ad\3\2\2\2\u1597\u1598\7u\2\2\u1598"+
		"\u1599\7\u00fb\2\2\u1599\u159a\5\u04cc\u0267\2\u159a\u159b\7\u017f\2\2"+
		"\u159b\u159c\7\u01bd\2\2\u159c\u159d\5\u04cc\u0267\2\u159d\u16ad\3\2\2"+
		"\2\u159e\u159f\7u\2\2\u159f\u15a0\5\u01a4\u00d3\2\u15a0\u15a1\7\u0122"+
		"\2\2\u15a1\u15a2\5\u04b8\u025d\2\u15a2\u15a3\7\u017f\2\2\u15a3\u15a4\7"+
		"\u01bd\2\2\u15a4\u15a5\5\u04b8\u025d\2\u15a5\u16ad\3\2\2\2\u15a6\u15a7"+
		"\7u\2\2\u15a7\u15a8\7\u0155\2\2\u15a8\u15a9\7\u009b\2\2\u15a9\u15aa\5"+
		"\u0250\u0129\2\u15aa\u15ab\7\u01d3\2\2\u15ab\u15ac\5\u04bc\u025f\2\u15ac"+
		"\u15ad\7\u017f\2\2\u15ad\u15ae\7\u01bd\2\2\u15ae\u15af\5\u04b8\u025d\2"+
		"\u15af\u16ad\3\2\2\2\u15b0\u15b1\7u\2\2\u15b1\u15b2\7\u0155\2\2\u15b2"+
		"\u15b3\7\u00e9\2\2\u15b3\u15b4\5\u0250\u0129\2\u15b4\u15b5\7\u01d3\2\2"+
		"\u15b5\u15b6\5\u04bc\u025f\2\u15b6\u15b7\7\u017f\2\2\u15b7\u15b8\7\u01bd"+
		"\2\2\u15b8\u15b9\5\u04b8\u025d\2\u15b9\u16ad\3\2\2\2\u15ba\u15bb\7u\2"+
		"\2\u15bb\u15bc\7\u0190\2\2\u15bc\u15bd\5\u04b8\u025d\2\u15bd\u15be\7\u017f"+
		"\2\2\u15be\u15bf\7\u01bd\2\2\u15bf\u15c0\5\u04b8\u025d\2\u15c0\u16ad\3"+
		"\2\2\2\u15c1\u15c2\7u\2\2\u15c2\u15c3\7\u0199\2\2\u15c3\u15c4\5\u04b8"+
		"\u025d\2\u15c4\u15c5\7\u017f\2\2\u15c5\u15c6\7\u01bd\2\2\u15c6\u15c7\5"+
		"\u04b8\u025d\2\u15c7\u16ad\3\2\2\2\u15c8\u15c9\7u\2\2\u15c9\u15ca\7\u01b3"+
		"\2\2\u15ca\u15cb\5\u03f8\u01fd\2\u15cb\u15cc\7\u017f\2\2\u15cc\u15cd\7"+
		"\u01bd\2\2\u15cd\u15ce\5\u04b8\u025d\2\u15ce\u16ad\3\2\2\2\u15cf\u15d0"+
		"\7u\2\2\u15d0\u15d1\7\u01b3\2\2\u15d1\u15d2\7\u0102\2\2\u15d2\u15d3\7"+
		"\u00e3\2\2\u15d3\u15d4\5\u03f8\u01fd\2\u15d4\u15d5\7\u017f\2\2\u15d5\u15d6"+
		"\7\u01bd\2\2\u15d6\u15d7\5\u04b8\u025d\2\u15d7\u16ad\3\2\2\2\u15d8\u15d9"+
		"\7u\2\2\u15d9\u15da\7\u0196\2\2\u15da\u15db\5\u04b4\u025b\2\u15db\u15dc"+
		"\7\u017f\2\2\u15dc\u15dd\7\u01bd\2\2\u15dd\u15de\5\u04b8\u025d\2\u15de"+
		"\u16ad\3\2\2\2\u15df\u15e0\7u\2\2\u15e0\u15e1\7\u0196\2\2\u15e1\u15e2"+
		"\7\u0102\2\2\u15e2\u15e3\7\u00e3\2\2\u15e3\u15e4\5\u04b4\u025b\2\u15e4"+
		"\u15e5\7\u017f\2\2\u15e5\u15e6\7\u01bd\2\2\u15e6\u15e7\5\u04b8\u025d\2"+
		"\u15e7\u16ad\3\2\2\2\u15e8\u15e9\7u\2\2\u15e9\u15ea\7\u01df\2\2\u15ea"+
		"\u15eb\5\u04b4\u025b\2\u15eb\u15ec\7\u017f\2\2\u15ec\u15ed\7\u01bd\2\2"+
		"\u15ed\u15ee\5\u04b8\u025d\2\u15ee\u16ad\3\2\2\2\u15ef\u15f0\7u\2\2\u15f0"+
		"\u15f1\7\u01df\2\2\u15f1\u15f2\7\u0102\2\2\u15f2\u15f3\7\u00e3\2\2\u15f3"+
		"\u15f4\5\u04b4\u025b\2\u15f4\u15f5\7\u017f\2\2\u15f5\u15f6\7\u01bd\2\2"+
		"\u15f6\u15f7\5\u04b8\u025d\2\u15f7\u16ad\3\2\2\2\u15f8\u15f9\7u\2\2\u15f9"+
		"\u15fa\7\u010a\2\2\u15fa\u15fb\5\u04b4\u025b\2\u15fb\u15fc\7\u017f\2\2"+
		"\u15fc\u15fd\7\u01bd\2\2\u15fd\u15fe\5\u04b8\u025d\2\u15fe\u16ad\3\2\2"+
		"\2\u15ff\u1600\7u\2\2\u1600\u1601\7\u010a\2\2\u1601\u1602\7\u0102\2\2"+
		"\u1602\u1603\7\u00e3\2\2\u1603\u1604\5\u04b4\u025b\2\u1604\u1605\7\u017f"+
		"\2\2\u1605\u1606\7\u01bd\2\2\u1606\u1607\5\u04b8\u025d\2\u1607\u16ad\3"+
		"\2\2\2\u1608\u1609\7u\2\2\u1609\u160a\7\u00f0\2\2\u160a\u160b\7\u01b3"+
		"\2\2\u160b\u160c\5\u03f8\u01fd\2\u160c\u160d\7\u017f\2\2\u160d\u160e\7"+
		"\u01bd\2\2\u160e\u160f\5\u04b8\u025d\2\u160f\u16ad\3\2\2\2\u1610\u1611"+
		"\7u\2\2\u1611\u1612\7\u00f0\2\2\u1612\u1613\7\u01b3\2\2\u1613\u1614\7"+
		"\u0102\2\2\u1614\u1615\7\u00e3\2\2\u1615\u1616\5\u03f8\u01fd\2\u1616\u1617"+
		"\7\u017f\2\2\u1617\u1618\7\u01bd\2\2\u1618\u1619\5\u04b8\u025d\2\u1619"+
		"\u16ad\3\2\2\2\u161a\u161b\7u\2\2\u161b\u161c\7\u01b3\2\2\u161c\u161d"+
		"\5\u03f8\u01fd\2\u161d\u161e\7\u017f\2\2\u161e\u161f\5\u02f8\u017d\2\u161f"+
		"\u1620\5\u04b8\u025d\2\u1620\u1621\7\u01bd\2\2\u1621\u1622\5\u04b8\u025d"+
		"\2\u1622\u16ad\3\2\2\2\u1623\u1624\7u\2\2\u1624\u1625\7\u01b3\2\2\u1625"+
		"\u1626\7\u0102\2\2\u1626\u1627\7\u00e3\2\2\u1627\u1628\5\u03f8\u01fd\2"+
		"\u1628\u1629\7\u017f\2\2\u1629\u162a\5\u02f8\u017d\2\u162a\u162b\5\u04b8"+
		"\u025d\2\u162b\u162c\7\u01bd\2\2\u162c\u162d\5\u04b8\u025d\2\u162d\u16ad"+
		"\3\2\2\2\u162e\u162f\7u\2\2\u162f\u1630\7\u01b3\2\2\u1630\u1631\5\u03f8"+
		"\u01fd\2\u1631\u1632\7\u017f\2\2\u1632\u1633\7\u00a9\2\2\u1633\u1634\5"+
		"\u04b8\u025d\2\u1634\u1635\7\u01bd\2\2\u1635\u1636\5\u04b8\u025d\2\u1636"+
		"\u16ad\3\2\2\2\u1637\u1638\7u\2\2\u1638\u1639\7\u00f0\2\2\u1639\u163a"+
		"\7\u01b3\2\2\u163a\u163b\5\u03f8\u01fd\2\u163b\u163c\7\u017f\2\2\u163c"+
		"\u163d\5\u02f8\u017d\2\u163d\u163e\5\u04b8\u025d\2\u163e\u163f\7\u01bd"+
		"\2\2\u163f\u1640\5\u04b8\u025d\2\u1640\u16ad\3\2\2\2\u1641\u1642\7u\2"+
		"\2\u1642\u1643\7\u00f0\2\2\u1643\u1644\7\u01b3\2\2\u1644\u1645\7\u0102"+
		"\2\2\u1645\u1646\7\u00e3\2\2\u1646\u1647\5\u03f8\u01fd\2\u1647\u1648\7"+
		"\u017f\2\2\u1648\u1649\5\u02f8\u017d\2\u1649\u164a\5\u04b8\u025d\2\u164a"+
		"\u164b\7\u01bd\2\2\u164b\u164c\5\u04b8\u025d\2\u164c\u16ad\3\2\2\2\u164d"+
		"\u164e\7u\2\2\u164e\u164f\7\u01c1\2\2\u164f\u1650\5\u04b8\u025d\2\u1650"+
		"\u1651\7\u0153\2\2\u1651\u1652\5\u04b4\u025b\2\u1652\u1653\7\u017f\2\2"+
		"\u1653\u1654\7\u01bd\2\2\u1654\u1655\5\u04b8\u025d\2\u1655\u16ad\3\2\2"+
		"\2\u1656\u1657\7u\2\2\u1657\u1658\7\u018a\2\2\u1658\u1659\5\u04cc\u0267"+
		"\2\u1659\u165a\7\u017f\2\2\u165a\u165b\7\u01bd\2\2\u165b\u165c\5\u04cc"+
		"\u0267\2\u165c\u16ad\3\2\2\2\u165d\u165e\7u\2\2\u165e\u165f\7\u01d2\2"+
		"\2\u165f\u1660\5\u04cc\u0267\2\u1660\u1661\7\u017f\2\2\u1661\u1662\7\u01bd"+
		"\2\2\u1662\u1663\5\u04cc\u0267\2\u1663\u16ad\3\2\2\2\u1664\u1665\7u\2"+
		"\2\u1665\u1666\7\u01b5\2\2\u1666\u1667\5\u04b8\u025d\2\u1667\u1668\7\u017f"+
		"\2\2\u1668\u1669\7\u01bd\2\2\u1669\u166a\5\u04b8\u025d\2\u166a\u16ad\3"+
		"\2\2\2\u166b\u166c\7u\2\2\u166c\u166d\7\u01b5\2\2\u166d\u166e\5\u04b8"+
		"\u025d\2\u166e\u166f\7\u019c\2\2\u166f\u1670\5\u0108\u0085\2\u1670\u16ad"+
		"\3\2\2\2\u1671\u1672\7u\2\2\u1672\u1673\7\u01b5\2\2\u1673\u1674\5\u04b8"+
		"\u025d\2\u1674\u1675\7\u0183\2\2\u1675\u1676\5\u0108\u0085\2\u1676\u16ad"+
		"\3\2\2\2\u1677\u1678\7u\2\2\u1678\u1679\7\u01b9\2\2\u1679\u167a\7\u0192"+
		"\2\2\u167a\u167b\7\u0161\2\2\u167b\u167c\5\u0250\u0129\2\u167c\u167d\7"+
		"\u017f\2\2\u167d\u167e\7\u01bd\2\2\u167e\u167f\5\u04b8\u025d\2\u167f\u16ad"+
		"\3\2\2\2\u1680\u1681\7u\2\2\u1681\u1682\7\u01b9\2\2\u1682\u1683\7\u0192"+
		"\2\2\u1683\u1684\7\u00cd\2\2\u1684\u1685\5\u0250\u0129\2\u1685\u1686\7"+
		"\u017f\2\2\u1686\u1687\7\u01bd\2\2\u1687\u1688\5\u04b8\u025d\2\u1688\u16ad"+
		"\3\2\2\2\u1689\u168a\7u\2\2\u168a\u168b\7\u01b9\2\2\u168b\u168c\7\u0192"+
		"\2\2\u168c\u168d\7\u01b7\2\2\u168d\u168e\5\u0250\u0129\2\u168e\u168f\7"+
		"\u017f\2\2\u168f\u1690\7\u01bd\2\2\u1690\u1691\5\u04b8\u025d\2\u1691\u16ad"+
		"\3\2\2\2\u1692\u1693\7u\2\2\u1693\u1694\7\u01b9\2\2\u1694\u1695\7\u0192"+
		"\2\2\u1695\u1696\7\u00a7\2\2\u1696\u1697\5\u0250\u0129\2\u1697\u1698\7"+
		"\u017f\2\2\u1698\u1699\7\u01bd\2\2\u1699\u169a\5\u04b8\u025d\2\u169a\u16ad"+
		"\3\2\2\2\u169b\u169c\7u\2\2\u169c\u169d\7\u01c6\2\2\u169d\u169e\5\u0250"+
		"\u0129\2\u169e\u169f\7\u017f\2\2\u169f\u16a0\7\u01bd\2\2\u16a0\u16a1\5"+
		"\u04b8\u025d\2\u16a1\u16ad\3\2\2\2\u16a2\u16a3\7u\2\2\u16a3\u16a4\7\u01c6"+
		"\2\2\u16a4\u16a5\5\u0250\u0129\2\u16a5\u16a6\7\u017f\2\2\u16a6\u16a7\7"+
		"\u0082\2\2\u16a7\u16a8\5\u04b8\u025d\2\u16a8\u16a9\7\u01bd\2\2\u16a9\u16aa"+
		"\5\u04b8\u025d\2\u16aa\u16ab\5\u0102\u0082\2\u16ab\u16ad\3\2\2\2\u16ac"+
		"\u155a\3\2\2\2\u16ac\u1562\3\2\2\2\u16ac\u1569\3\2\2\2\u16ac\u1570\3\2"+
		"\2\2\u16ac\u1577\3\2\2\2\u16ac\u157e\3\2\2\2\u16ac\u1587\3\2\2\2\u16ac"+
		"\u1590\3\2\2\2\u16ac\u1597\3\2\2\2\u16ac\u159e\3\2\2\2\u16ac\u15a6\3\2"+
		"\2\2\u16ac\u15b0\3\2\2\2\u16ac\u15ba\3\2\2\2\u16ac\u15c1\3\2\2\2\u16ac"+
		"\u15c8\3\2\2\2\u16ac\u15cf\3\2\2\2\u16ac\u15d8\3\2\2\2\u16ac\u15df\3\2"+
		"\2\2\u16ac\u15e8\3\2\2\2\u16ac\u15ef\3\2\2\2\u16ac\u15f8\3\2\2\2\u16ac"+
		"\u15ff\3\2\2\2\u16ac\u1608\3\2\2\2\u16ac\u1610\3\2\2\2\u16ac\u161a\3\2"+
		"\2\2\u16ac\u1623\3\2\2\2\u16ac\u162e\3\2\2\2\u16ac\u1637\3\2\2\2\u16ac"+
		"\u1641\3\2\2\2\u16ac\u164d\3\2\2\2\u16ac\u1656\3\2\2\2\u16ac\u165d\3\2"+
		"\2\2\u16ac\u1664\3\2\2\2\u16ac\u166b\3\2\2\2\u16ac\u1671\3\2\2\2\u16ac"+
		"\u1677\3\2\2\2\u16ac\u1680\3\2\2\2\u16ac\u1689\3\2\2\2\u16ac\u1692\3\2"+
		"\2\2\u16ac\u169b\3\2\2\2\u16ac\u16a2\3\2\2\2\u16ad\u02f7\3\2\2\2\u16ae"+
		"\u16b1\7\u00a1\2\2\u16af\u16b1\3\2\2\2\u16b0\u16ae\3\2\2\2\u16b0\u16af"+
		"\3\2\2\2\u16b1\u02f9\3\2\2\2\u16b2\u16b3\7\u019c\2\2\u16b3\u16b6\7\u00bd"+
		"\2\2\u16b4\u16b6\3\2\2\2\u16b5\u16b2\3\2\2\2\u16b5\u16b4\3\2\2\2\u16b6"+
		"\u02fb\3\2\2\2\u16b7\u16b8\7u\2\2\u16b8\u16b9\7r\2\2\u16b9\u16ba\5\u04c4"+
		"\u0263\2\u16ba\u16bb\5\u021e\u0110\2\u16bb\u16bc\7\u019c\2\2\u16bc\u16bd"+
		"\7\u0190\2\2\u16bd\u16be\5\u04b8\u025d\2\u16be\u176c\3\2\2\2\u16bf\u16c0"+
		"\7u\2\2\u16c0\u16c1\7\u00a0\2\2\u16c1\u16c2\5\u0250\u0129\2\u16c2\u16c3"+
		"\7\u019c\2\2\u16c3\u16c4\7\u0190\2\2\u16c4\u16c5\5\u04b8\u025d\2\u16c5"+
		"\u176c\3\2\2\2\u16c6\u16c7\7u\2\2\u16c7\u16c8\7\u00ad\2\2\u16c8\u16c9"+
		"\5\u0250\u0129\2\u16c9\u16ca\7\u019c\2\2\u16ca\u16cb\7\u0190\2\2\u16cb"+
		"\u16cc\5\u04b8\u025d\2\u16cc\u176c\3\2\2\2\u16cd\u16ce\7u\2\2\u16ce\u16cf"+
		"\7\u00d3\2\2\u16cf\u16d0\5\u0250\u0129\2\u16d0\u16d1\7\u019c\2\2\u16d1"+
		"\u16d2\7\u0190\2\2\u16d2\u16d3\5\u04b8\u025d\2\u16d3\u176c\3\2\2\2\u16d4"+
		"\u16d5\7u\2\2\u16d5\u16d6\7\u00e5\2\2\u16d6\u16d7\5\u0250\u0129\2\u16d7"+
		"\u16d8\7\u019c\2\2\u16d8\u16d9\7\u0190\2\2\u16d9\u16da\5\u04b8\u025d\2"+
		"\u16da\u176c\3\2\2\2\u16db\u16dc\7u\2\2\u16dc\u16dd\7\u00f5\2\2\u16dd"+
		"\u16de\5\u0282\u0142\2\u16de\u16df\7\u019c\2\2\u16df\u16e0\7\u0190\2\2"+
		"\u16e0\u16e1\5\u04b8\u025d\2\u16e1\u176c\3\2\2\2\u16e2\u16e3\7u\2\2\u16e3"+
		"\u16e4\7\u0155\2\2\u16e4\u16e5\5\u02e0\u0171\2\u16e5\u16e6\5\u02de\u0170"+
		"\2\u16e6\u16e7\7\u019c\2\2\u16e7\u16e8\7\u0190\2\2\u16e8\u16e9\5\u04b8"+
		"\u025d\2\u16e9\u176c\3\2\2\2\u16ea\u16eb\7u\2\2\u16eb\u16ec\7\u0155\2"+
		"\2\u16ec\u16ed\7\u009b\2\2\u16ed\u16ee\5\u0250\u0129\2\u16ee\u16ef\7\u01d3"+
		"\2\2\u16ef\u16f0\5\u04bc\u025f\2\u16f0\u16f1\7\u019c\2\2\u16f1\u16f2\7"+
		"\u0190\2\2\u16f2\u16f3\5\u04b8\u025d\2\u16f3\u176c\3\2\2\2\u16f4\u16f5"+
		"\7u\2\2\u16f5\u16f6\7\u0155\2\2\u16f6\u16f7\7\u00e9\2\2\u16f7\u16f8\5"+
		"\u0250\u0129\2\u16f8\u16f9\7\u01d3\2\2\u16f9\u16fa\5\u04bc\u025f\2\u16fa"+
		"\u16fb\7\u019c\2\2\u16fb\u16fc\7\u0190\2\2\u16fc\u16fd\5\u04b8\u025d\2"+
		"\u16fd\u176c\3\2\2\2\u16fe\u16ff\7u\2\2\u16ff\u1700\7\u01b3\2\2\u1700"+
		"\u1701\5\u03f8\u01fd\2\u1701\u1702\7\u019c\2\2\u1702\u1703\7\u0190\2\2"+
		"\u1703\u1704\5\u04b8\u025d\2\u1704\u176c\3\2\2\2\u1705\u1706\7u\2\2\u1706"+
		"\u1707\7\u01b3\2\2\u1707\u1708\7\u0102\2\2\u1708\u1709\7\u00e3\2\2\u1709"+
		"\u170a\5\u03f8\u01fd\2\u170a\u170b\7\u019c\2\2\u170b\u170c\7\u0190\2\2"+
		"\u170c\u170d\5\u04b8\u025d\2\u170d\u176c\3\2\2\2\u170e\u170f\7u\2\2\u170f"+
		"\u1710\7\u01b9\2\2\u1710\u1711\7\u0192\2\2\u1711\u1712\7\u0161\2\2\u1712"+
		"\u1713\5\u0250\u0129\2\u1713\u1714\7\u019c\2\2\u1714\u1715\7\u0190\2\2"+
		"\u1715\u1716\5\u04b8\u025d\2\u1716\u176c\3\2\2\2\u1717\u1718\7u\2\2\u1718"+
		"\u1719\7\u01b9\2\2\u1719\u171a\7\u0192\2\2\u171a\u171b\7\u00cd\2\2\u171b"+
		"\u171c\5\u0250\u0129\2\u171c\u171d\7\u019c\2\2\u171d\u171e\7\u0190\2\2"+
		"\u171e\u171f\5\u04b8\u025d\2\u171f\u176c\3\2\2\2\u1720\u1721\7u\2\2\u1721"+
		"\u1722\7\u01b9\2\2\u1722\u1723\7\u0192\2\2\u1723\u1724\7\u01b7\2\2\u1724"+
		"\u1725\5\u0250\u0129\2\u1725\u1726\7\u019c\2\2\u1726\u1727\7\u0190\2\2"+
		"\u1727\u1728\5\u04b8\u025d\2\u1728\u176c\3\2\2\2\u1729\u172a\7u\2\2\u172a"+
		"\u172b\7\u01b9\2\2\u172b\u172c\7\u0192\2\2\u172c\u172d\7\u00a7\2\2\u172d"+
		"\u172e\5\u0250\u0129\2\u172e\u172f\7\u019c\2\2\u172f\u1730\7\u0190\2\2"+
		"\u1730\u1731\5\u04b8\u025d\2\u1731\u176c\3\2\2\2\u1732\u1733\7u\2\2\u1733"+
		"\u1734\7\u0196\2\2\u1734\u1735\5\u04b4\u025b\2\u1735\u1736\7\u019c\2\2"+
		"\u1736\u1737\7\u0190\2\2\u1737\u1738\5\u04b8\u025d\2\u1738\u176c\3\2\2"+
		"\2\u1739\u173a\7u\2\2\u173a\u173b\7\u0196\2\2\u173b\u173c\7\u0102\2\2"+
		"\u173c\u173d\7\u00e3\2\2\u173d\u173e\5\u04b4\u025b\2\u173e\u173f\7\u019c"+
		"\2\2\u173f\u1740\7\u0190\2\2\u1740\u1741\5\u04b8\u025d\2\u1741\u176c\3"+
		"\2\2\2\u1742\u1743\7u\2\2\u1743\u1744\7\u01df\2\2\u1744\u1745\5\u04b4"+
		"\u025b\2\u1745\u1746\7\u019c\2\2\u1746\u1747\7\u0190\2\2\u1747\u1748\5"+
		"\u04b8\u025d\2\u1748\u176c\3\2\2\2\u1749\u174a\7u\2\2\u174a\u174b\7\u01df"+
		"\2\2\u174b\u174c\7\u0102\2\2\u174c\u174d\7\u00e3\2\2\u174d\u174e\5\u04b4"+
		"\u025b\2\u174e\u174f\7\u019c\2\2\u174f\u1750\7\u0190\2\2\u1750\u1751\5"+
		"\u04b8\u025d\2\u1751\u176c\3\2\2\2\u1752\u1753\7u\2\2\u1753\u1754\7\u00f0"+
		"\2\2\u1754\u1755\7\u01b3\2\2\u1755\u1756\5\u03f8\u01fd\2\u1756\u1757\7"+
		"\u019c\2\2\u1757\u1758\7\u0190\2\2\u1758\u1759\5\u04b8\u025d\2\u1759\u176c"+
		"\3\2\2\2\u175a\u175b\7u\2\2\u175b\u175c\7\u00f0\2\2\u175c\u175d\7\u01b3"+
		"\2\2\u175d\u175e\7\u0102\2\2\u175e\u175f\7\u00e3\2\2\u175f\u1760\5\u03f8"+
		"\u01fd\2\u1760\u1761\7\u019c\2\2\u1761\u1762\7\u0190\2\2\u1762\u1763\5"+
		"\u04b8\u025d\2\u1763\u176c\3\2\2\2\u1764\u1765\7u\2\2\u1765\u1766\7\u01c6"+
		"\2\2\u1766\u1767\5\u0250\u0129\2\u1767\u1768\7\u019c\2\2\u1768\u1769\7"+
		"\u0190\2\2\u1769\u176a\5\u04b8\u025d\2\u176a\u176c\3\2\2\2\u176b\u16b7"+
		"\3\2\2\2\u176b\u16bf\3\2\2\2\u176b\u16c6\3\2\2\2\u176b\u16cd\3\2\2\2\u176b"+
		"\u16d4\3\2\2\2\u176b\u16db\3\2\2\2\u176b\u16e2\3\2\2\2\u176b\u16ea\3\2"+
		"\2\2\u176b\u16f4\3\2\2\2\u176b\u16fe\3\2\2\2\u176b\u1705\3\2\2\2\u176b"+
		"\u170e\3\2\2\2\u176b\u1717\3\2\2\2\u176b\u1720\3\2\2\2\u176b\u1729\3\2"+
		"\2\2\u176b\u1732\3\2\2\2\u176b\u1739\3\2\2\2\u176b\u1742\3\2\2\2\u176b"+
		"\u1749\3\2\2\2\u176b\u1752\3\2\2\2\u176b\u175a\3\2\2\2\u176b\u1764\3\2"+
		"\2\2\u176c\u02fd\3\2\2\2\u176d\u176e\7u\2\2\u176e\u176f\7r\2\2\u176f\u1770"+
		"\5\u04c4\u0263\2\u1770\u1771\5\u021e\u0110\2\u1771\u1772\7\u0160\2\2\u1772"+
		"\u1773\7\u01bd\2\2\u1773\u1774\5\u04cc\u0267\2\u1774\u17fc\3\2\2\2\u1775"+
		"\u1776\7u\2\2\u1776\u1777\7\u00a0\2\2\u1777\u1778\5\u0250\u0129\2\u1778"+
		"\u1779\7\u0160\2\2\u1779\u177a\7\u01bd\2\2\u177a\u177b\5\u04cc\u0267\2"+
		"\u177b\u17fc\3\2\2\2\u177c\u177d\7u\2\2\u177d\u177e\7\u00ad\2\2\u177e"+
		"\u177f\5\u0250\u0129\2\u177f\u1780\7\u0160\2\2\u1780\u1781\7\u01bd\2\2"+
		"\u1781\u1782\5\u04cc\u0267\2\u1782\u17fc\3\2\2\2\u1783\u1784\7u\2\2\u1784"+
		"\u1785\7\u00be\2\2\u1785\u1786\5\u04ba\u025e\2\u1786\u1787\7\u0160\2\2"+
		"\u1787\u1788\7\u01bd\2\2\u1788\u1789\5\u04cc\u0267\2\u1789\u17fc\3\2\2"+
		"\2\u178a\u178b\7u\2\2\u178b\u178c\7\u00d3\2\2\u178c\u178d\5\u0250\u0129"+
		"\2\u178d\u178e\7\u0160\2\2\u178e\u178f\7\u01bd\2\2\u178f\u1790\5\u04cc"+
		"\u0267\2\u1790\u17fc\3\2\2\2\u1791\u1792\7u\2\2\u1792\u1793\7\u00f5\2"+
		"\2\u1793\u1794\5\u0282\u0142\2\u1794\u1795\7\u0160\2\2\u1795\u1796\7\u01bd"+
		"\2\2\u1796\u1797\5\u04cc\u0267\2\u1797\u17fc\3\2\2\2\u1798\u1799\7u\2"+
		"\2\u1799\u179a\5\u01a4\u00d3\2\u179a\u179b\7\u0122\2\2\u179b\u179c\5\u04b8"+
		"\u025d\2\u179c\u179d\7\u0160\2\2\u179d\u179e\7\u01bd\2\2\u179e\u179f\5"+
		"\u04cc\u0267\2\u179f\u17fc\3\2\2\2\u17a0\u17a1\7u\2\2\u17a1\u17a2\7\u0123"+
		"\2\2\u17a2\u17a3\7\u014e\2\2\u17a3\u17a4\5\u0192\u00ca\2\u17a4\u17a5\7"+
		"\u0160\2\2\u17a5\u17a6\7\u01bd\2\2\u17a6\u17a7\5\u04cc\u0267\2\u17a7\u17fc"+
		"\3\2\2\2\u17a8\u17a9\7u\2\2\u17a9\u17aa\7\u0155\2\2\u17aa\u17ab\5\u02e0"+
		"\u0171\2\u17ab\u17ac\5\u02de\u0170\2\u17ac\u17ad\7\u0160\2\2\u17ad\u17ae"+
		"\7\u01bd\2\2\u17ae\u17af\5\u04cc\u0267\2\u17af\u17fc\3\2\2\2\u17b0\u17b1"+
		"\7u\2\2\u17b1\u17b2\7\u0155\2\2\u17b2\u17b3\7\u009b\2\2\u17b3\u17b4\5"+
		"\u0250\u0129\2\u17b4\u17b5\7\u01d3\2\2\u17b5\u17b6\5\u04bc\u025f\2\u17b6"+
		"\u17b7\7\u0160\2\2\u17b7\u17b8\7\u01bd\2\2\u17b8\u17b9\5\u04cc\u0267\2"+
		"\u17b9\u17fc\3\2\2\2\u17ba\u17bb\7u\2\2\u17bb\u17bc\7\u0155\2\2\u17bc"+
		"\u17bd\7\u00e9\2\2\u17bd\u17be\5\u0250\u0129\2\u17be\u17bf\7\u01d3\2\2"+
		"\u17bf\u17c0\5\u04bc\u025f\2\u17c0\u17c1\7\u0160\2\2\u17c1\u17c2\7\u01bd"+
		"\2\2\u17c2\u17c3\5\u04cc\u0267\2\u17c3\u17fc\3\2\2\2\u17c4\u17c5\7u\2"+
		"\2\u17c5\u17c6\7\u0190\2\2\u17c6\u17c7\5\u04b8\u025d\2\u17c7\u17c8\7\u0160"+
		"\2\2\u17c8\u17c9\7\u01bd\2\2\u17c9\u17ca\5\u04cc\u0267\2\u17ca\u17fc\3"+
		"\2\2\2\u17cb\u17cc\7u\2\2\u17cc\u17cd\7\u01c6\2\2\u17cd\u17ce\5\u0250"+
		"\u0129\2\u17ce\u17cf\7\u0160\2\2\u17cf\u17d0\7\u01bd\2\2\u17d0\u17d1\5"+
		"\u04cc\u0267\2\u17d1\u17fc\3\2\2\2\u17d2\u17d3\7u\2\2\u17d3\u17d4\7\u01b5"+
		"\2\2\u17d4\u17d5\5\u04b8\u025d\2\u17d5\u17d6\7\u0160\2\2\u17d6\u17d7\7"+
		"\u01bd\2\2\u17d7\u17d8\5\u04cc\u0267\2\u17d8\u17fc\3\2\2\2\u17d9\u17da"+
		"\7u\2\2\u17da\u17db\7\u01b9\2\2\u17db\u17dc\7\u0192\2\2\u17dc\u17dd\7"+
		"\u00cd\2\2\u17dd\u17de\5\u0250\u0129\2\u17de\u17df\7\u0160\2\2\u17df\u17e0"+
		"\7\u01bd\2\2\u17e0\u17e1\5\u04cc\u0267\2\u17e1\u17fc\3\2\2\2\u17e2\u17e3"+
		"\7u\2\2\u17e3\u17e4\7\u01b9\2\2\u17e4\u17e5\7\u0192\2\2\u17e5\u17e6\7"+
		"\u00a7\2\2\u17e6\u17e7\5\u0250\u0129\2\u17e7\u17e8\7\u0160\2\2\u17e8\u17e9"+
		"\7\u01bd\2\2\u17e9\u17ea\5\u04cc\u0267\2\u17ea\u17fc\3\2\2\2\u17eb\u17ec"+
		"\7u\2\2\u17ec\u17ed\7\u00f0\2\2\u17ed\u17ee\7\u00bd\2\2\u17ee\u17ef\7"+
		"\u01e8\2\2\u17ef\u17f0\5\u04b8\u025d\2\u17f0\u17f1\7\u0160\2\2\u17f1\u17f2"+
		"\7\u01bd\2\2\u17f2\u17f3\5\u04cc\u0267\2\u17f3\u17fc\3\2\2\2\u17f4\u17f5"+
		"\7u\2\2\u17f5\u17f6\7\u0199\2\2\u17f6\u17f7\5\u04b8\u025d\2\u17f7\u17f8"+
		"\7\u0160\2\2\u17f8\u17f9\7\u01bd\2\2\u17f9\u17fa\5\u04cc\u0267\2\u17fa"+
		"\u17fc\3\2\2\2\u17fb\u176d\3\2\2\2\u17fb\u1775\3\2\2\2\u17fb\u177c\3\2"+
		"\2\2\u17fb\u1783\3\2\2\2\u17fb\u178a\3\2\2\2\u17fb\u1791\3\2\2\2\u17fb"+
		"\u1798\3\2\2\2\u17fb\u17a0\3\2\2\2\u17fb\u17a8\3\2\2\2\u17fb\u17b0\3\2"+
		"\2\2\u17fb\u17ba\3\2\2\2\u17fb\u17c4\3\2\2\2\u17fb\u17cb\3\2\2\2\u17fb"+
		"\u17d2\3\2\2\2\u17fb\u17d9\3\2\2\2\u17fb\u17e2\3\2\2\2\u17fb\u17eb\3\2"+
		"\2\2\u17fb\u17f4\3\2\2\2\u17fc\u02ff\3\2\2\2\u17fd\u17fe\7\u00b0\2\2\u17fe"+
		"\u17ff\5\u02ae\u0158\2\u17ff\u1800\7\u018e\2\2\u1800\u1801\5\u04b8\u025d"+
		"\2\u1801\u1802\7|\2\2\u1802\u1803\7\u0153\2\2\u1803\u1804\5\u030a\u0186"+
		"\2\u1804\u1805\7\u01bd\2\2\u1805\u1806\5\u04b4\u025b\2\u1806\u1807\5\u0400"+
		"\u0201\2\u1807\u1808\7\u00d1\2\2\u1808\u1809\5\u030c\u0187\2\u1809\u180a"+
		"\5\u0302\u0182\2\u180a\u0301\3\2\2\2\u180b\u1812\7\u0146\2\2\u180c\u1812"+
		"\5\u0306\u0184\2\u180d\u180e\7\r\2\2\u180e\u180f\5\u0304\u0183\2\u180f"+
		"\u1810\7\7\2\2\u1810\u1812\3\2\2\2\u1811\u180b\3\2\2\2\u1811\u180c\3\2"+
		"\2\2\u1811\u180d\3\2\2\2\u1812\u0303\3\2\2\2\u1813\u1814\b\u0183\1\2\u1814"+
		"\u1815\5\u0308\u0185\2\u1815\u181b\3\2\2\2\u1816\u1817\f\4\2\2\u1817\u1818"+
		"\7\21\2\2\u1818\u181a\5\u0308\u0185\2\u1819\u1816\3\2\2\2\u181a\u181d"+
		"\3\2\2\2\u181b\u1819\3\2\2\2\u181b\u181c\3\2\2\2\u181c\u0305\3\2\2\2\u181d"+
		"\u181b\3\2\2\2\u181e\u1824\5\u03a0\u01d1\2\u181f\u1824\5\u0374\u01bb\2"+
		"\u1820\u1824\5\u038a\u01c6\2\u1821\u1824\5\u037e\u01c0\2\u1822\u1824\5"+
		"\u0310\u0189\2\u1823\u181e\3\2\2\2\u1823\u181f\3\2\2\2\u1823\u1820\3\2"+
		"\2\2\u1823\u1821\3\2\2\2\u1823\u1822\3\2\2\2\u1824\u0307\3\2\2\2\u1825"+
		"\u1828\5\u0306\u0184\2\u1826\u1828\3\2\2\2\u1827\u1825\3\2\2\2\u1827\u1826"+
		"\3\2\2\2\u1828\u0309\3\2\2\2\u1829\u182a\t\21\2\2\u182a\u030b\3\2\2\2"+
		"\u182b\u182f\7\u0115\2\2\u182c\u182f\7t\2\2\u182d\u182f\3\2\2\2\u182e"+
		"\u182b\3\2\2\2\u182e\u182c\3\2\2\2\u182e\u182d\3\2\2\2\u182f\u030d\3\2"+
		"\2\2\u1830\u1831\7\u00d5\2\2\u1831\u1832\7\u018e\2\2\u1832\u1833\5\u04b8"+
		"\u025d\2\u1833\u1834\7\u0153\2\2\u1834\u1835\5\u0250\u0129\2\u1835\u1836"+
		"\5\u0102\u0082\2\u1836\u1841\3\2\2\2\u1837\u1838\7\u00d5\2\2\u1838\u1839"+
		"\7\u018e\2\2\u1839\u183a\7\u0102\2\2\u183a\u183b\7\u00e3\2\2\u183b\u183c"+
		"\5\u04b8\u025d\2\u183c\u183d\7\u0153\2\2\u183d\u183e\5\u0250\u0129\2\u183e"+
		"\u183f\5\u0102\u0082\2\u183f\u1841\3\2\2\2\u1840\u1830\3\2\2\2\u1840\u1837"+
		"\3\2\2\2\u1841\u030f\3\2\2\2\u1842\u1843\7\u0147\2\2\u1843\u1844\5\u04d0"+
		"\u0269\2\u1844\u1845\5\u0312\u018a\2\u1845\u0311\3\2\2\2\u1846\u1847\7"+
		"\b\2\2\u1847\u184a\5\u04ca\u0266\2\u1848\u184a\3\2\2\2\u1849\u1846\3\2"+
		"\2\2\u1849\u1848\3\2\2\2\u184a\u0313\3\2\2\2\u184b\u184c\7\u012e\2\2\u184c"+
		"\u184d\5\u04d0\u0269\2\u184d\u0315\3\2\2\2\u184e\u184f\7\u01ce\2\2\u184f"+
		"\u1853\5\u04d0\u0269\2\u1850\u1851\7\u01ce\2\2\u1851\u1853\7\13\2\2\u1852"+
		"\u184e\3\2\2\2\u1852\u1850\3\2\2\2\u1853\u0317\3\2\2\2\u1854\u1855\7k"+
		"\2\2\u1855\u187f\5\u031a\u018e\2\u1856\u1857\7\u0086\2\2\u1857\u1858\5"+
		"\u031a\u018e\2\u1858\u1859\5\u0320\u0191\2\u1859\u187f\3\2\2\2\u185a\u185b"+
		"\7\u01a7\2\2\u185b\u185c\7\u01bf\2\2\u185c\u187f\5\u0320\u0191\2\u185d"+
		"\u185e\7\u00a4\2\2\u185e\u187f\5\u031a\u018e\2\u185f\u1860\7\u00db\2\2"+
		"\u1860\u187f\5\u031a\u018e\2\u1861\u1862\7\u018b\2\2\u1862\u187f\5\u031a"+
		"\u018e\2\u1863\u1864\7\u018f\2\2\u1864\u187f\5\u04d0\u0269\2\u1865\u1866"+
		"\7\u017e\2\2\u1866\u1867\7\u018f\2\2\u1867\u187f\5\u04d0\u0269\2\u1868"+
		"\u1869\7\u017e\2\2\u1869\u187f\5\u04d0\u0269\2\u186a\u186b\7\u018b\2\2"+
		"\u186b\u186c\5\u031a\u018e\2\u186c\u186d\7\u01bd\2\2\u186d\u186e\7\u018f"+
		"\2\2\u186e\u186f\5\u04d0\u0269\2\u186f\u187f\3\2\2\2\u1870\u1871\7\u018b"+
		"\2\2\u1871\u1872\5\u031a\u018e\2\u1872\u1873\7\u01bd\2\2\u1873\u1874\5"+
		"\u04d0\u0269\2\u1874\u187f\3\2\2\2\u1875\u1876\7\u016b\2\2\u1876\u1877"+
		"\7\u01bf\2\2\u1877\u187f\5\u04ca\u0266\2\u1878\u1879\7\u00a4\2\2\u1879"+
		"\u187a\7\u016c\2\2\u187a\u187f\5\u04ca\u0266\2\u187b\u187c\7\u018b\2\2"+
		"\u187c\u187d\7\u016c\2\2\u187d\u187f\5\u04ca\u0266\2\u187e\u1854\3\2\2"+
		"\2\u187e\u1856\3\2\2\2\u187e\u185a\3\2\2\2\u187e\u185d\3\2\2\2\u187e\u185f"+
		"\3\2\2\2\u187e\u1861\3\2\2\2\u187e\u1863\3\2\2\2\u187e\u1865\3\2\2\2\u187e"+
		"\u1868\3\2\2\2\u187e\u186a\3\2\2\2\u187e\u1870\3\2\2\2\u187e\u1875\3\2"+
		"\2\2\u187e\u1878\3\2\2\2\u187e\u187b\3\2\2\2\u187f\u0319\3\2\2\2\u1880"+
		"\u1884\7\u01e7\2\2\u1881\u1884\7\u01bf\2\2\u1882\u1884\3\2\2\2\u1883\u1880"+
		"\3\2\2\2\u1883\u1881\3\2\2\2\u1883\u1882\3\2\2\2\u1884\u031b\3\2\2\2\u1885"+
		"\u1886\7\u011e\2\2\u1886\u1887\7\u012b\2\2\u1887\u1890\5\u00dep\2\u1888"+
		"\u1889\7\u0175\2\2\u1889\u1890\7\u0154\2\2\u188a\u188b\7\u0175\2\2\u188b"+
		"\u1890\7\u01e9\2\2\u188c\u1890\7\u00c6\2\2\u188d\u188e\7\u0145\2\2\u188e"+
		"\u1890\7\u00c6\2\2\u188f\u1885\3\2\2\2\u188f\u1888\3\2\2\2\u188f\u188a"+
		"\3\2\2\2\u188f\u188c\3\2\2\2\u188f\u188d\3\2\2\2\u1890\u031d\3\2\2\2\u1891"+
		"\u1892\b\u0190\1\2\u1892\u1893\5\u031c\u018f\2\u1893\u189b\3\2\2\2\u1894"+
		"\u1895\f\4\2\2\u1895\u1896\7\b\2\2\u1896\u189a\5\u031c\u018f\2\u1897\u1898"+
		"\f\3\2\2\u1898\u189a\5\u031c\u018f\2\u1899\u1894\3\2\2\2\u1899\u1897\3"+
		"\2\2\2\u189a\u189d\3\2\2\2\u189b\u1899\3\2\2\2\u189b\u189c\3\2\2\2\u189c"+
		"\u031f\3\2\2\2\u189d\u189b\3\2\2\2\u189e\u18a1\5\u031e\u0190\2\u189f\u18a1"+
		"\3\2\2\2\u18a0\u189e\3\2\2\2\u18a0\u189f\3\2\2\2\u18a1\u0321\3\2\2\2\u18a2"+
		"\u18a3\7\u00b0\2\2\u18a3\u18a4\5\u0138\u009d\2\u18a4\u18a5\7\u01df\2\2"+
		"\u18a5\u18a6\5\u04b4\u025b\2\u18a6\u18a7\5\u015e\u00b0\2\u18a7\u18a8\5"+
		"\u010a\u0086\2\u18a8\u18a9\7|\2\2\u18a9\u18aa\5\u03a0\u01d1\2\u18aa\u18ab"+
		"\5\u0324\u0193\2\u18ab\u18b9\3\2\2\2\u18ac\u18ad\7\u00b0\2\2\u18ad\u18ae"+
		"\7\u0158\2\2\u18ae\u18af\7\u0181\2\2\u18af\u18b0\5\u0138\u009d\2\u18b0"+
		"\u18b1\7\u01df\2\2\u18b1\u18b2\5\u04b4\u025b\2\u18b2\u18b3\5\u015e\u00b0"+
		"\2\u18b3\u18b4\5\u010a\u0086\2\u18b4\u18b5\7|\2\2\u18b5\u18b6\5\u03a0"+
		"\u01d1\2\u18b6\u18b7\5\u0324\u0193\2\u18b7\u18b9\3\2\2\2\u18b8\u18a2\3"+
		"\2\2\2\u18b8\u18ac\3\2\2\2\u18b9\u0323\3\2\2\2\u18ba\u18bb\7\u01e5\2\2"+
		"\u18bb\u18bc\7\u0099\2\2\u18bc\u18c7\7\u0156\2\2\u18bd\u18be\7\u01e5\2"+
		"\2\u18be\u18bf\7\u0091\2\2\u18bf\u18c0\7\u0099\2\2\u18c0\u18c7\7\u0156"+
		"\2\2\u18c1\u18c2\7\u01e5\2\2\u18c2\u18c3\7\u0130\2\2\u18c3\u18c4\7\u0099"+
		"\2\2\u18c4\u18c7\7\u0156\2\2\u18c5\u18c7\3\2\2\2\u18c6\u18ba\3\2\2\2\u18c6"+
		"\u18bd\3\2\2\2\u18c6\u18c1\3\2\2\2\u18c6\u18c5\3\2\2\2\u18c7\u0325\3\2"+
		"\2\2\u18c8\u18c9\7\u012f\2\2\u18c9\u18ca\5\u04c2\u0262\2\u18ca\u0327\3"+
		"\2\2\2\u18cb\u18cc\7\u00b0\2\2\u18cc\u18cd\7\u00be\2\2\u18cd\u18cf\5\u04ba"+
		"\u025e\2\u18ce\u18d0\7\u01e5\2\2\u18cf\u18ce\3\2\2\2\u18cf\u18d0\3\2\2"+
		"\2\u18d0\u18d1\3\2\2\2\u18d1\u18d2\5\u032a\u0196\2\u18d2\u0329\3\2\2\2"+
		"\u18d3\u18d8\b\u0196\1\2\u18d4\u18d5\f\4\2\2\u18d5\u18d7\5\u032c\u0197"+
		"\2\u18d6\u18d4\3\2\2\2\u18d7\u18da\3\2\2\2\u18d8\u18d6\3\2\2\2\u18d8\u18d9"+
		"\3\2\2\2\u18d9\u032b\3\2\2\2\u18da\u18d8\3\2\2\2\u18db\u18dc\7\u01b5\2"+
		"\2\u18dc\u18dd\5\u032e\u0198\2\u18dd\u18de\5\u04b8\u025d\2\u18de\u191d"+
		"\3\2\2\2\u18df\u18e0\7\u01b5\2\2\u18e0\u18e1\5\u032e\u0198\2\u18e1\u18e2"+
		"\7\u00c4\2\2\u18e2\u191d\3\2\2\2\u18e3\u18e4\7\u0133\2\2\u18e4\u18e5\5"+
		"\u032e\u0198\2\u18e5\u18e6\5\u04ca\u0266\2\u18e6\u191d\3\2\2\2\u18e7\u18e8"+
		"\7\u0133\2\2\u18e8\u18e9\5\u032e\u0198\2\u18e9\u18ea\7\u00c4\2\2\u18ea"+
		"\u191d\3\2\2\2\u18eb\u18ec\7\u01b7\2\2\u18ec\u18ed\5\u032e\u0198\2\u18ed"+
		"\u18ee\5\u04b8\u025d\2\u18ee\u191d\3\2\2\2\u18ef\u18f0\7\u01b7\2\2\u18f0"+
		"\u18f1\5\u032e\u0198\2\u18f1\u18f2\7\u00c4\2\2\u18f2\u191d\3\2\2\2\u18f3"+
		"\u18f4\7\u00d9\2\2\u18f4\u18f5\5\u032e\u0198\2\u18f5\u18f6\5\u04ca\u0266"+
		"\2\u18f6\u191d\3\2\2\2\u18f7\u18f8\7\u00d9\2\2\u18f8\u18f9\5\u032e\u0198"+
		"\2\u18f9\u18fa\5\u04c8\u0265\2\u18fa\u191d\3\2\2\2\u18fb\u18fc\7\u00d9"+
		"\2\2\u18fc\u18fd\5\u032e\u0198\2\u18fd\u18fe\7\u00c4\2\2\u18fe\u191d\3"+
		"\2\2\2\u18ff\u1900\7\u0125\2\2\u1900\u1901\5\u032e\u0198\2\u1901\u1902"+
		"\5\u04ca\u0266\2\u1902\u191d\3\2\2\2\u1903\u1904\7\u0125\2\2\u1904\u1905"+
		"\5\u032e\u0198\2\u1905\u1906\7\u00c4\2\2\u1906\u191d\3\2\2\2\u1907\u1908"+
		"\7\u0126\2\2\u1908\u1909\5\u032e\u0198\2\u1909\u190a\5\u04ca\u0266\2\u190a"+
		"\u191d\3\2\2\2\u190b\u190c\7\u0126\2\2\u190c\u190d\5\u032e\u0198\2\u190d"+
		"\u190e\7\u00c4\2\2\u190e\u191d\3\2\2\2\u190f\u1910\7\u00a8\2\2\u1910\u1911"+
		"\7\u012d\2\2\u1911\u1912\5\u032e\u0198\2\u1912\u1913\5\u04ce\u0268\2\u1913"+
		"\u191d\3\2\2\2\u1914\u1915\7\u0160\2\2\u1915\u1916\5\u032e\u0198\2\u1916"+
		"\u1917\5\u04b8\u025d\2\u1917\u191d\3\2\2\2\u1918\u1919\7\u0160\2\2\u1919"+
		"\u191a\5\u032e\u0198\2\u191a\u191b\7\u00c4\2\2\u191b\u191d\3\2\2\2\u191c"+
		"\u18db\3\2\2\2\u191c\u18df\3\2\2\2\u191c\u18e3\3\2\2\2\u191c\u18e7\3\2"+
		"\2\2\u191c\u18eb\3\2\2\2\u191c\u18ef\3\2\2\2\u191c\u18f3\3\2\2\2\u191c"+
		"\u18f7\3\2\2\2\u191c\u18fb\3\2\2\2\u191c\u18ff\3\2\2\2\u191c\u1903\3\2"+
		"\2\2\u191c\u1907\3\2\2\2\u191c\u190b\3\2\2\2\u191c\u190f\3\2\2\2\u191c"+
		"\u1914\3\2\2\2\u191c\u1918\3\2\2\2\u191d\u032d\3\2\2\2\u191e\u1921\7\20"+
		"\2\2\u191f\u1921\3\2\2\2\u1920\u191e\3\2\2\2\u1920\u191f\3\2\2\2\u1921"+
		"\u032f\3\2\2\2\u1922\u1923\7u\2\2\u1923\u1924\7\u00be\2\2\u1924\u1926"+
		"\5\u04ba\u025e\2\u1925\u1927\7\u01e5\2\2\u1926\u1925\3\2\2\2\u1926\u1927"+
		"\3\2\2\2\u1927\u1928\3\2\2\2\u1928\u1929\5\u0334\u019b\2\u1929\u1932\3"+
		"\2\2\2\u192a\u192b\7u\2\2\u192b\u192c\7\u00be\2\2\u192c\u192d\5\u04ba"+
		"\u025e\2\u192d\u192e\7\u019c\2\2\u192e\u192f\7\u01b5\2\2\u192f\u1930\5"+
		"\u04b8\u025d\2\u1930\u1932\3\2\2\2\u1931\u1922\3\2\2\2\u1931\u192a\3\2"+
		"\2\2\u1932\u0331\3\2\2\2\u1933\u1934\7u\2\2\u1934\u1935\7\u00be\2\2\u1935"+
		"\u1936\5\u04ba\u025e\2\u1936\u1937\5\u00eav\2\u1937\u0333\3\2\2\2\u1938"+
		"\u193d\b\u019b\1\2\u1939\u193a\f\4\2\2\u193a\u193c\5\u0336\u019c\2\u193b"+
		"\u1939\3\2\2\2\u193c\u193f\3\2\2\2\u193d\u193b\3\2\2\2\u193d\u193e\3\2"+
		"\2\2\u193e\u0335\3\2\2\2\u193f\u193d\3\2\2\2\u1940\u1941\7\u00a8\2\2\u1941"+
		"\u1942\7\u012d\2\2\u1942\u1943\5\u032e\u0198\2\u1943\u1944\5\u04ce\u0268"+
		"\2\u1944\u0337\3\2\2\2\u1945\u1946\7\u00d5\2\2\u1946\u1947\7\u00be\2\2"+
		"\u1947\u194e\5\u04ba\u025e\2\u1948\u1949\7\u00d5\2\2\u1949\u194a\7\u00be"+
		"\2\2\u194a\u194b\7\u0102\2\2\u194b\u194c\7\u00e3\2\2\u194c\u194e\5\u04ba"+
		"\u025e\2\u194d\u1945\3\2\2\2\u194d\u1948\3\2\2\2\u194e\u0339\3\2\2\2\u194f"+
		"\u1950\7\u00b0\2\2\u1950\u1951\7\u00d3\2\2\u1951\u1952\5\u0250\u0129\2"+
		"\u1952\u1953\5\u033e\u01a0\2\u1953\u1954\5\u040a\u0206\2\u1954\u1955\5"+
		"\u014a\u00a6\2\u1955\u033b\3\2\2\2\u1956\u1957\7u\2\2\u1957\u1958\7\u00d3"+
		"\2\2\u1958\u1959\5\u0250\u0129\2\u1959\u195a\5\u0100\u0081\2\u195a\u1989"+
		"\3\2\2\2\u195b\u195c\7u\2\2\u195c\u195d\7\u00d3\2\2\u195d\u195e\5\u0250"+
		"\u0129\2\u195e\u195f\7\u00d5\2\2\u195f\u1960\7\u0145\2\2\u1960\u1961\7"+
		"\u014a\2\2\u1961\u1989\3\2\2\2\u1962\u1963\7u\2\2\u1963\u1964\7\u00d3"+
		"\2\2\u1964\u1965\5\u0250\u0129\2\u1965\u1966\7\u019c\2\2\u1966\u1967\7"+
		"\u0145\2\2\u1967\u1968\7\u014a\2\2\u1968\u1989\3\2\2\2\u1969\u196a\7u"+
		"\2\2\u196a\u196b\7\u00d3\2\2\u196b\u196c\5\u0250\u0129\2\u196c\u196d\7"+
		"o\2\2\u196d\u196e\5\u0158\u00ad\2\u196e\u1989\3\2\2\2\u196f\u1970\7u\2"+
		"\2\u1970\u1971\7\u00d3\2\2\u1971\u1972\5\u0250\u0129\2\u1972\u1973\7\u00d5"+
		"\2\2\u1973\u1974\7\u00a9\2\2\u1974\u1975\5\u04b8\u025d\2\u1975\u1976\5"+
		"\u0102\u0082\2\u1976\u1989\3\2\2\2\u1977\u1978\7u\2\2\u1978\u1979\7\u00d3"+
		"\2\2\u1979\u197a\5\u0250\u0129\2\u197a\u197b\7\u00d5\2\2\u197b\u197c\7"+
		"\u00a9\2\2\u197c\u197d\7\u0102\2\2\u197d\u197e\7\u00e3\2\2\u197e\u197f"+
		"\5\u04b8\u025d\2\u197f\u1980\5\u0102\u0082\2\u1980\u1989\3\2\2\2\u1981"+
		"\u1982\7u\2\2\u1982\u1983\7\u00d3\2\2\u1983\u1984\5\u0250\u0129\2\u1984"+
		"\u1985\7\u01d6\2\2\u1985\u1986\7\u00a9\2\2\u1986\u1987\5\u04b8\u025d\2"+
		"\u1987\u1989\3\2\2\2\u1988\u1956\3\2\2\2\u1988\u195b\3\2\2\2\u1988\u1962"+
		"\3\2\2\2\u1988\u1969\3\2\2\2\u1988\u196f\3\2\2\2\u1988\u1977\3\2\2\2\u1988"+
		"\u1981\3\2\2\2\u1989\u033d\3\2\2\2\u198a\u198d\7|\2\2\u198b\u198d\3\2"+
		"\2\2\u198c\u198a\3\2\2\2\u198c\u198b\3\2\2\2\u198d\u033f\3\2\2\2\u198e"+
		"\u198f\7u\2\2\u198f\u1990\7\u01b9\2\2\u1990\u1991\7\u0192\2\2\u1991\u1992"+
		"\7\u00cd\2\2\u1992\u1993\5\u0250\u0129\2\u1993\u1994\5\u0216\u010c\2\u1994"+
		"\u0341\3\2\2\2\u1995\u1996\7u\2\2\u1996\u1997\7\u01b9\2\2\u1997\u1998"+
		"\7\u0192\2\2\u1998\u1999\7\u00a7\2\2\u1999\u199a\5\u0250\u0129\2\u199a"+
		"\u199b\7o\2\2\u199b\u199c\7\u0135\2\2\u199c\u199d\7\u00ee\2\2\u199d\u199e"+
		"\5\u04b6\u025c\2\u199e\u199f\7\u01e5\2\2\u199f\u19a0\5\u024e\u0128\2\u19a0"+
		"\u19de\3\2\2\2\u19a1\u19a2\7u\2\2\u19a2\u19a3\7\u01b9\2\2\u19a3\u19a4"+
		"\7\u0192\2\2\u19a4\u19a5\7\u00a7\2\2\u19a5\u19a6\5\u0250\u0129\2\u19a6"+
		"\u19a7\7u\2\2\u19a7\u19a8\7\u0135\2\2\u19a8\u19a9\7\u00ee\2\2\u19a9\u19aa"+
		"\5\u04b6\u025c\2\u19aa\u19ab\7\u01e5\2\2\u19ab\u19ac\5\u024e\u0128\2\u19ac"+
		"\u19de\3\2\2\2\u19ad\u19ae\7u\2\2\u19ae\u19af\7\u01b9\2\2\u19af\u19b0"+
		"\7\u0192\2\2\u19b0\u19b1\7\u00a7\2\2\u19b1\u19b2\5\u0250\u0129\2\u19b2"+
		"\u19b3\7u\2\2\u19b3\u19b4\7\u0135\2\2\u19b4\u19b5\7\u0181\2\2\u19b5\u19b6"+
		"\5\u0250\u0129\2\u19b6\u19b7\7\u01e5\2\2\u19b7\u19b8\5\u0250\u0129\2\u19b8"+
		"\u19de\3\2\2\2\u19b9\u19ba\7u\2\2\u19ba\u19bb\7\u01b9\2\2\u19bb\u19bc"+
		"\7\u0192\2\2\u19bc\u19bd\7\u00a7\2\2\u19bd\u19be\5\u0250\u0129\2\u19be"+
		"\u19bf\7u\2\2\u19bf\u19c0\7\u0135\2\2\u19c0\u19c1\7\u00ee\2\2\u19c1\u19c2"+
		"\5\u04b6\u025c\2\u19c2\u19c3\7\u0181\2\2\u19c3\u19c4\5\u0250\u0129\2\u19c4"+
		"\u19c5\7\u01e5\2\2\u19c5\u19c6\5\u0250\u0129\2\u19c6\u19de\3\2\2\2\u19c7"+
		"\u19c8\7u\2\2\u19c8\u19c9\7\u01b9\2\2\u19c9\u19ca\7\u0192\2\2\u19ca\u19cb"+
		"\7\u00a7\2\2\u19cb\u19cc\5\u0250\u0129\2\u19cc\u19cd\7\u00d5\2\2\u19cd"+
		"\u19ce\7\u0135\2\2\u19ce\u19cf\7\u00ee\2\2\u19cf\u19d0\5\u04b6\u025c\2"+
		"\u19d0\u19de\3\2\2\2\u19d1\u19d2\7u\2\2\u19d2\u19d3\7\u01b9\2\2\u19d3"+
		"\u19d4\7\u0192\2\2\u19d4\u19d5\7\u00a7\2\2\u19d5\u19d6\5\u0250\u0129\2"+
		"\u19d6\u19d7\7\u00d5\2\2\u19d7\u19d8\7\u0135\2\2\u19d8\u19d9\7\u0102\2"+
		"\2\u19d9\u19da\7\u00e3\2\2\u19da\u19db\7\u00ee\2\2\u19db\u19dc\5\u04b6"+
		"\u025c\2\u19dc\u19de\3\2\2\2\u19dd\u1995\3\2\2\2\u19dd\u19a1\3\2\2\2\u19dd"+
		"\u19ad\3\2\2\2\u19dd\u19b9\3\2\2\2\u19dd\u19c7\3\2\2\2\u19dd\u19d1\3\2"+
		"\2\2\u19de\u0343\3\2\2\2\u19df\u19e0\7\u00b0\2\2\u19e0\u19e1\5\u0232\u011a"+
		"\2\u19e1\u19e2\7\u00ad\2\2\u19e2\u19e3\5\u0250\u0129\2\u19e3\u19e4\7\u00ee"+
		"\2\2\u19e4\u19e5\5\u04ca\u0266\2\u19e5\u19e6\7\u01bd\2\2\u19e6\u19e7\5"+
		"\u04ca\u0266\2\u19e7\u19e8\7\u00f3\2\2\u19e8\u19e9\5\u0250\u0129\2\u19e9"+
		"\u0345\3\2\2\2\u19ea\u19eb\7\u009d\2\2\u19eb\u19ec\5\u0354\u01ab\2\u19ec"+
		"\u19ed\5\u04b4\u025b\2\u19ed\u19ee\5\u0348\u01a5\2\u19ee\u19f8\3\2\2\2"+
		"\u19ef\u19f0\7\u009d\2\2\u19f0\u19f8\5\u0354\u01ab\2\u19f1\u19f2\7\u009d"+
		"\2\2\u19f2\u19f3\5\u0354\u01ab\2\u19f3\u19f4\5\u04c0\u0261\2\u19f4\u19f5"+
		"\7\u0153\2\2\u19f5\u19f6\5\u04b4\u025b\2\u19f6\u19f8\3\2\2\2\u19f7\u19ea"+
		"\3\2\2\2\u19f7\u19ef\3\2\2\2\u19f7\u19f1\3\2\2\2\u19f8\u0347\3\2\2\2\u19f9"+
		"\u19fa\7\u01d3\2\2\u19fa\u19fd\5\u04c0\u0261\2\u19fb\u19fd\3\2\2\2\u19fc"+
		"\u19f9\3\2\2\2\u19fc\u19fb\3\2\2\2\u19fd\u0349\3\2\2\2\u19fe\u19ff\7\u01d4"+
		"\2\2\u19ff\u1a00\5\u0356\u01ac\2\u1a00\u1a01\5\u0358\u01ad\2\u1a01\u1a02"+
		"\5\u0354\u01ab\2\u1a02\u1a1c\3\2\2\2\u1a03\u1a04\7\u01d4\2\2\u1a04\u1a05"+
		"\5\u0356\u01ac\2\u1a05\u1a06\5\u0358\u01ad\2\u1a06\u1a07\5\u0354\u01ab"+
		"\2\u1a07\u1a08\5\u04b4\u025b\2\u1a08\u1a1c\3\2\2\2\u1a09\u1a0a\7\u01d4"+
		"\2\2\u1a0a\u1a0b\5\u0356\u01ac\2\u1a0b\u1a0c\5\u0358\u01ad\2\u1a0c\u1a0d"+
		"\5\u0354\u01ab\2\u1a0d\u1a0e\5\u0350\u01a9\2\u1a0e\u1a1c\3\2\2\2\u1a0f"+
		"\u1a10\7\u01d4\2\2\u1a10\u1a11\7\r\2\2\u1a11\u1a12\5\u034c\u01a7\2\u1a12"+
		"\u1a13\7\7\2\2\u1a13\u1a1c\3\2\2\2\u1a14\u1a15\7\u01d4\2\2\u1a15\u1a16"+
		"\7\r\2\2\u1a16\u1a17\5\u034c\u01a7\2\u1a17\u1a18\7\7\2\2\u1a18\u1a19\5"+
		"\u04b4\u025b\2\u1a19\u1a1a\5\u035a\u01ae\2\u1a1a\u1a1c\3\2\2\2\u1a1b\u19fe"+
		"\3\2\2\2\u1a1b\u1a03\3\2\2\2\u1a1b\u1a09\3\2\2\2\u1a1b\u1a0f\3\2\2\2\u1a1b"+
		"\u1a14\3\2\2\2\u1a1c\u034b\3\2\2\2\u1a1d\u1a1e\b\u01a7\1\2\u1a1e\u1a1f"+
		"\5\u034e\u01a8\2\u1a1f\u1a25\3\2\2\2\u1a20\u1a21\f\3\2\2\u1a21\u1a22\7"+
		"\b\2\2\u1a22\u1a24\5\u034e\u01a8\2\u1a23\u1a20\3\2\2\2\u1a24\u1a27\3\2"+
		"\2\2\u1a25\u1a23\3\2\2\2\u1a25\u1a26\3\2\2\2\u1a26\u034d\3\2\2\2\u1a27"+
		"\u1a25\3\2\2\2\u1a28\u1a2d\5\u0352\u01aa\2\u1a29\u1a2d\7\u01dd\2\2\u1a2a"+
		"\u1a2d\7\u00f2\2\2\u1a2b\u1a2d\7\u00f4\2\2\u1a2c\u1a28\3\2\2\2\u1a2c\u1a29"+
		"\3\2\2\2\u1a2c\u1a2a\3\2\2\2\u1a2c\u1a2b\3\2\2\2\u1a2d\u034f\3\2\2\2\u1a2e"+
		"\u1a2f\5\u0352\u01aa\2\u1a2f\u1a30\5\u0354\u01ab\2\u1a30\u1a37\3\2\2\2"+
		"\u1a31\u1a32\5\u0352\u01aa\2\u1a32\u1a33\5\u0354\u01ab\2\u1a33\u1a34\5"+
		"\u04b4\u025b\2\u1a34\u1a35\5\u035a\u01ae\2\u1a35\u1a37\3\2\2\2\u1a36\u1a2e"+
		"\3\2\2\2\u1a36\u1a31\3\2\2\2\u1a37\u0351\3\2\2\2\u1a38\u1a39\t\22\2\2"+
		"\u1a39\u0353\3\2\2\2\u1a3a\u1a3d\7\u01dd\2\2\u1a3b\u1a3d\3\2\2\2\u1a3c"+
		"\u1a3a\3\2\2\2\u1a3c\u1a3b\3\2\2\2\u1a3d\u0355\3\2\2\2\u1a3e\u1a41\7\u00f4"+
		"\2\2\u1a3f\u1a41\3\2\2\2\u1a40\u1a3e\3\2\2\2\u1a40\u1a3f\3\2\2\2\u1a41"+
		"\u0357\3\2\2\2\u1a42\u1a45\7\u00f2\2\2\u1a43\u1a45\3\2\2\2\u1a44\u1a42"+
		"\3\2\2\2\u1a44\u1a43\3\2\2\2\u1a45\u0359\3\2\2\2\u1a46\u1a47\7\r\2\2\u1a47"+
		"\u1a48\5\u04b6\u025c\2\u1a48\u1a49\7\7\2\2\u1a49\u1a4c\3\2\2\2\u1a4a\u1a4c"+
		"\3\2\2\2\u1a4b\u1a46\3\2\2\2\u1a4b\u1a4a\3\2\2\2\u1a4c\u035b\3\2\2\2\u1a4d"+
		"\u1a4e\7\u00e4\2\2\u1a4e\u1a5e\5\u035e\u01b0\2\u1a4f\u1a50\7\u00e4\2\2"+
		"\u1a50\u1a51\5\u0352\u01aa\2\u1a51\u1a52\5\u0354\u01ab\2\u1a52\u1a53\5"+
		"\u035e\u01b0\2\u1a53\u1a5e\3\2\2\2\u1a54\u1a55\7\u00e4\2\2\u1a55\u1a56"+
		"\7\u01dd\2\2\u1a56\u1a5e\5\u035e\u01b0\2\u1a57\u1a58\7\u00e4\2\2\u1a58"+
		"\u1a59\7\r\2\2\u1a59\u1a5a\5\u0360\u01b1\2\u1a5a\u1a5b\7\7\2\2\u1a5b\u1a5c"+
		"\5\u035e\u01b0\2\u1a5c\u1a5e\3\2\2\2\u1a5d\u1a4d\3\2\2\2\u1a5d\u1a4f\3"+
		"\2\2\2\u1a5d\u1a54\3\2\2\2\u1a5d\u1a57\3\2\2\2\u1a5e\u035d\3\2\2\2\u1a5f"+
		"\u1a67\5\u03a0\u01d1\2\u1a60\u1a67\5\u0374\u01bb\2\u1a61\u1a67\5\u038a"+
		"\u01c6\2\u1a62\u1a67\5\u037e\u01c0\2\u1a63\u1a67\5\u0398\u01cd\2\u1a64"+
		"\u1a67\5\u0180\u00c1\2\u1a65\u1a67\5\u036e\u01b8\2\u1a66\u1a5f\3\2\2\2"+
		"\u1a66\u1a60\3\2\2\2\u1a66\u1a61\3\2\2\2\u1a66\u1a62\3\2\2\2\u1a66\u1a63"+
		"\3\2\2\2\u1a66\u1a64\3\2\2\2\u1a66\u1a65\3\2\2\2\u1a67\u035f\3\2\2\2\u1a68"+
		"\u1a69\b\u01b1\1\2\u1a69\u1a6a\5\u0362\u01b2\2\u1a6a\u1a70\3\2\2\2\u1a6b"+
		"\u1a6c\f\3\2\2\u1a6c\u1a6d\7\b\2\2\u1a6d\u1a6f\5\u0362\u01b2\2\u1a6e\u1a6b"+
		"\3\2\2\2\u1a6f\u1a72\3\2\2\2\u1a70\u1a6e\3\2\2\2\u1a70\u1a71\3\2\2\2\u1a71"+
		"\u0361\3\2\2\2\u1a72\u1a70\3\2\2\2\u1a73\u1a74\5\u0364\u01b3\2\u1a74\u1a75"+
		"\5\u0366\u01b4\2\u1a75\u0363\3\2\2\2\u1a76\u1a7a\5\u04d0\u0269\2\u1a77"+
		"\u1a7a\5\u0352\u01aa\2\u1a78\u1a7a\7\u01dd\2\2\u1a79\u1a76\3\2\2\2\u1a79"+
		"\u1a77\3\2\2\2\u1a79\u1a78\3\2\2\2\u1a7a\u0365\3\2\2\2\u1a7b\u1a7f\5\u00e0"+
		"q\2\u1a7c\u1a7f\5\u0192\u00ca\2\u1a7d\u1a7f\3\2\2\2\u1a7e\u1a7b\3\2\2"+
		"\2\u1a7e\u1a7c\3\2\2\2\u1a7e\u1a7d\3\2\2\2\u1a7f\u0367\3\2\2\2\u1a80\u1a81"+
		"\7\u016b\2\2\u1a81\u1a82\5\u04b8\u025d\2\u1a82\u1a83\5\u036a\u01b6\2\u1a83"+
		"\u1a84\7|\2\2\u1a84\u1a85\5\u036c\u01b7\2\u1a85\u0369\3\2\2\2\u1a86\u1a87"+
		"\7\r\2\2\u1a87\u1a88\5\u047a\u023e\2\u1a88\u1a89\7\7\2\2\u1a89\u1a8c\3"+
		"\2\2\2\u1a8a\u1a8c\3\2\2\2\u1a8b\u1a86\3\2\2\2\u1a8b\u1a8a\3\2\2\2\u1a8c"+
		"\u036b\3\2\2\2\u1a8d\u1a92\5\u03a0\u01d1\2\u1a8e\u1a92\5\u0374\u01bb\2"+
		"\u1a8f\u1a92\5\u038a\u01c6\2\u1a90\u1a92\5\u037e\u01c0\2\u1a91\u1a8d\3"+
		"\2\2\2\u1a91\u1a8e\3\2\2\2\u1a91\u1a8f\3\2\2\2\u1a91\u1a90\3\2\2\2\u1a92"+
		"\u036d\3\2\2\2\u1a93\u1a94\7\u00e2\2\2\u1a94\u1a95\5\u04b8\u025d\2\u1a95"+
		"\u1a96\5\u0370\u01b9\2\u1a96\u1aa2\3\2\2\2\u1a97\u1a98\7\u00b0\2\2\u1a98"+
		"\u1a99\5\u0138\u009d\2\u1a99\u1a9a\7\u01b3\2\2\u1a9a\u1a9b\5\u0182\u00c2"+
		"\2\u1a9b\u1a9c\7|\2\2\u1a9c\u1a9d\7\u00e2\2\2\u1a9d\u1a9e\5\u04b8\u025d"+
		"\2\u1a9e\u1a9f\5\u0370\u01b9\2\u1a9f\u1aa0\5\u0184\u00c3\2\u1aa0\u1aa2"+
		"\3\2\2\2\u1aa1\u1a93\3\2\2\2\u1aa1\u1a97\3\2\2\2\u1aa2\u036f\3\2\2\2\u1aa3"+
		"\u1aa4\7\r\2\2\u1aa4\u1aa5\5\u0474\u023b\2\u1aa5\u1aa6\7\7\2\2\u1aa6\u1aa9"+
		"\3\2\2\2\u1aa7\u1aa9\3\2\2\2\u1aa8\u1aa3\3\2\2\2\u1aa8\u1aa7\3\2\2\2\u1aa9"+
		"\u0371\3\2\2\2\u1aaa\u1aab\7\u00c0\2\2\u1aab\u1ab5\5\u04b8\u025d\2\u1aac"+
		"\u1aad\7\u00c0\2\2\u1aad\u1aae\7\u016b\2\2\u1aae\u1ab5\5\u04b8\u025d\2"+
		"\u1aaf\u1ab0\7\u00c0\2\2\u1ab0\u1ab5\7s\2\2\u1ab1\u1ab2\7\u00c0\2\2\u1ab2"+
		"\u1ab3\7\u016b\2\2\u1ab3\u1ab5\7s\2\2\u1ab4\u1aaa\3\2\2\2\u1ab4\u1aac"+
		"\3\2\2\2\u1ab4\u1aaf\3\2\2\2\u1ab4\u1ab1\3\2\2\2\u1ab5\u0373\3\2\2\2\u1ab6"+
		"\u1ab7\5\u03b0\u01d9\2\u1ab7\u1ab8\7\u0114\2\2\u1ab8\u1ab9\7\u011a\2\2"+
		"\u1ab9\u1aba\5\u04b4\u025b\2\u1aba\u1abb\5\u0376\u01bc\2\u1abb\u1abc\5"+
		"\u037c\u01bf\2\u1abc\u0375\3\2\2\2\u1abd\u1ac6\5\u03a0\u01d1\2\u1abe\u1abf"+
		"\7\r\2\2\u1abf\u1ac0\5\u0378\u01bd\2\u1ac0\u1ac1\7\7\2\2\u1ac1\u1ac2\5"+
		"\u03a0\u01d1\2\u1ac2\u1ac6\3\2\2\2\u1ac3\u1ac4\7\u00c4\2\2\u1ac4\u1ac6"+
		"\7\u01d9\2\2\u1ac5\u1abd\3\2\2\2\u1ac5\u1abe\3\2\2\2\u1ac5\u1ac3\3\2\2"+
		"\2\u1ac6\u0377\3\2\2\2\u1ac7\u1ac8\b\u01bd\1\2\u1ac8\u1ac9\5\u037a\u01be"+
		"\2\u1ac9\u1acf\3\2\2\2\u1aca\u1acb\f\3\2\2\u1acb\u1acc\7\b\2\2\u1acc\u1ace"+
		"\5\u037a\u01be\2\u1acd\u1aca\3\2\2\2\u1ace\u1ad1\3\2\2\2\u1acf\u1acd\3"+
		"\2\2\2\u1acf\u1ad0\3\2\2\2\u1ad0\u0379\3\2\2\2\u1ad1\u1acf\3\2\2\2\u1ad2"+
		"\u1ad3\5\u04d0\u0269\2\u1ad3\u1ad4\5\u04a4\u0253\2\u1ad4\u037b\3\2\2\2"+
		"\u1ad5\u1ad6\7\u0186\2\2\u1ad6\u1ad9\5\u04ae\u0258\2\u1ad7\u1ad9\3\2\2"+
		"\2\u1ad8\u1ad5\3\2\2\2\u1ad8\u1ad7\3\2\2\2\u1ad9\u037d\3\2\2\2\u1ada\u1adb"+
		"\5\u03b0\u01d9\2\u1adb\u1adc\7\u00c9\2\2\u1adc\u1add\7\u00f3\2\2\u1add"+
		"\u1ade\5\u03fc\u01ff\2\u1ade\u1adf\5\u0380\u01c1\2\u1adf\u1ae0\5\u0402"+
		"\u0202\2\u1ae0\u1ae1\5\u037c\u01bf\2\u1ae1\u037f\3\2\2\2\u1ae2\u1ae3\7"+
		"\u01d3\2\2\u1ae3\u1ae6\5\u03ea\u01f6\2\u1ae4\u1ae6\3\2\2\2\u1ae5\u1ae2"+
		"\3\2\2\2\u1ae5\u1ae4\3\2\2\2\u1ae6\u0381\3\2\2\2\u1ae7\u1ae8\7\u0134\2"+
		"\2\u1ae8\u1ae9\5\u03b6\u01dc\2\u1ae9\u1aea\5\u03fa\u01fe\2\u1aea\u1aeb"+
		"\5\u0384\u01c3\2\u1aeb\u1aec\5\u0388\u01c5\2\u1aec\u0383\3\2\2\2\u1aed"+
		"\u1aee\7\u0107\2\2\u1aee\u1aef\5\u0386\u01c4\2\u1aef\u1af0\7\u013a\2\2"+
		"\u1af0\u1af3\3\2\2\2\u1af1\u1af3\3\2\2\2\u1af2\u1aed\3\2\2\2\u1af2\u1af1"+
		"\3\2\2\2\u1af3\u0385\3\2\2\2\u1af4\u1af5\7m\2\2\u1af5\u1b05\7\u019e\2"+
		"\2\u1af6\u1af7\7\u018c\2\2\u1af7\u1b05\7\u019e\2\2\u1af8\u1af9\7\u018c"+
		"\2\2\u1af9\u1b05\7\u00e1\2\2\u1afa\u1afb\7\u019e\2\2\u1afb\u1afc\7\u01d1"+
		"\2\2\u1afc\u1b05\7\u00e1\2\2\u1afd\u1b05\7\u019e\2\2\u1afe\u1aff\7\u019e"+
		"\2\2\u1aff\u1b00\7\u018c\2\2\u1b00\u1b05\7\u00e1\2\2\u1b01\u1b05\7\u00e1"+
		"\2\2\u1b02\u1b03\7m\2\2\u1b03\u1b05\7\u00e1\2\2\u1b04\u1af4\3\2\2\2\u1b04"+
		"\u1af6\3\2\2\2\u1b04\u1af8\3\2\2\2\u1b04\u1afa\3\2\2\2\u1b04\u1afd\3\2"+
		"\2\2\u1b04\u1afe\3\2\2\2\u1b04\u1b01\3\2\2\2\u1b04\u1b02\3\2\2\2\u1b05"+
		"\u0387\3\2\2\2\u1b06\u1b09\7\u0149\2\2\u1b07\u1b09\3\2\2\2\u1b08\u1b06"+
		"\3\2\2\2\u1b08\u1b07\3\2\2\2\u1b09\u0389\3\2\2\2\u1b0a\u1b0b\5\u03b0\u01d9"+
		"\2\u1b0b\u1b0c\7\u01d1\2\2\u1b0c\u1b0d\5\u03fc\u01ff\2\u1b0d\u1b0e\7\u019c"+
		"\2\2\u1b0e\u1b0f\5\u038c\u01c7\2\u1b0f\u1b10\5\u03e8\u01f5\2\u1b10\u1b11"+
		"\5\u0402\u0202\2\u1b11\u1b12\5\u037c\u01bf\2\u1b12\u038b\3\2\2\2\u1b13"+
		"\u1b14\b\u01c7\1\2\u1b14\u1b15\5\u038e\u01c8\2\u1b15\u1b1b\3\2\2\2\u1b16"+
		"\u1b17\f\3\2\2\u1b17\u1b18\7\b\2\2\u1b18\u1b1a\5\u038e\u01c8\2\u1b19\u1b16"+
		"\3\2\2\2\u1b1a\u1b1d\3\2\2\2\u1b1b\u1b19\3\2\2\2\u1b1b\u1b1c\3\2\2\2\u1b1c"+
		"\u038d\3\2\2\2\u1b1d\u1b1b\3\2\2\2\u1b1e\u1b21\5\u0390\u01c9\2\u1b1f\u1b21"+
		"\5\u0392\u01ca\2\u1b20\u1b1e\3\2\2\2\u1b20\u1b1f\3\2\2\2\u1b21\u038f\3"+
		"\2\2\2\u1b22\u1b23\5\u0394\u01cb\2\u1b23\u1b24\7\20\2\2\u1b24\u1b25\5"+
		"\u04a8\u0255\2\u1b25\u0391\3\2\2\2\u1b26\u1b27\7\r\2\2\u1b27\u1b28\5\u0396"+
		"\u01cc\2\u1b28\u1b29\7\7\2\2\u1b29\u1b2a\7\20\2\2\u1b2a\u1b2b\5\u04ac"+
		"\u0257\2\u1b2b\u0393\3\2\2\2\u1b2c\u1b2d\5\u04d0\u0269\2\u1b2d\u1b2e\5"+
		"\u04a4\u0253\2\u1b2e\u0395\3\2\2\2\u1b2f\u1b30\b\u01cc\1\2\u1b30\u1b31"+
		"\5\u0394\u01cb\2\u1b31\u1b37\3\2\2\2\u1b32\u1b33\f\3\2\2\u1b33\u1b34\7"+
		"\b\2\2\u1b34\u1b36\5\u0394\u01cb\2\u1b35\u1b32\3\2\2\2\u1b36\u1b39\3\2"+
		"\2\2\u1b37\u1b35\3\2\2\2\u1b37\u1b38\3\2\2\2\u1b38\u0397\3\2\2\2\u1b39"+
		"\u1b37\3\2\2\2\u1b3a\u1b3b\7\u00c3\2\2\u1b3b\u1b3c\5\u039a\u01ce\2\u1b3c"+
		"\u1b3d\5\u039c\u01cf\2\u1b3d\u1b3e\7\u00bb\2\2\u1b3e\u1b3f\5\u039e\u01d0"+
		"\2\u1b3f\u1b40\7\u00ee\2\2\u1b40\u1b41\5\u03a0\u01d1\2\u1b41\u0399\3\2"+
		"\2\2\u1b42\u1b43\5\u04b8\u025d\2\u1b43\u039b\3\2\2\2\u1b44\u1b50\b\u01cf"+
		"\1\2\u1b45\u1b46\f\6\2\2\u1b46\u1b47\7\u0143\2\2\u1b47\u1b4f\7\u0191\2"+
		"\2\u1b48\u1b49\f\5\2\2\u1b49\u1b4f\7\u0191\2\2\u1b4a\u1b4b\f\4\2\2\u1b4b"+
		"\u1b4f\7\u0089\2\2\u1b4c\u1b4d\f\3\2\2\u1b4d\u1b4f\7\u0113\2\2\u1b4e\u1b45"+
		"\3\2\2\2\u1b4e\u1b48\3\2\2\2\u1b4e\u1b4a\3\2\2\2\u1b4e\u1b4c\3\2\2\2\u1b4f"+
		"\u1b52\3\2\2\2\u1b50\u1b4e\3\2\2\2\u1b50\u1b51\3\2\2\2\u1b51\u039d\3\2"+
		"\2\2\u1b52\u1b50\3\2\2\2\u1b53\u1b59\3\2\2\2\u1b54\u1b55\7\u01e5\2\2\u1b55"+
		"\u1b59\7\u00ff\2\2\u1b56\u1b57\7\u01e6\2\2\u1b57\u1b59\7\u00ff\2\2\u1b58"+
		"\u1b53\3\2\2\2\u1b58\u1b54\3\2\2\2\u1b58\u1b56\3\2\2\2\u1b59\u039f\3\2"+
		"\2\2\u1b5a\u1b5d\5\u03a4\u01d3\2\u1b5b\u1b5d\5\u03a2\u01d2\2\u1b5c\u1b5a"+
		"\3\2\2\2\u1b5c\u1b5b\3\2\2\2\u1b5d\u03a1\3\2\2\2\u1b5e\u1b5f\b\u01d2\1"+
		"\2\u1b5f\u1b60\7\r\2\2\u1b60\u1b61\5\u03a4\u01d3\2\u1b61\u1b62\7\7\2\2"+
		"\u1b62\u1b68\3\2\2\2\u1b63\u1b64\7\r\2\2\u1b64\u1b65\5\u03a2\u01d2\2\u1b65"+
		"\u1b66\7\7\2\2\u1b66\u1b68\3\2\2\2\u1b67\u1b5e\3\2\2\2\u1b67\u1b63\3\2"+
		"\2\2\u1b68\u1b80\3\2\2\2\u1b69\u1b6a\f\5\2\2\u1b6a\u1b6b\7\u01cb\2\2\u1b6b"+
		"\u1b6e\5\u03b8\u01dd\2\u1b6c\u1b6f\5\u03a2\u01d2\2\u1b6d\u1b6f\5\u03a8"+
		"\u01d5\2\u1b6e\u1b6c\3\2\2\2\u1b6e\u1b6d\3\2\2\2\u1b6f\u1b7f\3\2\2\2\u1b70"+
		"\u1b71\f\4\2\2\u1b71\u1b72\7\u0118\2\2\u1b72\u1b75\5\u03b8\u01dd\2\u1b73"+
		"\u1b76\5\u03a2\u01d2\2\u1b74\u1b76\5\u03a8\u01d5\2\u1b75\u1b73\3\2\2\2"+
		"\u1b75\u1b74\3\2\2\2\u1b76\u1b7f\3\2\2\2\u1b77\u1b78\f\3\2\2\u1b78\u1b79"+
		"\7\u00de\2\2\u1b79\u1b7c\5\u03b8\u01dd\2\u1b7a\u1b7d\5\u03a2\u01d2\2\u1b7b"+
		"\u1b7d\5\u03a8\u01d5\2\u1b7c\u1b7a\3\2\2\2\u1b7c\u1b7b\3\2\2\2\u1b7d\u1b7f"+
		"\3\2\2\2\u1b7e\u1b69\3\2\2\2\u1b7e\u1b70\3\2\2\2\u1b7e\u1b77\3\2\2\2\u1b7f"+
		"\u1b82\3\2\2\2\u1b80\u1b7e\3\2\2\2\u1b80\u1b81\3\2\2\2\u1b81\u03a3\3\2"+
		"\2\2\u1b82\u1b80\3\2\2\2\u1b83\u1ba5\5\u03a8\u01d5\2\u1b84\u1b85\5\u03a6"+
		"\u01d4\2\u1b85\u1b86\5\u03be\u01e0\2\u1b86\u1ba5\3\2\2\2\u1b87\u1b88\5"+
		"\u03a6\u01d4\2\u1b88\u1b89\5\u03bc\u01df\2\u1b89\u1b8a\5\u03dc\u01ef\2"+
		"\u1b8a\u1b8b\5\u03c6\u01e4\2\u1b8b\u1ba5\3\2\2\2\u1b8c\u1b8d\5\u03a6\u01d4"+
		"\2\u1b8d\u1b8e\5\u03bc\u01df\2\u1b8e\u1b8f\5\u03c4\u01e3\2\u1b8f\u1b90"+
		"\5\u03de\u01f0\2\u1b90\u1ba5\3\2\2\2\u1b91\u1b92\5\u03aa\u01d6\2\u1b92"+
		"\u1b93\5\u03a6\u01d4\2\u1b93\u1ba5\3\2\2\2\u1b94\u1b95\5\u03aa\u01d6\2"+
		"\u1b95\u1b96\5\u03a6\u01d4\2\u1b96\u1b97\5\u03be\u01e0\2\u1b97\u1ba5\3"+
		"\2\2\2\u1b98\u1b99\5\u03aa\u01d6\2\u1b99\u1b9a\5\u03a6\u01d4\2\u1b9a\u1b9b"+
		"\5\u03bc\u01df\2\u1b9b\u1b9c\5\u03dc\u01ef\2\u1b9c\u1b9d\5\u03c6\u01e4"+
		"\2\u1b9d\u1ba5\3\2\2\2\u1b9e\u1b9f\5\u03aa\u01d6\2\u1b9f\u1ba0\5\u03a6"+
		"\u01d4\2\u1ba0\u1ba1\5\u03bc\u01df\2\u1ba1\u1ba2\5\u03c4\u01e3\2\u1ba2"+
		"\u1ba3\5\u03de\u01f0\2\u1ba3\u1ba5\3\2\2\2\u1ba4\u1b83\3\2\2\2\u1ba4\u1b84"+
		"\3\2\2\2\u1ba4\u1b87\3\2\2\2\u1ba4\u1b8c\3\2\2\2\u1ba4\u1b91\3\2\2\2\u1ba4"+
		"\u1b94\3\2\2\2\u1ba4\u1b98\3\2\2\2\u1ba4\u1b9e\3\2\2\2\u1ba5\u03a5\3\2"+
		"\2\2\u1ba6\u1ba9\5\u03a8\u01d5\2\u1ba7\u1ba9\5\u03a2\u01d2\2\u1ba8\u1ba6"+
		"\3\2\2\2\u1ba8\u1ba7\3\2\2\2\u1ba9\u03a7\3\2\2\2\u1baa\u1bab\b\u01d5\1"+
		"\2\u1bab\u1bac\7\u0195\2\2\u1bac\u1bad\5\u03ba\u01de\2\u1bad\u1bae\5\u04ae"+
		"\u0258\2\u1bae\u1baf\5\u03b2\u01da\2\u1baf\u1bb0\5\u03e8\u01f5\2\u1bb0"+
		"\u1bb1\5\u0400\u0201\2\u1bb1\u1bb2\5\u03d8\u01ed\2\u1bb2\u1bb3\5\u03da"+
		"\u01ee\2\u1bb3\u1bb4\5\u0452\u022a\2\u1bb4\u1bb9\3\2\2\2\u1bb5\u1bb9\5"+
		"\u03e6\u01f4\2\u1bb6\u1bb7\7\u01b3\2\2\u1bb7\u1bb9\5\u03f8\u01fd\2\u1bb8"+
		"\u1baa\3\2\2\2\u1bb8\u1bb5\3\2\2\2\u1bb8\u1bb6\3\2\2\2\u1bb9\u1bd1\3\2"+
		"\2\2\u1bba\u1bbb\f\5\2\2\u1bbb\u1bbc\7\u01cb\2\2\u1bbc\u1bbf\5\u03b8\u01dd"+
		"\2\u1bbd\u1bc0\5\u03a2\u01d2\2\u1bbe\u1bc0\5\u03a8\u01d5\2\u1bbf\u1bbd"+
		"\3\2\2\2\u1bbf\u1bbe\3\2\2\2\u1bc0\u1bd0\3\2\2\2\u1bc1\u1bc2\f\4\2\2\u1bc2"+
		"\u1bc3\7\u0118\2\2\u1bc3\u1bc6\5\u03b8\u01dd\2\u1bc4\u1bc7\5\u03a2\u01d2"+
		"\2\u1bc5\u1bc7\5\u03a8\u01d5\2\u1bc6\u1bc4\3\2\2\2\u1bc6\u1bc5\3\2\2\2"+
		"\u1bc7\u1bd0\3\2\2\2\u1bc8\u1bc9\f\3\2\2\u1bc9\u1bca\7\u00de\2\2\u1bca"+
		"\u1bcd\5\u03b8\u01dd\2\u1bcb\u1bce\5\u03a2\u01d2\2\u1bcc\u1bce\5\u03a8"+
		"\u01d5\2\u1bcd\u1bcb\3\2\2\2\u1bcd\u1bcc\3\2\2\2\u1bce\u1bd0\3\2\2\2\u1bcf"+
		"\u1bba\3\2\2\2\u1bcf\u1bc1\3\2\2\2\u1bcf\u1bc8\3\2\2\2\u1bd0\u1bd3\3\2"+
		"\2\2\u1bd1\u1bcf\3\2\2\2\u1bd1\u1bd2\3\2\2\2\u1bd2\u03a9\3\2\2\2\u1bd3"+
		"\u1bd1\3\2\2\2\u1bd4\u1bd5\7\u01e5\2\2\u1bd5\u1bda\5\u03ac\u01d7\2\u1bd6"+
		"\u1bd7\7\u01e5\2\2\u1bd7\u1bd8\7\u0179\2\2\u1bd8\u1bda\5\u03ac\u01d7\2"+
		"\u1bd9\u1bd4\3\2\2\2\u1bd9\u1bd6\3\2\2\2\u1bda\u03ab\3\2\2\2\u1bdb\u1bdc"+
		"\b\u01d7\1\2\u1bdc\u1bdd\5\u03ae\u01d8\2\u1bdd\u1be3\3\2\2\2\u1bde\u1bdf"+
		"\f\3\2\2\u1bdf\u1be0\7\b\2\2\u1be0\u1be2\5\u03ae\u01d8\2\u1be1\u1bde\3"+
		"\2\2\2\u1be2\u1be5\3\2\2\2\u1be3\u1be1\3\2\2\2\u1be3\u1be4\3\2\2\2\u1be4"+
		"\u03ad\3\2\2\2\u1be5\u1be3\3\2\2\2\u1be6\u1be7\5\u04b8\u025d\2\u1be7\u1be8"+
		"\5\u035a\u01ae\2\u1be8\u1be9\7|\2\2\u1be9\u1bea\7\r\2\2\u1bea\u1beb\5"+
		"\u036c\u01b7\2\u1beb\u1bec\7\7\2\2\u1bec\u03af\3\2\2\2\u1bed\u1bf0\5\u03aa"+
		"\u01d6\2\u1bee\u1bf0\3\2\2\2\u1bef\u1bed\3\2\2\2\u1bef\u1bee\3\2\2\2\u1bf0"+
		"\u03b1\3\2\2\2\u1bf1\u1bf2\7\u011a\2\2\u1bf2\u1bf5\5\u03b4\u01db\2\u1bf3"+
		"\u1bf5\3\2\2\2\u1bf4\u1bf1\3\2\2\2\u1bf4\u1bf3\3\2\2\2\u1bf5\u03b3\3\2"+
		"\2\2\u1bf6\u1bf7\7\u01b8\2\2\u1bf7\u1bf8\5\u03b6\u01dc\2\u1bf8\u1bf9\5"+
		"\u04b4\u025b\2\u1bf9\u1c1a\3\2\2\2\u1bfa\u1bfb\7\u01b6\2\2\u1bfb\u1bfc"+
		"\5\u03b6\u01dc\2\u1bfc\u1bfd\5\u04b4\u025b\2\u1bfd\u1c1a\3\2\2\2\u1bfe"+
		"\u1bff\7\u0130\2\2\u1bff\u1c00\7\u01b8\2\2\u1c00\u1c01\5\u03b6\u01dc\2"+
		"\u1c01\u1c02\5\u04b4\u025b\2\u1c02\u1c1a\3\2\2\2\u1c03\u1c04\7\u0130\2"+
		"\2\u1c04\u1c05\7\u01b6\2\2\u1c05\u1c06\5\u03b6\u01dc\2\u1c06\u1c07\5\u04b4"+
		"\u025b\2\u1c07\u1c1a\3\2\2\2\u1c08\u1c09\7\u00f7\2\2\u1c09\u1c0a\7\u01b8"+
		"\2\2\u1c0a\u1c0b\5\u03b6\u01dc\2\u1c0b\u1c0c\5\u04b4\u025b\2\u1c0c\u1c1a"+
		"\3\2\2\2\u1c0d\u1c0e\7\u00f7\2\2\u1c0e\u1c0f\7\u01b6\2\2\u1c0f\u1c10\5"+
		"\u03b6\u01dc\2\u1c10\u1c11\5\u04b4\u025b\2\u1c11\u1c1a\3\2\2\2\u1c12\u1c13"+
		"\7\u01cf\2\2\u1c13\u1c14\5\u03b6\u01dc\2\u1c14\u1c15\5\u04b4\u025b\2\u1c15"+
		"\u1c1a\3\2\2\2\u1c16\u1c17\7\u01b3\2\2\u1c17\u1c1a\5\u04b4\u025b\2\u1c18"+
		"\u1c1a\5\u04b4\u025b\2\u1c19\u1bf6\3\2\2\2\u1c19\u1bfa\3\2\2\2\u1c19\u1bfe"+
		"\3\2\2\2\u1c19\u1c03\3\2\2\2\u1c19\u1c08\3\2\2\2\u1c19\u1c0d\3\2\2\2\u1c19"+
		"\u1c12\3\2\2\2\u1c19\u1c16\3\2\2\2\u1c19\u1c18\3\2\2\2\u1c1a\u03b5\3\2"+
		"\2\2\u1c1b\u1c1e\7\u01b3\2\2\u1c1c\u1c1e\3\2\2\2\u1c1d\u1c1b\3\2\2\2\u1c1d"+
		"\u1c1c\3\2\2\2\u1c1e\u03b7\3\2\2\2\u1c1f\u1c23\7s\2\2\u1c20\u1c23\7\u00d0"+
		"\2\2\u1c21\u1c23\3\2\2\2\u1c22\u1c1f\3\2\2\2\u1c22\u1c20\3\2\2\2\u1c22"+
		"\u1c21\3\2\2\2\u1c23\u03b9\3\2\2\2\u1c24\u1c2e\7\u00d0\2\2\u1c25\u1c26"+
		"\7\u00d0\2\2\u1c26\u1c27\7\u0153\2\2\u1c27\u1c28\7\r\2\2\u1c28\u1c29\5"+
		"\u0474\u023b\2\u1c29\u1c2a\7\7\2\2\u1c2a\u1c2e\3\2\2\2\u1c2b\u1c2e\7s"+
		"\2\2\u1c2c\u1c2e\3\2\2\2\u1c2d\u1c24\3\2\2\2\u1c2d\u1c25\3\2\2\2\u1c2d"+
		"\u1c2b\3\2\2\2\u1c2d\u1c2c\3\2\2\2\u1c2e\u03bb\3\2\2\2\u1c2f\u1c32\5\u03be"+
		"\u01e0\2\u1c30\u1c32\3\2\2\2\u1c31\u1c2f\3\2\2\2\u1c31\u1c30\3\2\2\2\u1c32"+
		"\u03bd\3\2\2\2\u1c33\u1c34\7\u0159\2\2\u1c34\u1c35\7\u008d\2\2\u1c35\u1c36"+
		"\5\u03c0\u01e1\2\u1c36\u03bf\3\2\2\2\u1c37\u1c38\b\u01e1\1\2\u1c38\u1c39"+
		"\5\u03c2\u01e2\2\u1c39\u1c3f\3\2\2\2\u1c3a\u1c3b\f\3\2\2\u1c3b\u1c3c\7"+
		"\b\2\2\u1c3c\u1c3e\5\u03c2\u01e2\2\u1c3d\u1c3a\3\2\2\2\u1c3e\u1c41\3\2"+
		"\2\2\u1c3f\u1c3d\3\2\2\2\u1c3f\u1c40\3\2\2\2\u1c40\u03c1\3\2\2\2\u1c41"+
		"\u1c3f\3\2\2\2\u1c42\u1c43\5\u043a\u021e\2\u1c43\u1c44\7\u01d3\2\2\u1c44"+
		"\u1c45\5\u0470\u0239\2\u1c45\u1c46\5\u02aa\u0156\2\u1c46\u1c4c\3\2\2\2"+
		"\u1c47\u1c48\5\u043a\u021e\2\u1c48\u1c49\5\u02a8\u0155\2\u1c49\u1c4a\5"+
		"\u02aa\u0156\2\u1c4a\u1c4c\3\2\2\2\u1c4b\u1c42\3\2\2\2\u1c4b\u1c47\3\2"+
		"\2\2\u1c4c\u03c3\3\2\2\2\u1c4d\u1c4e\5\u03c8\u01e5\2\u1c4e\u1c4f\5\u03ca"+
		"\u01e6\2\u1c4f\u1c56\3\2\2\2\u1c50\u1c51\5\u03ca\u01e6\2\u1c51\u1c52\5"+
		"\u03c8\u01e5\2\u1c52\u1c56\3\2\2\2\u1c53\u1c56\5\u03c8\u01e5\2\u1c54\u1c56"+
		"\5\u03ca\u01e6\2\u1c55\u1c4d\3\2\2\2\u1c55\u1c50\3\2\2\2\u1c55\u1c53\3"+
		"\2\2\2\u1c55\u1c54\3\2\2\2\u1c56\u03c5\3\2";
	private static final String _serializedATNSegment3 =
		"\2\2\u1c57\u1c5a\5\u03c4\u01e3\2\u1c58\u1c5a\3\2\2\2\u1c59\u1c57\3\2\2"+
		"\2\u1c59\u1c58\3\2\2\2\u1c5a\u03c7\3\2\2\2\u1c5b\u1c5c\7\u012d\2\2\u1c5c"+
		"\u1c69\5\u03cc\u01e7\2\u1c5d\u1c5e\7\u012d\2\2\u1c5e\u1c5f\5\u03cc\u01e7"+
		"\2\u1c5f\u1c60\7\b\2\2\u1c60\u1c61\5\u03ce\u01e8\2\u1c61\u1c69\3\2\2\2"+
		"\u1c62\u1c63\7\u00ea\2\2\u1c63\u1c64\5\u03d6\u01ec\2\u1c64\u1c65\5\u03d0"+
		"\u01e9\2\u1c65\u1c66\5\u03d4\u01eb\2\u1c66\u1c67\7\u0154\2\2\u1c67\u1c69"+
		"\3\2\2\2\u1c68\u1c5b\3\2\2\2\u1c68\u1c5d\3\2\2\2\u1c68\u1c62\3\2\2\2\u1c69"+
		"\u03c9\3\2\2\2\u1c6a\u1c6b\7\u0151\2\2\u1c6b\u1c71\5\u03ce\u01e8\2\u1c6c"+
		"\u1c6d\7\u0151\2\2\u1c6d\u1c6e\5\u03d2\u01ea\2\u1c6e\u1c6f\5\u03d4\u01eb"+
		"\2\u1c6f\u1c71\3\2\2\2\u1c70\u1c6a\3\2\2\2\u1c70\u1c6c\3\2\2\2\u1c71\u03cb"+
		"\3\2\2\2\u1c72\u1c75\5\u043a\u021e\2\u1c73\u1c75\7s\2\2\u1c74\u1c72\3"+
		"\2\2\2\u1c74\u1c73\3\2\2\2\u1c75\u03cd\3\2\2\2\u1c76\u1c77\5\u043a\u021e"+
		"\2\u1c77\u03cf\3\2\2\2\u1c78\u1c7f\5\u04ce\u0268\2\u1c79\u1c7a\7\r\2\2"+
		"\u1c7a\u1c7b\5\u043a\u021e\2\u1c7b\u1c7c\7\7\2\2\u1c7c\u1c7f\3\2\2\2\u1c7d"+
		"\u1c7f\3\2\2\2\u1c7e\u1c78\3\2\2\2\u1c7e\u1c79\3\2\2\2\u1c7e\u1c7d\3\2"+
		"\2\2\u1c7f\u03d1\3\2\2\2\u1c80\u1c81\5\u043e\u0220\2\u1c81\u03d3\3\2\2"+
		"\2\u1c82\u1c83\t\23\2\2\u1c83\u03d5\3\2\2\2\u1c84\u1c85\t\24\2\2\u1c85"+
		"\u03d7\3\2\2\2\u1c86\u1c87\7\u00fb\2\2\u1c87\u1c88\7\u008d\2\2\u1c88\u1c8b"+
		"\5\u0474\u023b\2\u1c89\u1c8b\3\2\2\2\u1c8a\u1c86\3\2\2\2\u1c8a\u1c89\3"+
		"\2\2\2\u1c8b\u03d9\3\2\2\2\u1c8c\u1c8d\7\u00fd\2\2\u1c8d\u1c90\5\u043a"+
		"\u021e\2\u1c8e\u1c90\3\2\2\2\u1c8f\u1c8c\3\2\2\2\u1c8f\u1c8e\3\2\2\2\u1c90"+
		"\u03db\3\2\2\2\u1c91\u1c96\5\u03e0\u01f1\2\u1c92\u1c93\7\u00ee\2\2\u1c93"+
		"\u1c94\7\u0175\2\2\u1c94\u1c96\7\u0154\2\2\u1c95\u1c91\3\2\2\2\u1c95\u1c92"+
		"\3\2\2\2\u1c96\u03dd\3\2\2\2\u1c97\u1c9a\5\u03dc\u01ef\2\u1c98\u1c9a\3"+
		"\2\2\2\u1c99\u1c97\3\2\2\2\u1c99\u1c98\3\2\2\2\u1c9a\u03df\3\2\2\2\u1c9b"+
		"\u1c9c\b\u01f1\1\2\u1c9c\u1c9d\5\u03e2\u01f2\2\u1c9d\u1ca2\3\2\2\2\u1c9e"+
		"\u1c9f\f\3\2\2\u1c9f\u1ca1\5\u03e2\u01f2\2\u1ca0\u1c9e\3\2\2\2\u1ca1\u1ca4"+
		"\3\2\2\2\u1ca2\u1ca0\3\2\2\2\u1ca2\u1ca3\3\2\2\2\u1ca3\u03e1\3\2\2\2\u1ca4"+
		"\u1ca2\3\2\2\2\u1ca5\u1ca6\7\u00ee\2\2\u1ca6\u1ca7\7\u01d1\2\2\u1ca7\u1ca8"+
		"\5\u03e4\u01f3\2\u1ca8\u1ca9\5\u0388\u01c5\2\u1ca9\u1cb0\3\2\2\2\u1caa"+
		"\u1cab\7\u00ee\2\2\u1cab\u1cac\7\u019e\2\2\u1cac\u1cad\5\u03e4\u01f3\2"+
		"\u1cad\u1cae\5\u0388\u01c5\2\u1cae\u1cb0\3\2\2\2\u1caf\u1ca5\3\2\2\2\u1caf"+
		"\u1caa\3\2\2\2\u1cb0\u03e3\3\2\2\2\u1cb1\u1cb2\7\u014f\2\2\u1cb2\u1cb5"+
		"\5\u04b2\u025a\2\u1cb3\u1cb5\3\2\2\2\u1cb4\u1cb1\3\2\2\2\u1cb4\u1cb3\3"+
		"\2\2\2\u1cb5\u03e5\3\2\2\2\u1cb6\u1cb7\b\u01f4\1\2\u1cb7\u1cb8\7\u01d9"+
		"\2\2\u1cb8\u1cb9\5\u04ac\u0257\2\u1cb9\u1cbf\3\2\2\2\u1cba\u1cbb\f\3\2"+
		"\2\u1cbb\u1cbc\7\b\2\2\u1cbc\u1cbe\5\u04ac\u0257\2\u1cbd\u1cba\3\2\2\2"+
		"\u1cbe\u1cc1\3\2\2\2\u1cbf\u1cbd\3\2\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u03e7"+
		"\3\2\2\2\u1cc1\u1cbf\3\2\2\2\u1cc2\u1cc3\7\u00f3\2\2\u1cc3\u1cc6\5\u03ea"+
		"\u01f6\2\u1cc4\u1cc6\3\2\2\2\u1cc5\u1cc2\3\2\2\2\u1cc5\u1cc4\3\2\2\2\u1cc6"+
		"\u03e9\3\2\2\2\u1cc7\u1cc8\b\u01f6\1\2\u1cc8\u1cc9\5\u03ec\u01f7\2\u1cc9"+
		"\u1ccf\3\2\2\2\u1cca\u1ccb\f\3\2\2\u1ccb\u1ccc\7\b\2\2\u1ccc\u1cce\5\u03ec"+
		"\u01f7\2\u1ccd\u1cca\3\2\2\2\u1cce\u1cd1\3\2\2\2\u1ccf\u1ccd\3\2\2\2\u1ccf"+
		"\u1cd0\3\2\2\2\u1cd0\u03eb\3\2\2\2\u1cd1\u1ccf\3\2\2\2\u1cd2\u1cd5\5\u03f0"+
		"\u01f9\2\u1cd3\u1cd5\5\u03ee\u01f8\2\u1cd4\u1cd2\3\2\2\2\u1cd4\u1cd3\3"+
		"\2\2\2\u1cd5\u03ed\3\2\2\2\u1cd6\u1cf6\5\u03f8\u01fd\2\u1cd7\u1cd8\5\u03f8"+
		"\u01fd\2\u1cd8\u1cd9\5\u03f2\u01fa\2\u1cd9\u1cf6\3\2\2\2\u1cda\u1cf6\5"+
		"\u03fe\u0200\2\u1cdb\u1cdc\5\u03fe\u0200\2\u1cdc\u1cdd\5\u03f2\u01fa\2"+
		"\u1cdd\u1cf6\3\2\2\2\u1cde\u1cdf\5\u03fe\u0200\2\u1cdf\u1ce0\7|\2\2\u1ce0"+
		"\u1ce1\7\r\2\2\u1ce1\u1ce2\5\u0406\u0204\2\u1ce2\u1ce3\7\7\2\2\u1ce3\u1cf6"+
		"\3\2\2\2\u1ce4\u1ce5\5\u03fe\u0200\2\u1ce5\u1ce6\7|\2\2\u1ce6\u1ce7\5"+
		"\u04d0\u0269\2\u1ce7\u1ce8\7\r\2\2\u1ce8\u1ce9\5\u0406\u0204\2\u1ce9\u1cea"+
		"\7\7\2\2\u1cea\u1cf6\3\2\2\2\u1ceb\u1cec\5\u03fe\u0200\2\u1cec\u1ced\5"+
		"\u04d0\u0269\2\u1ced\u1cee\7\r\2\2\u1cee\u1cef\5\u0406\u0204\2\u1cef\u1cf0"+
		"\7\7\2\2\u1cf0\u1cf6\3\2\2\2\u1cf1\u1cf6\5\u03a2\u01d2\2\u1cf2\u1cf3\5"+
		"\u03a2\u01d2\2\u1cf3\u1cf4\5\u03f2\u01fa\2\u1cf4\u1cf6\3\2\2\2\u1cf5\u1cd6"+
		"\3\2\2\2\u1cf5\u1cd7\3\2\2\2\u1cf5\u1cda\3\2\2\2\u1cf5\u1cdb\3\2\2\2\u1cf5"+
		"\u1cde\3\2\2\2\u1cf5\u1ce4\3\2\2\2\u1cf5\u1ceb\3\2\2\2\u1cf5\u1cf1\3\2"+
		"\2\2\u1cf5\u1cf2\3\2\2\2\u1cf6\u03ef\3\2\2\2\u1cf7\u1cf8\7\r\2\2\u1cf8"+
		"\u1cf9\5\u03f0\u01f9\2\u1cf9\u1cfb\7\7\2\2\u1cfa\u1cfc\5\u03f2\u01fa\2"+
		"\u1cfb\u1cfa\3\2\2\2\u1cfb\u1cfc\3\2\2\2\u1cfc\u1d19\3\2\2\2\u1cfd\u1cfe"+
		"\5\u03ee\u01f8\2\u1cfe\u1cff\7\u00b1\2\2\u1cff\u1d00\7\u011f\2\2\u1d00"+
		"\u1d01\5\u03ee\u01f8\2\u1d01\u1d19\3\2\2\2\u1d02\u1d03\5\u03ee\u01f8\2"+
		"\u1d03\u1d04\5\u03f4\u01fb\2\u1d04\u1d05\7\u011f\2\2\u1d05\u1d06\5\u03ee"+
		"\u01f8\2\u1d06\u1d07\5\u03f6\u01fc\2\u1d07\u1d19\3\2\2\2\u1d08\u1d09\5"+
		"\u03ee\u01f8\2\u1d09\u1d0a\7\u011f\2\2\u1d0a\u1d0b\5\u03ee\u01f8\2\u1d0b"+
		"\u1d0c\5\u03f6\u01fc\2\u1d0c\u1d19\3\2\2\2\u1d0d\u1d0e\5\u03ee\u01f8\2"+
		"\u1d0e\u1d0f\7\u0140\2\2\u1d0f\u1d10\5\u03f4\u01fb\2\u1d10\u1d11\7\u011f"+
		"\2\2\u1d11\u1d12\5\u03ee\u01f8\2\u1d12\u1d19\3\2\2\2\u1d13\u1d14\5\u03ee"+
		"\u01f8\2\u1d14\u1d15\7\u0140\2\2\u1d15\u1d16\7\u011f\2\2\u1d16\u1d17\5"+
		"\u03ee\u01f8\2\u1d17\u1d19\3\2\2\2\u1d18\u1cf7\3\2\2\2\u1d18\u1cfd\3\2"+
		"\2\2\u1d18\u1d02\3\2\2\2\u1d18\u1d08\3\2\2\2\u1d18\u1d0d\3\2\2\2\u1d18"+
		"\u1d13\3\2\2\2\u1d19\u03f1\3\2\2\2\u1d1a\u1d1b\7|\2\2\u1d1b\u1d1c\5\u04d0"+
		"\u0269\2\u1d1c\u1d1d\7\r\2\2\u1d1d\u1d1e\5\u04b6\u025c\2\u1d1e\u1d1f\7"+
		"\7\2\2\u1d1f\u1d29\3\2\2\2\u1d20\u1d21\7|\2\2\u1d21\u1d29\5\u04d0\u0269"+
		"\2\u1d22\u1d23\5\u04d0\u0269\2\u1d23\u1d24\7\r\2\2\u1d24\u1d25\5\u04b6"+
		"\u025c\2\u1d25\u1d26\7\7\2\2\u1d26\u1d29\3\2\2\2\u1d27\u1d29\5\u04d0\u0269"+
		"\2\u1d28\u1d1a\3\2\2\2\u1d28\u1d20\3\2\2\2\u1d28\u1d22\3\2\2\2\u1d28\u1d27"+
		"\3\2\2\2\u1d29\u03f3\3\2\2\2\u1d2a\u1d2c\7\u00f4\2\2\u1d2b\u1d2d\7\u015b"+
		"\2\2\u1d2c\u1d2b\3\2\2\2\u1d2c\u1d2d\3\2\2\2\u1d2d\u1d38\3\2\2\2\u1d2e"+
		"\u1d30\7\u012a\2\2\u1d2f\u1d31\7\u015b\2\2\u1d30\u1d2f\3\2\2\2\u1d30\u1d31"+
		"\3\2\2\2\u1d31\u1d38\3\2\2\2\u1d32\u1d34\7\u0189\2\2\u1d33\u1d35\7\u015b"+
		"\2\2\u1d34\u1d33\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d38\3\2\2\2\u1d36"+
		"\u1d38\7\u0110\2\2\u1d37\u1d2a\3\2\2\2\u1d37\u1d2e\3\2\2\2\u1d37\u1d32"+
		"\3\2\2\2\u1d37\u1d36\3\2\2\2\u1d38\u03f5\3\2\2\2\u1d39\u1d3a\7\u01d3\2"+
		"\2\u1d3a\u1d3b\7\r\2\2\u1d3b\u1d3c\5\u04b6\u025c\2\u1d3c\u1d3d\7\7\2\2"+
		"\u1d3d\u1d41\3\2\2\2\u1d3e\u1d3f\7\u0153\2\2\u1d3f\u1d41\5\u043a\u021e"+
		"\2\u1d40\u1d39\3\2\2\2\u1d40\u1d3e\3\2\2\2\u1d41\u03f7\3\2\2\2\u1d42\u1d4e"+
		"\5\u04b4\u025b\2\u1d43\u1d44\5\u04b4\u025b\2\u1d44\u1d45\7\13\2\2\u1d45"+
		"\u1d4e\3\2\2\2\u1d46\u1d47\7\u0154\2\2\u1d47\u1d4e\5\u04b4\u025b\2\u1d48"+
		"\u1d49\7\u0154\2\2\u1d49\u1d4a\7\r\2\2\u1d4a\u1d4b\5\u04b4\u025b\2\u1d4b"+
		"\u1d4c\7\7\2\2\u1d4c\u1d4e\3\2\2\2\u1d4d\u1d42\3\2\2\2\u1d4d\u1d43\3\2"+
		"\2\2\u1d4d\u1d46\3\2\2\2\u1d4d\u1d48\3\2\2\2\u1d4e\u03f9\3\2\2\2\u1d4f"+
		"\u1d50\b\u01fe\1\2\u1d50\u1d51\5\u03f8\u01fd\2\u1d51\u1d57\3\2\2\2\u1d52"+
		"\u1d53\f\3\2\2\u1d53\u1d54\7\b\2\2\u1d54\u1d56\5\u03f8\u01fd\2\u1d55\u1d52"+
		"\3\2\2\2\u1d56\u1d59\3\2\2\2\u1d57\u1d55\3\2\2\2\u1d57\u1d58\3\2\2\2\u1d58"+
		"\u03fb\3\2\2\2\u1d59\u1d57\3\2\2\2\u1d5a\u1d63\5\u03f8\u01fd\2\u1d5b\u1d5c"+
		"\5\u03f8\u01fd\2\u1d5c\u1d5d\5\u04d0\u0269\2\u1d5d\u1d63\3\2\2\2\u1d5e"+
		"\u1d5f\5\u03f8\u01fd\2\u1d5f\u1d60\7|\2\2\u1d60\u1d61\5\u04d0\u0269\2"+
		"\u1d61\u1d63\3\2\2\2\u1d62\u1d5a\3\2\2\2\u1d62\u1d5b\3\2\2\2\u1d62\u1d5e"+
		"\3\2\2\2\u1d63\u03fd\3\2\2\2\u1d64\u1d65\5\u0440\u0221\2\u1d65\u03ff\3"+
		"\2\2\2\u1d66\u1d67\7\u01e2\2\2\u1d67\u1d6a\5\u043a\u021e\2\u1d68\u1d6a"+
		"\3\2\2\2\u1d69\u1d66\3\2\2\2\u1d69\u1d68\3\2\2\2\u1d6a\u0401\3\2\2\2\u1d6b"+
		"\u1d6c\7\u01e2\2\2\u1d6c\u1d73\5\u043a\u021e\2\u1d6d\u1d6e\7\u01e2\2\2"+
		"\u1d6e\u1d6f\7\u00b3\2\2\u1d6f\u1d70\7\u014f\2\2\u1d70\u1d73\5\u039a\u01ce"+
		"\2\u1d71\u1d73\3\2\2\2\u1d72\u1d6b\3\2\2\2\u1d72\u1d6d\3\2\2\2\u1d72\u1d71"+
		"\3\2\2\2\u1d73\u0403\3\2\2\2\u1d74\u1d77\5\u0406\u0204\2\u1d75\u1d77\3"+
		"\2\2\2\u1d76\u1d74\3\2\2\2\u1d76\u1d75\3\2\2\2\u1d77\u0405\3\2\2\2\u1d78"+
		"\u1d79\b\u0204\1\2\u1d79\u1d7a\5\u0408\u0205\2\u1d7a\u1d80\3\2\2\2\u1d7b"+
		"\u1d7c\f\3\2\2\u1d7c\u1d7d\7\b\2\2\u1d7d\u1d7f\5\u0408\u0205\2\u1d7e\u1d7b"+
		"\3\2\2\2\u1d7f\u1d82\3\2\2\2\u1d80\u1d7e\3\2\2\2\u1d80\u1d81\3\2\2\2\u1d81"+
		"\u0407\3\2\2\2\u1d82\u1d80\3\2\2\2\u1d83\u1d84\5\u04d0\u0269\2\u1d84\u1d85"+
		"\5\u040a\u0206\2\u1d85\u1d86\5\u0104\u0083\2\u1d86\u0409\3\2\2\2\u1d87"+
		"\u1d88\5\u040e\u0208\2\u1d88\u1d89\5\u040c\u0207\2\u1d89\u1da3\3\2\2\2"+
		"\u1d8a\u1d8b\7\u019d\2\2\u1d8b\u1d8c\5\u040e\u0208\2\u1d8c\u1d8d\5\u040c"+
		"\u0207\2\u1d8d\u1da3\3\2\2\2\u1d8e\u1d8f\5\u040e\u0208\2\u1d8f\u1d90\7"+
		"{\2\2\u1d90\u1d91\7\f\2\2\u1d91\u1d92\5\u04c8\u0265\2\u1d92\u1d93\7\3"+
		"\2\2\u1d93\u1da3\3\2\2\2\u1d94\u1d95\7\u019d\2\2\u1d95\u1d96\5\u040e\u0208"+
		"\2\u1d96\u1d97\7{\2\2\u1d97\u1d98\7\f\2\2\u1d98\u1d99\5\u04c8\u0265\2"+
		"\u1d99\u1d9a\7\3\2\2\u1d9a\u1da3\3\2\2\2\u1d9b\u1d9c\5\u040e\u0208\2\u1d9c"+
		"\u1d9d\7{\2\2\u1d9d\u1da3\3\2\2\2\u1d9e\u1d9f\7\u019d\2\2\u1d9f\u1da0"+
		"\5\u040e\u0208\2\u1da0\u1da1\7{\2\2\u1da1\u1da3\3\2\2\2\u1da2\u1d87\3"+
		"\2\2\2\u1da2\u1d8a\3\2\2\2\u1da2\u1d8e\3\2\2\2\u1da2\u1d94\3\2\2\2\u1da2"+
		"\u1d9b\3\2\2\2\u1da2\u1d9e\3\2\2\2\u1da3\u040b\3\2\2\2\u1da4\u1daf\b\u0207"+
		"\1\2\u1da5\u1da6\f\5\2\2\u1da6\u1da7\7\f\2\2\u1da7\u1dae\7\3\2\2\u1da8"+
		"\u1da9\f\4\2\2\u1da9\u1daa\7\f\2\2\u1daa\u1dab\5\u04c8\u0265\2\u1dab\u1dac"+
		"\7\3\2\2\u1dac\u1dae\3\2\2\2\u1dad\u1da5\3\2\2\2\u1dad\u1da8\3\2\2\2\u1dae"+
		"\u1db1\3\2\2\2\u1daf\u1dad\3\2\2\2\u1daf\u1db0\3\2\2\2\u1db0\u040d\3\2"+
		"\2\2\u1db1\u1daf\3\2\2\2\u1db2\u1dc1\5\u0412\u020a\2\u1db3\u1dc1\5\u0416"+
		"\u020c\2\u1db4\u1dc1\5\u041a\u020e\2\u1db5\u1dc1\5\u0422\u0212\2\u1db6"+
		"\u1dc1\5\u0430\u0219\2\u1db7\u1db8\5\u0432\u021a\2\u1db8\u1db9\5\u0436"+
		"\u021c\2\u1db9\u1dc1\3\2\2\2\u1dba\u1dbb\5\u0432\u021a\2\u1dbb\u1dbc\7"+
		"\r\2\2\u1dbc\u1dbd\5\u04c8\u0265\2\u1dbd\u1dbe\7\7\2\2\u1dbe\u1dbf\5\u0436"+
		"\u021c\2\u1dbf\u1dc1\3\2\2\2\u1dc0\u1db2\3\2\2\2\u1dc0\u1db3\3\2\2\2\u1dc0"+
		"\u1db4\3\2\2\2\u1dc0\u1db5\3\2\2\2\u1dc0\u1db6\3\2\2\2\u1dc0\u1db7\3\2"+
		"\2\2\u1dc0\u1dba\3\2\2\2\u1dc1\u040f\3\2\2\2\u1dc2\u1dc7\5\u0416\u020c"+
		"\2\u1dc3\u1dc7\5\u041c\u020f\2\u1dc4\u1dc7\5\u0424\u0213\2\u1dc5\u1dc7"+
		"\5\u0430\u0219\2\u1dc6\u1dc2\3\2\2\2\u1dc6\u1dc3\3\2\2\2\u1dc6\u1dc4\3"+
		"\2\2\2\u1dc6\u1dc5\3\2\2\2\u1dc7\u0411\3\2\2\2\u1dc8\u1dc9\5\u04d2\u026a"+
		"\2\u1dc9\u1dca\5\u0414\u020b\2\u1dca\u1dd0\3\2\2\2\u1dcb\u1dcc\5\u04d2"+
		"\u026a\2\u1dcc\u1dcd\5\u0252\u012a\2\u1dcd\u1dce\5\u0414\u020b\2\u1dce"+
		"\u1dd0\3\2\2\2\u1dcf\u1dc8\3\2\2\2\u1dcf\u1dcb\3\2\2\2\u1dd0\u0413\3\2"+
		"\2\2\u1dd1\u1dd2\7\r\2\2\u1dd2\u1dd3\5\u0474\u023b\2\u1dd3\u1dd4\7\7\2"+
		"\2\u1dd4\u1dd7\3\2\2\2\u1dd5\u1dd7\3\2\2\2\u1dd6\u1dd1\3\2\2\2\u1dd6\u1dd5"+
		"\3\2\2\2\u1dd7\u0415\3\2\2\2\u1dd8\u1de9\7\u0116\2\2\u1dd9\u1de9\7\u0117"+
		"\2\2\u1dda\u1de9\7\u01a2\2\2\u1ddb\u1de9\7\u0088\2\2\u1ddc\u1de9\7\u0176"+
		"\2\2\u1ddd\u1dde\7\u00ec\2\2\u1dde\u1de9\5\u0418\u020d\2\u1ddf\u1de0\7"+
		"\u00d4\2\2\u1de0\u1de9\7\u016a\2\2\u1de1\u1de2\7\u00c2\2\2\u1de2\u1de9"+
		"\5\u0414\u020b\2\u1de3\u1de4\7\u00c1\2\2\u1de4\u1de9\5\u0414\u020b\2\u1de5"+
		"\u1de6\7\u014d\2\2\u1de6\u1de9\5\u0414\u020b\2\u1de7\u1de9\7\u008b\2\2"+
		"\u1de8\u1dd8\3\2\2\2\u1de8\u1dd9\3\2\2\2\u1de8\u1dda\3\2\2\2\u1de8\u1ddb"+
		"\3\2\2\2\u1de8\u1ddc\3\2\2\2\u1de8\u1ddd\3\2\2\2\u1de8\u1ddf\3\2\2\2\u1de8"+
		"\u1de1\3\2\2\2\u1de8\u1de3\3\2\2\2\u1de8\u1de5\3\2\2\2\u1de8\u1de7\3\2"+
		"\2\2\u1de9\u0417\3\2\2\2\u1dea\u1deb\7\r\2\2\u1deb\u1dec\5\u04c8\u0265"+
		"\2\u1dec\u1ded\7\7\2\2\u1ded\u1df0\3\2\2\2\u1dee\u1df0\3\2\2\2\u1def\u1dea"+
		"\3\2\2\2\u1def\u1dee\3\2\2\2\u1df0\u0419\3\2\2\2\u1df1\u1df4\5\u041e\u0210"+
		"\2\u1df2\u1df4\5\u0420\u0211\2\u1df3\u1df1\3\2\2\2\u1df3\u1df2\3\2\2\2"+
		"\u1df4\u041b\3\2\2\2\u1df5\u1df8\5\u041e\u0210\2\u1df6\u1df8\5\u0420\u0211"+
		"\2\u1df7\u1df5\3\2\2\2\u1df7\u1df6\3\2\2\2\u1df8\u041d\3\2\2\2\u1df9\u1dfa"+
		"\7\u008a\2\2\u1dfa\u1dfb\5\u042c\u0217\2\u1dfb\u1dfc\7\r\2\2\u1dfc\u1dfd"+
		"\5\u0474\u023b\2\u1dfd\u1dfe\7\7\2\2\u1dfe\u041f\3\2\2\2\u1dff\u1e00\7"+
		"\u008a\2\2\u1e00\u1e01\5\u042c\u0217\2\u1e01\u0421\3\2\2\2\u1e02\u1e05"+
		"\5\u0426\u0214\2\u1e03\u1e05\5\u0428\u0215\2\u1e04\u1e02\3\2\2\2\u1e04"+
		"\u1e03\3\2\2\2\u1e05\u0423\3\2\2\2\u1e06\u1e09\5\u0426\u0214\2\u1e07\u1e09"+
		"\5\u0428\u0215\2\u1e08\u1e06\3\2\2\2\u1e08\u1e07\3\2\2\2\u1e09\u0425\3"+
		"\2\2\2\u1e0a\u1e0b\5\u042a\u0216\2\u1e0b\u1e0c\7\r\2\2\u1e0c\u1e0d\5\u04c8"+
		"\u0265\2\u1e0d\u1e0e\7\7\2\2\u1e0e\u1e0f\5\u042e\u0218\2\u1e0f\u0427\3"+
		"\2\2\2\u1e10\u1e11\5\u042a\u0216\2\u1e11\u1e12\5\u042e\u0218\2\u1e12\u0429"+
		"\3\2\2\2\u1e13\u1e14\7\u0097\2\2\u1e14\u1e21\5\u042c\u0217\2\u1e15\u1e16"+
		"\7\u0096\2\2\u1e16\u1e21\5\u042c\u0217\2\u1e17\u1e21\7\u01da\2\2\u1e18"+
		"\u1e19\7\u013f\2\2\u1e19\u1e1a\7\u0097\2\2\u1e1a\u1e21\5\u042c\u0217\2"+
		"\u1e1b\u1e1c\7\u013f\2\2\u1e1c\u1e1d\7\u0096\2\2\u1e1d\u1e21\5\u042c\u0217"+
		"\2\u1e1e\u1e1f\7\u0141\2\2\u1e1f\u1e21\5\u042c\u0217\2\u1e20\u1e13\3\2"+
		"\2\2\u1e20\u1e15\3\2\2\2\u1e20\u1e17\3\2\2\2\u1e20\u1e18\3\2\2\2\u1e20"+
		"\u1e1b\3\2\2\2\u1e20\u1e1e\3\2\2\2\u1e21\u042b\3\2\2\2\u1e22\u1e25\7\u01dc"+
		"\2\2\u1e23\u1e25\3\2\2\2\u1e24\u1e22\3\2\2\2\u1e24\u1e23\3\2\2\2\u1e25"+
		"\u042d\3\2\2\2\u1e26\u1e27\7\u0097\2\2\u1e27\u1e28\7\u019c\2\2\u1e28\u1e2b"+
		"\5\u04d0\u0269\2\u1e29\u1e2b\3\2\2\2\u1e2a\u1e26\3\2\2\2\u1e2a\u1e29\3"+
		"\2\2\2\u1e2b\u042f\3\2\2\2\u1e2c\u1e2d\7\u01bc\2\2\u1e2d\u1e2e\7\r\2\2"+
		"\u1e2e\u1e2f\5\u04c8\u0265\2\u1e2f\u1e30\7\7\2\2\u1e30\u1e31\5\u0434\u021b"+
		"\2\u1e31\u1e3d\3\2\2\2\u1e32\u1e33\7\u01bc\2\2\u1e33\u1e3d\5\u0434\u021b"+
		"\2\u1e34\u1e35\7\u01bb\2\2\u1e35\u1e36\7\r\2\2\u1e36\u1e37\5\u04c8\u0265"+
		"\2\u1e37\u1e38\7\7\2\2\u1e38\u1e39\5\u0434\u021b\2\u1e39\u1e3d\3\2\2\2"+
		"\u1e3a\u1e3b\7\u01bb\2\2\u1e3b\u1e3d\5\u0434\u021b\2\u1e3c\u1e2c\3\2\2"+
		"\2\u1e3c\u1e32\3\2\2\2\u1e3c\u1e34\3\2\2\2\u1e3c\u1e3a\3\2\2\2\u1e3d\u0431"+
		"\3\2\2\2\u1e3e\u1e3f\7\u0119\2\2\u1e3f\u0433\3\2\2\2\u1e40\u1e41\7\u022a"+
		"\2\2\u1e41\u1e47\7\u01f6\2\2\u1e42\u1e43\7\u01e6\2\2\u1e43\u1e44\7\u01bb"+
		"\2\2\u1e44\u1e47\7\u01f6\2\2\u1e45\u1e47\3\2\2\2\u1e46\u1e40\3\2\2\2\u1e46"+
		"\u1e42\3\2\2\2\u1e46\u1e45\3\2\2\2\u1e47\u0435\3\2\2\2\u1e48\u1e65\7\u01f4"+
		"\2\2\u1e49\u1e65\7\u013b\2\2\u1e4a\u1e65\7\u00bf\2\2\u1e4b\u1e65\7\u0100"+
		"\2\2\u1e4c\u1e65\7\u0138\2\2\u1e4d\u1e65\5\u0438\u021d\2\u1e4e\u1e4f\7"+
		"\u01f4\2\2\u1e4f\u1e50\7\u01bd\2\2\u1e50\u1e65\7\u013b\2\2\u1e51\u1e52"+
		"\7\u00bf\2\2\u1e52\u1e53\7\u01bd\2\2\u1e53\u1e65\7\u0100\2\2\u1e54\u1e55"+
		"\7\u00bf\2\2\u1e55\u1e56\7\u01bd\2\2\u1e56\u1e65\7\u0138\2\2\u1e57\u1e58"+
		"\7\u00bf\2\2\u1e58\u1e59\7\u01bd\2\2\u1e59\u1e65\5\u0438\u021d\2\u1e5a"+
		"\u1e5b\7\u0100\2\2\u1e5b\u1e5c\7\u01bd\2\2\u1e5c\u1e65\7\u0138\2\2\u1e5d"+
		"\u1e5e\7\u0100\2\2\u1e5e\u1e5f\7\u01bd\2\2\u1e5f\u1e65\5\u0438\u021d\2"+
		"\u1e60\u1e61\7\u0138\2\2\u1e61\u1e62\7\u01bd\2\2\u1e62\u1e65\5\u0438\u021d"+
		"\2\u1e63\u1e65\3\2\2\2\u1e64\u1e48\3\2\2\2\u1e64\u1e49\3\2\2\2\u1e64\u1e4a"+
		"\3\2\2\2\u1e64\u1e4b\3\2\2\2\u1e64\u1e4c\3\2\2\2\u1e64\u1e4d\3\2\2\2\u1e64"+
		"\u1e4e\3\2\2\2\u1e64\u1e51\3\2\2\2\u1e64\u1e54\3\2\2\2\u1e64\u1e57\3\2"+
		"\2\2\u1e64\u1e5a\3\2\2\2\u1e64\u1e5d\3\2\2\2\u1e64\u1e60\3\2\2\2\u1e64"+
		"\u1e63\3\2\2\2\u1e65\u0437\3\2\2\2\u1e66\u1e6d\7\u0193\2\2\u1e67\u1e68"+
		"\7\u0193\2\2\u1e68\u1e69\7\r\2\2\u1e69\u1e6a\5\u04c8\u0265\2\u1e6a\u1e6b"+
		"\7\7\2\2\u1e6b\u1e6d\3\2\2\2\u1e6c\u1e66\3\2\2\2\u1e6c\u1e67\3\2\2\2\u1e6d"+
		"\u0439\3\2\2\2\u1e6e\u1e6f\b\u021e\1\2\u1e6f\u1e70\7\t\2\2\u1e70\u1e80"+
		"\5\u043a\u021e9\u1e71\u1e72\7\n\2\2\u1e72\u1e80\5\u043a\u021e8\u1e73\u1e74"+
		"\5\u046e\u0238\2\u1e74\u1e75\5\u043a\u021e-\u1e75\u1e80\3\2\2\2\u1e76"+
		"\u1e77\7\u0145\2\2\u1e77\u1e80\5\u043a\u021e)\u1e78\u1e80\5\u043e\u0220"+
		"\2\u1e79\u1e7a\5\u0466\u0234\2\u1e7a\u1e7b\7\u015d\2\2\u1e7b\u1e7c\5\u0466"+
		"\u0234\2\u1e7c\u1e80\3\2\2\2\u1e7d\u1e7e\7\u01cc\2\2\u1e7e\u1e80\5\u03a2"+
		"\u01d2\2\u1e7f\u1e6e\3\2\2\2\u1e7f\u1e71\3\2\2\2\u1e7f\u1e73\3\2\2\2\u1e7f"+
		"\u1e76\3\2\2\2\u1e7f\u1e78\3\2\2\2\u1e7f\u1e79\3\2\2\2\u1e7f\u1e7d\3\2"+
		"\2\2\u1e80\u1f67\3\2\2\2\u1e81\u1e82\f:\2\2\u1e82\u1e83\7\u0081\2\2\u1e83"+
		"\u1e84\7\u01bb\2\2\u1e84\u1e85\7\u01f6\2\2\u1e85\u1f66\5\u043a\u021e;"+
		"\u1e86\u1e87\f\67\2\2\u1e87\u1e88\7\t\2\2\u1e88\u1f66\5\u043a\u021e8\u1e89"+
		"\u1e8a\f\66\2\2\u1e8a\u1e8b\7\n\2\2\u1e8b\u1f66\5\u043a\u021e\67\u1e8c"+
		"\u1e8d\f\65\2\2\u1e8d\u1e8e\7\13\2\2\u1e8e\u1f66\5\u043a\u021e\66\u1e8f"+
		"\u1e90\f\64\2\2\u1e90\u1e91\7\23\2\2\u1e91\u1f66\5\u043a\u021e\65\u1e92"+
		"\u1e93\f\63\2\2\u1e93\u1e94\7\4\2\2\u1e94\u1f66\5\u043a\u021e\64\u1e95"+
		"\u1e96\f\62\2\2\u1e96\u1e97\7\5\2\2\u1e97\u1f66\5\u043a\u021e\63\u1e98"+
		"\u1e99\f\61\2\2\u1e99\u1e9a\7\17\2\2\u1e9a\u1f66\5\u043a\u021e\62\u1e9b"+
		"\u1e9c\f\60\2\2\u1e9c\u1e9d\7\22\2\2\u1e9d\u1f66\5\u043a\u021e\61\u1e9e"+
		"\u1e9f\f/\2\2\u1e9f\u1ea0\7\20\2\2\u1ea0\u1f66\5\u043a\u021e\60\u1ea1"+
		"\u1ea2\f.\2\2\u1ea2\u1ea3\5\u046e\u0238\2\u1ea3\u1ea4\5\u043a\u021e/\u1ea4"+
		"\u1f66\3\2\2\2\u1ea5\u1ea6\f+\2\2\u1ea6\u1ea7\7y\2\2\u1ea7\u1f66\5\u043a"+
		"\u021e,\u1ea8\u1ea9\f*\2\2\u1ea9\u1eaa\7\u0158\2\2\u1eaa\u1f66\5\u043a"+
		"\u021e+\u1eab\u1eac\f(\2\2\u1eac\u1ead\7\u012c\2\2\u1ead\u1f66\5\u043a"+
		"\u021e)\u1eae\u1eaf\f\'\2\2\u1eaf\u1eb0\7\u012c\2\2\u1eb0\u1eb1\5\u043a"+
		"\u021e\2\u1eb1\u1eb2\7\u00dd\2\2\u1eb2\u1eb3\5\u043a\u021e(\u1eb3\u1f66"+
		"\3\2\2\2\u1eb4\u1eb5\f&\2\2\u1eb5\u1eb6\7\u0145\2\2\u1eb6\u1eb7\7\u012c"+
		"\2\2\u1eb7\u1f66\5\u043a\u021e\'\u1eb8\u1eb9\f%\2\2\u1eb9\u1eba\7\u0145"+
		"\2\2\u1eba\u1ebb\7\u012c\2\2\u1ebb\u1ebc\5\u043a\u021e\2\u1ebc\u1ebd\7"+
		"\u00dd\2\2\u1ebd\u1ebe\5\u043a\u021e&\u1ebe\u1f66\3\2\2\2\u1ebf\u1ec0"+
		"\f$\2\2\u1ec0\u1ec1\7\u0103\2\2\u1ec1\u1f66\5\u043a\u021e%\u1ec2\u1ec3"+
		"\f#\2\2\u1ec3\u1ec4\7\u0103\2\2\u1ec4\u1ec5\5\u043a\u021e\2\u1ec5\u1ec6"+
		"\7\u00dd\2\2\u1ec6\u1ec7\5\u043a\u021e$\u1ec7\u1f66\3\2\2\2\u1ec8\u1ec9"+
		"\f\"\2\2\u1ec9\u1eca\7\u0145\2\2\u1eca\u1ecb\7\u0103\2\2\u1ecb\u1f66\5"+
		"\u043a\u021e#\u1ecc\u1ecd\f!\2\2\u1ecd\u1ece\7\u0145\2\2\u1ece\u1ecf\7"+
		"\u0103\2\2\u1ecf\u1ed0\5\u043a\u021e\2\u1ed0\u1ed1\7\u00dd\2\2\u1ed1\u1ed2"+
		"\5\u043a\u021e\"\u1ed2\u1f66\3\2\2\2\u1ed3\u1ed4\f \2\2\u1ed4\u1ed5\7"+
		"\u01a0\2\2\u1ed5\u1ed6\7\u01bd\2\2\u1ed6\u1f66\5\u043a\u021e!\u1ed7\u1ed8"+
		"\f\37\2\2\u1ed8\u1ed9\7\u01a0\2\2\u1ed9\u1eda\7\u01bd\2\2\u1eda\u1edb"+
		"\5\u043a\u021e\2\u1edb\u1edc\7\u00dd\2\2\u1edc\u1edd\5\u043a\u021e \u1edd"+
		"\u1f66\3\2\2\2\u1ede\u1edf\f\36\2\2\u1edf\u1ee0\7\u0145\2\2\u1ee0\u1ee1"+
		"\7\u01a0\2\2\u1ee1\u1ee2\7\u01bd\2\2\u1ee2\u1f66\5\u043a\u021e\37\u1ee3"+
		"\u1ee4\f\35\2\2\u1ee4\u1ee5\7\u0145\2\2\u1ee5\u1ee6\7\u01a0\2\2\u1ee6"+
		"\u1ee7\7\u01bd\2\2\u1ee7\u1ee8\5\u043a\u021e\2\u1ee8\u1ee9\7\u00dd\2\2"+
		"\u1ee9\u1eea\5\u043a\u021e\36\u1eea\u1f66\3\2\2\2\u1eeb\u1eec\f\21\2\2"+
		"\u1eec\u1eed\7\u011c\2\2\u1eed\u1eee\7\u00d0\2\2\u1eee\u1eef\7\u00f3\2"+
		"\2\u1eef\u1f66\5\u043a\u021e\22\u1ef0\u1ef1\f\20\2\2\u1ef1\u1ef2\7\u011c"+
		"\2\2\u1ef2\u1ef3\7\u0145\2\2\u1ef3\u1ef4\7\u00d0\2\2\u1ef4\u1ef5\7\u00f3"+
		"\2\2\u1ef5\u1f66\5\u043a\u021e\21\u1ef6\u1ef7\f<\2\2\u1ef7\u1ef8\7\u0221"+
		"\2\2\u1ef8\u1f66\5\u040a\u0206\2\u1ef9\u1efa\f;\2\2\u1efa\u1efb\7\u009f"+
		"\2\2\u1efb\u1f66\5\u0250\u0129\2\u1efc\u1efd\f,\2\2\u1efd\u1f66\5\u046e"+
		"\u0238\2\u1efe\u1eff\f\34\2\2\u1eff\u1f00\7\u011c\2\2\u1f00\u1f66\7\u014a"+
		"\2\2\u1f01\u1f02\f\33\2\2\u1f02\u1f66\7\u011d\2\2\u1f03\u1f04\f\32\2\2"+
		"\u1f04\u1f05\7\u011c\2\2\u1f05\u1f06\7\u0145\2\2\u1f06\u1f66\7\u014a\2"+
		"\2\u1f07\u1f08\f\31\2\2\u1f08\u1f66\7\u0148\2\2\u1f09\u1f0a\f\27\2\2\u1f0a"+
		"\u1f0b\7\u011c\2\2\u1f0b\u1f66\7\u01c3\2\2\u1f0c\u1f0d\f\26\2\2\u1f0d"+
		"\u1f0e\7\u011c\2\2\u1f0e\u1f0f\7\u0145\2\2\u1f0f\u1f66\7\u01c3\2\2\u1f10"+
		"\u1f11\f\25\2\2\u1f11\u1f12\7\u011c\2\2\u1f12\u1f66\7\u00e8\2\2\u1f13"+
		"\u1f14\f\24\2\2\u1f14\u1f15\7\u011c\2\2\u1f15\u1f16\7\u0145\2\2\u1f16"+
		"\u1f66\7\u00e8\2\2\u1f17\u1f18\f\23\2\2\u1f18\u1f19\7\u011c\2\2\u1f19"+
		"\u1f66\7\u01cd\2\2\u1f1a\u1f1b\f\22\2\2\u1f1b\u1f1c\7\u011c\2\2\u1f1c"+
		"\u1f1d\7\u0145\2\2\u1f1d\u1f66\7\u01cd\2\2\u1f1e\u1f1f\f\17\2\2\u1f1f"+
		"\u1f20\7\u011c\2\2\u1f20\u1f21\7\u014f\2\2\u1f21\u1f22\7\r\2\2\u1f22\u1f23"+
		"\5\u047a\u023e\2\u1f23\u1f24\7\7\2\2\u1f24\u1f66\3\2\2\2\u1f25\u1f26\f"+
		"\16\2\2\u1f26\u1f27\7\u011c\2\2\u1f27\u1f28\7\u0145\2\2\u1f28\u1f29\7"+
		"\u014f\2\2\u1f29\u1f2a\7\r\2\2\u1f2a\u1f2b\5\u047a\u023e\2\u1f2b\u1f2c"+
		"\7\7\2\2\u1f2c\u1f66\3\2\2\2\u1f2d\u1f2e\f\r\2\2\u1f2e\u1f2f\7\u0087\2"+
		"\2\u1f2f\u1f30\5\u04a6\u0254\2\u1f30\u1f31\5\u043c\u021f\2\u1f31\u1f32"+
		"\7y\2\2\u1f32\u1f33\5\u043c\u021f\2\u1f33\u1f66\3\2\2\2\u1f34\u1f35\f"+
		"\f\2\2\u1f35\u1f36\7\u0145\2\2\u1f36\u1f37\7\u0087\2\2\u1f37\u1f38\5\u04a6"+
		"\u0254\2\u1f38\u1f39\5\u043c\u021f\2\u1f39\u1f3a\7y\2\2\u1f3a\u1f3b\5"+
		"\u043c\u021f\2\u1f3b\u1f66\3\2\2\2\u1f3c\u1f3d\f\13\2\2\u1f3d\u1f3e\7"+
		"\u0087\2\2\u1f3e\u1f3f\7\u01b0\2\2\u1f3f\u1f40\5\u043c\u021f\2\u1f40\u1f41"+
		"\7y\2\2\u1f41\u1f42\5\u043c\u021f\2\u1f42\u1f66\3\2\2\2\u1f43\u1f44\f"+
		"\n\2\2\u1f44\u1f45\7\u0145\2\2\u1f45\u1f46\7\u0087\2\2\u1f46\u1f47\7\u01b0"+
		"\2\2\u1f47\u1f48\5\u043c\u021f\2\u1f48\u1f49\7y\2\2\u1f49\u1f4a\5\u043c"+
		"\u021f\2\u1f4a\u1f66\3\2\2\2\u1f4b\u1f4c\f\t\2\2\u1f4c\u1f4d\7\u0107\2"+
		"\2\u1f4d\u1f66\5\u0492\u024a\2\u1f4e\u1f4f\f\b\2\2\u1f4f\u1f50\7\u0145"+
		"\2\2\u1f50\u1f51\7\u0107\2\2\u1f51\u1f66\5\u0492\u024a\2\u1f52\u1f53\f"+
		"\7\2\2\u1f53\u1f54\5\u0472\u023a\2\u1f54\u1f55\5\u0468\u0235\2\u1f55\u1f56"+
		"\5\u03a2\u01d2\2\u1f56\u1f66\3\2\2\2\u1f57\u1f58\f\6\2\2\u1f58\u1f59\5"+
		"\u0472\u023a\2\u1f59\u1f5a\5\u0468\u0235\2\u1f5a\u1f5b\7\r\2\2\u1f5b\u1f5c"+
		"\5\u043a\u021e\2\u1f5c\u1f5d\7\7\2\2\u1f5d\u1f66\3\2\2\2\u1f5e\u1f5f\f"+
		"\4\2\2\u1f5f\u1f60\7\u011c\2\2\u1f60\u1f66\7\u00d2\2\2\u1f61\u1f62\f\3"+
		"\2\2\u1f62\u1f63\7\u011c\2\2\u1f63\u1f64\7\u0145\2\2\u1f64\u1f66\7\u00d2"+
		"\2\2\u1f65\u1e81\3\2\2\2\u1f65\u1e86\3\2\2\2\u1f65\u1e89\3\2\2\2\u1f65"+
		"\u1e8c\3\2\2\2\u1f65\u1e8f\3\2\2\2\u1f65\u1e92\3\2\2\2\u1f65\u1e95\3\2"+
		"\2\2\u1f65\u1e98\3\2\2\2\u1f65\u1e9b\3\2\2\2\u1f65\u1e9e\3\2\2\2\u1f65"+
		"\u1ea1\3\2\2\2\u1f65\u1ea5\3\2\2\2\u1f65\u1ea8\3\2\2\2\u1f65\u1eab\3\2"+
		"\2\2\u1f65\u1eae\3\2\2\2\u1f65\u1eb4\3\2\2\2\u1f65\u1eb8\3\2\2\2\u1f65"+
		"\u1ebf\3\2\2\2\u1f65\u1ec2\3\2\2\2\u1f65\u1ec8\3\2\2\2\u1f65\u1ecc\3\2"+
		"\2\2\u1f65\u1ed3\3\2\2\2\u1f65\u1ed7\3\2\2\2\u1f65\u1ede\3\2\2\2\u1f65"+
		"\u1ee3\3\2\2\2\u1f65\u1eeb\3\2\2\2\u1f65\u1ef0\3\2\2\2\u1f65\u1ef6\3\2"+
		"\2\2\u1f65\u1ef9\3\2\2\2\u1f65\u1efc\3\2\2\2\u1f65\u1efe\3\2\2\2\u1f65"+
		"\u1f01\3\2\2\2\u1f65\u1f03\3\2\2\2\u1f65\u1f07\3\2\2\2\u1f65\u1f09\3\2"+
		"\2\2\u1f65\u1f0c\3\2\2\2\u1f65\u1f10\3\2\2\2\u1f65\u1f13\3\2\2\2\u1f65"+
		"\u1f17\3\2\2\2\u1f65\u1f1a\3\2\2\2\u1f65\u1f1e\3\2\2\2\u1f65\u1f25\3\2"+
		"\2\2\u1f65\u1f2d\3\2\2\2\u1f65\u1f34\3\2\2\2\u1f65\u1f3c\3\2\2\2\u1f65"+
		"\u1f43\3\2\2\2\u1f65\u1f4b\3\2\2\2\u1f65\u1f4e\3\2\2\2\u1f65\u1f52\3\2"+
		"\2\2\u1f65\u1f57\3\2\2\2\u1f65\u1f5e\3\2\2\2\u1f65\u1f61\3\2\2\2\u1f66"+
		"\u1f69\3\2\2\2\u1f67\u1f65\3\2\2\2\u1f67\u1f68\3\2\2\2\u1f68\u043b\3\2"+
		"\2\2\u1f69\u1f67\3\2\2\2\u1f6a\u1f6b\b\u021f\1\2\u1f6b\u1f6c\7\t\2\2\u1f6c"+
		"\u1f74\5\u043c\u021f\26\u1f6d\u1f6e\7\n\2\2\u1f6e\u1f74\5\u043c\u021f"+
		"\25\u1f6f\u1f70\5\u046e\u0238\2\u1f70\u1f71\5\u043c\u021f\n\u1f71\u1f74"+
		"\3\2\2\2\u1f72\u1f74\5\u043e\u0220\2\u1f73\u1f6a\3\2\2\2\u1f73\u1f6d\3"+
		"\2\2\2\u1f73\u1f6f\3\2\2\2\u1f73\u1f72\3\2\2\2\u1f74\u1fbc\3\2\2\2\u1f75"+
		"\u1f76\f\24\2\2\u1f76\u1f77\7\t\2\2\u1f77\u1fbb\5\u043c\u021f\25\u1f78"+
		"\u1f79\f\23\2\2\u1f79\u1f7a\7\n\2\2\u1f7a\u1fbb\5\u043c\u021f\24\u1f7b"+
		"\u1f7c\f\22\2\2\u1f7c\u1f7d\7\13\2\2\u1f7d\u1fbb\5\u043c\u021f\23\u1f7e"+
		"\u1f7f\f\21\2\2\u1f7f\u1f80\7\23\2\2\u1f80\u1fbb\5\u043c\u021f\22\u1f81"+
		"\u1f82\f\20\2\2\u1f82\u1f83\7\4\2\2\u1f83\u1fbb\5\u043c\u021f\21\u1f84"+
		"\u1f85\f\17\2\2\u1f85\u1f86\7\5\2\2\u1f86\u1fbb\5\u043c\u021f\20\u1f87"+
		"\u1f88\f\16\2\2\u1f88\u1f89\7\17\2\2\u1f89\u1fbb\5\u043c\u021f\17\u1f8a"+
		"\u1f8b\f\r\2\2\u1f8b\u1f8c\7\22\2\2\u1f8c\u1fbb\5\u043c\u021f\16\u1f8d"+
		"\u1f8e\f\f\2\2\u1f8e\u1f8f\7\20\2\2\u1f8f\u1fbb\5\u043c\u021f\r\u1f90"+
		"\u1f91\f\13\2\2\u1f91\u1f92\5\u046e\u0238\2\u1f92\u1f93\5\u043c\u021f"+
		"\f\u1f93\u1fbb\3\2\2\2\u1f94\u1f95\f\b\2\2\u1f95\u1f96\7\u011c\2\2\u1f96"+
		"\u1f97\7\u00d0\2\2\u1f97\u1f98\7\u00f3\2\2\u1f98\u1fbb\5\u043c\u021f\t"+
		"\u1f99\u1f9a\f\7\2\2\u1f9a\u1f9b\7\u011c\2\2\u1f9b\u1f9c\7\u0145\2\2\u1f9c"+
		"\u1f9d\7\u00d0\2\2\u1f9d\u1f9e\7\u00f3\2\2\u1f9e\u1fbb\5\u043c\u021f\b"+
		"\u1f9f\u1fa0\f\27\2\2\u1fa0\u1fa1\7\u0221\2\2\u1fa1\u1fbb\5\u040a\u0206"+
		"\2\u1fa2\u1fa3\f\t\2\2\u1fa3\u1fbb\5\u046e\u0238\2\u1fa4\u1fa5\f\6\2\2"+
		"\u1fa5\u1fa6\7\u011c\2\2\u1fa6\u1fa7\7\u014f\2\2\u1fa7\u1fa8\7\r\2\2\u1fa8"+
		"\u1fa9\5\u047a\u023e\2\u1fa9\u1faa\7\7\2\2\u1faa\u1fbb\3\2\2\2\u1fab\u1fac"+
		"\f\5\2\2\u1fac\u1fad\7\u011c\2\2\u1fad\u1fae\7\u0145\2\2\u1fae\u1faf\7"+
		"\u014f\2\2\u1faf\u1fb0\7\r\2\2\u1fb0\u1fb1\5\u047a\u023e\2\u1fb1\u1fb2"+
		"\7\7\2\2\u1fb2\u1fbb\3\2\2\2\u1fb3\u1fb4\f\4\2\2\u1fb4\u1fb5\7\u011c\2"+
		"\2\u1fb5\u1fbb\7\u00d2\2\2\u1fb6\u1fb7\f\3\2\2\u1fb7\u1fb8\7\u011c\2\2"+
		"\u1fb8\u1fb9\7\u0145\2\2\u1fb9\u1fbb\7\u00d2\2\2\u1fba\u1f75\3\2\2\2\u1fba"+
		"\u1f78\3\2\2\2\u1fba\u1f7b\3\2\2\2\u1fba\u1f7e\3\2\2\2\u1fba\u1f81\3\2"+
		"\2\2\u1fba\u1f84\3\2\2\2\u1fba\u1f87\3\2\2\2\u1fba\u1f8a\3\2\2\2\u1fba"+
		"\u1f8d\3\2\2\2\u1fba\u1f90\3\2\2\2\u1fba\u1f94\3\2\2\2\u1fba\u1f99\3\2"+
		"\2\2\u1fba\u1f9f\3\2\2\2\u1fba\u1fa2\3\2\2\2\u1fba\u1fa4\3\2\2\2\u1fba"+
		"\u1fab\3\2\2\2\u1fba\u1fb3\3\2\2\2\u1fba\u1fb6\3\2\2\2\u1fbb\u1fbe\3\2"+
		"\2\2\u1fbc\u1fba\3\2\2\2\u1fbc\u1fbd\3\2\2\2\u1fbd\u043d\3\2\2\2\u1fbe"+
		"\u1fbc\3\2\2\2\u1fbf\u1fd3\5\u049e\u0250\2\u1fc0\u1fd3\5\u04c6\u0264\2"+
		"\u1fc1\u1fc2\7\u0228\2\2\u1fc2\u1fd3\5\u04a4\u0253\2\u1fc3\u1fc4\7\r\2"+
		"\2\u1fc4\u1fc5\5\u043a\u021e\2\u1fc5\u1fc6\7\7\2\2\u1fc6\u1fc7\5\u04a4"+
		"\u0253\2\u1fc7\u1fd3\3\2\2\2\u1fc8\u1fd3\5\u0494\u024b\2\u1fc9\u1fd3\5"+
		"\u0440\u0221\2\u1fca\u1fd3\5\u03a2\u01d2\2\u1fcb\u1fcc\7\u00e3\2\2\u1fcc"+
		"\u1fd3\5\u03a2\u01d2\2\u1fcd\u1fce\7{\2\2\u1fce\u1fd3\5\u03a2\u01d2\2"+
		"\u1fcf\u1fd0\7{\2\2\u1fd0\u1fd3\5\u047c\u023f\2\u1fd1\u1fd3\5\u0466\u0234"+
		"\2\u1fd2\u1fbf\3\2\2\2\u1fd2\u1fc0\3\2\2\2\u1fd2\u1fc1\3\2\2\2\u1fd2\u1fc3"+
		"\3\2\2\2\u1fd2\u1fc8\3\2\2\2\u1fd2\u1fc9\3\2\2\2\u1fd2\u1fca\3\2\2\2\u1fd2"+
		"\u1fcb\3\2\2\2\u1fd2\u1fcd\3\2\2\2\u1fd2\u1fcf\3\2\2\2\u1fd2\u1fd1\3\2"+
		"\2\2\u1fd3\u043f\3\2\2\2\u1fd4\u1fd5\5\u04c4\u0263\2\u1fd5\u1fd6\7\r\2"+
		"\2\u1fd6\u1fd7\7\7\2\2\u1fd7\u1fd8\5\u0458\u022d\2\u1fd8\u20d6\3\2\2\2"+
		"\u1fd9\u1fda\5\u04c4\u0263\2\u1fda\u1fdb\7\r\2\2\u1fdb\u1fdc\5\u0476\u023c"+
		"\2\u1fdc\u1fdd\7\7\2\2\u1fdd\u1fde\5\u0458\u022d\2\u1fde\u20d6\3\2\2\2"+
		"\u1fdf\u1fe0\5\u04c4\u0263\2\u1fe0\u1fe1\7\r\2\2\u1fe1\u1fe2\7\u01db\2"+
		"\2\u1fe2\u1fe3\5\u0478\u023d\2\u1fe3\u1fe4\7\7\2\2\u1fe4\u1fe5\5\u0458"+
		"\u022d\2\u1fe5\u20d6\3\2\2\2\u1fe6\u1fe7\5\u04c4\u0263\2\u1fe7\u1fe8\7"+
		"\r\2\2\u1fe8\u1fe9\5\u0476\u023c\2\u1fe9\u1fea\7\b\2\2\u1fea\u1feb\7\u01db"+
		"\2\2\u1feb\u1fec\5\u0478\u023d\2\u1fec\u1fed\7\7\2\2\u1fed\u1fee\5\u0458"+
		"\u022d\2\u1fee\u20d6\3\2\2\2\u1fef\u1ff0\5\u04c4\u0263\2\u1ff0\u1ff1\7"+
		"\r\2\2\u1ff1\u1ff2\5\u0476\u023c\2\u1ff2\u1ff3\5\u03be\u01e0\2\u1ff3\u1ff4"+
		"\7\7\2\2\u1ff4\u1ff5\5\u0458\u022d\2\u1ff5\u20d6\3\2\2\2\u1ff6\u1ff7\5"+
		"\u04c4\u0263\2\u1ff7\u1ff8\7\r\2\2\u1ff8\u1ff9\7s\2\2\u1ff9\u1ffa\5\u0476"+
		"\u023c\2\u1ffa\u1ffb\5\u03bc\u01df\2\u1ffb\u1ffc\7\7\2\2\u1ffc\u1ffd\5"+
		"\u0458\u022d\2\u1ffd\u20d6\3\2\2\2\u1ffe\u1fff\5\u04c4\u0263\2\u1fff\u2000"+
		"\7\r\2\2\u2000\u2001\7\u00d0\2\2\u2001\u2002\5\u0476\u023c\2\u2002\u2003"+
		"\5\u03bc\u01df\2\u2003\u2004\7\7\2\2\u2004\u2005\5\u0458\u022d\2\u2005"+
		"\u20d6\3\2\2\2\u2006\u2007\5\u04c4\u0263\2\u2007\u2008\7\r\2\2\u2008\u2009"+
		"\7\13\2\2\u2009\u200a\7\7\2\2\u200a\u200b\5\u0458\u022d\2\u200b\u20d6"+
		"\3\2\2\2\u200c\u200d\7\u00a0\2\2\u200d\u200e\7\u00ee\2\2\u200e\u200f\7"+
		"\r\2\2\u200f\u2010\5\u043a\u021e\2\u2010\u2011\7\7\2\2\u2011\u20d6\3\2"+
		"\2\2\u2012\u20d6\7\u00b5\2\2\u2013\u20d6\7\u00b8\2\2\u2014\u2015\7\u00b8"+
		"\2\2\u2015\u2016\7\r\2\2\u2016\u2017\5\u04c8\u0265\2\u2017\u2018\7\7\2"+
		"\2\u2018\u20d6\3\2\2\2\u2019\u20d6\7\u00b9\2\2\u201a\u201b\7\u00b9\2\2"+
		"\u201b\u201c\7\r\2\2\u201c\u201d\5\u04c8\u0265\2\u201d\u201e\7\7\2\2\u201e"+
		"\u20d6\3\2\2\2\u201f\u20d6\7\u0131\2\2\u2020\u2021\7\u0131\2\2\u2021\u2022"+
		"\7\r\2\2\u2022\u2023\5\u04c8\u0265\2\u2023\u2024\7\7\2\2\u2024\u20d6\3"+
		"\2\2\2\u2025\u20d6\7\u0132\2\2\u2026\u2027\7\u0132\2\2\u2027\u2028\7\r"+
		"\2\2\u2028\u2029\5\u04c8\u0265\2\u2029\u202a\7\7\2\2\u202a\u20d6\3\2\2"+
		"\2\u202b\u20d6\7\u00b6\2\2\u202c\u20d6\7\u00ba\2\2\u202d\u20d6\7\u019b"+
		"\2\2\u202e\u20d6\7\u01d2\2\2\u202f\u20d6\7\u00b4\2\2\u2030\u20d6\7\u00b7"+
		"\2\2\u2031\u2032\7\u0093\2\2\u2032\u2033\7\r\2\2\u2033\u2034\5\u043a\u021e"+
		"\2\u2034\u2035\7|\2\2\u2035\u2036\5\u040a\u0206\2\u2036\u2037\7\7\2\2"+
		"\u2037\u20d6\3\2\2\2\u2038\u2039\7\u00e7\2\2\u2039\u203a\7\r\2\2\u203a"+
		"\u203b\5\u0480\u0241\2\u203b\u203c\7\7\2\2\u203c\u20d6\3\2\2\2\u203d\u203e"+
		"\7\u015e\2\2\u203e\u203f\7\r\2\2\u203f\u2040\5\u0484\u0243\2\u2040\u2041"+
		"\7\7\2\2\u2041\u20d6\3\2\2\2\u2042\u2043\7\u0168\2\2\u2043\u2044\7\r\2"+
		"\2\u2044\u2045\5\u0488\u0245\2\u2045\u2046\7\7\2\2\u2046\u20d6\3\2\2\2"+
		"\u2047\u2048\7\u01af\2\2\u2048\u2049\7\r\2\2\u2049\u204a\5\u048a\u0246"+
		"\2\u204a\u204b\7\7\2\2\u204b\u20d6\3\2\2\2\u204c\u204d\7\u01c0\2\2\u204d"+
		"\u204e\7\r\2\2\u204e\u204f\5\u043a\u021e\2\u204f\u2050\7|\2\2\u2050\u2051"+
		"\5\u040a\u0206\2\u2051\u2052\7\7\2\2\u2052\u20d6\3\2\2\2\u2053\u2054\7"+
		"\u01c2\2\2\u2054\u2055\7\r\2\2\u2055\u2056\7\u008c\2\2\u2056\u2057\5\u0490"+
		"\u0249\2\u2057\u2058\7\7\2\2\u2058\u20d6\3\2\2\2\u2059\u205a\7\u01c2\2"+
		"\2\u205a\u205b\7\r\2\2\u205b\u205c\7\u0127\2\2\u205c\u205d\5\u0490\u0249"+
		"\2\u205d\u205e\7\7\2\2\u205e\u20d6\3\2\2\2\u205f\u2060\7\u01c2\2\2\u2060"+
		"\u2061\7\r\2\2\u2061\u2062\7\u01be\2\2\u2062\u2063\5\u0490\u0249\2\u2063"+
		"\u2064\7\7\2\2\u2064\u20d6\3\2\2\2\u2065\u2066\7\u01c2\2\2\u2066\u2067"+
		"\7\r\2\2\u2067\u2068\5\u0490\u0249\2\u2068\u2069\7\7\2\2\u2069\u20d6\3"+
		"\2\2\2\u206a\u206b\7\u014b\2\2\u206b\u206c\7\r\2\2\u206c\u206d\5\u043a"+
		"\u021e\2\u206d\u206e\7\b\2\2\u206e\u206f\5\u043a\u021e\2\u206f\u2070\7"+
		"\7\2\2\u2070\u20d6\3\2\2\2\u2071\u2072\7\u009e\2\2\u2072\u2073\7\r\2\2"+
		"\u2073\u2074\5\u0474\u023b\2\u2074\u2075\7\7\2\2\u2075\u20d6\3\2\2\2\u2076"+
		"\u2077\7\u00fa\2\2\u2077\u2078\7\r\2\2\u2078\u2079\5\u0474\u023b\2\u2079"+
		"\u207a\7\7\2\2\u207a\u20d6\3\2\2\2\u207b\u207c\7\u0129\2\2\u207c\u207d"+
		"\7\r\2\2\u207d\u207e\5\u0474\u023b\2\u207e\u207f\7\7\2\2\u207f\u20d6\3"+
		"\2\2\2\u2080\u2081\7\u01ec\2\2\u2081\u2082\7\r\2\2\u2082\u2083\5\u0474"+
		"\u023b\2\u2083\u2084\7\7\2\2\u2084\u20d6\3\2\2\2\u2085\u2086\7\u01ed\2"+
		"\2\u2086\u2087\7\r\2\2\u2087\u2088\7\u013d\2\2\u2088\u2089\5\u04d4\u026b"+
		"\2\u2089\u208a\7\7\2\2\u208a\u20d6\3\2\2\2\u208b\u208c\7\u01ed\2\2\u208c"+
		"\u208d\7\r\2\2\u208d\u208e\7\u013d\2\2\u208e\u208f\5\u04d4\u026b\2\u208f"+
		"\u2090\7\b\2\2\u2090\u2091\5\u0446\u0224\2\u2091\u2092\7\7\2\2\u2092\u20d6"+
		"\3\2\2\2\u2093\u2094\7\u01ed\2\2\u2094\u2095\7\r\2\2\u2095\u2096\7\u013d"+
		"\2\2\u2096\u2097\5\u04d4\u026b\2\u2097\u2098\7\b\2\2\u2098\u2099\5\u0474"+
		"\u023b\2\u2099\u209a\7\7\2\2\u209a\u20d6\3\2\2\2\u209b\u209c\7\u01ed\2"+
		"\2\u209c\u209d\7\r\2\2\u209d\u209e\7\u013d\2\2\u209e\u209f\5\u04d4\u026b"+
		"\2\u209f\u20a0\7\b\2\2\u20a0\u20a1\5\u0446\u0224\2\u20a1\u20a2\7\b\2\2"+
		"\u20a2\u20a3\5\u0474\u023b\2\u20a3\u20a4\7\7\2\2\u20a4\u20d6\3\2\2\2\u20a5"+
		"\u20a6\7\u01ee\2\2\u20a6\u20a7\7\r\2\2\u20a7\u20a8\5\u043e\u0220\2\u20a8"+
		"\u20a9\5\u0450\u0229\2\u20a9\u20aa\7\7\2\2\u20aa\u20d6\3\2\2\2\u20ab\u20ac"+
		"\7\u01ef\2\2\u20ac\u20ad\7\r\2\2\u20ad\u20ae\5\u0448\u0225\2\u20ae\u20af"+
		"\7\7\2\2\u20af\u20d6\3\2\2\2\u20b0\u20b1\7\u01f0\2\2\u20b1\u20b2\7\r\2"+
		"\2\u20b2\u20b3\5\u044c\u0227\2\u20b3\u20b4\5\u043a\u021e\2\u20b4\u20b5"+
		"\5\u044e\u0228\2\u20b5\u20b6\7\7\2\2\u20b6\u20d6\3\2\2\2\u20b7\u20b8\7"+
		"\u01f1\2\2\u20b8\u20b9\7\r\2\2\u20b9\u20ba\7\u013d\2\2\u20ba\u20bb\5\u04d4"+
		"\u026b\2\u20bb\u20bc\7\7\2\2\u20bc\u20d6\3\2\2\2\u20bd\u20be\7\u01f1\2"+
		"\2\u20be\u20bf\7\r\2\2\u20bf\u20c0\7\u013d\2\2\u20c0\u20c1\5\u04d4\u026b"+
		"\2\u20c1\u20c2\7\b\2\2\u20c2\u20c3\5\u043a\u021e\2\u20c3\u20c4\7\7\2\2"+
		"\u20c4\u20d6\3\2\2\2\u20c5\u20c6\7\u01f2\2\2\u20c6\u20c7\7\r\2\2\u20c7"+
		"\u20c8\5\u043a\u021e\2\u20c8\u20c9\7\b\2\2\u20c9\u20ca\5\u0442\u0222\2"+
		"\u20ca\u20cb\5\u0444\u0223\2\u20cb\u20cc\7\7\2\2\u20cc\u20d6\3\2\2\2\u20cd"+
		"\u20ce\7\u01f3\2\2\u20ce\u20cf\7\r\2\2\u20cf\u20d0\5\u044c\u0227\2\u20d0"+
		"\u20d1\5\u043a\u021e\2\u20d1\u20d2\7|\2\2\u20d2\u20d3\5\u040e\u0208\2"+
		"\u20d3\u20d4\7\7\2\2\u20d4\u20d6\3\2\2\2\u20d5\u1fd4\3\2\2\2\u20d5\u1fd9"+
		"\3\2\2\2\u20d5\u1fdf\3\2\2\2\u20d5\u1fe6\3\2\2\2\u20d5\u1fef\3\2\2\2\u20d5"+
		"\u1ff6\3\2\2\2\u20d5\u1ffe\3\2\2\2\u20d5\u2006\3\2\2\2\u20d5\u200c\3\2"+
		"\2\2\u20d5\u2012\3\2\2\2\u20d5\u2013\3\2\2\2\u20d5\u2014\3\2\2\2\u20d5"+
		"\u2019\3\2\2\2\u20d5\u201a\3\2\2\2\u20d5\u201f\3\2\2\2\u20d5\u2020\3\2"+
		"\2\2\u20d5\u2025\3\2\2\2\u20d5\u2026\3\2\2\2\u20d5\u202b\3\2\2\2\u20d5"+
		"\u202c\3\2\2\2\u20d5\u202d\3\2\2\2\u20d5\u202e\3\2\2\2\u20d5\u202f\3\2"+
		"\2\2\u20d5\u2030\3\2\2\2\u20d5\u2031\3\2\2\2\u20d5\u2038\3\2\2\2\u20d5"+
		"\u203d\3\2\2\2\u20d5\u2042\3\2\2\2\u20d5\u2047\3\2\2\2\u20d5\u204c\3\2"+
		"\2\2\u20d5\u2053\3\2\2\2\u20d5\u2059\3\2\2\2\u20d5\u205f\3\2\2\2\u20d5"+
		"\u2065\3\2\2\2\u20d5\u206a\3\2\2\2\u20d5\u2071\3\2\2\2\u20d5\u2076\3\2"+
		"\2\2\u20d5\u207b\3\2\2\2\u20d5\u2080\3\2\2\2\u20d5\u2085\3\2\2\2\u20d5"+
		"\u208b\3\2\2\2\u20d5\u2093\3\2\2\2\u20d5\u209b\3\2\2\2\u20d5\u20a5\3\2"+
		"\2\2\u20d5\u20ab\3\2\2\2\u20d5\u20b0\3\2\2\2\u20d5\u20b7\3\2\2\2\u20d5"+
		"\u20bd\3\2\2\2\u20d5\u20c5\3\2\2\2\u20d5\u20cd\3\2\2\2\u20d6\u0441\3\2"+
		"\2\2\u20d7\u20d8\7\u01de\2\2\u20d8\u20dd\5\u043a\u021e\2\u20d9\u20da\7"+
		"\u01de\2\2\u20da\u20db\7\u0143\2\2\u20db\u20dd\7\u01d8\2\2\u20dc\u20d7"+
		"\3\2\2\2\u20dc\u20d9\3\2\2\2\u20dd\u0443\3\2\2\2\u20de\u20df\7\b\2\2\u20df"+
		"\u20e0\7\u01a6\2\2\u20e0\u20ea\7\u01f5\2\2\u20e1\u20e2\7\b\2\2\u20e2\u20e3"+
		"\7\u01a6\2\2\u20e3\u20ea\7\u0143\2\2\u20e4\u20e5\7\b\2\2\u20e5\u20e6\7"+
		"\u01a6\2\2\u20e6\u20e7\7\u0143\2\2\u20e7\u20ea\7\u01d8\2\2\u20e8\u20ea"+
		"\3\2\2\2\u20e9\u20de\3\2\2\2\u20e9\u20e1\3\2\2\2\u20e9\u20e4\3\2\2\2\u20e9"+
		"\u20e8\3\2\2\2\u20ea\u0445\3\2\2\2\u20eb\u20ec\7\u01eb\2\2\u20ec\u20ed"+
		"\7\r\2\2\u20ed\u20ee\5\u0448\u0225\2\u20ee\u20ef\7\7\2\2\u20ef\u0447\3"+
		"\2\2\2\u20f0\u20f1\b\u0225\1\2\u20f1\u20f2\5\u044a\u0226\2\u20f2\u20f8"+
		"\3\2\2\2\u20f3\u20f4\f\3\2\2\u20f4\u20f5\7\b\2\2\u20f5\u20f7\5\u044a\u0226"+
		"\2\u20f6\u20f3\3\2\2\2\u20f7\u20fa\3\2\2\2\u20f8\u20f6\3\2\2\2\u20f8\u20f9"+
		"\3\2\2\2\u20f9\u0449\3\2\2\2\u20fa\u20f8\3\2\2\2\u20fb\u20fc\5\u043a\u021e"+
		"\2\u20fc\u20fd\7|\2\2\u20fd\u20fe\5\u04d4\u026b\2\u20fe\u2101\3\2\2\2"+
		"\u20ff\u2101\5\u043a\u021e\2\u2100\u20fb\3\2\2\2\u2100\u20ff\3\2\2\2\u2101"+
		"\u044b\3\2\2\2\u2102\u2103\t\25\2\2\u2103\u044d\3\2\2\2\u2104\u2105\7"+
		"\u016d\2\2\u2105\u210a\7\u01e3\2\2\u2106\u2107\7\u01ae\2\2\u2107\u210a"+
		"\7\u01e3\2\2\u2108\u210a\3\2\2\2\u2109\u2104\3\2\2\2\u2109\u2106\3\2\2"+
		"\2\u2109\u2108\3\2\2\2\u210a\u044f\3\2\2\2\u210b\u210c\7\u0164\2\2\u210c"+
		"\u211e\5\u043e\u0220\2\u210d\u210e\7\u0164\2\2\u210e\u210f\5\u043e\u0220"+
		"\2\u210f\u2110\7\u008d\2\2\u2110\u2111\7\u017a\2\2\u2111\u211e\3\2\2\2"+
		"\u2112\u2113\7\u0164\2\2\u2113\u2114\7\u008d\2\2\u2114\u2115\7\u017a\2"+
		"\2\u2115\u211e\5\u043e\u0220\2\u2116\u2117\7\u0164\2\2\u2117\u2118\7\u008d"+
		"\2\2\u2118\u2119\7\u017a\2\2\u2119\u211a\5\u043e\u0220\2\u211a\u211b\7"+
		"\u008d\2\2\u211b\u211c\7\u017a\2\2\u211c\u211e\3\2\2\2\u211d\u210b\3\2"+
		"\2\2\u211d\u210d\3\2\2\2\u211d\u2112\3\2\2\2\u211d\u2116\3\2\2\2\u211e"+
		"\u0451\3\2\2\2\u211f\u2120\7\u01e4\2\2\u2120\u2123\5\u0454\u022b\2\u2121"+
		"\u2123\3\2\2\2\u2122\u211f\3\2\2\2\u2122\u2121\3\2\2\2\u2123\u0453\3\2"+
		"\2\2\u2124\u2125\b\u022b\1\2\u2125\u2126\5\u0456\u022c\2\u2126\u212c\3"+
		"\2\2\2\u2127\u2128\f\3\2\2\u2128\u2129\7\b\2\2\u2129\u212b\5\u0456\u022c"+
		"\2\u212a\u2127\3\2\2\2\u212b\u212e\3\2\2\2\u212c\u212a\3\2\2\2\u212c\u212d"+
		"\3\2\2\2\u212d\u0455\3\2\2\2\u212e\u212c\3\2\2\2\u212f\u2130\5\u04d0\u0269"+
		"\2\u2130\u2131\7|\2\2\u2131\u2132\5\u045a\u022e\2\u2132\u0457\3\2\2\2"+
		"\u2133\u2134\7\u015c\2\2\u2134\u2139\5\u045a\u022e\2\u2135\u2136\7\u015c"+
		"\2\2\u2136\u2139\5\u04d0\u0269\2\u2137\u2139\3\2\2\2\u2138\u2133\3\2\2"+
		"\2\u2138\u2135\3\2\2\2\u2138\u2137\3\2\2\2\u2139\u0459\3\2\2\2\u213a\u213b"+
		"\7\r\2\2\u213b\u213c\5\u045c\u022f\2\u213c\u213d\5\u045e\u0230\2\u213d"+
		"\u213e\5\u03bc\u01df\2\u213e\u213f\5\u0460\u0231\2\u213f\u2140\7\7\2\2"+
		"\u2140\u045b\3\2\2\2\u2141\u2144\5\u04d0\u0269\2\u2142\u2144\3\2\2\2\u2143"+
		"\u2141\3\2\2\2\u2143\u2142\3\2\2\2\u2144\u045d\3\2\2\2\u2145\u2146\7\u0163"+
		"\2\2\u2146\u2147\7\u008d\2\2\u2147\u214a\5\u0474\u023b\2\u2148\u214a\3"+
		"\2\2\2\u2149\u2145\3\2\2\2\u2149\u2148\3\2\2\2\u214a\u045f\3\2\2\2\u214b"+
		"\u214c\7\u0174\2\2\u214c\u2151\5\u0462\u0232\2\u214d\u214e\7\u018d\2\2"+
		"\u214e\u2151\5\u0462\u0232\2\u214f\u2151\3\2\2\2\u2150\u214b\3\2\2\2\u2150"+
		"\u214d\3\2\2\2\u2150\u214f\3\2\2\2\u2151\u0461\3\2\2\2\u2152\u2159\5\u0464"+
		"\u0233\2\u2153\u2154\7\u0087\2\2\u2154\u2155\5\u0464\u0233\2\u2155\u2156"+
		"\7y\2\2\u2156\u2157\5\u0464\u0233\2\u2157\u2159\3\2\2\2\u2158\u2152\3"+
		"\2\2\2\u2158\u2153\3\2\2\2\u2159\u0463\3\2\2\2\u215a\u215b\7\u01c8\2\2"+
		"\u215b\u2167\7\u0169\2\2\u215c\u215d\7\u01c8\2\2\u215d\u2167\7\u00ed\2"+
		"\2\u215e\u215f\7\u00b3\2\2\u215f\u2167\7\u018c\2\2\u2160\u2161\5\u043a"+
		"\u021e\2\u2161\u2162\7\u0169\2\2\u2162\u2167\3\2\2\2\u2163\u2164\5\u043a"+
		"\u021e\2\u2164\u2165\7\u00ed\2\2\u2165\u2167\3\2\2\2\u2166\u215a\3\2\2"+
		"\2\u2166\u215c\3\2\2\2\u2166\u215e\3\2\2\2\u2166\u2160\3\2\2\2\u2166\u2163"+
		"\3\2\2\2\u2167\u0465\3\2\2\2\u2168\u2169\7\u018c\2\2\u2169\u216a\7\r\2"+
		"\2\u216a\u216b\5\u0474\u023b\2\u216b\u216c\7\7\2\2\u216c\u2177\3\2\2\2"+
		"\u216d\u216e\7\u018c\2\2\u216e\u216f\7\r\2\2\u216f\u2177\7\7\2\2\u2170"+
		"\u2171\7\r\2\2\u2171\u2172\5\u0474\u023b\2\u2172\u2173\7\b\2\2\u2173\u2174"+
		"\5\u043a\u021e\2\u2174\u2175\7\7\2\2\u2175\u2177\3\2\2\2\u2176\u2168\3"+
		"\2\2\2\u2176\u216d\3\2\2\2\u2176\u2170\3\2\2\2\u2177\u0467\3\2\2\2\u2178"+
		"\u2179\t\26\2\2\u2179\u0469\3\2\2\2\u217a\u217d\7j\2\2\u217b\u217d\5\u046c"+
		"\u0237\2\u217c\u217a\3\2\2\2\u217c\u217b\3\2\2\2\u217d\u046b\3\2\2\2\u217e"+
		"\u217f\t\27\2\2\u217f\u046d\3\2\2\2\u2180\u2187\7j\2\2\u2181\u2182\7\u0155"+
		"\2\2\u2182\u2183\7\r\2\2\u2183\u2184\5\u02e0\u0171\2\u2184\u2185\7\7\2"+
		"\2\u2185\u2187\3\2\2\2\u2186\u2180\3\2\2\2\u2186\u2181\3\2\2\2\u2187\u046f"+
		"\3\2\2\2\u2188\u218f\5\u046a\u0236\2\u2189\u218a\7\u0155\2\2\u218a\u218b"+
		"\7\r\2\2\u218b\u218c\5\u02e0\u0171\2\u218c\u218d\7\7\2\2\u218d\u218f\3"+
		"\2\2\2\u218e\u2188\3\2\2\2\u218e\u2189\3\2\2\2\u218f\u0471\3\2\2\2\u2190"+
		"\u219d\5\u046a\u0236\2\u2191\u2192\7\u0155\2\2\u2192\u2193\7\r\2\2\u2193"+
		"\u2194\5\u02e0\u0171\2\u2194\u2195\7\7\2\2\u2195\u219d\3\2\2\2\u2196\u219d"+
		"\7\u012c\2\2\u2197\u2198\7\u0145\2\2\u2198\u219d\7\u012c\2\2\u2199\u219d"+
		"\7\u0103\2\2\u219a\u219b\7\u0145\2\2\u219b\u219d\7\u0103\2\2\u219c\u2190"+
		"\3\2\2\2\u219c\u2191\3\2\2\2\u219c\u2196\3\2\2\2\u219c\u2197\3\2\2\2\u219c"+
		"\u2199\3\2\2\2\u219c\u219a\3\2\2\2\u219d\u0473\3\2\2\2\u219e\u219f\b\u023b"+
		"\1\2\u219f\u21a0\5\u043a\u021e\2\u21a0\u21a6\3\2\2\2\u21a1\u21a2\f\3\2"+
		"\2\u21a2\u21a3\7\b\2\2\u21a3\u21a5\5\u043a\u021e\2\u21a4\u21a1\3\2\2\2"+
		"\u21a5\u21a8\3\2\2\2\u21a6\u21a4\3\2\2\2\u21a6\u21a7\3\2\2\2\u21a7\u0475"+
		"\3\2\2\2\u21a8\u21a6\3\2\2\2\u21a9\u21aa\b\u023c\1\2\u21aa\u21ab\5\u0478"+
		"\u023d\2\u21ab\u21b1\3\2\2\2\u21ac\u21ad\f\3\2\2\u21ad\u21ae\7\b\2\2\u21ae"+
		"\u21b0\5\u0478\u023d\2\u21af\u21ac\3\2\2\2\u21b0\u21b3\3\2\2\2\u21b1\u21af"+
		"\3\2\2\2\u21b1\u21b2\3\2\2\2\u21b2\u0477\3\2\2\2\u21b3\u21b1\3\2\2\2\u21b4"+
		"\u21ba\5\u043a\u021e\2\u21b5\u21b6\5\u02bc\u015f\2\u21b6\u21b7\7\u0223"+
		"\2\2\u21b7\u21b8\5\u043a\u021e\2\u21b8\u21ba\3\2\2\2\u21b9\u21b4\3\2\2"+
		"\2\u21b9\u21b5\3\2\2\2\u21ba\u0479\3\2\2\2\u21bb\u21bc\b\u023e\1\2\u21bc"+
		"\u21bd\5\u040a\u0206\2\u21bd\u21c3\3\2\2\2\u21be\u21bf\f\3\2\2\u21bf\u21c0"+
		"\7\b\2\2\u21c0\u21c2\5\u040a\u0206\2\u21c1\u21be\3\2\2\2\u21c2\u21c5\3"+
		"\2\2\2\u21c3\u21c1\3\2\2\2\u21c3\u21c4\3\2\2\2\u21c4\u047b\3\2\2\2\u21c5"+
		"\u21c3\3\2\2\2\u21c6\u21c7\7\f\2\2\u21c7\u21c8\5\u0474\u023b\2\u21c8\u21c9"+
		"\7\3\2\2\u21c9\u21d1\3\2\2\2\u21ca\u21cb\7\f\2\2\u21cb\u21cc\5\u047e\u0240"+
		"\2\u21cc\u21cd\7\3\2\2\u21cd\u21d1\3\2\2\2\u21ce\u21cf\7\f\2\2\u21cf\u21d1"+
		"\7\3\2\2\u21d0\u21c6\3\2\2\2\u21d0\u21ca\3\2\2\2\u21d0\u21ce\3\2\2\2\u21d1"+
		"\u047d\3\2\2\2\u21d2\u21d3\b\u0240\1\2\u21d3\u21d4\5\u047c\u023f\2\u21d4"+
		"\u21da\3\2\2\2\u21d5\u21d6\f\3\2\2\u21d6\u21d7\7\b\2\2\u21d7\u21d9\5\u047c"+
		"\u023f\2\u21d8\u21d5\3\2\2\2\u21d9\u21dc\3\2\2\2\u21da\u21d8\3\2\2\2\u21da"+
		"\u21db\3\2\2\2\u21db\u047f\3\2\2\2\u21dc\u21da\3\2\2\2\u21dd\u21de\5\u0482"+
		"\u0242\2\u21de\u21df\7\u00f3\2\2\u21df\u21e0\5\u043a\u021e\2\u21e0\u21e3"+
		"\3\2\2\2\u21e1\u21e3\3\2\2\2\u21e2\u21dd\3\2\2\2\u21e2\u21e1\3\2\2\2\u21e3"+
		"\u0481\3\2\2\2\u21e4\u21ed\7\u0230\2\2\u21e5\u21ed\7\u01f4\2\2\u21e6\u21ed"+
		"\7\u013b\2\2\u21e7\u21ed\7\u00bf\2\2\u21e8\u21ed\7\u0100\2\2\u21e9\u21ed"+
		"\7\u0138\2\2\u21ea\u21ed\7\u0193\2\2\u21eb\u21ed\5\u04ca\u0266\2\u21ec"+
		"\u21e4\3\2\2\2\u21ec\u21e5\3\2\2\2\u21ec\u21e6\3\2\2\2\u21ec\u21e7\3\2"+
		"\2\2\u21ec\u21e8\3\2\2\2\u21ec\u21e9\3\2\2\2\u21ec\u21ea\3\2\2\2\u21ec"+
		"\u21eb\3\2\2\2\u21ed\u0483\3\2\2\2\u21ee\u21ef\5\u043a\u021e\2\u21ef\u21f0"+
		"\5\u0486\u0244\2\u21f0\u21f1\5\u048c\u0247\2\u21f1\u21f2\5\u048e\u0248"+
		"\2\u21f2\u21f8\3\2\2\2\u21f3\u21f4\5\u043a\u021e\2\u21f4\u21f5\5\u0486"+
		"\u0244\2\u21f5\u21f6\5\u048c\u0247\2\u21f6\u21f8\3\2\2\2\u21f7\u21ee\3"+
		"\2\2\2\u21f7\u21f3\3\2\2\2\u21f8\u0485\3\2\2\2\u21f9\u21fa\7\u0166\2\2"+
		"\u21fa\u21fb\5\u043a\u021e\2\u21fb\u0487\3\2\2\2\u21fc\u21fd\5\u043c\u021f"+
		"\2\u21fd\u21fe\7\u0107\2\2\u21fe\u21ff\5\u043c\u021f\2\u21ff\u2202\3\2"+
		"\2\2\u2200\u2202\3\2\2\2\u2201\u21fc\3\2\2\2\u2201\u2200\3\2\2\2\u2202"+
		"\u0489\3\2\2\2\u2203\u2204\5\u043a\u021e\2\u2204\u2205\5\u048c\u0247\2"+
		"\u2205\u2206\5\u048e\u0248\2\u2206\u2214\3\2\2\2\u2207\u2208\5\u043a\u021e"+
		"\2\u2208\u2209\5\u048e\u0248\2\u2209\u220a\5\u048c\u0247\2\u220a\u2214"+
		"\3\2\2\2\u220b\u220c\5\u043a\u021e\2\u220c\u220d\5\u048c\u0247\2\u220d"+
		"\u2214\3\2\2\2\u220e\u220f\5\u043a\u021e\2\u220f\u2210\5\u048e\u0248\2"+
		"\u2210\u2214\3\2\2\2\u2211\u2214\5\u0474\u023b\2\u2212\u2214\3\2\2\2\u2213"+
		"\u2203\3\2\2\2\u2213\u2207\3\2\2\2\u2213\u220b\3\2\2\2\u2213\u220e\3\2"+
		"\2\2\u2213\u2211\3\2\2\2\u2213\u2212\3\2\2\2\u2214\u048b\3\2\2\2\u2215"+
		"\u2216\7\u00f3\2\2\u2216\u2217\5\u043a\u021e\2\u2217\u048d\3\2\2\2\u2218"+
		"\u2219\7\u00ee\2\2\u2219\u221a\5\u043a\u021e\2\u221a\u048f\3\2\2\2\u221b"+
		"\u221c\5\u043a\u021e\2\u221c\u221d\7\u00f3\2\2\u221d\u221e\5\u0474\u023b"+
		"\2\u221e\u2223\3\2\2\2\u221f\u2220\7\u00f3\2\2\u2220\u2223\5\u0474\u023b"+
		"\2\u2221\u2223\5\u0474\u023b\2\u2222\u221b\3\2\2\2\u2222\u221f\3\2\2\2"+
		"\u2222\u2221\3\2\2\2\u2223\u0491\3\2\2\2\u2224\u222a\5\u03a2\u01d2\2\u2225"+
		"\u2226\7\r\2\2\u2226\u2227\5\u0474\u023b\2\u2227\u2228\7\7\2\2\u2228\u222a"+
		"\3\2\2\2\u2229\u2224\3\2\2\2\u2229\u2225\3\2\2\2\u222a\u0493\3\2\2\2\u222b"+
		"\u222c\7\u0092\2\2\u222c\u222d\5\u049c\u024f\2\u222d\u222e\5\u0496\u024c"+
		"\2\u222e\u222f\5\u049a\u024e\2\u222f\u2230\7\u00db\2\2\u2230\u0495\3\2"+
		"\2\2\u2231\u2232\b\u024c\1\2\u2232\u2233\5\u0498\u024d\2\u2233\u2238\3"+
		"\2\2\2\u2234\u2235\f\3\2\2\u2235\u2237\5\u0498\u024d\2\u2236\u2234\3\2"+
		"\2\2\u2237\u223a\3\2\2\2\u2238\u2236\3\2\2\2\u2238\u2239\3\2\2\2\u2239"+
		"\u0497\3\2\2\2\u223a\u2238\3\2\2\2\u223b\u223c\7\u01e1\2\2\u223c\u223d"+
		"\5\u043a\u021e\2\u223d\u223e\7\u01ba\2\2\u223e\u223f\5\u043a\u021e\2\u223f"+
		"\u0499\3\2\2\2\u2240\u2241\7\u00d7\2\2\u2241\u2244\5\u043a\u021e\2\u2242"+
		"\u2244\3\2\2\2\u2243\u2240\3\2\2\2\u2243\u2242\3\2\2\2\u2244\u049b\3\2"+
		"\2\2\u2245\u2248\5\u043a\u021e\2\u2246\u2248\3\2\2\2\u2247\u2245\3\2\2"+
		"\2\u2247\u2246\3\2\2\2\u2248\u049d\3\2\2\2\u2249\u224e\5\u04d0\u0269\2"+
		"\u224a\u224b\5\u04d0\u0269\2\u224b\u224c\5\u04a2\u0252\2\u224c\u224e\3"+
		"\2\2\2\u224d\u2249\3\2\2\2\u224d\u224a\3\2\2\2\u224e\u049f\3\2\2\2\u224f"+
		"\u2250\7\6\2\2\u2250\u225e\5\u04be\u0260\2\u2251\u2252\7\6\2\2\u2252\u225e"+
		"\7\13\2\2\u2253\u2254\7\f\2\2\u2254\u2255\5\u043a\u021e\2\u2255\u2256"+
		"\7\3\2\2\u2256\u225e\3\2\2\2\u2257\u2258\7\f\2\2\u2258\u2259\5\u043a\u021e"+
		"\2\u2259\u225a\7\16\2\2\u225a\u225b\5\u043a\u021e\2\u225b\u225c\7\3\2"+
		"\2\u225c\u225e\3\2\2\2\u225d\u224f\3\2\2\2\u225d\u2251\3\2\2\2\u225d\u2253"+
		"\3\2\2\2\u225d\u2257\3\2\2\2\u225e\u04a1\3\2\2\2\u225f\u2260\b\u0252\1"+
		"\2\u2260\u2261\5\u04a0\u0251\2\u2261\u2266\3\2\2\2\u2262\u2263\f\3\2\2"+
		"\u2263\u2265\5\u04a0\u0251\2\u2264\u2262\3\2\2\2\u2265\u2268\3\2\2\2\u2266"+
		"\u2264\3\2\2\2\u2266\u2267\3\2\2\2\u2267\u04a3\3\2\2\2\u2268\u2266\3\2"+
		"\2\2\u2269\u226e\b\u0253\1\2\u226a\u226b\f\3\2\2\u226b\u226d\5\u04a0\u0251"+
		"\2\u226c\u226a\3\2\2\2\u226d\u2270\3\2\2\2\u226e\u226c\3\2\2\2\u226e\u226f"+
		"\3\2\2\2\u226f\u04a5\3\2\2\2\u2270\u226e\3\2\2\2\u2271\u2274\7\u0080\2"+
		"\2\u2272\u2274\3\2\2\2\u2273\u2271\3\2\2\2\u2273\u2272\3\2\2\2\u2274\u04a7"+
		"\3\2\2\2\u2275\u2278\5\u043a\u021e\2\u2276\u2278\7\u00c4\2\2\u2277\u2275"+
		"\3\2\2\2\u2277\u2276\3\2\2\2\u2278\u04a9\3\2\2\2\u2279\u227a\b\u0256\1"+
		"\2\u227a\u227b\5\u04a8\u0255\2\u227b\u2281\3\2\2\2\u227c\u227d\f\3\2\2"+
		"\u227d\u227e\7\b\2\2\u227e\u2280\5\u04a8\u0255\2\u227f\u227c\3\2\2\2\u2280"+
		"\u2283\3\2\2\2\u2281\u227f\3\2\2\2\u2281\u2282\3\2\2\2\u2282\u04ab\3\2"+
		"\2\2\u2283\u2281\3\2\2\2\u2284\u2285\7\r\2\2\u2285\u2286\5\u04aa\u0256"+
		"\2\u2286\u2287\7\7\2\2\u2287\u04ad\3\2\2\2\u2288\u2289\b\u0258\1\2\u2289"+
		"\u228a\5\u04b0\u0259\2\u228a\u2290\3\2\2\2\u228b\u228c\f\3\2\2\u228c\u228d"+
		"\7\b\2\2\u228d\u228f\5\u04b0\u0259\2\u228e\u228b\3\2\2\2\u228f\u2292\3"+
		"\2\2\2\u2290\u228e\3\2\2\2\u2290\u2291\3\2\2\2\u2291\u04af\3\2\2\2\u2292"+
		"\u2290\3\2\2\2\u2293\u2294\5\u043a\u021e\2\u2294\u2295\7|\2\2\u2295\u2296"+
		"\5\u04d4\u026b\2\u2296\u229d\3\2\2\2\u2297\u2298\5\u043a\u021e\2\u2298"+
		"\u2299\7\u0230\2\2\u2299\u229d\3\2\2\2\u229a\u229d\5\u043a\u021e\2\u229b"+
		"\u229d\7\13\2\2\u229c\u2293\3\2\2\2\u229c\u2297\3\2\2\2\u229c\u229a\3"+
		"\2\2\2\u229c\u229b\3\2\2\2\u229d\u04b1\3\2\2\2\u229e\u229f\b\u025a\1\2"+
		"\u229f\u22a0\5\u04b4\u025b\2\u22a0\u22a6\3\2\2\2\u22a1\u22a2\f\3\2\2\u22a2"+
		"\u22a3\7\b\2\2\u22a3\u22a5\5\u04b4\u025b\2\u22a4\u22a1\3\2\2\2\u22a5\u22a8"+
		"\3\2\2\2\u22a6\u22a4\3\2\2\2\u22a6\u22a7\3\2\2\2\u22a7\u04b3\3\2\2\2\u22a8"+
		"\u22a6\3\2\2\2\u22a9\u22ae\5\u04d0\u0269\2\u22aa\u22ab\5\u04d0\u0269\2"+
		"\u22ab\u22ac\5\u04a2\u0252\2\u22ac\u22ae\3\2\2\2\u22ad\u22a9\3\2\2\2\u22ad"+
		"\u22aa\3\2\2\2\u22ae\u04b5\3\2\2\2\u22af\u22b0\b\u025c\1\2\u22b0\u22b1"+
		"\5\u04b8\u025d\2\u22b1\u22b7\3\2\2\2\u22b2\u22b3\f\3\2\2\u22b3\u22b4\7"+
		"\b\2\2\u22b4\u22b6\5\u04b8\u025d\2\u22b5\u22b2\3\2\2\2\u22b6\u22b9\3\2"+
		"\2\2\u22b7\u22b5\3\2\2\2\u22b7\u22b8\3\2\2\2\u22b8\u04b7\3\2\2\2\u22b9"+
		"\u22b7\3\2\2\2\u22ba\u22bb\5\u04d0\u0269\2\u22bb\u04b9\3\2\2\2\u22bc\u22bd"+
		"\5\u04d0\u0269\2\u22bd\u04bb\3\2\2\2\u22be\u22bf\5\u04d0\u0269\2\u22bf"+
		"\u04bd\3\2\2\2\u22c0\u22c1\5\u04d4\u026b\2\u22c1\u04bf\3\2\2\2\u22c2\u22c3"+
		"\5\u04d0\u0269\2\u22c3\u04c1\3\2\2\2\u22c4\u22c5\5\u04ca\u0266\2\u22c5"+
		"\u04c3\3\2\2\2\u22c6\u22cb\5\u04d2\u026a\2\u22c7\u22c8\5\u04d0\u0269\2"+
		"\u22c8\u22c9\5\u04a2\u0252\2\u22c9\u22cb\3\2\2\2\u22ca\u22c6\3\2\2\2\u22ca"+
		"\u22c7\3\2\2\2\u22cb\u04c5\3\2\2\2\u22cc\u22ec\5\u04c8\u0265\2\u22cd\u22ec"+
		"\7\u0231\2\2\u22ce\u22ec\5\u04ca\u0266\2\u22cf\u22ec\7\u0232\2\2\u22d0"+
		"\u22ec\7\u0233\2\2\u22d1\u22d2\5\u04c4\u0263\2\u22d2\u22d3\5\u04ca\u0266"+
		"\2\u22d3\u22ec\3\2\2\2\u22d4\u22d5\5\u04c4\u0263\2\u22d5\u22d6\7\r\2\2"+
		"\u22d6\u22d7\5\u0476\u023c\2\u22d7\u22d8\7\7\2\2\u22d8\u22d9\5\u04ca\u0266"+
		"\2\u22d9\u22ec\3\2\2\2\u22da\u22db\5\u0410\u0209\2\u22db\u22dc\5\u04ca"+
		"\u0266\2\u22dc\u22ec\3\2\2\2\u22dd\u22de\5\u0432\u021a\2\u22de\u22df\5"+
		"\u04ca\u0266\2\u22df\u22e0\5\u0436\u021c\2\u22e0\u22ec\3\2\2\2\u22e1\u22e2"+
		"\5\u0432\u021a\2\u22e2\u22e3\7\r\2\2\u22e3\u22e4\5\u04c8\u0265\2\u22e4"+
		"\u22e5\7\7\2\2\u22e5\u22e6\5\u04ca\u0266\2\u22e6\u22e7\5\u0436\u021c\2"+
		"\u22e7\u22ec\3\2\2\2\u22e8\u22ec\7\u01c3\2\2\u22e9\u22ec\7\u00e8\2\2\u22ea"+
		"\u22ec\7\u014a\2\2\u22eb\u22cc\3\2\2\2\u22eb\u22cd\3\2\2\2\u22eb\u22ce"+
		"\3\2\2\2\u22eb\u22cf\3\2\2\2\u22eb\u22d0\3\2\2\2\u22eb\u22d1\3\2\2\2\u22eb"+
		"\u22d4\3\2\2\2\u22eb\u22da\3\2\2\2\u22eb\u22dd\3\2\2\2\u22eb\u22e1\3\2"+
		"\2\2\u22eb\u22e8\3\2\2\2\u22eb\u22e9\3\2\2\2\u22eb\u22ea\3\2\2\2\u22ec"+
		"\u04c7\3\2\2\2\u22ed\u22ee\7\u022f\2\2\u22ee\u04c9\3\2\2\2\u22ef\u22f0"+
		"\7\u0234\2\2\u22f0\u04cb\3\2\2\2\u22f1\u22f2\5\u04d0\u0269\2\u22f2\u04cd"+
		"\3\2\2\2\u22f3\u22f9\5\u04c8\u0265\2\u22f4\u22f5\7\t\2\2\u22f5\u22f9\5"+
		"\u04c8\u0265\2\u22f6\u22f7\7\n\2\2\u22f7\u22f9\5\u04c8\u0265\2\u22f8\u22f3"+
		"\3\2\2\2\u22f8\u22f4\3\2\2\2\u22f8\u22f6\3\2\2\2\u22f9\u04cf\3\2\2\2\u22fa"+
		"\u22fe\7\u0230\2\2\u22fb\u22fe\5\u00a0Q\2\u22fc\u22fe\5\u04d6\u026c\2"+
		"\u22fd\u22fa\3\2\2\2\u22fd\u22fb\3\2\2\2\u22fd\u22fc\3\2\2\2\u22fe\u04d1"+
		"\3\2\2\2\u22ff\u2303\7\u0230\2\2\u2300\u2303\5\u00a0Q\2\u2301\u2303\5"+
		"\u04d8\u026d\2\u2302\u22ff\3\2\2\2\u2302\u2300\3\2\2\2\u2302\u2301\3\2"+
		"\2\2\u2303\u04d3\3\2\2\2\u2304\u230a\7\u0230\2\2\u2305\u230a\5\u00a0Q"+
		"\2\u2306\u230a\5\u04d6\u026c\2\u2307\u230a\5\u04d8\u026d\2\u2308\u230a"+
		"\5\u04da\u026e\2\u2309\u2304\3\2\2\2\u2309\u2305\3\2\2\2\u2309\u2306\3"+
		"\2\2\2\u2309\u2307\3\2\2\2\u2309\u2308\3\2\2\2\u230a\u04d5\3\2\2\2\u230b"+
		"\u230c\t\30\2\2\u230c\u04d7\3\2\2\2\u230d\u230e\t\31\2\2\u230e\u04d9\3"+
		"\2\2\2\u230f\u2310\t\32\2\2\u2310\u04db\3\2\2\2\u01e8\u04e5\u04f4\u04f8"+
		"\u0509\u0514\u051d\u0533\u0539\u0542\u054c\u0558\u055c\u0565\u056a\u056e"+
		"\u0572\u0578\u0581\u059a\u05ac\u05b6\u05c9\u05dd\u05e3\u05f6\u0600\u0621"+
		"\u0653\u065c\u066c\u067e\u0682\u0687\u0697\u0709\u070f\u0718\u0720\u0737"+
		"\u0746\u074c\u0754\u075c\u0768\u0779\u0783\u0789\u079e\u07ac\u07b0\u07b7"+
		"\u07c0\u07ca\u07d4\u0801\u080b\u0816\u081b\u0824\u082a\u083c\u0841\u0845"+
		"\u0855\u085a\u085f\u086f\u0878\u0886\u08b8\u08c2\u096a\u0971\u0976\u097b"+
		"\u0980\u0989\u0993\u09a5\u09b4\u09d1\u09d7\u09e2\u09eb\u09ef\u09f6\u09fd"+
		"\u0a04\u0a27\u0a2b\u0a30\u0a37\u0a3b\u0a45\u0a53\u0a5d\u0a96\u0aa4\u0aa8"+
		"\u0aaf\u0ab9\u0ac4\u0aca\u0ace\u0adf\u0aea\u0b06\u0b0f\u0b1c\u0b1e\u0b28"+
		"\u0b60\u0b65\u0b6c\u0b76\u0b82\u0b8c\u0b9a\u0ba2\u0bad\u0bbf\u0bc7\u0bd0"+
		"\u0bde\u0be3\u0bea\u0c04\u0c18\u0c1c\u0c25\u0c3e\u0c44\u0c47\u0c4b\u0c51"+
		"\u0c5b\u0c70\u0c74\u0c7a\u0c7f\u0c85\u0c89\u0c99\u0c9d\u0ca9\u0cb3\u0cb9"+
		"\u0cc4\u0cc8\u0ccf\u0cd8\u0ce5\u0d9d\u0daf\u0db8\u0dbd\u0dcf\u0de0\u0de8"+
		"\u0df2\u0e02\u0e0c\u0e23\u0e29\u0e2d\u0e3b\u0e4d\u0e64\u0e6c\u0e76\u0e89"+
		"\u0e97\u0eab\u0edb\u0ee1\u0eeb\u0ef5\u0efc\u0f00\u0f0a\u0f0f\u0f16\u0f1d"+
		"\u0f22\u0f29\u0f37\u0f49\u0fb0\u0fbe\u0fc6\u0fcd\u0fd6\u0fe4\u0fed\u0ff7"+
		"\u1013\u102b\u104a\u104e\u1053\u105c\u1060\u107b\u1085\u1094\u10a8\u10bc"+
		"\u10e5\u10ff\u1109\u1110\u111b\u1129\u11bf\u11d5\u11d9\u120c\u1211\u121f"+
		"\u1223\u1229\u126d\u1273\u1290\u12a1\u12ab\u12b7\u12e5\u12ef\u12f5\u12fb"+
		"\u1305\u1323\u1329\u132f\u133c\u1348\u1365\u137a\u137e\u1382\u1387\u1391"+
		"\u13a8\u13ad\u13b3\u13b8\u13bd\u13c1\u13cd\u13dc\u13e4\u13e9\u13f1\u13fb"+
		"\u1404\u140e\u1420\u1428\u143a\u1445\u144e\u1470\u1478\u147f\u1484\u1491"+
		"\u14a1\u14a6\u14b6\u14c6\u14d6\u14ee\u14f5\u1501\u1507\u152b\u1532\u1541"+
		"\u1552\u1558\u16ac\u16b0\u16b5\u176b\u17fb\u1811\u181b\u1823\u1827\u182e"+
		"\u1840\u1849\u1852\u187e\u1883\u188f\u1899\u189b\u18a0\u18b8\u18c6\u18cf"+
		"\u18d8\u191c\u1920\u1926\u1931\u193d\u194d\u1988\u198c\u19dd\u19f7\u19fc"+
		"\u1a1b\u1a25\u1a2c\u1a36\u1a3c\u1a40\u1a44\u1a4b\u1a5d\u1a66\u1a70\u1a79"+
		"\u1a7e\u1a8b\u1a91\u1aa1\u1aa8\u1ab4\u1ac5\u1acf\u1ad8\u1ae5\u1af2\u1b04"+
		"\u1b08\u1b1b\u1b20\u1b37\u1b4e\u1b50\u1b58\u1b5c\u1b67\u1b6e\u1b75\u1b7c"+
		"\u1b7e\u1b80\u1ba4\u1ba8\u1bb8\u1bbf\u1bc6\u1bcd\u1bcf\u1bd1\u1bd9\u1be3"+
		"\u1bef\u1bf4\u1c19\u1c1d\u1c22\u1c2d\u1c31\u1c3f\u1c4b\u1c55\u1c59\u1c68"+
		"\u1c70\u1c74\u1c7e\u1c8a\u1c8f\u1c95\u1c99\u1ca2\u1caf\u1cb4\u1cbf\u1cc5"+
		"\u1ccf\u1cd4\u1cf5\u1cfb\u1d18\u1d28\u1d2c\u1d30\u1d34\u1d37\u1d40\u1d4d"+
		"\u1d57\u1d62\u1d69\u1d72\u1d76\u1d80\u1da2\u1dad\u1daf\u1dc0\u1dc6\u1dcf"+
		"\u1dd6\u1de8\u1def\u1df3\u1df7\u1e04\u1e08\u1e20\u1e24\u1e2a\u1e3c\u1e46"+
		"\u1e64\u1e6c\u1e7f\u1f65\u1f67\u1f73\u1fba\u1fbc\u1fd2\u20d5\u20dc\u20e9"+
		"\u20f8\u2100\u2109\u211d\u2122\u212c\u2138\u2143\u2149\u2150\u2158\u2166"+
		"\u2176\u217c\u2186\u218e\u219c\u21a6\u21b1\u21b9\u21c3\u21d0\u21da\u21e2"+
		"\u21ec\u21f7\u2201\u2213\u2222\u2229\u2238\u2243\u2247\u224d\u225d\u2266"+
		"\u226e\u2273\u2277\u2281\u2290\u229c\u22a6\u22ad\u22b7\u22ca\u22eb\u22f8"+
		"\u22fd\u2302\u2309";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}