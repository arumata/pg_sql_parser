// Generated from de/zalando/plpgsql/ast/Sql.g4 by ANTLR 4.2.3
package de.zalando.plpgsql.ast;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SqlParser extends Parser {
    static { RuntimeMetaData.checkVersion("4.2.3"); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__18=1, T__17=2, T__16=3, T__15=4, T__14=5, T__13=6, T__12=7, T__11=8, 
		T__10=9, T__9=10, T__8=11, T__7=12, T__6=13, T__5=14, T__4=15, T__3=16, 
		T__2=17, T__1=18, T__0=19, Op=20, ABORT_P=21, ABSOLUTE_P=22, ACCESS=23, 
		ACTION=24, ADD_P=25, ADMIN=26, AFTER=27, INTO=28, DECLARE=29, FROM=30, 
		AGGREGATE=31, ALL=32, ALSO=33, ALTER=34, ALWAYS=35, ANALYSE=36, ANALYZE=37, 
		AND=38, ANY=39, ARRAY=40, AS=41, ASC=42, ASSERTION=43, ASSIGNMENT=44, 
		ASYMMETRIC=45, AT=46, ATTRIBUTE=47, AUTHORIZATION=48, BACKWARD=49, BEFORE=50, 
		BEGIN_P=51, BETWEEN=52, BIGINT=53, BINARY=54, BIT=55, BOOLEAN_P=56, BOTH=57, 
		BY=58, CACHE=59, CALLED=60, CASCADE=61, CASCADED=62, CASE=63, CAST=64, 
		CATALOG_P=65, CHAIN=66, CHAR_P=67, CHARACTER=68, CHARACTERISTICS=69, CHECK=70, 
		CHECKPOINT=71, CLASS=72, CLOSE=73, CLUSTER=74, COALESCE=75, COLLATE=76, 
		COLLATION=77, COLUMN=78, COMMENT=79, COMMENTS=80, COMMIT=81, COMMITTED=82, 
		CONCURRENTLY=83, CONFIGURATION=84, CONNECTION=85, CONSTRAINT=86, CONSTRAINTS=87, 
		CONTENT_P=88, CONTINUE_P=89, CONVERSION_P=90, COPY=91, COST=92, CREATE=93, 
		CROSS=94, CSV=95, CURRENT_P=96, CURRENT_CATALOG=97, CURRENT_DATE=98, CURRENT_ROLE=99, 
		CURRENT_SCHEMA=100, CURRENT_TIME=101, CURRENT_TIMESTAMP=102, CURRENT_USER=103, 
		CURSOR=104, CYCLE=105, DATA_P=106, DATABASE=107, DAY_P=108, DEALLOCATE=109, 
		DEC=110, DECIMAL_P=111, DEFAULT=112, DEFAULTS=113, DEFERRABLE=114, DEFERRED=115, 
		DEFINER=116, DELETE_P=117, DELIMITER=118, DELIMITERS=119, DESC=120, DICTIONARY=121, 
		DISABLE_P=122, DISCARD=123, DISTINCT=124, DO=125, DOCUMENT_P=126, DOMAIN_P=127, 
		DOUBLE_P=128, DROP=129, EACH=130, ELSE=131, ENABLE_P=132, ENCODING=133, 
		ENCRYPTED=134, END_P=135, ENUM_P=136, ESCAPE=137, EXCEPT=138, EXCLUDE=139, 
		EXCLUDING=140, EXCLUSIVE=141, EXECUTE=142, EXISTS=143, EXPLAIN=144, EXTENSION=145, 
		EXTERNAL=146, EXTRACT=147, FALSE_P=148, FAMILY=149, FETCH=150, FIRST_P=151, 
		FLOAT_P=152, FOLLOWING=153, FOR=154, FORCE=155, FOREIGN=156, FORWARD=157, 
		FREEZE=158, FULL=159, FUNCTION=160, FUNCTIONS=161, GLOBAL=162, GRANT=163, 
		GRANTED=164, GREATEST=165, GROUP_P=166, HANDLER=167, HAVING=168, HEADER_P=169, 
		HOLD=170, HOUR_P=171, IDENTITY_P=172, IF_P=173, ILIKE=174, IMMEDIATE=175, 
		IMMUTABLE=176, IMPLICIT_P=177, IN_P=178, INCLUDING=179, INCREMENT=180, 
		INDEX=181, INDEXES=182, INHERIT=183, INHERITS=184, INITIALLY=185, INLINE_P=186, 
		INNER_P=187, INOUT=188, INPUT_P=189, INSENSITIVE=190, INSERT=191, INSTEAD=192, 
		INT_P=193, INTEGER=194, INTERSECT=195, INTERVAL=196, INVOKER=197, IS=198, 
		ISNULL=199, ISOLATION=200, JOIN=201, KEY=202, LABEL=203, LANGUAGE=204, 
		LARGE_P=205, LAST_P=206, LC_COLLATE_P=207, LC_CTYPE_P=208, LEADING=209, 
		LEAKPROOF=210, LEAST=211, LEFT=212, LEVEL=213, LIKE=214, LIMIT=215, LISTEN=216, 
		LOAD=217, LOCAL=218, LOCALTIME=219, LOCALTIMESTAMP=220, LOCATION=221, 
		LOCK_P=222, MAPPING=223, MATCH=224, MAXVALUE=225, MINUTE_P=226, MINVALUE=227, 
		MODE=228, MONTH_P=229, MOVE=230, NAME_P=231, NAMES=232, NATIONAL=233, 
		NATURAL=234, NCHAR=235, NEXT=236, NO=237, NONE=238, NOT=239, NOTHING=240, 
		NOTIFY=241, NOTNULL=242, NOWAIT=243, NULL_P=244, NULLIF=245, NULLS_P=246, 
		NUMERIC=247, OBJECT_P=248, OF=249, OFF=250, OFFSET=251, OIDS=252, ON=253, 
		ONLY=254, OPERATOR=255, OPTION=256, OPTIONS=257, OR=258, ORDER=259, OUT_P=260, 
		OUTER_P=261, OVER=262, OVERLAPS=263, OVERLAY=264, OWNED=265, OWNER=266, 
		PARSER=267, PARTIAL=268, PARTITION=269, PASSING=270, PASSWORD=271, PLACING=272, 
		PLANS=273, POSITION=274, PRECEDING=275, PRECISION=276, PREPARE=277, PREPARED=278, 
		PRESERVE=279, PRIMARY=280, PRIOR=281, PRIVILEGES=282, PROCEDURAL=283, 
		PROCEDURE=284, QUOTE=285, RANGE=286, READ=287, REAL=288, REASSIGN=289, 
		RECHECK=290, RECURSIVE=291, REF=292, REFERENCES=293, REINDEX=294, RELATIVE_P=295, 
		RELEASE=296, RENAME=297, REPEATABLE=298, REPLACE=299, REPLICA=300, RESET=301, 
		RESTART=302, RESTRICT=303, RETURNING=304, RETURNS=305, REVOKE=306, RIGHT=307, 
		ROLE=308, ROLLBACK=309, ROW=310, ROWS=311, RULE=312, SAVEPOINT=313, SCHEMA=314, 
		SCROLL=315, SEARCH=316, SECOND_P=317, SECURITY=318, SELECT=319, SEQUENCE=320, 
		SEQUENCES=321, SERIALIZABLE=322, SERVER=323, SESSION=324, SESSION_USER=325, 
		SET=326, SETOF=327, SHARE=328, SHOW=329, SIMILAR=330, SIMPLE=331, SMALLINT=332, 
		SNAPSHOT=333, SOME=334, STABLE=335, STANDALONE_P=336, START=337, STATEMENT=338, 
		STATISTICS=339, STDIN=340, STDOUT=341, STORAGE=342, STRICT_P=343, STRIP_P=344, 
		SUBSTRING=345, SYMMETRIC=346, SYSID=347, SYSTEM_P=348, TABLE=349, TABLES=350, 
		TABLESPACE=351, TEMP=352, TEMPLATE=353, TEMPORARY=354, TEXT_P=355, THEN=356, 
		TIME=357, TIMESTAMP=358, TO=359, TRAILING=360, TRANSACTION=361, TREAT=362, 
		TRIGGER=363, TRIM=364, TRUE_P=365, TRUNCATE=366, TRUSTED=367, TYPE_P=368, 
		TYPES_P=369, UNBOUNDED=370, UNCOMMITTED=371, UNENCRYPTED=372, UNION=373, 
		UNIQUE=374, UNKNOWN=375, UNLISTEN=376, UNLOGGED=377, UNTIL=378, UPDATE=379, 
		USER=380, USING=381, VACUUM=382, VALID=383, VALIDATE=384, VALIDATOR=385, 
		VALUE_P=386, VALUES=387, VARCHAR=388, VARIADIC=389, VARYING=390, VERBOSE=391, 
		VERSION_P=392, VIEW=393, VOLATILE=394, WHEN=395, WHERE=396, WHITESPACE_P=397, 
		WINDOW=398, WITH=399, WITHOUT=400, WORK=401, WRAPPER=402, WRITE=403, XML_P=404, 
		XMLATTRIBUTES=405, XMLCONCAT=406, XMLELEMENT=407, XMLEXISTS=408, XMLFOREST=409, 
		XMLPARSE=410, XMLPI=411, XMLROOT=412, XMLSERIALIZE=413, YEAR_P=414, YES_P=415, 
		ZONE=416, WS=417, SL_COMMENT=418, ML_COMMENT=419, IDENT=420, ICONST=421, 
		FCONST=422, BCONST=423, XCONST=424, SCONST=425, DECIMAL=426, DECIMALFAIL=427, 
		PARAM=428, WITH_TIME=429, LESS_LESS=430, GREATER_GREATER=431, NULLS_FIRST=432, 
		NULLS_LAST=433, DOLQ_START=434, DOLQ_CONT=435, DOLQDELIM=436, DOLQFAILED=437, 
		DOLQINSIDE=438, DQUOTE=439, XDSTART=440, XDSTOP=441, XDDOUBLE=442, XDINSIDE=443, 
		IDENT_START=444, IDENT_CONT=445, IDENTIFIER=446, TYPECAST=447, DOT_DOT=448, 
		COLON_EQUALS=449;
	public static final String[] tokenNames = {
		"<INVALID>", "']'", "'%'", "'^'", "')'", "'.'", "','", "'+'", "'['", "'-'", 
		"'*'", "'('", "':'", "'<'", "'='", "';'", "'<='", "'>'", "'/'", "'>='", 
		"'TODO'", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", 
		"AFTER", "INTO", "DECLARE", "FROM", "AGGREGATE", "ALL", "ALSO", "ALTER", 
		"ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSERTION", 
		"ASSIGNMENT", "ASYMMETRIC", "AT", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", 
		"BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", 
		"BOTH", "BY", "CACHE", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", 
		"CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", 
		"COLUMN", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", 
		"CONFIGURATION", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE", "CROSS", "CSV", 
		"CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DEFAULT", 
		"DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", 
		"DELIMITERS", "DESC", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", 
		"DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", 
		"ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EXCEPT", "EXCLUDE", 
		"EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXTENSION", 
		"EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FIRST_P", "FLOAT_P", 
		"FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FULL", "FUNCTION", 
		"FUNCTIONS", "GLOBAL", "GRANT", "GRANTED", "GREATEST", "GROUP_P", "HANDLER", 
		"HAVING", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "ILIKE", 
		"IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IN_P", "INCLUDING", "INCREMENT", 
		"INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", 
		"INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER", 
		"INTERSECT", "INTERVAL", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", 
		"KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LC_COLLATE_P", "LC_CTYPE_P", 
		"LEADING", "LEAKPROOF", "LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", 
		"LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P", 
		"MAPPING", "MATCH", "MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", 
		"MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT", "NO", 
		"NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", 
		"NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "ON", 
		"ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "OUT_P", "OUTER_P", 
		"OVER", "OVERLAPS", "OVERLAY", "OWNED", "OWNER", "PARSER", "PARTIAL", 
		"PARTITION", "PASSING", "PASSWORD", "PLACING", "PLANS", "POSITION", "PRECEDING", 
		"PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", 
		"PROCEDURAL", "PROCEDURE", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", 
		"RECHECK", "RECURSIVE", "REF", "REFERENCES", "REINDEX", "RELATIVE_P", 
		"RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", 
		"RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", 
		"ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND_P", 
		"SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SESSION_USER", "SET", "SETOF", "SHARE", "SHOW", "SIMILAR", 
		"SIMPLE", "SMALLINT", "SNAPSHOT", "SOME", "STABLE", "STANDALONE_P", "START", 
		"STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
		"SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESPACE", 
		"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME", "TIMESTAMP", 
		"TO", "TRAILING", "TRANSACTION", "TREAT", "TRIGGER", "TRIM", "TRUE_P", 
		"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
		"UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
		"UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", 
		"VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", 
		"VIEW", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
		"XMLSERIALIZE", "YEAR_P", "YES_P", "ZONE", "WS", "SL_COMMENT", "ML_COMMENT", 
		"IDENT", "ICONST", "FCONST", "BCONST", "XCONST", "SCONST", "DECIMAL", 
		"DECIMALFAIL", "PARAM", "WITH_TIME", "'<<'", "'>>'", "NULLS_FIRST", "NULLS_LAST", 
		"DOLQ_START", "DOLQ_CONT", "DOLQDELIM", "DOLQFAILED", "DOLQINSIDE", "'\"'", 
		"XDSTART", "XDSTOP", "XDDOUBLE", "XDINSIDE", "IDENT_START", "IDENT_CONT", 
		"IDENTIFIER", "'::'", "DOT_DOT", "':='"
	};
	public static final int
		RULE_stmtblock = 0, RULE_stmtmulti = 1, RULE_stmt = 2, RULE_createRoleStmt = 3, 
		RULE_optRoleList = 4, RULE_alteroptRoleList = 5, RULE_alterOptRoleElem = 6, 
		RULE_createOptRoleElem = 7, RULE_createUserStmt = 8, RULE_alterRoleStmt = 9, 
		RULE_opt_in_database = 10, RULE_alterRoleSetStmt = 11, RULE_alterUserStmt = 12, 
		RULE_alterUserSetStmt = 13, RULE_dropRoleStmt = 14, RULE_dropUserStmt = 15, 
		RULE_createGroupStmt = 16, RULE_alterGroupStmt = 17, RULE_add_drop = 18, 
		RULE_dropGroupStmt = 19, RULE_createSchemaStmt = 20, RULE_optSchemaName = 21, 
		RULE_optSchemaEltList = 22, RULE_schema_stmt = 23, RULE_variableSetStmt = 24, 
		RULE_set_rest = 25, RULE_set_rest_more = 26, RULE_var_name = 27, RULE_var_list = 28, 
		RULE_var_value = 29, RULE_iso_level = 30, RULE_opt_boolean_or_string = 31, 
		RULE_zone_value = 32, RULE_opt_encoding = 33, RULE_colId_or_Sconst = 34, 
		RULE_variableResetStmt = 35, RULE_setResetClause = 36, RULE_functionsetResetClause = 37, 
		RULE_variableShowStmt = 38, RULE_constraintsSetStmt = 39, RULE_constraints_set_list = 40, 
		RULE_constraints_set_mode = 41, RULE_checkPointStmt = 42, RULE_discardStmt = 43, 
		RULE_alterTableStmt = 44, RULE_alter_table_cmds = 45, RULE_alter_table_cmd = 46, 
		RULE_alter_column_default = 47, RULE_opt_drop_behavior = 48, RULE_opt_collate_clause = 49, 
		RULE_alter_using = 50, RULE_reloptions = 51, RULE_opt_reloptions = 52, 
		RULE_reloption_list = 53, RULE_reloption_elem = 54, RULE_alterCompositeTypeStmt = 55, 
		RULE_alter_type_cmds = 56, RULE_alter_type_cmd = 57, RULE_closePortalStmt = 58, 
		RULE_copyStmt = 59, RULE_copy_from = 60, RULE_copy_file_name = 61, RULE_copy_options = 62, 
		RULE_copy_opt_list = 63, RULE_copy_opt_item = 64, RULE_opt_binary = 65, 
		RULE_opt_oids = 66, RULE_copy_delimiter = 67, RULE_opt_using = 68, RULE_copy_generic_opt_list = 69, 
		RULE_copy_generic_opt_elem = 70, RULE_copy_generic_opt_arg = 71, RULE_copy_generic_opt_arg_list = 72, 
		RULE_copy_generic_opt_arg_list_item = 73, RULE_createStmt = 74, RULE_optTemp = 75, 
		RULE_opttableElementList = 76, RULE_opttypedtableElementList = 77, RULE_tableElementList = 78, 
		RULE_typedtableElementList = 79, RULE_tableElement = 80, RULE_typedtableElement = 81, 
		RULE_columnDef = 82, RULE_columnOptions = 83, RULE_colQualList = 84, RULE_colConstraint = 85, 
		RULE_colconstraintElem = 86, RULE_constraintAttr = 87, RULE_tableLikeClause = 88, 
		RULE_tableLikeOptionList = 89, RULE_tableLikeOption = 90, RULE_tableConstraint = 91, 
		RULE_constraintElem = 92, RULE_opt_no_inherit = 93, RULE_opt_column_list = 94, 
		RULE_columnList = 95, RULE_columnElem = 96, RULE_key_match = 97, RULE_exclusionConstraintList = 98, 
		RULE_exclusionconstraintElem = 99, RULE_exclusionWhereClause = 100, RULE_key_actions = 101, 
		RULE_key_update = 102, RULE_key_delete = 103, RULE_key_action = 104, RULE_optInherit = 105, 
		RULE_optWith = 106, RULE_onCommitOption = 107, RULE_optTableSpace = 108, 
		RULE_optConsTableSpace = 109, RULE_existingIndex = 110, RULE_createAsStmt = 111, 
		RULE_create_as_target = 112, RULE_opt_with_data = 113, RULE_createSeqStmt = 114, 
		RULE_alterSeqStmt = 115, RULE_optseqOptList = 116, RULE_seqOptList = 117, 
		RULE_seqOptElem = 118, RULE_opt_by = 119, RULE_numericOnly = 120, RULE_numericOnly_list = 121, 
		RULE_createPLangStmt = 122, RULE_opt_trusted = 123, RULE_handler_name = 124, 
		RULE_opt_inline_handler = 125, RULE_validator_clause = 126, RULE_opt_validator = 127, 
		RULE_dropPLangStmt = 128, RULE_opt_procedural = 129, RULE_createTableSpaceStmt = 130, 
		RULE_optTableSpaceOwner = 131, RULE_dropTableSpaceStmt = 132, RULE_createExtensionStmt = 133, 
		RULE_create_extension_opt_list = 134, RULE_create_extension_opt_item = 135, 
		RULE_alterExtensionStmt = 136, RULE_alter_extension_opt_list = 137, RULE_alter_extension_opt_item = 138, 
		RULE_alterExtensionContentsStmt = 139, RULE_createFdwStmt = 140, RULE_fdw_option = 141, 
		RULE_fdw_options = 142, RULE_opt_fdw_options = 143, RULE_dropFdwStmt = 144, 
		RULE_alterFdwStmt = 145, RULE_create_generic_options = 146, RULE_generic_option_list = 147, 
		RULE_alter_generic_options = 148, RULE_alter_generic_option_list = 149, 
		RULE_alter_generic_option_elem = 150, RULE_generic_option_elem = 151, 
		RULE_generic_option_name = 152, RULE_generic_option_arg = 153, RULE_createForeignServerStmt = 154, 
		RULE_opt_type = 155, RULE_foreign_server_version = 156, RULE_opt_foreign_server_version = 157, 
		RULE_dropForeignServerStmt = 158, RULE_alterForeignServerStmt = 159, RULE_createForeignTableStmt = 160, 
		RULE_optforeigntableElementList = 161, RULE_foreigntableElementList = 162, 
		RULE_foreigntableElement = 163, RULE_alterForeignTableStmt = 164, RULE_createUserMappingStmt = 165, 
		RULE_auth_ident = 166, RULE_dropUserMappingStmt = 167, RULE_alterUserMappingStmt = 168, 
		RULE_createTrigStmt = 169, RULE_triggerActionTime = 170, RULE_triggerEvents = 171, 
		RULE_triggerOneEvent = 172, RULE_triggerForSpec = 173, RULE_triggerForOptEach = 174, 
		RULE_triggerForType = 175, RULE_triggerWhen = 176, RULE_triggerFuncArgs = 177, 
		RULE_triggerFuncArg = 178, RULE_optConstrFromTable = 179, RULE_constraintAttributeSpec = 180, 
		RULE_constraintAttributeElem = 181, RULE_dropTrigStmt = 182, RULE_createAssertStmt = 183, 
		RULE_dropAssertStmt = 184, RULE_defineStmt = 185, RULE_definition = 186, 
		RULE_def_list = 187, RULE_def_elem = 188, RULE_def_arg = 189, RULE_aggr_args = 190, 
		RULE_old_aggr_definition = 191, RULE_old_aggr_list = 192, RULE_old_aggr_elem = 193, 
		RULE_opt_enum_val_list = 194, RULE_enum_val_list = 195, RULE_alterEnumStmt = 196, 
		RULE_createOpClassStmt = 197, RULE_opclass_item_list = 198, RULE_opclass_item = 199, 
		RULE_opt_default = 200, RULE_opt_opfamily = 201, RULE_opclass_purpose = 202, 
		RULE_opt_recheck = 203, RULE_createOpFamilyStmt = 204, RULE_alterOpFamilyStmt = 205, 
		RULE_opclass_drop_list = 206, RULE_opclass_drop = 207, RULE_dropOpClassStmt = 208, 
		RULE_dropOpFamilyStmt = 209, RULE_dropOwnedStmt = 210, RULE_reassignOwnedStmt = 211, 
		RULE_dropStmt = 212, RULE_drop_type = 213, RULE_any_name_list = 214, RULE_any_name = 215, 
		RULE_attrs = 216, RULE_truncateStmt = 217, RULE_opt_restart_seqs = 218, 
		RULE_commentStmt = 219, RULE_comment_type = 220, RULE_comment_text = 221, 
		RULE_secLabelStmt = 222, RULE_opt_provider = 223, RULE_security_label_type = 224, 
		RULE_security_label = 225, RULE_fetchStmt = 226, RULE_fetch_args = 227, 
		RULE_from_in = 228, RULE_opt_from_in = 229, RULE_grantStmt = 230, RULE_revokeStmt = 231, 
		RULE_privileges = 232, RULE_privilege_list = 233, RULE_privilege = 234, 
		RULE_privilege_target = 235, RULE_grantee_list = 236, RULE_grantee = 237, 
		RULE_opt_grant_grant_option = 238, RULE_function_with_argtypes_list = 239, 
		RULE_function_with_argtypes = 240, RULE_grantRoleStmt = 241, RULE_revokeRoleStmt = 242, 
		RULE_opt_grant_admin_option = 243, RULE_opt_granted_by = 244, RULE_alterDefaultPrivilegesStmt = 245, 
		RULE_defACLOptionList = 246, RULE_defACLOption = 247, RULE_defACLAction = 248, 
		RULE_defacl_privilege_target = 249, RULE_indexStmt = 250, RULE_opt_unique = 251, 
		RULE_opt_concurrently = 252, RULE_opt_index_name = 253, RULE_access_method_clause = 254, 
		RULE_index_params = 255, RULE_index_elem = 256, RULE_opt_collate = 257, 
		RULE_opt_class = 258, RULE_opt_asc_desc = 259, RULE_opt_nulls_order = 260, 
		RULE_createFunctionStmt = 261, RULE_opt_or_replace = 262, RULE_func_args = 263, 
		RULE_func_args_list = 264, RULE_func_args_with_defaults = 265, RULE_func_args_with_defaults_list = 266, 
		RULE_func_arg = 267, RULE_arg_class = 268, RULE_param_name = 269, RULE_func_return = 270, 
		RULE_func_type = 271, RULE_func_arg_with_default = 272, RULE_createfunc_opt_list = 273, 
		RULE_common_func_opt_item = 274, RULE_createfunc_opt_item = 275, RULE_func_as = 276, 
		RULE_opt_definition = 277, RULE_table_func_column = 278, RULE_table_func_column_list = 279, 
		RULE_alterFunctionStmt = 280, RULE_alterfunc_opt_list = 281, RULE_opt_restrict = 282, 
		RULE_removeFuncStmt = 283, RULE_removeAggrStmt = 284, RULE_removeOperStmt = 285, 
		RULE_oper_argtypes = 286, RULE_any_operator = 287, RULE_doStmt = 288, 
		RULE_dostmt_opt_list = 289, RULE_dostmt_opt_item = 290, RULE_createCastStmt = 291, 
		RULE_cast_context = 292, RULE_dropCastStmt = 293, RULE_opt_if_exists = 294, 
		RULE_reindexStmt = 295, RULE_reindex_type = 296, RULE_opt_force = 297, 
		RULE_renameStmt = 298, RULE_opt_column = 299, RULE_opt_set_data = 300, 
		RULE_alterObjectSchemaStmt = 301, RULE_alterOwnerStmt = 302, RULE_ruleStmt = 303, 
		RULE_ruleActionList = 304, RULE_ruleActionMulti = 305, RULE_ruleActionStmt = 306, 
		RULE_ruleActionStmtOrEmpty = 307, RULE_event = 308, RULE_opt_instead = 309, 
		RULE_dropruleStmt = 310, RULE_notifyStmt = 311, RULE_notify_payload = 312, 
		RULE_listenStmt = 313, RULE_unlistenStmt = 314, RULE_transactionStmt = 315, 
		RULE_opt_transaction = 316, RULE_transaction_mode_item = 317, RULE_transaction_mode_list = 318, 
		RULE_transaction_mode_list_or_empty = 319, RULE_viewStmt = 320, RULE_opt_check_option = 321, 
		RULE_loadStmt = 322, RULE_createdbStmt = 323, RULE_createdb_opt_list = 324, 
		RULE_createdb_opt_item = 325, RULE_opt_equal = 326, RULE_alterDatabaseStmt = 327, 
		RULE_alterDatabaseSetStmt = 328, RULE_alterdb_opt_list = 329, RULE_alterdb_opt_item = 330, 
		RULE_dropdbStmt = 331, RULE_createDomainStmt = 332, RULE_alterDomainStmt = 333, 
		RULE_opt_as = 334, RULE_alterTSDictionaryStmt = 335, RULE_alterTSConfigurationStmt = 336, 
		RULE_createConversionStmt = 337, RULE_clusterStmt = 338, RULE_cluster_index_specification = 339, 
		RULE_vacuumStmt = 340, RULE_vacuum_option_list = 341, RULE_vacuum_option_elem = 342, 
		RULE_analyzeStmt = 343, RULE_analyze_keyword = 344, RULE_opt_verbose = 345, 
		RULE_opt_full = 346, RULE_opt_freeze = 347, RULE_opt_name_list = 348, 
		RULE_explainStmt = 349, RULE_explainableStmt = 350, RULE_explain_option_list = 351, 
		RULE_explain_option_elem = 352, RULE_explain_option_name = 353, RULE_explain_option_arg = 354, 
		RULE_prepareStmt = 355, RULE_prep_type_clause = 356, RULE_preparableStmt = 357, 
		RULE_executeStmt = 358, RULE_execute_param_clause = 359, RULE_deallocateStmt = 360, 
		RULE_insertStmt = 361, RULE_insert_rest = 362, RULE_insert_column_list = 363, 
		RULE_insert_column_item = 364, RULE_returning_clause = 365, RULE_deleteStmt = 366, 
		RULE_using_clause = 367, RULE_lockStmt = 368, RULE_opt_lock = 369, RULE_lock_type = 370, 
		RULE_opt_nowait = 371, RULE_updateStmt = 372, RULE_set_clause_list = 373, 
		RULE_set_clause = 374, RULE_single_set_clause = 375, RULE_multiple_set_clause = 376, 
		RULE_set_target = 377, RULE_set_target_list = 378, RULE_declareCursorStmt = 379, 
		RULE_cursor_name = 380, RULE_cursor_options = 381, RULE_opt_hold = 382, 
		RULE_selectStmt = 383, RULE_select_with_parens = 384, RULE_select_no_parens = 385, 
		RULE_select_clause = 386, RULE_simple_select = 387, RULE_with_clause = 388, 
		RULE_cte_list = 389, RULE_common_table_expr = 390, RULE_opt_with_clause = 391, 
		RULE_into_clause = 392, RULE_optTempTableName = 393, RULE_opt_table = 394, 
		RULE_opt_all = 395, RULE_opt_distinct = 396, RULE_opt_sort_clause = 397, 
		RULE_sort_clause = 398, RULE_sortby_list = 399, RULE_sortby = 400, RULE_select_limit = 401, 
		RULE_opt_select_limit = 402, RULE_limit_clause = 403, RULE_offset_clause = 404, 
		RULE_select_limit_value = 405, RULE_select_offset_value = 406, RULE_opt_select_fetch_first_value = 407, 
		RULE_select_offset_value2 = 408, RULE_row_or_rows = 409, RULE_first_or_next = 410, 
		RULE_group_clause = 411, RULE_having_clause = 412, RULE_for_locking_clause = 413, 
		RULE_opt_for_locking_clause = 414, RULE_for_locking_items = 415, RULE_for_locking_item = 416, 
		RULE_locked_rels_list = 417, RULE_values_clause = 418, RULE_from_clause = 419, 
		RULE_from_list = 420, RULE_table_ref = 421, RULE_table_ref2 = 422, RULE_joined_table = 423, 
		RULE_alias_clause = 424, RULE_join_type = 425, RULE_join_qual = 426, RULE_relation_expr = 427, 
		RULE_relation_expr_list = 428, RULE_relation_expr_opt_alias = 429, RULE_func_table = 430, 
		RULE_where_clause = 431, RULE_where_or_current_clause = 432, RULE_opttableFuncElementList = 433, 
		RULE_tableFuncElementList = 434, RULE_tableFuncElement = 435, RULE_typename = 436, 
		RULE_opt_array_bounds = 437, RULE_simpletypename = 438, RULE_consttypename = 439, 
		RULE_genericType = 440, RULE_opt_type_modifiers = 441, RULE_numeric = 442, 
		RULE_opt_float = 443, RULE_bit = 444, RULE_constbit = 445, RULE_bitWithLength = 446, 
		RULE_bitWithoutLength = 447, RULE_character = 448, RULE_constcharacter = 449, 
		RULE_characterWithLength = 450, RULE_characterWithoutLength = 451, RULE_character_def = 452, 
		RULE_opt_varying = 453, RULE_opt_charset = 454, RULE_constDatetime = 455, 
		RULE_constInterval = 456, RULE_opt_timezone = 457, RULE_opt_interval = 458, 
		RULE_interval_second = 459, RULE_a_expr = 460, RULE_b_expr = 461, RULE_c_expr = 462, 
		RULE_func_expr = 463, RULE_xml_root_version = 464, RULE_opt_xml_root_standalone = 465, 
		RULE_xml_attributes = 466, RULE_xml_attribute_list = 467, RULE_xml_attribute_el = 468, 
		RULE_document_or_content = 469, RULE_xml_whitespace_option = 470, RULE_xmlexists_argument = 471, 
		RULE_window_clause = 472, RULE_window_definition_list = 473, RULE_window_definition = 474, 
		RULE_over_clause = 475, RULE_window_specification = 476, RULE_opt_existing_window_name = 477, 
		RULE_opt_partition_clause = 478, RULE_opt_frame_clause = 479, RULE_frame_extent = 480, 
		RULE_frame_bound = 481, RULE_row = 482, RULE_sub_type = 483, RULE_all_Op = 484, 
		RULE_mathOp = 485, RULE_qual_Op = 486, RULE_qual_all_Op = 487, RULE_subquery_Op = 488, 
		RULE_expr_list = 489, RULE_func_arg_list = 490, RULE_func_arg_expr = 491, 
		RULE_type_list = 492, RULE_array_expr = 493, RULE_array_expr_list = 494, 
		RULE_extract_list = 495, RULE_extract_arg = 496, RULE_overlay_list = 497, 
		RULE_overlay_placing = 498, RULE_position_list = 499, RULE_substr_list = 500, 
		RULE_substr_from = 501, RULE_substr_for = 502, RULE_trim_list = 503, RULE_in_expr = 504, 
		RULE_case_expr = 505, RULE_when_clause_list = 506, RULE_when_clause = 507, 
		RULE_case_default = 508, RULE_case_arg = 509, RULE_columnref = 510, RULE_indirection_el = 511, 
		RULE_indirection = 512, RULE_opt_indirection = 513, RULE_opt_asymmetric = 514, 
		RULE_ctext_expr = 515, RULE_ctext_expr_list = 516, RULE_ctext_row = 517, 
		RULE_target_list = 518, RULE_target_el = 519, RULE_qualified_name_list = 520, 
		RULE_qualified_name = 521, RULE_name_list = 522, RULE_name = 523, RULE_database_name = 524, 
		RULE_access_method = 525, RULE_attr_name = 526, RULE_index_name = 527, 
		RULE_file_name = 528, RULE_func_name = 529, RULE_aexprConst = 530, RULE_iConst = 531, 
		RULE_sConst = 532, RULE_roleId = 533, RULE_signedIconst = 534, RULE_colId = 535, 
		RULE_type_function_name = 536, RULE_colLabel = 537, RULE_unreserved_keyword = 538, 
		RULE_col_name_keyword = 539, RULE_type_func_name_keyword = 540, RULE_reserved_keyword = 541;
	public static final String[] ruleNames = {
		"stmtblock", "stmtmulti", "stmt", "createRoleStmt", "optRoleList", "alteroptRoleList", 
		"alterOptRoleElem", "createOptRoleElem", "createUserStmt", "alterRoleStmt", 
		"opt_in_database", "alterRoleSetStmt", "alterUserStmt", "alterUserSetStmt", 
		"dropRoleStmt", "dropUserStmt", "createGroupStmt", "alterGroupStmt", "add_drop", 
		"dropGroupStmt", "createSchemaStmt", "optSchemaName", "optSchemaEltList", 
		"schema_stmt", "variableSetStmt", "set_rest", "set_rest_more", "var_name", 
		"var_list", "var_value", "iso_level", "opt_boolean_or_string", "zone_value", 
		"opt_encoding", "colId_or_Sconst", "variableResetStmt", "setResetClause", 
		"functionsetResetClause", "variableShowStmt", "constraintsSetStmt", "constraints_set_list", 
		"constraints_set_mode", "checkPointStmt", "discardStmt", "alterTableStmt", 
		"alter_table_cmds", "alter_table_cmd", "alter_column_default", "opt_drop_behavior", 
		"opt_collate_clause", "alter_using", "reloptions", "opt_reloptions", "reloption_list", 
		"reloption_elem", "alterCompositeTypeStmt", "alter_type_cmds", "alter_type_cmd", 
		"closePortalStmt", "copyStmt", "copy_from", "copy_file_name", "copy_options", 
		"copy_opt_list", "copy_opt_item", "opt_binary", "opt_oids", "copy_delimiter", 
		"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createStmt", 
		"optTemp", "opttableElementList", "opttypedtableElementList", "tableElementList", 
		"typedtableElementList", "tableElement", "typedtableElement", "columnDef", 
		"columnOptions", "colQualList", "colConstraint", "colconstraintElem", 
		"constraintAttr", "tableLikeClause", "tableLikeOptionList", "tableLikeOption", 
		"tableConstraint", "constraintElem", "opt_no_inherit", "opt_column_list", 
		"columnList", "columnElem", "key_match", "exclusionConstraintList", "exclusionconstraintElem", 
		"exclusionWhereClause", "key_actions", "key_update", "key_delete", "key_action", 
		"optInherit", "optWith", "onCommitOption", "optTableSpace", "optConsTableSpace", 
		"existingIndex", "createAsStmt", "create_as_target", "opt_with_data", 
		"createSeqStmt", "alterSeqStmt", "optseqOptList", "seqOptList", "seqOptElem", 
		"opt_by", "numericOnly", "numericOnly_list", "createPLangStmt", "opt_trusted", 
		"handler_name", "opt_inline_handler", "validator_clause", "opt_validator", 
		"dropPLangStmt", "opt_procedural", "createTableSpaceStmt", "optTableSpaceOwner", 
		"dropTableSpaceStmt", "createExtensionStmt", "create_extension_opt_list", 
		"create_extension_opt_item", "alterExtensionStmt", "alter_extension_opt_list", 
		"alter_extension_opt_item", "alterExtensionContentsStmt", "createFdwStmt", 
		"fdw_option", "fdw_options", "opt_fdw_options", "dropFdwStmt", "alterFdwStmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createForeignServerStmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "dropForeignServerStmt", 
		"alterForeignServerStmt", "createForeignTableStmt", "optforeigntableElementList", 
		"foreigntableElementList", "foreigntableElement", "alterForeignTableStmt", 
		"createUserMappingStmt", "auth_ident", "dropUserMappingStmt", "alterUserMappingStmt", 
		"createTrigStmt", "triggerActionTime", "triggerEvents", "triggerOneEvent", 
		"triggerForSpec", "triggerForOptEach", "triggerForType", "triggerWhen", 
		"triggerFuncArgs", "triggerFuncArg", "optConstrFromTable", "constraintAttributeSpec", 
		"constraintAttributeElem", "dropTrigStmt", "createAssertStmt", "dropAssertStmt", 
		"defineStmt", "definition", "def_list", "def_elem", "def_arg", "aggr_args", 
		"old_aggr_definition", "old_aggr_list", "old_aggr_elem", "opt_enum_val_list", 
		"enum_val_list", "alterEnumStmt", "createOpClassStmt", "opclass_item_list", 
		"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
		"createOpFamilyStmt", "alterOpFamilyStmt", "opclass_drop_list", "opclass_drop", 
		"dropOpClassStmt", "dropOpFamilyStmt", "dropOwnedStmt", "reassignOwnedStmt", 
		"dropStmt", "drop_type", "any_name_list", "any_name", "attrs", "truncateStmt", 
		"opt_restart_seqs", "commentStmt", "comment_type", "comment_text", "secLabelStmt", 
		"opt_provider", "security_label_type", "security_label", "fetchStmt", 
		"fetch_args", "from_in", "opt_from_in", "grantStmt", "revokeStmt", "privileges", 
		"privilege_list", "privilege", "privilege_target", "grantee_list", "grantee", 
		"opt_grant_grant_option", "function_with_argtypes_list", "function_with_argtypes", 
		"grantRoleStmt", "revokeRoleStmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterDefaultPrivilegesStmt", "defACLOptionList", "defACLOption", "defACLAction", 
		"defacl_privilege_target", "indexStmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem", 
		"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createFunctionStmt", 
		"opt_or_replace", "func_args", "func_args_list", "func_args_with_defaults", 
		"func_args_with_defaults_list", "func_arg", "arg_class", "param_name", 
		"func_return", "func_type", "func_arg_with_default", "createfunc_opt_list", 
		"common_func_opt_item", "createfunc_opt_item", "func_as", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterFunctionStmt", "alterfunc_opt_list", 
		"opt_restrict", "removeFuncStmt", "removeAggrStmt", "removeOperStmt", 
		"oper_argtypes", "any_operator", "doStmt", "dostmt_opt_list", "dostmt_opt_item", 
		"createCastStmt", "cast_context", "dropCastStmt", "opt_if_exists", "reindexStmt", 
		"reindex_type", "opt_force", "renameStmt", "opt_column", "opt_set_data", 
		"alterObjectSchemaStmt", "alterOwnerStmt", "ruleStmt", "ruleActionList", 
		"ruleActionMulti", "ruleActionStmt", "ruleActionStmtOrEmpty", "event", 
		"opt_instead", "dropruleStmt", "notifyStmt", "notify_payload", "listenStmt", 
		"unlistenStmt", "transactionStmt", "opt_transaction", "transaction_mode_item", 
		"transaction_mode_list", "transaction_mode_list_or_empty", "viewStmt", 
		"opt_check_option", "loadStmt", "createdbStmt", "createdb_opt_list", "createdb_opt_item", 
		"opt_equal", "alterDatabaseStmt", "alterDatabaseSetStmt", "alterdb_opt_list", 
		"alterdb_opt_item", "dropdbStmt", "createDomainStmt", "alterDomainStmt", 
		"opt_as", "alterTSDictionaryStmt", "alterTSConfigurationStmt", "createConversionStmt", 
		"clusterStmt", "cluster_index_specification", "vacuumStmt", "vacuum_option_list", 
		"vacuum_option_elem", "analyzeStmt", "analyze_keyword", "opt_verbose", 
		"opt_full", "opt_freeze", "opt_name_list", "explainStmt", "explainableStmt", 
		"explain_option_list", "explain_option_elem", "explain_option_name", "explain_option_arg", 
		"prepareStmt", "prep_type_clause", "preparableStmt", "executeStmt", "execute_param_clause", 
		"deallocateStmt", "insertStmt", "insert_rest", "insert_column_list", "insert_column_item", 
		"returning_clause", "deleteStmt", "using_clause", "lockStmt", "opt_lock", 
		"lock_type", "opt_nowait", "updateStmt", "set_clause_list", "set_clause", 
		"single_set_clause", "multiple_set_clause", "set_target", "set_target_list", 
		"declareCursorStmt", "cursor_name", "cursor_options", "opt_hold", "selectStmt", 
		"select_with_parens", "select_no_parens", "select_clause", "simple_select", 
		"with_clause", "cte_list", "common_table_expr", "opt_with_clause", "into_clause", 
		"optTempTableName", "opt_table", "opt_all", "opt_distinct", "opt_sort_clause", 
		"sort_clause", "sortby_list", "sortby", "select_limit", "opt_select_limit", 
		"limit_clause", "offset_clause", "select_limit_value", "select_offset_value", 
		"opt_select_fetch_first_value", "select_offset_value2", "row_or_rows", 
		"first_or_next", "group_clause", "having_clause", "for_locking_clause", 
		"opt_for_locking_clause", "for_locking_items", "for_locking_item", "locked_rels_list", 
		"values_clause", "from_clause", "from_list", "table_ref", "table_ref2", 
		"joined_table", "alias_clause", "join_type", "join_qual", "relation_expr", 
		"relation_expr_list", "relation_expr_opt_alias", "func_table", "where_clause", 
		"where_or_current_clause", "opttableFuncElementList", "tableFuncElementList", 
		"tableFuncElement", "typename", "opt_array_bounds", "simpletypename", 
		"consttypename", "genericType", "opt_type_modifiers", "numeric", "opt_float", 
		"bit", "constbit", "bitWithLength", "bitWithoutLength", "character", "constcharacter", 
		"characterWithLength", "characterWithoutLength", "character_def", "opt_varying", 
		"opt_charset", "constDatetime", "constInterval", "opt_timezone", "opt_interval", 
		"interval_second", "a_expr", "b_expr", "c_expr", "func_expr", "xml_root_version", 
		"opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", "xml_attribute_el", 
		"document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"window_clause", "window_definition_list", "window_definition", "over_clause", 
		"window_specification", "opt_existing_window_name", "opt_partition_clause", 
		"opt_frame_clause", "frame_extent", "frame_bound", "row", "sub_type", 
		"all_Op", "mathOp", "qual_Op", "qual_all_Op", "subquery_Op", "expr_list", 
		"func_arg_list", "func_arg_expr", "type_list", "array_expr", "array_expr_list", 
		"extract_list", "extract_arg", "overlay_list", "overlay_placing", "position_list", 
		"substr_list", "substr_from", "substr_for", "trim_list", "in_expr", "case_expr", 
		"when_clause_list", "when_clause", "case_default", "case_arg", "columnref", 
		"indirection_el", "indirection", "opt_indirection", "opt_asymmetric", 
		"ctext_expr", "ctext_expr_list", "ctext_row", "target_list", "target_el", 
		"qualified_name_list", "qualified_name", "name_list", "name", "database_name", 
		"access_method", "attr_name", "index_name", "file_name", "func_name", 
		"aexprConst", "iConst", "sConst", "roleId", "signedIconst", "colId", "type_function_name", 
		"colLabel", "unreserved_keyword", "col_name_keyword", "type_func_name_keyword", 
		"reserved_keyword"
	};

	@Override
	public String getGrammarFileName() { return "Sql.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1084); stmtmulti(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		return stmtmulti(0);
	}

	private StmtmultiContext stmtmulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, _parentState);
		StmtmultiContext _prevctx = _localctx;
		int _startState = 2;
		enterRecursionRule(_localctx, 2, RULE_stmtmulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1087); stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1094);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StmtmultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmtmulti);
					setState(1089);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1090); match(T__4);
					setState(1091); stmt();
					}
					} 
				}
				setState(1096);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public PrepareStmtContext prepareStmt() {
			return getRuleContext(PrepareStmtContext.class,0);
		}
		public RemoveOperStmtContext removeOperStmt() {
			return getRuleContext(RemoveOperStmtContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public AlterTableStmtContext alterTableStmt() {
			return getRuleContext(AlterTableStmtContext.class,0);
		}
		public CreateRoleStmtContext createRoleStmt() {
			return getRuleContext(CreateRoleStmtContext.class,0);
		}
		public AlterOpFamilyStmtContext alterOpFamilyStmt() {
			return getRuleContext(AlterOpFamilyStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public CreateOpFamilyStmtContext createOpFamilyStmt() {
			return getRuleContext(CreateOpFamilyStmtContext.class,0);
		}
		public DropFdwStmtContext dropFdwStmt() {
			return getRuleContext(DropFdwStmtContext.class,0);
		}
		public DropRoleStmtContext dropRoleStmt() {
			return getRuleContext(DropRoleStmtContext.class,0);
		}
		public VariableShowStmtContext variableShowStmt() {
			return getRuleContext(VariableShowStmtContext.class,0);
		}
		public DropTableSpaceStmtContext dropTableSpaceStmt() {
			return getRuleContext(DropTableSpaceStmtContext.class,0);
		}
		public DropUserMappingStmtContext dropUserMappingStmt() {
			return getRuleContext(DropUserMappingStmtContext.class,0);
		}
		public ReassignOwnedStmtContext reassignOwnedStmt() {
			return getRuleContext(ReassignOwnedStmtContext.class,0);
		}
		public AlterUserStmtContext alterUserStmt() {
			return getRuleContext(AlterUserStmtContext.class,0);
		}
		public LockStmtContext lockStmt() {
			return getRuleContext(LockStmtContext.class,0);
		}
		public ListenStmtContext listenStmt() {
			return getRuleContext(ListenStmtContext.class,0);
		}
		public CreateAssertStmtContext createAssertStmt() {
			return getRuleContext(CreateAssertStmtContext.class,0);
		}
		public CheckPointStmtContext checkPointStmt() {
			return getRuleContext(CheckPointStmtContext.class,0);
		}
		public RuleStmtContext ruleStmt() {
			return getRuleContext(RuleStmtContext.class,0);
		}
		public AlterSeqStmtContext alterSeqStmt() {
			return getRuleContext(AlterSeqStmtContext.class,0);
		}
		public DropPLangStmtContext dropPLangStmt() {
			return getRuleContext(DropPLangStmtContext.class,0);
		}
		public RemoveAggrStmtContext removeAggrStmt() {
			return getRuleContext(RemoveAggrStmtContext.class,0);
		}
		public DiscardStmtContext discardStmt() {
			return getRuleContext(DiscardStmtContext.class,0);
		}
		public CreateConversionStmtContext createConversionStmt() {
			return getRuleContext(CreateConversionStmtContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() {
			return getRuleContext(AlterDefaultPrivilegesStmtContext.class,0);
		}
		public CreateGroupStmtContext createGroupStmt() {
			return getRuleContext(CreateGroupStmtContext.class,0);
		}
		public AlterForeignServerStmtContext alterForeignServerStmt() {
			return getRuleContext(AlterForeignServerStmtContext.class,0);
		}
		public RevokeStmtContext revokeStmt() {
			return getRuleContext(RevokeStmtContext.class,0);
		}
		public FetchStmtContext fetchStmt() {
			return getRuleContext(FetchStmtContext.class,0);
		}
		public CreateUserStmtContext createUserStmt() {
			return getRuleContext(CreateUserStmtContext.class,0);
		}
		public DeallocateStmtContext deallocateStmt() {
			return getRuleContext(DeallocateStmtContext.class,0);
		}
		public AlterDatabaseStmtContext alterDatabaseStmt() {
			return getRuleContext(AlterDatabaseStmtContext.class,0);
		}
		public DropOwnedStmtContext dropOwnedStmt() {
			return getRuleContext(DropOwnedStmtContext.class,0);
		}
		public DropOpFamilyStmtContext dropOpFamilyStmt() {
			return getRuleContext(DropOpFamilyStmtContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public ClosePortalStmtContext closePortalStmt() {
			return getRuleContext(ClosePortalStmtContext.class,0);
		}
		public AlterTSConfigurationStmtContext alterTSConfigurationStmt() {
			return getRuleContext(AlterTSConfigurationStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public CreateFdwStmtContext createFdwStmt() {
			return getRuleContext(CreateFdwStmtContext.class,0);
		}
		public VariableSetStmtContext variableSetStmt() {
			return getRuleContext(VariableSetStmtContext.class,0);
		}
		public CreateForeignServerStmtContext createForeignServerStmt() {
			return getRuleContext(CreateForeignServerStmtContext.class,0);
		}
		public DropUserStmtContext dropUserStmt() {
			return getRuleContext(DropUserStmtContext.class,0);
		}
		public ConstraintsSetStmtContext constraintsSetStmt() {
			return getRuleContext(ConstraintsSetStmtContext.class,0);
		}
		public DoStmtContext doStmt() {
			return getRuleContext(DoStmtContext.class,0);
		}
		public RenameStmtContext renameStmt() {
			return getRuleContext(RenameStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public AlterEnumStmtContext alterEnumStmt() {
			return getRuleContext(AlterEnumStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public AlterFdwStmtContext alterFdwStmt() {
			return getRuleContext(AlterFdwStmtContext.class,0);
		}
		public CreatedbStmtContext createdbStmt() {
			return getRuleContext(CreatedbStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public CreateExtensionStmtContext createExtensionStmt() {
			return getRuleContext(CreateExtensionStmtContext.class,0);
		}
		public CreateDomainStmtContext createDomainStmt() {
			return getRuleContext(CreateDomainStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public AlterExtensionContentsStmtContext alterExtensionContentsStmt() {
			return getRuleContext(AlterExtensionContentsStmtContext.class,0);
		}
		public AlterDatabaseSetStmtContext alterDatabaseSetStmt() {
			return getRuleContext(AlterDatabaseSetStmtContext.class,0);
		}
		public AlterCompositeTypeStmtContext alterCompositeTypeStmt() {
			return getRuleContext(AlterCompositeTypeStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public DropdbStmtContext dropdbStmt() {
			return getRuleContext(DropdbStmtContext.class,0);
		}
		public DropCastStmtContext dropCastStmt() {
			return getRuleContext(DropCastStmtContext.class,0);
		}
		public AlterDomainStmtContext alterDomainStmt() {
			return getRuleContext(AlterDomainStmtContext.class,0);
		}
		public ClusterStmtContext clusterStmt() {
			return getRuleContext(ClusterStmtContext.class,0);
		}
		public GrantRoleStmtContext grantRoleStmt() {
			return getRuleContext(GrantRoleStmtContext.class,0);
		}
		public ExplainStmtContext explainStmt() {
			return getRuleContext(ExplainStmtContext.class,0);
		}
		public DropStmtContext dropStmt() {
			return getRuleContext(DropStmtContext.class,0);
		}
		public DropOpClassStmtContext dropOpClassStmt() {
			return getRuleContext(DropOpClassStmtContext.class,0);
		}
		public RevokeRoleStmtContext revokeRoleStmt() {
			return getRuleContext(RevokeRoleStmtContext.class,0);
		}
		public AlterObjectSchemaStmtContext alterObjectSchemaStmt() {
			return getRuleContext(AlterObjectSchemaStmtContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public UnlistenStmtContext unlistenStmt() {
			return getRuleContext(UnlistenStmtContext.class,0);
		}
		public AlterGroupStmtContext alterGroupStmt() {
			return getRuleContext(AlterGroupStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public CreateFunctionStmtContext createFunctionStmt() {
			return getRuleContext(CreateFunctionStmtContext.class,0);
		}
		public CreateCastStmtContext createCastStmt() {
			return getRuleContext(CreateCastStmtContext.class,0);
		}
		public AlterRoleSetStmtContext alterRoleSetStmt() {
			return getRuleContext(AlterRoleSetStmtContext.class,0);
		}
		public CreateTableSpaceStmtContext createTableSpaceStmt() {
			return getRuleContext(CreateTableSpaceStmtContext.class,0);
		}
		public AlterRoleStmtContext alterRoleStmt() {
			return getRuleContext(AlterRoleStmtContext.class,0);
		}
		public RemoveFuncStmtContext removeFuncStmt() {
			return getRuleContext(RemoveFuncStmtContext.class,0);
		}
		public AlterUserSetStmtContext alterUserSetStmt() {
			return getRuleContext(AlterUserSetStmtContext.class,0);
		}
		public AlterFunctionStmtContext alterFunctionStmt() {
			return getRuleContext(AlterFunctionStmtContext.class,0);
		}
		public ReindexStmtContext reindexStmt() {
			return getRuleContext(ReindexStmtContext.class,0);
		}
		public VacuumStmtContext vacuumStmt() {
			return getRuleContext(VacuumStmtContext.class,0);
		}
		public CreateSchemaStmtContext createSchemaStmt() {
			return getRuleContext(CreateSchemaStmtContext.class,0);
		}
		public DropAssertStmtContext dropAssertStmt() {
			return getRuleContext(DropAssertStmtContext.class,0);
		}
		public CopyStmtContext copyStmt() {
			return getRuleContext(CopyStmtContext.class,0);
		}
		public CreateOpClassStmtContext createOpClassStmt() {
			return getRuleContext(CreateOpClassStmtContext.class,0);
		}
		public DropForeignServerStmtContext dropForeignServerStmt() {
			return getRuleContext(DropForeignServerStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public CreatePLangStmtContext createPLangStmt() {
			return getRuleContext(CreatePLangStmtContext.class,0);
		}
		public SecLabelStmtContext secLabelStmt() {
			return getRuleContext(SecLabelStmtContext.class,0);
		}
		public AlterOwnerStmtContext alterOwnerStmt() {
			return getRuleContext(AlterOwnerStmtContext.class,0);
		}
		public DropGroupStmtContext dropGroupStmt() {
			return getRuleContext(DropGroupStmtContext.class,0);
		}
		public DropruleStmtContext dropruleStmt() {
			return getRuleContext(DropruleStmtContext.class,0);
		}
		public AlterTSDictionaryStmtContext alterTSDictionaryStmt() {
			return getRuleContext(AlterTSDictionaryStmtContext.class,0);
		}
		public DropTrigStmtContext dropTrigStmt() {
			return getRuleContext(DropTrigStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public CreateForeignTableStmtContext createForeignTableStmt() {
			return getRuleContext(CreateForeignTableStmtContext.class,0);
		}
		public TransactionStmtContext transactionStmt() {
			return getRuleContext(TransactionStmtContext.class,0);
		}
		public AlterUserMappingStmtContext alterUserMappingStmt() {
			return getRuleContext(AlterUserMappingStmtContext.class,0);
		}
		public DefineStmtContext defineStmt() {
			return getRuleContext(DefineStmtContext.class,0);
		}
		public AlterExtensionStmtContext alterExtensionStmt() {
			return getRuleContext(AlterExtensionStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public CommentStmtContext commentStmt() {
			return getRuleContext(CommentStmtContext.class,0);
		}
		public LoadStmtContext loadStmt() {
			return getRuleContext(LoadStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public CreateUserMappingStmtContext createUserMappingStmt() {
			return getRuleContext(CreateUserMappingStmtContext.class,0);
		}
		public AlterForeignTableStmtContext alterForeignTableStmt() {
			return getRuleContext(AlterForeignTableStmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmt);
		try {
			setState(1208);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1097); alterDatabaseStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1098); alterDatabaseSetStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1099); alterDefaultPrivilegesStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1100); alterDomainStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1101); alterEnumStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1102); alterExtensionStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1103); alterExtensionContentsStmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1104); alterFdwStmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1105); alterForeignServerStmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1106); alterForeignTableStmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1107); alterFunctionStmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1108); alterGroupStmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1109); alterObjectSchemaStmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1110); alterOwnerStmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1111); alterSeqStmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1112); alterTableStmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1113); alterCompositeTypeStmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1114); alterRoleSetStmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1115); alterRoleStmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1116); alterTSConfigurationStmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1117); alterTSDictionaryStmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1118); alterUserMappingStmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1119); alterUserSetStmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1120); alterUserStmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1121); analyzeStmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1122); checkPointStmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1123); closePortalStmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1124); clusterStmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1125); commentStmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1126); constraintsSetStmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1127); copyStmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1128); createAsStmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1129); createAssertStmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1130); createCastStmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1131); createConversionStmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1132); createDomainStmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1133); createExtensionStmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1134); createFdwStmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1135); createForeignServerStmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1136); createForeignTableStmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1137); createFunctionStmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1138); createGroupStmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1139); createOpClassStmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1140); createOpFamilyStmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1141); alterOpFamilyStmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1142); createPLangStmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1143); createSchemaStmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1144); createSeqStmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1145); createStmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1146); createTableSpaceStmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1147); createTrigStmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1148); createRoleStmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1149); createUserStmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1150); createUserMappingStmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1151); createdbStmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1152); deallocateStmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1153); declareCursorStmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1154); defineStmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1155); deleteStmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1156); discardStmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1157); doStmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1158); dropAssertStmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1159); dropCastStmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1160); dropFdwStmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1161); dropForeignServerStmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1162); dropGroupStmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1163); dropOpClassStmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1164); dropOpFamilyStmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1165); dropOwnedStmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1166); dropPLangStmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1167); dropruleStmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1168); dropStmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1169); dropTableSpaceStmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1170); dropTrigStmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1171); dropRoleStmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1172); dropUserStmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1173); dropUserMappingStmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1174); dropdbStmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1175); executeStmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1176); explainStmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1177); fetchStmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1178); grantStmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1179); grantRoleStmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1180); indexStmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1181); insertStmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1182); listenStmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1183); loadStmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1184); lockStmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1185); notifyStmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1186); prepareStmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1187); reassignOwnedStmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1188); reindexStmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1189); removeAggrStmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1190); removeFuncStmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1191); removeOperStmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1192); renameStmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1193); revokeStmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1194); revokeRoleStmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1195); ruleStmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1196); secLabelStmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1197); selectStmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1198); transactionStmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1199); truncateStmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1200); unlistenStmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1201); updateStmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1202); vacuumStmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1203); variableResetStmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1204); variableSetStmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1205); variableShowStmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1206); viewStmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStmtContext createRoleStmt() throws RecognitionException {
		CreateRoleStmtContext _localctx = new CreateRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_createRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1210); match(CREATE);
			setState(1211); match(ROLE);
			setState(1212); roleId();
			setState(1214);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(1213); match(WITH);
				}
				break;
			}
			setState(1216); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptRoleListContext extends ParserRuleContext {
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateOptRoleElemContext createOptRoleElem() {
			return getRuleContext(CreateOptRoleElemContext.class,0);
		}
		public OptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptRoleListContext optRoleList() throws RecognitionException {
		return optRoleList(0);
	}

	private OptRoleListContext optRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptRoleListContext _localctx = new OptRoleListContext(_ctx, _parentState);
		OptRoleListContext _prevctx = _localctx;
		int _startState = 8;
		enterRecursionRule(_localctx, 8, RULE_optRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1223);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optRoleList);
					setState(1219);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1220); createOptRoleElem();
					}
					} 
				}
				setState(1225);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlteroptRoleListContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public AlteroptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlteroptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlteroptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlteroptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptRoleListContext alteroptRoleList() throws RecognitionException {
		return alteroptRoleList(0);
	}

	private AlteroptRoleListContext alteroptRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AlteroptRoleListContext _localctx = new AlteroptRoleListContext(_ctx, _parentState);
		AlteroptRoleListContext _prevctx = _localctx;
		int _startState = 10;
		enterRecursionRule(_localctx, 10, RULE_alteroptRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1231);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlteroptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alteroptRoleList);
					setState(1227);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1228); alterOptRoleElem();
					}
					} 
				}
				setState(1233);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(SqlParser.UNENCRYPTED, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SqlParser.ENCRYPTED, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(SqlParser.PASSWORD, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode UNTIL() { return getToken(SqlParser.UNTIL, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterOptRoleElem);
		try {
			setState(1254);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1234); match(PASSWORD);
				setState(1235); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1236); match(PASSWORD);
				setState(1237); match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1238); match(ENCRYPTED);
				setState(1239); match(PASSWORD);
				setState(1240); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1241); match(UNENCRYPTED);
				setState(1242); match(PASSWORD);
				setState(1243); sConst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1244); match(INHERIT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1245); match(CONNECTION);
				setState(1246); match(LIMIT);
				setState(1247); signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1248); match(VALID);
				setState(1249); match(UNTIL);
				setState(1250); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1251); match(USER);
				setState(1252); name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1253); match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode SYSID() { return getToken(SqlParser.SYSID, 0); }
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateOptRoleElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateOptRoleElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createOptRoleElem);
		try {
			setState(1269);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1256); alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1257); match(SYSID);
				setState(1258); iConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1259); match(ADMIN);
				setState(1260); name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1261); match(ROLE);
				setState(1262); name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1263); match(IN_P);
				setState(1264); match(ROLE);
				setState(1265); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1266); match(IN_P);
				setState(1267); match(GROUP_P);
				setState(1268); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStmtContext createUserStmt() throws RecognitionException {
		CreateUserStmtContext _localctx = new CreateUserStmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_createUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271); match(CREATE);
			setState(1272); match(USER);
			setState(1273); roleId();
			setState(1275);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1274); match(WITH);
				}
				break;
			}
			setState(1277); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleStmtContext alterRoleStmt() throws RecognitionException {
		AlterRoleStmtContext _localctx = new AlterRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279); match(ALTER);
			setState(1280); match(ROLE);
			setState(1281); roleId();
			setState(1283);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				setState(1282); match(WITH);
				}
				break;
			}
			setState(1285); alteroptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_opt_in_database);
		try {
			setState(1291);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1288); match(IN_P);
				setState(1289); match(DATABASE);
				setState(1290); database_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterRoleSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterRoleSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterRoleSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterRoleSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleSetStmtContext alterRoleSetStmt() throws RecognitionException {
		AlterRoleSetStmtContext _localctx = new AlterRoleSetStmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterRoleSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1293); match(ALTER);
			setState(1294); match(ROLE);
			setState(1295); roleId();
			setState(1296); opt_in_database();
			setState(1297); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public AlteroptRoleListContext alteroptRoleList() {
			return getRuleContext(AlteroptRoleListContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStmtContext alterUserStmt() throws RecognitionException {
		AlterUserStmtContext _localctx = new AlterUserStmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299); match(ALTER);
			setState(1300); match(USER);
			setState(1301); roleId();
			setState(1303);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(1302); match(WITH);
				}
				break;
			}
			setState(1305); alteroptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterUserSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterUserSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterUserSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserSetStmtContext alterUserSetStmt() throws RecognitionException {
		AlterUserSetStmtContext _localctx = new AlterUserSetStmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alterUserSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1307); match(ALTER);
			setState(1308); match(USER);
			setState(1309); roleId();
			setState(1310); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public DropRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleStmtContext dropRoleStmt() throws RecognitionException {
		DropRoleStmtContext _localctx = new DropRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_dropRoleStmt);
		try {
			setState(1320);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1312); match(DROP);
				setState(1313); match(ROLE);
				setState(1314); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1315); match(DROP);
				setState(1316); match(ROLE);
				setState(1317); match(IF_P);
				setState(1318); match(EXISTS);
				setState(1319); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public DropUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropUserStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropUserStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStmtContext dropUserStmt() throws RecognitionException {
		DropUserStmtContext _localctx = new DropUserStmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_dropUserStmt);
		try {
			setState(1330);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1322); match(DROP);
				setState(1323); match(USER);
				setState(1324); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1325); match(DROP);
				setState(1326); match(USER);
				setState(1327); match(IF_P);
				setState(1328); match(EXISTS);
				setState(1329); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public CreateGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupStmtContext createGroupStmt() throws RecognitionException {
		CreateGroupStmtContext _localctx = new CreateGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332); match(CREATE);
			setState(1333); match(GROUP_P);
			setState(1334); roleId();
			setState(1336);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1335); match(WITH);
				}
				break;
			}
			setState(1338); optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public AlterGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupStmtContext alterGroupStmt() throws RecognitionException {
		AlterGroupStmtContext _localctx = new AlterGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1340); match(ALTER);
			setState(1341); match(GROUP_P);
			setState(1342); roleId();
			setState(1343); add_drop();
			setState(1344); match(USER);
			setState(1345); name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1347);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropGroupStmtContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public DropGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGroupStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropGroupStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropGroupStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropGroupStmtContext dropGroupStmt() throws RecognitionException {
		DropGroupStmtContext _localctx = new DropGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_dropGroupStmt);
		try {
			setState(1357);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1349); match(DROP);
				setState(1350); match(GROUP_P);
				setState(1351); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1352); match(DROP);
				setState(1353); match(GROUP_P);
				setState(1354); match(IF_P);
				setState(1355); match(EXISTS);
				setState(1356); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public OptSchemaNameContext optSchemaName() {
			return getRuleContext(OptSchemaNameContext.class,0);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public CreateSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateSchemaStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateSchemaStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStmtContext createSchemaStmt() throws RecognitionException {
		CreateSchemaStmtContext _localctx = new CreateSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createSchemaStmt);
		try {
			setState(1371);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1359); match(CREATE);
				setState(1360); match(SCHEMA);
				setState(1361); optSchemaName();
				setState(1362); match(AUTHORIZATION);
				setState(1363); roleId();
				setState(1364); optSchemaEltList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1366); match(CREATE);
				setState(1367); match(SCHEMA);
				setState(1368); colId();
				setState(1369); optSchemaEltList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaNameContext optSchemaName() throws RecognitionException {
		OptSchemaNameContext _localctx = new OptSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_optSchemaName);
		try {
			setState(1375);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1373); colId();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaEltListContext extends ParserRuleContext {
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public Schema_stmtContext schema_stmt() {
			return getRuleContext(Schema_stmtContext.class,0);
		}
		public OptSchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaEltList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptSchemaEltList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptSchemaEltList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaEltListContext optSchemaEltList() throws RecognitionException {
		return optSchemaEltList(0);
	}

	private OptSchemaEltListContext optSchemaEltList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptSchemaEltListContext _localctx = new OptSchemaEltListContext(_ctx, _parentState);
		OptSchemaEltListContext _prevctx = _localctx;
		int _startState = 44;
		enterRecursionRule(_localctx, 44, RULE_optSchemaEltList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1382);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptSchemaEltListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optSchemaEltList);
					setState(1378);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1379); schema_stmt();
					}
					} 
				}
				setState(1384);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_schema_stmt);
		try {
			setState(1391);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1385); createStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1386); indexStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1387); createSeqStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1388); createTrigStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1389); grantStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1390); viewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public VariableSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVariableSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVariableSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableSetStmtContext variableSetStmt() throws RecognitionException {
		VariableSetStmtContext _localctx = new VariableSetStmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_variableSetStmt);
		try {
			setState(1401);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1393); match(SET);
				setState(1394); set_rest();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1395); match(SET);
				setState(1396); match(LOCAL);
				setState(1397); set_rest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1398); match(SET);
				setState(1399); match(SESSION);
				setState(1400); set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SqlParser.CHARACTERISTICS, 0); }
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_set_rest);
		try {
			setState(1411);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1403); match(TRANSACTION);
				setState(1404); transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1405); match(SESSION);
				setState(1406); match(CHARACTERISTICS);
				setState(1407); match(AS);
				setState(1408); match(TRANSACTION);
				setState(1409); transaction_mode_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1410); set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode XML_P() { return getToken(SqlParser.XML_P, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode NAMES() { return getToken(SqlParser.NAMES, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode CATALOG_P() { return getToken(SqlParser.CATALOG_P, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SqlParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest_more);
		try {
			setState(1456);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1413); var_name(0);
				setState(1414); match(TO);
				setState(1415); var_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1417); var_name(0);
				setState(1418); match(T__5);
				setState(1419); var_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1421); var_name(0);
				setState(1422); match(TO);
				setState(1423); match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1425); var_name(0);
				setState(1426); match(T__5);
				setState(1427); match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1429); var_name(0);
				setState(1430); match(FROM);
				setState(1431); match(CURRENT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1433); match(TIME);
				setState(1434); match(ZONE);
				setState(1435); zone_value();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1436); match(CATALOG_P);
				setState(1437); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1438); match(SCHEMA);
				setState(1439); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1440); match(NAMES);
				setState(1441); opt_encoding();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1442); match(ROLE);
				setState(1443); colId_or_Sconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1444); match(SESSION);
				setState(1445); match(AUTHORIZATION);
				setState(1446); colId_or_Sconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1447); match(SESSION);
				setState(1448); match(AUTHORIZATION);
				setState(1449); match(DEFAULT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1450); match(XML_P);
				setState(1451); match(OPTION);
				setState(1452); document_or_content();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1453); match(TRANSACTION);
				setState(1454); match(SNAPSHOT);
				setState(1455); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_nameContext _localctx = new Var_nameContext(_ctx, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 54;
		enterRecursionRule(_localctx, 54, RULE_var_name, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1459); colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(1466);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_name);
					setState(1461);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1462); match(T__14);
					setState(1463); colId();
					}
					} 
				}
				setState(1468);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public Var_valueContext var_value() {
			return getRuleContext(Var_valueContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_listContext _localctx = new Var_listContext(_ctx, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 56;
		enterRecursionRule(_localctx, 56, RULE_var_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1470); var_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(1477);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_list);
					setState(1472);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1473); match(T__13);
					setState(1474); var_value();
					}
					} 
				}
				setState(1479);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_var_value);
		try {
			setState(1482);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1480); opt_boolean_or_string();
				}
				break;
			case T__12:
			case T__10:
			case ICONST:
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1481); numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(SqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(SqlParser.COMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SqlParser.SERIALIZABLE, 0); }
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SqlParser.UNCOMMITTED, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_iso_level);
		try {
			setState(1491);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1484); match(READ);
				setState(1485); match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1486); match(READ);
				setState(1487); match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1488); match(REPEATABLE);
				setState(1489); match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1490); match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_opt_boolean_or_string);
		try {
			setState(1497);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(1493); match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1494); match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1495); match(ON);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 4);
				{
				setState(1496); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_zone_value);
		try {
			setState(1515);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1499); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1500); match(IDENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1501); constInterval();
				setState(1502); sConst();
				setState(1503); opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1505); constInterval();
				setState(1506); match(T__8);
				setState(1507); iConst();
				setState(1508); match(T__15);
				setState(1509); sConst();
				setState(1510); opt_interval();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1512); numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1513); match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1514); match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_opt_encoding);
		try {
			setState(1520);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1517); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1518); match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColId_or_SconstContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public ColId_or_SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId_or_Sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColId_or_Sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColId_or_Sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColId_or_Sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColId_or_SconstContext colId_or_Sconst() throws RecognitionException {
		ColId_or_SconstContext _localctx = new ColId_or_SconstContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_colId_or_Sconst);
		try {
			setState(1524);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1522); colId();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1523); sConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_variableResetStmt);
		try {
			setState(1540);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1526); match(RESET);
				setState(1527); var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1528); match(RESET);
				setState(1529); match(TIME);
				setState(1530); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1531); match(RESET);
				setState(1532); match(TRANSACTION);
				setState(1533); match(ISOLATION);
				setState(1534); match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1535); match(RESET);
				setState(1536); match(SESSION);
				setState(1537); match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1538); match(RESET);
				setState(1539); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_setResetClause);
		try {
			setState(1545);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1542); match(SET);
				setState(1543); set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1544); variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionsetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionsetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunctionsetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunctionsetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunctionsetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetResetClauseContext functionsetResetClause() throws RecognitionException {
		FunctionsetResetClauseContext _localctx = new FunctionsetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_functionsetResetClause);
		try {
			setState(1550);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1547); match(SET);
				setState(1548); set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1549); variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableShowStmtContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode SHOW() { return getToken(SqlParser.SHOW, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public VariableShowStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableShowStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVariableShowStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVariableShowStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableShowStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableShowStmtContext variableShowStmt() throws RecognitionException {
		VariableShowStmtContext _localctx = new VariableShowStmtContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_variableShowStmt);
		try {
			setState(1566);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1552); match(SHOW);
				setState(1553); var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1554); match(SHOW);
				setState(1555); match(TIME);
				setState(1556); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1557); match(SHOW);
				setState(1558); match(TRANSACTION);
				setState(1559); match(ISOLATION);
				setState(1560); match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1561); match(SHOW);
				setState(1562); match(SESSION);
				setState(1563); match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1564); match(SHOW);
				setState(1565); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintsSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraintsSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraintsSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintsSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetStmtContext constraintsSetStmt() throws RecognitionException {
		ConstraintsSetStmtContext _localctx = new ConstraintsSetStmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_constraintsSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1568); match(SET);
			setState(1569); match(CONSTRAINTS);
			setState(1570); constraints_set_list();
			setState(1571); constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_constraints_set_list);
		try {
			setState(1575);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1573); match(ALL);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1574); qualified_name_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1577);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckPointStmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(SqlParser.CHECKPOINT, 0); }
		public CheckPointStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkPointStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCheckPointStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCheckPointStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCheckPointStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckPointStmtContext checkPointStmt() throws RecognitionException {
		CheckPointStmtContext _localctx = new CheckPointStmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_checkPointStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579); match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardStmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(SqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(SqlParser.PLANS, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public DiscardStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDiscardStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDiscardStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDiscardStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardStmtContext discardStmt() throws RecognitionException {
		DiscardStmtContext _localctx = new DiscardStmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_discardStmt);
		try {
			setState(1589);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1581); match(DISCARD);
				setState(1582); match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1583); match(DISCARD);
				setState(1584); match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1585); match(DISCARD);
				setState(1586); match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1587); match(DISCARD);
				setState(1588); match(PLANS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public AlterTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStmtContext alterTableStmt() throws RecognitionException {
		AlterTableStmtContext _localctx = new AlterTableStmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alterTableStmt);
		try {
			setState(1639);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1591); match(ALTER);
				setState(1592); match(TABLE);
				setState(1593); relation_expr();
				setState(1594); alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1596); match(ALTER);
				setState(1597); match(TABLE);
				setState(1598); match(IF_P);
				setState(1599); match(EXISTS);
				setState(1600); relation_expr();
				setState(1601); alter_table_cmds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1603); match(ALTER);
				setState(1604); match(INDEX);
				setState(1605); qualified_name();
				setState(1606); alter_table_cmds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1608); match(ALTER);
				setState(1609); match(INDEX);
				setState(1610); match(IF_P);
				setState(1611); match(EXISTS);
				setState(1612); qualified_name();
				setState(1613); alter_table_cmds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1615); match(ALTER);
				setState(1616); match(SEQUENCE);
				setState(1617); qualified_name();
				setState(1618); alter_table_cmds(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1620); match(ALTER);
				setState(1621); match(SEQUENCE);
				setState(1622); match(IF_P);
				setState(1623); match(EXISTS);
				setState(1624); qualified_name();
				setState(1625); alter_table_cmds(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1627); match(ALTER);
				setState(1628); match(VIEW);
				setState(1629); qualified_name();
				setState(1630); alter_table_cmds(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1632); match(ALTER);
				setState(1633); match(VIEW);
				setState(1634); match(IF_P);
				setState(1635); match(EXISTS);
				setState(1636); qualified_name();
				setState(1637); alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public Alter_table_cmdContext alter_table_cmd() {
			return getRuleContext(Alter_table_cmdContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 90;
		enterRecursionRule(_localctx, 90, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1642); alter_table_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(1649);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					setState(1644);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1645); match(T__13);
					setState(1646); alter_table_cmd();
					}
					} 
				}
				setState(1651);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode ENABLE_P() { return getToken(SqlParser.ENABLE_P, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlParser.ALWAYS, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode DISABLE_P() { return getToken(SqlParser.DISABLE_P, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode REPLICA() { return getToken(SqlParser.REPLICA, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_table_cmd);
		try {
			setState(1817);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1652); match(ADD_P);
				setState(1653); columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1654); match(ADD_P);
				setState(1655); match(COLUMN);
				setState(1656); columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1657); match(ALTER);
				setState(1658); opt_column();
				setState(1659); colId();
				setState(1660); alter_column_default();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1662); match(ALTER);
				setState(1663); opt_column();
				setState(1664); colId();
				setState(1665); match(DROP);
				setState(1666); match(NOT);
				setState(1667); match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1669); match(ALTER);
				setState(1670); opt_column();
				setState(1671); colId();
				setState(1672); match(SET);
				setState(1673); match(NOT);
				setState(1674); match(NULL_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1676); match(ALTER);
				setState(1677); opt_column();
				setState(1678); colId();
				setState(1679); match(SET);
				setState(1680); match(STATISTICS);
				setState(1681); signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1683); match(ALTER);
				setState(1684); opt_column();
				setState(1685); colId();
				setState(1686); match(SET);
				setState(1687); reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1689); match(ALTER);
				setState(1690); opt_column();
				setState(1691); colId();
				setState(1692); match(RESET);
				setState(1693); reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1695); match(ALTER);
				setState(1696); opt_column();
				setState(1697); colId();
				setState(1698); match(SET);
				setState(1699); match(STORAGE);
				setState(1700); colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1702); match(DROP);
				setState(1703); opt_column();
				setState(1704); match(IF_P);
				setState(1705); match(EXISTS);
				setState(1706); colId();
				setState(1707); opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1709); match(DROP);
				setState(1710); opt_column();
				setState(1711); colId();
				setState(1712); opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1714); match(ALTER);
				setState(1715); opt_column();
				setState(1716); colId();
				setState(1717); opt_set_data();
				setState(1718); match(TYPE_P);
				setState(1719); typename();
				setState(1720); opt_collate_clause();
				setState(1721); alter_using();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1723); match(ALTER);
				setState(1724); opt_column();
				setState(1725); colId();
				setState(1726); alter_generic_options();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1728); match(ADD_P);
				setState(1729); tableConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1730); match(VALIDATE);
				setState(1731); match(CONSTRAINT);
				setState(1732); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1733); match(DROP);
				setState(1734); match(CONSTRAINT);
				setState(1735); match(IF_P);
				setState(1736); match(EXISTS);
				setState(1737); name();
				setState(1738); opt_drop_behavior();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1740); match(DROP);
				setState(1741); match(CONSTRAINT);
				setState(1742); name();
				setState(1743); opt_drop_behavior();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1745); match(SET);
				setState(1746); match(WITH);
				setState(1747); match(OIDS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1748); match(SET);
				setState(1749); match(WITHOUT);
				setState(1750); match(OIDS);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1751); match(CLUSTER);
				setState(1752); match(ON);
				setState(1753); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1754); match(SET);
				setState(1755); match(WITHOUT);
				setState(1756); match(CLUSTER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1757); match(ENABLE_P);
				setState(1758); match(TRIGGER);
				setState(1759); name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1760); match(ENABLE_P);
				setState(1761); match(ALWAYS);
				setState(1762); match(TRIGGER);
				setState(1763); name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1764); match(ENABLE_P);
				setState(1765); match(REPLICA);
				setState(1766); match(TRIGGER);
				setState(1767); name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1768); match(ENABLE_P);
				setState(1769); match(TRIGGER);
				setState(1770); match(ALL);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1771); match(ENABLE_P);
				setState(1772); match(TRIGGER);
				setState(1773); match(USER);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1774); match(DISABLE_P);
				setState(1775); match(TRIGGER);
				setState(1776); name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1777); match(DISABLE_P);
				setState(1778); match(TRIGGER);
				setState(1779); match(ALL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1780); match(DISABLE_P);
				setState(1781); match(TRIGGER);
				setState(1782); match(USER);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1783); match(ENABLE_P);
				setState(1784); match(RULE);
				setState(1785); name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1786); match(ENABLE_P);
				setState(1787); match(ALWAYS);
				setState(1788); match(RULE);
				setState(1789); name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1790); match(ENABLE_P);
				setState(1791); match(REPLICA);
				setState(1792); match(RULE);
				setState(1793); name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1794); match(DISABLE_P);
				setState(1795); match(RULE);
				setState(1796); name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1797); match(INHERIT);
				setState(1798); qualified_name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1799); match(NO);
				setState(1800); match(INHERIT);
				setState(1801); qualified_name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1802); match(OF);
				setState(1803); any_name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1804); match(NOT);
				setState(1805); match(OF);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1806); match(OWNER);
				setState(1807); match(TO);
				setState(1808); roleId();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1809); match(SET);
				setState(1810); match(TABLESPACE);
				setState(1811); name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1812); match(SET);
				setState(1813); reloptions();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1814); match(RESET);
				setState(1815); reloptions();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1816); alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_column_default);
		try {
			setState(1824);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1819); match(SET);
				setState(1820); match(DEFAULT);
				setState(1821); a_expr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1822); match(DROP);
				setState(1823); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_opt_drop_behavior);
		try {
			setState(1829);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1826); match(CASCADE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1827); match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_opt_collate_clause);
		try {
			setState(1834);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1831); match(COLLATE);
				setState(1832); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_using);
		try {
			setState(1839);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1836); match(USING);
				setState(1837); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1841); match(T__8);
			setState(1842); reloption_list(0);
			setState(1843); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_opt_reloptions);
		try {
			setState(1848);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1845); match(WITH);
				setState(1846); reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public Reloption_elemContext reloption_elem() {
			return getRuleContext(Reloption_elemContext.class,0);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 106;
		enterRecursionRule(_localctx, 106, RULE_reloption_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1851); reloption_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1858);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					setState(1853);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1854); match(T__13);
					setState(1855); reloption_elem();
					}
					} 
				}
				setState(1860);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_reloption_elem);
		try {
			setState(1876);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1861); colLabel();
				setState(1862); match(T__5);
				setState(1863); def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1865); colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1866); colLabel();
				setState(1867); match(T__14);
				setState(1868); colLabel();
				setState(1869); match(T__5);
				setState(1870); def_arg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1872); colLabel();
				setState(1873); match(T__14);
				setState(1874); colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCompositeTypeStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public AlterCompositeTypeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCompositeTypeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterCompositeTypeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterCompositeTypeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterCompositeTypeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCompositeTypeStmtContext alterCompositeTypeStmt() throws RecognitionException {
		AlterCompositeTypeStmtContext _localctx = new AlterCompositeTypeStmtContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alterCompositeTypeStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1878); match(ALTER);
			setState(1879); match(TYPE_P);
			setState(1880); any_name();
			setState(1881); alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public Alter_type_cmdContext alter_type_cmd() {
			return getRuleContext(Alter_type_cmdContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 112;
		enterRecursionRule(_localctx, 112, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1884); alter_type_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(1891);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,46,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					setState(1886);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1887); match(T__13);
					setState(1888); alter_type_cmd();
					}
					} 
				}
				setState(1893);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,46,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alter_type_cmd);
		try {
			setState(1920);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1894); match(ADD_P);
				setState(1895); match(ATTRIBUTE);
				setState(1896); tableFuncElement();
				setState(1897); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1899); match(DROP);
				setState(1900); match(ATTRIBUTE);
				setState(1901); match(IF_P);
				setState(1902); match(EXISTS);
				setState(1903); colId();
				setState(1904); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1906); match(DROP);
				setState(1907); match(ATTRIBUTE);
				setState(1908); colId();
				setState(1909); opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1911); match(ALTER);
				setState(1912); match(ATTRIBUTE);
				setState(1913); colId();
				setState(1914); opt_set_data();
				setState(1915); match(TYPE_P);
				setState(1916); typename();
				setState(1917); opt_collate_clause();
				setState(1918); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClosePortalStmtContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode CLOSE() { return getToken(SqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ClosePortalStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closePortalStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterClosePortalStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitClosePortalStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitClosePortalStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClosePortalStmtContext closePortalStmt() throws RecognitionException {
		ClosePortalStmtContext _localctx = new ClosePortalStmtContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_closePortalStmt);
		try {
			setState(1926);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1922); match(CLOSE);
				setState(1923); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1924); match(CLOSE);
				setState(1925); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyStmtContext extends ParserRuleContext {
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode COPY() { return getToken(SqlParser.COPY, 0); }
		public Opt_oidsContext opt_oids() {
			return getRuleContext(Opt_oidsContext.class,0);
		}
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public CopyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyStmtContext copyStmt() throws RecognitionException {
		CopyStmtContext _localctx = new CopyStmtContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_copyStmt);
		try {
			setState(1950);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1928); match(COPY);
				setState(1929); opt_binary();
				setState(1930); qualified_name();
				setState(1931); opt_column_list();
				setState(1932); opt_oids();
				setState(1933); copy_from();
				setState(1934); copy_file_name();
				setState(1935); copy_delimiter();
				setState(1937);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1936); match(WITH);
					}
					break;
				}
				setState(1939); copy_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1941); match(COPY);
				setState(1942); select_with_parens(0);
				setState(1943); match(TO);
				setState(1944); copy_file_name();
				setState(1946);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1945); match(WITH);
					}
					break;
				}
				setState(1948); copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public TerminalNode STDOUT() { return getToken(SqlParser.STDOUT, 0); }
		public TerminalNode STDIN() { return getToken(SqlParser.STDIN, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_copy_file_name);
		try {
			setState(1957);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1954); sConst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1955); match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1956); match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_copy_options);
		try {
			setState(1964);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1959); copy_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1960); match(T__8);
				setState(1961); copy_generic_opt_list(0);
				setState(1962); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_opt_itemContext copy_opt_item() {
			return getRuleContext(Copy_opt_itemContext.class,0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 126;
		enterRecursionRule(_localctx, 126, RULE_copy_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1971);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					setState(1967);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1968); copy_opt_item();
					}
					} 
				}
				setState(1973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public TerminalNode QUOTE() { return getToken(SqlParser.QUOTE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TerminalNode HEADER_P() { return getToken(SqlParser.HEADER_P, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode CSV() { return getToken(SqlParser.CSV, 0); }
		public TerminalNode DELIMITER() { return getToken(SqlParser.DELIMITER, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_copy_opt_item);
		try {
			setState(2006);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1974); match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1975); match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1976); match(DELIMITER);
				setState(1977); opt_as();
				setState(1978); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1980); match(NULL_P);
				setState(1981); opt_as();
				setState(1982); sConst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1984); match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1985); match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1986); match(QUOTE);
				setState(1987); opt_as();
				setState(1988); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1990); match(ESCAPE);
				setState(1991); opt_as();
				setState(1992); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1994); match(FORCE);
				setState(1995); match(QUOTE);
				setState(1996); columnList(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1997); match(FORCE);
				setState(1998); match(QUOTE);
				setState(1999); match(T__9);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2000); match(FORCE);
				setState(2001); match(NOT);
				setState(2002); match(NULL_P);
				setState(2003); columnList(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2004); match(ENCODING);
				setState(2005); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_opt_binary);
		try {
			setState(2010);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2008); match(BINARY);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_oidsContext extends ParserRuleContext {
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Opt_oidsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_oids; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_oids(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_oids(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_oids(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_oidsContext opt_oids() throws RecognitionException {
		Opt_oidsContext _localctx = new Opt_oidsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_opt_oids);
		try {
			setState(2015);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2012); match(WITH);
				setState(2013); match(OIDS);
				}
				break;
			case FROM:
			case TO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(SqlParser.DELIMITERS, 0); }
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_copy_delimiter);
		try {
			setState(2022);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2017); opt_using();
				setState(2018); match(DELIMITERS);
				setState(2019); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_opt_using);
		try {
			setState(2026);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2024); match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return getRuleContext(Copy_generic_opt_elemContext.class,0);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 138;
		enterRecursionRule(_localctx, 138, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2029); copy_generic_opt_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2036);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					setState(2031);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2032); match(T__13);
					setState(2033); copy_generic_opt_elem();
					}
					} 
				}
				setState(2038);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039); colLabel();
			setState(2040); copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_copy_generic_opt_arg);
		try {
			setState(2050);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2042); opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2043); numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2044); match(T__9);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2045); match(T__8);
				setState(2046); copy_generic_opt_arg_list(0);
				setState(2047); match(T__15);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 144;
		enterRecursionRule(_localctx, 144, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2053); copy_generic_opt_arg_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(2060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					setState(2055);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2056); match(T__13);
					setState(2057); copy_generic_opt_arg_list_item();
					}
					} 
				}
				setState(2062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063); opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public OptInheritContext optInherit() {
			return getRuleContext(OptInheritContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public OpttypedtableElementListContext opttypedtableElementList() {
			return getRuleContext(OpttypedtableElementListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public OpttableElementListContext opttableElementList() {
			return getRuleContext(OpttableElementListContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public CreateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStmtContext createStmt() throws RecognitionException {
		CreateStmtContext _localctx = new CreateStmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_createStmt);
		try {
			setState(2117);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2065); match(CREATE);
				setState(2066); optTemp();
				setState(2067); match(TABLE);
				setState(2068); qualified_name();
				setState(2069); match(T__8);
				setState(2070); opttableElementList();
				setState(2071); match(T__15);
				setState(2072); optInherit();
				setState(2073); optWith();
				setState(2074); onCommitOption();
				setState(2075); optTableSpace();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2077); match(CREATE);
				setState(2078); optTemp();
				setState(2079); match(TABLE);
				setState(2080); match(IF_P);
				setState(2081); match(NOT);
				setState(2082); match(EXISTS);
				setState(2083); qualified_name();
				setState(2084); match(T__8);
				setState(2085); opttableElementList();
				setState(2086); match(T__15);
				setState(2087); optInherit();
				setState(2088); optWith();
				setState(2089); onCommitOption();
				setState(2090); optTableSpace();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2092); match(CREATE);
				setState(2093); optTemp();
				setState(2094); match(TABLE);
				setState(2095); qualified_name();
				setState(2096); match(OF);
				setState(2097); any_name();
				setState(2098); opttypedtableElementList();
				setState(2099); optWith();
				setState(2100); onCommitOption();
				setState(2101); optTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2103); match(CREATE);
				setState(2104); optTemp();
				setState(2105); match(TABLE);
				setState(2106); match(IF_P);
				setState(2107); match(NOT);
				setState(2108); match(EXISTS);
				setState(2109); qualified_name();
				setState(2110); match(OF);
				setState(2111); any_name();
				setState(2112); opttypedtableElementList();
				setState(2113); optWith();
				setState(2114); onCommitOption();
				setState(2115); optTableSpace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public OptTempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptTemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptTemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempContext optTemp() throws RecognitionException {
		OptTempContext _localctx = new OptTempContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_optTemp);
		try {
			setState(2131);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2119); match(TEMPORARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2120); match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2121); match(LOCAL);
				setState(2122); match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2123); match(LOCAL);
				setState(2124); match(TEMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2125); match(GLOBAL);
				setState(2126); match(TEMPORARY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2127); match(GLOBAL);
				setState(2128); match(TEMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2129); match(UNLOGGED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public OpttableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpttableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpttableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpttableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableElementListContext opttableElementList() throws RecognitionException {
		OpttableElementListContext _localctx = new OpttableElementListContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_opttableElementList);
		try {
			setState(2135);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2133); tableElementList(0);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttypedtableElementListContext extends ParserRuleContext {
		public TypedtableElementListContext typedtableElementList() {
			return getRuleContext(TypedtableElementListContext.class,0);
		}
		public OpttypedtableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpttypedtableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpttypedtableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpttypedtableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableElementListContext opttypedtableElementList() throws RecognitionException {
		OpttypedtableElementListContext _localctx = new OpttypedtableElementListContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_opttypedtableElementList);
		try {
			setState(2142);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2137); match(T__8);
				setState(2138); typedtableElementList(0);
				setState(2139); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TableElementContext tableElement() {
			return getRuleContext(TableElementContext.class,0);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		return tableElementList(0);
	}

	private TableElementListContext tableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableElementListContext _localctx = new TableElementListContext(_ctx, _parentState);
		TableElementListContext _prevctx = _localctx;
		int _startState = 156;
		enterRecursionRule(_localctx, 156, RULE_tableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2145); tableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2152);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableElementList);
					setState(2147);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2148); match(T__13);
					setState(2149); tableElement();
					}
					} 
				}
				setState(2154);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,67,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypedtableElementListContext extends ParserRuleContext {
		public TypedtableElementContext typedtableElement() {
			return getRuleContext(TypedtableElementContext.class,0);
		}
		public TypedtableElementListContext typedtableElementList() {
			return getRuleContext(TypedtableElementListContext.class,0);
		}
		public TypedtableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTypedtableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTypedtableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypedtableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableElementListContext typedtableElementList() throws RecognitionException {
		return typedtableElementList(0);
	}

	private TypedtableElementListContext typedtableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypedtableElementListContext _localctx = new TypedtableElementListContext(_ctx, _parentState);
		TypedtableElementListContext _prevctx = _localctx;
		int _startState = 158;
		enterRecursionRule(_localctx, 158, RULE_typedtableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2156); typedtableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2163);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,68,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedtableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typedtableElementList);
					setState(2158);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2159); match(T__13);
					setState(2160); typedtableElement();
					}
					} 
				}
				setState(2165);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,68,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_tableElement);
		try {
			setState(2169);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2166); columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2167); tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2168); tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableElementContext extends ParserRuleContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TypedtableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTypedtableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTypedtableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypedtableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableElementContext typedtableElement() throws RecognitionException {
		TypedtableElementContext _localctx = new TypedtableElementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_typedtableElement);
		try {
			setState(2173);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2171); columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2172); tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175); colId();
			setState(2176); typename();
			setState(2177); create_generic_options();
			setState(2178); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_columnOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2180); colId();
			setState(2181); match(WITH);
			setState(2182); match(OPTIONS);
			setState(2183); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public ColConstraintContext colConstraint() {
			return getRuleContext(ColConstraintContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		return colQualList(0);
	}

	private ColQualListContext colQualList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColQualListContext _localctx = new ColQualListContext(_ctx, _parentState);
		ColQualListContext _prevctx = _localctx;
		int _startState = 168;
		enterRecursionRule(_localctx, 168, RULE_colQualList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2190);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColQualListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_colQualList);
					setState(2186);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2187); colConstraint();
					}
					} 
				}
				setState(2192);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public ColconstraintElemContext colconstraintElem() {
			return getRuleContext(ColconstraintElemContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_colConstraint);
		try {
			setState(2201);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2193); match(CONSTRAINT);
				setState(2194); name();
				setState(2195); colconstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2197); colconstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2198); constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2199); match(COLLATE);
				setState(2200); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintElemContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public ColconstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColconstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColconstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColconstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintElemContext colconstraintElem() throws RecognitionException {
		ColconstraintElemContext _localctx = new ColconstraintElemContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_colconstraintElem);
		try {
			setState(2229);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2203); match(NOT);
				setState(2204); match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2205); match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2206); match(UNIQUE);
				setState(2207); opt_definition();
				setState(2208); optConsTableSpace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2210); match(PRIMARY);
				setState(2211); match(KEY);
				setState(2212); opt_definition();
				setState(2213); optConsTableSpace();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(2215); match(CHECK);
				setState(2216); match(T__8);
				setState(2217); a_expr(0);
				setState(2218); match(T__15);
				setState(2219); opt_no_inherit();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2221); match(DEFAULT);
				setState(2222); b_expr(0);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 7);
				{
				setState(2223); match(REFERENCES);
				setState(2224); qualified_name();
				setState(2225); opt_column_list();
				setState(2226); key_match();
				setState(2227); key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_constraintAttr);
		try {
			setState(2238);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2231); match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2232); match(NOT);
				setState(2233); match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2234); match(INITIALLY);
				setState(2235); match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2236); match(INITIALLY);
				setState(2237); match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2240); match(LIKE);
			setState(2241); qualified_name();
			setState(2242); tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode EXCLUDING() { return getToken(SqlParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(SqlParser.INCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableLikeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableLikeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 178;
		enterRecursionRule(_localctx, 178, RULE_tableLikeOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2253);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2251);
					switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
					case 1:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2245);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2246); match(INCLUDING);
						setState(2247); tableLikeOption();
						}
						break;
					case 2:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2248);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2249); match(EXCLUDING);
						setState(2250); tableLikeOption();
						}
						break;
					}
					} 
				}
				setState(2255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode INDEXES() { return getToken(SqlParser.INDEXES, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(SqlParser.DEFAULTS, 0); }
		public TerminalNode COMMENTS() { return getToken(SqlParser.COMMENTS, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (COMMENTS - 80)) | (1L << (CONSTRAINTS - 80)) | (1L << (DEFAULTS - 80)))) != 0) || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public ConstraintElemContext constraintElem() {
			return getRuleContext(ConstraintElemContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_tableConstraint);
		try {
			setState(2263);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2258); match(CONSTRAINT);
				setState(2259); name();
				setState(2260); constraintElem();
				}
				break;
			case CHECK:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2262); constraintElem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintElemContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlParser.EXCLUDE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public ExistingIndexContext existingIndex() {
			return getRuleContext(ExistingIndexContext.class,0);
		}
		public ConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintElemContext constraintElem() throws RecognitionException {
		ConstraintElemContext _localctx = new ConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_constraintElem);
		try {
			setState(2319);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2265); match(CHECK);
				setState(2266); match(T__8);
				setState(2267); a_expr(0);
				setState(2268); match(T__15);
				setState(2269); constraintAttributeSpec(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2271); match(UNIQUE);
				setState(2272); match(T__8);
				setState(2273); columnList(0);
				setState(2274); match(T__15);
				setState(2275); opt_definition();
				setState(2276); optConsTableSpace();
				setState(2277); constraintAttributeSpec(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2279); match(UNIQUE);
				setState(2280); existingIndex();
				setState(2281); constraintAttributeSpec(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2283); match(PRIMARY);
				setState(2284); match(KEY);
				setState(2285); match(T__8);
				setState(2286); columnList(0);
				setState(2287); match(T__15);
				setState(2288); opt_definition();
				setState(2289); optConsTableSpace();
				setState(2290); constraintAttributeSpec(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2292); match(PRIMARY);
				setState(2293); match(KEY);
				setState(2294); existingIndex();
				setState(2295); constraintAttributeSpec(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2297); match(EXCLUDE);
				setState(2298); access_method_clause();
				setState(2299); match(T__8);
				setState(2300); exclusionConstraintList(0);
				setState(2301); match(T__15);
				setState(2302); opt_definition();
				setState(2303); optConsTableSpace();
				setState(2304); exclusionWhereClause();
				setState(2305); constraintAttributeSpec(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2307); match(FOREIGN);
				setState(2308); match(KEY);
				setState(2309); match(T__8);
				setState(2310); columnList(0);
				setState(2311); match(T__15);
				setState(2312); match(REFERENCES);
				setState(2313); qualified_name();
				setState(2314); opt_column_list();
				setState(2315); key_match();
				setState(2316); key_actions();
				setState(2317); constraintAttributeSpec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_opt_no_inherit);
		try {
			setState(2324);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2321); match(NO);
				setState(2322); match(INHERIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_opt_column_list);
		try {
			setState(2331);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2326); match(T__8);
				setState(2327); columnList(0);
				setState(2328); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public ColumnElemContext columnElem() {
			return getRuleContext(ColumnElemContext.class,0);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		return columnList(0);
	}

	private ColumnListContext columnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColumnListContext _localctx = new ColumnListContext(_ctx, _parentState);
		ColumnListContext _prevctx = _localctx;
		int _startState = 190;
		enterRecursionRule(_localctx, 190, RULE_columnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2334); columnElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2341);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_columnList);
					setState(2336);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2337); match(T__13);
					setState(2338); columnElem();
					}
					} 
				}
				setState(2343);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(SqlParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode SIMPLE() { return getToken(SqlParser.SIMPLE, 0); }
		public TerminalNode PARTIAL() { return getToken(SqlParser.PARTIAL, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_key_match);
		try {
			setState(2353);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2346); match(MATCH);
				setState(2347); match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2348); match(MATCH);
				setState(2349); match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2350); match(MATCH);
				setState(2351); match(SIMPLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public ExclusionconstraintElemContext exclusionconstraintElem() {
			return getRuleContext(ExclusionconstraintElemContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExclusionConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExclusionConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		return exclusionConstraintList(0);
	}

	private ExclusionConstraintListContext exclusionConstraintList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, _parentState);
		ExclusionConstraintListContext _prevctx = _localctx;
		int _startState = 196;
		enterRecursionRule(_localctx, 196, RULE_exclusionConstraintList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2356); exclusionconstraintElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2363);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionConstraintListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exclusionConstraintList);
					setState(2358);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2359); match(T__13);
					setState(2360); exclusionconstraintElem();
					}
					} 
				}
				setState(2365);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExclusionconstraintElemContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public ExclusionconstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExclusionconstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExclusionconstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionconstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintElemContext exclusionconstraintElem() throws RecognitionException {
		ExclusionconstraintElemContext _localctx = new ExclusionconstraintElemContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_exclusionconstraintElem);
		try {
			setState(2377);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2366); index_elem();
				setState(2367); match(WITH);
				setState(2368); any_operator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2370); index_elem();
				setState(2371); match(WITH);
				setState(2372); match(OPERATOR);
				setState(2373); match(T__8);
				setState(2374); any_operator();
				setState(2375); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExclusionWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExclusionWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_exclusionWhereClause);
		try {
			setState(2385);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2379); match(WHERE);
				setState(2380); match(T__8);
				setState(2381); a_expr(0);
				setState(2382); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_key_actions);
		try {
			setState(2396);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2387); key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2388); key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2389); key_update();
				setState(2390); key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2392); key_delete();
				setState(2393); key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398); match(ON);
			setState(2399); match(UPDATE);
			setState(2400); key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402); match(ON);
			setState(2403); match(DELETE_P);
			setState(2404); key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode ACTION() { return getToken(SqlParser.ACTION, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_key_action);
		try {
			setState(2414);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2406); match(NO);
				setState(2407); match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2408); match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2409); match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2410); match(SET);
				setState(2411); match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2412); match(SET);
				setState(2413); match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(SqlParser.INHERITS, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public OptInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptInheritContext optInherit() throws RecognitionException {
		OptInheritContext _localctx = new OptInheritContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_optInherit);
		try {
			setState(2422);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2416); match(INHERITS);
				setState(2417); match(T__8);
				setState(2418); qualified_name_list(0);
				setState(2419); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWithContext extends ParserRuleContext {
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public OptWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptWith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptWith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWithContext optWith() throws RecognitionException {
		OptWithContext _localctx = new OptWithContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_optWith);
		try {
			setState(2431);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2424); match(WITH);
				setState(2425); reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2426); match(WITH);
				setState(2427); match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2428); match(WITHOUT);
				setState(2429); match(OIDS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOnCommitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOnCommitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_onCommitOption);
		try {
			setState(2445);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2433); match(ON);
				setState(2434); match(COMMIT);
				setState(2435); match(DROP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2436); match(ON);
				setState(2437); match(COMMIT);
				setState(2438); match(DELETE_P);
				setState(2439); match(ROWS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2440); match(ON);
				setState(2441); match(COMMIT);
				setState(2442); match(PRESERVE);
				setState(2443); match(ROWS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceContext optTableSpace() throws RecognitionException {
		OptTableSpaceContext _localctx = new OptTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_optTableSpace);
		try {
			setState(2450);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2447); match(TABLESPACE);
				setState(2448); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConsTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConsTableSpaceContext optConsTableSpace() throws RecognitionException {
		OptConsTableSpaceContext _localctx = new OptConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_optConsTableSpace);
		try {
			setState(2457);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2452); match(USING);
				setState(2453); match(INDEX);
				setState(2454); match(TABLESPACE);
				setState(2455); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public ExistingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExistingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExistingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExistingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingIndexContext existingIndex() throws RecognitionException {
		ExistingIndexContext _localctx = new ExistingIndexContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_existingIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2459); match(USING);
			setState(2460); match(INDEX);
			setState(2461); index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAsStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public CreateAsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAsStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateAsStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateAsStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateAsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAsStmtContext createAsStmt() throws RecognitionException {
		CreateAsStmtContext _localctx = new CreateAsStmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_createAsStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463); match(CREATE);
			setState(2464); optTemp();
			setState(2465); match(TABLE);
			setState(2466); create_as_target();
			setState(2467); match(AS);
			setState(2468); selectStmt();
			setState(2469); opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471); qualified_name();
			setState(2472); opt_column_list();
			setState(2473); optWith();
			setState(2474); onCommitOption();
			setState(2475); optTableSpace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_opt_with_data);
		try {
			setState(2483);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2477); match(WITH);
				setState(2478); match(DATA_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2479); match(WITH);
				setState(2480); match(NO);
				setState(2481); match(DATA_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSeqStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptseqOptListContext optseqOptList() {
			return getRuleContext(OptseqOptListContext.class,0);
		}
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public CreateSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSeqStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateSeqStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateSeqStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSeqStmtContext createSeqStmt() throws RecognitionException {
		CreateSeqStmtContext _localctx = new CreateSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_createSeqStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485); match(CREATE);
			setState(2486); optTemp();
			setState(2487); match(SEQUENCE);
			setState(2488); qualified_name();
			setState(2489); optseqOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSeqStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public AlterSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSeqStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterSeqStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterSeqStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSeqStmtContext alterSeqStmt() throws RecognitionException {
		AlterSeqStmtContext _localctx = new AlterSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_alterSeqStmt);
		try {
			setState(2503);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2491); match(ALTER);
				setState(2492); match(SEQUENCE);
				setState(2493); qualified_name();
				setState(2494); seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2496); match(ALTER);
				setState(2497); match(SEQUENCE);
				setState(2498); match(IF_P);
				setState(2499); match(EXISTS);
				setState(2500); qualified_name();
				setState(2501); seqOptList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptseqOptListContext extends ParserRuleContext {
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public OptseqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptseqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptseqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptseqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqOptListContext optseqOptList() throws RecognitionException {
		OptseqOptListContext _localctx = new OptseqOptListContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_optseqOptList);
		try {
			setState(2507);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2505); seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		return seqOptList(0);
	}

	private SeqOptListContext seqOptList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, _parentState);
		SeqOptListContext _prevctx = _localctx;
		int _startState = 234;
		enterRecursionRule(_localctx, 234, RULE_seqOptList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2510); seqOptElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2516);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqOptListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_seqOptList);
					setState(2512);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2513); seqOptElem();
					}
					} 
				}
				setState(2518);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public TerminalNode MAXVALUE() { return getToken(SqlParser.MAXVALUE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(SqlParser.INCREMENT, 0); }
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public TerminalNode MINVALUE() { return getToken(SqlParser.MINVALUE, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(SqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(SqlParser.CACHE, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_seqOptElem);
		int _la;
		try {
			setState(2550);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2519); match(CACHE);
				setState(2520); numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2521); match(CYCLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2522); match(NO);
				setState(2523); match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2524); match(INCREMENT);
				setState(2525); opt_by();
				setState(2526); numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2528); match(MAXVALUE);
				setState(2529); numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2530); match(MINVALUE);
				setState(2531); numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2532); match(NO);
				setState(2533); match(MAXVALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2534); match(NO);
				setState(2535); match(MINVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2536); match(OWNED);
				setState(2537); match(BY);
				setState(2538); any_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2539); match(START);
				setState(2541);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2540); match(WITH);
					}
				}

				setState(2543); numericOnly();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2544); match(RESTART);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2545); match(RESTART);
				setState(2547);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2546); match(WITH);
					}
				}

				setState(2549); numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_opt_by);
		try {
			setState(2554);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2552); match(BY);
				}
				break;
			case T__12:
			case T__10:
			case ICONST:
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_numericOnly);
		try {
			setState(2560);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2556); match(FCONST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2557); match(T__10);
				setState(2558); match(FCONST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2559); signedIconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnly_listContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public NumericOnly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterNumericOnly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitNumericOnly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumericOnly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnly_listContext numericOnly_list() throws RecognitionException {
		return numericOnly_list(0);
	}

	private NumericOnly_listContext numericOnly_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NumericOnly_listContext _localctx = new NumericOnly_listContext(_ctx, _parentState);
		NumericOnly_listContext _prevctx = _localctx;
		int _startState = 242;
		enterRecursionRule(_localctx, 242, RULE_numericOnly_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2563); numericOnly();
			}
			_ctx.stop = _input.LT(-1);
			setState(2570);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NumericOnly_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numericOnly_list);
					setState(2565);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2566); match(T__13);
					setState(2567); numericOnly();
					}
					} 
				}
				setState(2572);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CreatePLangStmtContext extends ParserRuleContext {
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public CreatePLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPLangStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatePLangStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatePLangStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatePLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePLangStmtContext createPLangStmt() throws RecognitionException {
		CreatePLangStmtContext _localctx = new CreatePLangStmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_createPLangStmt);
		try {
			setState(2591);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2573); match(CREATE);
				setState(2574); opt_or_replace();
				setState(2575); opt_trusted();
				setState(2576); opt_procedural();
				setState(2577); match(LANGUAGE);
				setState(2578); colId_or_Sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2580); match(CREATE);
				setState(2581); opt_or_replace();
				setState(2582); opt_trusted();
				setState(2583); opt_procedural();
				setState(2584); match(LANGUAGE);
				setState(2585); colId_or_Sconst();
				setState(2586); match(HANDLER);
				setState(2587); handler_name();
				setState(2588); opt_inline_handler();
				setState(2589); opt_validator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(SqlParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_opt_trusted);
		try {
			setState(2595);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2593); match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_handler_name);
		try {
			setState(2601);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2597); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2598); name();
				setState(2599); attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(SqlParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_opt_inline_handler);
		try {
			setState(2606);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2603); match(INLINE_P);
				setState(2604); handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_validator_clause);
		try {
			setState(2612);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2608); match(VALIDATOR);
				setState(2609); handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(2610); match(NO);
				setState(2611); match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_opt_validator);
		try {
			setState(2616);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2614); validator_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPLangStmtContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropPLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPLangStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropPLangStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropPLangStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropPLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPLangStmtContext dropPLangStmt() throws RecognitionException {
		DropPLangStmtContext _localctx = new DropPLangStmtContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_dropPLangStmt);
		try {
			setState(2632);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2618); match(DROP);
				setState(2619); opt_procedural();
				setState(2620); match(LANGUAGE);
				setState(2621); colId_or_Sconst();
				setState(2622); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2624); match(DROP);
				setState(2625); opt_procedural();
				setState(2626); match(LANGUAGE);
				setState(2627); match(IF_P);
				setState(2628); match(EXISTS);
				setState(2629); colId_or_Sconst();
				setState(2630); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(SqlParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_opt_procedural);
		try {
			setState(2636);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2634); match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public OptTableSpaceOwnerContext optTableSpaceOwner() {
			return getRuleContext(OptTableSpaceOwnerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpaceStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateTableSpaceStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateTableSpaceStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpaceStmtContext createTableSpaceStmt() throws RecognitionException {
		CreateTableSpaceStmtContext _localctx = new CreateTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_createTableSpaceStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2638); match(CREATE);
			setState(2639); match(TABLESPACE);
			setState(2640); name();
			setState(2641); optTableSpaceOwner();
			setState(2642); match(LOCATION);
			setState(2643); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceOwnerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpaceOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptTableSpaceOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptTableSpaceOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableSpaceOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceOwnerContext optTableSpaceOwner() throws RecognitionException {
		OptTableSpaceOwnerContext _localctx = new OptTableSpaceOwnerContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_optTableSpaceOwner);
		try {
			setState(2648);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2645); match(OWNER);
				setState(2646); name();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpaceStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropTableSpaceStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropTableSpaceStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceStmtContext dropTableSpaceStmt() throws RecognitionException {
		DropTableSpaceStmtContext _localctx = new DropTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_dropTableSpaceStmt);
		try {
			setState(2658);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2650); match(DROP);
				setState(2651); match(TABLESPACE);
				setState(2652); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2653); match(DROP);
				setState(2654); match(TABLESPACE);
				setState(2655); match(IF_P);
				setState(2656); match(EXISTS);
				setState(2657); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateExtensionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateExtensionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionStmtContext createExtensionStmt() throws RecognitionException {
		CreateExtensionStmtContext _localctx = new CreateExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_createExtensionStmt);
		try {
			setState(2679);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2660); match(CREATE);
				setState(2661); match(EXTENSION);
				setState(2662); name();
				setState(2664);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(2663); match(WITH);
					}
					break;
				}
				setState(2666); create_extension_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2668); match(CREATE);
				setState(2669); match(EXTENSION);
				setState(2670); match(IF_P);
				setState(2671); match(NOT);
				setState(2672); match(EXISTS);
				setState(2673); name();
				setState(2675);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(2674); match(WITH);
					}
					break;
				}
				setState(2677); create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public Create_extension_opt_itemContext create_extension_opt_item() {
			return getRuleContext(Create_extension_opt_itemContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 268;
		enterRecursionRule(_localctx, 268, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2686);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					setState(2682);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2683); create_extension_opt_item();
					}
					} 
				}
				setState(2688);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_create_extension_opt_item);
		try {
			setState(2695);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2689); match(SCHEMA);
				setState(2690); name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2691); match(VERSION_P);
				setState(2692); colId_or_Sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(2693); match(FROM);
				setState(2694); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionStmtContext extends ParserRuleContext {
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterExtensionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterExtensionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionStmtContext alterExtensionStmt() throws RecognitionException {
		AlterExtensionStmtContext _localctx = new AlterExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_alterExtensionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2697); match(ALTER);
			setState(2698); match(EXTENSION);
			setState(2699); name();
			setState(2700); match(UPDATE);
			setState(2701); alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return getRuleContext(Alter_extension_opt_itemContext.class,0);
		}
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 274;
		enterRecursionRule(_localctx, 274, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2708);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					setState(2704);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2705); alter_extension_opt_item();
					}
					} 
				}
				setState(2710);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2711); match(TO);
			setState(2712); colId_or_Sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContentsStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterExtensionContentsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionContentsStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterExtensionContentsStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterExtensionContentsStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterExtensionContentsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContentsStmtContext alterExtensionContentsStmt() throws RecognitionException {
		AlterExtensionContentsStmtContext _localctx = new AlterExtensionContentsStmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_alterExtensionContentsStmt);
		try {
			setState(2892);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2714); match(ALTER);
				setState(2715); match(EXTENSION);
				setState(2716); name();
				setState(2717); add_drop();
				setState(2718); match(AGGREGATE);
				setState(2719); func_name();
				setState(2720); aggr_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2722); match(ALTER);
				setState(2723); match(EXTENSION);
				setState(2724); name();
				setState(2725); add_drop();
				setState(2726); match(CAST);
				setState(2727); match(T__8);
				setState(2728); typename();
				setState(2729); match(AS);
				setState(2730); typename();
				setState(2731); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2733); match(ALTER);
				setState(2734); match(EXTENSION);
				setState(2735); name();
				setState(2736); add_drop();
				setState(2737); match(COLLATION);
				setState(2738); any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2740); match(ALTER);
				setState(2741); match(EXTENSION);
				setState(2742); name();
				setState(2743); add_drop();
				setState(2744); match(CONVERSION_P);
				setState(2745); any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2747); match(ALTER);
				setState(2748); match(EXTENSION);
				setState(2749); name();
				setState(2750); add_drop();
				setState(2751); match(DOMAIN_P);
				setState(2752); any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2754); match(ALTER);
				setState(2755); match(EXTENSION);
				setState(2756); name();
				setState(2757); add_drop();
				setState(2758); match(FUNCTION);
				setState(2759); function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2761); match(ALTER);
				setState(2762); match(EXTENSION);
				setState(2763); name();
				setState(2764); add_drop();
				setState(2765); opt_procedural();
				setState(2766); match(LANGUAGE);
				setState(2767); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2769); match(ALTER);
				setState(2770); match(EXTENSION);
				setState(2771); name();
				setState(2772); add_drop();
				setState(2773); match(OPERATOR);
				setState(2774); any_operator();
				setState(2775); oper_argtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2777); match(ALTER);
				setState(2778); match(EXTENSION);
				setState(2779); name();
				setState(2780); add_drop();
				setState(2781); match(OPERATOR);
				setState(2782); match(CLASS);
				setState(2783); any_name();
				setState(2784); match(USING);
				setState(2785); access_method();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2787); match(ALTER);
				setState(2788); match(EXTENSION);
				setState(2789); name();
				setState(2790); add_drop();
				setState(2791); match(OPERATOR);
				setState(2792); match(FAMILY);
				setState(2793); any_name();
				setState(2794); match(USING);
				setState(2795); access_method();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2797); match(ALTER);
				setState(2798); match(EXTENSION);
				setState(2799); name();
				setState(2800); add_drop();
				setState(2801); match(SCHEMA);
				setState(2802); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2804); match(ALTER);
				setState(2805); match(EXTENSION);
				setState(2806); name();
				setState(2807); add_drop();
				setState(2808); match(TABLE);
				setState(2809); any_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2811); match(ALTER);
				setState(2812); match(EXTENSION);
				setState(2813); name();
				setState(2814); add_drop();
				setState(2815); match(TEXT_P);
				setState(2816); match(SEARCH);
				setState(2817); match(PARSER);
				setState(2818); any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2820); match(ALTER);
				setState(2821); match(EXTENSION);
				setState(2822); name();
				setState(2823); add_drop();
				setState(2824); match(TEXT_P);
				setState(2825); match(SEARCH);
				setState(2826); match(DICTIONARY);
				setState(2827); any_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2829); match(ALTER);
				setState(2830); match(EXTENSION);
				setState(2831); name();
				setState(2832); add_drop();
				setState(2833); match(TEXT_P);
				setState(2834); match(SEARCH);
				setState(2835); match(TEMPLATE);
				setState(2836); any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2838); match(ALTER);
				setState(2839); match(EXTENSION);
				setState(2840); name();
				setState(2841); add_drop();
				setState(2842); match(TEXT_P);
				setState(2843); match(SEARCH);
				setState(2844); match(CONFIGURATION);
				setState(2845); any_name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2847); match(ALTER);
				setState(2848); match(EXTENSION);
				setState(2849); name();
				setState(2850); add_drop();
				setState(2851); match(SEQUENCE);
				setState(2852); any_name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2854); match(ALTER);
				setState(2855); match(EXTENSION);
				setState(2856); name();
				setState(2857); add_drop();
				setState(2858); match(VIEW);
				setState(2859); any_name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2861); match(ALTER);
				setState(2862); match(EXTENSION);
				setState(2863); name();
				setState(2864); add_drop();
				setState(2865); match(FOREIGN);
				setState(2866); match(TABLE);
				setState(2867); any_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2869); match(ALTER);
				setState(2870); match(EXTENSION);
				setState(2871); name();
				setState(2872); add_drop();
				setState(2873); match(FOREIGN);
				setState(2874); match(DATA_P);
				setState(2875); match(WRAPPER);
				setState(2876); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2878); match(ALTER);
				setState(2879); match(EXTENSION);
				setState(2880); name();
				setState(2881); add_drop();
				setState(2882); match(SERVER);
				setState(2883); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2885); match(ALTER);
				setState(2886); match(EXTENSION);
				setState(2887); name();
				setState(2888); add_drop();
				setState(2889); match(TYPE_P);
				setState(2890); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFdwStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public CreateFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFdwStmtContext createFdwStmt() throws RecognitionException {
		CreateFdwStmtContext _localctx = new CreateFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_createFdwStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2894); match(CREATE);
			setState(2895); match(FOREIGN);
			setState(2896); match(DATA_P);
			setState(2897); match(WRAPPER);
			setState(2898); name();
			setState(2899); opt_fdw_options();
			setState(2900); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_fdw_option);
		try {
			setState(2910);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2902); match(HANDLER);
				setState(2903); handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2904); match(NO);
				setState(2905); match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2906); match(VALIDATOR);
				setState(2907); handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2908); match(NO);
				setState(2909); match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionContext fdw_option() {
			return getRuleContext(Fdw_optionContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 284;
		enterRecursionRule(_localctx, 284, RULE_fdw_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2913); fdw_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(2919);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					setState(2915);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2916); fdw_option();
					}
					} 
				}
				setState(2921);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_opt_fdw_options);
		try {
			setState(2924);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2922); fdw_options(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFdwStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public DropFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFdwStmtContext dropFdwStmt() throws RecognitionException {
		DropFdwStmtContext _localctx = new DropFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_dropFdwStmt);
		try {
			setState(2942);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2926); match(DROP);
				setState(2927); match(FOREIGN);
				setState(2928); match(DATA_P);
				setState(2929); match(WRAPPER);
				setState(2930); name();
				setState(2931); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2933); match(DROP);
				setState(2934); match(FOREIGN);
				setState(2935); match(DATA_P);
				setState(2936); match(WRAPPER);
				setState(2937); match(IF_P);
				setState(2938); match(EXISTS);
				setState(2939); name();
				setState(2940); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFdwStmtContext extends ParserRuleContext {
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public AlterFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFdwStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterFdwStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterFdwStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFdwStmtContext alterFdwStmt() throws RecognitionException {
		AlterFdwStmtContext _localctx = new AlterFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_alterFdwStmt);
		try {
			setState(2959);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2944); match(ALTER);
				setState(2945); match(FOREIGN);
				setState(2946); match(DATA_P);
				setState(2947); match(WRAPPER);
				setState(2948); name();
				setState(2949); opt_fdw_options();
				setState(2950); alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2952); match(ALTER);
				setState(2953); match(FOREIGN);
				setState(2954); match(DATA_P);
				setState(2955); match(WRAPPER);
				setState(2956); name();
				setState(2957); fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_create_generic_options);
		try {
			setState(2967);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2961); match(OPTIONS);
				setState(2962); match(T__8);
				setState(2963); generic_option_list(0);
				setState(2964); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 294;
		enterRecursionRule(_localctx, 294, RULE_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2970); generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2977);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					setState(2972);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2973); match(T__13);
					setState(2974); generic_option_elem();
					}
					} 
				}
				setState(2979);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980); match(OPTIONS);
			setState(2981); match(T__8);
			setState(2982); alter_generic_option_list(0);
			setState(2983); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem() {
			return getRuleContext(Alter_generic_option_elemContext.class,0);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 298;
		enterRecursionRule(_localctx, 298, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2986); alter_generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2993);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,127,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					setState(2988);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2989); match(T__13);
					setState(2990); alter_generic_option_elem();
					}
					} 
				}
				setState(2995);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,127,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_generic_option_elem);
		try {
			setState(3003);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2996); generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2997); match(SET);
				setState(2998); generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2999); match(ADD_P);
				setState(3000); generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3001); match(DROP);
				setState(3002); generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005); generic_option_name();
			setState(3006); generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3008); colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public CreateForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignServerStmtContext createForeignServerStmt() throws RecognitionException {
		CreateForeignServerStmtContext _localctx = new CreateForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_createForeignServerStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012); match(CREATE);
			setState(3013); match(SERVER);
			setState(3014); name();
			setState(3015); opt_type();
			setState(3016); opt_foreign_server_version();
			setState(3017); match(FOREIGN);
			setState(3018); match(DATA_P);
			setState(3019); match(WRAPPER);
			setState(3020); name();
			setState(3021); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_opt_type);
		try {
			setState(3026);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3023); match(TYPE_P);
				setState(3024); sConst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_foreign_server_version);
		try {
			setState(3032);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3028); match(VERSION_P);
				setState(3029); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3030); match(VERSION_P);
				setState(3031); match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_opt_foreign_server_version);
		try {
			setState(3036);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3034); foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignServerStmtContext dropForeignServerStmt() throws RecognitionException {
		DropForeignServerStmtContext _localctx = new DropForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_dropForeignServerStmt);
		try {
			setState(3050);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3038); match(DROP);
				setState(3039); match(SERVER);
				setState(3040); name();
				setState(3041); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3043); match(DROP);
				setState(3044); match(SERVER);
				setState(3045); match(IF_P);
				setState(3046); match(EXISTS);
				setState(3047); name();
				setState(3048); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignServerStmtContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignServerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterForeignServerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterForeignServerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignServerStmtContext alterForeignServerStmt() throws RecognitionException {
		AlterForeignServerStmtContext _localctx = new AlterForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alterForeignServerStmt);
		try {
			setState(3068);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3052); match(ALTER);
				setState(3053); match(SERVER);
				setState(3054); name();
				setState(3055); foreign_server_version();
				setState(3056); alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3058); match(ALTER);
				setState(3059); match(SERVER);
				setState(3060); name();
				setState(3061); foreign_server_version();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3063); match(ALTER);
				setState(3064); match(SERVER);
				setState(3065); name();
				setState(3066); alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public OptforeigntableElementListContext optforeigntableElementList() {
			return getRuleContext(OptforeigntableElementListContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateForeignTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateForeignTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableStmtContext createForeignTableStmt() throws RecognitionException {
		CreateForeignTableStmtContext _localctx = new CreateForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_createForeignTableStmt);
		try {
			setState(3091);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3070); match(CREATE);
				setState(3071); match(FOREIGN);
				setState(3072); match(TABLE);
				setState(3073); qualified_name();
				setState(3074); optforeigntableElementList();
				setState(3075); match(SERVER);
				setState(3076); name();
				setState(3077); create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3079); match(CREATE);
				setState(3080); match(FOREIGN);
				setState(3081); match(TABLE);
				setState(3082); match(IF_P);
				setState(3083); match(NOT);
				setState(3084); match(EXISTS);
				setState(3085); qualified_name();
				setState(3086); optforeigntableElementList();
				setState(3087); match(SERVER);
				setState(3088); name();
				setState(3089); create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptforeigntableElementListContext extends ParserRuleContext {
		public ForeigntableElementListContext foreigntableElementList() {
			return getRuleContext(ForeigntableElementListContext.class,0);
		}
		public OptforeigntableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optforeigntableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptforeigntableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptforeigntableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptforeigntableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptforeigntableElementListContext optforeigntableElementList() throws RecognitionException {
		OptforeigntableElementListContext _localctx = new OptforeigntableElementListContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_optforeigntableElementList);
		try {
			setState(3099);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3093); match(T__8);
				setState(3094); foreigntableElementList(0);
				setState(3095); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3097); match(T__8);
				setState(3098); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeigntableElementListContext extends ParserRuleContext {
		public ForeigntableElementListContext foreigntableElementList() {
			return getRuleContext(ForeigntableElementListContext.class,0);
		}
		public ForeigntableElementContext foreigntableElement() {
			return getRuleContext(ForeigntableElementContext.class,0);
		}
		public ForeigntableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreigntableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterForeigntableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitForeigntableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeigntableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeigntableElementListContext foreigntableElementList() throws RecognitionException {
		return foreigntableElementList(0);
	}

	private ForeigntableElementListContext foreigntableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForeigntableElementListContext _localctx = new ForeigntableElementListContext(_ctx, _parentState);
		ForeigntableElementListContext _prevctx = _localctx;
		int _startState = 324;
		enterRecursionRule(_localctx, 324, RULE_foreigntableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3102); foreigntableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3109);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForeigntableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_foreigntableElementList);
					setState(3104);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3105); match(T__13);
					setState(3106); foreigntableElement();
					}
					} 
				}
				setState(3111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForeigntableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public ForeigntableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreigntableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterForeigntableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitForeigntableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeigntableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeigntableElementContext foreigntableElement() throws RecognitionException {
		ForeigntableElementContext _localctx = new ForeigntableElementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_foreigntableElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3112); columnDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public AlterForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterForeignTableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterForeignTableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableStmtContext alterForeignTableStmt() throws RecognitionException {
		AlterForeignTableStmtContext _localctx = new AlterForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterForeignTableStmt);
		try {
			setState(3128);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3114); match(ALTER);
				setState(3115); match(FOREIGN);
				setState(3116); match(TABLE);
				setState(3117); relation_expr();
				setState(3118); alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3120); match(ALTER);
				setState(3121); match(FOREIGN);
				setState(3122); match(TABLE);
				setState(3123); match(IF_P);
				setState(3124); match(EXISTS);
				setState(3125); relation_expr();
				setState(3126); alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingStmtContext createUserMappingStmt() throws RecognitionException {
		CreateUserMappingStmtContext _localctx = new CreateUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3130); match(CREATE);
			setState(3131); match(USER);
			setState(3132); match(MAPPING);
			setState(3133); match(FOR);
			setState(3134); auth_ident();
			setState(3135); match(SERVER);
			setState(3136); name();
			setState(3137); create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_auth_ident);
		try {
			setState(3142);
			switch (_input.LA(1)) {
			case CURRENT_USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3139); match(CURRENT_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140); match(USER);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3141); roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingStmtContext dropUserMappingStmt() throws RecognitionException {
		DropUserMappingStmtContext _localctx = new DropUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_dropUserMappingStmt);
		try {
			setState(3162);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3144); match(DROP);
				setState(3145); match(USER);
				setState(3146); match(MAPPING);
				setState(3147); match(FOR);
				setState(3148); auth_ident();
				setState(3149); match(SERVER);
				setState(3150); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152); match(DROP);
				setState(3153); match(USER);
				setState(3154); match(MAPPING);
				setState(3155); match(IF_P);
				setState(3156); match(EXISTS);
				setState(3157); match(FOR);
				setState(3158); auth_ident();
				setState(3159); match(SERVER);
				setState(3160); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMappingStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterUserMappingStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterUserMappingStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingStmtContext alterUserMappingStmt() throws RecognitionException {
		AlterUserMappingStmtContext _localctx = new AlterUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alterUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164); match(ALTER);
			setState(3165); match(USER);
			setState(3166); match(MAPPING);
			setState(3167); match(FOR);
			setState(3168); auth_ident();
			setState(3169); match(SERVER);
			setState(3170); name();
			setState(3171); alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTrigStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public OptConstrFromTableContext optConstrFromTable() {
			return getRuleContext(OptConstrFromTableContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(SqlParser.PROCEDURE, 0); }
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public CreateTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateTrigStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateTrigStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTrigStmtContext createTrigStmt() throws RecognitionException {
		CreateTrigStmtContext _localctx = new CreateTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_createTrigStmt);
		try {
			setState(3210);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3173); match(CREATE);
				setState(3174); match(TRIGGER);
				setState(3175); name();
				setState(3176); triggerActionTime();
				setState(3177); triggerEvents(0);
				setState(3178); match(ON);
				setState(3179); qualified_name();
				setState(3180); triggerForSpec();
				setState(3181); triggerWhen();
				setState(3182); match(EXECUTE);
				setState(3183); match(PROCEDURE);
				setState(3184); func_name();
				setState(3185); match(T__8);
				setState(3186); triggerFuncArgs(0);
				setState(3187); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3189); match(CREATE);
				setState(3190); match(CONSTRAINT);
				setState(3191); match(TRIGGER);
				setState(3192); name();
				setState(3193); match(AFTER);
				setState(3194); triggerEvents(0);
				setState(3195); match(ON);
				setState(3196); qualified_name();
				setState(3197); optConstrFromTable();
				setState(3198); constraintAttributeSpec(0);
				setState(3199); match(FOR);
				setState(3200); match(EACH);
				setState(3201); match(ROW);
				setState(3202); triggerWhen();
				setState(3203); match(EXECUTE);
				setState(3204); match(PROCEDURE);
				setState(3205); func_name();
				setState(3206); match(T__8);
				setState(3207); triggerFuncArgs(0);
				setState(3208); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerActionTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerActionTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_triggerActionTime);
		try {
			setState(3216);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3212); match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3213); match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3214); match(INSTEAD);
				setState(3215); match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TriggerOneEventContext triggerOneEvent() {
			return getRuleContext(TriggerOneEventContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		return triggerEvents(0);
	}

	private TriggerEventsContext triggerEvents(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, _parentState);
		TriggerEventsContext _prevctx = _localctx;
		int _startState = 342;
		enterRecursionRule(_localctx, 342, RULE_triggerEvents, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3219); triggerOneEvent();
			}
			_ctx.stop = _input.LT(-1);
			setState(3226);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerEventsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerEvents);
					setState(3221);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3222); match(OR);
					setState(3223); triggerOneEvent();
					}
					} 
				}
				setState(3228);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerOneEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerOneEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_triggerOneEvent);
		try {
			setState(3236);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3229); match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3230); match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3231); match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3232); match(UPDATE);
				setState(3233); match(OF);
				setState(3234); columnList(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3235); match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TriggerForTypeContext triggerForType() {
			return getRuleContext(TriggerForTypeContext.class,0);
		}
		public TriggerForOptEachContext triggerForOptEach() {
			return getRuleContext(TriggerForOptEachContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerForSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerForSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_triggerForSpec);
		try {
			setState(3243);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3238); match(FOR);
				setState(3239); triggerForOptEach();
				setState(3240); triggerForType();
				}
				break;
			case EXECUTE:
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForOptEachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public TriggerForOptEachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForOptEach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerForOptEach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerForOptEach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForOptEach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForOptEachContext triggerForOptEach() throws RecognitionException {
		TriggerForOptEachContext _localctx = new TriggerForOptEachContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_triggerForOptEach);
		try {
			setState(3247);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3245); match(EACH);
				}
				break;
			case ROW:
			case STATEMENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForTypeContext extends ParserRuleContext {
		public TerminalNode STATEMENT() { return getToken(SqlParser.STATEMENT, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TriggerForTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerForType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerForType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForTypeContext triggerForType() throws RecognitionException {
		TriggerForTypeContext _localctx = new TriggerForTypeContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_triggerForType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3249);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_triggerWhen);
		try {
			setState(3257);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3251); match(WHEN);
				setState(3252); match(T__8);
				setState(3253); a_expr(0);
				setState(3254); match(T__15);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public TriggerFuncArgContext triggerFuncArg() {
			return getRuleContext(TriggerFuncArgContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		return triggerFuncArgs(0);
	}

	private TriggerFuncArgsContext triggerFuncArgs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, _parentState);
		TriggerFuncArgsContext _prevctx = _localctx;
		int _startState = 354;
		enterRecursionRule(_localctx, 354, RULE_triggerFuncArgs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(3260); triggerFuncArg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3269);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerFuncArgsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerFuncArgs);
					setState(3264);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3265); match(T__13);
					setState(3266); triggerFuncArg();
					}
					} 
				}
				setState(3271);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTriggerFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTriggerFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_triggerFuncArg);
		try {
			setState(3276);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3272); iConst();
				}
				break;
			case FCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(3273); match(FCONST);
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 3);
				{
				setState(3274); sConst();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case INTO:
			case DECLARE:
			case FROM:
			case AGGREGATE:
			case ALL:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERTION:
			case ASSIGNMENT:
			case ASYMMETRIC:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BOTH:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATE:
			case COLLATION:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CREATE:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DESC:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ELSE:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case END_P:
			case ENUM_P:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FETCH:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FOR:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANT:
			case GRANTED:
			case GREATEST:
			case GROUP_P:
			case HANDLER:
			case HAVING:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case IN_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEADING:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OFFSET:
			case OIDS:
			case ON:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OR:
			case ORDER:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLACING:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCES:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNING:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SELECT:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYMMETRIC:
			case SYSID:
			case SYSTEM_P:
			case TABLE:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case USING:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARIADIC:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case WHITESPACE_P:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3275); colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConstrFromTableContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public OptConstrFromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConstrFromTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptConstrFromTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptConstrFromTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptConstrFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConstrFromTableContext optConstrFromTable() throws RecognitionException {
		OptConstrFromTableContext _localctx = new OptConstrFromTableContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_optConstrFromTable);
		try {
			setState(3281);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3278); match(FROM);
				setState(3279); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public ConstraintAttributeElemContext constraintAttributeElem() {
			return getRuleContext(ConstraintAttributeElemContext.class,0);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraintAttributeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraintAttributeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		return constraintAttributeSpec(0);
	}

	private ConstraintAttributeSpecContext constraintAttributeSpec(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, _parentState);
		ConstraintAttributeSpecContext _prevctx = _localctx;
		int _startState = 360;
		enterRecursionRule(_localctx, 360, RULE_constraintAttributeSpec, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3288);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintAttributeSpecContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_constraintAttributeSpec);
					setState(3284);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3285); constraintAttributeElem();
					}
					} 
				}
				setState(3290);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstraintAttributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstraintAttributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_constraintAttributeElem);
		try {
			setState(3302);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3291); match(NOT);
				setState(3292); match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3293); match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3294); match(INITIALLY);
				setState(3295); match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3296); match(INITIALLY);
				setState(3297); match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3298); match(NOT);
				setState(3299); match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3300); match(NO);
				setState(3301); match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTrigStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropTrigStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropTrigStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTrigStmtContext dropTrigStmt() throws RecognitionException {
		DropTrigStmtContext _localctx = new DropTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_dropTrigStmt);
		try {
			setState(3320);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3304); match(DROP);
				setState(3305); match(TRIGGER);
				setState(3306); name();
				setState(3307); match(ON);
				setState(3308); any_name();
				setState(3309); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3311); match(DROP);
				setState(3312); match(TRIGGER);
				setState(3313); match(IF_P);
				setState(3314); match(EXISTS);
				setState(3315); name();
				setState(3316); match(ON);
				setState(3317); any_name();
				setState(3318); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAssertStmtContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAssertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateAssertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateAssertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAssertStmtContext createAssertStmt() throws RecognitionException {
		CreateAssertStmtContext _localctx = new CreateAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_createAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3322); match(CREATE);
			setState(3323); match(ASSERTION);
			setState(3324); name();
			setState(3325); match(CHECK);
			setState(3326); match(T__8);
			setState(3327); a_expr(0);
			setState(3328); match(T__15);
			setState(3329); constraintAttributeSpec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAssertStmtContext extends ParserRuleContext {
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAssertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropAssertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropAssertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAssertStmtContext dropAssertStmt() throws RecognitionException {
		DropAssertStmtContext _localctx = new DropAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_dropAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3331); match(DROP);
			setState(3332); match(ASSERTION);
			setState(3333); name();
			setState(3334); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineStmtContext extends ParserRuleContext {
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public OpttableFuncElementListContext opttableFuncElementList() {
			return getRuleContext(OpttableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM_P() { return getToken(SqlParser.ENUM_P, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public DefineStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefineStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefineStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefineStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineStmtContext defineStmt() throws RecognitionException {
		DefineStmtContext _localctx = new DefineStmtContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_defineStmt);
		try {
			setState(3423);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3336); match(CREATE);
				setState(3337); match(AGGREGATE);
				setState(3338); func_name();
				setState(3339); aggr_args();
				setState(3340); definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3342); match(CREATE);
				setState(3343); match(AGGREGATE);
				setState(3344); func_name();
				setState(3345); old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3347); match(CREATE);
				setState(3348); match(OPERATOR);
				setState(3349); any_operator();
				setState(3350); definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3352); match(CREATE);
				setState(3353); match(TYPE_P);
				setState(3354); any_name();
				setState(3355); definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3357); match(CREATE);
				setState(3358); match(TYPE_P);
				setState(3359); any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3360); match(CREATE);
				setState(3361); match(TYPE_P);
				setState(3362); any_name();
				setState(3363); match(AS);
				setState(3364); match(T__8);
				setState(3365); opttableFuncElementList();
				setState(3366); match(T__15);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3368); match(CREATE);
				setState(3369); match(TYPE_P);
				setState(3370); any_name();
				setState(3371); match(AS);
				setState(3372); match(ENUM_P);
				setState(3373); match(T__8);
				setState(3374); opt_enum_val_list();
				setState(3375); match(T__15);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3377); match(CREATE);
				setState(3378); match(TYPE_P);
				setState(3379); any_name();
				setState(3380); match(AS);
				setState(3381); match(RANGE);
				setState(3382); definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3384); match(CREATE);
				setState(3385); match(TEXT_P);
				setState(3386); match(SEARCH);
				setState(3387); match(PARSER);
				setState(3388); any_name();
				setState(3389); definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3391); match(CREATE);
				setState(3392); match(TEXT_P);
				setState(3393); match(SEARCH);
				setState(3394); match(DICTIONARY);
				setState(3395); any_name();
				setState(3396); definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3398); match(CREATE);
				setState(3399); match(TEXT_P);
				setState(3400); match(SEARCH);
				setState(3401); match(TEMPLATE);
				setState(3402); any_name();
				setState(3403); definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3405); match(CREATE);
				setState(3406); match(TEXT_P);
				setState(3407); match(SEARCH);
				setState(3408); match(CONFIGURATION);
				setState(3409); any_name();
				setState(3410); definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3412); match(CREATE);
				setState(3413); match(COLLATION);
				setState(3414); any_name();
				setState(3415); definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3417); match(CREATE);
				setState(3418); match(COLLATION);
				setState(3419); any_name();
				setState(3420); match(FROM);
				setState(3421); any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3425); match(T__8);
			setState(3426); def_list(0);
			setState(3427); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public Def_elemContext def_elem() {
			return getRuleContext(Def_elemContext.class,0);
		}
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Def_listContext _localctx = new Def_listContext(_ctx, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 374;
		enterRecursionRule(_localctx, 374, RULE_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3430); def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3437);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_def_list);
					setState(3432);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3433); match(T__13);
					setState(3434); def_elem();
					}
					} 
				}
				setState(3439);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_def_elem);
		try {
			setState(3445);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3440); colLabel();
				setState(3441); match(T__5);
				setState(3442); def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3444); colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_def_arg);
		try {
			setState(3452);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3447); func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3448); reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3449); qual_all_Op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3450); numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3451); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_aggr_args);
		try {
			setState(3461);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3454); match(T__8);
				setState(3455); type_list(0);
				setState(3456); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3458); match(T__8);
				setState(3459); match(T__9);
				setState(3460); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3463); match(T__8);
			setState(3464); old_aggr_list(0);
			setState(3465); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_elemContext old_aggr_elem() {
			return getRuleContext(Old_aggr_elemContext.class,0);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 384;
		enterRecursionRule(_localctx, 384, RULE_old_aggr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3468); old_aggr_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3475);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					setState(3470);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3471); match(T__13);
					setState(3472); old_aggr_elem();
					}
					} 
				}
				setState(3477);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3478); match(IDENT);
			setState(3479); match(T__5);
			setState(3480); def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_opt_enum_val_list);
		try {
			setState(3484);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3482); enum_val_list(0);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 390;
		enterRecursionRule(_localctx, 390, RULE_enum_val_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3487); sConst();
			}
			_ctx.stop = _input.LT(-1);
			setState(3494);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					setState(3489);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3490); match(T__13);
					setState(3491); sConst();
					}
					} 
				}
				setState(3496);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterEnumStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public AlterEnumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEnumStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterEnumStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterEnumStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterEnumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEnumStmtContext alterEnumStmt() throws RecognitionException {
		AlterEnumStmtContext _localctx = new AlterEnumStmtContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alterEnumStmt);
		try {
			setState(3522);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3497); match(ALTER);
				setState(3498); match(TYPE_P);
				setState(3499); any_name();
				setState(3500); match(ADD_P);
				setState(3501); match(VALUE_P);
				setState(3502); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3504); match(ALTER);
				setState(3505); match(TYPE_P);
				setState(3506); any_name();
				setState(3507); match(ADD_P);
				setState(3508); match(VALUE_P);
				setState(3509); sConst();
				setState(3510); match(BEFORE);
				setState(3511); sConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3513); match(ALTER);
				setState(3514); match(TYPE_P);
				setState(3515); any_name();
				setState(3516); match(ADD_P);
				setState(3517); match(VALUE_P);
				setState(3518); sConst();
				setState(3519); match(AFTER);
				setState(3520); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpClassStmtContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public CreateOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpClassStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateOpClassStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateOpClassStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpClassStmtContext createOpClassStmt() throws RecognitionException {
		CreateOpClassStmtContext _localctx = new CreateOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_createOpClassStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524); match(CREATE);
			setState(3525); match(OPERATOR);
			setState(3526); match(CLASS);
			setState(3527); any_name();
			setState(3528); opt_default();
			setState(3529); match(FOR);
			setState(3530); match(TYPE_P);
			setState(3531); typename();
			setState(3532); match(USING);
			setState(3533); access_method();
			setState(3534); opt_opfamily();
			setState(3535); match(AS);
			setState(3536); opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Opclass_itemContext opclass_item() {
			return getRuleContext(Opclass_itemContext.class,0);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 396;
		enterRecursionRule(_localctx, 396, RULE_opclass_item_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3539); opclass_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(3546);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					setState(3541);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3542); match(T__13);
					setState(3543); opclass_item();
					}
					} 
				}
				setState(3548);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_opclass_item);
		try {
			setState(3577);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3549); match(OPERATOR);
				setState(3550); iConst();
				setState(3551); any_operator();
				setState(3552); opclass_purpose();
				setState(3553); opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3555); match(OPERATOR);
				setState(3556); iConst();
				setState(3557); any_operator();
				setState(3558); oper_argtypes();
				setState(3559); opclass_purpose();
				setState(3560); opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3562); match(FUNCTION);
				setState(3563); iConst();
				setState(3564); func_name();
				setState(3565); func_args();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3567); match(FUNCTION);
				setState(3568); iConst();
				setState(3569); match(T__8);
				setState(3570); type_list(0);
				setState(3571); match(T__15);
				setState(3572); func_name();
				setState(3573); func_args();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3575); match(STORAGE);
				setState(3576); typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_opt_default);
		try {
			setState(3581);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3579); match(DEFAULT);
				}
				break;
			case CONVERSION_P:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_opt_opfamily);
		try {
			setState(3586);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3583); match(FAMILY);
				setState(3584); any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_opclass_purpose);
		try {
			setState(3595);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3588); match(FOR);
				setState(3589); match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3590); match(FOR);
				setState(3591); match(ORDER);
				setState(3592); match(BY);
				setState(3593); any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(SqlParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_opt_recheck);
		try {
			setState(3599);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3597); match(RECHECK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpFamilyStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public CreateOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpFamilyStmtContext createOpFamilyStmt() throws RecognitionException {
		CreateOpFamilyStmtContext _localctx = new CreateOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_createOpFamilyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601); match(CREATE);
			setState(3602); match(OPERATOR);
			setState(3603); match(FAMILY);
			setState(3604); any_name();
			setState(3605); match(USING);
			setState(3606); access_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOpFamilyStmtContext extends ParserRuleContext {
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public AlterOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOpFamilyStmtContext alterOpFamilyStmt() throws RecognitionException {
		AlterOpFamilyStmtContext _localctx = new AlterOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_alterOpFamilyStmt);
		try {
			setState(3626);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3608); match(ALTER);
				setState(3609); match(OPERATOR);
				setState(3610); match(FAMILY);
				setState(3611); any_name();
				setState(3612); match(USING);
				setState(3613); access_method();
				setState(3614); match(ADD_P);
				setState(3615); opclass_item_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3617); match(ALTER);
				setState(3618); match(OPERATOR);
				setState(3619); match(FAMILY);
				setState(3620); any_name();
				setState(3621); match(USING);
				setState(3622); access_method();
				setState(3623); match(DROP);
				setState(3624); opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public Opclass_dropContext opclass_drop() {
			return getRuleContext(Opclass_dropContext.class,0);
		}
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 412;
		enterRecursionRule(_localctx, 412, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3629); opclass_drop();
			}
			_ctx.stop = _input.LT(-1);
			setState(3636);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					setState(3631);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3632); match(T__13);
					setState(3633); opclass_drop();
					}
					} 
				}
				setState(3638);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_opclass_drop);
		try {
			setState(3651);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3639); match(OPERATOR);
				setState(3640); iConst();
				setState(3641); match(T__8);
				setState(3642); type_list(0);
				setState(3643); match(T__15);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3645); match(FUNCTION);
				setState(3646); iConst();
				setState(3647); match(T__8);
				setState(3648); type_list(0);
				setState(3649); match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpClassStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public DropOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpClassStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropOpClassStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropOpClassStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpClassStmtContext dropOpClassStmt() throws RecognitionException {
		DropOpClassStmtContext _localctx = new DropOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_dropOpClassStmt);
		try {
			setState(3671);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3653); match(DROP);
				setState(3654); match(OPERATOR);
				setState(3655); match(CLASS);
				setState(3656); any_name();
				setState(3657); match(USING);
				setState(3658); access_method();
				setState(3659); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3661); match(DROP);
				setState(3662); match(OPERATOR);
				setState(3663); match(CLASS);
				setState(3664); match(IF_P);
				setState(3665); match(EXISTS);
				setState(3666); any_name();
				setState(3667); match(USING);
				setState(3668); access_method();
				setState(3669); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpFamilyStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public DropOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpFamilyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropOpFamilyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropOpFamilyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpFamilyStmtContext dropOpFamilyStmt() throws RecognitionException {
		DropOpFamilyStmtContext _localctx = new DropOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_dropOpFamilyStmt);
		try {
			setState(3691);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3673); match(DROP);
				setState(3674); match(OPERATOR);
				setState(3675); match(FAMILY);
				setState(3676); any_name();
				setState(3677); match(USING);
				setState(3678); access_method();
				setState(3679); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3681); match(DROP);
				setState(3682); match(OPERATOR);
				setState(3683); match(FAMILY);
				setState(3684); match(IF_P);
				setState(3685); match(EXISTS);
				setState(3686); any_name();
				setState(3687); match(USING);
				setState(3688); access_method();
				setState(3689); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedStmtContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwnedStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropOwnedStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropOwnedStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedStmtContext dropOwnedStmt() throws RecognitionException {
		DropOwnedStmtContext _localctx = new DropOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_dropOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3693); match(DROP);
			setState(3694); match(OWNED);
			setState(3695); match(BY);
			setState(3696); name_list(0);
			setState(3697); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignOwnedStmtContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode REASSIGN() { return getToken(SqlParser.REASSIGN, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReassignOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwnedStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReassignOwnedStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReassignOwnedStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReassignOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedStmtContext reassignOwnedStmt() throws RecognitionException {
		ReassignOwnedStmtContext _localctx = new ReassignOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_reassignOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3699); match(REASSIGN);
			setState(3700); match(OWNED);
			setState(3701); match(BY);
			setState(3702); name_list(0);
			setState(3703); match(TO);
			setState(3704); name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStmtContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStmtContext dropStmt() throws RecognitionException {
		DropStmtContext _localctx = new DropStmtContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dropStmt);
		try {
			setState(3732);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3706); match(DROP);
				setState(3707); drop_type();
				setState(3708); match(IF_P);
				setState(3709); match(EXISTS);
				setState(3710); any_name_list(0);
				setState(3711); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713); match(DROP);
				setState(3714); drop_type();
				setState(3715); any_name_list(0);
				setState(3716); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3718); match(DROP);
				setState(3719); match(INDEX);
				setState(3720); match(CONCURRENTLY);
				setState(3721); any_name_list(0);
				setState(3722); opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3724); match(DROP);
				setState(3725); match(INDEX);
				setState(3726); match(CONCURRENTLY);
				setState(3727); match(IF_P);
				setState(3728); match(EXISTS);
				setState(3729); any_name_list(0);
				setState(3730); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_drop_type);
		try {
			setState(3758);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3734); match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3735); match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3736); match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3737); match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3738); match(FOREIGN);
				setState(3739); match(TABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3740); match(TYPE_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3741); match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3742); match(COLLATION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3743); match(CONVERSION_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3744); match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3745); match(EXTENSION);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3746); match(TEXT_P);
				setState(3747); match(SEARCH);
				setState(3748); match(PARSER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3749); match(TEXT_P);
				setState(3750); match(SEARCH);
				setState(3751); match(DICTIONARY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3752); match(TEXT_P);
				setState(3753); match(SEARCH);
				setState(3754); match(TEMPLATE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3755); match(TEXT_P);
				setState(3756); match(SEARCH);
				setState(3757); match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 428;
		enterRecursionRule(_localctx, 428, RULE_any_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3761); any_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(3768);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					setState(3763);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3764); match(T__13);
					setState(3765); any_name();
					}
					} 
				}
				setState(3770);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_any_name);
		try {
			setState(3775);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3771); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3772); colId();
				setState(3773); attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 432;
		enterRecursionRule(_localctx, 432, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3778); match(T__14);
			setState(3779); attr_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(3786);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,178,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(3781);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3782); match(T__14);
					setState(3783); attr_name();
					}
					} 
				}
				setState(3788);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,178,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TruncateStmtContext extends ParserRuleContext {
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTruncateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTruncateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTruncateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateStmtContext truncateStmt() throws RecognitionException {
		TruncateStmtContext _localctx = new TruncateStmtContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_truncateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3789); match(TRUNCATE);
			setState(3790); opt_table();
			setState(3791); relation_expr_list(0);
			setState(3792); opt_restart_seqs();
			setState(3793); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode IDENTITY_P() { return getToken(SqlParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public TerminalNode CONTINUE_P() { return getToken(SqlParser.CONTINUE_P, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_opt_restart_seqs);
		try {
			setState(3800);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3795); match(CONTINUE_P);
				setState(3796); match(IDENTITY_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3797); match(RESTART);
				setState(3798); match(IDENTITY_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(SqlParser.ON); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Comment_typeContext comment_type() {
			return getRuleContext(Comment_typeContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode COMMENT() { return getToken(SqlParser.COMMENT, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ON(int i) {
			return getToken(SqlParser.ON, i);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public CommentStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCommentStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCommentStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommentStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStmtContext commentStmt() throws RecognitionException {
		CommentStmtContext _localctx = new CommentStmtContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_commentStmt);
		try {
			setState(3950);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3802); match(COMMENT);
				setState(3803); match(ON);
				setState(3804); comment_type();
				setState(3805); any_name();
				setState(3806); match(IS);
				setState(3807); comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3809); match(COMMENT);
				setState(3810); match(ON);
				setState(3811); match(AGGREGATE);
				setState(3812); func_name();
				setState(3813); aggr_args();
				setState(3814); match(IS);
				setState(3815); comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3817); match(COMMENT);
				setState(3818); match(ON);
				setState(3819); match(FUNCTION);
				setState(3820); func_name();
				setState(3821); func_args();
				setState(3822); match(IS);
				setState(3823); comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3825); match(COMMENT);
				setState(3826); match(ON);
				setState(3827); match(OPERATOR);
				setState(3828); any_operator();
				setState(3829); oper_argtypes();
				setState(3830); match(IS);
				setState(3831); comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3833); match(COMMENT);
				setState(3834); match(ON);
				setState(3835); match(CONSTRAINT);
				setState(3836); name();
				setState(3837); match(ON);
				setState(3838); any_name();
				setState(3839); match(IS);
				setState(3840); comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3842); match(COMMENT);
				setState(3843); match(ON);
				setState(3844); match(RULE);
				setState(3845); name();
				setState(3846); match(ON);
				setState(3847); any_name();
				setState(3848); match(IS);
				setState(3849); comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3851); match(COMMENT);
				setState(3852); match(ON);
				setState(3853); match(RULE);
				setState(3854); name();
				setState(3855); match(IS);
				setState(3856); comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3858); match(COMMENT);
				setState(3859); match(ON);
				setState(3860); match(TRIGGER);
				setState(3861); name();
				setState(3862); match(ON);
				setState(3863); any_name();
				setState(3864); match(IS);
				setState(3865); comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3867); match(COMMENT);
				setState(3868); match(ON);
				setState(3869); match(OPERATOR);
				setState(3870); match(CLASS);
				setState(3871); any_name();
				setState(3872); match(USING);
				setState(3873); access_method();
				setState(3874); match(IS);
				setState(3875); comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3877); match(COMMENT);
				setState(3878); match(ON);
				setState(3879); match(OPERATOR);
				setState(3880); match(FAMILY);
				setState(3881); any_name();
				setState(3882); match(USING);
				setState(3883); access_method();
				setState(3884); match(IS);
				setState(3885); comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3887); match(COMMENT);
				setState(3888); match(ON);
				setState(3889); match(LARGE_P);
				setState(3890); match(OBJECT_P);
				setState(3891); numericOnly();
				setState(3892); match(IS);
				setState(3893); comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3895); match(COMMENT);
				setState(3896); match(ON);
				setState(3897); match(CAST);
				setState(3898); match(T__8);
				setState(3899); typename();
				setState(3900); match(AS);
				setState(3901); typename();
				setState(3902); match(T__15);
				setState(3903); match(IS);
				setState(3904); comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3906); match(COMMENT);
				setState(3907); match(ON);
				setState(3908); opt_procedural();
				setState(3909); match(LANGUAGE);
				setState(3910); any_name();
				setState(3911); match(IS);
				setState(3912); comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3914); match(COMMENT);
				setState(3915); match(ON);
				setState(3916); match(TEXT_P);
				setState(3917); match(SEARCH);
				setState(3918); match(PARSER);
				setState(3919); any_name();
				setState(3920); match(IS);
				setState(3921); comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3923); match(COMMENT);
				setState(3924); match(ON);
				setState(3925); match(TEXT_P);
				setState(3926); match(SEARCH);
				setState(3927); match(DICTIONARY);
				setState(3928); any_name();
				setState(3929); match(IS);
				setState(3930); comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3932); match(COMMENT);
				setState(3933); match(ON);
				setState(3934); match(TEXT_P);
				setState(3935); match(SEARCH);
				setState(3936); match(TEMPLATE);
				setState(3937); any_name();
				setState(3938); match(IS);
				setState(3939); comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3941); match(COMMENT);
				setState(3942); match(ON);
				setState(3943); match(TEXT_P);
				setState(3944); match(SEARCH);
				setState(3945); match(CONFIGURATION);
				setState(3946); any_name();
				setState(3947); match(IS);
				setState(3948); comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_typeContext extends ParserRuleContext {
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Comment_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterComment_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitComment_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitComment_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_typeContext comment_type() throws RecognitionException {
		Comment_typeContext _localctx = new Comment_typeContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_comment_type);
		try {
			setState(3972);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3952); match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3953); match(DATABASE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3954); match(SCHEMA);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3955); match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3956); match(SEQUENCE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3957); match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3958); match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3959); match(TYPE_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3960); match(VIEW);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3961); match(COLLATION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3962); match(CONVERSION_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3963); match(TABLESPACE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3964); match(EXTENSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3965); match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3966); match(FOREIGN);
				setState(3967); match(TABLE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3968); match(SERVER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3969); match(FOREIGN);
				setState(3970); match(DATA_P);
				setState(3971); match(WRAPPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_comment_text);
		try {
			setState(3976);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3974); sConst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3975); match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecLabelStmtContext extends ParserRuleContext {
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public Security_label_typeContext security_label_type() {
			return getRuleContext(Security_label_typeContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode LABEL() { return getToken(SqlParser.LABEL, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public SecLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_secLabelStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSecLabelStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSecLabelStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecLabelStmtContext secLabelStmt() throws RecognitionException {
		SecLabelStmtContext _localctx = new SecLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_secLabelStmt);
		try {
			setState(4027);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3978); match(SECURITY);
				setState(3979); match(LABEL);
				setState(3980); opt_provider();
				setState(3981); match(ON);
				setState(3982); security_label_type();
				setState(3983); any_name();
				setState(3984); match(IS);
				setState(3985); security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3987); match(SECURITY);
				setState(3988); match(LABEL);
				setState(3989); opt_provider();
				setState(3990); match(ON);
				setState(3991); match(AGGREGATE);
				setState(3992); func_name();
				setState(3993); aggr_args();
				setState(3994); match(IS);
				setState(3995); security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3997); match(SECURITY);
				setState(3998); match(LABEL);
				setState(3999); opt_provider();
				setState(4000); match(ON);
				setState(4001); match(FUNCTION);
				setState(4002); func_name();
				setState(4003); func_args();
				setState(4004); match(IS);
				setState(4005); security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4007); match(SECURITY);
				setState(4008); match(LABEL);
				setState(4009); opt_provider();
				setState(4010); match(ON);
				setState(4011); match(LARGE_P);
				setState(4012); match(OBJECT_P);
				setState(4013); numericOnly();
				setState(4014); match(IS);
				setState(4015); security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4017); match(SECURITY);
				setState(4018); match(LABEL);
				setState(4019); opt_provider();
				setState(4020); match(ON);
				setState(4021); opt_procedural();
				setState(4022); match(LANGUAGE);
				setState(4023); any_name();
				setState(4024); match(IS);
				setState(4025); security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_opt_provider);
		try {
			setState(4032);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4029); match(FOR);
				setState(4030); colId_or_Sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_label_typeContext extends ParserRuleContext {
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Security_label_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSecurity_label_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSecurity_label_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecurity_label_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_typeContext security_label_type() throws RecognitionException {
		Security_label_typeContext _localctx = new Security_label_typeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_security_label_type);
		try {
			setState(4046);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4034); match(COLUMN);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4035); match(DATABASE);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4036); match(FOREIGN);
				setState(4037); match(TABLE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 4);
				{
				setState(4038); match(SCHEMA);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4039); match(SEQUENCE);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4040); match(TABLE);
				}
				break;
			case DOMAIN_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(4041); match(DOMAIN_P);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4042); match(ROLE);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4043); match(TABLESPACE);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(4044); match(TYPE_P);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 11);
				{
				setState(4045); match(VIEW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_security_label);
		try {
			setState(4050);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4048); sConst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4049); match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchStmtContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(SqlParser.MOVE, 0); }
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public FetchStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFetchStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFetchStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFetchStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchStmtContext fetchStmt() throws RecognitionException {
		FetchStmtContext _localctx = new FetchStmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_fetchStmt);
		try {
			setState(4056);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4052); match(FETCH);
				setState(4053); fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4054); match(MOVE);
				setState(4055); fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(SqlParser.FORWARD, 0); }
		public TerminalNode PRIOR() { return getToken(SqlParser.PRIOR, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(SqlParser.RELATIVE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode BACKWARD() { return getToken(SqlParser.BACKWARD, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(SqlParser.ABSOLUTE_P, 0); }
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode LAST_P() { return getToken(SqlParser.LAST_P, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_fetch_args);
		try {
			setState(4124);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4058); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4059); from_in();
				setState(4060); cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4062); match(NEXT);
				setState(4063); opt_from_in();
				setState(4064); cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4066); match(PRIOR);
				setState(4067); opt_from_in();
				setState(4068); cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4070); match(FIRST_P);
				setState(4071); opt_from_in();
				setState(4072); cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4074); match(LAST_P);
				setState(4075); opt_from_in();
				setState(4076); cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4078); match(ABSOLUTE_P);
				setState(4079); signedIconst();
				setState(4080); opt_from_in();
				setState(4081); cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4083); match(RELATIVE_P);
				setState(4084); signedIconst();
				setState(4085); opt_from_in();
				setState(4086); cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4088); signedIconst();
				setState(4089); opt_from_in();
				setState(4090); cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4092); match(ALL);
				setState(4093); opt_from_in();
				setState(4094); cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4096); match(FORWARD);
				setState(4097); opt_from_in();
				setState(4098); cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4100); match(FORWARD);
				setState(4101); signedIconst();
				setState(4102); opt_from_in();
				setState(4103); cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4105); match(FORWARD);
				setState(4106); match(ALL);
				setState(4107); opt_from_in();
				setState(4108); cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4110); match(BACKWARD);
				setState(4111); opt_from_in();
				setState(4112); cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4114); match(BACKWARD);
				setState(4115); signedIconst();
				setState(4116); opt_from_in();
				setState(4117); cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4119); match(BACKWARD);
				setState(4120); match(ALL);
				setState(4121); opt_from_in();
				setState(4122); cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4126);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_opt_from_in);
		try {
			setState(4130);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4128); from_in();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStmtContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public GrantStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGrantStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGrantStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStmtContext grantStmt() throws RecognitionException {
		GrantStmtContext _localctx = new GrantStmtContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_grantStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4132); match(GRANT);
			setState(4133); privileges();
			setState(4134); match(ON);
			setState(4135); privilege_target();
			setState(4136); match(TO);
			setState(4137); grantee_list(0);
			setState(4138); opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStmtContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public RevokeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRevokeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRevokeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRevokeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStmtContext revokeStmt() throws RecognitionException {
		RevokeStmtContext _localctx = new RevokeStmtContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_revokeStmt);
		try {
			setState(4159);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4140); match(REVOKE);
				setState(4141); privileges();
				setState(4142); match(ON);
				setState(4143); privilege_target();
				setState(4144); match(FROM);
				setState(4145); grantee_list(0);
				setState(4146); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4148); match(REVOKE);
				setState(4149); match(GRANT);
				setState(4150); match(OPTION);
				setState(4151); match(FOR);
				setState(4152); privileges();
				setState(4153); match(ON);
				setState(4154); privilege_target();
				setState(4155); match(FROM);
				setState(4156); grantee_list(0);
				setState(4157); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_privileges);
		try {
			setState(4176);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4161); privilege_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4162); match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4163); match(ALL);
				setState(4164); match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4165); match(ALL);
				setState(4166); match(T__8);
				setState(4167); columnList(0);
				setState(4168); match(T__15);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4170); match(ALL);
				setState(4171); match(PRIVILEGES);
				setState(4172); match(T__8);
				setState(4173); columnList(0);
				setState(4174); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 466;
		enterRecursionRule(_localctx, 466, RULE_privilege_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4179); privilege();
			}
			_ctx.stop = _input.LT(-1);
			setState(4186);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					setState(4181);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4182); match(T__13);
					setState(4183); privilege();
					}
					} 
				}
				setState(4188);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_privilege);
		try {
			setState(4198);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4189); match(SELECT);
				setState(4190); opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(4191); match(REFERENCES);
				setState(4192); opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4193); match(CREATE);
				setState(4194); opt_column_list();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4195); colId();
				setState(4196); opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_privilege_target);
		try {
			setState(4244);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4200); qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4201); match(TABLE);
				setState(4202); qualified_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4203); match(SEQUENCE);
				setState(4204); qualified_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4205); match(FOREIGN);
				setState(4206); match(DATA_P);
				setState(4207); match(WRAPPER);
				setState(4208); name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4209); match(FOREIGN);
				setState(4210); match(SERVER);
				setState(4211); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4212); match(FUNCTION);
				setState(4213); function_with_argtypes_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4214); match(DATABASE);
				setState(4215); name_list(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4216); match(DOMAIN_P);
				setState(4217); any_name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4218); match(LANGUAGE);
				setState(4219); name_list(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4220); match(LARGE_P);
				setState(4221); match(OBJECT_P);
				setState(4222); numericOnly_list(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4223); match(SCHEMA);
				setState(4224); name_list(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4225); match(TABLESPACE);
				setState(4226); name_list(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4227); match(TYPE_P);
				setState(4228); any_name_list(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4229); match(ALL);
				setState(4230); match(TABLES);
				setState(4231); match(IN_P);
				setState(4232); match(SCHEMA);
				setState(4233); name_list(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4234); match(ALL);
				setState(4235); match(SEQUENCES);
				setState(4236); match(IN_P);
				setState(4237); match(SCHEMA);
				setState(4238); name_list(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4239); match(ALL);
				setState(4240); match(FUNCTIONS);
				setState(4241); match(IN_P);
				setState(4242); match(SCHEMA);
				setState(4243); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public GranteeContext grantee() {
			return getRuleContext(GranteeContext.class,0);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 472;
		enterRecursionRule(_localctx, 472, RULE_grantee_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4247); grantee();
			}
			_ctx.stop = _input.LT(-1);
			setState(4254);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					setState(4249);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4250); match(T__13);
					setState(4251); grantee();
					}
					} 
				}
				setState(4256);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_grantee);
		try {
			setState(4260);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4257); roleId();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4258); match(GROUP_P);
				setState(4259); roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_opt_grant_grant_option);
		try {
			setState(4266);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4262); match(WITH);
				setState(4263); match(GRANT);
				setState(4264); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 478;
		enterRecursionRule(_localctx, 478, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4269); function_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(4276);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					setState(4271);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4272); match(T__13);
					setState(4273); function_with_argtypes();
					}
					} 
				}
				setState(4278);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_function_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4279); func_name();
			setState(4280); func_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantRoleStmtContext extends ParserRuleContext {
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public GrantRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGrantRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGrantRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantRoleStmtContext grantRoleStmt() throws RecognitionException {
		GrantRoleStmtContext _localctx = new GrantRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_grantRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282); match(GRANT);
			setState(4283); privilege_list(0);
			setState(4284); match(TO);
			setState(4285); name_list(0);
			setState(4286); opt_grant_admin_option();
			setState(4287); opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeRoleStmtContext extends ParserRuleContext {
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public RevokeRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRoleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRevokeRoleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRevokeRoleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRevokeRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeRoleStmtContext revokeRoleStmt() throws RecognitionException {
		RevokeRoleStmtContext _localctx = new RevokeRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_revokeRoleStmt);
		try {
			setState(4306);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4289); match(REVOKE);
				setState(4290); privilege_list(0);
				setState(4291); match(FROM);
				setState(4292); name_list(0);
				setState(4293); opt_granted_by();
				setState(4294); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4296); match(REVOKE);
				setState(4297); match(ADMIN);
				setState(4298); match(OPTION);
				setState(4299); match(FOR);
				setState(4300); privilege_list(0);
				setState(4301); match(FROM);
				setState(4302); name_list(0);
				setState(4303); opt_granted_by();
				setState(4304); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_opt_grant_admin_option);
		try {
			setState(4312);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4308); match(WITH);
				setState(4309); match(ADMIN);
				setState(4310); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(SqlParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_granted_by);
		try {
			setState(4318);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4314); match(GRANTED);
				setState(4315); match(BY);
				setState(4316); roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesStmtContext extends ParserRuleContext {
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivilegesStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterDefaultPrivilegesStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterDefaultPrivilegesStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDefaultPrivilegesStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() throws RecognitionException {
		AlterDefaultPrivilegesStmtContext _localctx = new AlterDefaultPrivilegesStmtContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_alterDefaultPrivilegesStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320); match(ALTER);
			setState(4321); match(DEFAULT);
			setState(4322); match(PRIVILEGES);
			setState(4323); defACLOptionList(0);
			setState(4324); defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLOptionContext defACLOption() {
			return getRuleContext(DefACLOptionContext.class,0);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefACLOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefACLOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		return defACLOptionList(0);
	}

	private DefACLOptionListContext defACLOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, _parentState);
		DefACLOptionListContext _prevctx = _localctx;
		int _startState = 492;
		enterRecursionRule(_localctx, 492, RULE_defACLOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefACLOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_defACLOptionList);
					setState(4327);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4328); defACLOption();
					}
					} 
				}
				setState(4333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefACLOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefACLOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_defACLOption);
		try {
			setState(4343);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4334); match(IN_P);
				setState(4335); match(SCHEMA);
				setState(4336); name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4337); match(FOR);
				setState(4338); match(ROLE);
				setState(4339); name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4340); match(FOR);
				setState(4341); match(USER);
				setState(4342); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefACLAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefACLAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_defACLAction);
		try {
			setState(4372);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4345); match(GRANT);
				setState(4346); privileges();
				setState(4347); match(ON);
				setState(4348); defacl_privilege_target();
				setState(4349); match(TO);
				setState(4350); grantee_list(0);
				setState(4351); opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4353); match(REVOKE);
				setState(4354); privileges();
				setState(4355); match(ON);
				setState(4356); defacl_privilege_target();
				setState(4357); match(FROM);
				setState(4358); grantee_list(0);
				setState(4359); opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4361); match(REVOKE);
				setState(4362); match(GRANT);
				setState(4363); match(OPTION);
				setState(4364); match(FOR);
				setState(4365); privileges();
				setState(4366); match(ON);
				setState(4367); defacl_privilege_target();
				setState(4368); match(FROM);
				setState(4369); grantee_list(0);
				setState(4370); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode TYPES_P() { return getToken(SqlParser.TYPES_P, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (SEQUENCES - 321)) | (1L << (TABLES - 321)) | (1L << (TYPES_P - 321)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexStmtContext extends ParserRuleContext {
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public IndexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndexStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndexStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexStmtContext indexStmt() throws RecognitionException {
		IndexStmtContext _localctx = new IndexStmtContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_indexStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4376); match(CREATE);
			setState(4377); opt_unique();
			setState(4378); match(INDEX);
			setState(4379); opt_concurrently();
			setState(4380); opt_index_name();
			setState(4381); match(ON);
			setState(4382); qualified_name();
			setState(4383); access_method_clause();
			setState(4384); match(T__8);
			setState(4385); index_params(0);
			setState(4386); match(T__15);
			setState(4387); opt_reloptions();
			setState(4388); optTableSpace();
			setState(4389); where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_opt_unique);
		try {
			setState(4393);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4391); match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_opt_concurrently);
		try {
			setState(4397);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4395); match(CONCURRENTLY);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_opt_index_name);
		try {
			setState(4401);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4399); index_name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_access_method_clause);
		try {
			setState(4406);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4403); match(USING);
				setState(4404); access_method();
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 510;
		enterRecursionRule(_localctx, 510, RULE_index_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4409); index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4416);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_params);
					setState(4411);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4412); match(T__13);
					setState(4413); index_elem();
					}
					} 
				}
				setState(4418);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_index_elem);
		try {
			setState(4439);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4419); colId();
				setState(4420); opt_collate();
				setState(4421); opt_class();
				setState(4422); opt_asc_desc();
				setState(4423); opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4425); func_expr();
				setState(4426); opt_collate();
				setState(4427); opt_class();
				setState(4428); opt_asc_desc();
				setState(4429); opt_nulls_order();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4431); match(T__8);
				setState(4432); a_expr(0);
				setState(4433); match(T__15);
				setState(4434); opt_collate();
				setState(4435); opt_class();
				setState(4436); opt_asc_desc();
				setState(4437); opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_opt_collate);
		try {
			setState(4444);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441); match(COLLATE);
				setState(4442); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_opt_class);
		try {
			setState(4450);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4446); any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4447); match(USING);
				setState(4448); any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(SqlParser.DESC, 0); }
		public TerminalNode ASC() { return getToken(SqlParser.ASC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_opt_asc_desc);
		try {
			setState(4455);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4452); match(ASC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4453); match(DESC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_LAST() { return getToken(SqlParser.NULLS_LAST, 0); }
		public TerminalNode NULLS_FIRST() { return getToken(SqlParser.NULLS_FIRST, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_opt_nulls_order);
		try {
			setState(4460);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4457); match(NULLS_FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4458); match(NULLS_LAST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStmtContext extends ParserRuleContext {
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreateFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateFunctionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateFunctionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStmtContext createFunctionStmt() throws RecognitionException {
		CreateFunctionStmtContext _localctx = new CreateFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_createFunctionStmt);
		try {
			setState(4499);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4462); match(CREATE);
				setState(4464);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					setState(4463); opt_or_replace();
					}
					break;
				}
				setState(4466); match(FUNCTION);
				setState(4467); func_name();
				setState(4468); func_args_with_defaults();
				setState(4469); match(RETURNS);
				setState(4470); func_return();
				setState(4471); createfunc_opt_list(0);
				setState(4472); opt_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4474); match(CREATE);
				setState(4476);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(4475); opt_or_replace();
					}
					break;
				}
				setState(4478); match(FUNCTION);
				setState(4479); func_name();
				setState(4480); func_args_with_defaults();
				setState(4481); match(RETURNS);
				setState(4482); match(TABLE);
				setState(4483); match(T__8);
				setState(4484); table_func_column_list(0);
				setState(4485); match(T__15);
				setState(4486); createfunc_opt_list(0);
				setState(4487); opt_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4489); match(CREATE);
				setState(4491);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(4490); opt_or_replace();
					}
					break;
				}
				setState(4493); match(FUNCTION);
				setState(4494); func_name();
				setState(4495); func_args_with_defaults();
				setState(4496); createfunc_opt_list(0);
				setState(4497); opt_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_opt_or_replace);
		try {
			setState(4504);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4501); match(OR);
				setState(4502); match(REPLACE);
				}
				break;
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case RULE:
			case TRUSTED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_func_args);
		try {
			setState(4512);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4506); match(T__8);
				setState(4507); func_args_list(0);
				setState(4508); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4510); match(T__8);
				setState(4511); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 528;
		enterRecursionRule(_localctx, 528, RULE_func_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4515); func_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(4522);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					setState(4517);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4518); match(T__13);
					setState(4519); func_arg();
					}
					} 
				}
				setState(4524);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_func_args_with_defaults);
		try {
			setState(4531);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4525); match(T__8);
				setState(4526); func_args_with_defaults_list(0);
				setState(4527); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4529); match(T__8);
				setState(4530); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public Func_arg_with_defaultContext func_arg_with_default() {
			return getRuleContext(Func_arg_with_defaultContext.class,0);
		}
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 532;
		enterRecursionRule(_localctx, 532, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4534); func_arg_with_default();
			}
			_ctx.stop = _input.LT(-1);
			setState(4541);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					setState(4536);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4537); match(T__13);
					setState(4538); func_arg_with_default();
					}
					} 
				}
				setState(4543);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_func_arg);
		try {
			setState(4559);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4544); arg_class();
				setState(4545); param_name();
				setState(4546); func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4548); param_name();
				setState(4549); arg_class();
				setState(4550); func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4552); param_name();
				setState(4553); func_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4555); arg_class();
				setState(4556); func_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4558); func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode OUT_P() { return getToken(SqlParser.OUT_P, 0); }
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_arg_class);
		try {
			setState(4567);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4561); match(IN_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4562); match(OUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4563); match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4564); match(IN_P);
				setState(4565); match(OUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4566); match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4569); type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4571); func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_func_type);
		try {
			setState(4585);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4573); typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4574); type_function_name();
				setState(4575); attrs(0);
				setState(4576); match(T__17);
				setState(4577); match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4579); match(SETOF);
				setState(4580); type_function_name();
				setState(4581); attrs(0);
				setState(4582); match(T__17);
				setState(4583); match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_func_arg_with_default);
		try {
			setState(4596);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4587); func_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4588); func_arg();
				setState(4589); match(DEFAULT);
				setState(4590); a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4592); func_arg();
				setState(4593); match(T__5);
				setState(4594); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public Createfunc_opt_itemContext createfunc_opt_item() {
			return getRuleContext(Createfunc_opt_itemContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		return createfunc_opt_list(0);
	}

	private Createfunc_opt_listContext createfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, _parentState);
		Createfunc_opt_listContext _prevctx = _localctx;
		int _startState = 546;
		enterRecursionRule(_localctx, 546, RULE_createfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4599); createfunc_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4605);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createfunc_opt_list);
					setState(4601);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4602); createfunc_opt_item();
					}
					} 
				}
				setState(4607);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode INVOKER() { return getToken(SqlParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(SqlParser.DEFINER, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(SqlParser.VOLATILE, 0); }
		public TerminalNode STRICT_P() { return getToken(SqlParser.STRICT_P, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlParser.EXTERNAL, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(SqlParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(SqlParser.NULL_P, i);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SqlParser.LEAKPROOF, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public TerminalNode STABLE() { return getToken(SqlParser.STABLE, 0); }
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode COST() { return getToken(SqlParser.COST, 0); }
		public TerminalNode CALLED() { return getToken(SqlParser.CALLED, 0); }
		public TerminalNode INPUT_P() { return getToken(SqlParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SqlParser.IMMUTABLE, 0); }
		public FunctionsetResetClauseContext functionsetResetClause() {
			return getRuleContext(FunctionsetResetClauseContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_common_func_opt_item);
		try {
			setState(4639);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4608); match(CALLED);
				setState(4609); match(ON);
				setState(4610); match(NULL_P);
				setState(4611); match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4612); match(RETURNS);
				setState(4613); match(NULL_P);
				setState(4614); match(ON);
				setState(4615); match(NULL_P);
				setState(4616); match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4617); match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4618); match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4619); match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4620); match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4621); match(EXTERNAL);
				setState(4622); match(SECURITY);
				setState(4623); match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4624); match(EXTERNAL);
				setState(4625); match(SECURITY);
				setState(4626); match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4627); match(SECURITY);
				setState(4628); match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4629); match(SECURITY);
				setState(4630); match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4631); match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4632); match(NOT);
				setState(4633); match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4634); match(COST);
				setState(4635); numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4636); match(ROWS);
				setState(4637); numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4638); functionsetResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_createfunc_opt_item);
		try {
			setState(4647);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4641); match(AS);
				setState(4642); func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4643); match(LANGUAGE);
				setState(4644); colId_or_Sconst();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 3);
				{
				setState(4645); match(WINDOW);
				}
				break;
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case NOT:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4646); common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_func_as);
		try {
			setState(4654);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4649); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4650); sConst();
				setState(4651); match(T__13);
				setState(4652); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_opt_definition);
		try {
			setState(4659);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4656); match(WITH);
				setState(4657); definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661); param_name();
			setState(4662); func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public Table_func_columnContext table_func_column() {
			return getRuleContext(Table_func_columnContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 558;
		enterRecursionRule(_localctx, 558, RULE_table_func_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4665); table_func_column();
			}
			_ctx.stop = _input.LT(-1);
			setState(4672);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					setState(4667);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4668); match(T__13);
					setState(4669); table_func_column();
					}
					} 
				}
				setState(4674);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterFunctionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public AlterFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterFunctionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterFunctionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStmtContext alterFunctionStmt() throws RecognitionException {
		AlterFunctionStmtContext _localctx = new AlterFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_alterFunctionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4675); match(ALTER);
			setState(4676); match(FUNCTION);
			setState(4677); function_with_argtypes();
			setState(4678); alterfunc_opt_list(0);
			setState(4679); opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 562;
		enterRecursionRule(_localctx, 562, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4682); common_func_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4688);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					setState(4684);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4685); common_func_opt_item();
					}
					} 
				}
				setState(4690);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_opt_restrict);
		try {
			setState(4693);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4691); match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveFuncStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RemoveFuncStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeFuncStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRemoveFuncStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRemoveFuncStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveFuncStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveFuncStmtContext removeFuncStmt() throws RecognitionException {
		RemoveFuncStmtContext _localctx = new RemoveFuncStmtContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_removeFuncStmt);
		try {
			setState(4709);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4695); match(DROP);
				setState(4696); match(FUNCTION);
				setState(4697); func_name();
				setState(4698); func_args();
				setState(4699); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4701); match(DROP);
				setState(4702); match(FUNCTION);
				setState(4703); match(IF_P);
				setState(4704); match(EXISTS);
				setState(4705); func_name();
				setState(4706); func_args();
				setState(4707); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveAggrStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RemoveAggrStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeAggrStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRemoveAggrStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRemoveAggrStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveAggrStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveAggrStmtContext removeAggrStmt() throws RecognitionException {
		RemoveAggrStmtContext _localctx = new RemoveAggrStmtContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_removeAggrStmt);
		try {
			setState(4725);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4711); match(DROP);
				setState(4712); match(AGGREGATE);
				setState(4713); func_name();
				setState(4714); aggr_args();
				setState(4715); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4717); match(DROP);
				setState(4718); match(AGGREGATE);
				setState(4719); match(IF_P);
				setState(4720); match(EXISTS);
				setState(4721); func_name();
				setState(4722); aggr_args();
				setState(4723); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveOperStmtContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public RemoveOperStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeOperStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRemoveOperStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRemoveOperStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveOperStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveOperStmtContext removeOperStmt() throws RecognitionException {
		RemoveOperStmtContext _localctx = new RemoveOperStmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_removeOperStmt);
		try {
			setState(4741);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4727); match(DROP);
				setState(4728); match(OPERATOR);
				setState(4729); any_operator();
				setState(4730); oper_argtypes();
				setState(4731); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4733); match(DROP);
				setState(4734); match(OPERATOR);
				setState(4735); match(IF_P);
				setState(4736); match(EXISTS);
				setState(4737); any_operator();
				setState(4738); oper_argtypes();
				setState(4739); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SqlParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_oper_argtypes);
		try {
			setState(4765);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4743); match(T__8);
				setState(4744); typename();
				setState(4745); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4747); match(T__8);
				setState(4748); typename();
				setState(4749); match(T__13);
				setState(4750); typename();
				setState(4751); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4753); match(T__8);
				setState(4754); match(NONE);
				setState(4755); match(T__13);
				setState(4756); typename();
				setState(4757); match(T__15);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4759); match(T__8);
				setState(4760); typename();
				setState(4761); match(T__13);
				setState(4762); match(NONE);
				setState(4763); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_any_operator);
		try {
			setState(4772);
			switch (_input.LA(1)) {
			case T__17:
			case T__16:
			case T__12:
			case T__10:
			case T__9:
			case T__6:
			case T__5:
			case T__2:
			case T__1:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(4767); all_Op();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4768); colId();
				setState(4769); match(T__14);
				setState(4770); any_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DoStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDoStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDoStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDoStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStmtContext doStmt() throws RecognitionException {
		DoStmtContext _localctx = new DoStmtContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_doStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4774); match(DO);
			setState(4775); dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public Dostmt_opt_itemContext dostmt_opt_item() {
			return getRuleContext(Dostmt_opt_itemContext.class,0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 578;
		enterRecursionRule(_localctx, 578, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4778); dostmt_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4784);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					setState(4780);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4781); dostmt_opt_item();
					}
					} 
				}
				setState(4786);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_dostmt_opt_item);
		try {
			setState(4790);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4787); sConst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4788); match(LANGUAGE);
				setState(4789); colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public CreateCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCastStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateCastStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateCastStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastStmtContext createCastStmt() throws RecognitionException {
		CreateCastStmtContext _localctx = new CreateCastStmtContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_createCastStmt);
		try {
			setState(4826);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792); match(CREATE);
				setState(4793); match(CAST);
				setState(4794); match(T__8);
				setState(4795); typename();
				setState(4796); match(AS);
				setState(4797); typename();
				setState(4798); match(T__15);
				setState(4799); match(WITH);
				setState(4800); match(FUNCTION);
				setState(4801); function_with_argtypes();
				setState(4802); cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4804); match(CREATE);
				setState(4805); match(CAST);
				setState(4806); match(T__8);
				setState(4807); typename();
				setState(4808); match(AS);
				setState(4809); typename();
				setState(4810); match(T__15);
				setState(4811); match(WITHOUT);
				setState(4812); match(FUNCTION);
				setState(4813); cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4815); match(CREATE);
				setState(4816); match(CAST);
				setState(4817); match(T__8);
				setState(4818); typename();
				setState(4819); match(AS);
				setState(4820); typename();
				setState(4821); match(T__15);
				setState(4822); match(WITH);
				setState(4823); match(INOUT);
				setState(4824); cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(SqlParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(SqlParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_cast_context);
		try {
			setState(4833);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4828); match(AS);
				setState(4829); match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4830); match(AS);
				setState(4831); match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public DropCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCastStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropCastStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropCastStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastStmtContext dropCastStmt() throws RecognitionException {
		DropCastStmtContext _localctx = new DropCastStmtContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_dropCastStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835); match(DROP);
			setState(4836); match(CAST);
			setState(4837); opt_if_exists();
			setState(4838); match(T__8);
			setState(4839); typename();
			setState(4840); match(AS);
			setState(4841); typename();
			setState(4842); match(T__15);
			setState(4843); opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_opt_if_exists);
		try {
			setState(4848);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4845); match(IF_P);
				setState(4846); match(EXISTS);
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SYSTEM_P() { return getToken(SqlParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Opt_forceContext opt_force() {
			return getRuleContext(Opt_forceContext.class,0);
		}
		public Reindex_typeContext reindex_type() {
			return getRuleContext(Reindex_typeContext.class,0);
		}
		public TerminalNode REINDEX() { return getToken(SqlParser.REINDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReindexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReindexStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReindexStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReindexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexStmtContext reindexStmt() throws RecognitionException {
		ReindexStmtContext _localctx = new ReindexStmtContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_reindexStmt);
		try {
			setState(4865);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4850); match(REINDEX);
				setState(4851); reindex_type();
				setState(4852); qualified_name();
				setState(4853); opt_force();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4855); match(REINDEX);
				setState(4856); match(SYSTEM_P);
				setState(4857); name();
				setState(4858); opt_force();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4860); match(REINDEX);
				setState(4861); match(DATABASE);
				setState(4862); name();
				setState(4863); opt_force();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Reindex_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReindex_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReindex_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReindex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_typeContext reindex_type() throws RecognitionException {
		Reindex_typeContext _localctx = new Reindex_typeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_reindex_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_forceContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public Opt_forceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_force; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_force(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_force(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_force(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_forceContext opt_force() throws RecognitionException {
		Opt_forceContext _localctx = new Opt_forceContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_opt_force);
		try {
			setState(4871);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4869); match(FORCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SqlParser.RENAME, 0); }
		public List<RoleIdContext> roleId() {
			return getRuleContexts(RoleIdContext.class);
		}
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public List<Database_nameContext> database_name() {
			return getRuleContexts(Database_nameContext.class);
		}
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public RoleIdContext roleId(int i) {
			return getRuleContext(RoleIdContext.class,i);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Database_nameContext database_name(int i) {
			return getRuleContext(Database_nameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public RenameStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRenameStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRenameStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRenameStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameStmtContext renameStmt() throws RecognitionException {
		RenameStmtContext _localctx = new RenameStmtContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_renameStmt);
		try {
			setState(5211);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4873); match(ALTER);
				setState(4874); match(AGGREGATE);
				setState(4875); func_name();
				setState(4876); aggr_args();
				setState(4877); match(RENAME);
				setState(4878); match(TO);
				setState(4879); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4881); match(ALTER);
				setState(4882); match(COLLATION);
				setState(4883); any_name();
				setState(4884); match(RENAME);
				setState(4885); match(TO);
				setState(4886); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4888); match(ALTER);
				setState(4889); match(CONVERSION_P);
				setState(4890); any_name();
				setState(4891); match(RENAME);
				setState(4892); match(TO);
				setState(4893); name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4895); match(ALTER);
				setState(4896); match(DATABASE);
				setState(4897); database_name();
				setState(4898); match(RENAME);
				setState(4899); match(TO);
				setState(4900); database_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4902); match(ALTER);
				setState(4903); match(DOMAIN_P);
				setState(4904); any_name();
				setState(4905); match(RENAME);
				setState(4906); match(TO);
				setState(4907); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4909); match(ALTER);
				setState(4910); match(DOMAIN_P);
				setState(4911); any_name();
				setState(4912); match(RENAME);
				setState(4913); match(CONSTRAINT);
				setState(4914); name();
				setState(4915); match(TO);
				setState(4916); name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4918); match(ALTER);
				setState(4919); match(FOREIGN);
				setState(4920); match(DATA_P);
				setState(4921); match(WRAPPER);
				setState(4922); name();
				setState(4923); match(RENAME);
				setState(4924); match(TO);
				setState(4925); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4927); match(ALTER);
				setState(4928); match(FUNCTION);
				setState(4929); function_with_argtypes();
				setState(4930); match(RENAME);
				setState(4931); match(TO);
				setState(4932); name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4934); match(ALTER);
				setState(4935); match(GROUP_P);
				setState(4936); roleId();
				setState(4937); match(RENAME);
				setState(4938); match(TO);
				setState(4939); roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4941); match(ALTER);
				setState(4942); opt_procedural();
				setState(4943); match(LANGUAGE);
				setState(4944); name();
				setState(4945); match(RENAME);
				setState(4946); match(TO);
				setState(4947); name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4949); match(ALTER);
				setState(4950); match(OPERATOR);
				setState(4951); match(CLASS);
				setState(4952); any_name();
				setState(4953); match(USING);
				setState(4954); access_method();
				setState(4955); match(RENAME);
				setState(4956); match(TO);
				setState(4957); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4959); match(ALTER);
				setState(4960); match(OPERATOR);
				setState(4961); match(FAMILY);
				setState(4962); any_name();
				setState(4963); match(USING);
				setState(4964); access_method();
				setState(4965); match(RENAME);
				setState(4966); match(TO);
				setState(4967); name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4969); match(ALTER);
				setState(4970); match(SCHEMA);
				setState(4971); name();
				setState(4972); match(RENAME);
				setState(4973); match(TO);
				setState(4974); name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4976); match(ALTER);
				setState(4977); match(SERVER);
				setState(4978); name();
				setState(4979); match(RENAME);
				setState(4980); match(TO);
				setState(4981); name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4983); match(ALTER);
				setState(4984); match(TABLE);
				setState(4985); relation_expr();
				setState(4986); match(RENAME);
				setState(4987); match(TO);
				setState(4988); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4990); match(ALTER);
				setState(4991); match(TABLE);
				setState(4992); match(IF_P);
				setState(4993); match(EXISTS);
				setState(4994); relation_expr();
				setState(4995); match(RENAME);
				setState(4996); match(TO);
				setState(4997); name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4999); match(ALTER);
				setState(5000); match(SEQUENCE);
				setState(5001); qualified_name();
				setState(5002); match(RENAME);
				setState(5003); match(TO);
				setState(5004); name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5006); match(ALTER);
				setState(5007); match(SEQUENCE);
				setState(5008); match(IF_P);
				setState(5009); match(EXISTS);
				setState(5010); qualified_name();
				setState(5011); match(RENAME);
				setState(5012); match(TO);
				setState(5013); name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5015); match(ALTER);
				setState(5016); match(VIEW);
				setState(5017); qualified_name();
				setState(5018); match(RENAME);
				setState(5019); match(TO);
				setState(5020); name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5022); match(ALTER);
				setState(5023); match(VIEW);
				setState(5024); match(IF_P);
				setState(5025); match(EXISTS);
				setState(5026); qualified_name();
				setState(5027); match(RENAME);
				setState(5028); match(TO);
				setState(5029); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5031); match(ALTER);
				setState(5032); match(INDEX);
				setState(5033); qualified_name();
				setState(5034); match(RENAME);
				setState(5035); match(TO);
				setState(5036); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5038); match(ALTER);
				setState(5039); match(INDEX);
				setState(5040); match(IF_P);
				setState(5041); match(EXISTS);
				setState(5042); qualified_name();
				setState(5043); match(RENAME);
				setState(5044); match(TO);
				setState(5045); name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5047); match(ALTER);
				setState(5048); match(FOREIGN);
				setState(5049); match(TABLE);
				setState(5050); relation_expr();
				setState(5051); match(RENAME);
				setState(5052); match(TO);
				setState(5053); name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5055); match(ALTER);
				setState(5056); match(FOREIGN);
				setState(5057); match(TABLE);
				setState(5058); match(IF_P);
				setState(5059); match(EXISTS);
				setState(5060); relation_expr();
				setState(5061); match(RENAME);
				setState(5062); match(TO);
				setState(5063); name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5065); match(ALTER);
				setState(5066); match(TABLE);
				setState(5067); relation_expr();
				setState(5068); match(RENAME);
				setState(5069); opt_column();
				setState(5070); name();
				setState(5071); match(TO);
				setState(5072); name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5074); match(ALTER);
				setState(5075); match(TABLE);
				setState(5076); match(IF_P);
				setState(5077); match(EXISTS);
				setState(5078); relation_expr();
				setState(5079); match(RENAME);
				setState(5080); opt_column();
				setState(5081); name();
				setState(5082); match(TO);
				setState(5083); name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5085); match(ALTER);
				setState(5086); match(TABLE);
				setState(5087); relation_expr();
				setState(5088); match(RENAME);
				setState(5089); match(CONSTRAINT);
				setState(5090); name();
				setState(5091); match(TO);
				setState(5092); name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5094); match(ALTER);
				setState(5095); match(FOREIGN);
				setState(5096); match(TABLE);
				setState(5097); relation_expr();
				setState(5098); match(RENAME);
				setState(5099); opt_column();
				setState(5100); name();
				setState(5101); match(TO);
				setState(5102); name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5104); match(ALTER);
				setState(5105); match(FOREIGN);
				setState(5106); match(TABLE);
				setState(5107); match(IF_P);
				setState(5108); match(EXISTS);
				setState(5109); relation_expr();
				setState(5110); match(RENAME);
				setState(5111); opt_column();
				setState(5112); name();
				setState(5113); match(TO);
				setState(5114); name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5116); match(ALTER);
				setState(5117); match(TRIGGER);
				setState(5118); name();
				setState(5119); match(ON);
				setState(5120); qualified_name();
				setState(5121); match(RENAME);
				setState(5122); match(TO);
				setState(5123); name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5125); match(ALTER);
				setState(5126); match(ROLE);
				setState(5127); roleId();
				setState(5128); match(RENAME);
				setState(5129); match(TO);
				setState(5130); roleId();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5132); match(ALTER);
				setState(5133); match(USER);
				setState(5134); roleId();
				setState(5135); match(RENAME);
				setState(5136); match(TO);
				setState(5137); roleId();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5139); match(ALTER);
				setState(5140); match(TABLESPACE);
				setState(5141); name();
				setState(5142); match(RENAME);
				setState(5143); match(TO);
				setState(5144); name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5146); match(ALTER);
				setState(5147); match(TABLESPACE);
				setState(5148); name();
				setState(5149); match(SET);
				setState(5150); reloptions();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5152); match(ALTER);
				setState(5153); match(TABLESPACE);
				setState(5154); name();
				setState(5155); match(RESET);
				setState(5156); reloptions();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5158); match(ALTER);
				setState(5159); match(TEXT_P);
				setState(5160); match(SEARCH);
				setState(5161); match(PARSER);
				setState(5162); any_name();
				setState(5163); match(RENAME);
				setState(5164); match(TO);
				setState(5165); name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5167); match(ALTER);
				setState(5168); match(TEXT_P);
				setState(5169); match(SEARCH);
				setState(5170); match(DICTIONARY);
				setState(5171); any_name();
				setState(5172); match(RENAME);
				setState(5173); match(TO);
				setState(5174); name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5176); match(ALTER);
				setState(5177); match(TEXT_P);
				setState(5178); match(SEARCH);
				setState(5179); match(TEMPLATE);
				setState(5180); any_name();
				setState(5181); match(RENAME);
				setState(5182); match(TO);
				setState(5183); name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5185); match(ALTER);
				setState(5186); match(TEXT_P);
				setState(5187); match(SEARCH);
				setState(5188); match(CONFIGURATION);
				setState(5189); any_name();
				setState(5190); match(RENAME);
				setState(5191); match(TO);
				setState(5192); name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5194); match(ALTER);
				setState(5195); match(TYPE_P);
				setState(5196); any_name();
				setState(5197); match(RENAME);
				setState(5198); match(TO);
				setState(5199); name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5201); match(ALTER);
				setState(5202); match(TYPE_P);
				setState(5203); any_name();
				setState(5204); match(RENAME);
				setState(5205); match(ATTRIBUTE);
				setState(5206); name();
				setState(5207); match(TO);
				setState(5208); name();
				setState(5209); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_opt_column);
		try {
			setState(5215);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5213); match(COLUMN);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_opt_set_data);
		try {
			setState(5220);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5217); match(SET);
				setState(5218); match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterObjectSchemaStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterObjectSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterObjectSchemaStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterObjectSchemaStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterObjectSchemaStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterObjectSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterObjectSchemaStmtContext alterObjectSchemaStmt() throws RecognitionException {
		AlterObjectSchemaStmtContext _localctx = new AlterObjectSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_alterObjectSchemaStmt);
		try {
			setState(5402);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5222); match(ALTER);
				setState(5223); match(AGGREGATE);
				setState(5224); func_name();
				setState(5225); aggr_args();
				setState(5226); match(SET);
				setState(5227); match(SCHEMA);
				setState(5228); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5230); match(ALTER);
				setState(5231); match(COLLATION);
				setState(5232); any_name();
				setState(5233); match(SET);
				setState(5234); match(SCHEMA);
				setState(5235); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5237); match(ALTER);
				setState(5238); match(CONVERSION_P);
				setState(5239); any_name();
				setState(5240); match(SET);
				setState(5241); match(SCHEMA);
				setState(5242); name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5244); match(ALTER);
				setState(5245); match(DOMAIN_P);
				setState(5246); any_name();
				setState(5247); match(SET);
				setState(5248); match(SCHEMA);
				setState(5249); name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5251); match(ALTER);
				setState(5252); match(EXTENSION);
				setState(5253); any_name();
				setState(5254); match(SET);
				setState(5255); match(SCHEMA);
				setState(5256); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5258); match(ALTER);
				setState(5259); match(FUNCTION);
				setState(5260); function_with_argtypes();
				setState(5261); match(SET);
				setState(5262); match(SCHEMA);
				setState(5263); name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5265); match(ALTER);
				setState(5266); match(OPERATOR);
				setState(5267); any_operator();
				setState(5268); oper_argtypes();
				setState(5269); match(SET);
				setState(5270); match(SCHEMA);
				setState(5271); name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5273); match(ALTER);
				setState(5274); match(OPERATOR);
				setState(5275); match(CLASS);
				setState(5276); any_name();
				setState(5277); match(USING);
				setState(5278); access_method();
				setState(5279); match(SET);
				setState(5280); match(SCHEMA);
				setState(5281); name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5283); match(ALTER);
				setState(5284); match(OPERATOR);
				setState(5285); match(FAMILY);
				setState(5286); any_name();
				setState(5287); match(USING);
				setState(5288); access_method();
				setState(5289); match(SET);
				setState(5290); match(SCHEMA);
				setState(5291); name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5293); match(ALTER);
				setState(5294); match(TABLE);
				setState(5295); relation_expr();
				setState(5296); match(SET);
				setState(5297); match(SCHEMA);
				setState(5298); name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5300); match(ALTER);
				setState(5301); match(TABLE);
				setState(5302); match(IF_P);
				setState(5303); match(EXISTS);
				setState(5304); relation_expr();
				setState(5305); match(SET);
				setState(5306); match(SCHEMA);
				setState(5307); name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5309); match(ALTER);
				setState(5310); match(TEXT_P);
				setState(5311); match(SEARCH);
				setState(5312); match(PARSER);
				setState(5313); any_name();
				setState(5314); match(SET);
				setState(5315); match(SCHEMA);
				setState(5316); name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5318); match(ALTER);
				setState(5319); match(TEXT_P);
				setState(5320); match(SEARCH);
				setState(5321); match(DICTIONARY);
				setState(5322); any_name();
				setState(5323); match(SET);
				setState(5324); match(SCHEMA);
				setState(5325); name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5327); match(ALTER);
				setState(5328); match(TEXT_P);
				setState(5329); match(SEARCH);
				setState(5330); match(TEMPLATE);
				setState(5331); any_name();
				setState(5332); match(SET);
				setState(5333); match(SCHEMA);
				setState(5334); name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5336); match(ALTER);
				setState(5337); match(TEXT_P);
				setState(5338); match(SEARCH);
				setState(5339); match(CONFIGURATION);
				setState(5340); any_name();
				setState(5341); match(SET);
				setState(5342); match(SCHEMA);
				setState(5343); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5345); match(ALTER);
				setState(5346); match(SEQUENCE);
				setState(5347); qualified_name();
				setState(5348); match(SET);
				setState(5349); match(SCHEMA);
				setState(5350); name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5352); match(ALTER);
				setState(5353); match(SEQUENCE);
				setState(5354); match(IF_P);
				setState(5355); match(EXISTS);
				setState(5356); qualified_name();
				setState(5357); match(SET);
				setState(5358); match(SCHEMA);
				setState(5359); name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5361); match(ALTER);
				setState(5362); match(VIEW);
				setState(5363); qualified_name();
				setState(5364); match(SET);
				setState(5365); match(SCHEMA);
				setState(5366); name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5368); match(ALTER);
				setState(5369); match(VIEW);
				setState(5370); match(IF_P);
				setState(5371); match(EXISTS);
				setState(5372); qualified_name();
				setState(5373); match(SET);
				setState(5374); match(SCHEMA);
				setState(5375); name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5377); match(ALTER);
				setState(5378); match(FOREIGN);
				setState(5379); match(TABLE);
				setState(5380); relation_expr();
				setState(5381); match(SET);
				setState(5382); match(SCHEMA);
				setState(5383); name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5385); match(ALTER);
				setState(5386); match(FOREIGN);
				setState(5387); match(TABLE);
				setState(5388); match(IF_P);
				setState(5389); match(EXISTS);
				setState(5390); relation_expr();
				setState(5391); match(SET);
				setState(5392); match(SCHEMA);
				setState(5393); name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5395); match(ALTER);
				setState(5396); match(TYPE_P);
				setState(5397); any_name();
				setState(5398); match(SET);
				setState(5399); match(SCHEMA);
				setState(5400); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOwnerStmtContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public AlterOwnerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOwnerStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterOwnerStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterOwnerStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOwnerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOwnerStmtContext alterOwnerStmt() throws RecognitionException {
		AlterOwnerStmtContext _localctx = new AlterOwnerStmtContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_alterOwnerStmt);
		try {
			setState(5546);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5404); match(ALTER);
				setState(5405); match(AGGREGATE);
				setState(5406); func_name();
				setState(5407); aggr_args();
				setState(5408); match(OWNER);
				setState(5409); match(TO);
				setState(5410); roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5412); match(ALTER);
				setState(5413); match(COLLATION);
				setState(5414); any_name();
				setState(5415); match(OWNER);
				setState(5416); match(TO);
				setState(5417); roleId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5419); match(ALTER);
				setState(5420); match(CONVERSION_P);
				setState(5421); any_name();
				setState(5422); match(OWNER);
				setState(5423); match(TO);
				setState(5424); roleId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5426); match(ALTER);
				setState(5427); match(DATABASE);
				setState(5428); database_name();
				setState(5429); match(OWNER);
				setState(5430); match(TO);
				setState(5431); roleId();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5433); match(ALTER);
				setState(5434); match(DOMAIN_P);
				setState(5435); any_name();
				setState(5436); match(OWNER);
				setState(5437); match(TO);
				setState(5438); roleId();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5440); match(ALTER);
				setState(5441); match(FUNCTION);
				setState(5442); function_with_argtypes();
				setState(5443); match(OWNER);
				setState(5444); match(TO);
				setState(5445); roleId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5447); match(ALTER);
				setState(5448); opt_procedural();
				setState(5449); match(LANGUAGE);
				setState(5450); name();
				setState(5451); match(OWNER);
				setState(5452); match(TO);
				setState(5453); roleId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5455); match(ALTER);
				setState(5456); match(LARGE_P);
				setState(5457); match(OBJECT_P);
				setState(5458); numericOnly();
				setState(5459); match(OWNER);
				setState(5460); match(TO);
				setState(5461); roleId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5463); match(ALTER);
				setState(5464); match(OPERATOR);
				setState(5465); any_operator();
				setState(5466); oper_argtypes();
				setState(5467); match(OWNER);
				setState(5468); match(TO);
				setState(5469); roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5471); match(ALTER);
				setState(5472); match(OPERATOR);
				setState(5473); match(CLASS);
				setState(5474); any_name();
				setState(5475); match(USING);
				setState(5476); access_method();
				setState(5477); match(OWNER);
				setState(5478); match(TO);
				setState(5479); roleId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5481); match(ALTER);
				setState(5482); match(OPERATOR);
				setState(5483); match(FAMILY);
				setState(5484); any_name();
				setState(5485); match(USING);
				setState(5486); access_method();
				setState(5487); match(OWNER);
				setState(5488); match(TO);
				setState(5489); roleId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5491); match(ALTER);
				setState(5492); match(SCHEMA);
				setState(5493); name();
				setState(5494); match(OWNER);
				setState(5495); match(TO);
				setState(5496); roleId();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5498); match(ALTER);
				setState(5499); match(TYPE_P);
				setState(5500); any_name();
				setState(5501); match(OWNER);
				setState(5502); match(TO);
				setState(5503); roleId();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5505); match(ALTER);
				setState(5506); match(TABLESPACE);
				setState(5507); name();
				setState(5508); match(OWNER);
				setState(5509); match(TO);
				setState(5510); roleId();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5512); match(ALTER);
				setState(5513); match(TEXT_P);
				setState(5514); match(SEARCH);
				setState(5515); match(DICTIONARY);
				setState(5516); any_name();
				setState(5517); match(OWNER);
				setState(5518); match(TO);
				setState(5519); roleId();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5521); match(ALTER);
				setState(5522); match(TEXT_P);
				setState(5523); match(SEARCH);
				setState(5524); match(CONFIGURATION);
				setState(5525); any_name();
				setState(5526); match(OWNER);
				setState(5527); match(TO);
				setState(5528); roleId();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5530); match(ALTER);
				setState(5531); match(FOREIGN);
				setState(5532); match(DATA_P);
				setState(5533); match(WRAPPER);
				setState(5534); name();
				setState(5535); match(OWNER);
				setState(5536); match(TO);
				setState(5537); roleId();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5539); match(ALTER);
				setState(5540); match(SERVER);
				setState(5541); name();
				setState(5542); match(OWNER);
				setState(5543); match(TO);
				setState(5544); roleId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRuleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRuleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleStmtContext ruleStmt() throws RecognitionException {
		RuleStmtContext _localctx = new RuleStmtContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_ruleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5548); match(CREATE);
			setState(5549); opt_or_replace();
			setState(5550); match(RULE);
			setState(5551); name();
			setState(5552); match(AS);
			setState(5553); match(ON);
			setState(5554); event();
			setState(5555); match(TO);
			setState(5556); qualified_name();
			setState(5557); where_clause();
			setState(5558); match(DO);
			setState(5559); opt_instead();
			setState(5560); ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(SqlParser.NOTHING, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRuleActionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRuleActionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_ruleActionList);
		try {
			setState(5568);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5562); match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5563); ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5564); match(T__8);
				setState(5565); ruleActionMulti(0);
				setState(5566); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() {
			return getRuleContext(RuleActionStmtOrEmptyContext.class,0);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRuleActionMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRuleActionMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		return ruleActionMulti(0);
	}

	private RuleActionMultiContext ruleActionMulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, _parentState);
		RuleActionMultiContext _prevctx = _localctx;
		int _startState = 610;
		enterRecursionRule(_localctx, 610, RULE_ruleActionMulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5571); ruleActionStmtOrEmpty();
			}
			_ctx.stop = _input.LT(-1);
			setState(5578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleActionMultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ruleActionMulti);
					setState(5573);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5574); match(T__4);
					setState(5575); ruleActionStmtOrEmpty();
					}
					} 
				}
				setState(5580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRuleActionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRuleActionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_ruleActionStmt);
		try {
			setState(5586);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5581); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5582); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5583); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5584); deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5585); notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtOrEmptyContext extends ParserRuleContext {
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public RuleActionStmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRuleActionStmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRuleActionStmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionStmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() throws RecognitionException {
		RuleActionStmtOrEmptyContext _localctx = new RuleActionStmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_ruleActionStmtOrEmpty);
		try {
			setState(5590);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5588); ruleActionStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			_la = _input.LA(1);
			if ( !(_la==DELETE_P || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode ALSO() { return getToken(SqlParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_opt_instead);
		try {
			setState(5597);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5594); match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(5595); match(ALSO);
				}
				break;
			case T__8:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case SELECT:
			case TABLE:
			case UPDATE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropruleStmtContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DropruleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropruleStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropruleStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropruleStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropruleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropruleStmtContext dropruleStmt() throws RecognitionException {
		DropruleStmtContext _localctx = new DropruleStmtContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_dropruleStmt);
		try {
			setState(5615);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5599); match(DROP);
				setState(5600); match(RULE);
				setState(5601); name();
				setState(5602); match(ON);
				setState(5603); any_name();
				setState(5604); opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5606); match(DROP);
				setState(5607); match(RULE);
				setState(5608); match(IF_P);
				setState(5609); match(EXISTS);
				setState(5610); name();
				setState(5611); match(ON);
				setState(5612); any_name();
				setState(5613); opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode NOTIFY() { return getToken(SqlParser.NOTIFY, 0); }
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_notifyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5617); match(NOTIFY);
			setState(5618); colId();
			setState(5619); notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_notify_payload);
		try {
			setState(5624);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5621); match(T__13);
				setState(5622); sConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LISTEN() { return getToken(SqlParser.LISTEN, 0); }
		public ListenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterListenStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitListenStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitListenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenStmtContext listenStmt() throws RecognitionException {
		ListenStmtContext _localctx = new ListenStmtContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_listenStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5626); match(LISTEN);
			setState(5627); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenStmtContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode UNLISTEN() { return getToken(SqlParser.UNLISTEN, 0); }
		public UnlistenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterUnlistenStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitUnlistenStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUnlistenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenStmtContext unlistenStmt() throws RecognitionException {
		UnlistenStmtContext _localctx = new UnlistenStmtContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_unlistenStmt);
		try {
			setState(5633);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5629); match(UNLISTEN);
				setState(5630); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5631); match(UNLISTEN);
				setState(5632); match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStmtContext extends ParserRuleContext {
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode ABORT_P() { return getToken(SqlParser.ABORT_P, 0); }
		public TerminalNode PREPARED() { return getToken(SqlParser.PREPARED, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public TerminalNode BEGIN_P() { return getToken(SqlParser.BEGIN_P, 0); }
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public TerminalNode RELEASE() { return getToken(SqlParser.RELEASE, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SqlParser.SAVEPOINT, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public TransactionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTransactionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTransactionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransactionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStmtContext transactionStmt() throws RecognitionException {
		TransactionStmtContext _localctx = new TransactionStmtContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_transactionStmt);
		try {
			setState(5677);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5635); match(ABORT_P);
				setState(5636); opt_transaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5637); match(BEGIN_P);
				setState(5638); opt_transaction();
				setState(5639); transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5641); match(START);
				setState(5642); match(TRANSACTION);
				setState(5643); transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5644); match(COMMIT);
				setState(5645); opt_transaction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5646); match(END_P);
				setState(5647); opt_transaction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5648); match(ROLLBACK);
				setState(5649); opt_transaction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5650); match(SAVEPOINT);
				setState(5651); colId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5652); match(RELEASE);
				setState(5653); match(SAVEPOINT);
				setState(5654); colId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5655); match(RELEASE);
				setState(5656); colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5657); match(ROLLBACK);
				setState(5658); opt_transaction();
				setState(5659); match(TO);
				setState(5660); match(SAVEPOINT);
				setState(5661); colId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5663); match(ROLLBACK);
				setState(5664); opt_transaction();
				setState(5665); match(TO);
				setState(5666); colId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5668); match(PREPARE);
				setState(5669); match(TRANSACTION);
				setState(5670); sConst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5671); match(COMMIT);
				setState(5672); match(PREPARED);
				setState(5673); sConst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5674); match(ROLLBACK);
				setState(5675); match(PREPARED);
				setState(5676); sConst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode WORK() { return getToken(SqlParser.WORK, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_opt_transaction);
		try {
			setState(5682);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5679); match(WORK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5680); match(TRANSACTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(SqlParser.WRITE, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_transaction_mode_item);
		try {
			setState(5694);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5684); match(ISOLATION);
				setState(5685); match(LEVEL);
				setState(5686); iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5687); match(READ);
				setState(5688); match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5689); match(READ);
				setState(5690); match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5691); match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5692); match(NOT);
				setState(5693); match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_itemContext transaction_mode_item() {
			return getRuleContext(Transaction_mode_itemContext.class,0);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 636;
		enterRecursionRule(_localctx, 636, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5697); transaction_mode_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5706);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5704);
					switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(5699);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5700); match(T__13);
						setState(5701); transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(5702);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5703); transaction_mode_item();
						}
						break;
					}
					} 
				}
				setState(5708);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_transaction_mode_list_or_empty);
		try {
			setState(5711);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5709); transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public ViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterViewStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitViewStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewStmtContext viewStmt() throws RecognitionException {
		ViewStmtContext _localctx = new ViewStmtContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_viewStmt);
		try {
			setState(5735);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5713); match(CREATE);
				setState(5714); optTemp();
				setState(5715); match(VIEW);
				setState(5716); qualified_name();
				setState(5717); opt_column_list();
				setState(5718); opt_reloptions();
				setState(5719); match(AS);
				setState(5720); selectStmt();
				setState(5721); opt_check_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5723); match(CREATE);
				setState(5724); match(OR);
				setState(5725); match(REPLACE);
				setState(5726); optTemp();
				setState(5727); match(VIEW);
				setState(5728); qualified_name();
				setState(5729); opt_column_list();
				setState(5730); opt_reloptions();
				setState(5731); match(AS);
				setState(5732); selectStmt();
				setState(5733); opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode CASCADED() { return getToken(SqlParser.CASCADED, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_opt_check_option);
		try {
			setState(5749);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5737); match(WITH);
				setState(5738); match(CHECK);
				setState(5739); match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5740); match(WITH);
				setState(5741); match(CASCADED);
				setState(5742); match(CHECK);
				setState(5743); match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5744); match(WITH);
				setState(5745); match(LOCAL);
				setState(5746); match(CHECK);
				setState(5747); match(OPTION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStmtContext extends ParserRuleContext {
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode LOAD() { return getToken(SqlParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterLoadStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitLoadStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLoadStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStmtContext loadStmt() throws RecognitionException {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_loadStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5751); match(LOAD);
			setState(5752); file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbStmtContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public CreatedbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatedbStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatedbStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbStmtContext createdbStmt() throws RecognitionException {
		CreatedbStmtContext _localctx = new CreatedbStmtContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_createdbStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5754); match(CREATE);
			setState(5755); match(DATABASE);
			setState(5756); database_name();
			setState(5758);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(5757); match(WITH);
				}
				break;
			}
			setState(5760); createdb_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public Createdb_opt_itemContext createdb_opt_item() {
			return getRuleContext(Createdb_opt_itemContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		return createdb_opt_list(0);
	}

	private Createdb_opt_listContext createdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, _parentState);
		Createdb_opt_listContext _prevctx = _localctx;
		int _startState = 648;
		enterRecursionRule(_localctx, 648, RULE_createdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5767);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_list);
					setState(5763);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5764); createdb_opt_item();
					}
					} 
				}
				setState(5769);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(SqlParser.LC_CTYPE_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode LC_COLLATE_P() { return getToken(SqlParser.LC_COLLATE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_createdb_opt_item);
		try {
			setState(5835);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5770); match(TABLESPACE);
				setState(5771); opt_equal();
				setState(5772); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5774); match(TABLESPACE);
				setState(5775); opt_equal();
				setState(5776); match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5778); match(LOCATION);
				setState(5779); opt_equal();
				setState(5780); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5782); match(LOCATION);
				setState(5783); opt_equal();
				setState(5784); match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5786); match(TEMPLATE);
				setState(5787); opt_equal();
				setState(5788); name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5790); match(TEMPLATE);
				setState(5791); opt_equal();
				setState(5792); match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5794); match(ENCODING);
				setState(5795); opt_equal();
				setState(5796); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5798); match(ENCODING);
				setState(5799); opt_equal();
				setState(5800); iConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5802); match(ENCODING);
				setState(5803); opt_equal();
				setState(5804); match(DEFAULT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5806); match(LC_COLLATE_P);
				setState(5807); opt_equal();
				setState(5808); sConst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5810); match(LC_COLLATE_P);
				setState(5811); opt_equal();
				setState(5812); match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5814); match(LC_CTYPE_P);
				setState(5815); opt_equal();
				setState(5816); sConst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5818); match(LC_CTYPE_P);
				setState(5819); opt_equal();
				setState(5820); match(DEFAULT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5822); match(CONNECTION);
				setState(5823); match(LIMIT);
				setState(5824); opt_equal();
				setState(5825); signedIconst();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5827); match(OWNER);
				setState(5828); opt_equal();
				setState(5829); name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5831); match(OWNER);
				setState(5832); opt_equal();
				setState(5833); match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_opt_equal);
		try {
			setState(5839);
			switch (_input.LA(1)) {
			case T__5:
				enterOuterAlt(_localctx, 1);
				{
				setState(5837); match(T__5);
				}
				break;
			case T__12:
			case T__10:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterDatabaseStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterDatabaseStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterDatabaseStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDatabaseStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStmtContext alterDatabaseStmt() throws RecognitionException {
		AlterDatabaseStmtContext _localctx = new AlterDatabaseStmtContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_alterDatabaseStmt);
		try {
			setState(5856);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5841); match(ALTER);
				setState(5842); match(DATABASE);
				setState(5843); database_name();
				setState(5845);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(5844); match(WITH);
					}
					break;
				}
				setState(5847); alterdb_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5849); match(ALTER);
				setState(5850); match(DATABASE);
				setState(5851); database_name();
				setState(5852); match(SET);
				setState(5853); match(TABLESPACE);
				setState(5854); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseSetStmtContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterDatabaseSetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterDatabaseSetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDatabaseSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSetStmtContext alterDatabaseSetStmt() throws RecognitionException {
		AlterDatabaseSetStmtContext _localctx = new AlterDatabaseSetStmtContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_alterDatabaseSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5858); match(ALTER);
			setState(5859); match(DATABASE);
			setState(5860); database_name();
			setState(5861); setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterdb_opt_listContext extends ParserRuleContext {
		public Alterdb_opt_itemContext alterdb_opt_item() {
			return getRuleContext(Alterdb_opt_itemContext.class,0);
		}
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public Alterdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterdb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterdb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterdb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_listContext alterdb_opt_list() throws RecognitionException {
		return alterdb_opt_list(0);
	}

	private Alterdb_opt_listContext alterdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterdb_opt_listContext _localctx = new Alterdb_opt_listContext(_ctx, _parentState);
		Alterdb_opt_listContext _prevctx = _localctx;
		int _startState = 658;
		enterRecursionRule(_localctx, 658, RULE_alterdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5868);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterdb_opt_list);
					setState(5864);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5865); alterdb_opt_item();
					}
					} 
				}
				setState(5870);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alterdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public Alterdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterdb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterdb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterdb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_itemContext alterdb_opt_item() throws RecognitionException {
		Alterdb_opt_itemContext _localctx = new Alterdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_alterdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5871); match(CONNECTION);
			setState(5872); match(LIMIT);
			setState(5873); opt_equal();
			setState(5874); signedIconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbStmtContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public DropdbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDropdbStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDropdbStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropdbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbStmtContext dropdbStmt() throws RecognitionException {
		DropdbStmtContext _localctx = new DropdbStmtContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_dropdbStmt);
		try {
			setState(5884);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5876); match(DROP);
				setState(5877); match(DATABASE);
				setState(5878); database_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5879); match(DROP);
				setState(5880); match(DATABASE);
				setState(5881); match(IF_P);
				setState(5882); match(EXISTS);
				setState(5883); database_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainStmtContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateDomainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateDomainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainStmtContext createDomainStmt() throws RecognitionException {
		CreateDomainStmtContext _localctx = new CreateDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_createDomainStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5886); match(CREATE);
			setState(5887); match(DOMAIN_P);
			setState(5888); any_name();
			setState(5889); opt_as();
			setState(5890); typename();
			setState(5891); colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public AlterDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterDomainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterDomainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainStmtContext alterDomainStmt() throws RecognitionException {
		AlterDomainStmtContext _localctx = new AlterDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_alterDomainStmt);
		try {
			setState(5943);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5893); match(ALTER);
				setState(5894); match(DOMAIN_P);
				setState(5895); any_name();
				setState(5896); alter_column_default();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5898); match(ALTER);
				setState(5899); match(DOMAIN_P);
				setState(5900); any_name();
				setState(5901); match(DROP);
				setState(5902); match(NOT);
				setState(5903); match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5905); match(ALTER);
				setState(5906); match(DOMAIN_P);
				setState(5907); any_name();
				setState(5908); match(SET);
				setState(5909); match(NOT);
				setState(5910); match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5912); match(ALTER);
				setState(5913); match(DOMAIN_P);
				setState(5914); any_name();
				setState(5915); match(ADD_P);
				setState(5916); tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5918); match(ALTER);
				setState(5919); match(DOMAIN_P);
				setState(5920); any_name();
				setState(5921); match(DROP);
				setState(5922); match(CONSTRAINT);
				setState(5923); name();
				setState(5924); opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5926); match(ALTER);
				setState(5927); match(DOMAIN_P);
				setState(5928); any_name();
				setState(5929); match(DROP);
				setState(5930); match(CONSTRAINT);
				setState(5931); match(IF_P);
				setState(5932); match(EXISTS);
				setState(5933); name();
				setState(5934); opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5936); match(ALTER);
				setState(5937); match(DOMAIN_P);
				setState(5938); any_name();
				setState(5939); match(VALIDATE);
				setState(5940); match(CONSTRAINT);
				setState(5941); name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_opt_as);
		try {
			setState(5947);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5945); match(AS);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_SCHEMA:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSDictionaryStmtContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public AlterTSDictionaryStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSDictionaryStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterTSDictionaryStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterTSDictionaryStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTSDictionaryStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSDictionaryStmtContext alterTSDictionaryStmt() throws RecognitionException {
		AlterTSDictionaryStmtContext _localctx = new AlterTSDictionaryStmtContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alterTSDictionaryStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5949); match(ALTER);
			setState(5950); match(TEXT_P);
			setState(5951); match(SEARCH);
			setState(5952); match(DICTIONARY);
			setState(5953); any_name();
			setState(5954); definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSConfigurationStmtContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode ALTER(int i) {
			return getToken(SqlParser.ALTER, i);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public List<TerminalNode> ALTER() { return getTokens(SqlParser.ALTER); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public AlterTSConfigurationStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSConfigurationStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlterTSConfigurationStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlterTSConfigurationStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTSConfigurationStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSConfigurationStmtContext alterTSConfigurationStmt() throws RecognitionException {
		AlterTSConfigurationStmtContext _localctx = new AlterTSConfigurationStmtContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alterTSConfigurationStmt);
		try {
			setState(6028);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5956); match(ALTER);
				setState(5957); match(TEXT_P);
				setState(5958); match(SEARCH);
				setState(5959); match(CONFIGURATION);
				setState(5960); any_name();
				setState(5961); match(ADD_P);
				setState(5962); match(MAPPING);
				setState(5963); match(FOR);
				setState(5964); name_list(0);
				setState(5965); match(WITH);
				setState(5966); any_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5968); match(ALTER);
				setState(5969); match(TEXT_P);
				setState(5970); match(SEARCH);
				setState(5971); match(CONFIGURATION);
				setState(5972); any_name();
				setState(5973); match(ALTER);
				setState(5974); match(MAPPING);
				setState(5975); match(FOR);
				setState(5976); name_list(0);
				setState(5977); match(WITH);
				setState(5978); any_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5980); match(ALTER);
				setState(5981); match(TEXT_P);
				setState(5982); match(SEARCH);
				setState(5983); match(CONFIGURATION);
				setState(5984); any_name();
				setState(5985); match(ALTER);
				setState(5986); match(MAPPING);
				setState(5987); match(REPLACE);
				setState(5988); any_name();
				setState(5989); match(WITH);
				setState(5990); any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5992); match(ALTER);
				setState(5993); match(TEXT_P);
				setState(5994); match(SEARCH);
				setState(5995); match(CONFIGURATION);
				setState(5996); any_name();
				setState(5997); match(ALTER);
				setState(5998); match(MAPPING);
				setState(5999); match(FOR);
				setState(6000); name_list(0);
				setState(6001); match(REPLACE);
				setState(6002); any_name();
				setState(6003); match(WITH);
				setState(6004); any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6006); match(ALTER);
				setState(6007); match(TEXT_P);
				setState(6008); match(SEARCH);
				setState(6009); match(CONFIGURATION);
				setState(6010); any_name();
				setState(6011); match(DROP);
				setState(6012); match(MAPPING);
				setState(6013); match(FOR);
				setState(6014); name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6016); match(ALTER);
				setState(6017); match(TEXT_P);
				setState(6018); match(SEARCH);
				setState(6019); match(CONFIGURATION);
				setState(6020); any_name();
				setState(6021); match(DROP);
				setState(6022); match(MAPPING);
				setState(6023); match(IF_P);
				setState(6024); match(EXISTS);
				setState(6025); match(FOR);
				setState(6026); name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionStmtContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public SConstContext sConst(int i) {
			return getRuleContext(SConstContext.class,i);
		}
		public List<SConstContext> sConst() {
			return getRuleContexts(SConstContext.class);
		}
		public CreateConversionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCreateConversionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCreateConversionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateConversionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionStmtContext createConversionStmt() throws RecognitionException {
		CreateConversionStmtContext _localctx = new CreateConversionStmtContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_createConversionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6030); match(CREATE);
			setState(6031); opt_default();
			setState(6032); match(CONVERSION_P);
			setState(6033); any_name();
			setState(6034); match(FOR);
			setState(6035); sConst();
			setState(6036); match(TO);
			setState(6037); sConst();
			setState(6038); match(FROM);
			setState(6039); any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public ClusterStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterClusterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitClusterStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitClusterStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterStmtContext clusterStmt() throws RecognitionException {
		ClusterStmtContext _localctx = new ClusterStmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_clusterStmt);
		try {
			setState(6054);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6041); match(CLUSTER);
				setState(6042); opt_verbose();
				setState(6043); qualified_name();
				setState(6044); cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6046); match(CLUSTER);
				setState(6047); opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6048); match(CLUSTER);
				setState(6049); opt_verbose();
				setState(6050); index_name();
				setState(6051); match(ON);
				setState(6052); qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_cluster_index_specification);
		try {
			setState(6059);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6056); match(USING);
				setState(6057); index_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VACUUM() { return getToken(SqlParser.VACUUM, 0); }
		public VacuumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVacuumStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVacuumStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumStmtContext vacuumStmt() throws RecognitionException {
		VacuumStmtContext _localctx = new VacuumStmtContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_vacuumStmt);
		try {
			setState(6090);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6061); match(VACUUM);
				setState(6062); opt_full();
				setState(6063); opt_freeze();
				setState(6064); opt_verbose();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6066); match(VACUUM);
				setState(6067); opt_full();
				setState(6068); opt_freeze();
				setState(6069); opt_verbose();
				setState(6070); qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6072); match(VACUUM);
				setState(6073); opt_full();
				setState(6074); opt_freeze();
				setState(6075); opt_verbose();
				setState(6076); analyzeStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6078); match(VACUUM);
				setState(6079); match(T__8);
				setState(6080); vacuum_option_list(0);
				setState(6081); match(T__15);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6083); match(VACUUM);
				setState(6084); match(T__8);
				setState(6085); vacuum_option_list(0);
				setState(6086); match(T__15);
				setState(6087); qualified_name();
				setState(6088); opt_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_option_listContext extends ParserRuleContext {
		public Vacuum_option_elemContext vacuum_option_elem() {
			return getRuleContext(Vacuum_option_elemContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Vacuum_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVacuum_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVacuum_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuum_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_listContext vacuum_option_list() throws RecognitionException {
		return vacuum_option_list(0);
	}

	private Vacuum_option_listContext vacuum_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vacuum_option_listContext _localctx = new Vacuum_option_listContext(_ctx, _parentState);
		Vacuum_option_listContext _prevctx = _localctx;
		int _startState = 682;
		enterRecursionRule(_localctx, 682, RULE_vacuum_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6093); vacuum_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6100);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vacuum_option_list);
					setState(6095);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6096); match(T__13);
					setState(6097); vacuum_option_elem();
					}
					} 
				}
				setState(6102);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Vacuum_option_elemContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public Vacuum_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterVacuum_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitVacuum_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuum_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_elemContext vacuum_option_elem() throws RecognitionException {
		Vacuum_option_elemContext _localctx = new Vacuum_option_elemContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_vacuum_option_elem);
		try {
			setState(6107);
			switch (_input.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6103); analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6104); match(VERBOSE);
				}
				break;
			case FREEZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6105); match(FREEZE);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6106); match(FULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public AnalyzeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAnalyzeStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAnalyzeStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAnalyzeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeStmtContext analyzeStmt() throws RecognitionException {
		AnalyzeStmtContext _localctx = new AnalyzeStmtContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_analyzeStmt);
		try {
			setState(6117);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6109); analyze_keyword();
				setState(6110); opt_verbose();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6112); analyze_keyword();
				setState(6113); opt_verbose();
				setState(6114); qualified_name();
				setState(6115); opt_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(SqlParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(SqlParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6119);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_opt_verbose);
		try {
			setState(6123);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6121); match(VERBOSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_opt_full);
		try {
			setState(6127);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6125); match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_opt_freeze);
		try {
			setState(6131);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6129); match(FREEZE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_opt_name_list);
		try {
			setState(6138);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6133); match(T__8);
				setState(6134); name_list(0);
				setState(6135); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlParser.EXPLAIN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public ExplainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplainStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplainStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStmtContext explainStmt() throws RecognitionException {
		ExplainStmtContext _localctx = new ExplainStmtContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_explainStmt);
		try {
			setState(6156);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6140); match(EXPLAIN);
				setState(6141); explainableStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6142); match(EXPLAIN);
				setState(6143); analyze_keyword();
				setState(6144); opt_verbose();
				setState(6145); explainableStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6147); match(EXPLAIN);
				setState(6148); match(VERBOSE);
				setState(6149); explainableStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6150); match(EXPLAIN);
				setState(6151); match(T__8);
				setState(6152); explain_option_list(0);
				setState(6153); match(T__15);
				setState(6154); explainableStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplainableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplainableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_explainableStmt);
		try {
			setState(6165);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6158); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6159); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6160); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6161); deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6162); declareCursorStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6163); createAsStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6164); executeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public Explain_option_elemContext explain_option_elem() {
			return getRuleContext(Explain_option_elemContext.class,0);
		}
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 702;
		enterRecursionRule(_localctx, 702, RULE_explain_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6168); explain_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6175);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					setState(6170);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6171); match(T__13);
					setState(6172); explain_option_elem();
					}
					} 
				}
				setState(6177);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6178); explain_option_name();
			setState(6179); explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_explain_option_name);
		try {
			setState(6184);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6181); colId();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6182); analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6183); match(VERBOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_explain_option_arg);
		try {
			setState(6189);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6186); opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6187); numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public PrepareStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrepareStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrepareStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrepareStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStmtContext prepareStmt() throws RecognitionException {
		PrepareStmtContext _localctx = new PrepareStmtContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_prepareStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6191); match(PREPARE);
			setState(6192); name();
			setState(6193); prep_type_clause();
			setState(6194); match(AS);
			setState(6195); preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_prep_type_clause);
		try {
			setState(6202);
			switch (_input.LA(1)) {
			case T__8:
				enterOuterAlt(_localctx, 1);
				{
				setState(6197); match(T__8);
				setState(6198); type_list(0);
				setState(6199); match(T__15);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_preparableStmt);
		try {
			setState(6208);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6204); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6205); insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6206); updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6207); deleteStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExecuteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExecuteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_executeStmt);
		try {
			setState(6224);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6210); match(EXECUTE);
				setState(6211); name();
				setState(6212); execute_param_clause();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6214); match(CREATE);
				setState(6215); optTemp();
				setState(6216); match(TABLE);
				setState(6217); create_as_target();
				setState(6218); match(AS);
				setState(6219); match(EXECUTE);
				setState(6220); name();
				setState(6221); execute_param_clause();
				setState(6222); opt_with_data();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_execute_param_clause);
		try {
			setState(6231);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6226); match(T__8);
				setState(6227); expr_list(0);
				setState(6228); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateStmtContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SqlParser.DEALLOCATE, 0); }
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public DeallocateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDeallocateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDeallocateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeallocateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateStmtContext deallocateStmt() throws RecognitionException {
		DeallocateStmtContext _localctx = new DeallocateStmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_deallocateStmt);
		try {
			setState(6243);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6233); match(DEALLOCATE);
				setState(6234); name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6235); match(DEALLOCATE);
				setState(6236); match(PREPARE);
				setState(6237); name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6238); match(DEALLOCATE);
				setState(6239); match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6240); match(DEALLOCATE);
				setState(6241); match(PREPARE);
				setState(6242); match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmtContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public InsertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInsertStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInsertStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmtContext insertStmt() throws RecognitionException {
		InsertStmtContext _localctx = new InsertStmtContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_insertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6245); opt_with_clause();
			setState(6246); match(INSERT);
			setState(6247); match(INTO);
			setState(6248); qualified_name();
			setState(6249); insert_rest();
			setState(6250); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_insert_rest);
		try {
			setState(6260);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6252); selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6253); match(T__8);
				setState(6254); insert_column_list(0);
				setState(6255); match(T__15);
				setState(6256); selectStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6258); match(DEFAULT);
				setState(6259); match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Insert_column_itemContext insert_column_item() {
			return getRuleContext(Insert_column_itemContext.class,0);
		}
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 726;
		enterRecursionRule(_localctx, 726, RULE_insert_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6263); insert_column_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6270);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					setState(6265);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6266); match(T__13);
					setState(6267); insert_column_item();
					}
					} 
				}
				setState(6272);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6273); colId();
			setState(6274); opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(SqlParser.RETURNING, 0); }
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_returning_clause);
		try {
			setState(6279);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6276); match(RETURNING);
				setState(6277); target_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStmtContext extends ParserRuleContext {
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public DeleteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDeleteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDeleteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeleteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStmtContext deleteStmt() throws RecognitionException {
		DeleteStmtContext _localctx = new DeleteStmtContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_deleteStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6281); opt_with_clause();
			setState(6282); match(DELETE_P);
			setState(6283); match(FROM);
			setState(6284); relation_expr_opt_alias();
			setState(6285); using_clause();
			setState(6286); where_or_current_clause();
			setState(6287); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_using_clause);
		try {
			setState(6292);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6289); match(USING);
				setState(6290); from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStmtContext extends ParserRuleContext {
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public TerminalNode LOCK_P() { return getToken(SqlParser.LOCK_P, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterLockStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitLockStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLockStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStmtContext lockStmt() throws RecognitionException {
		LockStmtContext _localctx = new LockStmtContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_lockStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6294); match(LOCK_P);
			setState(6295); opt_table();
			setState(6296); relation_expr_list(0);
			setState(6297); opt_lock();
			setState(6298); opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode MODE() { return getToken(SqlParser.MODE, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_opt_lock);
		try {
			setState(6305);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6300); match(IN_P);
				setState(6301); lock_type();
				setState(6302); match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode EXCLUSIVE() { return getToken(SqlParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SqlParser.ACCESS, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_lock_type);
		try {
			setState(6323);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6307); match(ACCESS);
				setState(6308); match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6309); match(ROW);
				setState(6310); match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6311); match(ROW);
				setState(6312); match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6313); match(SHARE);
				setState(6314); match(UPDATE);
				setState(6315); match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6316); match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6317); match(SHARE);
				setState(6318); match(ROW);
				setState(6319); match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6320); match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6321); match(ACCESS);
				setState(6322); match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(SqlParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_opt_nowait);
		try {
			setState(6327);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6325); match(NOWAIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public UpdateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterUpdateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitUpdateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUpdateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStmtContext updateStmt() throws RecognitionException {
		UpdateStmtContext _localctx = new UpdateStmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_updateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329); opt_with_clause();
			setState(6330); match(UPDATE);
			setState(6331); relation_expr_opt_alias();
			setState(6332); match(SET);
			setState(6333); set_clause_list(0);
			setState(6334); from_clause();
			setState(6335); where_or_current_clause();
			setState(6336); returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 746;
		enterRecursionRule(_localctx, 746, RULE_set_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6339); set_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(6346);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,307,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					setState(6341);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6342); match(T__13);
					setState(6343); set_clause();
					}
					} 
				}
				setState(6348);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,307,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Multiple_set_clauseContext multiple_set_clause() {
			return getRuleContext(Multiple_set_clauseContext.class,0);
		}
		public Single_set_clauseContext single_set_clause() {
			return getRuleContext(Single_set_clauseContext.class,0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_set_clause);
		try {
			setState(6351);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6349); single_set_clause();
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				setState(6350); multiple_set_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Single_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSingle_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSingle_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSingle_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_set_clauseContext single_set_clause() throws RecognitionException {
		Single_set_clauseContext _localctx = new Single_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_single_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6353); set_target();
			setState(6354); match(T__5);
			setState(6355); ctext_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_set_clauseContext extends ParserRuleContext {
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Multiple_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterMultiple_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitMultiple_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitMultiple_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_set_clauseContext multiple_set_clause() throws RecognitionException {
		Multiple_set_clauseContext _localctx = new Multiple_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_multiple_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6357); match(T__8);
			setState(6358); set_target_list(0);
			setState(6359); match(T__15);
			setState(6360); match(T__5);
			setState(6361); ctext_row();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6363); colId();
			setState(6364); opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 756;
		enterRecursionRule(_localctx, 756, RULE_set_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6367); set_target();
			}
			_ctx.stop = _input.LT(-1);
			setState(6374);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,309,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					setState(6369);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6370); match(T__13);
					setState(6371); set_target();
					}
					} 
				}
				setState(6376);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,309,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DeclareCursorStmtContext extends ParserRuleContext {
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode DECLARE() { return getToken(SqlParser.DECLARE, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public DeclareCursorStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDeclareCursorStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDeclareCursorStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeclareCursorStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStmtContext declareCursorStmt() throws RecognitionException {
		DeclareCursorStmtContext _localctx = new DeclareCursorStmtContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_declareCursorStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6377); match(DECLARE);
			setState(6378); cursor_name();
			setState(6379); cursor_options(0);
			setState(6380); match(CURSOR);
			setState(6381); opt_hold();
			setState(6382); match(FOR);
			setState(6383); selectStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6385); name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public TerminalNode INSENSITIVE() { return getToken(SqlParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(SqlParser.SCROLL, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 762;
		enterRecursionRule(_localctx, 762, RULE_cursor_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6399);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6397);
					switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6388);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6389); match(NO);
						setState(6390); match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6391);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6392); match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6393);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6394); match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6395);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6396); match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				setState(6401);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode HOLD() { return getToken(SqlParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_opt_hold);
		try {
			setState(6407);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(6403); match(WITH);
				setState(6404); match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6405); match(WITHOUT);
				setState(6406); match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelectStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelectStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelectStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtContext selectStmt() throws RecognitionException {
		SelectStmtContext _localctx = new SelectStmtContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_selectStmt);
		try {
			setState(6411);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6409); select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6410); select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		return select_with_parens(0);
	}

	private Select_with_parensContext select_with_parens(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, _parentState);
		Select_with_parensContext _prevctx = _localctx;
		int _startState = 768;
		enterRecursionRule(_localctx, 768, RULE_select_with_parens, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6422);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(6414); match(T__8);
				setState(6415); select_no_parens();
				setState(6416); match(T__15);
				}
				break;
			case 2:
				{
				setState(6418); match(T__8);
				setState(6419); select_with_parens(0);
				setState(6420); match(T__15);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6447);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6445);
					switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
					case 1:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6424);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6425); match(UNION);
						setState(6426); opt_all();
						setState(6429);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6427); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6428); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6431);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6432); match(INTERSECT);
						setState(6433); opt_all();
						setState(6436);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6434); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6435); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6438);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6439); match(EXCEPT);
						setState(6440); opt_all();
						setState(6443);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6441); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6442); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(6449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_select_no_parens);
		try {
			setState(6483);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6450); simple_select(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6451); select_clause();
				setState(6452); sort_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6454); select_clause();
				setState(6455); opt_sort_clause();
				setState(6456); for_locking_clause();
				setState(6457); opt_select_limit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6459); select_clause();
				setState(6460); opt_sort_clause();
				setState(6461); select_limit();
				setState(6462); opt_for_locking_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6464); with_clause();
				setState(6465); select_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6467); with_clause();
				setState(6468); select_clause();
				setState(6469); sort_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6471); with_clause();
				setState(6472); select_clause();
				setState(6473); opt_sort_clause();
				setState(6474); for_locking_clause();
				setState(6475); opt_select_limit();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6477); with_clause();
				setState(6478); select_clause();
				setState(6479); opt_sort_clause();
				setState(6480); select_limit();
				setState(6481); opt_for_locking_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_select_clause);
		try {
			setState(6487);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(6485); simple_select(0);
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				setState(6486); select_with_parens(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Opt_distinctContext opt_distinct() {
			return getRuleContext(Opt_distinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSimple_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 774;
		enterRecursionRule(_localctx, 774, RULE_simple_select, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6503);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(6490); match(SELECT);
				setState(6491); opt_distinct();
				setState(6492); target_list(0);
				setState(6493); into_clause();
				setState(6494); from_clause();
				setState(6495); where_clause();
				setState(6496); group_clause();
				setState(6497); having_clause();
				setState(6498); window_clause();
				}
				break;
			case VALUES:
				{
				setState(6500); values_clause(0);
				}
				break;
			case TABLE:
				{
				setState(6501); match(TABLE);
				setState(6502); relation_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(6528);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6526);
					switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6505);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6506); match(UNION);
						setState(6507); opt_all();
						setState(6510);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6508); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6509); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6512);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6513); match(INTERSECT);
						setState(6514); opt_all();
						setState(6517);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6515); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6516); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6519);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6520); match(EXCEPT);
						setState(6521); opt_all();
						setState(6524);
						switch (_input.LA(1)) {
						case T__8:
							{
							setState(6522); select_with_parens(0);
							}
							break;
						case SELECT:
						case TABLE:
						case VALUES:
							{
							setState(6523); simple_select(0);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(6530);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(SqlParser.RECURSIVE, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_with_clause);
		try {
			setState(6536);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6531); match(WITH);
				setState(6532); cte_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6533); match(WITH);
				setState(6534); match(RECURSIVE);
				setState(6535); cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public Common_table_exprContext common_table_expr() {
			return getRuleContext(Common_table_exprContext.class,0);
		}
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cte_listContext _localctx = new Cte_listContext(_ctx, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 778;
		enterRecursionRule(_localctx, 778, RULE_cte_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6539); common_table_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(6546);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					setState(6541);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6542); match(T__13);
					setState(6543); common_table_expr();
					}
					} 
				}
				setState(6548);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6549); name();
			setState(6550); opt_name_list();
			setState(6551); match(AS);
			setState(6552); match(T__8);
			setState(6553); preparableStmt();
			setState(6554); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_opt_with_clause);
		try {
			setState(6558);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6556); with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_into_clause);
		try {
			setState(6563);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6560); match(INTO);
				setState(6561); optTempTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_optTempTableName);
		try {
			setState(6600);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6565); match(TEMPORARY);
				setState(6566); opt_table();
				setState(6567); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6569); match(TEMP);
				setState(6570); opt_table();
				setState(6571); qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6573); match(LOCAL);
				setState(6574); match(TEMPORARY);
				setState(6575); opt_table();
				setState(6576); qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6578); match(LOCAL);
				setState(6579); match(TEMP);
				setState(6580); opt_table();
				setState(6581); qualified_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6583); match(GLOBAL);
				setState(6584); match(TEMPORARY);
				setState(6585); opt_table();
				setState(6586); qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6588); match(GLOBAL);
				setState(6589); match(TEMP);
				setState(6590); opt_table();
				setState(6591); qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6593); match(UNLOGGED);
				setState(6594); opt_table();
				setState(6595); qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6597); match(TABLE);
				setState(6598); qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6599); qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_opt_table);
		try {
			setState(6604);
			switch (_input.LA(1)) {
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6602); match(TABLE);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public Opt_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_all(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_all(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_all(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_allContext opt_all() throws RecognitionException {
		Opt_allContext _localctx = new Opt_allContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_opt_all);
		try {
			setState(6609);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6606); match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6607); match(DISTINCT);
				}
				break;
			case T__8:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_distinctContext opt_distinct() throws RecognitionException {
		Opt_distinctContext _localctx = new Opt_distinctContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_opt_distinct);
		try {
			setState(6620);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6611); match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6612); match(DISTINCT);
				setState(6613); match(ON);
				setState(6614); match(T__8);
				setState(6615); expr_list(0);
				setState(6616); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6618); match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_opt_sort_clause);
		try {
			setState(6624);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6622); sort_clause();
				}
				break;
			case T__15:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6626); match(ORDER);
			setState(6627); match(BY);
			setState(6628); sortby_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public SortbyContext sortby() {
			return getRuleContext(SortbyContext.class,0);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		return sortby_list(0);
	}

	private Sortby_listContext sortby_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, _parentState);
		Sortby_listContext _prevctx = _localctx;
		int _startState = 798;
		enterRecursionRule(_localctx, 798, RULE_sortby_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6631); sortby();
			}
			_ctx.stop = _input.LT(-1);
			setState(6638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sortby_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_sortby_list);
					setState(6633);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6634); match(T__13);
					setState(6635); sortby();
					}
					} 
				}
				setState(6640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_sortby);
		try {
			setState(6650);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6641); a_expr(0);
				setState(6642); match(USING);
				setState(6643); qual_all_Op();
				setState(6644); opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6646); a_expr(0);
				setState(6647); opt_asc_desc();
				setState(6648); opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_select_limit);
		try {
			setState(6660);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6652); limit_clause();
				setState(6653); offset_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6655); offset_clause();
				setState(6656); limit_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6658); limit_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6659); offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_opt_select_limit);
		try {
			setState(6664);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6662); select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public Opt_select_fetch_first_valueContext opt_select_fetch_first_value() {
			return getRuleContext(Opt_select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_limit_clause);
		try {
			setState(6679);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6666); match(LIMIT);
				setState(6667); select_limit_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6668); match(LIMIT);
				setState(6669); select_limit_value();
				setState(6670); match(T__13);
				setState(6671); select_offset_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6673); match(FETCH);
				setState(6674); first_or_next();
				setState(6675); opt_select_fetch_first_value();
				setState(6676); row_or_rows();
				setState(6677); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SqlParser.OFFSET, 0); }
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Select_offset_value2Context select_offset_value2() {
			return getRuleContext(Select_offset_value2Context.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_offset_clause);
		try {
			setState(6687);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6681); match(OFFSET);
				setState(6682); select_offset_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6683); match(OFFSET);
				setState(6684); select_offset_value2();
				setState(6685); row_or_rows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_select_limit_value);
		try {
			setState(6691);
			switch (_input.LA(1)) {
			case T__12:
			case T__10:
			case T__8:
			case Op:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6689); a_expr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6690); match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6693); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_fetch_first_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_select_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_select_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_select_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_fetch_first_valueContext opt_select_fetch_first_value() throws RecognitionException {
		Opt_select_fetch_first_valueContext _localctx = new Opt_select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_opt_select_fetch_first_value);
		try {
			setState(6701);
			switch (_input.LA(1)) {
			case T__12:
			case T__10:
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(6695); signedIconst();
				}
				break;
			case T__8:
				enterOuterAlt(_localctx, 2);
				{
				setState(6696); match(T__8);
				setState(6697); a_expr(0);
				setState(6698); match(T__15);
				}
				break;
			case ROW:
			case ROWS:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_value2Context extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Select_offset_value2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSelect_offset_value2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSelect_offset_value2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_offset_value2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_value2Context select_offset_value2() throws RecognitionException {
		Select_offset_value2Context _localctx = new Select_offset_value2Context(_ctx, getState());
		enterRule(_localctx, 816, RULE_select_offset_value2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6703); c_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6705);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_group_clause);
		try {
			setState(6713);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6709); match(GROUP_P);
				setState(6710); match(BY);
				setState(6711); expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(SqlParser.HAVING, 0); }
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_having_clause);
		try {
			setState(6718);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6715); match(HAVING);
				setState(6716); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_for_locking_clause);
		try {
			setState(6724);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6720); for_locking_items(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6721); match(FOR);
				setState(6722); match(READ);
				setState(6723); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_opt_for_locking_clause);
		try {
			setState(6728);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6726); for_locking_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public For_locking_itemContext for_locking_item() {
			return getRuleContext(For_locking_itemContext.class,0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 830;
		enterRecursionRule(_localctx, 830, RULE_for_locking_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6731); for_locking_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6737);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					setState(6733);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6734); for_locking_item();
					}
					} 
				}
				setState(6739);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_for_locking_item);
		try {
			setState(6750);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6740); match(FOR);
				setState(6741); match(UPDATE);
				setState(6742); locked_rels_list();
				setState(6743); opt_nowait();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6745); match(FOR);
				setState(6746); match(SHARE);
				setState(6747); locked_rels_list();
				setState(6748); opt_nowait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_locked_rels_list);
		try {
			setState(6755);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6752); match(OF);
				setState(6753); qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 836;
		enterRecursionRule(_localctx, 836, RULE_values_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6758); match(VALUES);
			setState(6759); ctext_row();
			}
			_ctx.stop = _input.LT(-1);
			setState(6766);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					setState(6761);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6762); match(T__13);
					setState(6763); ctext_row();
					}
					} 
				}
				setState(6768);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_from_clause);
		try {
			setState(6772);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6769); match(FROM);
				setState(6770); from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		return from_list(0);
	}

	private From_listContext from_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_listContext _localctx = new From_listContext(_ctx, _parentState);
		From_listContext _prevctx = _localctx;
		int _startState = 840;
		enterRecursionRule(_localctx, 840, RULE_from_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6775); table_ref();
			}
			_ctx.stop = _input.LT(-1);
			setState(6782);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_list);
					setState(6777);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6778); match(T__13);
					setState(6779); table_ref();
					}
					} 
				}
				setState(6784);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_table_ref);
		try {
			setState(6787);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6785); joined_table(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6786); table_ref2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref2Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public Table_ref2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTable_ref2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTable_ref2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_ref2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref2Context table_ref2() throws RecognitionException {
		Table_ref2Context _localctx = new Table_ref2Context(_ctx, getState());
		enterRule(_localctx, 844, RULE_table_ref2);
		try {
			setState(6820);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6789); relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6790); relation_expr();
				setState(6791); alias_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6793); func_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6794); func_table();
				setState(6795); alias_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6797); func_table();
				setState(6798); match(AS);
				setState(6799); match(T__8);
				setState(6800); tableFuncElementList(0);
				setState(6801); match(T__15);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6803); func_table();
				setState(6804); match(AS);
				setState(6805); colId();
				setState(6806); match(T__8);
				setState(6807); tableFuncElementList(0);
				setState(6808); match(T__15);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6810); func_table();
				setState(6811); colId();
				setState(6812); match(T__8);
				setState(6813); tableFuncElementList(0);
				setState(6814); match(T__15);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6816); select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6817); select_with_parens(0);
				setState(6818); alias_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SqlParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SqlParser.NATURAL, 0); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(SqlParser.CROSS, 0); }
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Join_qualContext join_qual() {
			return getRuleContext(Join_qualContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitJoined_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 846;
		enterRecursionRule(_localctx, 846, RULE_joined_table, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6856);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(6823); match(T__8);
				setState(6824); joined_table(0);
				setState(6825); match(T__15);
				setState(6827);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(6826); alias_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(6829); table_ref2();
				setState(6830); match(CROSS);
				setState(6831); match(JOIN);
				setState(6832); table_ref();
				}
				break;
			case 3:
				{
				setState(6834); table_ref2();
				setState(6835); join_type();
				setState(6836); match(JOIN);
				setState(6837); table_ref();
				setState(6838); join_qual();
				}
				break;
			case 4:
				{
				setState(6840); table_ref2();
				setState(6841); match(JOIN);
				setState(6842); table_ref();
				setState(6843); join_qual();
				}
				break;
			case 5:
				{
				setState(6845); table_ref2();
				setState(6846); match(NATURAL);
				setState(6847); join_type();
				setState(6848); match(JOIN);
				setState(6849); table_ref();
				}
				break;
			case 6:
				{
				setState(6851); table_ref2();
				setState(6852); match(NATURAL);
				setState(6853); match(JOIN);
				setState(6854); table_ref();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6885);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6883);
					switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6858);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6859); match(CROSS);
						setState(6860); match(JOIN);
						setState(6861); table_ref();
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6862);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6863); join_type();
						setState(6864); match(JOIN);
						setState(6865); table_ref();
						setState(6866); join_qual();
						}
						break;
					case 3:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6868);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6869); match(JOIN);
						setState(6870); table_ref();
						setState(6871); join_qual();
						}
						break;
					case 4:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6873);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6874); match(NATURAL);
						setState(6875); join_type();
						setState(6876); match(JOIN);
						setState(6877); table_ref();
						}
						break;
					case 5:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6879);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6880); match(NATURAL);
						setState(6881); match(JOIN);
						setState(6882); table_ref();
						}
						break;
					}
					} 
				}
				setState(6887);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_alias_clause);
		try {
			setState(6902);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6888); match(AS);
				setState(6889); colId();
				setState(6890); match(T__8);
				setState(6891); name_list(0);
				setState(6892); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6894); match(AS);
				setState(6895); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6896); colId();
				setState(6897); match(T__8);
				setState(6898); name_list(0);
				setState(6899); match(T__15);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6901); colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode OUTER_P() { return getToken(SqlParser.OUTER_P, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode INNER_P() { return getToken(SqlParser.INNER_P, 0); }
		public TerminalNode LEFT() { return getToken(SqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SqlParser.RIGHT, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_join_type);
		int _la;
		try {
			setState(6917);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6904); match(FULL);
				setState(6906);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(6905); match(OUTER_P);
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6908); match(LEFT);
				setState(6910);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(6909); match(OUTER_P);
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6912); match(RIGHT);
				setState(6914);
				_la = _input.LA(1);
				if (_la==OUTER_P) {
					{
					setState(6913); match(OUTER_P);
					}
				}

				}
				break;
			case INNER_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(6916); match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_join_qual);
		try {
			setState(6926);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6919); match(USING);
				setState(6920); match(T__8);
				setState(6921); name_list(0);
				setState(6922); match(T__15);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6924); match(ON);
				setState(6925); a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_relation_expr);
		try {
			setState(6939);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6928); qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6929); qualified_name();
				setState(6930); match(T__9);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6932); match(ONLY);
				setState(6933); qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6934); match(ONLY);
				setState(6935); match(T__8);
				setState(6936); qualified_name();
				setState(6937); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 856;
		enterRecursionRule(_localctx, 856, RULE_relation_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6942); relation_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(6949);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					setState(6944);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6945); match(T__13);
					setState(6946); relation_expr();
					}
					} 
				}
				setState(6951);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_relation_expr_opt_alias);
		try {
			setState(6960);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6952); relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6953); relation_expr();
				setState(6954); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6956); relation_expr();
				setState(6957); match(AS);
				setState(6958); colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_func_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6962); func_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_where_clause);
		try {
			setState(6967);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6964); match(WHERE);
				setState(6965); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_where_or_current_clause);
		try {
			setState(6976);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6969); match(WHERE);
				setState(6970); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6971); match(WHERE);
				setState(6972); match(CURRENT_P);
				setState(6973); match(OF);
				setState(6974); cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public OpttableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpttableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpttableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpttableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableFuncElementListContext opttableFuncElementList() throws RecognitionException {
		OpttableFuncElementListContext _localctx = new OpttableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_opttableFuncElementList);
		try {
			setState(6980);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6978); tableFuncElementList(0);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		return tableFuncElementList(0);
	}

	private TableFuncElementListContext tableFuncElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, _parentState);
		TableFuncElementListContext _prevctx = _localctx;
		int _startState = 868;
		enterRecursionRule(_localctx, 868, RULE_tableFuncElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6983); tableFuncElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(6990);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableFuncElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableFuncElementList);
					setState(6985);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6986); match(T__13);
					setState(6987); tableFuncElement();
					}
					} 
				}
				setState(6992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_tableFuncElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6993); colId();
			setState(6994); typename();
			setState(6995); opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_typename);
		try {
			setState(7024);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6997); simpletypename();
				setState(6998); opt_array_bounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7000); match(SETOF);
				setState(7001); simpletypename();
				setState(7002); opt_array_bounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7004); simpletypename();
				setState(7005); match(ARRAY);
				setState(7006); match(T__11);
				setState(7007); iConst();
				setState(7008); match(T__18);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7010); match(SETOF);
				setState(7011); simpletypename();
				setState(7012); match(ARRAY);
				setState(7013); match(T__11);
				setState(7014); iConst();
				setState(7015); match(T__18);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7017); simpletypename();
				setState(7018); match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7020); match(SETOF);
				setState(7021); simpletypename();
				setState(7022); match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 874;
		enterRecursionRule(_localctx, 874, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,376,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7035);
					switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7027);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7028); match(T__11);
						setState(7029); match(T__18);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7030);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7031); match(T__11);
						setState(7032); iConst();
						setState(7033); match(T__18);
						}
						break;
					}
					} 
				}
				setState(7039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,376,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpletypenameContext extends ParserRuleContext {
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_simpletypename);
		try {
			setState(7054);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7040); genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7041); numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7042); bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7043); character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7044); constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7045); constInterval();
				setState(7046); opt_interval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7048); constInterval();
				setState(7049); match(T__8);
				setState(7050); iConst();
				setState(7051); match(T__15);
				setState(7052); opt_interval();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsttypenameContext extends ParserRuleContext {
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_consttypename);
		try {
			setState(7060);
			switch (_input.LA(1)) {
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7056); numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7057); constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7058); constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7059); constDatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_genericType);
		try {
			setState(7069);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7062); type_function_name();
				setState(7063); opt_type_modifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7065); type_function_name();
				setState(7066); attrs(0);
				setState(7067); opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_opt_type_modifiers);
		try {
			setState(7076);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7071); match(T__8);
				setState(7072); expr_list(0);
				setState(7073); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode DOUBLE_P() { return getToken(SqlParser.DOUBLE_P, 0); }
		public TerminalNode DEC() { return getToken(SqlParser.DEC, 0); }
		public TerminalNode PRECISION() { return getToken(SqlParser.PRECISION, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(SqlParser.BOOLEAN_P, 0); }
		public TerminalNode FLOAT_P() { return getToken(SqlParser.FLOAT_P, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlParser.NUMERIC, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DECIMAL_P() { return getToken(SqlParser.DECIMAL_P, 0); }
		public TerminalNode INT_P() { return getToken(SqlParser.INT_P, 0); }
		public TerminalNode REAL() { return getToken(SqlParser.REAL, 0); }
		public TerminalNode INTEGER() { return getToken(SqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SqlParser.BIGINT, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlParser.SMALLINT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_numeric);
		try {
			setState(7094);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7078); match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7079); match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7080); match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(7081); match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7082); match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(7083); match(FLOAT_P);
				setState(7084); opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(7085); match(DOUBLE_P);
				setState(7086); match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(7087); match(DECIMAL_P);
				setState(7088); opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(7089); match(DEC);
				setState(7090); opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(7091); match(NUMERIC);
				setState(7092); opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(7093); match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_opt_float);
		try {
			setState(7101);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7096); match(T__8);
				setState(7097); iConst();
				setState(7098); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_bit);
		try {
			setState(7105);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7103); bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7104); bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstbitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_constbit);
		try {
			setState(7109);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7107); bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7108); bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_bitWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7111); match(BIT);
			setState(7112); opt_varying();
			setState(7113); match(T__8);
			setState(7114); expr_list(0);
			setState(7115); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7117); match(BIT);
			setState(7118); opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_character);
		try {
			setState(7122);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7120); characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7121); characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstcharacterContext extends ParserRuleContext {
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_constcharacter);
		try {
			setState(7126);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7124); characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7125); characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Character_defContext character_def() {
			return getRuleContext(Character_defContext.class,0);
		}
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7128); character_def();
			setState(7129); match(T__8);
			setState(7130); iConst();
			setState(7131); match(T__15);
			setState(7132); opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public Character_defContext character_def() {
			return getRuleContext(Character_defContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7134); character_def();
			setState(7135); opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_defContext extends ParserRuleContext {
		public TerminalNode NATIONAL() { return getToken(SqlParser.NATIONAL, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(SqlParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(SqlParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlParser.VARCHAR, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public Character_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCharacter_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCharacter_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacter_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_defContext character_def() throws RecognitionException {
		Character_defContext _localctx = new Character_defContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_character_def);
		try {
			setState(7150);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7137); match(CHARACTER);
				setState(7138); opt_varying();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7139); match(CHAR_P);
				setState(7140); opt_varying();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7141); match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7142); match(NATIONAL);
				setState(7143); match(CHARACTER);
				setState(7144); opt_varying();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7145); match(NATIONAL);
				setState(7146); match(CHAR_P);
				setState(7147); opt_varying();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7148); match(NCHAR);
				setState(7149); opt_varying();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SqlParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_opt_varying);
		try {
			setState(7154);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7152); match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_charsetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public Opt_charsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_charset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_charset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_charset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_charset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_charsetContext opt_charset() throws RecognitionException {
		Opt_charsetContext _localctx = new Opt_charsetContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_opt_charset);
		try {
			setState(7160);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7156); match(CHARACTER);
				setState(7157); match(SET);
				setState(7158); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SqlParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_constDatetime);
		try {
			setState(7178);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7162); match(TIMESTAMP);
				setState(7163); match(T__8);
				setState(7164); iConst();
				setState(7165); match(T__15);
				setState(7166); opt_timezone();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7168); match(TIMESTAMP);
				setState(7169); opt_timezone();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7170); match(TIME);
				setState(7171); match(T__8);
				setState(7172); iConst();
				setState(7173); match(T__15);
				setState(7174); opt_timezone();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7176); match(TIME);
				setState(7177); opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(SqlParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7180); match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode WITH_TIME() { return getToken(SqlParser.WITH_TIME, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_opt_timezone);
		try {
			setState(7188);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7182); match(WITH_TIME);
				setState(7183); match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7184); match(WITHOUT);
				setState(7185); match(TIME);
				setState(7186); match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_interval);
		try {
			setState(7218);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7190); match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7191); match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7192); match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7193); match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7194); match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7195); interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7196); match(YEAR_P);
				setState(7197); match(TO);
				setState(7198); match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7199); match(DAY_P);
				setState(7200); match(TO);
				setState(7201); match(HOUR_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7202); match(DAY_P);
				setState(7203); match(TO);
				setState(7204); match(MINUTE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7205); match(DAY_P);
				setState(7206); match(TO);
				setState(7207); interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7208); match(HOUR_P);
				setState(7209); match(TO);
				setState(7210); match(MINUTE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7211); match(HOUR_P);
				setState(7212); match(TO);
				setState(7213); interval_second();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7214); match(MINUTE_P);
				setState(7215); match(TO);
				setState(7216); interval_second();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_interval_second);
		try {
			setState(7226);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7220); match(SECOND_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7221); match(SECOND_P);
				setState(7222); match(T__8);
				setState(7223); iConst();
				setState(7224); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode TYPECAST() { return getToken(SqlParser.TYPECAST, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlParser.UNKNOWN, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SIMILAR() { return getToken(SqlParser.SIMILAR, 0); }
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode NOTNULL() { return getToken(SqlParser.NOTNULL, 0); }
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_asymmetricContext opt_asymmetric() {
			return getRuleContext(Opt_asymmetricContext.class,0);
		}
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SqlParser.SYMMETRIC, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public TerminalNode ISNULL() { return getToken(SqlParser.ISNULL, 0); }
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OVERLAPS() { return getToken(SqlParser.OVERLAPS, 0); }
		public TerminalNode AT() { return getToken(SqlParser.AT, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		A_exprContext _localctx = new A_exprContext(_ctx, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 920;
		enterRecursionRule(_localctx, 920, RULE_a_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7245);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(7229); match(T__12);
				setState(7230); a_expr(57);
				}
				break;
			case 2:
				{
				setState(7231); match(T__10);
				setState(7232); a_expr(56);
				}
				break;
			case 3:
				{
				setState(7233); qual_Op();
				setState(7234); a_expr(43);
				}
				break;
			case 4:
				{
				setState(7236); match(NOT);
				setState(7237); a_expr(39);
				}
				break;
			case 5:
				{
				setState(7238); c_expr();
				}
				break;
			case 6:
				{
				setState(7239); row();
				setState(7240); match(OVERLAPS);
				setState(7241); row();
				}
				break;
			case 7:
				{
				setState(7243); match(UNIQUE);
				setState(7244); select_with_parens(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7483);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,396,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7481);
					switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7247);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(7248); match(AT);
						setState(7249); match(TIME);
						setState(7250); match(ZONE);
						setState(7251); a_expr(59);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7252);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(7253); match(T__12);
						setState(7254); a_expr(56);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7255);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(7256); match(T__10);
						setState(7257); a_expr(55);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7258);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(7259); match(T__9);
						setState(7260); a_expr(54);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7261);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(7262); match(T__1);
						setState(7263); a_expr(53);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7264);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(7265); match(T__17);
						setState(7266); a_expr(52);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7267);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(7268); match(T__16);
						setState(7269); a_expr(51);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7270);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(7271); match(T__6);
						setState(7272); a_expr(50);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7273);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(7274); match(T__2);
						setState(7275); a_expr(49);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7276);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(7277); match(T__5);
						setState(7278); a_expr(48);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7279);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(7280); match(T__0);
						setState(7281); a_expr(47);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7282);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(7283); match(T__3);
						setState(7284); a_expr(46);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7285);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(7286); qual_Op();
						setState(7287); a_expr(45);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7289);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(7290); match(AND);
						setState(7291); a_expr(42);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7292);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(7293); match(OR);
						setState(7294); a_expr(41);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7295);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(7296); match(LIKE);
						setState(7297); a_expr(39);
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7298);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(7299); match(LIKE);
						setState(7300); a_expr(0);
						setState(7301); match(ESCAPE);
						setState(7302); a_expr(38);
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7304);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(7305); match(NOT);
						setState(7306); match(LIKE);
						setState(7307); a_expr(37);
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7308);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(7309); match(NOT);
						setState(7310); match(LIKE);
						setState(7311); a_expr(0);
						setState(7312); match(ESCAPE);
						setState(7313); a_expr(36);
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7315);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(7316); match(ILIKE);
						setState(7317); a_expr(35);
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7318);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(7319); match(ILIKE);
						setState(7320); a_expr(0);
						setState(7321); match(ESCAPE);
						setState(7322); a_expr(34);
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7324);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(7325); match(NOT);
						setState(7326); match(ILIKE);
						setState(7327); a_expr(33);
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7328);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(7329); match(NOT);
						setState(7330); match(ILIKE);
						setState(7331); a_expr(0);
						setState(7332); match(ESCAPE);
						setState(7333); a_expr(32);
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7335);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(7336); match(SIMILAR);
						setState(7337); match(TO);
						setState(7338); a_expr(31);
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7339);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(7340); match(SIMILAR);
						setState(7341); match(TO);
						setState(7342); a_expr(0);
						setState(7343); match(ESCAPE);
						setState(7344); a_expr(30);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7346);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(7347); match(NOT);
						setState(7348); match(SIMILAR);
						setState(7349); match(TO);
						setState(7350); a_expr(29);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7351);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(7352); match(NOT);
						setState(7353); match(SIMILAR);
						setState(7354); match(TO);
						setState(7355); a_expr(0);
						setState(7356); match(ESCAPE);
						setState(7357); a_expr(28);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7359);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(7360); match(IS);
						setState(7361); match(DISTINCT);
						setState(7362); match(FROM);
						setState(7363); a_expr(16);
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7364);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(7365); match(IS);
						setState(7366); match(NOT);
						setState(7367); match(DISTINCT);
						setState(7368); match(FROM);
						setState(7369); a_expr(15);
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7370);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(7371); match(TYPECAST);
						setState(7372); typename();
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7373);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(7374); match(COLLATE);
						setState(7375); any_name();
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7376);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(7377); qual_Op();
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7378);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(7379); match(IS);
						setState(7380); match(NULL_P);
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7381);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(7382); match(ISNULL);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7383);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(7384); match(IS);
						setState(7385); match(NOT);
						setState(7386); match(NULL_P);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7387);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(7388); match(NOTNULL);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7389);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(7390); match(IS);
						setState(7391); match(TRUE_P);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7392);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(7393); match(IS);
						setState(7394); match(NOT);
						setState(7395); match(TRUE_P);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7396);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(7397); match(IS);
						setState(7398); match(FALSE_P);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7399);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(7400); match(IS);
						setState(7401); match(NOT);
						setState(7402); match(FALSE_P);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7403);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(7404); match(IS);
						setState(7405); match(UNKNOWN);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7406);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(7407); match(IS);
						setState(7408); match(NOT);
						setState(7409); match(UNKNOWN);
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7410);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(7411); match(IS);
						setState(7412); match(OF);
						setState(7413); match(T__8);
						setState(7414); type_list(0);
						setState(7415); match(T__15);
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7417);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7418); match(IS);
						setState(7419); match(NOT);
						setState(7420); match(OF);
						setState(7421); match(T__8);
						setState(7422); type_list(0);
						setState(7423); match(T__15);
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7425);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(7426); match(BETWEEN);
						setState(7427); opt_asymmetric();
						setState(7428); b_expr(0);
						setState(7429); match(AND);
						setState(7430); b_expr(0);
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7432);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7433); match(NOT);
						setState(7434); match(BETWEEN);
						setState(7435); opt_asymmetric();
						setState(7436); b_expr(0);
						setState(7437); match(AND);
						setState(7438); b_expr(0);
						}
						break;
					case 47:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7440);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7441); match(BETWEEN);
						setState(7442); match(SYMMETRIC);
						setState(7443); b_expr(0);
						setState(7444); match(AND);
						setState(7445); b_expr(0);
						}
						break;
					case 48:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7447);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(7448); match(NOT);
						setState(7449); match(BETWEEN);
						setState(7450); match(SYMMETRIC);
						setState(7451); b_expr(0);
						setState(7452); match(AND);
						setState(7453); b_expr(0);
						}
						break;
					case 49:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7455);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7456); match(IN_P);
						setState(7457); in_expr();
						}
						break;
					case 50:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7458);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7459); match(NOT);
						setState(7460); match(IN_P);
						setState(7461); in_expr();
						}
						break;
					case 51:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7462);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7463); subquery_Op();
						setState(7464); sub_type();
						setState(7465); select_with_parens(0);
						}
						break;
					case 52:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7467);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7468); subquery_Op();
						setState(7469); sub_type();
						setState(7470); match(T__8);
						setState(7471); a_expr(0);
						setState(7472); match(T__15);
						}
						break;
					case 53:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7474);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7475); match(IS);
						setState(7476); match(DOCUMENT_P);
						}
						break;
					case 54:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7477);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7478); match(IS);
						setState(7479); match(NOT);
						setState(7480); match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(7485);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,396,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode TYPECAST() { return getToken(SqlParser.TYPECAST, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 922;
		enterRecursionRule(_localctx, 922, RULE_b_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7495);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(7487); match(T__12);
				setState(7488); b_expr(20);
				}
				break;
			case 2:
				{
				setState(7489); match(T__10);
				setState(7490); b_expr(19);
				}
				break;
			case 3:
				{
				setState(7491); qual_Op();
				setState(7492); b_expr(8);
				}
				break;
			case 4:
				{
				setState(7494); c_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7568);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7566);
					switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7497);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(7498); match(T__12);
						setState(7499); b_expr(19);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7500);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(7501); match(T__10);
						setState(7502); b_expr(18);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7503);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(7504); match(T__9);
						setState(7505); b_expr(17);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7506);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(7507); match(T__1);
						setState(7508); b_expr(16);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7509);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(7510); match(T__17);
						setState(7511); b_expr(15);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7512);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(7513); match(T__16);
						setState(7514); b_expr(14);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7515);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7516); match(T__6);
						setState(7517); b_expr(13);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7518);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(7519); match(T__2);
						setState(7520); b_expr(12);
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7521);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7522); match(T__5);
						setState(7523); b_expr(11);
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7524);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7525); qual_Op();
						setState(7526); b_expr(10);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7528);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7529); match(IS);
						setState(7530); match(DISTINCT);
						setState(7531); match(FROM);
						setState(7532); b_expr(7);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7533);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7534); match(IS);
						setState(7535); match(NOT);
						setState(7536); match(DISTINCT);
						setState(7537); match(FROM);
						setState(7538); b_expr(6);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7539);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(7540); match(TYPECAST);
						setState(7541); typename();
						}
						break;
					case 14:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7542);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7543); qual_Op();
						}
						break;
					case 15:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7544);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7545); match(IS);
						setState(7546); match(OF);
						setState(7547); match(T__8);
						setState(7548); type_list(0);
						setState(7549); match(T__15);
						}
						break;
					case 16:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7551);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7552); match(IS);
						setState(7553); match(NOT);
						setState(7554); match(OF);
						setState(7555); match(T__8);
						setState(7556); type_list(0);
						setState(7557); match(T__15);
						}
						break;
					case 17:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7559);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7560); match(IS);
						setState(7561); match(DOCUMENT_P);
						}
						break;
					case 18:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7562);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7563); match(IS);
						setState(7564); match(NOT);
						setState(7565); match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(7570);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(SqlParser.PARAM, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public RowContext row() {
			return getRuleContext(RowContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterC_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitC_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitC_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_c_expr);
		try {
			setState(7590);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7571); columnref();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7572); aexprConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7573); match(PARAM);
				setState(7574); opt_indirection(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7575); match(T__8);
				setState(7576); a_expr(0);
				setState(7577); match(T__15);
				setState(7578); opt_indirection(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7580); case_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7581); func_expr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7582); select_with_parens(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7583); match(EXISTS);
				setState(7584); select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7585); match(ARRAY);
				setState(7586); select_with_parens(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7587); match(ARRAY);
				setState(7588); array_expr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7589); row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public TerminalNode COALESCE() { return getToken(SqlParser.COALESCE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlParser.CURRENT_DATE, 0); }
		public TerminalNode NULLIF() { return getToken(SqlParser.NULLIF, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(SqlParser.TRIM, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlParser.CURRENT_TIME, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode XMLROOT() { return getToken(SqlParser.XMLROOT, 0); }
		public TerminalNode NAME_P() { return getToken(SqlParser.NAME_P, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode LOCALTIME() { return getToken(SqlParser.LOCALTIME, 0); }
		public TerminalNode GREATEST() { return getToken(SqlParser.GREATEST, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(SqlParser.CURRENT_CATALOG, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(SqlParser.XMLPI, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode TRAILING() { return getToken(SqlParser.TRAILING, 0); }
		public TerminalNode LEAST() { return getToken(SqlParser.LEAST, 0); }
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode LOCALTIMESTAMP() { return getToken(SqlParser.LOCALTIMESTAMP, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public TerminalNode CURRENT_ROLE() { return getToken(SqlParser.CURRENT_ROLE, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode XMLFOREST() { return getToken(SqlParser.XMLFOREST, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlParser.SUBSTRING, 0); }
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SqlParser.XMLEXISTS, 0); }
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(SqlParser.BOTH, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode TREAT() { return getToken(SqlParser.TREAT, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(SqlParser.OVERLAY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(SqlParser.XMLSERIALIZE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlParser.EXTRACT, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode XMLCONCAT() { return getToken(SqlParser.XMLCONCAT, 0); }
		public TerminalNode LEADING() { return getToken(SqlParser.LEADING, 0); }
		public TerminalNode XMLPARSE() { return getToken(SqlParser.XMLPARSE, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode XMLELEMENT() { return getToken(SqlParser.XMLELEMENT, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(SqlParser.POSITION, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlParser.SESSION_USER, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_func_expr);
		try {
			setState(7849);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7592); func_name();
				setState(7593); match(T__8);
				setState(7594); match(T__15);
				setState(7595); over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7597); func_name();
				setState(7598); match(T__8);
				setState(7599); func_arg_list(0);
				setState(7600); match(T__15);
				setState(7601); over_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7603); func_name();
				setState(7604); match(T__8);
				setState(7605); match(VARIADIC);
				setState(7606); func_arg_expr();
				setState(7607); match(T__15);
				setState(7608); over_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7610); func_name();
				setState(7611); match(T__8);
				setState(7612); func_arg_list(0);
				setState(7613); match(T__13);
				setState(7614); match(VARIADIC);
				setState(7615); func_arg_expr();
				setState(7616); match(T__15);
				setState(7617); over_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7619); func_name();
				setState(7620); match(T__8);
				setState(7621); func_arg_list(0);
				setState(7622); sort_clause();
				setState(7623); match(T__15);
				setState(7624); over_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7626); func_name();
				setState(7627); match(T__8);
				setState(7628); match(ALL);
				setState(7629); func_arg_list(0);
				setState(7630); opt_sort_clause();
				setState(7631); match(T__15);
				setState(7632); over_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7634); func_name();
				setState(7635); match(T__8);
				setState(7636); match(DISTINCT);
				setState(7637); func_arg_list(0);
				setState(7638); opt_sort_clause();
				setState(7639); match(T__15);
				setState(7640); over_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7642); func_name();
				setState(7643); match(T__8);
				setState(7644); match(T__9);
				setState(7645); match(T__15);
				setState(7646); over_clause();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7648); match(COLLATION);
				setState(7649); match(FOR);
				setState(7650); match(T__8);
				setState(7651); a_expr(0);
				setState(7652); match(T__15);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7654); match(CURRENT_DATE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7655); match(CURRENT_TIME);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7656); match(CURRENT_TIME);
				setState(7657); match(T__8);
				setState(7658); iConst();
				setState(7659); match(T__15);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7661); match(CURRENT_TIMESTAMP);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7662); match(CURRENT_TIMESTAMP);
				setState(7663); match(T__8);
				setState(7664); iConst();
				setState(7665); match(T__15);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7667); match(LOCALTIME);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7668); match(LOCALTIME);
				setState(7669); match(T__8);
				setState(7670); iConst();
				setState(7671); match(T__15);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7673); match(LOCALTIMESTAMP);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7674); match(LOCALTIMESTAMP);
				setState(7675); match(T__8);
				setState(7676); iConst();
				setState(7677); match(T__15);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7679); match(CURRENT_ROLE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7680); match(CURRENT_USER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7681); match(SESSION_USER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7682); match(USER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7683); match(CURRENT_CATALOG);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7684); match(CURRENT_SCHEMA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7685); match(CAST);
				setState(7686); match(T__8);
				setState(7687); a_expr(0);
				setState(7688); match(AS);
				setState(7689); typename();
				setState(7690); match(T__15);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7692); match(EXTRACT);
				setState(7693); match(T__8);
				setState(7694); extract_list();
				setState(7695); match(T__15);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7697); match(OVERLAY);
				setState(7698); match(T__8);
				setState(7699); overlay_list();
				setState(7700); match(T__15);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7702); match(POSITION);
				setState(7703); match(T__8);
				setState(7704); position_list();
				setState(7705); match(T__15);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7707); match(SUBSTRING);
				setState(7708); match(T__8);
				setState(7709); substr_list();
				setState(7710); match(T__15);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7712); match(TREAT);
				setState(7713); match(T__8);
				setState(7714); a_expr(0);
				setState(7715); match(AS);
				setState(7716); typename();
				setState(7717); match(T__15);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(7719); match(TRIM);
				setState(7720); match(T__8);
				setState(7721); match(BOTH);
				setState(7722); trim_list();
				setState(7723); match(T__15);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(7725); match(TRIM);
				setState(7726); match(T__8);
				setState(7727); match(LEADING);
				setState(7728); trim_list();
				setState(7729); match(T__15);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(7731); match(TRIM);
				setState(7732); match(T__8);
				setState(7733); match(TRAILING);
				setState(7734); trim_list();
				setState(7735); match(T__15);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(7737); match(TRIM);
				setState(7738); match(T__8);
				setState(7739); trim_list();
				setState(7740); match(T__15);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(7742); match(NULLIF);
				setState(7743); match(T__8);
				setState(7744); a_expr(0);
				setState(7745); match(T__13);
				setState(7746); a_expr(0);
				setState(7747); match(T__15);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(7749); match(COALESCE);
				setState(7750); match(T__8);
				setState(7751); expr_list(0);
				setState(7752); match(T__15);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(7754); match(GREATEST);
				setState(7755); match(T__8);
				setState(7756); expr_list(0);
				setState(7757); match(T__15);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(7759); match(LEAST);
				setState(7760); match(T__8);
				setState(7761); expr_list(0);
				setState(7762); match(T__15);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(7764); match(XMLCONCAT);
				setState(7765); match(T__8);
				setState(7766); expr_list(0);
				setState(7767); match(T__15);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(7769); match(XMLELEMENT);
				setState(7770); match(T__8);
				setState(7771); match(NAME_P);
				setState(7772); colLabel();
				setState(7773); match(T__15);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(7775); match(XMLELEMENT);
				setState(7776); match(T__8);
				setState(7777); match(NAME_P);
				setState(7778); colLabel();
				setState(7779); match(T__13);
				setState(7780); xml_attributes();
				setState(7781); match(T__15);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(7783); match(XMLELEMENT);
				setState(7784); match(T__8);
				setState(7785); match(NAME_P);
				setState(7786); colLabel();
				setState(7787); match(T__13);
				setState(7788); expr_list(0);
				setState(7789); match(T__15);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(7791); match(XMLELEMENT);
				setState(7792); match(T__8);
				setState(7793); match(NAME_P);
				setState(7794); colLabel();
				setState(7795); match(T__13);
				setState(7796); xml_attributes();
				setState(7797); match(T__13);
				setState(7798); expr_list(0);
				setState(7799); match(T__15);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7801); match(XMLEXISTS);
				setState(7802); match(T__8);
				setState(7803); c_expr();
				setState(7804); xmlexists_argument();
				setState(7805); match(T__15);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7807); match(XMLFOREST);
				setState(7808); match(T__8);
				setState(7809); xml_attribute_list(0);
				setState(7810); match(T__15);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7812); match(XMLPARSE);
				setState(7813); match(T__8);
				setState(7814); document_or_content();
				setState(7815); a_expr(0);
				setState(7816); xml_whitespace_option();
				setState(7817); match(T__15);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7819); match(XMLPI);
				setState(7820); match(T__8);
				setState(7821); match(NAME_P);
				setState(7822); colLabel();
				setState(7823); match(T__15);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7825); match(XMLPI);
				setState(7826); match(T__8);
				setState(7827); match(NAME_P);
				setState(7828); colLabel();
				setState(7829); match(T__13);
				setState(7830); a_expr(0);
				setState(7831); match(T__15);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7833); match(XMLROOT);
				setState(7834); match(T__8);
				setState(7835); a_expr(0);
				setState(7836); match(T__13);
				setState(7837); xml_root_version();
				setState(7838); opt_xml_root_standalone();
				setState(7839); match(T__15);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7841); match(XMLSERIALIZE);
				setState(7842); match(T__8);
				setState(7843); document_or_content();
				setState(7844); a_expr(0);
				setState(7845); match(AS);
				setState(7846); simpletypename();
				setState(7847); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_xml_root_version);
		try {
			setState(7856);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7851); match(VERSION_P);
				setState(7852); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7853); match(VERSION_P);
				setState(7854); match(NO);
				setState(7855); match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public TerminalNode STANDALONE_P() { return getToken(SqlParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(SqlParser.YES_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_opt_xml_root_standalone);
		try {
			setState(7869);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7858); match(T__13);
				setState(7859); match(STANDALONE_P);
				setState(7860); match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7861); match(T__13);
				setState(7862); match(STANDALONE_P);
				setState(7863); match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7864); match(T__13);
				setState(7865); match(STANDALONE_P);
				setState(7866); match(NO);
				setState(7867); match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLATTRIBUTES() { return getToken(SqlParser.XMLATTRIBUTES, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7871); match(XMLATTRIBUTES);
			setState(7872); match(T__8);
			setState(7873); xml_attribute_list(0);
			setState(7874); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attribute_elContext xml_attribute_el() {
			return getRuleContext(Xml_attribute_elContext.class,0);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 934;
		enterRecursionRule(_localctx, 934, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7877); xml_attribute_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(7884);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					setState(7879);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7880); match(T__13);
					setState(7881); xml_attribute_el();
					}
					} 
				}
				setState(7886);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_xml_attribute_el);
		try {
			setState(7892);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7887); a_expr(0);
				setState(7888); match(AS);
				setState(7889); colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7891); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode CONTENT_P() { return getToken(SqlParser.CONTENT_P, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7894);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode WHITESPACE_P() { return getToken(SqlParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(SqlParser.STRIP_P, 0); }
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_xml_whitespace_option);
		try {
			setState(7901);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7896); match(PRESERVE);
				setState(7897); match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7898); match(STRIP_P);
				setState(7899); match(WHITESPACE_P);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public List<TerminalNode> REF() { return getTokens(SqlParser.REF); }
		public TerminalNode BY(int i) {
			return getToken(SqlParser.BY, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(SqlParser.BY); }
		public TerminalNode PASSING() { return getToken(SqlParser.PASSING, 0); }
		public TerminalNode REF(int i) {
			return getToken(SqlParser.REF, i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_xmlexists_argument);
		try {
			setState(7921);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7903); match(PASSING);
				setState(7904); c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7905); match(PASSING);
				setState(7906); c_expr();
				setState(7907); match(BY);
				setState(7908); match(REF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7910); match(PASSING);
				setState(7911); match(BY);
				setState(7912); match(REF);
				setState(7913); c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7914); match(PASSING);
				setState(7915); match(BY);
				setState(7916); match(REF);
				setState(7917); c_expr();
				setState(7918); match(BY);
				setState(7919); match(REF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_window_clause);
		try {
			setState(7926);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7923); match(WINDOW);
				setState(7924); window_definition_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 946;
		enterRecursionRule(_localctx, 946, RULE_window_definition_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7929); window_definition();
			}
			_ctx.stop = _input.LT(-1);
			setState(7936);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					setState(7931);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7932); match(T__13);
					setState(7933); window_definition();
					}
					} 
				}
				setState(7938);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7939); colId();
			setState(7940); match(AS);
			setState(7941); window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode OVER() { return getToken(SqlParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_over_clause);
		try {
			setState(7948);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7943); match(OVER);
				setState(7944); window_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7945); match(OVER);
				setState(7946); colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7950); match(T__8);
			setState(7951); opt_existing_window_name();
			setState(7952); opt_partition_clause();
			setState(7953); opt_sort_clause();
			setState(7954); opt_frame_clause();
			setState(7955); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_opt_existing_window_name);
		try {
			setState(7959);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7957); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode PARTITION() { return getToken(SqlParser.PARTITION, 0); }
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_opt_partition_clause);
		try {
			setState(7965);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7961); match(PARTITION);
				setState(7962); match(BY);
				setState(7963); expr_list(0);
				}
				break;
			case T__15:
			case ORDER:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_opt_frame_clause);
		try {
			setState(7972);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7967); match(RANGE);
				setState(7968); frame_extent();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7969); match(ROWS);
				setState(7970); frame_extent();
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_frame_extent);
		try {
			setState(7980);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7974); frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7975); match(BETWEEN);
				setState(7976); frame_bound();
				setState(7977); match(AND);
				setState(7978); frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlParser.FOLLOWING, 0); }
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_frame_bound);
		try {
			setState(7994);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7982); match(UNBOUNDED);
				setState(7983); match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7984); match(UNBOUNDED);
				setState(7985); match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7986); match(CURRENT_P);
				setState(7987); match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7988); a_expr(0);
				setState(7989); match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7991); a_expr(0);
				setState(7992); match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_row);
		try {
			setState(8010);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7996); match(ROW);
				setState(7997); match(T__8);
				setState(7998); expr_list(0);
				setState(7999); match(T__15);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8001); match(ROW);
				setState(8002); match(T__8);
				setState(8003); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8004); match(T__8);
				setState(8005); expr_list(0);
				setState(8006); match(T__13);
				setState(8007); a_expr(0);
				setState(8008); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(SqlParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(SqlParser.ANY, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8012);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_OpContext extends ParserRuleContext {
		public MathOpContext mathOp() {
			return getRuleContext(MathOpContext.class,0);
		}
		public TerminalNode Op() { return getToken(SqlParser.Op, 0); }
		public All_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAll_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAll_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAll_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_OpContext all_Op() throws RecognitionException {
		All_OpContext _localctx = new All_OpContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_all_Op);
		try {
			setState(8016);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8014); match(Op);
				}
				break;
			case T__17:
			case T__16:
			case T__12:
			case T__10:
			case T__9:
			case T__6:
			case T__5:
			case T__2:
			case T__1:
				enterOuterAlt(_localctx, 2);
				{
				setState(8015); mathOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOpContext extends ParserRuleContext {
		public MathOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterMathOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitMathOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitMathOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOpContext mathOp() throws RecognitionException {
		MathOpContext _localctx = new MathOpContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_mathOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8018);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__16) | (1L << T__12) | (1L << T__10) | (1L << T__9) | (1L << T__6) | (1L << T__5) | (1L << T__2) | (1L << T__1))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_OpContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode Op() { return getToken(SqlParser.Op, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Qual_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterQual_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitQual_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQual_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_OpContext qual_Op() throws RecognitionException {
		Qual_OpContext _localctx = new Qual_OpContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_qual_Op);
		try {
			setState(8026);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8020); match(Op);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8021); match(OPERATOR);
				setState(8022); match(T__8);
				setState(8023); any_operator();
				setState(8024); match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_OpContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Qual_all_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterQual_all_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitQual_all_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQual_all_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_OpContext qual_all_Op() throws RecognitionException {
		Qual_all_OpContext _localctx = new Qual_all_OpContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_qual_all_Op);
		try {
			setState(8034);
			switch (_input.LA(1)) {
			case T__17:
			case T__16:
			case T__12:
			case T__10:
			case T__9:
			case T__6:
			case T__5:
			case T__2:
			case T__1:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8028); all_Op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8029); match(OPERATOR);
				setState(8030); match(T__8);
				setState(8031); any_operator();
				setState(8032); match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_subquery_Op);
		try {
			setState(8048);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8036); all_Op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8037); match(OPERATOR);
				setState(8038); match(T__8);
				setState(8039); any_operator();
				setState(8040); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8042); match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8043); match(NOT);
				setState(8044); match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8045); match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8046); match(NOT);
				setState(8047); match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr_listContext _localctx = new Expr_listContext(_ctx, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 978;
		enterRecursionRule(_localctx, 978, RULE_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8051); a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8058);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					setState(8053);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8054); match(T__13);
					setState(8055); a_expr(0);
					}
					} 
				}
				setState(8060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 980;
		enterRecursionRule(_localctx, 980, RULE_func_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8062); func_arg_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8069);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,422,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					setState(8064);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8065); match(T__13);
					setState(8066); func_arg_expr();
					}
					} 
				}
				setState(8071);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,422,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(SqlParser.COLON_EQUALS, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_func_arg_expr);
		try {
			setState(8077);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8072); a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8073); param_name();
				setState(8074); match(COLON_EQUALS);
				setState(8075); a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_listContext _localctx = new Type_listContext(_ctx, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 984;
		enterRecursionRule(_localctx, 984, RULE_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8080); typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(8087);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_list);
					setState(8082);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8083); match(T__13);
					setState(8084); typename();
					}
					} 
				}
				setState(8089);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_array_expr);
		try {
			setState(8100);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8090); match(T__11);
				setState(8091); expr_list(0);
				setState(8092); match(T__18);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8094); match(T__11);
				setState(8095); array_expr_list(0);
				setState(8096); match(T__18);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8098); match(T__11);
				setState(8099); match(T__18);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 988;
		enterRecursionRule(_localctx, 988, RULE_array_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8103); array_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8110);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					setState(8105);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8106); match(T__13);
					setState(8107); array_expr();
					}
					} 
				}
				setState(8112);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_extract_list);
		try {
			setState(8118);
			switch (_input.LA(1)) {
			case DAY_P:
			case HOUR_P:
			case MINUTE_P:
			case MONTH_P:
			case SECOND_P:
			case YEAR_P:
			case IDENT:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8113); extract_arg();
				setState(8114); match(FROM);
				setState(8115); a_expr(0);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_extract_arg);
		try {
			setState(8128);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8120); match(IDENT);
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8121); match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(8122); match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(8123); match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(8124); match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8125); match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8126); match(SECOND_P);
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 8);
				{
				setState(8127); sConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext overlay_placing() {
			return getRuleContext(Overlay_placingContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_overlay_list);
		try {
			setState(8139);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8130); a_expr(0);
				setState(8131); overlay_placing();
				setState(8132); substr_from();
				setState(8133); substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8135); a_expr(0);
				setState(8136); overlay_placing();
				setState(8137); substr_from();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_placingContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode PLACING() { return getToken(SqlParser.PLACING, 0); }
		public Overlay_placingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_placing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOverlay_placing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOverlay_placing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOverlay_placing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_placingContext overlay_placing() throws RecognitionException {
		Overlay_placingContext _localctx = new Overlay_placingContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_overlay_placing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8141); match(PLACING);
			setState(8142); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_position_list);
		try {
			setState(8149);
			switch (_input.LA(1)) {
			case T__12:
			case T__10:
			case T__8:
			case Op:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8144); b_expr(0);
				setState(8145); match(IN_P);
				setState(8146); b_expr(0);
				}
				break;
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_substr_list);
		try {
			setState(8167);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8151); a_expr(0);
				setState(8152); substr_from();
				setState(8153); substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8155); a_expr(0);
				setState(8156); substr_for();
				setState(8157); substr_from();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8159); a_expr(0);
				setState(8160); substr_from();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8162); a_expr(0);
				setState(8163); substr_for();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8165); expr_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_fromContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Substr_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSubstr_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSubstr_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_fromContext substr_from() throws RecognitionException {
		Substr_fromContext _localctx = new Substr_fromContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_substr_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8169); match(FROM);
			setState(8170); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_forContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Substr_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSubstr_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSubstr_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_forContext substr_for() throws RecognitionException {
		Substr_forContext _localctx = new Substr_forContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_substr_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8172); match(FOR);
			setState(8173); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_trim_list);
		try {
			setState(8182);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8175); a_expr(0);
				setState(8176); match(FROM);
				setState(8177); expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8179); match(FROM);
				setState(8180); expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8181); expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIn_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIn_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIn_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_in_expr);
		try {
			setState(8189);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8184); select_with_parens(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8185); match(T__8);
				setState(8186); expr_list(0);
				setState(8187); match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public TerminalNode CASE() { return getToken(SqlParser.CASE, 0); }
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8191); match(CASE);
			setState(8192); case_arg();
			setState(8193); when_clause_list(0);
			setState(8194); case_default();
			setState(8195); match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public When_clauseContext when_clause() {
			return getRuleContext(When_clauseContext.class,0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1012;
		enterRecursionRule(_localctx, 1012, RULE_when_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8198); when_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8204);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					setState(8200);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8201); when_clause();
					}
					} 
				}
				setState(8206);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(SqlParser.THEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8207); match(WHEN);
			setState(8208); a_expr(0);
			setState(8209); match(THEN);
			setState(8210); a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(SqlParser.ELSE, 0); }
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_case_default);
		try {
			setState(8215);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8212); match(ELSE);
				setState(8213); a_expr(0);
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_case_arg);
		try {
			setState(8219);
			switch (_input.LA(1)) {
			case T__12:
			case T__10:
			case T__8:
			case Op:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8217); a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_columnref);
		try {
			setState(8225);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8221); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8222); colId();
				setState(8223); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_indirection_el);
		try {
			setState(8241);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8227); match(T__14);
				setState(8228); attr_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8229); match(T__14);
				setState(8230); match(T__9);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8231); match(T__11);
				setState(8232); a_expr(0);
				setState(8233); match(T__18);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8235); match(T__11);
				setState(8236); a_expr(0);
				setState(8237); match(T__7);
				setState(8238); a_expr(0);
				setState(8239); match(T__18);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1024;
		enterRecursionRule(_localctx, 1024, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8244); indirection_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8250);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(8246);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8247); indirection_el();
					}
					} 
				}
				setState(8252);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1026;
		enterRecursionRule(_localctx, 1026, RULE_opt_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8258);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					setState(8254);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8255); indirection_el();
					}
					} 
				}
				setState(8260);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_asymmetricContext extends ParserRuleContext {
		public TerminalNode ASYMMETRIC() { return getToken(SqlParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asymmetric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterOpt_asymmetric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitOpt_asymmetric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_asymmetric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asymmetricContext opt_asymmetric() throws RecognitionException {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_opt_asymmetric);
		try {
			setState(8263);
			switch (_input.LA(1)) {
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(8261); match(ASYMMETRIC);
				}
				break;
			case T__12:
			case T__10:
			case T__8:
			case Op:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
			case PARAM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_exprContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Ctext_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCtext_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCtext_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_exprContext ctext_expr() throws RecognitionException {
		Ctext_exprContext _localctx = new Ctext_exprContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_ctext_expr);
		try {
			setState(8267);
			switch (_input.LA(1)) {
			case T__12:
			case T__10:
			case T__8:
			case Op:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case ICONST:
			case FCONST:
			case BCONST:
			case XCONST:
			case SCONST:
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8265); a_expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8266); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_expr_listContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Ctext_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCtext_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCtext_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_expr_listContext ctext_expr_list() throws RecognitionException {
		return ctext_expr_list(0);
	}

	private Ctext_expr_listContext ctext_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Ctext_expr_listContext _localctx = new Ctext_expr_listContext(_ctx, _parentState);
		Ctext_expr_listContext _prevctx = _localctx;
		int _startState = 1032;
		enterRecursionRule(_localctx, 1032, RULE_ctext_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8270); ctext_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8277);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Ctext_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ctext_expr_list);
					setState(8272);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8273); match(T__13);
					setState(8274); ctext_expr();
					}
					} 
				}
				setState(8279);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Ctext_rowContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCtext_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCtext_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_rowContext ctext_row() throws RecognitionException {
		Ctext_rowContext _localctx = new Ctext_rowContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_ctext_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8280); match(T__8);
			setState(8281); ctext_expr_list(0);
			setState(8282); match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public Target_elContext target_el() {
			return getRuleContext(Target_elContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		return target_list(0);
	}

	private Target_listContext target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Target_listContext _localctx = new Target_listContext(_ctx, _parentState);
		Target_listContext _prevctx = _localctx;
		int _startState = 1036;
		enterRecursionRule(_localctx, 1036, RULE_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8285); target_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8292);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_target_list);
					setState(8287);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8288); match(T__13);
					setState(8289); target_el();
					}
					} 
				}
				setState(8294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterTarget_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitTarget_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTarget_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_target_el);
		try {
			setState(8304);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8295); a_expr(0);
				setState(8296); match(AS);
				setState(8297); colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8299); a_expr(0);
				setState(8300); match(IDENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8302); a_expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8303); match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1040;
		enterRecursionRule(_localctx, 1040, RULE_qualified_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8307); qualified_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8314);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					setState(8309);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8310); match(T__13);
					setState(8311); qualified_name();
					}
					} 
				}
				setState(8316);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_qualified_name);
		try {
			setState(8321);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8317); colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8318); colId();
				setState(8319); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1044;
		enterRecursionRule(_localctx, 1044, RULE_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8324); name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(8326);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8327); match(T__13);
					setState(8328); name();
					}
					} 
				}
				setState(8333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8334); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterDatabase_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitDatabase_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDatabase_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_nameContext database_name() throws RecognitionException {
		Database_nameContext _localctx = new Database_nameContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_database_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8336); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_methodContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Access_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAccess_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAccess_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAccess_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_methodContext access_method() throws RecognitionException {
		Access_methodContext _localctx = new Access_methodContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_access_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8338); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8340); colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8342); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8344); sConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_func_name);
		try {
			setState(8350);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8346); type_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8347); colId();
				setState(8348); indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode XCONST() { return getToken(SqlParser.XCONST, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public TerminalNode BCONST() { return getToken(SqlParser.BCONST, 0); }
		public SConstContext sConst() {
			return getRuleContext(SConstContext.class,0);
		}
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_aexprConst);
		try {
			setState(8383);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8352); iConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8353); match(FCONST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8354); sConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8355); match(BCONST);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8356); match(XCONST);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8357); func_name();
				setState(8358); sConst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8360); func_name();
				setState(8361); match(T__8);
				setState(8362); func_arg_list(0);
				setState(8363); match(T__15);
				setState(8364); sConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8366); consttypename();
				setState(8367); sConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8369); constInterval();
				setState(8370); sConst();
				setState(8371); opt_interval();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8373); constInterval();
				setState(8374); match(T__8);
				setState(8375); iConst();
				setState(8376); match(T__15);
				setState(8377); sConst();
				setState(8378); opt_interval();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8380); match(TRUE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8381); match(FALSE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8382); match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IConstContext extends ParserRuleContext {
		public TerminalNode ICONST() { return getToken(SqlParser.ICONST, 0); }
		public IConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterIConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitIConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IConstContext iConst() throws RecognitionException {
		IConstContext _localctx = new IConstContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_iConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8385); match(ICONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SConstContext extends ParserRuleContext {
		public TerminalNode SCONST() { return getToken(SqlParser.SCONST, 0); }
		public SConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SConstContext sConst() throws RecognitionException {
		SConstContext _localctx = new SConstContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_sConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8387); match(SCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public RoleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterRoleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitRoleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRoleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdContext roleId() throws RecognitionException {
		RoleIdContext _localctx = new RoleIdContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_roleId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8389); colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public IConstContext iConst() {
			return getRuleContext(IConstContext.class,0);
		}
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_signedIconst);
		try {
			setState(8396);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8391); iConst();
				}
				break;
			case T__12:
				enterOuterAlt(_localctx, 2);
				{
				setState(8392); match(T__12);
				setState(8393); iConst();
				}
				break;
			case T__10:
				enterOuterAlt(_localctx, 3);
				{
				setState(8394); match(T__10);
				setState(8395); iConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_colId);
		try {
			setState(8401);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8398); match(IDENT);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8399); unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8400); col_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_type_function_name);
		try {
			setState(8406);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8403); match(IDENT);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404); unreserved_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8405); type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_colLabel);
		try {
			setState(8413);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8408); match(IDENT);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case DECLARE:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8409); unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8410); col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8411); type_func_name_keyword();
				}
				break;
			case INTO:
			case FROM:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END_P:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
				enterOuterAlt(_localctx, 5);
				{
				setState(8412); reserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode RECHECK() { return getToken(SqlParser.RECHECK, 0); }
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode ENUM_P() { return getToken(SqlParser.ENUM_P, 0); }
		public TerminalNode RENAME() { return getToken(SqlParser.RENAME, 0); }
		public TerminalNode STRICT_P() { return getToken(SqlParser.STRICT_P, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public TerminalNode INDEXES() { return getToken(SqlParser.INDEXES, 0); }
		public TerminalNode NAMES() { return getToken(SqlParser.NAMES, 0); }
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public TerminalNode TRUSTED() { return getToken(SqlParser.TRUSTED, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(SqlParser.CONTENT_P, 0); }
		public TerminalNode FORWARD() { return getToken(SqlParser.FORWARD, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SqlParser.CHARACTERISTICS, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode PASSING() { return getToken(SqlParser.PASSING, 0); }
		public TerminalNode YES_P() { return getToken(SqlParser.YES_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(SqlParser.CONTINUE_P, 0); }
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(SqlParser.UNENCRYPTED, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode HOLD() { return getToken(SqlParser.HOLD, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode ACCESS() { return getToken(SqlParser.ACCESS, 0); }
		public TerminalNode TYPES_P() { return getToken(SqlParser.TYPES_P, 0); }
		public TerminalNode DEFAULTS() { return getToken(SqlParser.DEFAULTS, 0); }
		public TerminalNode NOTIFY() { return getToken(SqlParser.NOTIFY, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public TerminalNode SIMPLE() { return getToken(SqlParser.SIMPLE, 0); }
		public TerminalNode CALLED() { return getToken(SqlParser.CALLED, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SqlParser.IMMUTABLE, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(SqlParser.INSENSITIVE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SqlParser.SERIALIZABLE, 0); }
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TerminalNode STDIN() { return getToken(SqlParser.STDIN, 0); }
		public TerminalNode REASSIGN() { return getToken(SqlParser.REASSIGN, 0); }
		public TerminalNode NOTHING() { return getToken(SqlParser.NOTHING, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SqlParser.PROCEDURAL, 0); }
		public TerminalNode DISABLE_P() { return getToken(SqlParser.DISABLE_P, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlParser.INCREMENT, 0); }
		public TerminalNode QUOTE() { return getToken(SqlParser.QUOTE, 0); }
		public TerminalNode LC_COLLATE_P() { return getToken(SqlParser.LC_COLLATE_P, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode REINDEX() { return getToken(SqlParser.REINDEX, 0); }
		public TerminalNode REPLICA() { return getToken(SqlParser.REPLICA, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public TerminalNode RELATIVE_P() { return getToken(SqlParser.RELATIVE_P, 0); }
		public TerminalNode LOAD() { return getToken(SqlParser.LOAD, 0); }
		public TerminalNode CSV() { return getToken(SqlParser.CSV, 0); }
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public TerminalNode COMMITTED() { return getToken(SqlParser.COMMITTED, 0); }
		public TerminalNode NAME_P() { return getToken(SqlParser.NAME_P, 0); }
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode STATEMENT() { return getToken(SqlParser.STATEMENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlParser.EXCLUDE, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public TerminalNode MODE() { return getToken(SqlParser.MODE, 0); }
		public TerminalNode COMMENTS() { return getToken(SqlParser.COMMENTS, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlParser.STATISTICS, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SqlParser.CHECKPOINT, 0); }
		public TerminalNode PREPARED() { return getToken(SqlParser.PREPARED, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SqlParser.PROCEDURE, 0); }
		public TerminalNode UNLISTEN() { return getToken(SqlParser.UNLISTEN, 0); }
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(SqlParser.LC_CTYPE_P, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SqlParser.EXCLUSIVE, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode WORK() { return getToken(SqlParser.WORK, 0); }
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public TerminalNode STABLE() { return getToken(SqlParser.STABLE, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode UNTIL() { return getToken(SqlParser.UNTIL, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode COPY() { return getToken(SqlParser.COPY, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode HEADER_P() { return getToken(SqlParser.HEADER_P, 0); }
		public TerminalNode PASSWORD() { return getToken(SqlParser.PASSWORD, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode MATCH() { return getToken(SqlParser.MATCH, 0); }
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public TerminalNode CASCADED() { return getToken(SqlParser.CASCADED, 0); }
		public TerminalNode BACKWARD() { return getToken(SqlParser.BACKWARD, 0); }
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode SYSID() { return getToken(SqlParser.SYSID, 0); }
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public TerminalNode LABEL() { return getToken(SqlParser.LABEL, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode ABORT_P() { return getToken(SqlParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(SqlParser.ABSOLUTE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public TerminalNode VARYING() { return getToken(SqlParser.VARYING, 0); }
		public TerminalNode RELEASE() { return getToken(SqlParser.RELEASE, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlParser.ROLLBACK, 0); }
		public TerminalNode COST() { return getToken(SqlParser.COST, 0); }
		public TerminalNode PARTITION() { return getToken(SqlParser.PARTITION, 0); }
		public TerminalNode LAST_P() { return getToken(SqlParser.LAST_P, 0); }
		public TerminalNode LOCK_P() { return getToken(SqlParser.LOCK_P, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public TerminalNode INVOKER() { return getToken(SqlParser.INVOKER, 0); }
		public TerminalNode NULLS_P() { return getToken(SqlParser.NULLS_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SqlParser.ENCRYPTED, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SqlParser.DEALLOCATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode INCLUDING() { return getToken(SqlParser.INCLUDING, 0); }
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode BEGIN_P() { return getToken(SqlParser.BEGIN_P, 0); }
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public TerminalNode CLOSE() { return getToken(SqlParser.CLOSE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlParser.FOLLOWING, 0); }
		public TerminalNode EXCLUDING() { return getToken(SqlParser.EXCLUDING, 0); }
		public TerminalNode CACHE() { return getToken(SqlParser.CACHE, 0); }
		public TerminalNode MOVE() { return getToken(SqlParser.MOVE, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlParser.EXPLAIN, 0); }
		public TerminalNode NOWAIT() { return getToken(SqlParser.NOWAIT, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlParser.PRECEDING, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public TerminalNode VOLATILE() { return getToken(SqlParser.VOLATILE, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public TerminalNode REF() { return getToken(SqlParser.REF, 0); }
		public TerminalNode IDENTITY_P() { return getToken(SqlParser.IDENTITY_P, 0); }
		public TerminalNode STDOUT() { return getToken(SqlParser.STDOUT, 0); }
		public TerminalNode CURSOR() { return getToken(SqlParser.CURSOR, 0); }
		public TerminalNode ENABLE_P() { return getToken(SqlParser.ENABLE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(SqlParser.DELIMITER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlParser.ALWAYS, 0); }
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(SqlParser.WHITESPACE_P, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode SCROLL() { return getToken(SqlParser.SCROLL, 0); }
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SqlParser.SAVEPOINT, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public TerminalNode DECLARE() { return getToken(SqlParser.DECLARE, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode DOUBLE_P() { return getToken(SqlParser.DOUBLE_P, 0); }
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(SqlParser.ASSIGNMENT, 0); }
		public TerminalNode GRANTED() { return getToken(SqlParser.GRANTED, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SqlParser.LEAKPROOF, 0); }
		public TerminalNode RECURSIVE() { return getToken(SqlParser.RECURSIVE, 0); }
		public TerminalNode CYCLE() { return getToken(SqlParser.CYCLE, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SqlParser.SNAPSHOT, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode PRIOR() { return getToken(SqlParser.PRIOR, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode AT() { return getToken(SqlParser.AT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public TerminalNode XML_P() { return getToken(SqlParser.XML_P, 0); }
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlParser.EXTERNAL, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode INLINE_P() { return getToken(SqlParser.INLINE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(SqlParser.MINVALUE, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public TerminalNode WRITE() { return getToken(SqlParser.WRITE, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode PLANS() { return getToken(SqlParser.PLANS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode STRIP_P() { return getToken(SqlParser.STRIP_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public TerminalNode INHERITS() { return getToken(SqlParser.INHERITS, 0); }
		public TerminalNode PARTIAL() { return getToken(SqlParser.PARTIAL, 0); }
		public TerminalNode SHOW() { return getToken(SqlParser.SHOW, 0); }
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlParser.UNKNOWN, 0); }
		public TerminalNode ALSO() { return getToken(SqlParser.ALSO, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode COMMENT() { return getToken(SqlParser.COMMENT, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public TerminalNode LISTEN() { return getToken(SqlParser.LISTEN, 0); }
		public TerminalNode SYSTEM_P() { return getToken(SqlParser.SYSTEM_P, 0); }
		public TerminalNode DEFINER() { return getToken(SqlParser.DEFINER, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public TerminalNode DELIMITERS() { return getToken(SqlParser.DELIMITERS, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SqlParser.UNCOMMITTED, 0); }
		public TerminalNode VACUUM() { return getToken(SqlParser.VACUUM, 0); }
		public TerminalNode STANDALONE_P() { return getToken(SqlParser.STANDALONE_P, 0); }
		public TerminalNode MAXVALUE() { return getToken(SqlParser.MAXVALUE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode DISCARD() { return getToken(SqlParser.DISCARD, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlParser.REPEATABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode OFF() { return getToken(SqlParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode CATALOG_P() { return getToken(SqlParser.CATALOG_P, 0); }
		public TerminalNode ACTION() { return getToken(SqlParser.ACTION, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlParser.UNBOUNDED, 0); }
		public TerminalNode CHAIN() { return getToken(SqlParser.CHAIN, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(SqlParser.IMPLICIT_P, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public TerminalNode INPUT_P() { return getToken(SqlParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8415);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT_P) | (1L << ABSOLUTE_P) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD_P) | (1L << ADMIN) | (1L << AFTER) | (1L << DECLARE) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN_P) | (1L << BY) | (1L << CACHE) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CATALOG_P - 65)) | (1L << (CHAIN - 65)) | (1L << (CHARACTERISTICS - 65)) | (1L << (CHECKPOINT - 65)) | (1L << (CLASS - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMENTS - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (CONFIGURATION - 65)) | (1L << (CONNECTION - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONTENT_P - 65)) | (1L << (CONTINUE_P - 65)) | (1L << (CONVERSION_P - 65)) | (1L << (COPY - 65)) | (1L << (COST - 65)) | (1L << (CSV - 65)) | (1L << (CURRENT_P - 65)) | (1L << (CURSOR - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA_P - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY_P - 65)) | (1L << (DEALLOCATE - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DELETE_P - 65)) | (1L << (DELIMITER - 65)) | (1L << (DELIMITERS - 65)) | (1L << (DICTIONARY - 65)) | (1L << (DISABLE_P - 65)) | (1L << (DISCARD - 65)) | (1L << (DOCUMENT_P - 65)) | (1L << (DOMAIN_P - 65)) | (1L << (DOUBLE_P - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DROP - 129)) | (1L << (EACH - 129)) | (1L << (ENABLE_P - 129)) | (1L << (ENCODING - 129)) | (1L << (ENCRYPTED - 129)) | (1L << (ENUM_P - 129)) | (1L << (ESCAPE - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXCLUDING - 129)) | (1L << (EXCLUSIVE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTENSION - 129)) | (1L << (EXTERNAL - 129)) | (1L << (FAMILY - 129)) | (1L << (FIRST_P - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FORCE - 129)) | (1L << (FORWARD - 129)) | (1L << (FUNCTION - 129)) | (1L << (FUNCTIONS - 129)) | (1L << (GLOBAL - 129)) | (1L << (GRANTED - 129)) | (1L << (HANDLER - 129)) | (1L << (HEADER_P - 129)) | (1L << (HOLD - 129)) | (1L << (HOUR_P - 129)) | (1L << (IDENTITY_P - 129)) | (1L << (IF_P - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (IMMUTABLE - 129)) | (1L << (IMPLICIT_P - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDEX - 129)) | (1L << (INDEXES - 129)) | (1L << (INHERIT - 129)) | (1L << (INHERITS - 129)) | (1L << (INLINE_P - 129)) | (1L << (INPUT_P - 129)) | (1L << (INSENSITIVE - 129)) | (1L << (INSERT - 129)) | (1L << (INSTEAD - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INVOKER - 197)) | (1L << (ISOLATION - 197)) | (1L << (KEY - 197)) | (1L << (LABEL - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LARGE_P - 197)) | (1L << (LAST_P - 197)) | (1L << (LC_COLLATE_P - 197)) | (1L << (LC_CTYPE_P - 197)) | (1L << (LEAKPROOF - 197)) | (1L << (LEVEL - 197)) | (1L << (LISTEN - 197)) | (1L << (LOAD - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCATION - 197)) | (1L << (LOCK_P - 197)) | (1L << (MAPPING - 197)) | (1L << (MATCH - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MINUTE_P - 197)) | (1L << (MINVALUE - 197)) | (1L << (MODE - 197)) | (1L << (MONTH_P - 197)) | (1L << (MOVE - 197)) | (1L << (NAME_P - 197)) | (1L << (NAMES - 197)) | (1L << (NEXT - 197)) | (1L << (NO - 197)) | (1L << (NOTHING - 197)) | (1L << (NOTIFY - 197)) | (1L << (NOWAIT - 197)) | (1L << (NULLS_P - 197)) | (1L << (OBJECT_P - 197)) | (1L << (OF - 197)) | (1L << (OFF - 197)) | (1L << (OIDS - 197)) | (1L << (OPERATOR - 197)) | (1L << (OPTION - 197)) | (1L << (OPTIONS - 197)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (OWNED - 265)) | (1L << (OWNER - 265)) | (1L << (PARSER - 265)) | (1L << (PARTIAL - 265)) | (1L << (PARTITION - 265)) | (1L << (PASSING - 265)) | (1L << (PASSWORD - 265)) | (1L << (PLANS - 265)) | (1L << (PRECEDING - 265)) | (1L << (PREPARE - 265)) | (1L << (PREPARED - 265)) | (1L << (PRESERVE - 265)) | (1L << (PRIOR - 265)) | (1L << (PRIVILEGES - 265)) | (1L << (PROCEDURAL - 265)) | (1L << (PROCEDURE - 265)) | (1L << (QUOTE - 265)) | (1L << (RANGE - 265)) | (1L << (READ - 265)) | (1L << (REASSIGN - 265)) | (1L << (RECHECK - 265)) | (1L << (RECURSIVE - 265)) | (1L << (REF - 265)) | (1L << (REINDEX - 265)) | (1L << (RELATIVE_P - 265)) | (1L << (RELEASE - 265)) | (1L << (RENAME - 265)) | (1L << (REPEATABLE - 265)) | (1L << (REPLACE - 265)) | (1L << (REPLICA - 265)) | (1L << (RESET - 265)) | (1L << (RESTART - 265)) | (1L << (RESTRICT - 265)) | (1L << (RETURNS - 265)) | (1L << (REVOKE - 265)) | (1L << (ROLE - 265)) | (1L << (ROLLBACK - 265)) | (1L << (ROWS - 265)) | (1L << (RULE - 265)) | (1L << (SAVEPOINT - 265)) | (1L << (SCHEMA - 265)) | (1L << (SCROLL - 265)) | (1L << (SEARCH - 265)) | (1L << (SECOND_P - 265)) | (1L << (SECURITY - 265)) | (1L << (SEQUENCE - 265)) | (1L << (SEQUENCES - 265)) | (1L << (SERIALIZABLE - 265)) | (1L << (SERVER - 265)) | (1L << (SESSION - 265)) | (1L << (SET - 265)) | (1L << (SHARE - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (SHOW - 329)) | (1L << (SIMPLE - 329)) | (1L << (SNAPSHOT - 329)) | (1L << (STABLE - 329)) | (1L << (STANDALONE_P - 329)) | (1L << (START - 329)) | (1L << (STATEMENT - 329)) | (1L << (STATISTICS - 329)) | (1L << (STDIN - 329)) | (1L << (STDOUT - 329)) | (1L << (STORAGE - 329)) | (1L << (STRICT_P - 329)) | (1L << (STRIP_P - 329)) | (1L << (SYSID - 329)) | (1L << (SYSTEM_P - 329)) | (1L << (TABLES - 329)) | (1L << (TABLESPACE - 329)) | (1L << (TEMP - 329)) | (1L << (TEMPLATE - 329)) | (1L << (TEMPORARY - 329)) | (1L << (TEXT_P - 329)) | (1L << (TRANSACTION - 329)) | (1L << (TRIGGER - 329)) | (1L << (TRUNCATE - 329)) | (1L << (TRUSTED - 329)) | (1L << (TYPE_P - 329)) | (1L << (TYPES_P - 329)) | (1L << (UNBOUNDED - 329)) | (1L << (UNCOMMITTED - 329)) | (1L << (UNENCRYPTED - 329)) | (1L << (UNKNOWN - 329)) | (1L << (UNLISTEN - 329)) | (1L << (UNLOGGED - 329)) | (1L << (UNTIL - 329)) | (1L << (UPDATE - 329)) | (1L << (VACUUM - 329)) | (1L << (VALID - 329)) | (1L << (VALIDATE - 329)) | (1L << (VALIDATOR - 329)) | (1L << (VALUE_P - 329)) | (1L << (VARYING - 329)) | (1L << (VERSION_P - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (VIEW - 393)) | (1L << (VOLATILE - 393)) | (1L << (WHITESPACE_P - 393)) | (1L << (WITHOUT - 393)) | (1L << (WORK - 393)) | (1L << (WRAPPER - 393)) | (1L << (WRITE - 393)) | (1L << (XML_P - 393)) | (1L << (YEAR_P - 393)) | (1L << (YES_P - 393)) | (1L << (ZONE - 393)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SqlParser.TIMESTAMP, 0); }
		public TerminalNode COALESCE() { return getToken(SqlParser.COALESCE, 0); }
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode NULLIF() { return getToken(SqlParser.NULLIF, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode CHAR_P() { return getToken(SqlParser.CHAR_P, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SqlParser.XMLEXISTS, 0); }
		public TerminalNode TRIM() { return getToken(SqlParser.TRIM, 0); }
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public TerminalNode DEC() { return getToken(SqlParser.DEC, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public TerminalNode XMLROOT() { return getToken(SqlParser.XMLROOT, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode TREAT() { return getToken(SqlParser.TREAT, 0); }
		public TerminalNode DECIMAL_P() { return getToken(SqlParser.DECIMAL_P, 0); }
		public TerminalNode INT_P() { return getToken(SqlParser.INT_P, 0); }
		public TerminalNode REAL() { return getToken(SqlParser.REAL, 0); }
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public TerminalNode GREATEST() { return getToken(SqlParser.GREATEST, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlParser.INTERVAL, 0); }
		public TerminalNode BIGINT() { return getToken(SqlParser.BIGINT, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlParser.SMALLINT, 0); }
		public TerminalNode XMLPI() { return getToken(SqlParser.XMLPI, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlParser.OVERLAY, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(SqlParser.XMLSERIALIZE, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlParser.EXTRACT, 0); }
		public TerminalNode LEAST() { return getToken(SqlParser.LEAST, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlParser.VARCHAR, 0); }
		public TerminalNode XMLCONCAT() { return getToken(SqlParser.XMLCONCAT, 0); }
		public TerminalNode PRECISION() { return getToken(SqlParser.PRECISION, 0); }
		public TerminalNode XMLPARSE() { return getToken(SqlParser.XMLPARSE, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(SqlParser.BOOLEAN_P, 0); }
		public TerminalNode FLOAT_P() { return getToken(SqlParser.FLOAT_P, 0); }
		public TerminalNode NATIONAL() { return getToken(SqlParser.NATIONAL, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlParser.NUMERIC, 0); }
		public TerminalNode XMLELEMENT() { return getToken(SqlParser.XMLELEMENT, 0); }
		public TerminalNode OUT_P() { return getToken(SqlParser.OUT_P, 0); }
		public TerminalNode POSITION() { return getToken(SqlParser.POSITION, 0); }
		public TerminalNode NONE() { return getToken(SqlParser.NONE, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(SqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLFOREST() { return getToken(SqlParser.XMLFOREST, 0); }
		public TerminalNode NCHAR() { return getToken(SqlParser.NCHAR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlParser.SUBSTRING, 0); }
		public TerminalNode INTEGER() { return getToken(SqlParser.INTEGER, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_col_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8417);
			_la = _input.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (BETWEEN - 52)) | (1L << (BIGINT - 52)) | (1L << (BIT - 52)) | (1L << (BOOLEAN_P - 52)) | (1L << (CHAR_P - 52)) | (1L << (CHARACTER - 52)) | (1L << (COALESCE - 52)) | (1L << (DEC - 52)) | (1L << (DECIMAL_P - 52)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (EXISTS - 143)) | (1L << (EXTRACT - 143)) | (1L << (FLOAT_P - 143)) | (1L << (GREATEST - 143)) | (1L << (INOUT - 143)) | (1L << (INT_P - 143)) | (1L << (INTEGER - 143)) | (1L << (INTERVAL - 143)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (LEAST - 211)) | (1L << (NATIONAL - 211)) | (1L << (NCHAR - 211)) | (1L << (NONE - 211)) | (1L << (NULLIF - 211)) | (1L << (NUMERIC - 211)) | (1L << (OUT_P - 211)) | (1L << (OVERLAY - 211)) | (1L << (POSITION - 211)))) != 0) || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (PRECISION - 276)) | (1L << (REAL - 276)) | (1L << (ROW - 276)) | (1L << (SETOF - 276)) | (1L << (SMALLINT - 276)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (SUBSTRING - 345)) | (1L << (TIME - 345)) | (1L << (TIMESTAMP - 345)) | (1L << (TREAT - 345)) | (1L << (TRIM - 345)) | (1L << (VALUES - 345)) | (1L << (VARCHAR - 345)) | (1L << (XMLATTRIBUTES - 345)) | (1L << (XMLCONCAT - 345)) | (1L << (XMLELEMENT - 345)) | (1L << (XMLEXISTS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (XMLFOREST - 409)) | (1L << (XMLPARSE - 409)) | (1L << (XMLPI - 409)) | (1L << (XMLROOT - 409)) | (1L << (XMLSERIALIZE - 409)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SqlParser.JOIN, 0); }
		public TerminalNode OUTER_P() { return getToken(SqlParser.OUTER_P, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public TerminalNode INNER_P() { return getToken(SqlParser.INNER_P, 0); }
		public TerminalNode ISNULL() { return getToken(SqlParser.ISNULL, 0); }
		public TerminalNode OVERLAPS() { return getToken(SqlParser.OVERLAPS, 0); }
		public TerminalNode LEFT() { return getToken(SqlParser.LEFT, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public TerminalNode OVER() { return getToken(SqlParser.OVER, 0); }
		public TerminalNode NATURAL() { return getToken(SqlParser.NATURAL, 0); }
		public TerminalNode SIMILAR() { return getToken(SqlParser.SIMILAR, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public TerminalNode NOTNULL() { return getToken(SqlParser.NOTNULL, 0); }
		public TerminalNode CROSS() { return getToken(SqlParser.CROSS, 0); }
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode RIGHT() { return getToken(SqlParser.RIGHT, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8419);
			_la = _input.LA(1);
			if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (AUTHORIZATION - 48)) | (1L << (BINARY - 48)) | (1L << (COLLATION - 48)) | (1L << (CONCURRENTLY - 48)) | (1L << (CROSS - 48)) | (1L << (CURRENT_SCHEMA - 48)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (FREEZE - 158)) | (1L << (FULL - 158)) | (1L << (ILIKE - 158)) | (1L << (INNER_P - 158)) | (1L << (IS - 158)) | (1L << (ISNULL - 158)) | (1L << (JOIN - 158)) | (1L << (LEFT - 158)) | (1L << (LIKE - 158)))) != 0) || ((((_la - 234)) & ~0x3f) == 0 && ((1L << (_la - 234)) & ((1L << (NATURAL - 234)) | (1L << (NOTNULL - 234)) | (1L << (OUTER_P - 234)) | (1L << (OVER - 234)) | (1L << (OVERLAPS - 234)))) != 0) || _la==RIGHT || _la==SIMILAR || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlParser.CURRENT_DATE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlParser.CURRENT_TIME, 0); }
		public TerminalNode RETURNING() { return getToken(SqlParser.RETURNING, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public TerminalNode SOME() { return getToken(SqlParser.SOME, 0); }
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode LOCALTIME() { return getToken(SqlParser.LOCALTIME, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode ANALYSE() { return getToken(SqlParser.ANALYSE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(SqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SqlParser.THEN, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlParser.ANALYZE, 0); }
		public TerminalNode TRAILING() { return getToken(SqlParser.TRAILING, 0); }
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode ASC() { return getToken(SqlParser.ASC, 0); }
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode DESC() { return getToken(SqlParser.DESC, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(SqlParser.CURRENT_ROLE, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode ELSE() { return getToken(SqlParser.ELSE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public TerminalNode CASE() { return getToken(SqlParser.CASE, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SqlParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(SqlParser.BOTH, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode OFFSET() { return getToken(SqlParser.OFFSET, 0); }
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode HAVING() { return getToken(SqlParser.HAVING, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode PLACING() { return getToken(SqlParser.PLACING, 0); }
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SqlParser.SYMMETRIC, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public TerminalNode ANY() { return getToken(SqlParser.ANY, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public TerminalNode LEADING() { return getToken(SqlParser.LEADING, 0); }
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlParser.SESSION_USER, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlListener ) ((SqlListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8421);
			_la = _input.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (INTO - 28)) | (1L << (FROM - 28)) | (1L << (ALL - 28)) | (1L << (ANALYSE - 28)) | (1L << (ANALYZE - 28)) | (1L << (AND - 28)) | (1L << (ANY - 28)) | (1L << (ARRAY - 28)) | (1L << (AS - 28)) | (1L << (ASC - 28)) | (1L << (ASYMMETRIC - 28)) | (1L << (BOTH - 28)) | (1L << (CASE - 28)) | (1L << (CAST - 28)) | (1L << (CHECK - 28)) | (1L << (COLLATE - 28)) | (1L << (COLUMN - 28)) | (1L << (CONSTRAINT - 28)))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (CREATE - 93)) | (1L << (CURRENT_CATALOG - 93)) | (1L << (CURRENT_DATE - 93)) | (1L << (CURRENT_ROLE - 93)) | (1L << (CURRENT_TIME - 93)) | (1L << (CURRENT_TIMESTAMP - 93)) | (1L << (CURRENT_USER - 93)) | (1L << (DEFAULT - 93)) | (1L << (DEFERRABLE - 93)) | (1L << (DESC - 93)) | (1L << (DISTINCT - 93)) | (1L << (DO - 93)) | (1L << (ELSE - 93)) | (1L << (END_P - 93)) | (1L << (EXCEPT - 93)) | (1L << (FALSE_P - 93)) | (1L << (FETCH - 93)) | (1L << (FOR - 93)) | (1L << (FOREIGN - 93)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (GRANT - 163)) | (1L << (GROUP_P - 163)) | (1L << (HAVING - 163)) | (1L << (IN_P - 163)) | (1L << (INITIALLY - 163)) | (1L << (INTERSECT - 163)) | (1L << (LEADING - 163)) | (1L << (LIMIT - 163)) | (1L << (LOCALTIME - 163)) | (1L << (LOCALTIMESTAMP - 163)))) != 0) || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (NOT - 239)) | (1L << (NULL_P - 239)) | (1L << (OFFSET - 239)) | (1L << (ON - 239)) | (1L << (ONLY - 239)) | (1L << (OR - 239)) | (1L << (ORDER - 239)) | (1L << (PLACING - 239)) | (1L << (PRIMARY - 239)) | (1L << (REFERENCES - 239)))) != 0) || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (RETURNING - 304)) | (1L << (SELECT - 304)) | (1L << (SESSION_USER - 304)) | (1L << (SOME - 304)) | (1L << (SYMMETRIC - 304)) | (1L << (TABLE - 304)) | (1L << (THEN - 304)) | (1L << (TO - 304)) | (1L << (TRAILING - 304)) | (1L << (TRUE_P - 304)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (UNION - 373)) | (1L << (UNIQUE - 373)) | (1L << (USER - 373)) | (1L << (USING - 373)) | (1L << (VARIADIC - 373)) | (1L << (WHEN - 373)) | (1L << (WHERE - 373)) | (1L << (WINDOW - 373)) | (1L << (WITH - 373)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return stmtmulti_sempred((StmtmultiContext)_localctx, predIndex);
		case 4: return optRoleList_sempred((OptRoleListContext)_localctx, predIndex);
		case 5: return alteroptRoleList_sempred((AlteroptRoleListContext)_localctx, predIndex);
		case 22: return optSchemaEltList_sempred((OptSchemaEltListContext)_localctx, predIndex);
		case 27: return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 28: return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 45: return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 53: return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 56: return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 63: return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 69: return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 72: return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 78: return tableElementList_sempred((TableElementListContext)_localctx, predIndex);
		case 79: return typedtableElementList_sempred((TypedtableElementListContext)_localctx, predIndex);
		case 84: return colQualList_sempred((ColQualListContext)_localctx, predIndex);
		case 89: return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 95: return columnList_sempred((ColumnListContext)_localctx, predIndex);
		case 98: return exclusionConstraintList_sempred((ExclusionConstraintListContext)_localctx, predIndex);
		case 117: return seqOptList_sempred((SeqOptListContext)_localctx, predIndex);
		case 121: return numericOnly_list_sempred((NumericOnly_listContext)_localctx, predIndex);
		case 134: return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 137: return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 142: return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 147: return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 149: return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 162: return foreigntableElementList_sempred((ForeigntableElementListContext)_localctx, predIndex);
		case 171: return triggerEvents_sempred((TriggerEventsContext)_localctx, predIndex);
		case 177: return triggerFuncArgs_sempred((TriggerFuncArgsContext)_localctx, predIndex);
		case 180: return constraintAttributeSpec_sempred((ConstraintAttributeSpecContext)_localctx, predIndex);
		case 187: return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 192: return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 195: return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 198: return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 206: return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 214: return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 216: return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 233: return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 236: return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 239: return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 246: return defACLOptionList_sempred((DefACLOptionListContext)_localctx, predIndex);
		case 255: return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 264: return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 266: return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 273: return createfunc_opt_list_sempred((Createfunc_opt_listContext)_localctx, predIndex);
		case 279: return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 281: return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 289: return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 305: return ruleActionMulti_sempred((RuleActionMultiContext)_localctx, predIndex);
		case 318: return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 324: return createdb_opt_list_sempred((Createdb_opt_listContext)_localctx, predIndex);
		case 329: return alterdb_opt_list_sempred((Alterdb_opt_listContext)_localctx, predIndex);
		case 341: return vacuum_option_list_sempred((Vacuum_option_listContext)_localctx, predIndex);
		case 351: return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 363: return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 373: return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 378: return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 381: return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 384: return select_with_parens_sempred((Select_with_parensContext)_localctx, predIndex);
		case 387: return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 389: return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 399: return sortby_list_sempred((Sortby_listContext)_localctx, predIndex);
		case 415: return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 418: return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 420: return from_list_sempred((From_listContext)_localctx, predIndex);
		case 423: return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 428: return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 434: return tableFuncElementList_sempred((TableFuncElementListContext)_localctx, predIndex);
		case 437: return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 460: return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 461: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 467: return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 473: return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 489: return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 490: return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 492: return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 494: return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 506: return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 512: return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 513: return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 516: return ctext_expr_list_sempred((Ctext_expr_listContext)_localctx, predIndex);
		case 518: return target_list_sempred((Target_listContext)_localctx, predIndex);
		case 520: return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 522: return name_list_sempred((Name_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean sortby_list_sempred(Sortby_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 160: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean vacuum_option_list_sempred(Vacuum_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean createfunc_opt_list_sempred(Createfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean target_list_sempred(Target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alteroptRoleList_sempred(AlteroptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typedtableElementList_sempred(TypedtableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean columnList_sempred(ColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean constraintAttributeSpec_sempred(ConstraintAttributeSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 154: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean seqOptList_sempred(SeqOptListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerEvents_sempred(TriggerEventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean foreigntableElementList_sempred(ForeigntableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean stmtmulti_sempred(StmtmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createdb_opt_list_sempred(Createdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean select_with_parens_sempred(Select_with_parensContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return precpred(_ctx, 1);
		case 63: return precpred(_ctx, 2);
		case 62: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableElementList_sempred(TableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return precpred(_ctx, 3);
		case 66: return precpred(_ctx, 2);
		case 67: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean colQualList_sempred(ColQualListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 129: return precpred(_ctx, 8);
		case 128: return precpred(_ctx, 9);
		case 131: return precpred(_ctx, 6);
		case 130: return precpred(_ctx, 7);
		case 133: return precpred(_ctx, 4);
		case 132: return precpred(_ctx, 5);
		case 135: return precpred(_ctx, 1);
		case 134: return precpred(_ctx, 2);
		case 85: return precpred(_ctx, 53);
		case 84: return precpred(_ctx, 54);
		case 87: return precpred(_ctx, 51);
		case 86: return precpred(_ctx, 52);
		case 83: return precpred(_ctx, 55);
		case 82: return precpred(_ctx, 58);
		case 93: return precpred(_ctx, 45);
		case 92: return precpred(_ctx, 46);
		case 95: return precpred(_ctx, 41);
		case 94: return precpred(_ctx, 44);
		case 89: return precpred(_ctx, 49);
		case 88: return precpred(_ctx, 50);
		case 91: return precpred(_ctx, 47);
		case 90: return precpred(_ctx, 48);
		case 102: return precpred(_ctx, 33);
		case 103: return precpred(_ctx, 32);
		case 100: return precpred(_ctx, 35);
		case 101: return precpred(_ctx, 34);
		case 98: return precpred(_ctx, 37);
		case 99: return precpred(_ctx, 36);
		case 96: return precpred(_ctx, 40);
		case 97: return precpred(_ctx, 38);
		case 110: return precpred(_ctx, 14);
		case 111: return precpred(_ctx, 60);
		case 108: return precpred(_ctx, 27);
		case 109: return precpred(_ctx, 15);
		case 106: return precpred(_ctx, 29);
		case 107: return precpred(_ctx, 28);
		case 104: return precpred(_ctx, 31);
		case 105: return precpred(_ctx, 30);
		case 119: return precpred(_ctx, 20);
		case 118: return precpred(_ctx, 21);
		case 117: return precpred(_ctx, 23);
		case 116: return precpred(_ctx, 24);
		case 115: return precpred(_ctx, 25);
		case 114: return precpred(_ctx, 26);
		case 113: return precpred(_ctx, 42);
		case 112: return precpred(_ctx, 59);
		case 127: return precpred(_ctx, 10);
		case 126: return precpred(_ctx, 11);
		case 125: return precpred(_ctx, 12);
		case 124: return precpred(_ctx, 13);
		case 123: return precpred(_ctx, 16);
		case 122: return precpred(_ctx, 17);
		case 121: return precpred(_ctx, 18);
		case 120: return precpred(_ctx, 19);
		}
		return true;
	}
	private boolean old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exclusionConstraintList_sempred(ExclusionConstraintListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optRoleList_sempred(OptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ruleActionMulti_sempred(RuleActionMultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableFuncElementList_sempred(TableFuncElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 137: return precpred(_ctx, 17);
		case 136: return precpred(_ctx, 18);
		case 139: return precpred(_ctx, 15);
		case 138: return precpred(_ctx, 16);
		case 141: return precpred(_ctx, 13);
		case 140: return precpred(_ctx, 14);
		case 143: return precpred(_ctx, 11);
		case 142: return precpred(_ctx, 12);
		case 152: return precpred(_ctx, 2);
		case 153: return precpred(_ctx, 1);
		case 144: return precpred(_ctx, 10);
		case 145: return precpred(_ctx, 9);
		case 146: return precpred(_ctx, 6);
		case 147: return precpred(_ctx, 5);
		case 148: return precpred(_ctx, 21);
		case 149: return precpred(_ctx, 7);
		case 150: return precpred(_ctx, 4);
		case 151: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean ctext_expr_list_sempred(Ctext_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return precpred(_ctx, 1);
		case 49: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return precpred(_ctx, 2);
		case 77: return precpred(_ctx, 1);
		case 73: return precpred(_ctx, 5);
		case 74: return precpred(_ctx, 4);
		case 75: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean defACLOptionList_sempred(DefACLOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean numericOnly_list_sempred(NumericOnly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optSchemaEltList_sempred(OptSchemaEltListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean from_list_sempred(From_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return precpred(_ctx, 2);
		case 15: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return precpred(_ctx, 3);
		case 58: return precpred(_ctx, 4);
		case 61: return precpred(_ctx, 1);
		case 60: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alterdb_opt_list_sempred(Alterdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean triggerFuncArgs_sempred(TriggerFuncArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 155: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return precpred(_ctx, 2);
		case 80: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 156: return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u01c3\u20ea\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u0447\n\3\f\3\16"+
		"\3\u044a\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04bb\n\4\3\5\3\5\3\5\3\5\5"+
		"\5\u04c1\n\5\3\5\3\5\3\6\3\6\3\6\7\6\u04c8\n\6\f\6\16\6\u04cb\13\6\3\7"+
		"\3\7\3\7\7\7\u04d0\n\7\f\7\16\7\u04d3\13\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u04e9\n\b\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04f8\n\t\3\n\3\n"+
		"\3\n\3\n\5\n\u04fe\n\n\3\n\3\n\3\13\3\13\3\13\3\13\5\13\u0506\n\13\3\13"+
		"\3\13\3\f\3\f\3\f\3\f\5\f\u050e\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16"+
		"\3\16\3\16\5\16\u051a\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u052b\n\20\3\21\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\5\21\u0535\n\21\3\22\3\22\3\22\3\22\5\22\u053b\n\22\3"+
		"\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\3\25\5\25\u0550\n\25\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u055e\n\26\3\27\3\27\5\27\u0562\n"+
		"\27\3\30\3\30\3\30\7\30\u0567\n\30\f\30\16\30\u056a\13\30\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\5\31\u0572\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\5\32\u057c\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0586"+
		"\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\5\34\u05b3\n\34\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u05bb\n"+
		"\35\f\35\16\35\u05be\13\35\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u05c6\n"+
		"\36\f\36\16\36\u05c9\13\36\3\37\3\37\5\37\u05cd\n\37\3 \3 \3 \3 \3 \3"+
		" \3 \5 \u05d6\n \3!\3!\3!\3!\5!\u05dc\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3"+
		"\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u05ee\n\"\3#\3#\3#\5#\u05f3\n#"+
		"\3$\3$\5$\u05f7\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0607"+
		"\n%\3&\3&\3&\5&\u060c\n&\3\'\3\'\3\'\5\'\u0611\n\'\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\5(\u0621\n(\3)\3)\3)\3)\3)\3*\3*\5*\u062a\n*\3"+
		"+\3+\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0638\n-\3.\3.\3.\3.\3.\3.\3.\3"+
		".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3"+
		".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u066a\n.\3/\3"+
		"/\3/\3/\3/\3/\7/\u0672\n/\f/\16/\u0675\13/\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\5\60\u071c\n\60\3\61\3\61\3\61\3\61\3\61"+
		"\5\61\u0723\n\61\3\62\3\62\3\62\5\62\u0728\n\62\3\63\3\63\3\63\5\63\u072d"+
		"\n\63\3\64\3\64\3\64\5\64\u0732\n\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66"+
		"\5\66\u073b\n\66\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0743\n\67\f\67\16"+
		"\67\u0746\13\67\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u0757"+
		"\n8\39\39\39\39\39\3:\3:\3:\3:\3:\3:\7:\u0764\n:\f:\16:\u0767\13:\3;\3"+
		";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3"+
		";\3;\5;\u0783\n;\3<\3<\3<\3<\5<\u0789\n<\3=\3=\3=\3=\3=\3=\3=\3=\3=\5"+
		"=\u0794\n=\3=\3=\3=\3=\3=\3=\3=\5=\u079d\n=\3=\3=\5=\u07a1\n=\3>\3>\3"+
		"?\3?\3?\5?\u07a8\n?\3@\3@\3@\3@\3@\5@\u07af\n@\3A\3A\3A\7A\u07b4\nA\f"+
		"A\16A\u07b7\13A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u07d9\nB\3C\3C\5C\u07dd"+
		"\nC\3D\3D\3D\5D\u07e2\nD\3E\3E\3E\3E\3E\5E\u07e9\nE\3F\3F\5F\u07ed\nF"+
		"\3G\3G\3G\3G\3G\3G\7G\u07f5\nG\fG\16G\u07f8\13G\3H\3H\3H\3I\3I\3I\3I\3"+
		"I\3I\3I\3I\5I\u0805\nI\3J\3J\3J\3J\3J\3J\7J\u080d\nJ\fJ\16J\u0810\13J"+
		"\3K\3K\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0848\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M"+
		"\3M\5M\u0856\nM\3N\3N\5N\u085a\nN\3O\3O\3O\3O\3O\5O\u0861\nO\3P\3P\3P"+
		"\3P\3P\3P\7P\u0869\nP\fP\16P\u086c\13P\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0874\nQ\f"+
		"Q\16Q\u0877\13Q\3R\3R\3R\5R\u087c\nR\3S\3S\5S\u0880\nS\3T\3T\3T\3T\3T"+
		"\3U\3U\3U\3U\3U\3V\3V\3V\7V\u088f\nV\fV\16V\u0892\13V\3W\3W\3W\3W\3W\3"+
		"W\3W\3W\5W\u089c\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u08b8\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u08c1"+
		"\nY\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\7[\u08ce\n[\f[\16[\u08d1\13[\3\\"+
		"\3\\\3]\3]\3]\3]\3]\5]\u08da\n]\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3"+
		"^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3"+
		"^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0912\n^\3"+
		"_\3_\3_\5_\u0917\n_\3`\3`\3`\3`\3`\5`\u091e\n`\3a\3a\3a\3a\3a\3a\7a\u0926"+
		"\na\fa\16a\u0929\13a\3b\3b\3c\3c\3c\3c\3c\3c\3c\5c\u0934\nc\3d\3d\3d\3"+
		"d\3d\3d\7d\u093c\nd\fd\16d\u093f\13d\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e"+
		"\5e\u094c\ne\3f\3f\3f\3f\3f\3f\5f\u0954\nf\3g\3g\3g\3g\3g\3g\3g\3g\3g"+
		"\5g\u095f\ng\3h\3h\3h\3h\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0971"+
		"\nj\3k\3k\3k\3k\3k\3k\5k\u0979\nk\3l\3l\3l\3l\3l\3l\3l\5l\u0982\nl\3m"+
		"\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u0990\nm\3n\3n\3n\5n\u0995\nn\3o"+
		"\3o\3o\3o\3o\5o\u099c\no\3p\3p\3p\3p\3q\3q\3q\3q\3q\3q\3q\3q\3r\3r\3r"+
		"\3r\3r\3r\3s\3s\3s\3s\3s\3s\5s\u09b6\ns\3t\3t\3t\3t\3t\3t\3u\3u\3u\3u"+
		"\3u\3u\3u\3u\3u\3u\3u\3u\5u\u09ca\nu\3v\3v\5v\u09ce\nv\3w\3w\3w\3w\3w"+
		"\7w\u09d5\nw\fw\16w\u09d8\13w\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3"+
		"x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u09f0\nx\3x\3x\3x\3x\5x\u09f6\nx\3x\5x\u09f9"+
		"\nx\3y\3y\5y\u09fd\ny\3z\3z\3z\3z\5z\u0a03\nz\3{\3{\3{\3{\3{\3{\7{\u0a0b"+
		"\n{\f{\16{\u0a0e\13{\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3"+
		"|\3|\5|\u0a22\n|\3}\3}\5}\u0a26\n}\3~\3~\3~\3~\5~\u0a2c\n~\3\177\3\177"+
		"\3\177\5\177\u0a31\n\177\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a37"+
		"\n\u0080\3\u0081\3\u0081\5\u0081\u0a3b\n\u0081\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\5\u0082\u0a4b\n\u0082\3\u0083\3\u0083\5\u0083\u0a4f\n"+
		"\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085"+
		"\3\u0085\3\u0085\5\u0085\u0a5b\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0a65\n\u0086\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0a6b\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a76\n\u0087\3\u0087"+
		"\3\u0087\5\u0087\u0a7a\n\u0087\3\u0088\3\u0088\3\u0088\7\u0088\u0a7f\n"+
		"\u0088\f\u0088\16\u0088\u0a82\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u0a8a\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\7\u008b\u0a95\n\u008b\f\u008b"+
		"\16\u008b\u0a98\13\u008b\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0b4f\n\u008d\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b61\n\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u0b68\n\u0090\f\u0090\16\u0090"+
		"\u0b6b\13\u0090\3\u0091\3\u0091\5\u0091\u0b6f\n\u0091\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0b81\n\u0092\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0b92\n\u0093\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b9a\n\u0094\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095\u0ba2\n\u0095\f\u0095"+
		"\16\u0095\u0ba5\13\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0bb2\n\u0097\f\u0097"+
		"\16\u0097\u0bb5\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\5\u0098\u0bbe\n\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a"+
		"\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0bd5"+
		"\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0bdb\n\u009e\3\u009f"+
		"\3\u009f\5\u009f\u0bdf\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0bed"+
		"\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0bff\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0c16\n\u00a2\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c1e\n\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0c26\n\u00a4\f\u00a4"+
		"\16\u00a4\u0c29\13\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0c3b\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0c49"+
		"\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\5\u00a9\u0c5d\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0c8d\n\u00ab\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0c93\n\u00ac\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0c9b\n\u00ad\f\u00ad\16\u00ad\u0c9e"+
		"\13\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u0ca7\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0cae\n"+
		"\u00af\3\u00b0\3\u00b0\5\u00b0\u0cb2\n\u00b0\3\u00b1\3\u00b1\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0cbc\n\u00b2\3\u00b3\3"+
		"\u00b3\3\u00b3\5\u00b3\u0cc1\n\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0cc6"+
		"\n\u00b3\f\u00b3\16\u00b3\u0cc9\13\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u0ccf\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0cd4\n\u00b5\3"+
		"\u00b6\3\u00b6\3\u00b6\7\u00b6\u0cd9\n\u00b6\f\u00b6\16\u00b6\u0cdc\13"+
		"\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0ce9\n\u00b7\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0cfb\n\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\5\u00bb\u0d62\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u0d6e\n\u00bd\f\u00bd\16\u00bd"+
		"\u0d71\13\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0d78"+
		"\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d7f\n\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d88"+
		"\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\7\u00c2\u0d94\n\u00c2\f\u00c2\16\u00c2\u0d97\13\u00c2"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\5\u00c4\u0d9f\n\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0da7\n\u00c5"+
		"\f\u00c5\16\u00c5\u0daa\13\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u0dc5\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0ddb"+
		"\n\u00c8\f\u00c8\16\u00c8\u0dde\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0dfc\n\u00c9"+
		"\3\u00ca\3\u00ca\5\u00ca\u0e00\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0e05\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u0e0e\n\u00cc\3\u00cd\3\u00cd\5\u00cd\u0e12\n\u00cd\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0e2d\n\u00cf"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u0e35\n\u00d0"+
		"\f\u00d0\16\u00d0\u0e38\13\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e46"+
		"\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\5\u00d2\u0e5a\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e6e\n\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u0e97\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\5\u00d7\u0eb1\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\7\u00d8\u0eb9\n\u00d8\f\u00d8\16\u00d8\u0ebc\13\u00d8\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0ec2\n\u00d9\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u0ecb\n\u00da\f\u00da\16\u00da"+
		"\u0ece\13\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0edb\n\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u0f71\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0f87"+
		"\n\u00de\3\u00df\3\u00df\5\u00df\u0f8b\n\u00df\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\5\u00e0\u0fbe\n\u00e0\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0fc3\n"+
		"\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0fd1\n\u00e2\3\u00e3\3\u00e3"+
		"\5\u00e3\u0fd5\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0fdb\n"+
		"\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u101f\n\u00e5\3\u00e6\3\u00e6"+
		"\3\u00e7\3\u00e7\5\u00e7\u1025\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1042\n\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1053\n\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u105b\n\u00eb\f\u00eb"+
		"\16\u00eb\u105e\13\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1069\n\u00ec\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1097\n\u00ed\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u109f\n\u00ee\f\u00ee"+
		"\16\u00ee\u10a2\13\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u10a7\n\u00ef"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u10ad\n\u00f0\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u10b5\n\u00f1\f\u00f1\16\u00f1"+
		"\u10b8\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\5\u00f4\u10d5\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u10db\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u10e1\n"+
		"\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8"+
		"\3\u00f8\7\u00f8\u10ec\n\u00f8\f\u00f8\16\u00f8\u10ef\13\u00f8\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9"+
		"\u10fa\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u1117\n\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u112c\n\u00fd"+
		"\3\u00fe\3\u00fe\5\u00fe\u1130\n\u00fe\3\u00ff\3\u00ff\5\u00ff\u1134\n"+
		"\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u1139\n\u0100\3\u0101\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u1141\n\u0101\f\u0101\16\u0101"+
		"\u1144\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u115a\n\u0102\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u115f\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104"+
		"\u1165\n\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u116a\n\u0105\3\u0106\3"+
		"\u0106\3\u0106\5\u0106\u116f\n\u0106\3\u0107\3\u0107\5\u0107\u1173\n\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u117f\n\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107"+
		"\u118e\n\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107"+
		"\u1196\n\u0107\3\u0108\3\u0108\3\u0108\5\u0108\u119b\n\u0108\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u11a3\n\u0109\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u11ab\n\u010a\f\u010a\16"+
		"\u010a\u11ae\13\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u11b6\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\7\u010c\u11be\n\u010c\f\u010c\16\u010c\u11c1\13\u010c\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u11d2\n\u010d\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u11da\n\u010e\3\u010f\3\u010f"+
		"\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u11ec\n\u0111\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u11f7\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u11fe\n"+
		"\u0113\f\u0113\16\u0113\u1201\13\u0113\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\5\u0114\u1222\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\5\u0115\u122a\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116"+
		"\u1231\n\u0116\3\u0117\3\u0117\3\u0117\5\u0117\u1236\n\u0117\3\u0118\3"+
		"\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119"+
		"\u1241\n\u0119\f\u0119\16\u0119\u1244\13\u0119\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b"+
		"\u1251\n\u011b\f\u011b\16\u011b\u1254\13\u011b\3\u011c\3\u011c\5\u011c"+
		"\u1258\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1268"+
		"\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1278\n\u011e"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1288\n\u011f\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\5\u0120\u12a0\n\u0120\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u12a7\n\u0121\3\u0122\3\u0122\3\u0122\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\7\u0123\u12b1\n\u0123\f\u0123\16\u0123"+
		"\u12b4\13\u0123\3\u0124\3\u0124\3\u0124\5\u0124\u12b9\n\u0124\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u12dd\n\u0125"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u12e4\n\u0126\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u12f3\n\u0128\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u1304\n\u0129\3\u012a\3\u012a\3\u012b"+
		"\3\u012b\5\u012b\u130a\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u145e\n\u012c\3\u012d\3\u012d\5\u012d\u1462\n\u012d\3\u012e\3"+
		"\u012e\3\u012e\5\u012e\u1467\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u151d\n\u012f\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u15ad\n\u0130"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\5\u0132\u15c3\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\7\u0133\u15cb\n\u0133\f\u0133\16\u0133\u15ce\13\u0133"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u15d5\n\u0134\3\u0135"+
		"\3\u0135\5\u0135\u15d9\n\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u15e0\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\5\u0138\u15f2\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013a\5\u013a\u15fb\n\u013a\3\u013b\3\u013b\3\u013b\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u1604\n\u013c\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u1630\n\u013d\3\u013e\3\u013e\3\u013e"+
		"\5\u013e\u1635\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1641\n\u013f\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u164b\n\u0140"+
		"\f\u0140\16\u0140\u164e\13\u0140\3\u0141\3\u0141\5\u0141\u1652\n\u0141"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u166a\n\u0142\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\5\u0143\u1678\n\u0143\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u1681\n\u0145\3\u0145\3\u0145\3\u0146\3\u0146"+
		"\3\u0146\7\u0146\u1688\n\u0146\f\u0146\16\u0146\u168b\13\u0146\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u16ce\n\u0147\3\u0148\3\u0148\5\u0148\u16d2\n\u0148\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u16d8\n\u0149\3\u0149\3\u0149\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u16e3\n"+
		"\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b"+
		"\7\u014b\u16ed\n\u014b\f\u014b\16\u014b\u16f0\13\u014b\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u16ff\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f"+
		"\u173a\n\u014f\3\u0150\3\u0150\5\u0150\u173e\n\u0150\3\u0151\3\u0151\3"+
		"\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u178f\n\u0152\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u17a9\n\u0154\3\u0155"+
		"\3\u0155\3\u0155\5\u0155\u17ae\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u17cd"+
		"\n\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\7\u0157\u17d5"+
		"\n\u0157\f\u0157\16\u0157\u17d8\13\u0157\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\5\u0158\u17de\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\5\u0159\u17e8\n\u0159\3\u015a\3\u015a\3\u015b\3\u015b"+
		"\5\u015b\u17ee\n\u015b\3\u015c\3\u015c\5\u015c\u17f2\n\u015c\3\u015d\3"+
		"\u015d\5\u015d\u17f6\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5"+
		"\u015e\u17fd\n\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3"+
		"\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\5\u015f\u180f\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\5\u0160\u1818\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0161\7\u0161\u1820\n\u0161\f\u0161\16\u0161\u1823\13\u0161"+
		"\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\5\u0163\u182b\n\u0163"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u1830\n\u0164\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166"+
		"\u183d\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u1843\n\u0167\3"+
		"\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1853\n\u0168\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u185a\n\u0169\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a"+
		"\u1866\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c"+
		"\u1877\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\7\u016d"+
		"\u187f\n\u016d\f\u016d\16\u016d\u1882\13\u016d\3\u016e\3\u016e\3\u016e"+
		"\3\u016f\3\u016f\3\u016f\5\u016f\u188a\n\u016f\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\5\u0171"+
		"\u1897\n\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0173"+
		"\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u18a4\n\u0173\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u18b6\n\u0174\3\u0175"+
		"\3\u0175\5\u0175\u18ba\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\7\u0177\u18cb\n\u0177\f\u0177\16\u0177\u18ce\13\u0177\3\u0178"+
		"\3\u0178\5\u0178\u18d2\n\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c\u18e7\n\u017c\f\u017c"+
		"\16\u017c\u18ea\13\u017c\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017e\3\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\7\u017f\u1900\n\u017f\f\u017f"+
		"\16\u017f\u1903\13\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180"+
		"\u190a\n\u0180\3\u0181\3\u0181\5\u0181\u190e\n\u0181\3\u0182\3\u0182\3"+
		"\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u1919\n"+
		"\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u1920\n\u0182\3"+
		"\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u1927\n\u0182\3\u0182\3"+
		"\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u192e\n\u0182\7\u0182\u1930\n\u0182"+
		"\f\u0182\16\u0182\u1933\13\u0182\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\5\u0183\u1956\n\u0183\3\u0184\3\u0184\5\u0184\u195a\n\u0184\3"+
		"\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u196a\n\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1971\n\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\5\u0185\u1978\n\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\5\u0185\u197f\n\u0185\7\u0185\u1981\n\u0185\f\u0185\16"+
		"\u0185\u1984\13\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186"+
		"\u198b\n\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\7\u0187"+
		"\u1993\n\u0187\f\u0187\16\u0187\u1996\13\u0187\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\5\u0189\u19a1\n\u0189"+
		"\3\u018a\3\u018a\3\u018a\5\u018a\u19a6\n\u018a\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u19cb\n\u018b\3\u018c"+
		"\3\u018c\5\u018c\u19cf\n\u018c\3\u018d\3\u018d\3\u018d\5\u018d\u19d4\n"+
		"\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\5\u018e\u19df\n\u018e\3\u018f\3\u018f\5\u018f\u19e3\n\u018f\3"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\7\u0191\u19ef\n\u0191\f\u0191\16\u0191\u19f2\13\u0191\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192"+
		"\u19fd\n\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\5\u0193\u1a07\n\u0193\3\u0194\3\u0194\5\u0194\u1a0b\n\u0194\3"+
		"\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u1a1a\n\u0195\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1a22\n\u0196\3\u0197\3\u0197"+
		"\5\u0197\u1a26\n\u0197\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\5\u0199\u1a30\n\u0199\3\u019a\3\u019a\3\u019b\3\u019b"+
		"\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1a3c\n\u019d"+
		"\3\u019e\3\u019e\3\u019e\5\u019e\u1a41\n\u019e\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\5\u019f\u1a47\n\u019f\3\u01a0\3\u01a0\5\u01a0\u1a4b\n\u01a0\3"+
		"\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u1a52\n\u01a1\f\u01a1\16"+
		"\u01a1\u1a55\13\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a61\n\u01a2\3\u01a3\3\u01a3"+
		"\3\u01a3\5\u01a3\u1a66\n\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\7\u01a4\u1a6f\n\u01a4\f\u01a4\16\u01a4\u1a72\13\u01a4"+
		"\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1a77\n\u01a5\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\7\u01a6\u1a7f\n\u01a6\f\u01a6\16\u01a6\u1a82"+
		"\13\u01a6\3\u01a7\3\u01a7\5\u01a7\u1a86\n\u01a7\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\5\u01a8\u1aa7\n\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\5\u01a9\u1aae\n\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1acb\n\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u1ae6\n\u01a9\f\u01a9\16\u01a9"+
		"\u1ae9\13\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u1af9"+
		"\n\u01aa\3\u01ab\3\u01ab\5\u01ab\u1afd\n\u01ab\3\u01ab\3\u01ab\5\u01ab"+
		"\u1b01\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u1b05\n\u01ab\3\u01ab\5\u01ab\u1b08"+
		"\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac"+
		"\u1b11\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b1e\n\u01ad\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\7\u01ae\u1b26\n\u01ae\f\u01ae\16\u01ae"+
		"\u1b29\13\u01ae\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\5\u01af\u1b33\n\u01af\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b1"+
		"\5\u01b1\u1b3a\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\5\u01b2\u1b43\n\u01b2\3\u01b3\3\u01b3\5\u01b3\u1b47\n\u01b3\3"+
		"\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\7\u01b4\u1b4f\n\u01b4\f"+
		"\u01b4\16\u01b4\u1b52\13\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6"+
		"\u1b73\n\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\7\u01b7\u1b7e\n\u01b7\f\u01b7\16\u01b7\u1b81\13\u01b7"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b91\n\u01b8\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b97\n\u01b9\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1ba0\n\u01ba\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1ba7\n\u01bb\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1bb9\n\u01bc\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bc0\n\u01bd\3\u01be\3\u01be\5\u01be"+
		"\u1bc4\n\u01be\3\u01bf\3\u01bf\5\u01bf\u1bc8\n\u01bf\3\u01c0\3\u01c0\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2"+
		"\5\u01c2\u1bd5\n\u01c2\3\u01c3\3\u01c3\5\u01c3\u1bd9\n\u01c3\3\u01c4\3"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1bf1\n\u01c6\3\u01c7\3\u01c7\5\u01c7"+
		"\u1bf5\n\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1bfb\n\u01c8\3"+
		"\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9"+
		"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1c0d"+
		"\n\u01c9\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\5\u01cb\u1c17\n\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c35\n\u01cc\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c3d\n\u01cd\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1c50\n\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\7\u01ce\u1d3c\n\u01ce\f\u01ce\16\u01ce\u1d3f\13\u01ce\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1d4a"+
		"\n\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\7\u01cf\u1d91"+
		"\n\u01cf\f\u01cf\16\u01cf\u1d94\13\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1da9\n\u01d0"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1eac\n\u01d1\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1eb3\n\u01d2\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\5\u01d3\u1ec0\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\7\u01d5\u1ecd\n\u01d5\f\u01d5"+
		"\16\u01d5\u1ed0\13\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6"+
		"\u1ed7\n\u01d6\3\u01d7\3\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1ee0\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u1ef4\n\u01d9\3\u01da\3\u01da\3\u01da"+
		"\5\u01da\u1ef9\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\7\u01db\u1f01\n\u01db\f\u01db\16\u01db\u1f04\13\u01db\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1f0f"+
		"\n\u01dd\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01df"+
		"\3\u01df\5\u01df\u1f1a\n\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0"+
		"\u1f20\n\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1f27\n"+
		"\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1f2f\n"+
		"\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3"+
		"\3\u01e3\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u1f3d\n\u01e3\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1f4d\n\u01e4\3\u01e5\3\u01e5\3\u01e6"+
		"\3\u01e6\5\u01e6\u1f53\n\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1f5d\n\u01e8\3\u01e9\3\u01e9\3\u01e9"+
		"\3\u01e9\3\u01e9\3\u01e9\5\u01e9\u1f65\n\u01e9\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\5\u01ea\u1f73\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb"+
		"\7\u01eb\u1f7b\n\u01eb\f\u01eb\16\u01eb\u1f7e\13\u01eb\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\7\u01ec\u1f86\n\u01ec\f\u01ec\16\u01ec"+
		"\u1f89\13\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u1f90"+
		"\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\7\u01ee\u1f98"+
		"\n\u01ee\f\u01ee\16\u01ee\u1f9b\13\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef"+
		"\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1fa7\n\u01ef"+
		"\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\7\u01f0\u1faf\n\u01f0"+
		"\f\u01f0\16\u01f0\u1fb2\13\u01f0\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1"+
		"\5\u01f1\u1fb9\n\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\5\u01f2\u1fc3\n\u01f2\3\u01f3\3\u01f3\3\u01f3\3\u01f3"+
		"\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\5\u01f3\u1fce\n\u01f3\3\u01f4"+
		"\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1fd8"+
		"\n\u01f5\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6"+
		"\u1fea\n\u01f6\3\u01f7\3\u01f7\3\u01f7\3\u01f8\3\u01f8\3\u01f8\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1ff9\n\u01f9"+
		"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u2000\n\u01fa\3\u01fb"+
		"\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc"+
		"\3\u01fc\7\u01fc\u200d\n\u01fc\f\u01fc\16\u01fc\u2010\13\u01fc\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u201a"+
		"\n\u01fe\3\u01ff\3\u01ff\5\u01ff\u201e\n\u01ff\3\u0200\3\u0200\3\u0200"+
		"\3\u0200\5\u0200\u2024\n\u0200\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\5\u0201\u2034\n\u0201\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\7\u0202"+
		"\u203b\n\u0202\f\u0202\16\u0202\u203e\13\u0202\3\u0203\3\u0203\3\u0203"+
		"\7\u0203\u2043\n\u0203\f\u0203\16\u0203\u2046\13\u0203\3\u0204\3\u0204"+
		"\5\u0204\u204a\n\u0204\3\u0205\3\u0205\5\u0205\u204e\n\u0205\3\u0206\3"+
		"\u0206\3\u0206\3\u0206\3\u0206\3\u0206\7\u0206\u2056\n\u0206\f\u0206\16"+
		"\u0206\u2059\13\u0206\3\u0207\3\u0207\3\u0207\3\u0207\3\u0208\3\u0208"+
		"\3\u0208\3\u0208\3\u0208\3\u0208\7\u0208\u2065\n\u0208\f\u0208\16\u0208"+
		"\u2068\13\u0208\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209"+
		"\3\u0209\3\u0209\5\u0209\u2073\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a"+
		"\3\u020a\3\u020a\7\u020a\u207b\n\u020a\f\u020a\16\u020a\u207e\13\u020a"+
		"\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u2084\n\u020b\3\u020c\3\u020c"+
		"\3\u020c\3\u020c\3\u020c\3\u020c\7\u020c\u208c\n\u020c\f\u020c\16\u020c"+
		"\u208f\13\u020c\3\u020d\3\u020d\3\u020e\3\u020e\3\u020f\3\u020f\3\u0210"+
		"\3\u0210\3\u0211\3\u0211\3\u0212\3\u0212\3\u0213\3\u0213\3\u0213\3\u0213"+
		"\5\u0213\u20a1\n\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u20c2"+
		"\n\u0214\3\u0215\3\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\5\u0218\u20cf\n\u0218\3\u0219\3\u0219\3\u0219"+
		"\5\u0219\u20d4\n\u0219\3\u021a\3\u021a\3\u021a\5\u021a\u20d9\n\u021a\3"+
		"\u021b\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b\u20e0\n\u021b\3\u021c\3"+
		"\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021f\3\u021f\3\u021f\2U\4\n"+
		"\f.8:\\lr\u0080\u008c\u0092\u009e\u00a0\u00aa\u00b4\u00c0\u00c6\u00ec"+
		"\u00f4\u010e\u0114\u011e\u0128\u012c\u0146\u0158\u0164\u016a\u0178\u0182"+
		"\u0188\u018e\u019e\u01ae\u01b2\u01d4\u01da\u01e0\u01ee\u0200\u0212\u0216"+
		"\u0224\u0230\u0234\u0244\u0264\u027e\u028a\u0294\u02ac\u02c0\u02d8\u02ec"+
		"\u02f6\u02fc\u0302\u0308\u030c\u0320\u0340\u0346\u034a\u0350\u035a\u0366"+
		"\u036c\u039a\u039c\u03a8\u03b4\u03d4\u03d6\u03da\u03de\u03f6\u0402\u0404"+
		"\u040a\u040e\u0412\u0416\u0220\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322"+
		"\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a"+
		"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352"+
		"\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a"+
		"\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382"+
		"\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a"+
		"\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2"+
		"\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca"+
		"\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2"+
		"\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa"+
		"\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412"+
		"\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a"+
		"\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\2\25\4\2\33\33"+
		"\u0083\u0083\4\2uu\u00b1\u00b1\4\2  \u0169\u0169\b\2\"\"RRYYss\u00b8\u00b8"+
		"\u0158\u0158\4\2\u0138\u0138\u0154\u0154\4\2  \u00b4\u00b4\6\2\u00a3\u00a3"+
		"\u0143\u0143\u0160\u0160\u0173\u0173\4\2\u00b7\u00b7\u015f\u015f\6\2w"+
		"w\u00c1\u00c1\u0141\u0141\u017d\u017d\3\2&\'\3\2\u0138\u0139\4\2\u0099"+
		"\u0099\u00ee\u00ee\4\2ZZ\u0080\u0080\5\2\"\"))\u0150\u0150\7\2\4\5\t\t"+
		"\13\f\17\20\23\24Q\2\27\35\37\37!!#%-.\60\61\63\65<@CDGGILQTVWY^abjos"+
		"suy{}\u0080\u0084\u0086\u0088\u008a\u008b\u008d\u0090\u0092\u0094\u0097"+
		"\u0097\u0099\u0099\u009b\u009b\u009d\u009d\u009f\u009f\u00a2\u00a4\u00a6"+
		"\u00a6\u00a9\u00a9\u00ab\u00af\u00b1\u00b3\u00b5\u00ba\u00bc\u00bc\u00bf"+
		"\u00c2\u00c7\u00c7\u00ca\u00ca\u00cc\u00d2\u00d4\u00d4\u00d7\u00d7\u00da"+
		"\u00dc\u00df\u00ea\u00ee\u00ef\u00f2\u00f3\u00f5\u00f5\u00f8\u00f8\u00fa"+
		"\u00fc\u00fe\u00fe\u0101\u0103\u010b\u0111\u0113\u0113\u0115\u0115\u0117"+
		"\u0119\u011b\u0121\u0123\u0126\u0128\u0131\u0133\u0134\u0136\u0137\u0139"+
		"\u0140\u0142\u0146\u0148\u0148\u014a\u014b\u014d\u014d\u014f\u014f\u0151"+
		"\u015a\u015d\u015e\u0160\u0165\u016b\u016b\u016d\u016d\u0170\u0176\u0179"+
		"\u017d\u0180\u0184\u0188\u0188\u018a\u018c\u018f\u018f\u0192\u0196\u01a0"+
		"\u01a2\"\2\66\679:EFMMpq\u0091\u0091\u0095\u0095\u009a\u009a\u00a7\u00a7"+
		"\u00be\u00be\u00c3\u00c4\u00c6\u00c6\u00d5\u00d5\u00eb\u00eb\u00ed\u00ed"+
		"\u00f0\u00f0\u00f7\u00f7\u00f9\u00f9\u0106\u0106\u010a\u010a\u0114\u0114"+
		"\u0116\u0116\u0122\u0122\u0138\u0138\u0149\u0149\u014e\u014e\u015b\u015b"+
		"\u0167\u0168\u016c\u016c\u016e\u016e\u0185\u0186\u0197\u019f\25\2\62\62"+
		"88OOUU``ff\u00a0\u00a1\u00b0\u00b0\u00bd\u00bd\u00c8\u00c9\u00cb\u00cb"+
		"\u00d6\u00d6\u00d8\u00d8\u00ec\u00ec\u00f4\u00f4\u0107\u0109\u0135\u0135"+
		"\u014c\u014c\u0189\u0189:\2\36\36  \"\"&,//;;ABHHNNPPXX__cegirrttzz~\177"+
		"\u0085\u0085\u0089\u0089\u008c\u008c\u0096\u0096\u0098\u0098\u009c\u009c"+
		"\u009e\u009e\u00a5\u00a5\u00a8\u00a8\u00aa\u00aa\u00b4\u00b4\u00bb\u00bb"+
		"\u00c5\u00c5\u00d3\u00d3\u00d9\u00d9\u00dd\u00de\u00f1\u00f1\u00f6\u00f6"+
		"\u00fd\u00fd\u00ff\u0100\u0104\u0105\u0112\u0112\u011a\u011a\u0127\u0127"+
		"\u0132\u0132\u0141\u0141\u0147\u0147\u0150\u0150\u015c\u015c\u015f\u015f"+
		"\u0166\u0166\u0169\u016a\u016f\u016f\u0177\u0178\u017e\u017f\u0187\u0187"+
		"\u018d\u018e\u0190\u0191\u23f3\2\u043e\3\2\2\2\4\u0440\3\2\2\2\6\u04ba"+
		"\3\2\2\2\b\u04bc\3\2\2\2\n\u04c4\3\2\2\2\f\u04cc\3\2\2\2\16\u04e8\3\2"+
		"\2\2\20\u04f7\3\2\2\2\22\u04f9\3\2\2\2\24\u0501\3\2\2\2\26\u050d\3\2\2"+
		"\2\30\u050f\3\2\2\2\32\u0515\3\2\2\2\34\u051d\3\2\2\2\36\u052a\3\2\2\2"+
		" \u0534\3\2\2\2\"\u0536\3\2\2\2$\u053e\3\2\2\2&\u0545\3\2\2\2(\u054f\3"+
		"\2\2\2*\u055d\3\2\2\2,\u0561\3\2\2\2.\u0563\3\2\2\2\60\u0571\3\2\2\2\62"+
		"\u057b\3\2\2\2\64\u0585\3\2\2\2\66\u05b2\3\2\2\28\u05b4\3\2\2\2:\u05bf"+
		"\3\2\2\2<\u05cc\3\2\2\2>\u05d5\3\2\2\2@\u05db\3\2\2\2B\u05ed\3\2\2\2D"+
		"\u05f2\3\2\2\2F\u05f6\3\2\2\2H\u0606\3\2\2\2J\u060b\3\2\2\2L\u0610\3\2"+
		"\2\2N\u0620\3\2\2\2P\u0622\3\2\2\2R\u0629\3\2\2\2T\u062b\3\2\2\2V\u062d"+
		"\3\2\2\2X\u0637\3\2\2\2Z\u0669\3\2\2\2\\\u066b\3\2\2\2^\u071b\3\2\2\2"+
		"`\u0722\3\2\2\2b\u0727\3\2\2\2d\u072c\3\2\2\2f\u0731\3\2\2\2h\u0733\3"+
		"\2\2\2j\u073a\3\2\2\2l\u073c\3\2\2\2n\u0756\3\2\2\2p\u0758\3\2\2\2r\u075d"+
		"\3\2\2\2t\u0782\3\2\2\2v\u0788\3\2\2\2x\u07a0\3\2\2\2z\u07a2\3\2\2\2|"+
		"\u07a7\3\2\2\2~\u07ae\3\2\2\2\u0080\u07b0\3\2\2\2\u0082\u07d8\3\2\2\2"+
		"\u0084\u07dc\3\2\2\2\u0086\u07e1\3\2\2\2\u0088\u07e8\3\2\2\2\u008a\u07ec"+
		"\3\2\2\2\u008c\u07ee\3\2\2\2\u008e\u07f9\3\2\2\2\u0090\u0804\3\2\2\2\u0092"+
		"\u0806\3\2\2\2\u0094\u0811\3\2\2\2\u0096\u0847\3\2\2\2\u0098\u0855\3\2"+
		"\2\2\u009a\u0859\3\2\2\2\u009c\u0860\3\2\2\2\u009e\u0862\3\2\2\2\u00a0"+
		"\u086d\3\2\2\2\u00a2\u087b\3\2\2\2\u00a4\u087f\3\2\2\2\u00a6\u0881\3\2"+
		"\2\2\u00a8\u0886\3\2\2\2\u00aa\u088b\3\2\2\2\u00ac\u089b\3\2\2\2\u00ae"+
		"\u08b7\3\2\2\2\u00b0\u08c0\3\2\2\2\u00b2\u08c2\3\2\2\2\u00b4\u08c6\3\2"+
		"\2\2\u00b6\u08d2\3\2\2\2\u00b8\u08d9\3\2\2\2\u00ba\u0911\3\2\2\2\u00bc"+
		"\u0916\3\2\2\2\u00be\u091d\3\2\2\2\u00c0\u091f\3\2\2\2\u00c2\u092a\3\2"+
		"\2\2\u00c4\u0933\3\2\2\2\u00c6\u0935\3\2\2\2\u00c8\u094b\3\2\2\2\u00ca"+
		"\u0953\3\2\2\2\u00cc\u095e\3\2\2\2\u00ce\u0960\3\2\2\2\u00d0\u0964\3\2"+
		"\2\2\u00d2\u0970\3\2\2\2\u00d4\u0978\3\2\2\2\u00d6\u0981\3\2\2\2\u00d8"+
		"\u098f\3\2\2\2\u00da\u0994\3\2\2\2\u00dc\u099b\3\2\2\2\u00de\u099d\3\2"+
		"\2\2\u00e0\u09a1\3\2\2\2\u00e2\u09a9\3\2\2\2\u00e4\u09b5\3\2\2\2\u00e6"+
		"\u09b7\3\2\2\2\u00e8\u09c9\3\2\2\2\u00ea\u09cd\3\2\2\2\u00ec\u09cf\3\2"+
		"\2\2\u00ee\u09f8\3\2\2\2\u00f0\u09fc\3\2\2\2\u00f2\u0a02\3\2\2\2\u00f4"+
		"\u0a04\3\2\2\2\u00f6\u0a21\3\2\2\2\u00f8\u0a25\3\2\2\2\u00fa\u0a2b\3\2"+
		"\2\2\u00fc\u0a30\3\2\2\2\u00fe\u0a36\3\2\2\2\u0100\u0a3a\3\2\2\2\u0102"+
		"\u0a4a\3\2\2\2\u0104\u0a4e\3\2\2\2\u0106\u0a50\3\2\2\2\u0108\u0a5a\3\2"+
		"\2\2\u010a\u0a64\3\2\2\2\u010c\u0a79\3\2\2\2\u010e\u0a7b\3\2\2\2\u0110"+
		"\u0a89\3\2\2\2\u0112\u0a8b\3\2\2\2\u0114\u0a91\3\2\2\2\u0116\u0a99\3\2"+
		"\2\2\u0118\u0b4e\3\2\2\2\u011a\u0b50\3\2\2\2\u011c\u0b60\3\2\2\2\u011e"+
		"\u0b62\3\2\2\2\u0120\u0b6e\3\2\2\2\u0122\u0b80\3\2\2\2\u0124\u0b91\3\2"+
		"\2\2\u0126\u0b99\3\2\2\2\u0128\u0b9b\3\2\2\2\u012a\u0ba6\3\2\2\2\u012c"+
		"\u0bab\3\2\2\2\u012e\u0bbd\3\2\2\2\u0130\u0bbf\3\2\2\2\u0132\u0bc2\3\2"+
		"\2\2\u0134\u0bc4\3\2\2\2\u0136\u0bc6\3\2\2\2\u0138\u0bd4\3\2\2\2\u013a"+
		"\u0bda\3\2\2\2\u013c\u0bde\3\2\2\2\u013e\u0bec\3\2\2\2\u0140\u0bfe\3\2"+
		"\2\2\u0142\u0c15\3\2\2\2\u0144\u0c1d\3\2\2\2\u0146\u0c1f\3\2\2\2\u0148"+
		"\u0c2a\3\2\2\2\u014a\u0c3a\3\2\2\2\u014c\u0c3c\3\2\2\2\u014e\u0c48\3\2"+
		"\2\2\u0150\u0c5c\3\2\2\2\u0152\u0c5e\3\2\2\2\u0154\u0c8c\3\2\2\2\u0156"+
		"\u0c92\3\2\2\2\u0158\u0c94\3\2\2\2\u015a\u0ca6\3\2\2\2\u015c\u0cad\3\2"+
		"\2\2\u015e\u0cb1\3\2\2\2\u0160\u0cb3\3\2\2\2\u0162\u0cbb\3\2\2\2\u0164"+
		"\u0cc0\3\2\2\2\u0166\u0cce\3\2\2\2\u0168\u0cd3\3\2\2\2\u016a\u0cd5\3\2"+
		"\2\2\u016c\u0ce8\3\2\2\2\u016e\u0cfa\3\2\2\2\u0170\u0cfc\3\2\2\2\u0172"+
		"\u0d05\3\2\2\2\u0174\u0d61\3\2\2\2\u0176\u0d63\3\2\2\2\u0178\u0d67\3\2"+
		"\2\2\u017a\u0d77\3\2\2\2\u017c\u0d7e\3\2\2\2\u017e\u0d87\3\2\2\2\u0180"+
		"\u0d89\3\2\2\2\u0182\u0d8d\3\2\2\2\u0184\u0d98\3\2\2\2\u0186\u0d9e\3\2"+
		"\2\2\u0188\u0da0\3\2\2\2\u018a\u0dc4\3\2\2\2\u018c\u0dc6\3\2\2\2\u018e"+
		"\u0dd4\3\2\2\2\u0190\u0dfb\3\2\2\2\u0192\u0dff\3\2\2\2\u0194\u0e04\3\2"+
		"\2\2\u0196\u0e0d\3\2\2\2\u0198\u0e11\3\2\2\2\u019a\u0e13\3\2\2\2\u019c"+
		"\u0e2c\3\2\2\2\u019e\u0e2e\3\2\2\2\u01a0\u0e45\3\2\2\2\u01a2\u0e59\3\2"+
		"\2\2\u01a4\u0e6d\3\2\2\2\u01a6\u0e6f\3\2\2\2\u01a8\u0e75\3\2\2\2\u01aa"+
		"\u0e96\3\2\2\2\u01ac\u0eb0\3\2\2\2\u01ae\u0eb2\3\2\2\2\u01b0\u0ec1\3\2"+
		"\2\2\u01b2\u0ec3\3\2\2\2\u01b4\u0ecf\3\2\2\2\u01b6\u0eda\3\2\2\2\u01b8"+
		"\u0f70\3\2\2\2\u01ba\u0f86\3\2\2\2\u01bc\u0f8a\3\2\2\2\u01be\u0fbd\3\2"+
		"\2\2\u01c0\u0fc2\3\2\2\2\u01c2\u0fd0\3\2\2\2\u01c4\u0fd4\3\2\2\2\u01c6"+
		"\u0fda\3\2\2\2\u01c8\u101e\3\2\2\2\u01ca\u1020\3\2\2\2\u01cc\u1024\3\2"+
		"\2\2\u01ce\u1026\3\2\2\2\u01d0\u1041\3\2\2\2\u01d2\u1052\3\2\2\2\u01d4"+
		"\u1054\3\2\2\2\u01d6\u1068\3\2\2\2\u01d8\u1096\3\2\2\2\u01da\u1098\3\2"+
		"\2\2\u01dc\u10a6\3\2\2\2\u01de\u10ac\3\2\2\2\u01e0\u10ae\3\2\2\2\u01e2"+
		"\u10b9\3\2\2\2\u01e4\u10bc\3\2\2\2\u01e6\u10d4\3\2\2\2\u01e8\u10da\3\2"+
		"\2\2\u01ea\u10e0\3\2\2\2\u01ec\u10e2\3\2\2\2\u01ee\u10e8\3\2\2\2\u01f0"+
		"\u10f9\3\2\2\2\u01f2\u1116\3\2\2\2\u01f4\u1118\3\2\2\2\u01f6\u111a\3\2"+
		"\2\2\u01f8\u112b\3\2\2\2\u01fa\u112f\3\2\2\2\u01fc\u1133\3\2\2\2\u01fe"+
		"\u1138\3\2\2\2\u0200\u113a\3\2\2\2\u0202\u1159\3\2\2\2\u0204\u115e\3\2"+
		"\2\2\u0206\u1164\3\2\2\2\u0208\u1169\3\2\2\2\u020a\u116e\3\2\2\2\u020c"+
		"\u1195\3\2\2\2\u020e\u119a\3\2\2\2\u0210\u11a2\3\2\2\2\u0212\u11a4\3\2"+
		"\2\2\u0214\u11b5\3\2\2\2\u0216\u11b7\3\2\2\2\u0218\u11d1\3\2\2\2\u021a"+
		"\u11d9\3\2\2\2\u021c\u11db\3\2\2\2\u021e\u11dd\3\2\2\2\u0220\u11eb\3\2"+
		"\2\2\u0222\u11f6\3\2\2\2\u0224\u11f8\3\2\2\2\u0226\u1221\3\2\2\2\u0228"+
		"\u1229\3\2\2\2\u022a\u1230\3\2\2\2\u022c\u1235\3\2\2\2\u022e\u1237\3\2"+
		"\2\2\u0230\u123a\3\2\2\2\u0232\u1245\3\2\2\2\u0234\u124b\3\2\2\2\u0236"+
		"\u1257\3\2\2\2\u0238\u1267\3\2\2\2\u023a\u1277\3\2\2\2\u023c\u1287\3\2"+
		"\2\2\u023e\u129f\3\2\2\2\u0240\u12a6\3\2\2\2\u0242\u12a8\3\2\2\2\u0244"+
		"\u12ab\3\2\2\2\u0246\u12b8\3\2\2\2\u0248\u12dc\3\2\2\2\u024a\u12e3\3\2"+
		"\2\2\u024c\u12e5\3\2\2\2\u024e\u12f2\3\2\2\2\u0250\u1303\3\2\2\2\u0252"+
		"\u1305\3\2\2\2\u0254\u1309\3\2\2\2\u0256\u145d\3\2\2\2\u0258\u1461\3\2"+
		"\2\2\u025a\u1466\3\2\2\2\u025c\u151c\3\2\2\2\u025e\u15ac\3\2\2\2\u0260"+
		"\u15ae\3\2\2\2\u0262\u15c2\3\2\2\2\u0264\u15c4\3\2\2\2\u0266\u15d4\3\2"+
		"\2\2\u0268\u15d8\3\2\2\2\u026a\u15da\3\2\2\2\u026c\u15df\3\2\2\2\u026e"+
		"\u15f1\3\2\2\2\u0270\u15f3\3\2\2\2\u0272\u15fa\3\2\2\2\u0274\u15fc\3\2"+
		"\2\2\u0276\u1603\3\2\2\2\u0278\u162f\3\2\2\2\u027a\u1634\3\2\2\2\u027c"+
		"\u1640\3\2\2\2\u027e\u1642\3\2\2\2\u0280\u1651\3\2\2\2\u0282\u1669\3\2"+
		"\2\2\u0284\u1677\3\2\2\2\u0286\u1679\3\2\2\2\u0288\u167c\3\2\2\2\u028a"+
		"\u1684\3\2\2\2\u028c\u16cd\3\2\2\2\u028e\u16d1\3\2\2\2\u0290\u16e2\3\2"+
		"\2\2\u0292\u16e4\3\2\2\2\u0294\u16e9\3\2\2\2\u0296\u16f1\3\2\2\2\u0298"+
		"\u16fe\3\2\2\2\u029a\u1700\3\2\2\2\u029c\u1739\3\2\2\2\u029e\u173d\3\2"+
		"\2\2\u02a0\u173f\3\2\2\2\u02a2\u178e\3\2\2\2\u02a4\u1790\3\2\2\2\u02a6"+
		"\u17a8\3\2\2\2\u02a8\u17ad\3\2\2\2\u02aa\u17cc\3\2\2\2\u02ac\u17ce\3\2"+
		"\2\2\u02ae\u17dd\3\2\2\2\u02b0\u17e7\3\2\2\2\u02b2\u17e9\3\2\2\2\u02b4"+
		"\u17ed\3\2\2\2\u02b6\u17f1\3\2\2\2\u02b8\u17f5\3\2\2\2\u02ba\u17fc\3\2"+
		"\2\2\u02bc\u180e\3\2\2\2\u02be\u1817\3\2\2\2\u02c0\u1819\3\2\2\2\u02c2"+
		"\u1824\3\2\2\2\u02c4\u182a\3\2\2\2\u02c6\u182f\3\2\2\2\u02c8\u1831\3\2"+
		"\2\2\u02ca\u183c\3\2\2\2\u02cc\u1842\3\2\2\2\u02ce\u1852\3\2\2\2\u02d0"+
		"\u1859\3\2\2\2\u02d2\u1865\3\2\2\2\u02d4\u1867\3\2\2\2\u02d6\u1876\3\2"+
		"\2\2\u02d8\u1878\3\2\2\2\u02da\u1883\3\2\2\2\u02dc\u1889\3\2\2\2\u02de"+
		"\u188b\3\2\2\2\u02e0\u1896\3\2\2\2\u02e2\u1898\3\2\2\2\u02e4\u18a3\3\2"+
		"\2\2\u02e6\u18b5\3\2\2\2\u02e8\u18b9\3\2\2\2\u02ea\u18bb\3\2\2\2\u02ec"+
		"\u18c4\3\2\2\2\u02ee\u18d1\3\2\2\2\u02f0\u18d3\3\2\2\2\u02f2\u18d7\3\2"+
		"\2\2\u02f4\u18dd\3\2\2\2\u02f6\u18e0\3\2\2\2\u02f8\u18eb\3\2\2\2\u02fa"+
		"\u18f3\3\2\2\2\u02fc\u18f5\3\2\2\2\u02fe\u1909\3\2\2\2\u0300\u190d\3\2"+
		"\2\2\u0302\u1918\3\2\2\2\u0304\u1955\3\2\2\2\u0306\u1959\3\2\2\2\u0308"+
		"\u1969\3\2\2\2\u030a\u198a\3\2\2\2\u030c\u198c\3\2\2\2\u030e\u1997\3\2"+
		"\2\2\u0310\u19a0\3\2\2\2\u0312\u19a5\3\2\2\2\u0314\u19ca\3\2\2\2\u0316"+
		"\u19ce\3\2\2\2\u0318\u19d3\3\2\2\2\u031a\u19de\3\2\2\2\u031c\u19e2\3\2"+
		"\2\2\u031e\u19e4\3\2\2\2\u0320\u19e8\3\2\2\2\u0322\u19fc\3\2\2\2\u0324"+
		"\u1a06\3\2\2\2\u0326\u1a0a\3\2\2\2\u0328\u1a19\3\2\2\2\u032a\u1a21\3\2"+
		"\2\2\u032c\u1a25\3\2\2\2\u032e\u1a27\3\2\2\2\u0330\u1a2f\3\2\2\2\u0332"+
		"\u1a31\3\2\2\2\u0334\u1a33\3\2\2\2\u0336\u1a35\3\2\2\2\u0338\u1a3b\3\2"+
		"\2\2\u033a\u1a40\3\2\2\2\u033c\u1a46\3\2\2\2\u033e\u1a4a\3\2\2\2\u0340"+
		"\u1a4c\3\2\2\2\u0342\u1a60\3\2\2\2\u0344\u1a65\3\2\2\2\u0346\u1a67\3\2"+
		"\2\2\u0348\u1a76\3\2\2\2\u034a\u1a78\3\2\2\2\u034c\u1a85\3\2\2\2\u034e"+
		"\u1aa6\3\2\2\2\u0350\u1aca\3\2\2\2\u0352\u1af8\3\2\2\2\u0354\u1b07\3\2"+
		"\2\2\u0356\u1b10\3\2\2\2\u0358\u1b1d\3\2\2\2\u035a\u1b1f\3\2\2\2\u035c"+
		"\u1b32\3\2\2\2\u035e\u1b34\3\2\2\2\u0360\u1b39\3\2\2\2\u0362\u1b42\3\2"+
		"\2\2\u0364\u1b46\3\2\2\2\u0366\u1b48\3\2\2\2\u0368\u1b53\3\2\2\2\u036a"+
		"\u1b72\3\2\2\2\u036c\u1b74\3\2\2\2\u036e\u1b90\3\2\2\2\u0370\u1b96\3\2"+
		"\2\2\u0372\u1b9f\3\2\2\2\u0374\u1ba6\3\2\2\2\u0376\u1bb8\3\2\2\2\u0378"+
		"\u1bbf\3\2\2\2\u037a\u1bc3\3\2\2\2\u037c\u1bc7\3\2\2\2\u037e\u1bc9\3\2"+
		"\2\2\u0380\u1bcf\3\2\2\2\u0382\u1bd4\3\2\2\2\u0384\u1bd8\3\2\2\2\u0386"+
		"\u1bda\3\2\2\2\u0388\u1be0\3\2\2\2\u038a\u1bf0\3\2\2\2\u038c\u1bf4\3\2"+
		"\2\2\u038e\u1bfa\3\2\2\2\u0390\u1c0c\3\2\2\2\u0392\u1c0e\3\2\2\2\u0394"+
		"\u1c16\3\2\2\2\u0396\u1c34\3\2\2\2\u0398\u1c3c\3\2\2\2\u039a\u1c4f\3\2"+
		"\2\2\u039c\u1d49\3\2\2\2\u039e\u1da8\3\2\2\2\u03a0\u1eab\3\2\2\2\u03a2"+
		"\u1eb2\3\2\2\2\u03a4\u1ebf\3\2\2\2\u03a6\u1ec1\3\2\2\2\u03a8\u1ec6\3\2"+
		"\2\2\u03aa\u1ed6\3\2\2\2\u03ac\u1ed8\3\2\2\2\u03ae\u1edf\3\2\2\2\u03b0"+
		"\u1ef3\3\2\2\2\u03b2\u1ef8\3\2\2\2\u03b4\u1efa\3\2\2\2\u03b6\u1f05\3\2"+
		"\2\2\u03b8\u1f0e\3\2\2\2\u03ba\u1f10\3\2\2\2\u03bc\u1f19\3\2\2\2\u03be"+
		"\u1f1f\3\2\2\2\u03c0\u1f26\3\2\2\2\u03c2\u1f2e\3\2\2\2\u03c4\u1f3c\3\2"+
		"\2\2\u03c6\u1f4c\3\2\2\2\u03c8\u1f4e\3\2\2\2\u03ca\u1f52\3\2\2\2\u03cc"+
		"\u1f54\3\2\2\2\u03ce\u1f5c\3\2\2\2\u03d0\u1f64\3\2\2\2\u03d2\u1f72\3\2"+
		"\2\2\u03d4\u1f74\3\2\2\2\u03d6\u1f7f\3\2\2\2\u03d8\u1f8f\3\2\2\2\u03da"+
		"\u1f91\3\2\2\2\u03dc\u1fa6\3\2\2\2\u03de\u1fa8\3\2\2\2\u03e0\u1fb8\3\2"+
		"\2\2\u03e2\u1fc2\3\2\2\2\u03e4\u1fcd\3\2\2\2\u03e6\u1fcf\3\2\2\2\u03e8"+
		"\u1fd7\3\2\2\2\u03ea\u1fe9\3\2\2\2\u03ec\u1feb\3\2\2\2\u03ee\u1fee\3\2"+
		"\2\2\u03f0\u1ff8\3\2\2\2\u03f2\u1fff\3\2\2\2\u03f4\u2001\3\2\2\2\u03f6"+
		"\u2007\3\2\2\2\u03f8\u2011\3\2\2\2\u03fa\u2019\3\2\2\2\u03fc\u201d\3\2"+
		"\2\2\u03fe\u2023\3\2\2\2\u0400\u2033\3\2\2\2\u0402\u2035\3\2\2\2\u0404"+
		"\u203f\3\2\2\2\u0406\u2049\3\2\2\2\u0408\u204d\3\2\2\2\u040a\u204f\3\2"+
		"\2\2\u040c\u205a\3\2\2\2\u040e\u205e\3\2\2\2\u0410\u2072\3\2\2\2\u0412"+
		"\u2074\3\2\2\2\u0414\u2083\3\2\2\2\u0416\u2085\3\2\2\2\u0418\u2090\3\2"+
		"\2\2\u041a\u2092\3\2\2\2\u041c\u2094\3\2\2\2\u041e\u2096\3\2\2\2\u0420"+
		"\u2098\3\2\2\2\u0422\u209a\3\2\2\2\u0424\u20a0\3\2\2\2\u0426\u20c1\3\2"+
		"\2\2\u0428\u20c3\3\2\2\2\u042a\u20c5\3\2\2\2\u042c\u20c7\3\2\2\2\u042e"+
		"\u20ce\3\2\2\2\u0430\u20d3\3\2\2\2\u0432\u20d8\3\2\2\2\u0434\u20df\3\2"+
		"\2\2\u0436\u20e1\3\2\2\2\u0438\u20e3\3\2\2\2\u043a\u20e5\3\2\2\2\u043c"+
		"\u20e7\3\2\2\2\u043e\u043f\5\4\3\2\u043f\3\3\2\2\2\u0440\u0441\b\3\1\2"+
		"\u0441\u0442\5\6\4\2\u0442\u0448\3\2\2\2\u0443\u0444\f\4\2\2\u0444\u0445"+
		"\7\21\2\2\u0445\u0447\5\6\4\2\u0446\u0443\3\2\2\2\u0447\u044a\3\2\2\2"+
		"\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449\5\3\2\2\2\u044a\u0448\3"+
		"\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u044b\u04bb\5\u0290\u0149\2\u044c\u04bb\5\u0292\u014a\2\u044d\u04bb"+
		"\5\u01ec\u00f7\2\u044e\u04bb\5\u029c\u014f\2\u044f\u04bb\5\u018a\u00c6"+
		"\2\u0450\u04bb\5\u0112\u008a\2\u0451\u04bb\5\u0118\u008d\2\u0452\u04bb"+
		"\5\u0124\u0093\2\u0453\u04bb\5\u0140\u00a1\2\u0454\u04bb\5\u014a\u00a6"+
		"\2\u0455\u04bb\5\u0232\u011a\2\u0456\u04bb\5$\23\2\u0457\u04bb\5\u025c"+
		"\u012f\2\u0458\u04bb\5\u025e\u0130\2\u0459\u04bb\5\u00e8u\2\u045a\u04bb"+
		"\5Z.\2\u045b\u04bb\5p9\2\u045c\u04bb\5\30\r\2\u045d\u04bb\5\24\13\2\u045e"+
		"\u04bb\5\u02a2\u0152\2\u045f\u04bb\5\u02a0\u0151\2\u0460\u04bb\5\u0152"+
		"\u00aa\2\u0461\u04bb\5\34\17\2\u0462\u04bb\5\32\16\2\u0463\u04bb\5\u02b0"+
		"\u0159\2\u0464\u04bb\5V,\2\u0465\u04bb\5v<\2\u0466\u04bb\5\u02a6\u0154"+
		"\2\u0467\u04bb\5\u01b8\u00dd\2\u0468\u04bb\5P)\2\u0469\u04bb\5x=\2\u046a"+
		"\u04bb\5\u00e0q\2\u046b\u04bb\5\u0170\u00b9\2\u046c\u04bb\5\u0248\u0125"+
		"\2\u046d\u04bb\5\u02a4\u0153\2\u046e\u04bb\5\u029a\u014e\2\u046f\u04bb"+
		"\5\u010c\u0087\2\u0470\u04bb\5\u011a\u008e\2\u0471\u04bb\5\u0136\u009c"+
		"\2\u0472\u04bb\5\u0142\u00a2\2\u0473\u04bb\5\u020c\u0107\2\u0474\u04bb"+
		"\5\"\22\2\u0475\u04bb\5\u018c\u00c7\2\u0476\u04bb\5\u019a\u00ce\2\u0477"+
		"\u04bb\5\u019c\u00cf\2\u0478\u04bb\5\u00f6|\2\u0479\u04bb\5*\26\2\u047a"+
		"\u04bb\5\u00e6t\2\u047b\u04bb\5\u0096L\2\u047c\u04bb\5\u0106\u0084\2\u047d"+
		"\u04bb\5\u0154\u00ab\2\u047e\u04bb\5\b\5\2\u047f\u04bb\5\22\n\2\u0480"+
		"\u04bb\5\u014c\u00a7\2\u0481\u04bb\5\u0288\u0145\2\u0482\u04bb\5\u02d2"+
		"\u016a\2\u0483\u04bb\5\u02f8\u017d\2\u0484\u04bb\5\u0174\u00bb\2\u0485"+
		"\u04bb\5\u02de\u0170\2\u0486\u04bb\5X-\2\u0487\u04bb\5\u0242\u0122\2\u0488"+
		"\u04bb\5\u0172\u00ba\2\u0489\u04bb\5\u024c\u0127\2\u048a\u04bb\5\u0122"+
		"\u0092\2\u048b\u04bb\5\u013e\u00a0\2\u048c\u04bb\5(\25\2\u048d\u04bb\5"+
		"\u01a2\u00d2\2\u048e\u04bb\5\u01a4\u00d3\2\u048f\u04bb\5\u01a6\u00d4\2"+
		"\u0490\u04bb\5\u0102\u0082\2\u0491\u04bb\5\u026e\u0138\2\u0492\u04bb\5"+
		"\u01aa\u00d6\2\u0493\u04bb\5\u010a\u0086\2\u0494\u04bb\5\u016e\u00b8\2"+
		"\u0495\u04bb\5\36\20\2\u0496\u04bb\5 \21\2\u0497\u04bb\5\u0150\u00a9\2"+
		"\u0498\u04bb\5\u0298\u014d\2\u0499\u04bb\5\u02ce\u0168\2\u049a\u04bb\5"+
		"\u02bc\u015f\2\u049b\u04bb\5\u01c6\u00e4\2\u049c\u04bb\5\u01ce\u00e8\2"+
		"\u049d\u04bb\5\u01e4\u00f3\2\u049e\u04bb\5\u01f6\u00fc\2\u049f\u04bb\5"+
		"\u02d4\u016b\2\u04a0\u04bb\5\u0274\u013b\2\u04a1\u04bb\5\u0286\u0144\2"+
		"\u04a2\u04bb\5\u02e2\u0172\2\u04a3\u04bb\5\u0270\u0139\2\u04a4\u04bb\5"+
		"\u02c8\u0165\2\u04a5\u04bb\5\u01a8\u00d5\2\u04a6\u04bb\5\u0250\u0129\2"+
		"\u04a7\u04bb\5\u023a\u011e\2\u04a8\u04bb\5\u0238\u011d\2\u04a9\u04bb\5"+
		"\u023c\u011f\2\u04aa\u04bb\5\u0256\u012c\2\u04ab\u04bb\5\u01d0\u00e9\2"+
		"\u04ac\u04bb\5\u01e6\u00f4\2\u04ad\u04bb\5\u0260\u0131\2\u04ae\u04bb\5"+
		"\u01be\u00e0\2\u04af\u04bb\5\u0300\u0181\2\u04b0\u04bb\5\u0278\u013d\2"+
		"\u04b1\u04bb\5\u01b4\u00db\2\u04b2\u04bb\5\u0276\u013c\2\u04b3\u04bb\5"+
		"\u02ea\u0176\2\u04b4\u04bb\5\u02aa\u0156\2\u04b5\u04bb\5H%\2\u04b6\u04bb"+
		"\5\62\32\2\u04b7\u04bb\5N(\2\u04b8\u04bb\5\u0282\u0142\2\u04b9\u04bb\3"+
		"\2\2\2\u04ba\u044b\3\2\2\2\u04ba\u044c\3\2\2\2\u04ba\u044d\3\2\2\2\u04ba"+
		"\u044e\3\2\2\2\u04ba\u044f\3\2\2\2\u04ba\u0450\3\2\2\2\u04ba\u0451\3\2"+
		"\2\2\u04ba\u0452\3\2\2\2\u04ba\u0453\3\2\2\2\u04ba\u0454\3\2\2\2\u04ba"+
		"\u0455\3\2\2\2\u04ba\u0456\3\2\2\2\u04ba\u0457\3\2\2\2\u04ba\u0458\3\2"+
		"\2\2\u04ba\u0459\3\2\2\2\u04ba\u045a\3\2\2\2\u04ba\u045b\3\2\2\2\u04ba"+
		"\u045c\3\2\2\2\u04ba\u045d\3\2\2\2\u04ba\u045e\3\2\2\2\u04ba\u045f\3\2"+
		"\2\2\u04ba\u0460\3\2\2\2\u04ba\u0461\3\2\2\2\u04ba\u0462\3\2\2\2\u04ba"+
		"\u0463\3\2\2\2\u04ba\u0464\3\2\2\2\u04ba\u0465\3\2\2\2\u04ba\u0466\3\2"+
		"\2\2\u04ba\u0467\3\2\2\2\u04ba\u0468\3\2\2\2\u04ba\u0469\3\2\2\2\u04ba"+
		"\u046a\3\2\2\2\u04ba\u046b\3\2\2\2\u04ba\u046c\3\2\2\2\u04ba\u046d\3\2"+
		"\2\2\u04ba\u046e\3\2\2\2\u04ba\u046f\3\2\2\2\u04ba\u0470\3\2\2\2\u04ba"+
		"\u0471\3\2\2\2\u04ba\u0472\3\2\2\2\u04ba\u0473\3\2\2\2\u04ba\u0474\3\2"+
		"\2\2\u04ba\u0475\3\2\2\2\u04ba\u0476\3\2\2\2\u04ba\u0477\3\2\2\2\u04ba"+
		"\u0478\3\2\2\2\u04ba\u0479\3\2\2\2\u04ba\u047a\3\2\2\2\u04ba\u047b\3\2"+
		"\2\2\u04ba\u047c\3\2\2\2\u04ba\u047d\3\2\2\2\u04ba\u047e\3\2\2\2\u04ba"+
		"\u047f\3\2\2\2\u04ba\u0480\3\2\2\2\u04ba\u0481\3\2\2\2\u04ba\u0482\3\2"+
		"\2\2\u04ba\u0483\3\2\2\2\u04ba\u0484\3\2\2\2\u04ba\u0485\3\2\2\2\u04ba"+
		"\u0486\3\2\2\2\u04ba\u0487\3\2\2\2\u04ba\u0488\3\2\2\2\u04ba\u0489\3\2"+
		"\2\2\u04ba\u048a\3\2\2\2\u04ba\u048b\3\2\2\2\u04ba\u048c\3\2\2\2\u04ba"+
		"\u048d\3\2\2\2\u04ba\u048e\3\2\2\2\u04ba\u048f\3\2\2\2\u04ba\u0490\3\2"+
		"\2\2\u04ba\u0491\3\2\2\2\u04ba\u0492\3\2\2\2\u04ba\u0493\3\2\2\2\u04ba"+
		"\u0494\3\2\2\2\u04ba\u0495\3\2\2\2\u04ba\u0496\3\2\2\2\u04ba\u0497\3\2"+
		"\2\2\u04ba\u0498\3\2\2\2\u04ba\u0499\3\2\2\2\u04ba\u049a\3\2\2\2\u04ba"+
		"\u049b\3\2\2\2\u04ba\u049c\3\2\2\2\u04ba\u049d\3\2\2\2\u04ba\u049e\3\2"+
		"\2\2\u04ba\u049f\3\2\2\2\u04ba\u04a0\3\2\2\2\u04ba\u04a1\3\2\2\2\u04ba"+
		"\u04a2\3\2\2\2\u04ba\u04a3\3\2\2\2\u04ba\u04a4\3\2\2\2\u04ba\u04a5\3\2"+
		"\2\2\u04ba\u04a6\3\2\2\2\u04ba\u04a7\3\2\2\2\u04ba\u04a8\3\2\2\2\u04ba"+
		"\u04a9\3\2\2\2\u04ba\u04aa\3\2\2\2\u04ba\u04ab\3\2\2\2\u04ba\u04ac\3\2"+
		"\2\2\u04ba\u04ad\3\2\2\2\u04ba\u04ae\3\2\2\2\u04ba\u04af\3\2\2\2\u04ba"+
		"\u04b0\3\2\2\2\u04ba\u04b1\3\2\2\2\u04ba\u04b2\3\2\2\2\u04ba\u04b3\3\2"+
		"\2\2\u04ba\u04b4\3\2\2\2\u04ba\u04b5\3\2\2\2\u04ba\u04b6\3\2\2\2\u04ba"+
		"\u04b7\3\2\2\2\u04ba\u04b8\3\2\2\2\u04ba\u04b9\3\2\2\2\u04bb\7\3\2\2\2"+
		"\u04bc\u04bd\7_\2\2\u04bd\u04be\7\u0136\2\2\u04be\u04c0\5\u042c\u0217"+
		"\2\u04bf\u04c1\7\u0191\2\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1"+
		"\u04c2\3\2\2\2\u04c2\u04c3\5\n\6\2\u04c3\t\3\2\2\2\u04c4\u04c9\b\6\1\2"+
		"\u04c5\u04c6\f\4\2\2\u04c6\u04c8\5\20\t\2\u04c7\u04c5\3\2\2\2\u04c8\u04cb"+
		"\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\13\3\2\2\2\u04cb"+
		"\u04c9\3\2\2\2\u04cc\u04d1\b\7\1\2\u04cd\u04ce\f\4\2\2\u04ce\u04d0\5\16"+
		"\b\2\u04cf\u04cd\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1"+
		"\u04d2\3\2\2\2\u04d2\r\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d4\u04d5\7\u0111"+
		"\2\2\u04d5\u04e9\5\u042a\u0216\2\u04d6\u04d7\7\u0111\2\2\u04d7\u04e9\7"+
		"\u00f6\2\2\u04d8\u04d9\7\u0088\2\2\u04d9\u04da\7\u0111\2\2\u04da\u04e9"+
		"\5\u042a\u0216\2\u04db\u04dc\7\u0176\2\2\u04dc\u04dd\7\u0111\2\2\u04dd"+
		"\u04e9\5\u042a\u0216\2\u04de\u04e9\7\u00b9\2\2\u04df\u04e0\7W\2\2\u04e0"+
		"\u04e1\7\u00d9\2\2\u04e1\u04e9\5\u042e\u0218\2\u04e2\u04e3\7\u0181\2\2"+
		"\u04e3\u04e4\7\u017c\2\2\u04e4\u04e9\5\u042a\u0216\2\u04e5\u04e6\7\u017e"+
		"\2\2\u04e6\u04e9\5\u0416\u020c\2\u04e7\u04e9\7\u01a6\2\2\u04e8\u04d4\3"+
		"\2\2\2\u04e8\u04d6\3\2\2\2\u04e8\u04d8\3\2\2\2\u04e8\u04db\3\2\2\2\u04e8"+
		"\u04de\3\2\2\2\u04e8\u04df\3\2\2\2\u04e8\u04e2\3\2\2\2\u04e8\u04e5\3\2"+
		"\2\2\u04e8\u04e7\3\2\2\2\u04e9\17\3\2\2\2\u04ea\u04f8\5\16\b\2\u04eb\u04ec"+
		"\7\u015d\2\2\u04ec\u04f8\5\u0428\u0215\2\u04ed\u04ee\7\34\2\2\u04ee\u04f8"+
		"\5\u0416\u020c\2\u04ef\u04f0\7\u0136\2\2\u04f0\u04f8\5\u0416\u020c\2\u04f1"+
		"\u04f2\7\u00b4\2\2\u04f2\u04f3\7\u0136\2\2\u04f3\u04f8\5\u0416\u020c\2"+
		"\u04f4\u04f5\7\u00b4\2\2\u04f5\u04f6\7\u00a8\2\2\u04f6\u04f8\5\u0416\u020c"+
		"\2\u04f7\u04ea\3\2\2\2\u04f7\u04eb\3\2\2\2\u04f7\u04ed\3\2\2\2\u04f7\u04ef"+
		"\3\2\2\2\u04f7\u04f1\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f8\21\3\2\2\2\u04f9"+
		"\u04fa\7_\2\2\u04fa\u04fb\7\u017e\2\2\u04fb\u04fd\5\u042c\u0217\2\u04fc"+
		"\u04fe\7\u0191\2\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u04ff"+
		"\3\2\2\2\u04ff\u0500\5\n\6\2\u0500\23\3\2\2\2\u0501\u0502\7$\2\2\u0502"+
		"\u0503\7\u0136\2\2\u0503\u0505\5\u042c\u0217\2\u0504\u0506\7\u0191\2\2"+
		"\u0505\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508"+
		"\5\f\7\2\u0508\25\3\2\2\2\u0509\u050e\3\2\2\2\u050a\u050b\7\u00b4\2\2"+
		"\u050b\u050c\7m\2\2\u050c\u050e\5\u041a\u020e\2\u050d\u0509\3\2\2\2\u050d"+
		"\u050a\3\2\2\2\u050e\27\3\2\2\2\u050f\u0510\7$\2\2\u0510\u0511\7\u0136"+
		"\2\2\u0511\u0512\5\u042c\u0217\2\u0512\u0513\5\26\f\2\u0513\u0514\5J&"+
		"\2\u0514\31\3\2\2\2\u0515\u0516\7$\2\2\u0516\u0517\7\u017e\2\2\u0517\u0519"+
		"\5\u042c\u0217\2\u0518\u051a\7\u0191\2\2\u0519\u0518\3\2\2\2\u0519\u051a"+
		"\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051c\5\f\7\2\u051c\33\3\2\2\2\u051d"+
		"\u051e\7$\2\2\u051e\u051f\7\u017e\2\2\u051f\u0520\5\u042c\u0217\2\u0520"+
		"\u0521\5J&\2\u0521\35\3\2\2\2\u0522\u0523\7\u0083\2\2\u0523\u0524\7\u0136"+
		"\2\2\u0524\u052b\5\u0416\u020c\2\u0525\u0526\7\u0083\2\2\u0526\u0527\7"+
		"\u0136\2\2\u0527\u0528\7\u00af\2\2\u0528\u0529\7\u0091\2\2\u0529\u052b"+
		"\5\u0416\u020c\2\u052a\u0522\3\2\2\2\u052a\u0525\3\2\2\2\u052b\37\3\2"+
		"\2\2\u052c\u052d\7\u0083\2\2\u052d\u052e\7\u017e\2\2\u052e\u0535\5\u0416"+
		"\u020c\2\u052f\u0530\7\u0083\2\2\u0530\u0531\7\u017e\2\2\u0531\u0532\7"+
		"\u00af\2\2\u0532\u0533\7\u0091\2\2\u0533\u0535\5\u0416\u020c\2\u0534\u052c"+
		"\3\2\2\2\u0534\u052f\3\2\2\2\u0535!\3\2\2\2\u0536\u0537\7_\2\2\u0537\u0538"+
		"\7\u00a8\2\2\u0538\u053a\5\u042c\u0217\2\u0539\u053b\7\u0191\2\2\u053a"+
		"\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u053d\5\n"+
		"\6\2\u053d#\3\2\2\2\u053e\u053f\7$\2\2\u053f\u0540\7\u00a8\2\2\u0540\u0541"+
		"\5\u042c\u0217\2\u0541\u0542\5&\24\2\u0542\u0543\7\u017e\2\2\u0543\u0544"+
		"\5\u0416\u020c\2\u0544%\3\2\2\2\u0545\u0546\t\2\2\2\u0546\'\3\2\2\2\u0547"+
		"\u0548\7\u0083\2\2\u0548\u0549\7\u00a8\2\2\u0549\u0550\5\u0416\u020c\2"+
		"\u054a\u054b\7\u0083\2\2\u054b\u054c\7\u00a8\2\2\u054c\u054d\7\u00af\2"+
		"\2\u054d\u054e\7\u0091\2\2\u054e\u0550\5\u0416\u020c\2\u054f\u0547\3\2"+
		"\2\2\u054f\u054a\3\2\2\2\u0550)\3\2\2\2\u0551\u0552\7_\2\2\u0552\u0553"+
		"\7\u013c\2\2\u0553\u0554\5,\27\2\u0554\u0555\7\62\2\2\u0555\u0556\5\u042c"+
		"\u0217\2\u0556\u0557\5.\30\2\u0557\u055e\3\2\2\2\u0558\u0559\7_\2\2\u0559"+
		"\u055a\7\u013c\2\2\u055a\u055b\5\u0430\u0219\2\u055b\u055c\5.\30\2\u055c"+
		"\u055e\3\2\2\2\u055d\u0551\3\2\2\2\u055d\u0558\3\2\2\2\u055e+\3\2\2\2"+
		"\u055f\u0562\5\u0430\u0219\2\u0560\u0562\3\2\2\2\u0561\u055f\3\2\2\2\u0561"+
		"\u0560\3\2\2\2\u0562-\3\2\2\2\u0563\u0568\b\30\1\2\u0564\u0565\f\4\2\2"+
		"\u0565\u0567\5\60\31\2\u0566\u0564\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u0566"+
		"\3\2\2\2\u0568\u0569\3\2\2\2\u0569/\3\2\2\2\u056a\u0568\3\2\2\2\u056b"+
		"\u0572\5\u0096L\2\u056c\u0572\5\u01f6\u00fc\2\u056d\u0572\5\u00e6t\2\u056e"+
		"\u0572\5\u0154\u00ab\2\u056f\u0572\5\u01ce\u00e8\2\u0570\u0572\5\u0282"+
		"\u0142\2\u0571\u056b\3\2\2\2\u0571\u056c\3\2\2\2\u0571\u056d\3\2\2\2\u0571"+
		"\u056e\3\2\2\2\u0571\u056f\3\2\2\2\u0571\u0570\3\2\2\2\u0572\61\3\2\2"+
		"\2\u0573\u0574\7\u0148\2\2\u0574\u057c\5\64\33\2\u0575\u0576\7\u0148\2"+
		"\2\u0576\u0577\7\u00dc\2\2\u0577\u057c\5\64\33\2\u0578\u0579\7\u0148\2"+
		"\2\u0579\u057a\7\u0146\2\2\u057a\u057c\5\64\33\2\u057b\u0573\3\2\2\2\u057b"+
		"\u0575\3\2\2\2\u057b\u0578\3\2\2\2\u057c\63\3\2\2\2\u057d\u057e\7\u016b"+
		"\2\2\u057e\u0586\5\u027e\u0140\2\u057f\u0580\7\u0146\2\2\u0580\u0581\7"+
		"G\2\2\u0581\u0582\7+\2\2\u0582\u0583\7\u016b\2\2\u0583\u0586\5\u027e\u0140"+
		"\2\u0584\u0586\5\66\34\2\u0585\u057d\3\2\2\2\u0585\u057f\3\2\2\2\u0585"+
		"\u0584\3\2\2\2\u0586\65\3\2\2\2\u0587\u0588\58\35\2\u0588\u0589\7\u0169"+
		"\2\2\u0589\u058a\5:\36\2\u058a\u05b3\3\2\2\2\u058b\u058c\58\35\2\u058c"+
		"\u058d\7\20\2\2\u058d\u058e\5:\36\2\u058e\u05b3\3\2\2\2\u058f\u0590\5"+
		"8\35\2\u0590\u0591\7\u0169\2\2\u0591\u0592\7r\2\2\u0592\u05b3\3\2\2\2"+
		"\u0593\u0594\58\35\2\u0594\u0595\7\20\2\2\u0595\u0596\7r\2\2\u0596\u05b3"+
		"\3\2\2\2\u0597\u0598\58\35\2\u0598\u0599\7 \2\2\u0599\u059a\7b\2\2\u059a"+
		"\u05b3\3\2\2\2\u059b\u059c\7\u0167\2\2\u059c\u059d\7\u01a2\2\2\u059d\u05b3"+
		"\5B\"\2\u059e\u059f\7C\2\2\u059f\u05b3\5\u042a\u0216\2\u05a0\u05a1\7\u013c"+
		"\2\2\u05a1\u05b3\5\u042a\u0216\2\u05a2\u05a3\7\u00ea\2\2\u05a3\u05b3\5"+
		"D#\2\u05a4\u05a5\7\u0136\2\2\u05a5\u05b3\5F$\2\u05a6\u05a7\7\u0146\2\2"+
		"\u05a7\u05a8\7\62\2\2\u05a8\u05b3\5F$\2\u05a9\u05aa\7\u0146\2\2\u05aa"+
		"\u05ab\7\62\2\2\u05ab\u05b3\7r\2\2\u05ac\u05ad\7\u0196\2\2\u05ad\u05ae"+
		"\7\u0102\2\2\u05ae\u05b3\5\u03ac\u01d7\2\u05af\u05b0\7\u016b\2\2\u05b0"+
		"\u05b1\7\u014f\2\2\u05b1\u05b3\5\u042a\u0216\2\u05b2\u0587\3\2\2\2\u05b2"+
		"\u058b\3\2\2\2\u05b2\u058f\3\2\2\2\u05b2\u0593\3\2\2\2\u05b2\u0597\3\2"+
		"\2\2\u05b2\u059b\3\2\2\2\u05b2\u059e\3\2\2\2\u05b2\u05a0\3\2\2\2\u05b2"+
		"\u05a2\3\2\2\2\u05b2\u05a4\3\2\2\2\u05b2\u05a6\3\2\2\2\u05b2\u05a9\3\2"+
		"\2\2\u05b2\u05ac\3\2\2\2\u05b2\u05af\3\2\2\2\u05b3\67\3\2\2\2\u05b4\u05b5"+
		"\b\35\1\2\u05b5\u05b6\5\u0430\u0219\2\u05b6\u05bc\3\2\2\2\u05b7\u05b8"+
		"\f\3\2\2\u05b8\u05b9\7\7\2\2\u05b9\u05bb\5\u0430\u0219\2\u05ba\u05b7\3"+
		"\2\2\2\u05bb\u05be\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd"+
		"9\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf\u05c0\b\36\1\2\u05c0\u05c1\5<\37\2"+
		"\u05c1\u05c7\3\2\2\2\u05c2\u05c3\f\3\2\2\u05c3\u05c4\7\b\2\2\u05c4\u05c6"+
		"\5<\37\2\u05c5\u05c2\3\2\2\2\u05c6\u05c9\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7"+
		"\u05c8\3\2\2\2\u05c8;\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05cd\5@!\2\u05cb"+
		"\u05cd\5\u00f2z\2\u05cc\u05ca\3\2\2\2\u05cc\u05cb\3\2\2\2\u05cd=\3\2\2"+
		"\2\u05ce\u05cf\7\u0121\2\2\u05cf\u05d6\7\u0175\2\2\u05d0\u05d1\7\u0121"+
		"\2\2\u05d1\u05d6\7T\2\2\u05d2\u05d3\7\u012c\2\2\u05d3\u05d6\7\u0121\2"+
		"\2\u05d4\u05d6\7\u0144\2\2\u05d5\u05ce\3\2\2\2\u05d5\u05d0\3\2\2\2\u05d5"+
		"\u05d2\3\2\2\2\u05d5\u05d4\3\2\2\2\u05d6?\3\2\2\2\u05d7\u05dc\7\u016f"+
		"\2\2\u05d8\u05dc\7\u0096\2\2\u05d9\u05dc\7\u00ff\2\2\u05da\u05dc\5F$\2"+
		"\u05db\u05d7\3\2\2\2\u05db\u05d8\3\2\2\2\u05db\u05d9\3\2\2\2\u05db\u05da"+
		"\3\2\2\2\u05dcA\3\2\2\2\u05dd\u05ee\5\u042a\u0216\2\u05de\u05ee\7\u01a6"+
		"\2\2\u05df\u05e0\5\u0392\u01ca\2\u05e0\u05e1\5\u042a\u0216\2\u05e1\u05e2"+
		"\5\u0396\u01cc\2\u05e2\u05ee\3\2\2\2\u05e3\u05e4\5\u0392\u01ca\2\u05e4"+
		"\u05e5\7\r\2\2\u05e5\u05e6\5\u0428\u0215\2\u05e6\u05e7\7\6\2\2\u05e7\u05e8"+
		"\5\u042a\u0216\2\u05e8\u05e9\5\u0396\u01cc\2\u05e9\u05ee\3\2\2\2\u05ea"+
		"\u05ee\5\u00f2z\2\u05eb\u05ee\7r\2\2\u05ec\u05ee\7\u00dc\2\2\u05ed\u05dd"+
		"\3\2\2\2\u05ed\u05de\3\2\2\2\u05ed\u05df\3\2\2\2\u05ed\u05e3\3\2\2\2\u05ed"+
		"\u05ea\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ec\3\2\2\2\u05eeC\3\2\2\2"+
		"\u05ef\u05f3\5\u042a\u0216\2\u05f0\u05f3\7r\2\2\u05f1\u05f3\3\2\2\2\u05f2"+
		"\u05ef\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f1\3\2\2\2\u05f3E\3\2\2\2"+
		"\u05f4\u05f7\5\u0430\u0219\2\u05f5\u05f7\5\u042a\u0216\2\u05f6\u05f4\3"+
		"\2\2\2\u05f6\u05f5\3\2\2\2\u05f7G\3\2\2\2\u05f8\u05f9\7\u012f\2\2\u05f9"+
		"\u0607\58\35\2\u05fa\u05fb\7\u012f\2\2\u05fb\u05fc\7\u0167\2\2\u05fc\u0607"+
		"\7\u01a2\2\2\u05fd\u05fe\7\u012f\2\2\u05fe\u05ff\7\u016b\2\2\u05ff\u0600"+
		"\7\u00ca\2\2\u0600\u0607\7\u00d7\2\2\u0601\u0602\7\u012f\2\2\u0602\u0603"+
		"\7\u0146\2\2\u0603\u0607\7\62\2\2\u0604\u0605\7\u012f\2\2\u0605\u0607"+
		"\7\"\2\2\u0606\u05f8\3\2\2\2\u0606\u05fa\3\2\2\2\u0606\u05fd\3\2\2\2\u0606"+
		"\u0601\3\2\2\2\u0606\u0604\3\2\2\2\u0607I\3\2\2\2\u0608\u0609\7\u0148"+
		"\2\2\u0609\u060c\5\64\33\2\u060a\u060c\5H%\2\u060b\u0608\3\2\2\2\u060b"+
		"\u060a\3\2\2\2\u060cK\3\2\2\2\u060d\u060e\7\u0148\2\2\u060e\u0611\5\66"+
		"\34\2\u060f\u0611\5H%\2\u0610\u060d\3\2\2\2\u0610\u060f\3\2\2\2\u0611"+
		"M\3\2\2\2\u0612\u0613\7\u014b\2\2\u0613\u0621\58\35\2\u0614\u0615\7\u014b"+
		"\2\2\u0615\u0616\7\u0167\2\2\u0616\u0621\7\u01a2\2\2\u0617\u0618\7\u014b"+
		"\2\2\u0618\u0619\7\u016b\2\2\u0619\u061a\7\u00ca\2\2\u061a\u0621\7\u00d7"+
		"\2\2\u061b\u061c\7\u014b\2\2\u061c\u061d\7\u0146\2\2\u061d\u0621\7\62"+
		"\2\2\u061e\u061f\7\u014b\2\2\u061f\u0621\7\"\2\2\u0620\u0612\3\2\2\2\u0620"+
		"\u0614\3\2\2\2\u0620\u0617\3\2\2\2\u0620\u061b\3\2\2\2\u0620\u061e\3\2"+
		"\2\2\u0621O\3\2\2\2\u0622\u0623\7\u0148\2\2\u0623\u0624\7Y\2\2\u0624\u0625"+
		"\5R*\2\u0625\u0626\5T+\2\u0626Q\3\2\2\2\u0627\u062a\7\"\2\2\u0628\u062a"+
		"\5\u0412\u020a\2\u0629\u0627\3\2\2\2\u0629\u0628\3\2\2\2\u062aS\3\2\2"+
		"\2\u062b\u062c\t\3\2\2\u062cU\3\2\2\2\u062d\u062e\7I\2\2\u062eW\3\2\2"+
		"\2\u062f\u0630\7}\2\2\u0630\u0638\7\"\2\2\u0631\u0632\7}\2\2\u0632\u0638"+
		"\7\u0162\2\2\u0633\u0634\7}\2\2\u0634\u0638\7\u0164\2\2\u0635\u0636\7"+
		"}\2\2\u0636\u0638\7\u0113\2\2\u0637\u062f\3\2\2\2\u0637\u0631\3\2\2\2"+
		"\u0637\u0633\3\2\2\2\u0637\u0635\3\2\2\2\u0638Y\3\2\2\2\u0639\u063a\7"+
		"$\2\2\u063a\u063b\7\u015f\2\2\u063b\u063c\5\u0358\u01ad\2\u063c\u063d"+
		"\5\\/\2\u063d\u066a\3\2\2\2\u063e\u063f\7$\2\2\u063f\u0640\7\u015f\2\2"+
		"\u0640\u0641\7\u00af\2\2\u0641\u0642\7\u0091\2\2\u0642\u0643\5\u0358\u01ad"+
		"\2\u0643\u0644\5\\/\2\u0644\u066a\3\2\2\2\u0645\u0646\7$\2\2\u0646\u0647"+
		"\7\u00b7\2\2\u0647\u0648\5\u0414\u020b\2\u0648\u0649\5\\/\2\u0649\u066a"+
		"\3\2\2\2\u064a\u064b\7$\2\2\u064b\u064c\7\u00b7\2\2\u064c\u064d\7\u00af"+
		"\2\2\u064d\u064e\7\u0091\2\2\u064e\u064f\5\u0414\u020b\2\u064f\u0650\5"+
		"\\/\2\u0650\u066a\3\2\2\2\u0651\u0652\7$\2\2\u0652\u0653\7\u0142\2\2\u0653"+
		"\u0654\5\u0414\u020b\2\u0654\u0655\5\\/\2\u0655\u066a\3\2\2\2\u0656\u0657"+
		"\7$\2\2\u0657\u0658\7\u0142\2\2\u0658\u0659\7\u00af\2\2\u0659\u065a\7"+
		"\u0091\2\2\u065a\u065b\5\u0414\u020b\2\u065b\u065c\5\\/\2\u065c\u066a"+
		"\3\2\2\2\u065d\u065e\7$\2\2\u065e\u065f\7\u018b\2\2\u065f\u0660\5\u0414"+
		"\u020b\2\u0660\u0661\5\\/\2\u0661\u066a\3\2\2\2\u0662\u0663\7$\2\2\u0663"+
		"\u0664\7\u018b\2\2\u0664\u0665\7\u00af\2\2\u0665\u0666\7\u0091\2\2\u0666"+
		"\u0667\5\u0414\u020b\2\u0667\u0668\5\\/\2\u0668\u066a\3\2\2\2\u0669\u0639"+
		"\3\2\2\2\u0669\u063e\3\2\2\2\u0669\u0645\3\2\2\2\u0669\u064a\3\2\2\2\u0669"+
		"\u0651\3\2\2\2\u0669\u0656\3\2\2\2\u0669\u065d\3\2\2\2\u0669\u0662\3\2"+
		"\2\2\u066a[\3\2\2\2\u066b\u066c\b/\1\2\u066c\u066d\5^\60\2\u066d\u0673"+
		"\3\2\2\2\u066e\u066f\f\3\2\2\u066f\u0670\7\b\2\2\u0670\u0672\5^\60\2\u0671"+
		"\u066e\3\2\2\2\u0672\u0675\3\2\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2"+
		"\2\2\u0674]\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0677\7\33\2\2\u0677\u071c"+
		"\5\u00a6T\2\u0678\u0679\7\33\2\2\u0679\u067a\7P\2\2\u067a\u071c\5\u00a6"+
		"T\2\u067b\u067c\7$\2\2\u067c\u067d\5\u0258\u012d\2\u067d\u067e\5\u0430"+
		"\u0219\2\u067e\u067f\5`\61\2\u067f\u071c\3\2\2\2\u0680\u0681\7$\2\2\u0681"+
		"\u0682\5\u0258\u012d\2\u0682\u0683\5\u0430\u0219\2\u0683\u0684\7\u0083"+
		"\2\2\u0684\u0685\7\u00f1\2\2\u0685\u0686\7\u00f6\2\2\u0686\u071c\3\2\2"+
		"\2\u0687\u0688\7$\2\2\u0688\u0689\5\u0258\u012d\2\u0689\u068a\5\u0430"+
		"\u0219\2\u068a\u068b\7\u0148\2\2\u068b\u068c\7\u00f1\2\2\u068c\u068d\7"+
		"\u00f6\2\2\u068d\u071c\3\2\2\2\u068e\u068f\7$\2\2\u068f\u0690\5\u0258"+
		"\u012d\2\u0690\u0691\5\u0430\u0219\2\u0691\u0692\7\u0148\2\2\u0692\u0693"+
		"\7\u0155\2\2\u0693\u0694\5\u042e\u0218\2\u0694\u071c\3\2\2\2\u0695\u0696"+
		"\7$\2\2\u0696\u0697\5\u0258\u012d\2\u0697\u0698\5\u0430\u0219\2\u0698"+
		"\u0699\7\u0148\2\2\u0699\u069a\5h\65\2\u069a\u071c\3\2\2\2\u069b\u069c"+
		"\7$\2\2\u069c\u069d\5\u0258\u012d\2\u069d\u069e\5\u0430\u0219\2\u069e"+
		"\u069f\7\u012f\2\2\u069f\u06a0\5h\65\2\u06a0\u071c\3\2\2\2\u06a1\u06a2"+
		"\7$\2\2\u06a2\u06a3\5\u0258\u012d\2\u06a3\u06a4\5\u0430\u0219\2\u06a4"+
		"\u06a5\7\u0148\2\2\u06a5\u06a6\7\u0158\2\2\u06a6\u06a7\5\u0430\u0219\2"+
		"\u06a7\u071c\3\2\2\2\u06a8\u06a9\7\u0083\2\2\u06a9\u06aa\5\u0258\u012d"+
		"\2\u06aa\u06ab\7\u00af\2\2\u06ab\u06ac\7\u0091\2\2\u06ac\u06ad\5\u0430"+
		"\u0219\2\u06ad\u06ae\5b\62\2\u06ae\u071c\3\2\2\2\u06af\u06b0\7\u0083\2"+
		"\2\u06b0\u06b1\5\u0258\u012d\2\u06b1\u06b2\5\u0430\u0219\2\u06b2\u06b3"+
		"\5b\62\2\u06b3\u071c\3\2\2\2\u06b4\u06b5\7$\2\2\u06b5\u06b6\5\u0258\u012d"+
		"\2\u06b6\u06b7\5\u0430\u0219\2\u06b7\u06b8\5\u025a\u012e\2\u06b8\u06b9"+
		"\7\u0172\2\2\u06b9\u06ba\5\u036a\u01b6\2\u06ba\u06bb\5d\63\2\u06bb\u06bc"+
		"\5f\64\2\u06bc\u071c\3\2\2\2\u06bd\u06be\7$\2\2\u06be\u06bf\5\u0258\u012d"+
		"\2\u06bf\u06c0\5\u0430\u0219\2\u06c0\u06c1\5\u012a\u0096\2\u06c1\u071c"+
		"\3\2\2\2\u06c2\u06c3\7\33\2\2\u06c3\u071c\5\u00b8]\2\u06c4\u06c5\7\u0182"+
		"\2\2\u06c5\u06c6\7X\2\2\u06c6\u071c\5\u0418\u020d\2\u06c7\u06c8\7\u0083"+
		"\2\2\u06c8\u06c9\7X\2\2\u06c9\u06ca\7\u00af\2\2\u06ca\u06cb\7\u0091\2"+
		"\2\u06cb\u06cc\5\u0418\u020d\2\u06cc\u06cd\5b\62\2\u06cd\u071c\3\2\2\2"+
		"\u06ce\u06cf\7\u0083\2\2\u06cf\u06d0\7X\2\2\u06d0\u06d1\5\u0418\u020d"+
		"\2\u06d1\u06d2\5b\62\2\u06d2\u071c\3\2\2\2\u06d3\u06d4\7\u0148\2\2\u06d4"+
		"\u06d5\7\u0191\2\2\u06d5\u071c\7\u00fe\2\2\u06d6\u06d7\7\u0148\2\2\u06d7"+
		"\u06d8\7\u0192\2\2\u06d8\u071c\7\u00fe\2\2\u06d9\u06da\7L\2\2\u06da\u06db"+
		"\7\u00ff\2\2\u06db\u071c\5\u0418\u020d\2\u06dc\u06dd\7\u0148\2\2\u06dd"+
		"\u06de\7\u0192\2\2\u06de\u071c\7L\2\2\u06df\u06e0\7\u0086\2\2\u06e0\u06e1"+
		"\7\u016d\2\2\u06e1\u071c\5\u0418\u020d\2\u06e2\u06e3\7\u0086\2\2\u06e3"+
		"\u06e4\7%\2\2\u06e4\u06e5\7\u016d\2\2\u06e5\u071c\5\u0418\u020d\2\u06e6"+
		"\u06e7\7\u0086\2\2\u06e7\u06e8\7\u012e\2\2\u06e8\u06e9\7\u016d\2\2\u06e9"+
		"\u071c\5\u0418\u020d\2\u06ea\u06eb\7\u0086\2\2\u06eb\u06ec\7\u016d\2\2"+
		"\u06ec\u071c\7\"\2\2\u06ed\u06ee\7\u0086\2\2\u06ee\u06ef\7\u016d\2\2\u06ef"+
		"\u071c\7\u017e\2\2\u06f0\u06f1\7|\2\2\u06f1\u06f2\7\u016d\2\2\u06f2\u071c"+
		"\5\u0418\u020d\2\u06f3\u06f4\7|\2\2\u06f4\u06f5\7\u016d\2\2\u06f5\u071c"+
		"\7\"\2\2\u06f6\u06f7\7|\2\2\u06f7\u06f8\7\u016d\2\2\u06f8\u071c\7\u017e"+
		"\2\2\u06f9\u06fa\7\u0086\2\2\u06fa\u06fb\7\u013a\2\2\u06fb\u071c\5\u0418"+
		"\u020d\2\u06fc\u06fd\7\u0086\2\2\u06fd\u06fe\7%\2\2\u06fe\u06ff\7\u013a"+
		"\2\2\u06ff\u071c\5\u0418\u020d\2\u0700\u0701\7\u0086\2\2\u0701\u0702\7"+
		"\u012e\2\2\u0702\u0703\7\u013a\2\2\u0703\u071c\5\u0418\u020d\2\u0704\u0705"+
		"\7|\2\2\u0705\u0706\7\u013a\2\2\u0706\u071c\5\u0418\u020d\2\u0707\u0708"+
		"\7\u00b9\2\2\u0708\u071c\5\u0414\u020b\2\u0709\u070a\7\u00ef\2\2\u070a"+
		"\u070b\7\u00b9\2\2\u070b\u071c\5\u0414\u020b\2\u070c\u070d\7\u00fb\2\2"+
		"\u070d\u071c\5\u01b0\u00d9\2\u070e\u070f\7\u00f1\2\2\u070f\u071c\7\u00fb"+
		"\2\2\u0710\u0711\7\u010c\2\2\u0711\u0712\7\u0169\2\2\u0712\u071c\5\u042c"+
		"\u0217\2\u0713\u0714\7\u0148\2\2\u0714\u0715\7\u0161\2\2\u0715\u071c\5"+
		"\u0418\u020d\2\u0716\u0717\7\u0148\2\2\u0717\u071c\5h\65\2\u0718\u0719"+
		"\7\u012f\2\2\u0719\u071c\5h\65\2\u071a\u071c\5\u012a\u0096\2\u071b\u0676"+
		"\3\2\2\2\u071b\u0678\3\2\2\2\u071b\u067b\3\2\2\2\u071b\u0680\3\2\2\2\u071b"+
		"\u0687\3\2\2\2\u071b\u068e\3\2\2\2\u071b\u0695\3\2\2\2\u071b\u069b\3\2"+
		"\2\2\u071b\u06a1\3\2\2\2\u071b\u06a8\3\2\2\2\u071b\u06af\3\2\2\2\u071b"+
		"\u06b4\3\2\2\2\u071b\u06bd\3\2\2\2\u071b\u06c2\3\2\2\2\u071b\u06c4\3\2"+
		"\2\2\u071b\u06c7\3\2\2\2\u071b\u06ce\3\2\2\2\u071b\u06d3\3\2\2\2\u071b"+
		"\u06d6\3\2\2\2\u071b\u06d9\3\2\2\2\u071b\u06dc\3\2\2\2\u071b\u06df\3\2"+
		"\2\2\u071b\u06e2\3\2\2\2\u071b\u06e6\3\2\2\2\u071b\u06ea\3\2\2\2\u071b"+
		"\u06ed\3\2\2\2\u071b\u06f0\3\2\2\2\u071b\u06f3\3\2\2\2\u071b\u06f6\3\2"+
		"\2\2\u071b\u06f9\3\2\2\2\u071b\u06fc\3\2\2\2\u071b\u0700\3\2\2\2\u071b"+
		"\u0704\3\2\2\2\u071b\u0707\3\2\2\2\u071b\u0709\3\2\2\2\u071b\u070c\3\2"+
		"\2\2\u071b\u070e\3\2\2\2\u071b\u0710\3\2\2\2\u071b\u0713\3\2\2\2\u071b"+
		"\u0716\3\2\2\2\u071b\u0718\3\2\2\2\u071b\u071a\3\2\2\2\u071c_\3\2\2\2"+
		"\u071d\u071e\7\u0148\2\2\u071e\u071f\7r\2\2\u071f\u0723\5\u039a\u01ce"+
		"\2\u0720\u0721\7\u0083\2\2\u0721\u0723\7r\2\2\u0722\u071d\3\2\2\2\u0722"+
		"\u0720\3\2\2\2\u0723a\3\2\2\2\u0724\u0728\7?\2\2\u0725\u0728\7\u0131\2"+
		"\2\u0726\u0728\3\2\2\2\u0727\u0724\3\2\2\2\u0727\u0725\3\2\2\2\u0727\u0726"+
		"\3\2\2\2\u0728c\3\2\2\2\u0729\u072a\7N\2\2\u072a\u072d\5\u01b0\u00d9\2"+
		"\u072b\u072d\3\2\2\2\u072c\u0729\3\2\2\2\u072c\u072b\3\2\2\2\u072de\3"+
		"\2\2\2\u072e\u072f\7\u017f\2\2\u072f\u0732\5\u039a\u01ce\2\u0730\u0732"+
		"\3\2\2\2\u0731\u072e\3\2\2\2\u0731\u0730\3\2\2\2\u0732g\3\2\2\2\u0733"+
		"\u0734\7\r\2\2\u0734\u0735\5l\67\2\u0735\u0736\7\6\2\2\u0736i\3\2\2\2"+
		"\u0737\u0738\7\u0191\2\2\u0738\u073b\5h\65\2\u0739\u073b\3\2\2\2\u073a"+
		"\u0737\3\2\2\2\u073a\u0739\3\2\2\2\u073bk\3\2\2\2\u073c\u073d\b\67\1\2"+
		"\u073d\u073e\5n8\2\u073e\u0744\3\2\2\2\u073f\u0740\f\3\2\2\u0740\u0741"+
		"\7\b\2\2\u0741\u0743\5n8\2\u0742\u073f\3\2\2\2\u0743\u0746\3\2\2\2\u0744"+
		"\u0742\3\2\2\2\u0744\u0745\3\2\2\2\u0745m\3\2\2\2\u0746\u0744\3\2\2\2"+
		"\u0747\u0748\5\u0434\u021b\2\u0748\u0749\7\20\2\2\u0749\u074a\5\u017c"+
		"\u00bf\2\u074a\u0757\3\2\2\2\u074b\u0757\5\u0434\u021b\2\u074c\u074d\5"+
		"\u0434\u021b\2\u074d\u074e\7\7\2\2\u074e\u074f\5\u0434\u021b\2\u074f\u0750"+
		"\7\20\2\2\u0750\u0751\5\u017c\u00bf\2\u0751\u0757\3\2\2\2\u0752\u0753"+
		"\5\u0434\u021b\2\u0753\u0754\7\7\2\2\u0754\u0755\5\u0434\u021b\2\u0755"+
		"\u0757\3\2\2\2\u0756\u0747\3\2\2\2\u0756\u074b\3\2\2\2\u0756\u074c\3\2"+
		"\2\2\u0756\u0752\3\2\2\2\u0757o\3\2\2\2\u0758\u0759\7$\2\2\u0759\u075a"+
		"\7\u0172\2\2\u075a\u075b\5\u01b0\u00d9\2\u075b\u075c\5r:\2\u075cq\3\2"+
		"\2\2\u075d\u075e\b:\1\2\u075e\u075f\5t;\2\u075f\u0765\3\2\2\2\u0760\u0761"+
		"\f\3\2\2\u0761\u0762\7\b\2\2\u0762\u0764\5t;\2\u0763\u0760\3\2\2\2\u0764"+
		"\u0767\3\2\2\2\u0765\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766s\3\2\2\2"+
		"\u0767\u0765\3\2\2\2\u0768\u0769\7\33\2\2\u0769\u076a\7\61\2\2\u076a\u076b"+
		"\5\u0368\u01b5\2\u076b\u076c\5b\62\2\u076c\u0783\3\2\2\2\u076d\u076e\7"+
		"\u0083\2\2\u076e\u076f\7\61\2\2\u076f\u0770\7\u00af\2\2\u0770\u0771\7"+
		"\u0091\2\2\u0771\u0772\5\u0430\u0219\2\u0772\u0773\5b\62\2\u0773\u0783"+
		"\3\2\2\2\u0774\u0775\7\u0083\2\2\u0775\u0776\7\61\2\2\u0776\u0777\5\u0430"+
		"\u0219\2\u0777\u0778\5b\62\2\u0778\u0783\3\2\2\2\u0779\u077a\7$\2\2\u077a"+
		"\u077b\7\61\2\2\u077b\u077c\5\u0430\u0219\2\u077c\u077d\5\u025a\u012e"+
		"\2\u077d\u077e\7\u0172\2\2\u077e\u077f\5\u036a\u01b6\2\u077f\u0780\5d"+
		"\63\2\u0780\u0781\5b\62\2\u0781\u0783\3\2\2\2\u0782\u0768\3\2\2\2\u0782"+
		"\u076d\3\2\2\2\u0782\u0774\3\2\2\2\u0782\u0779\3\2\2\2\u0783u\3\2\2\2"+
		"\u0784\u0785\7K\2\2\u0785\u0789\5\u02fa\u017e\2\u0786\u0787\7K\2\2\u0787"+
		"\u0789\7\"\2\2\u0788\u0784\3\2\2\2\u0788\u0786\3\2\2\2\u0789w\3\2\2\2"+
		"\u078a\u078b\7]\2\2\u078b\u078c\5\u0084C\2\u078c\u078d\5\u0414\u020b\2"+
		"\u078d\u078e\5\u00be`\2\u078e\u078f\5\u0086D\2\u078f\u0790\5z>\2\u0790"+
		"\u0791\5|?\2\u0791\u0793\5\u0088E\2\u0792\u0794\7\u0191\2\2\u0793\u0792"+
		"\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796\5~@\2\u0796"+
		"\u07a1\3\2\2\2\u0797\u0798\7]\2\2\u0798\u0799\5\u0302\u0182\2\u0799\u079a"+
		"\7\u0169\2\2\u079a\u079c\5|?\2\u079b\u079d\7\u0191\2\2\u079c\u079b\3\2"+
		"\2\2\u079c\u079d\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u079f\5~@\2\u079f\u07a1"+
		"\3\2\2\2\u07a0\u078a\3\2\2\2\u07a0\u0797\3\2\2\2\u07a1y\3\2\2\2\u07a2"+
		"\u07a3\t\4\2\2\u07a3{\3\2\2\2\u07a4\u07a8\5\u042a\u0216\2\u07a5\u07a8"+
		"\7\u0156\2\2\u07a6\u07a8\7\u0157\2\2\u07a7\u07a4\3\2\2\2\u07a7\u07a5\3"+
		"\2\2\2\u07a7\u07a6\3\2\2\2\u07a8}\3\2\2\2\u07a9\u07af\5\u0080A\2\u07aa"+
		"\u07ab\7\r\2\2\u07ab\u07ac\5\u008cG\2\u07ac\u07ad\7\6\2\2\u07ad\u07af"+
		"\3\2\2\2\u07ae\u07a9\3\2\2\2\u07ae\u07aa\3\2\2\2\u07af\177\3\2\2\2\u07b0"+
		"\u07b5\bA\1\2\u07b1\u07b2\f\4\2\2\u07b2\u07b4\5\u0082B\2\u07b3\u07b1\3"+
		"\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6"+
		"\u0081\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b8\u07d9\78\2\2\u07b9\u07d9\7\u00fe"+
		"\2\2\u07ba\u07bb\7x\2\2\u07bb\u07bc\5\u029e\u0150\2\u07bc\u07bd\5\u042a"+
		"\u0216\2\u07bd\u07d9\3\2\2\2\u07be\u07bf\7\u00f6\2\2\u07bf\u07c0\5\u029e"+
		"\u0150\2\u07c0\u07c1\5\u042a\u0216\2\u07c1\u07d9\3\2\2\2\u07c2\u07d9\7"+
		"a\2\2\u07c3\u07d9\7\u00ab\2\2\u07c4\u07c5\7\u011f\2\2\u07c5\u07c6\5\u029e"+
		"\u0150\2\u07c6\u07c7\5\u042a\u0216\2\u07c7\u07d9\3\2\2\2\u07c8\u07c9\7"+
		"\u008b\2\2\u07c9\u07ca\5\u029e\u0150\2\u07ca\u07cb\5\u042a\u0216\2\u07cb"+
		"\u07d9\3\2\2\2\u07cc\u07cd\7\u009d\2\2\u07cd\u07ce\7\u011f\2\2\u07ce\u07d9"+
		"\5\u00c0a\2\u07cf\u07d0\7\u009d\2\2\u07d0\u07d1\7\u011f\2\2\u07d1\u07d9"+
		"\7\f\2\2\u07d2\u07d3\7\u009d\2\2\u07d3\u07d4\7\u00f1\2\2\u07d4\u07d5\7"+
		"\u00f6\2\2\u07d5\u07d9\5\u00c0a\2\u07d6\u07d7\7\u0087\2\2\u07d7\u07d9"+
		"\5\u042a\u0216\2\u07d8\u07b8\3\2\2\2\u07d8\u07b9\3\2\2\2\u07d8\u07ba\3"+
		"\2\2\2\u07d8\u07be\3\2\2\2\u07d8\u07c2\3\2\2\2\u07d8\u07c3\3\2\2\2\u07d8"+
		"\u07c4\3\2\2\2\u07d8\u07c8\3\2\2\2\u07d8\u07cc\3\2\2\2\u07d8\u07cf\3\2"+
		"\2\2\u07d8\u07d2\3\2\2\2\u07d8\u07d6\3\2\2\2\u07d9\u0083\3\2\2\2\u07da"+
		"\u07dd\78\2\2\u07db\u07dd\3\2\2\2\u07dc\u07da\3\2\2\2\u07dc\u07db\3\2"+
		"\2\2\u07dd\u0085\3\2\2\2\u07de\u07df\7\u0191\2\2\u07df\u07e2\7\u00fe\2"+
		"\2\u07e0\u07e2\3\2\2\2\u07e1\u07de\3\2\2\2\u07e1\u07e0\3\2\2\2\u07e2\u0087"+
		"\3\2\2\2\u07e3\u07e4\5\u008aF\2\u07e4\u07e5\7y\2\2\u07e5\u07e6\5\u042a"+
		"\u0216\2\u07e6\u07e9\3\2\2\2\u07e7\u07e9\3\2\2\2\u07e8\u07e3\3\2\2\2\u07e8"+
		"\u07e7\3\2\2\2\u07e9\u0089\3\2\2\2\u07ea\u07ed\7\u017f\2\2\u07eb\u07ed"+
		"\3\2\2\2\u07ec\u07ea\3\2\2\2\u07ec\u07eb\3\2\2\2\u07ed\u008b\3\2\2\2\u07ee"+
		"\u07ef\bG\1\2\u07ef\u07f0\5\u008eH\2\u07f0\u07f6\3\2\2\2\u07f1\u07f2\f"+
		"\3\2\2\u07f2\u07f3\7\b\2\2\u07f3\u07f5\5\u008eH\2\u07f4\u07f1\3\2\2\2"+
		"\u07f5\u07f8\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u008d"+
		"\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f9\u07fa\5\u0434\u021b\2\u07fa\u07fb\5"+
		"\u0090I\2\u07fb\u008f\3\2\2\2\u07fc\u0805\5@!\2\u07fd\u0805\5\u00f2z\2"+
		"\u07fe\u0805\7\f\2\2\u07ff\u0800\7\r\2\2\u0800\u0801\5\u0092J\2\u0801"+
		"\u0802\7\6\2\2\u0802\u0805\3\2\2\2\u0803\u0805\3\2\2\2\u0804\u07fc\3\2"+
		"\2\2\u0804\u07fd\3\2\2\2\u0804\u07fe\3\2\2\2\u0804\u07ff\3\2\2\2\u0804"+
		"\u0803\3\2\2\2\u0805\u0091\3\2\2\2\u0806\u0807\bJ\1\2\u0807\u0808\5\u0094"+
		"K\2\u0808\u080e\3\2\2\2\u0809\u080a\f\3\2\2\u080a\u080b\7\b\2\2\u080b"+
		"\u080d\5\u0094K\2\u080c\u0809\3\2\2\2\u080d\u0810\3\2\2\2\u080e\u080c"+
		"\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0093\3\2\2\2\u0810\u080e\3\2\2\2\u0811"+
		"\u0812\5@!\2\u0812\u0095\3\2\2\2\u0813\u0814\7_\2\2\u0814\u0815\5\u0098"+
		"M\2\u0815\u0816\7\u015f\2\2\u0816\u0817\5\u0414\u020b\2\u0817\u0818\7"+
		"\r\2\2\u0818\u0819\5\u009aN\2\u0819\u081a\7\6\2\2\u081a\u081b\5\u00d4"+
		"k\2\u081b\u081c\5\u00d6l\2\u081c\u081d\5\u00d8m\2\u081d\u081e\5\u00da"+
		"n\2\u081e\u0848\3\2\2\2\u081f\u0820\7_\2\2\u0820\u0821\5\u0098M\2\u0821"+
		"\u0822\7\u015f\2\2\u0822\u0823\7\u00af\2\2\u0823\u0824\7\u00f1\2\2\u0824"+
		"\u0825\7\u0091\2\2\u0825\u0826\5\u0414\u020b\2\u0826\u0827\7\r\2\2\u0827"+
		"\u0828\5\u009aN\2\u0828\u0829\7\6\2\2\u0829\u082a\5\u00d4k\2\u082a\u082b"+
		"\5\u00d6l\2\u082b\u082c\5\u00d8m\2\u082c\u082d\5\u00dan\2\u082d\u0848"+
		"\3\2\2\2\u082e\u082f\7_\2\2\u082f\u0830\5\u0098M\2\u0830\u0831\7\u015f"+
		"\2\2\u0831\u0832\5\u0414\u020b\2\u0832\u0833\7\u00fb\2\2\u0833\u0834\5"+
		"\u01b0\u00d9\2\u0834\u0835\5\u009cO\2\u0835\u0836\5\u00d6l\2\u0836\u0837"+
		"\5\u00d8m\2\u0837\u0838\5\u00dan\2\u0838\u0848\3\2\2\2\u0839\u083a\7_"+
		"\2\2\u083a\u083b\5\u0098M\2\u083b\u083c\7\u015f\2\2\u083c\u083d\7\u00af"+
		"\2\2\u083d\u083e\7\u00f1\2\2\u083e\u083f\7\u0091\2\2\u083f\u0840\5\u0414"+
		"\u020b\2\u0840\u0841\7\u00fb\2\2\u0841\u0842\5\u01b0\u00d9\2\u0842\u0843"+
		"\5\u009cO\2\u0843\u0844\5\u00d6l\2\u0844\u0845\5\u00d8m\2\u0845\u0846"+
		"\5\u00dan\2\u0846\u0848\3\2\2\2\u0847\u0813\3\2\2\2\u0847\u081f\3\2\2"+
		"\2\u0847\u082e\3\2\2\2\u0847\u0839\3\2\2\2\u0848\u0097\3\2\2\2\u0849\u0856"+
		"\7\u0164\2\2\u084a\u0856\7\u0162\2\2\u084b\u084c\7\u00dc\2\2\u084c\u0856"+
		"\7\u0164\2\2\u084d\u084e\7\u00dc\2\2\u084e\u0856\7\u0162\2\2\u084f\u0850"+
		"\7\u00a4\2\2\u0850\u0856\7\u0164\2\2\u0851\u0852\7\u00a4\2\2\u0852\u0856"+
		"\7\u0162\2\2\u0853\u0856\7\u017b\2\2\u0854\u0856\3\2\2\2\u0855\u0849\3"+
		"\2\2\2\u0855\u084a\3\2\2\2\u0855\u084b\3\2\2\2\u0855\u084d\3\2\2\2\u0855"+
		"\u084f\3\2\2\2\u0855\u0851\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0854\3\2"+
		"\2\2\u0856\u0099\3\2\2\2\u0857\u085a\5\u009eP\2\u0858\u085a\3\2\2\2\u0859"+
		"\u0857\3\2\2\2\u0859\u0858\3\2\2\2\u085a\u009b\3\2\2\2\u085b\u085c\7\r"+
		"\2\2\u085c\u085d\5\u00a0Q\2\u085d\u085e\7\6\2\2\u085e\u0861\3\2\2\2\u085f"+
		"\u0861\3\2\2\2\u0860\u085b\3\2\2\2\u0860\u085f\3\2\2\2\u0861\u009d\3\2"+
		"\2\2\u0862\u0863\bP\1\2\u0863\u0864\5\u00a2R\2\u0864\u086a\3\2\2\2\u0865"+
		"\u0866\f\3\2\2\u0866\u0867\7\b\2\2\u0867\u0869\5\u00a2R\2\u0868\u0865"+
		"\3\2\2\2\u0869\u086c\3\2\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2\2\2\u086b"+
		"\u009f\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u086e\bQ\1\2\u086e\u086f\5\u00a4"+
		"S\2\u086f\u0875\3\2\2\2\u0870\u0871\f\3\2\2\u0871\u0872\7\b\2\2\u0872"+
		"\u0874\5\u00a4S\2\u0873\u0870\3\2\2\2\u0874\u0877\3\2\2\2\u0875\u0873"+
		"\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u00a1\3\2\2\2\u0877\u0875\3\2\2\2\u0878"+
		"\u087c\5\u00a6T\2\u0879\u087c\5\u00b2Z\2\u087a\u087c\5\u00b8]\2\u087b"+
		"\u0878\3\2\2\2\u087b\u0879\3\2\2\2\u087b\u087a\3\2\2\2\u087c\u00a3\3\2"+
		"\2\2\u087d\u0880\5\u00a8U\2\u087e\u0880\5\u00b8]\2\u087f\u087d\3\2\2\2"+
		"\u087f\u087e\3\2\2\2\u0880\u00a5\3\2\2\2\u0881\u0882\5\u0430\u0219\2\u0882"+
		"\u0883\5\u036a\u01b6\2\u0883\u0884\5\u0126\u0094\2\u0884\u0885\5\u00aa"+
		"V\2\u0885\u00a7\3\2\2\2\u0886\u0887\5\u0430\u0219\2\u0887\u0888\7\u0191"+
		"\2\2\u0888\u0889\7\u0103\2\2\u0889\u088a\5\u00aaV\2\u088a\u00a9\3\2\2"+
		"\2\u088b\u0890\bV\1\2\u088c\u088d\f\4\2\2\u088d\u088f\5\u00acW\2\u088e"+
		"\u088c\3\2\2\2\u088f\u0892\3\2\2\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2"+
		"\2\2\u0891\u00ab\3\2\2\2\u0892\u0890\3\2\2\2\u0893\u0894\7X\2\2\u0894"+
		"\u0895\5\u0418\u020d\2\u0895\u0896\5\u00aeX\2\u0896\u089c\3\2\2\2\u0897"+
		"\u089c\5\u00aeX\2\u0898\u089c\5\u00b0Y\2\u0899\u089a\7N\2\2\u089a\u089c"+
		"\5\u01b0\u00d9\2\u089b\u0893\3\2\2\2\u089b\u0897\3\2\2\2\u089b\u0898\3"+
		"\2\2\2\u089b\u0899\3\2\2\2\u089c\u00ad\3\2\2\2\u089d\u089e\7\u00f1\2\2"+
		"\u089e\u08b8\7\u00f6\2\2\u089f\u08b8\7\u00f6\2\2\u08a0\u08a1\7\u0178\2"+
		"\2\u08a1\u08a2\5\u022c\u0117\2\u08a2\u08a3\5\u00dco\2\u08a3\u08b8\3\2"+
		"\2\2\u08a4\u08a5\7\u011a\2\2\u08a5\u08a6\7\u00cc\2\2\u08a6\u08a7\5\u022c"+
		"\u0117\2\u08a7\u08a8\5\u00dco\2\u08a8\u08b8\3\2\2\2\u08a9\u08aa\7H\2\2"+
		"\u08aa\u08ab\7\r\2\2\u08ab\u08ac\5\u039a\u01ce\2\u08ac\u08ad\7\6\2\2\u08ad"+
		"\u08ae\5\u00bc_\2\u08ae\u08b8\3\2\2\2\u08af\u08b0\7r\2\2\u08b0\u08b8\5"+
		"\u039c\u01cf\2\u08b1\u08b2\7\u0127\2\2\u08b2\u08b3\5\u0414\u020b\2\u08b3"+
		"\u08b4\5\u00be`\2\u08b4\u08b5\5\u00c4c\2\u08b5\u08b6\5\u00ccg\2\u08b6"+
		"\u08b8\3\2\2\2\u08b7\u089d\3\2\2\2\u08b7\u089f\3\2\2\2\u08b7\u08a0\3\2"+
		"\2\2\u08b7\u08a4\3\2\2\2\u08b7\u08a9\3\2\2\2\u08b7\u08af\3\2\2\2\u08b7"+
		"\u08b1\3\2\2\2\u08b8\u00af\3\2\2\2\u08b9\u08c1\7t\2\2\u08ba\u08bb\7\u00f1"+
		"\2\2\u08bb\u08c1\7t\2\2\u08bc\u08bd\7\u00bb\2\2\u08bd\u08c1\7u\2\2\u08be"+
		"\u08bf\7\u00bb\2\2\u08bf\u08c1\7\u00b1\2\2\u08c0\u08b9\3\2\2\2\u08c0\u08ba"+
		"\3\2\2\2\u08c0\u08bc\3\2\2\2\u08c0\u08be\3\2\2\2\u08c1\u00b1\3\2\2\2\u08c2"+
		"\u08c3\7\u00d8\2\2\u08c3\u08c4\5\u0414\u020b\2\u08c4\u08c5\5\u00b4[\2"+
		"\u08c5\u00b3\3\2\2\2\u08c6\u08cf\b[\1\2\u08c7\u08c8\f\5\2\2\u08c8\u08c9"+
		"\7\u00b5\2\2\u08c9\u08ce\5\u00b6\\\2\u08ca\u08cb\f\4\2\2\u08cb\u08cc\7"+
		"\u008e\2\2\u08cc\u08ce\5\u00b6\\\2\u08cd\u08c7\3\2\2\2\u08cd\u08ca\3\2"+
		"\2\2\u08ce\u08d1\3\2\2\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0"+
		"\u00b5\3\2\2\2\u08d1\u08cf\3\2\2\2\u08d2\u08d3\t\5\2\2\u08d3\u00b7\3\2"+
		"\2\2\u08d4\u08d5\7X\2\2\u08d5\u08d6\5\u0418\u020d\2\u08d6\u08d7\5\u00ba"+
		"^\2\u08d7\u08da\3\2\2\2\u08d8\u08da\5\u00ba^\2\u08d9\u08d4\3\2\2\2\u08d9"+
		"\u08d8\3\2\2\2\u08da\u00b9\3\2\2\2\u08db\u08dc\7H\2\2\u08dc\u08dd\7\r"+
		"\2\2\u08dd\u08de\5\u039a\u01ce\2\u08de\u08df\7\6\2\2\u08df\u08e0\5\u016a"+
		"\u00b6\2\u08e0\u0912\3\2\2\2\u08e1\u08e2\7\u0178\2\2\u08e2\u08e3\7\r\2"+
		"\2\u08e3\u08e4\5\u00c0a\2\u08e4\u08e5\7\6\2\2\u08e5\u08e6\5\u022c\u0117"+
		"\2\u08e6\u08e7\5\u00dco\2\u08e7\u08e8\5\u016a\u00b6\2\u08e8\u0912\3\2"+
		"\2\2\u08e9\u08ea\7\u0178\2\2\u08ea\u08eb\5\u00dep\2\u08eb\u08ec\5\u016a"+
		"\u00b6\2\u08ec\u0912\3\2\2\2\u08ed\u08ee\7\u011a\2\2\u08ee\u08ef\7\u00cc"+
		"\2\2\u08ef\u08f0\7\r\2\2\u08f0\u08f1\5\u00c0a\2\u08f1\u08f2\7\6\2\2\u08f2"+
		"\u08f3\5\u022c\u0117\2\u08f3\u08f4\5\u00dco\2\u08f4\u08f5\5\u016a\u00b6"+
		"\2\u08f5\u0912\3\2\2\2\u08f6\u08f7\7\u011a\2\2\u08f7\u08f8\7\u00cc\2\2"+
		"\u08f8\u08f9\5\u00dep\2\u08f9\u08fa\5\u016a\u00b6\2\u08fa\u0912\3\2\2"+
		"\2\u08fb\u08fc\7\u008d\2\2\u08fc\u08fd\5\u01fe\u0100\2\u08fd\u08fe\7\r"+
		"\2\2\u08fe\u08ff\5\u00c6d\2\u08ff\u0900\7\6\2\2\u0900\u0901\5\u022c\u0117"+
		"\2\u0901\u0902\5\u00dco\2\u0902\u0903\5\u00caf\2\u0903\u0904\5\u016a\u00b6"+
		"\2\u0904\u0912\3\2\2\2\u0905\u0906\7\u009e\2\2\u0906\u0907\7\u00cc\2\2"+
		"\u0907\u0908\7\r\2\2\u0908\u0909\5\u00c0a\2\u0909\u090a\7\6\2\2\u090a"+
		"\u090b\7\u0127\2\2\u090b\u090c\5\u0414\u020b\2\u090c\u090d\5\u00be`\2"+
		"\u090d\u090e\5\u00c4c\2\u090e\u090f\5\u00ccg\2\u090f\u0910\5\u016a\u00b6"+
		"\2\u0910\u0912\3\2\2\2\u0911\u08db\3\2\2\2\u0911\u08e1\3\2\2\2\u0911\u08e9"+
		"\3\2\2\2\u0911\u08ed\3\2\2\2\u0911\u08f6\3\2\2\2\u0911\u08fb\3\2\2\2\u0911"+
		"\u0905\3\2\2\2\u0912\u00bb\3\2\2\2\u0913\u0914\7\u00ef\2\2\u0914\u0917"+
		"\7\u00b9\2\2\u0915\u0917\3\2\2\2\u0916\u0913\3\2\2\2\u0916\u0915\3\2\2"+
		"\2\u0917\u00bd\3\2\2\2\u0918\u0919\7\r\2\2\u0919\u091a\5\u00c0a\2\u091a"+
		"\u091b\7\6\2\2\u091b\u091e\3\2\2\2\u091c\u091e\3\2\2\2\u091d\u0918\3\2"+
		"\2\2\u091d\u091c\3\2\2\2\u091e\u00bf\3\2\2\2\u091f\u0920\ba\1\2\u0920"+
		"\u0921\5\u00c2b\2\u0921\u0927\3\2\2\2\u0922\u0923\f\3\2\2\u0923\u0924"+
		"\7\b\2\2\u0924\u0926\5\u00c2b\2\u0925\u0922\3\2\2\2\u0926\u0929\3\2\2"+
		"\2\u0927\u0925\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u00c1\3\2\2\2\u0929\u0927"+
		"\3\2\2\2\u092a\u092b\5\u0430\u0219\2\u092b\u00c3\3\2\2\2\u092c\u092d\7"+
		"\u00e2\2\2\u092d\u0934\7\u00a1\2\2\u092e\u092f\7\u00e2\2\2\u092f\u0934"+
		"\7\u010e\2\2\u0930\u0931\7\u00e2\2\2\u0931\u0934\7\u014d\2\2\u0932\u0934"+
		"\3\2\2\2\u0933\u092c\3\2\2\2\u0933\u092e\3\2\2\2\u0933\u0930\3\2\2\2\u0933"+
		"\u0932\3\2\2\2\u0934\u00c5\3\2\2\2\u0935\u0936\bd\1\2\u0936\u0937\5\u00c8"+
		"e\2\u0937\u093d\3\2\2\2\u0938\u0939\f\3\2\2\u0939\u093a\7\b\2\2\u093a"+
		"\u093c\5\u00c8e\2\u093b\u0938\3\2\2\2\u093c\u093f\3\2\2\2\u093d\u093b"+
		"\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u00c7\3\2\2\2\u093f\u093d\3\2\2\2\u0940"+
		"\u0941\5\u0202\u0102\2\u0941\u0942\7\u0191\2\2\u0942\u0943\5\u0240\u0121"+
		"\2\u0943\u094c\3\2\2\2\u0944\u0945\5\u0202\u0102\2\u0945\u0946\7\u0191"+
		"\2\2\u0946\u0947\7\u0101\2\2\u0947\u0948\7\r\2\2\u0948\u0949\5\u0240\u0121"+
		"\2\u0949\u094a\7\6\2\2\u094a\u094c\3\2\2\2\u094b\u0940\3\2\2\2\u094b\u0944"+
		"\3\2\2\2\u094c\u00c9\3\2\2\2\u094d\u094e\7\u018e\2\2\u094e\u094f\7\r\2"+
		"\2\u094f\u0950\5\u039a\u01ce\2\u0950\u0951\7\6\2\2\u0951\u0954\3\2\2\2"+
		"\u0952\u0954\3\2\2\2\u0953\u094d\3\2\2\2\u0953\u0952\3\2\2\2\u0954\u00cb"+
		"\3\2\2\2\u0955\u095f\5\u00ceh\2\u0956\u095f\5\u00d0i\2\u0957\u0958\5\u00ce"+
		"h\2\u0958\u0959\5\u00d0i\2\u0959\u095f\3\2\2\2\u095a\u095b\5\u00d0i\2"+
		"\u095b\u095c\5\u00ceh\2\u095c\u095f\3\2\2\2\u095d\u095f\3\2\2\2\u095e"+
		"\u0955\3\2\2\2\u095e\u0956\3\2\2\2\u095e\u0957\3\2\2\2\u095e\u095a\3\2"+
		"\2\2\u095e\u095d\3\2\2\2\u095f\u00cd\3\2\2\2\u0960\u0961\7\u00ff\2\2\u0961"+
		"\u0962\7\u017d\2\2\u0962\u0963\5\u00d2j\2\u0963\u00cf\3\2\2\2\u0964\u0965"+
		"\7\u00ff\2\2\u0965\u0966\7w\2\2\u0966\u0967\5\u00d2j\2\u0967\u00d1\3\2"+
		"\2\2\u0968\u0969\7\u00ef\2\2\u0969\u0971\7\32\2\2\u096a\u0971\7\u0131"+
		"\2\2\u096b\u0971\7?\2\2\u096c\u096d\7\u0148\2\2\u096d\u0971\7\u00f6\2"+
		"\2\u096e\u096f\7\u0148\2\2\u096f\u0971\7r\2\2\u0970\u0968\3\2\2\2\u0970"+
		"\u096a\3\2\2\2\u0970\u096b\3\2\2\2\u0970\u096c\3\2\2\2\u0970\u096e\3\2"+
		"\2\2\u0971\u00d3\3\2\2\2\u0972\u0973\7\u00ba\2\2\u0973\u0974\7\r\2\2\u0974"+
		"\u0975\5\u0412\u020a\2\u0975\u0976\7\6\2\2\u0976\u0979\3\2\2\2\u0977\u0979"+
		"\3\2\2\2\u0978\u0972\3\2\2\2\u0978\u0977\3\2\2\2\u0979\u00d5\3\2\2\2\u097a"+
		"\u097b\7\u0191\2\2\u097b\u0982\5h\65\2\u097c\u097d\7\u0191\2\2\u097d\u0982"+
		"\7\u00fe\2\2\u097e\u097f\7\u0192\2\2\u097f\u0982\7\u00fe\2\2\u0980\u0982"+
		"\3\2\2\2\u0981\u097a\3\2\2\2\u0981\u097c\3\2\2\2\u0981\u097e\3\2\2\2\u0981"+
		"\u0980\3\2\2\2\u0982\u00d7\3\2\2\2\u0983\u0984\7\u00ff\2\2\u0984\u0985"+
		"\7S\2\2\u0985\u0990\7\u0083\2\2\u0986\u0987\7\u00ff\2\2\u0987\u0988\7"+
		"S\2\2\u0988\u0989\7w\2\2\u0989\u0990\7\u0139\2\2\u098a\u098b\7\u00ff\2"+
		"\2\u098b\u098c\7S\2\2\u098c\u098d\7\u0119\2\2\u098d\u0990\7\u0139\2\2"+
		"\u098e\u0990\3\2\2\2\u098f\u0983\3\2\2\2\u098f\u0986\3\2\2\2\u098f\u098a"+
		"\3\2\2\2\u098f\u098e\3\2\2\2\u0990\u00d9\3\2\2\2\u0991\u0992\7\u0161\2"+
		"\2\u0992\u0995\5\u0418\u020d\2\u0993\u0995\3\2\2\2\u0994\u0991\3\2\2\2"+
		"\u0994\u0993\3\2\2\2\u0995\u00db\3\2\2\2\u0996\u0997\7\u017f\2\2\u0997"+
		"\u0998\7\u00b7\2\2\u0998\u0999\7\u0161\2\2\u0999\u099c\5\u0418\u020d\2"+
		"\u099a\u099c\3\2\2\2\u099b\u0996\3\2\2\2\u099b\u099a\3\2\2\2\u099c\u00dd"+
		"\3\2\2\2\u099d\u099e\7\u017f\2\2\u099e\u099f\7\u00b7\2\2\u099f\u09a0\5"+
		"\u0420\u0211\2\u09a0\u00df\3\2\2\2\u09a1\u09a2\7_\2\2\u09a2\u09a3\5\u0098"+
		"M\2\u09a3\u09a4\7\u015f\2\2\u09a4\u09a5\5\u00e2r\2\u09a5\u09a6\7+\2\2"+
		"\u09a6\u09a7\5\u0300\u0181\2\u09a7\u09a8\5\u00e4s\2\u09a8\u00e1\3\2\2"+
		"\2\u09a9\u09aa\5\u0414\u020b\2\u09aa\u09ab\5\u00be`\2\u09ab\u09ac\5\u00d6"+
		"l\2\u09ac\u09ad\5\u00d8m\2\u09ad\u09ae\5\u00dan\2\u09ae\u00e3\3\2\2\2"+
		"\u09af\u09b0\7\u0191\2\2\u09b0\u09b6\7l\2\2\u09b1\u09b2\7\u0191\2\2\u09b2"+
		"\u09b3\7\u00ef\2\2\u09b3\u09b6\7l\2\2\u09b4\u09b6\3\2\2\2\u09b5\u09af"+
		"\3\2\2\2\u09b5\u09b1\3\2\2\2\u09b5\u09b4\3\2\2\2\u09b6\u00e5\3\2\2\2\u09b7"+
		"\u09b8\7_\2\2\u09b8\u09b9\5\u0098M\2\u09b9\u09ba\7\u0142\2\2\u09ba\u09bb"+
		"\5\u0414\u020b\2\u09bb\u09bc\5\u00eav\2\u09bc\u00e7\3\2\2\2\u09bd\u09be"+
		"\7$\2\2\u09be\u09bf\7\u0142\2\2\u09bf\u09c0\5\u0414\u020b\2\u09c0\u09c1"+
		"\5\u00ecw\2\u09c1\u09ca\3\2\2\2\u09c2\u09c3\7$\2\2\u09c3\u09c4\7\u0142"+
		"\2\2\u09c4\u09c5\7\u00af\2\2\u09c5\u09c6\7\u0091\2\2\u09c6\u09c7\5\u0414"+
		"\u020b\2\u09c7\u09c8\5\u00ecw\2\u09c8\u09ca\3\2\2\2\u09c9\u09bd\3\2\2"+
		"\2\u09c9\u09c2\3\2\2\2\u09ca\u00e9\3\2\2\2\u09cb\u09ce\5\u00ecw\2\u09cc"+
		"\u09ce\3\2\2\2\u09cd\u09cb\3\2\2\2\u09cd\u09cc\3\2\2\2\u09ce\u00eb\3\2"+
		"\2\2\u09cf\u09d0\bw\1\2\u09d0\u09d1\5\u00eex\2\u09d1\u09d6\3\2\2\2\u09d2"+
		"\u09d3\f\3\2\2\u09d3\u09d5\5\u00eex\2\u09d4\u09d2\3\2\2\2\u09d5\u09d8"+
		"\3\2\2\2\u09d6\u09d4\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u00ed\3\2\2\2\u09d8"+
		"\u09d6\3\2\2\2\u09d9\u09da\7=\2\2\u09da\u09f9\5\u00f2z\2\u09db\u09f9\7"+
		"k\2\2\u09dc\u09dd\7\u00ef\2\2\u09dd\u09f9\7k\2\2\u09de\u09df\7\u00b6\2"+
		"\2\u09df\u09e0\5\u00f0y\2\u09e0\u09e1\5\u00f2z\2\u09e1\u09f9\3\2\2\2\u09e2"+
		"\u09e3\7\u00e3\2\2\u09e3\u09f9\5\u00f2z\2\u09e4\u09e5\7\u00e5\2\2\u09e5"+
		"\u09f9\5\u00f2z\2\u09e6\u09e7\7\u00ef\2\2\u09e7\u09f9\7\u00e3\2\2\u09e8"+
		"\u09e9\7\u00ef\2\2\u09e9\u09f9\7\u00e5\2\2\u09ea\u09eb\7\u010b\2\2\u09eb"+
		"\u09ec\7<\2\2\u09ec\u09f9\5\u01b0\u00d9\2\u09ed\u09ef\7\u0153\2\2\u09ee"+
		"\u09f0\7\u0191\2\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f1"+
		"\3\2\2\2\u09f1\u09f9\5\u00f2z\2\u09f2\u09f9\7\u0130\2\2\u09f3\u09f5\7"+
		"\u0130\2\2\u09f4\u09f6\7\u0191\2\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6\3\2"+
		"\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f9\5\u00f2z\2\u09f8\u09d9\3\2\2\2\u09f8"+
		"\u09db\3\2\2\2\u09f8\u09dc\3\2\2\2\u09f8\u09de\3\2\2\2\u09f8\u09e2\3\2"+
		"\2\2\u09f8\u09e4\3\2\2\2\u09f8\u09e6\3\2\2\2\u09f8\u09e8\3\2\2\2\u09f8"+
		"\u09ea\3\2\2\2\u09f8\u09ed\3\2\2\2\u09f8\u09f2\3\2\2\2\u09f8\u09f3\3\2"+
		"\2\2\u09f9\u00ef\3\2\2\2\u09fa\u09fd\7<\2\2\u09fb\u09fd\3\2\2\2\u09fc"+
		"\u09fa\3\2\2\2\u09fc\u09fb\3\2\2\2\u09fd\u00f1\3\2\2\2\u09fe\u0a03\7\u01a8"+
		"\2\2\u09ff\u0a00\7\13\2\2\u0a00\u0a03\7\u01a8\2\2\u0a01\u0a03\5\u042e"+
		"\u0218\2\u0a02\u09fe\3\2\2\2\u0a02\u09ff\3\2\2\2\u0a02\u0a01\3\2\2\2\u0a03"+
		"\u00f3\3\2\2\2\u0a04\u0a05\b{\1\2\u0a05\u0a06\5\u00f2z\2\u0a06\u0a0c\3"+
		"\2\2\2\u0a07\u0a08\f\3\2\2\u0a08\u0a09\7\b\2\2\u0a09\u0a0b\5\u00f2z\2"+
		"\u0a0a\u0a07\3\2\2\2\u0a0b\u0a0e\3\2\2\2\u0a0c\u0a0a\3\2\2\2\u0a0c\u0a0d"+
		"\3\2\2\2\u0a0d\u00f5\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0f\u0a10\7_\2\2\u0a10"+
		"\u0a11\5\u020e\u0108\2\u0a11\u0a12\5\u00f8}\2\u0a12\u0a13\5\u0104\u0083"+
		"\2\u0a13\u0a14\7\u00ce\2\2\u0a14\u0a15\5F$\2\u0a15\u0a22\3\2\2\2\u0a16"+
		"\u0a17\7_\2\2\u0a17\u0a18\5\u020e\u0108\2\u0a18\u0a19\5\u00f8}\2\u0a19"+
		"\u0a1a\5\u0104\u0083\2\u0a1a\u0a1b\7\u00ce\2\2\u0a1b\u0a1c\5F$\2\u0a1c"+
		"\u0a1d\7\u00a9\2\2\u0a1d\u0a1e\5\u00fa~\2\u0a1e\u0a1f\5\u00fc\177\2\u0a1f"+
		"\u0a20\5\u0100\u0081\2\u0a20\u0a22\3\2\2\2\u0a21\u0a0f\3\2\2\2\u0a21\u0a16"+
		"\3\2\2\2\u0a22\u00f7\3\2\2\2\u0a23\u0a26\7\u0171\2\2\u0a24\u0a26\3\2\2"+
		"\2\u0a25\u0a23\3\2\2\2\u0a25\u0a24\3\2\2\2\u0a26\u00f9\3\2\2\2\u0a27\u0a2c"+
		"\5\u0418\u020d\2\u0a28\u0a29\5\u0418\u020d\2\u0a29\u0a2a\5\u01b2\u00da"+
		"\2\u0a2a\u0a2c\3\2\2\2\u0a2b\u0a27\3\2\2\2\u0a2b\u0a28\3\2\2\2\u0a2c\u00fb"+
		"\3\2\2\2\u0a2d\u0a2e\7\u00bc\2\2\u0a2e\u0a31\5\u00fa~\2\u0a2f\u0a31\3"+
		"\2\2\2\u0a30\u0a2d\3\2\2\2\u0a30\u0a2f\3\2\2\2\u0a31\u00fd\3\2\2\2\u0a32"+
		"\u0a33\7\u0183\2\2\u0a33\u0a37\5\u00fa~\2\u0a34\u0a35\7\u00ef\2\2\u0a35"+
		"\u0a37\7\u0183\2\2\u0a36\u0a32\3\2\2\2\u0a36\u0a34\3\2\2\2\u0a37\u00ff"+
		"\3\2\2\2\u0a38\u0a3b\5\u00fe\u0080\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a38\3"+
		"\2\2\2\u0a3a\u0a39\3\2\2\2\u0a3b\u0101\3\2\2\2\u0a3c\u0a3d\7\u0083\2\2"+
		"\u0a3d\u0a3e\5\u0104\u0083\2\u0a3e\u0a3f\7\u00ce\2\2\u0a3f\u0a40\5F$\2"+
		"\u0a40\u0a41\5b\62\2\u0a41\u0a4b\3\2\2\2\u0a42\u0a43\7\u0083\2\2\u0a43"+
		"\u0a44\5\u0104\u0083\2\u0a44\u0a45\7\u00ce\2\2\u0a45\u0a46\7\u00af\2\2"+
		"\u0a46\u0a47\7\u0091\2\2\u0a47\u0a48\5F$\2\u0a48\u0a49\5b\62\2\u0a49\u0a4b"+
		"\3\2\2\2\u0a4a\u0a3c\3\2\2\2\u0a4a\u0a42\3\2\2\2\u0a4b\u0103\3\2\2\2\u0a4c"+
		"\u0a4f\7\u011d\2\2\u0a4d\u0a4f\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4e\u0a4d"+
		"\3\2\2\2\u0a4f\u0105\3\2\2\2\u0a50\u0a51\7_\2\2\u0a51\u0a52\7\u0161\2"+
		"\2\u0a52\u0a53\5\u0418\u020d\2\u0a53\u0a54\5\u0108\u0085\2\u0a54\u0a55"+
		"\7\u00df\2\2\u0a55\u0a56\5\u042a\u0216\2\u0a56\u0107\3\2\2\2\u0a57\u0a58"+
		"\7\u010c\2\2\u0a58\u0a5b\5\u0418\u020d\2\u0a59\u0a5b\3\2\2\2\u0a5a\u0a57"+
		"\3\2\2\2\u0a5a\u0a59\3\2\2\2\u0a5b\u0109\3\2\2\2\u0a5c\u0a5d\7\u0083\2"+
		"\2\u0a5d\u0a5e\7\u0161\2\2\u0a5e\u0a65\5\u0418\u020d\2\u0a5f\u0a60\7\u0083"+
		"\2\2\u0a60\u0a61\7\u0161\2\2\u0a61\u0a62\7\u00af\2\2\u0a62\u0a63\7\u0091"+
		"\2\2\u0a63\u0a65\5\u0418\u020d\2\u0a64\u0a5c\3\2\2\2\u0a64\u0a5f\3\2\2"+
		"\2\u0a65\u010b\3\2\2\2\u0a66\u0a67\7_\2\2\u0a67\u0a68\7\u0093\2\2\u0a68"+
		"\u0a6a\5\u0418\u020d\2\u0a69\u0a6b\7\u0191\2\2\u0a6a\u0a69\3\2\2\2\u0a6a"+
		"\u0a6b\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6d\5\u010e\u0088\2\u0a6d\u0a7a"+
		"\3\2\2\2\u0a6e\u0a6f\7_\2\2\u0a6f\u0a70\7\u0093\2\2\u0a70\u0a71\7\u00af"+
		"\2\2\u0a71\u0a72\7\u00f1\2\2\u0a72\u0a73\7\u0091\2\2\u0a73\u0a75\5\u0418"+
		"\u020d\2\u0a74\u0a76\7\u0191\2\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76\3\2\2"+
		"\2\u0a76\u0a77\3\2\2\2\u0a77\u0a78\5\u010e\u0088\2\u0a78\u0a7a\3\2\2\2"+
		"\u0a79\u0a66\3\2\2\2\u0a79\u0a6e\3\2\2\2\u0a7a\u010d\3\2\2\2\u0a7b\u0a80"+
		"\b\u0088\1\2\u0a7c\u0a7d\f\4\2\2\u0a7d\u0a7f\5\u0110\u0089\2\u0a7e\u0a7c"+
		"\3\2\2\2\u0a7f\u0a82\3\2\2\2\u0a80\u0a7e\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81"+
		"\u010f\3\2\2\2\u0a82\u0a80\3\2\2\2\u0a83\u0a84\7\u013c\2\2\u0a84\u0a8a"+
		"\5\u0418\u020d\2\u0a85\u0a86\7\u018a\2\2\u0a86\u0a8a\5F$\2\u0a87\u0a88"+
		"\7 \2\2\u0a88\u0a8a\5F$\2\u0a89\u0a83\3\2\2\2\u0a89\u0a85\3\2\2\2\u0a89"+
		"\u0a87\3\2\2\2\u0a8a\u0111\3\2\2\2\u0a8b\u0a8c\7$\2\2\u0a8c\u0a8d\7\u0093"+
		"\2\2\u0a8d\u0a8e\5\u0418\u020d\2\u0a8e\u0a8f\7\u017d\2\2\u0a8f\u0a90\5"+
		"\u0114\u008b\2\u0a90\u0113\3\2\2\2\u0a91\u0a96\b\u008b\1\2\u0a92\u0a93"+
		"\f\4\2\2\u0a93\u0a95\5\u0116\u008c\2\u0a94\u0a92\3\2\2\2\u0a95\u0a98\3"+
		"\2\2\2\u0a96\u0a94\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0115\3\2\2\2\u0a98"+
		"\u0a96\3\2\2\2\u0a99\u0a9a\7\u0169\2\2\u0a9a\u0a9b\5F$\2\u0a9b\u0117\3"+
		"\2\2\2\u0a9c\u0a9d\7$\2\2\u0a9d\u0a9e\7\u0093\2\2\u0a9e\u0a9f\5\u0418"+
		"\u020d\2\u0a9f\u0aa0\5&\24\2\u0aa0\u0aa1\7!\2\2\u0aa1\u0aa2\5\u0424\u0213"+
		"\2\u0aa2\u0aa3\5\u017e\u00c0\2\u0aa3\u0b4f\3\2\2\2\u0aa4\u0aa5\7$\2\2"+
		"\u0aa5\u0aa6\7\u0093\2\2\u0aa6\u0aa7\5\u0418\u020d\2\u0aa7\u0aa8\5&\24"+
		"\2\u0aa8\u0aa9\7B\2\2\u0aa9\u0aaa\7\r\2\2\u0aaa\u0aab\5\u036a\u01b6\2"+
		"\u0aab\u0aac\7+\2\2\u0aac\u0aad\5\u036a\u01b6\2\u0aad\u0aae\7\6\2\2\u0aae"+
		"\u0b4f\3\2\2\2\u0aaf\u0ab0\7$\2\2\u0ab0\u0ab1\7\u0093\2\2\u0ab1\u0ab2"+
		"\5\u0418\u020d\2\u0ab2\u0ab3\5&\24\2\u0ab3\u0ab4\7O\2\2\u0ab4\u0ab5\5"+
		"\u01b0\u00d9\2\u0ab5\u0b4f\3\2\2\2\u0ab6\u0ab7\7$\2\2\u0ab7\u0ab8\7\u0093"+
		"\2\2\u0ab8\u0ab9\5\u0418\u020d\2\u0ab9\u0aba\5&\24\2\u0aba\u0abb\7\\\2"+
		"\2\u0abb\u0abc\5\u01b0\u00d9\2\u0abc\u0b4f\3\2\2\2\u0abd\u0abe\7$\2\2"+
		"\u0abe\u0abf\7\u0093\2\2\u0abf\u0ac0\5\u0418\u020d\2\u0ac0\u0ac1\5&\24"+
		"\2\u0ac1\u0ac2\7\u0081\2\2\u0ac2\u0ac3\5\u01b0\u00d9\2\u0ac3\u0b4f\3\2"+
		"\2\2\u0ac4\u0ac5\7$\2\2\u0ac5\u0ac6\7\u0093\2\2\u0ac6\u0ac7\5\u0418\u020d"+
		"\2\u0ac7\u0ac8\5&\24\2\u0ac8\u0ac9\7\u00a2\2\2\u0ac9\u0aca\5\u01e2\u00f2"+
		"\2\u0aca\u0b4f\3\2\2\2\u0acb\u0acc\7$\2\2\u0acc\u0acd\7\u0093\2\2\u0acd"+
		"\u0ace\5\u0418\u020d\2\u0ace\u0acf\5&\24\2\u0acf\u0ad0\5\u0104\u0083\2"+
		"\u0ad0\u0ad1\7\u00ce\2\2\u0ad1\u0ad2\5\u0418\u020d\2\u0ad2\u0b4f\3\2\2"+
		"\2\u0ad3\u0ad4\7$\2\2\u0ad4\u0ad5\7\u0093\2\2\u0ad5\u0ad6\5\u0418\u020d"+
		"\2\u0ad6\u0ad7\5&\24\2\u0ad7\u0ad8\7\u0101\2\2\u0ad8\u0ad9\5\u0240\u0121"+
		"\2\u0ad9\u0ada\5\u023e\u0120\2\u0ada\u0b4f\3\2\2\2\u0adb\u0adc\7$\2\2"+
		"\u0adc\u0add\7\u0093\2\2\u0add\u0ade\5\u0418\u020d\2\u0ade\u0adf\5&\24"+
		"\2\u0adf\u0ae0\7\u0101\2\2\u0ae0\u0ae1\7J\2\2\u0ae1\u0ae2\5\u01b0\u00d9"+
		"\2\u0ae2\u0ae3\7\u017f\2\2\u0ae3\u0ae4\5\u041c\u020f\2\u0ae4\u0b4f\3\2"+
		"\2\2\u0ae5\u0ae6\7$\2\2\u0ae6\u0ae7\7\u0093\2\2\u0ae7\u0ae8\5\u0418\u020d"+
		"\2\u0ae8\u0ae9\5&\24\2\u0ae9\u0aea\7\u0101\2\2\u0aea\u0aeb\7\u0097\2\2"+
		"\u0aeb\u0aec\5\u01b0\u00d9\2\u0aec\u0aed\7\u017f\2\2\u0aed\u0aee\5\u041c"+
		"\u020f\2\u0aee\u0b4f\3\2\2\2\u0aef\u0af0\7$\2\2\u0af0\u0af1\7\u0093\2"+
		"\2\u0af1\u0af2\5\u0418\u020d\2\u0af2\u0af3\5&\24\2\u0af3\u0af4\7\u013c"+
		"\2\2\u0af4\u0af5\5\u0418\u020d\2\u0af5\u0b4f\3\2\2\2\u0af6\u0af7\7$\2"+
		"\2\u0af7\u0af8\7\u0093\2\2\u0af8\u0af9\5\u0418\u020d\2\u0af9\u0afa\5&"+
		"\24\2\u0afa\u0afb\7\u015f\2\2\u0afb\u0afc\5\u01b0\u00d9\2\u0afc\u0b4f"+
		"\3\2\2\2\u0afd\u0afe\7$\2\2\u0afe\u0aff\7\u0093\2\2\u0aff\u0b00\5\u0418"+
		"\u020d\2\u0b00\u0b01\5&\24\2\u0b01\u0b02\7\u0165\2\2\u0b02\u0b03\7\u013e"+
		"\2\2\u0b03\u0b04\7\u010d\2\2\u0b04\u0b05\5\u01b0\u00d9\2\u0b05\u0b4f\3"+
		"\2\2\2\u0b06\u0b07\7$\2\2\u0b07\u0b08\7\u0093\2\2\u0b08\u0b09\5\u0418"+
		"\u020d\2\u0b09\u0b0a\5&\24\2\u0b0a\u0b0b\7\u0165\2\2\u0b0b\u0b0c\7\u013e"+
		"\2\2\u0b0c\u0b0d\7{\2\2\u0b0d\u0b0e\5\u01b0\u00d9\2\u0b0e\u0b4f\3\2\2"+
		"\2\u0b0f\u0b10\7$\2\2\u0b10\u0b11\7\u0093\2\2\u0b11\u0b12\5\u0418\u020d"+
		"\2\u0b12\u0b13\5&\24\2\u0b13\u0b14\7\u0165\2\2\u0b14\u0b15\7\u013e\2\2"+
		"\u0b15\u0b16\7\u0163\2\2\u0b16\u0b17\5\u01b0\u00d9\2\u0b17\u0b4f\3\2\2"+
		"\2\u0b18\u0b19\7$\2\2\u0b19\u0b1a\7\u0093\2\2\u0b1a\u0b1b\5\u0418\u020d"+
		"\2\u0b1b\u0b1c\5&\24\2\u0b1c\u0b1d\7\u0165\2\2\u0b1d\u0b1e\7\u013e\2\2"+
		"\u0b1e\u0b1f\7V\2\2\u0b1f\u0b20\5\u01b0\u00d9\2\u0b20\u0b4f\3\2\2\2\u0b21"+
		"\u0b22\7$\2\2\u0b22\u0b23\7\u0093\2\2\u0b23\u0b24\5\u0418\u020d\2\u0b24"+
		"\u0b25\5&\24\2\u0b25\u0b26\7\u0142\2\2\u0b26\u0b27\5\u01b0\u00d9\2\u0b27"+
		"\u0b4f\3\2\2\2\u0b28\u0b29\7$\2\2\u0b29\u0b2a\7\u0093\2\2\u0b2a\u0b2b"+
		"\5\u0418\u020d\2\u0b2b\u0b2c\5&\24\2\u0b2c\u0b2d\7\u018b\2\2\u0b2d\u0b2e"+
		"\5\u01b0\u00d9\2\u0b2e\u0b4f\3\2\2\2\u0b2f\u0b30\7$\2\2\u0b30\u0b31\7"+
		"\u0093\2\2\u0b31\u0b32\5\u0418\u020d\2\u0b32\u0b33\5&\24\2\u0b33\u0b34"+
		"\7\u009e\2\2\u0b34\u0b35\7\u015f\2\2\u0b35\u0b36\5\u01b0\u00d9\2\u0b36"+
		"\u0b4f\3\2\2\2\u0b37\u0b38\7$\2\2\u0b38\u0b39\7\u0093\2\2\u0b39\u0b3a"+
		"\5\u0418\u020d\2\u0b3a\u0b3b\5&\24\2\u0b3b\u0b3c\7\u009e\2\2\u0b3c\u0b3d"+
		"\7l\2\2\u0b3d\u0b3e\7\u0194\2\2\u0b3e\u0b3f\5\u0418\u020d\2\u0b3f\u0b4f"+
		"\3\2\2\2\u0b40\u0b41\7$\2\2\u0b41\u0b42\7\u0093\2\2\u0b42\u0b43\5\u0418"+
		"\u020d\2\u0b43\u0b44\5&\24\2\u0b44\u0b45\7\u0145\2\2\u0b45\u0b46\5\u0418"+
		"\u020d\2\u0b46\u0b4f\3\2\2\2\u0b47\u0b48\7$\2\2\u0b48\u0b49\7\u0093\2"+
		"\2\u0b49\u0b4a\5\u0418\u020d\2\u0b4a\u0b4b\5&\24\2\u0b4b\u0b4c\7\u0172"+
		"\2\2\u0b4c\u0b4d\5\u01b0\u00d9\2\u0b4d\u0b4f\3\2\2\2\u0b4e\u0a9c\3\2\2"+
		"\2\u0b4e\u0aa4\3\2\2\2\u0b4e\u0aaf\3\2\2\2\u0b4e\u0ab6\3\2\2\2\u0b4e\u0abd"+
		"\3\2\2\2\u0b4e\u0ac4\3\2\2\2\u0b4e\u0acb\3\2\2\2\u0b4e\u0ad3\3\2\2\2\u0b4e"+
		"\u0adb\3\2\2\2\u0b4e\u0ae5\3\2\2\2\u0b4e\u0aef\3\2\2\2\u0b4e\u0af6\3\2"+
		"\2\2\u0b4e\u0afd\3\2\2\2\u0b4e\u0b06\3\2\2\2\u0b4e\u0b0f\3\2\2\2\u0b4e"+
		"\u0b18\3\2\2\2\u0b4e\u0b21\3\2\2\2\u0b4e\u0b28\3\2\2\2\u0b4e\u0b2f\3\2"+
		"\2\2\u0b4e\u0b37\3\2\2\2\u0b4e\u0b40\3\2\2\2\u0b4e\u0b47\3\2\2\2\u0b4f"+
		"\u0119\3\2\2\2\u0b50\u0b51\7_\2\2\u0b51\u0b52\7\u009e\2\2\u0b52\u0b53"+
		"\7l\2\2\u0b53\u0b54\7\u0194\2\2\u0b54\u0b55\5\u0418\u020d\2\u0b55\u0b56"+
		"\5\u0120\u0091\2\u0b56\u0b57\5\u0126\u0094\2\u0b57\u011b\3\2\2\2\u0b58"+
		"\u0b59\7\u00a9\2\2\u0b59\u0b61\5\u00fa~\2\u0b5a\u0b5b\7\u00ef\2\2\u0b5b"+
		"\u0b61\7\u00a9\2\2\u0b5c\u0b5d\7\u0183\2\2\u0b5d\u0b61\5\u00fa~\2\u0b5e"+
		"\u0b5f\7\u00ef\2\2\u0b5f\u0b61\7\u0183\2\2\u0b60\u0b58\3\2\2\2\u0b60\u0b5a"+
		"\3\2\2\2\u0b60\u0b5c\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b61\u011d\3\2\2\2\u0b62"+
		"\u0b63\b\u0090\1\2\u0b63\u0b64\5\u011c\u008f\2\u0b64\u0b69\3\2\2\2\u0b65"+
		"\u0b66\f\3\2\2\u0b66\u0b68\5\u011c\u008f\2\u0b67\u0b65\3\2\2\2\u0b68\u0b6b"+
		"\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u011f\3\2\2\2\u0b6b"+
		"\u0b69\3\2\2\2\u0b6c\u0b6f\5\u011e\u0090\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b6c"+
		"\3\2\2\2\u0b6e\u0b6d\3\2\2\2\u0b6f\u0121\3\2\2\2\u0b70\u0b71\7\u0083\2"+
		"\2\u0b71\u0b72\7\u009e\2\2\u0b72\u0b73\7l\2\2\u0b73\u0b74\7\u0194\2\2"+
		"\u0b74\u0b75\5\u0418\u020d\2\u0b75\u0b76\5b\62\2\u0b76\u0b81\3\2\2\2\u0b77"+
		"\u0b78\7\u0083\2\2\u0b78\u0b79\7\u009e\2\2\u0b79\u0b7a\7l\2\2\u0b7a\u0b7b"+
		"\7\u0194\2\2\u0b7b\u0b7c\7\u00af\2\2\u0b7c\u0b7d\7\u0091\2\2\u0b7d\u0b7e"+
		"\5\u0418\u020d\2\u0b7e\u0b7f\5b\62\2\u0b7f\u0b81\3\2\2\2\u0b80\u0b70\3"+
		"\2\2\2\u0b80\u0b77\3\2\2\2\u0b81\u0123\3\2\2\2\u0b82\u0b83\7$\2\2\u0b83"+
		"\u0b84\7\u009e\2\2\u0b84\u0b85\7l\2\2\u0b85\u0b86\7\u0194\2\2\u0b86\u0b87"+
		"\5\u0418\u020d\2\u0b87\u0b88\5\u0120\u0091\2\u0b88\u0b89\5\u012a\u0096"+
		"\2\u0b89\u0b92\3\2\2\2\u0b8a\u0b8b\7$\2\2\u0b8b\u0b8c\7\u009e\2\2\u0b8c"+
		"\u0b8d\7l\2\2\u0b8d\u0b8e\7\u0194\2\2\u0b8e\u0b8f\5\u0418\u020d\2\u0b8f"+
		"\u0b90\5\u011e\u0090\2\u0b90\u0b92\3\2\2\2\u0b91\u0b82\3\2\2\2\u0b91\u0b8a"+
		"\3\2\2\2\u0b92\u0125\3\2\2\2\u0b93\u0b94\7\u0103\2\2\u0b94\u0b95\7\r\2"+
		"\2\u0b95\u0b96\5\u0128\u0095\2\u0b96\u0b97\7\6\2\2\u0b97\u0b9a\3\2\2\2"+
		"\u0b98\u0b9a\3\2\2\2\u0b99\u0b93\3\2\2\2\u0b99\u0b98\3\2\2\2\u0b9a\u0127"+
		"\3\2\2\2\u0b9b\u0b9c\b\u0095\1\2\u0b9c\u0b9d\5\u0130\u0099\2\u0b9d\u0ba3"+
		"\3\2\2\2\u0b9e\u0b9f\f\3\2\2\u0b9f\u0ba0\7\b\2\2\u0ba0\u0ba2\5\u0130\u0099"+
		"\2\u0ba1\u0b9e\3\2\2\2\u0ba2\u0ba5\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba3\u0ba4"+
		"\3\2\2\2\u0ba4\u0129\3\2\2\2\u0ba5\u0ba3\3\2\2\2\u0ba6\u0ba7\7\u0103\2"+
		"\2\u0ba7\u0ba8\7\r\2\2\u0ba8\u0ba9\5\u012c\u0097\2\u0ba9\u0baa\7\6\2\2"+
		"\u0baa\u012b\3\2\2\2\u0bab\u0bac\b\u0097\1\2\u0bac\u0bad\5\u012e\u0098"+
		"\2\u0bad\u0bb3\3\2\2\2\u0bae\u0baf\f\3\2\2\u0baf\u0bb0\7\b\2\2\u0bb0\u0bb2"+
		"\5\u012e\u0098\2\u0bb1\u0bae\3\2\2\2\u0bb2\u0bb5\3\2\2\2\u0bb3\u0bb1\3"+
		"\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u012d\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb6"+
		"\u0bbe\5\u0130\u0099\2\u0bb7\u0bb8\7\u0148\2\2\u0bb8\u0bbe\5\u0130\u0099"+
		"\2\u0bb9\u0bba\7\33\2\2\u0bba\u0bbe\5\u0130\u0099\2\u0bbb\u0bbc\7\u0083"+
		"\2\2\u0bbc\u0bbe\5\u0132\u009a\2\u0bbd\u0bb6\3\2\2\2\u0bbd\u0bb7\3\2\2"+
		"\2\u0bbd\u0bb9\3\2\2\2\u0bbd\u0bbb\3\2\2\2\u0bbe\u012f\3\2\2\2\u0bbf\u0bc0"+
		"\5\u0132\u009a\2\u0bc0\u0bc1\5\u0134\u009b\2\u0bc1\u0131\3\2\2\2\u0bc2"+
		"\u0bc3\5\u0434\u021b\2\u0bc3\u0133\3\2\2\2\u0bc4\u0bc5\5\u042a\u0216\2"+
		"\u0bc5\u0135\3\2\2\2\u0bc6\u0bc7\7_\2\2\u0bc7\u0bc8\7\u0145\2\2\u0bc8"+
		"\u0bc9\5\u0418\u020d\2\u0bc9\u0bca\5\u0138\u009d\2\u0bca\u0bcb\5\u013c"+
		"\u009f\2\u0bcb\u0bcc\7\u009e\2\2\u0bcc\u0bcd\7l\2\2\u0bcd\u0bce\7\u0194"+
		"\2\2\u0bce\u0bcf\5\u0418\u020d\2\u0bcf\u0bd0\5\u0126\u0094\2\u0bd0\u0137"+
		"\3\2\2\2\u0bd1\u0bd2\7\u0172\2\2\u0bd2\u0bd5\5\u042a\u0216\2\u0bd3\u0bd5"+
		"\3\2\2\2\u0bd4\u0bd1\3\2\2\2\u0bd4\u0bd3\3\2\2\2\u0bd5\u0139\3\2\2\2\u0bd6"+
		"\u0bd7\7\u018a\2\2\u0bd7\u0bdb\5\u042a\u0216\2\u0bd8\u0bd9\7\u018a\2\2"+
		"\u0bd9\u0bdb\7\u00f6\2\2\u0bda\u0bd6\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb"+
		"\u013b\3\2\2\2\u0bdc\u0bdf\5\u013a\u009e\2\u0bdd\u0bdf\3\2\2\2\u0bde\u0bdc"+
		"\3\2\2\2\u0bde\u0bdd\3\2\2\2\u0bdf\u013d\3\2\2\2\u0be0\u0be1\7\u0083\2"+
		"\2\u0be1\u0be2\7\u0145\2\2\u0be2\u0be3\5\u0418\u020d\2\u0be3\u0be4\5b"+
		"\62\2\u0be4\u0bed\3\2\2\2\u0be5\u0be6\7\u0083\2\2\u0be6\u0be7\7\u0145"+
		"\2\2\u0be7\u0be8\7\u00af\2\2\u0be8\u0be9\7\u0091\2\2\u0be9\u0bea\5\u0418"+
		"\u020d\2\u0bea\u0beb\5b\62\2\u0beb\u0bed\3\2\2\2\u0bec\u0be0\3\2\2\2\u0bec"+
		"\u0be5\3\2\2\2\u0bed\u013f\3\2\2\2\u0bee\u0bef\7$\2\2\u0bef\u0bf0\7\u0145"+
		"\2\2\u0bf0\u0bf1\5\u0418\u020d\2\u0bf1\u0bf2\5\u013a\u009e\2\u0bf2\u0bf3"+
		"\5\u012a\u0096\2\u0bf3\u0bff\3\2\2\2\u0bf4\u0bf5\7$\2\2\u0bf5\u0bf6\7"+
		"\u0145\2\2\u0bf6\u0bf7\5\u0418\u020d\2\u0bf7\u0bf8\5\u013a\u009e\2\u0bf8"+
		"\u0bff\3\2\2\2\u0bf9\u0bfa\7$\2\2\u0bfa\u0bfb\7\u0145\2\2\u0bfb\u0bfc"+
		"\5\u0418\u020d\2\u0bfc\u0bfd\5\u012a\u0096\2\u0bfd\u0bff\3\2\2\2\u0bfe"+
		"\u0bee\3\2\2\2\u0bfe\u0bf4\3\2\2\2\u0bfe\u0bf9\3\2\2\2\u0bff\u0141\3\2"+
		"\2\2\u0c00\u0c01\7_\2\2\u0c01\u0c02\7\u009e\2\2\u0c02\u0c03\7\u015f\2"+
		"\2\u0c03\u0c04\5\u0414\u020b\2\u0c04\u0c05\5\u0144\u00a3\2\u0c05\u0c06"+
		"\7\u0145\2\2\u0c06\u0c07\5\u0418\u020d\2\u0c07\u0c08\5\u0126\u0094\2\u0c08"+
		"\u0c16\3\2\2\2\u0c09\u0c0a\7_\2\2\u0c0a\u0c0b\7\u009e\2\2\u0c0b\u0c0c"+
		"\7\u015f\2\2\u0c0c\u0c0d\7\u00af\2\2\u0c0d\u0c0e\7\u00f1\2\2\u0c0e\u0c0f"+
		"\7\u0091\2\2\u0c0f\u0c10\5\u0414\u020b\2\u0c10\u0c11\5\u0144\u00a3\2\u0c11"+
		"\u0c12\7\u0145\2\2\u0c12\u0c13\5\u0418\u020d\2\u0c13\u0c14\5\u0126\u0094"+
		"\2\u0c14\u0c16\3\2\2\2\u0c15\u0c00\3\2\2\2\u0c15\u0c09\3\2\2\2\u0c16\u0143"+
		"\3\2\2\2\u0c17\u0c18\7\r\2\2\u0c18\u0c19\5\u0146\u00a4\2\u0c19\u0c1a\7"+
		"\6\2\2\u0c1a\u0c1e\3\2\2\2\u0c1b\u0c1c\7\r\2\2\u0c1c\u0c1e\7\6\2\2\u0c1d"+
		"\u0c17\3\2\2\2\u0c1d\u0c1b\3\2\2\2\u0c1e\u0145\3\2\2\2\u0c1f\u0c20\b\u00a4"+
		"\1\2\u0c20\u0c21\5\u0148\u00a5\2\u0c21\u0c27\3\2\2\2\u0c22\u0c23\f\3\2"+
		"\2\u0c23\u0c24\7\b\2\2\u0c24\u0c26\5\u0148\u00a5\2\u0c25\u0c22\3\2\2\2"+
		"\u0c26\u0c29\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0147"+
		"\3\2\2\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2b\5\u00a6T\2\u0c2b\u0149\3\2\2"+
		"\2\u0c2c\u0c2d\7$\2\2\u0c2d\u0c2e\7\u009e\2\2\u0c2e\u0c2f\7\u015f\2\2"+
		"\u0c2f\u0c30\5\u0358\u01ad\2\u0c30\u0c31\5\\/\2\u0c31\u0c3b\3\2\2\2\u0c32"+
		"\u0c33\7$\2\2\u0c33\u0c34\7\u009e\2\2\u0c34\u0c35\7\u015f\2\2\u0c35\u0c36"+
		"\7\u00af\2\2\u0c36\u0c37\7\u0091\2\2\u0c37\u0c38\5\u0358\u01ad\2\u0c38"+
		"\u0c39\5\\/\2\u0c39\u0c3b\3\2\2\2\u0c3a\u0c2c\3\2\2\2\u0c3a\u0c32\3\2"+
		"\2\2\u0c3b\u014b\3\2\2\2\u0c3c\u0c3d\7_\2\2\u0c3d\u0c3e\7\u017e\2\2\u0c3e"+
		"\u0c3f\7\u00e1\2\2\u0c3f\u0c40\7\u009c\2\2\u0c40\u0c41\5\u014e\u00a8\2"+
		"\u0c41\u0c42\7\u0145\2\2\u0c42\u0c43\5\u0418\u020d\2\u0c43\u0c44\5\u0126"+
		"\u0094\2\u0c44\u014d\3\2\2\2\u0c45\u0c49\7i\2\2\u0c46\u0c49\7\u017e\2"+
		"\2\u0c47\u0c49\5\u042c\u0217\2\u0c48\u0c45\3\2\2\2\u0c48\u0c46\3\2\2\2"+
		"\u0c48\u0c47\3\2\2\2\u0c49\u014f\3\2\2\2\u0c4a\u0c4b\7\u0083\2\2\u0c4b"+
		"\u0c4c\7\u017e\2\2\u0c4c\u0c4d\7\u00e1\2\2\u0c4d\u0c4e\7\u009c\2\2\u0c4e"+
		"\u0c4f\5\u014e\u00a8\2\u0c4f\u0c50\7\u0145\2\2\u0c50\u0c51\5\u0418\u020d"+
		"\2\u0c51\u0c5d\3\2\2\2\u0c52\u0c53\7\u0083\2\2\u0c53\u0c54\7\u017e\2\2"+
		"\u0c54\u0c55\7\u00e1\2\2\u0c55\u0c56\7\u00af\2\2\u0c56\u0c57\7\u0091\2"+
		"\2\u0c57\u0c58\7\u009c\2\2\u0c58\u0c59\5\u014e\u00a8\2\u0c59\u0c5a\7\u0145"+
		"\2\2\u0c5a\u0c5b\5\u0418\u020d\2\u0c5b\u0c5d\3\2\2\2\u0c5c\u0c4a\3\2\2"+
		"\2\u0c5c\u0c52\3\2\2\2\u0c5d\u0151\3\2\2\2\u0c5e\u0c5f\7$\2\2\u0c5f\u0c60"+
		"\7\u017e\2\2\u0c60\u0c61\7\u00e1\2\2\u0c61\u0c62\7\u009c\2\2\u0c62\u0c63"+
		"\5\u014e\u00a8\2\u0c63\u0c64\7\u0145\2\2\u0c64\u0c65\5\u0418\u020d\2\u0c65"+
		"\u0c66\5\u012a\u0096\2\u0c66\u0153\3\2\2\2\u0c67\u0c68\7_\2\2\u0c68\u0c69"+
		"\7\u016d\2\2\u0c69\u0c6a\5\u0418\u020d\2\u0c6a\u0c6b\5\u0156\u00ac\2\u0c6b"+
		"\u0c6c\5\u0158\u00ad\2\u0c6c\u0c6d\7\u00ff\2\2\u0c6d\u0c6e\5\u0414\u020b"+
		"\2\u0c6e\u0c6f\5\u015c\u00af\2\u0c6f\u0c70\5\u0162\u00b2\2\u0c70\u0c71"+
		"\7\u0090\2\2\u0c71\u0c72\7\u011e\2\2\u0c72\u0c73\5\u0424\u0213\2\u0c73"+
		"\u0c74\7\r\2\2\u0c74\u0c75\5\u0164\u00b3\2\u0c75\u0c76\7\6\2\2\u0c76\u0c8d"+
		"\3\2\2\2\u0c77\u0c78\7_\2\2\u0c78\u0c79\7X\2\2\u0c79\u0c7a\7\u016d\2\2"+
		"\u0c7a\u0c7b\5\u0418\u020d\2\u0c7b\u0c7c\7\35\2\2\u0c7c\u0c7d\5\u0158"+
		"\u00ad\2\u0c7d\u0c7e\7\u00ff\2\2\u0c7e\u0c7f\5\u0414\u020b\2\u0c7f\u0c80"+
		"\5\u0168\u00b5\2\u0c80\u0c81\5\u016a\u00b6\2\u0c81\u0c82\7\u009c\2\2\u0c82"+
		"\u0c83\7\u0084\2\2\u0c83\u0c84\7\u0138\2\2\u0c84\u0c85\5\u0162\u00b2\2"+
		"\u0c85\u0c86\7\u0090\2\2\u0c86\u0c87\7\u011e\2\2\u0c87\u0c88\5\u0424\u0213"+
		"\2\u0c88\u0c89\7\r\2\2\u0c89\u0c8a\5\u0164\u00b3\2\u0c8a\u0c8b\7\6\2\2"+
		"\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c67\3\2\2\2\u0c8c\u0c77\3\2\2\2\u0c8d\u0155"+
		"\3\2\2\2\u0c8e\u0c93\7\64\2\2\u0c8f\u0c93\7\35\2\2\u0c90\u0c91\7\u00c2"+
		"\2\2\u0c91\u0c93\7\u00fb\2\2\u0c92\u0c8e\3\2\2\2\u0c92\u0c8f\3\2\2\2\u0c92"+
		"\u0c90\3\2\2\2\u0c93\u0157\3\2\2\2\u0c94\u0c95\b\u00ad\1\2\u0c95\u0c96"+
		"\5\u015a\u00ae\2\u0c96\u0c9c\3\2\2\2\u0c97\u0c98\f\3\2\2\u0c98\u0c99\7"+
		"\u0104\2\2\u0c99\u0c9b\5\u015a\u00ae\2\u0c9a\u0c97\3\2\2\2\u0c9b\u0c9e"+
		"\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0159\3\2\2\2\u0c9e"+
		"\u0c9c\3\2\2\2\u0c9f\u0ca7\7\u00c1\2\2\u0ca0\u0ca7\7w\2\2\u0ca1\u0ca7"+
		"\7\u017d\2\2\u0ca2\u0ca3\7\u017d\2\2\u0ca3\u0ca4\7\u00fb\2\2\u0ca4\u0ca7"+
		"\5\u00c0a\2\u0ca5\u0ca7\7\u0170\2\2\u0ca6\u0c9f\3\2\2\2\u0ca6\u0ca0\3"+
		"\2\2\2\u0ca6\u0ca1\3\2\2\2\u0ca6\u0ca2\3\2\2\2\u0ca6\u0ca5\3\2\2\2\u0ca7"+
		"\u015b\3\2\2\2\u0ca8\u0ca9\7\u009c\2\2\u0ca9\u0caa\5\u015e\u00b0\2\u0caa"+
		"\u0cab\5\u0160\u00b1\2\u0cab\u0cae\3\2\2\2\u0cac\u0cae\3\2\2\2\u0cad\u0ca8"+
		"\3\2\2\2\u0cad\u0cac\3\2\2\2\u0cae\u015d\3\2\2\2\u0caf\u0cb2\7\u0084\2"+
		"\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0caf\3\2\2\2\u0cb1\u0cb0\3\2\2\2\u0cb2\u015f"+
		"\3\2\2\2\u0cb3\u0cb4\t\6\2\2\u0cb4\u0161\3\2\2\2\u0cb5\u0cb6\7\u018d\2"+
		"\2\u0cb6\u0cb7\7\r\2\2\u0cb7\u0cb8\5\u039a\u01ce\2\u0cb8\u0cb9\7\6\2\2"+
		"\u0cb9\u0cbc\3\2\2\2\u0cba\u0cbc\3\2\2\2\u0cbb\u0cb5\3\2\2\2\u0cbb\u0cba"+
		"\3\2\2\2\u0cbc\u0163\3\2\2\2\u0cbd\u0cbe\b\u00b3\1\2\u0cbe\u0cc1\5\u0166"+
		"\u00b4\2\u0cbf\u0cc1\3\2\2\2\u0cc0\u0cbd\3\2\2\2\u0cc0\u0cbf\3\2\2\2\u0cc1"+
		"\u0cc7\3\2\2\2\u0cc2\u0cc3\f\4\2\2\u0cc3\u0cc4\7\b\2\2\u0cc4\u0cc6\5\u0166"+
		"\u00b4\2\u0cc5\u0cc2\3\2\2\2\u0cc6\u0cc9\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc7"+
		"\u0cc8\3\2\2\2\u0cc8\u0165\3\2\2\2\u0cc9\u0cc7\3\2\2\2\u0cca\u0ccf\5\u0428"+
		"\u0215\2\u0ccb\u0ccf\7\u01a8\2\2\u0ccc\u0ccf\5\u042a\u0216\2\u0ccd\u0ccf"+
		"\5\u0434\u021b\2\u0cce\u0cca\3\2\2\2\u0cce\u0ccb\3\2\2\2\u0cce\u0ccc\3"+
		"\2\2\2\u0cce\u0ccd\3\2\2\2\u0ccf\u0167\3\2\2\2\u0cd0\u0cd1\7 \2\2\u0cd1"+
		"\u0cd4\5\u0414\u020b\2\u0cd2\u0cd4\3\2\2\2\u0cd3\u0cd0\3\2\2\2\u0cd3\u0cd2"+
		"\3\2\2\2\u0cd4\u0169\3\2\2\2\u0cd5\u0cda\b\u00b6\1\2\u0cd6\u0cd7\f\3\2"+
		"\2\u0cd7\u0cd9\5\u016c\u00b7\2\u0cd8\u0cd6\3\2\2\2\u0cd9\u0cdc\3\2\2\2"+
		"\u0cda\u0cd8\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u016b\3\2\2\2\u0cdc\u0cda"+
		"\3\2\2\2\u0cdd\u0cde\7\u00f1\2\2\u0cde\u0ce9\7t\2\2\u0cdf\u0ce9\7t\2\2"+
		"\u0ce0\u0ce1\7\u00bb\2\2\u0ce1\u0ce9\7\u00b1\2\2\u0ce2\u0ce3\7\u00bb\2"+
		"\2\u0ce3\u0ce9\7u\2\2\u0ce4\u0ce5\7\u00f1\2\2\u0ce5\u0ce9\7\u0181\2\2"+
		"\u0ce6\u0ce7\7\u00ef\2\2\u0ce7\u0ce9\7\u00b9\2\2\u0ce8\u0cdd\3\2\2\2\u0ce8"+
		"\u0cdf\3\2\2\2\u0ce8\u0ce0\3\2\2\2\u0ce8\u0ce2\3\2\2\2\u0ce8\u0ce4\3\2"+
		"\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u016d\3\2\2\2\u0cea\u0ceb\7\u0083\2\2\u0ceb"+
		"\u0cec\7\u016d\2\2\u0cec\u0ced\5\u0418\u020d\2\u0ced\u0cee\7\u00ff\2\2"+
		"\u0cee\u0cef\5\u01b0\u00d9\2\u0cef\u0cf0\5b\62\2\u0cf0\u0cfb\3\2\2\2\u0cf1"+
		"\u0cf2\7\u0083\2\2\u0cf2\u0cf3\7\u016d\2\2\u0cf3\u0cf4\7\u00af\2\2\u0cf4"+
		"\u0cf5\7\u0091\2\2\u0cf5\u0cf6\5\u0418\u020d\2\u0cf6\u0cf7\7\u00ff\2\2"+
		"\u0cf7\u0cf8\5\u01b0\u00d9\2\u0cf8\u0cf9\5b\62\2\u0cf9\u0cfb\3\2\2\2\u0cfa"+
		"\u0cea\3\2\2\2\u0cfa\u0cf1\3\2\2\2\u0cfb\u016f\3\2\2\2\u0cfc\u0cfd\7_"+
		"\2\2\u0cfd\u0cfe\7-\2\2\u0cfe\u0cff\5\u0418\u020d\2\u0cff\u0d00\7H\2\2"+
		"\u0d00\u0d01\7\r\2\2\u0d01\u0d02\5\u039a\u01ce\2\u0d02\u0d03\7\6\2\2\u0d03"+
		"\u0d04\5\u016a\u00b6\2\u0d04\u0171\3\2\2\2\u0d05\u0d06\7\u0083\2\2\u0d06"+
		"\u0d07\7-\2\2\u0d07\u0d08\5\u0418\u020d\2\u0d08\u0d09\5b\62\2\u0d09\u0173"+
		"\3\2\2\2\u0d0a\u0d0b\7_\2\2\u0d0b\u0d0c\7!\2\2\u0d0c\u0d0d\5\u0424\u0213"+
		"\2\u0d0d\u0d0e\5\u017e\u00c0\2\u0d0e\u0d0f\5\u0176\u00bc\2\u0d0f\u0d62"+
		"\3\2\2\2\u0d10\u0d11\7_\2\2\u0d11\u0d12\7!\2\2\u0d12\u0d13\5\u0424\u0213"+
		"\2\u0d13\u0d14\5\u0180\u00c1\2\u0d14\u0d62\3\2\2\2\u0d15\u0d16\7_\2\2"+
		"\u0d16\u0d17\7\u0101\2\2\u0d17\u0d18\5\u0240\u0121\2\u0d18\u0d19\5\u0176"+
		"\u00bc\2\u0d19\u0d62\3\2\2\2\u0d1a\u0d1b\7_\2\2\u0d1b\u0d1c\7\u0172\2"+
		"\2\u0d1c\u0d1d\5\u01b0\u00d9\2\u0d1d\u0d1e\5\u0176\u00bc\2\u0d1e\u0d62"+
		"\3\2\2\2\u0d1f\u0d20\7_\2\2\u0d20\u0d21\7\u0172\2\2\u0d21\u0d62\5\u01b0"+
		"\u00d9\2\u0d22\u0d23\7_\2\2\u0d23\u0d24\7\u0172\2\2\u0d24\u0d25\5\u01b0"+
		"\u00d9\2\u0d25\u0d26\7+\2\2\u0d26\u0d27\7\r\2\2\u0d27\u0d28\5\u0364\u01b3"+
		"\2\u0d28\u0d29\7\6\2\2\u0d29\u0d62\3\2\2\2\u0d2a\u0d2b\7_\2\2\u0d2b\u0d2c"+
		"\7\u0172\2\2\u0d2c\u0d2d\5\u01b0\u00d9\2\u0d2d\u0d2e\7+\2\2\u0d2e\u0d2f"+
		"\7\u008a\2\2\u0d2f\u0d30\7\r\2\2\u0d30\u0d31\5\u0186\u00c4\2\u0d31\u0d32"+
		"\7\6\2\2\u0d32\u0d62\3\2\2\2\u0d33\u0d34\7_\2\2\u0d34\u0d35\7\u0172\2"+
		"\2\u0d35\u0d36\5\u01b0\u00d9\2\u0d36\u0d37\7+\2\2\u0d37\u0d38\7\u0120"+
		"\2\2\u0d38\u0d39\5\u0176\u00bc\2\u0d39\u0d62\3\2\2\2\u0d3a\u0d3b\7_\2"+
		"\2\u0d3b\u0d3c\7\u0165\2\2\u0d3c\u0d3d\7\u013e\2\2\u0d3d\u0d3e\7\u010d"+
		"\2\2\u0d3e\u0d3f\5\u01b0\u00d9\2\u0d3f\u0d40\5\u0176\u00bc\2\u0d40\u0d62"+
		"\3\2\2\2\u0d41\u0d42\7_\2\2\u0d42\u0d43\7\u0165\2\2\u0d43\u0d44\7\u013e"+
		"\2\2\u0d44\u0d45\7{\2\2\u0d45\u0d46\5\u01b0\u00d9\2\u0d46\u0d47\5\u0176"+
		"\u00bc\2\u0d47\u0d62\3\2\2\2\u0d48\u0d49\7_\2\2\u0d49\u0d4a\7\u0165\2"+
		"\2\u0d4a\u0d4b\7\u013e\2\2\u0d4b\u0d4c\7\u0163\2\2\u0d4c\u0d4d\5\u01b0"+
		"\u00d9\2\u0d4d\u0d4e\5\u0176\u00bc\2\u0d4e\u0d62\3\2\2\2\u0d4f\u0d50\7"+
		"_\2\2\u0d50\u0d51\7\u0165\2\2\u0d51\u0d52\7\u013e\2\2\u0d52\u0d53\7V\2"+
		"\2\u0d53\u0d54\5\u01b0\u00d9\2\u0d54\u0d55\5\u0176\u00bc\2\u0d55\u0d62"+
		"\3\2\2\2\u0d56\u0d57\7_\2\2\u0d57\u0d58\7O\2\2\u0d58\u0d59\5\u01b0\u00d9"+
		"\2\u0d59\u0d5a\5\u0176\u00bc\2\u0d5a\u0d62\3\2\2\2\u0d5b\u0d5c\7_\2\2"+
		"\u0d5c\u0d5d\7O\2\2\u0d5d\u0d5e\5\u01b0\u00d9\2\u0d5e\u0d5f\7 \2\2\u0d5f"+
		"\u0d60\5\u01b0\u00d9\2\u0d60\u0d62\3\2\2\2\u0d61\u0d0a\3\2\2\2\u0d61\u0d10"+
		"\3\2\2\2\u0d61\u0d15\3\2\2\2\u0d61\u0d1a\3\2\2\2\u0d61\u0d1f\3\2\2\2\u0d61"+
		"\u0d22\3\2\2\2\u0d61\u0d2a\3\2\2\2\u0d61\u0d33\3\2\2\2\u0d61\u0d3a\3\2"+
		"\2\2\u0d61\u0d41\3\2\2\2\u0d61\u0d48\3\2\2\2\u0d61\u0d4f\3\2\2\2\u0d61"+
		"\u0d56\3\2\2\2\u0d61\u0d5b\3\2\2\2\u0d62\u0175\3\2\2\2\u0d63\u0d64\7\r"+
		"\2\2\u0d64\u0d65\5\u0178\u00bd\2\u0d65\u0d66\7\6\2\2\u0d66\u0177\3\2\2"+
		"\2\u0d67\u0d68\b\u00bd\1\2\u0d68\u0d69\5\u017a\u00be\2\u0d69\u0d6f\3\2"+
		"\2\2\u0d6a\u0d6b\f\3\2\2\u0d6b\u0d6c\7\b\2\2\u0d6c\u0d6e\5\u017a\u00be"+
		"\2\u0d6d\u0d6a\3\2\2\2\u0d6e\u0d71\3\2\2\2\u0d6f\u0d6d\3\2\2\2\u0d6f\u0d70"+
		"\3\2\2\2\u0d70\u0179\3\2\2\2\u0d71\u0d6f\3\2\2\2\u0d72\u0d73\5\u0434\u021b"+
		"\2\u0d73\u0d74\7\20\2\2\u0d74\u0d75\5\u017c\u00bf\2\u0d75\u0d78\3\2\2"+
		"\2\u0d76\u0d78\5\u0434\u021b\2\u0d77\u0d72\3\2\2\2\u0d77\u0d76\3\2\2\2"+
		"\u0d78\u017b\3\2\2\2\u0d79\u0d7f\5\u0220\u0111\2\u0d7a\u0d7f\5\u043c\u021f"+
		"\2\u0d7b\u0d7f\5\u03d0\u01e9\2\u0d7c\u0d7f\5\u00f2z\2\u0d7d\u0d7f\5\u042a"+
		"\u0216\2\u0d7e\u0d79\3\2\2\2\u0d7e\u0d7a\3\2\2\2\u0d7e\u0d7b\3\2\2\2\u0d7e"+
		"\u0d7c\3\2\2\2\u0d7e\u0d7d\3\2\2\2\u0d7f\u017d\3\2\2\2\u0d80\u0d81\7\r"+
		"\2\2\u0d81\u0d82\5\u03da\u01ee\2\u0d82\u0d83\7\6\2\2\u0d83\u0d88\3\2\2"+
		"\2\u0d84\u0d85\7\r\2\2\u0d85\u0d86\7\f\2\2\u0d86\u0d88\7\6\2\2\u0d87\u0d80"+
		"\3\2\2\2\u0d87\u0d84\3\2\2\2\u0d88\u017f\3\2\2\2\u0d89\u0d8a\7\r\2\2\u0d8a"+
		"\u0d8b\5\u0182\u00c2\2\u0d8b\u0d8c\7\6\2\2\u0d8c\u0181\3\2\2\2\u0d8d\u0d8e"+
		"\b\u00c2\1\2\u0d8e\u0d8f\5\u0184\u00c3\2\u0d8f\u0d95\3\2\2\2\u0d90\u0d91"+
		"\f\3\2\2\u0d91\u0d92\7\b\2\2\u0d92\u0d94\5\u0184\u00c3\2\u0d93\u0d90\3"+
		"\2\2\2\u0d94\u0d97\3\2\2\2\u0d95\u0d93\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96"+
		"\u0183\3\2\2\2\u0d97\u0d95\3\2\2\2\u0d98\u0d99\7\u01a6\2\2\u0d99\u0d9a"+
		"\7\20\2\2\u0d9a\u0d9b\5\u017c\u00bf\2\u0d9b\u0185\3\2\2\2\u0d9c\u0d9f"+
		"\5\u0188\u00c5\2\u0d9d\u0d9f\3\2\2\2\u0d9e\u0d9c\3\2\2\2\u0d9e\u0d9d\3"+
		"\2\2\2\u0d9f\u0187\3\2\2\2\u0da0\u0da1\b\u00c5\1\2\u0da1\u0da2\5\u042a"+
		"\u0216\2\u0da2\u0da8\3\2\2\2\u0da3\u0da4\f\3\2\2\u0da4\u0da5\7\b\2\2\u0da5"+
		"\u0da7\5\u042a\u0216\2\u0da6\u0da3\3\2\2\2\u0da7\u0daa\3\2\2\2\u0da8\u0da6"+
		"\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0189\3\2\2\2\u0daa\u0da8\3\2\2\2\u0dab"+
		"\u0dac\7$\2\2\u0dac\u0dad\7\u0172\2\2\u0dad\u0dae\5\u01b0\u00d9\2\u0dae"+
		"\u0daf\7\33\2\2\u0daf\u0db0\7\u0184\2\2\u0db0\u0db1\5\u042a\u0216\2\u0db1"+
		"\u0dc5\3\2\2\2\u0db2\u0db3\7$\2\2\u0db3\u0db4\7\u0172\2\2\u0db4\u0db5"+
		"\5\u01b0\u00d9\2\u0db5\u0db6\7\33\2\2\u0db6\u0db7\7\u0184\2\2\u0db7\u0db8"+
		"\5\u042a\u0216\2\u0db8\u0db9\7\64\2\2\u0db9\u0dba\5\u042a\u0216\2\u0dba"+
		"\u0dc5\3\2\2\2\u0dbb\u0dbc\7$\2\2\u0dbc\u0dbd\7\u0172\2\2\u0dbd\u0dbe"+
		"\5\u01b0\u00d9\2\u0dbe\u0dbf\7\33\2\2\u0dbf\u0dc0\7\u0184\2\2\u0dc0\u0dc1"+
		"\5\u042a\u0216\2\u0dc1\u0dc2\7\35\2\2\u0dc2\u0dc3\5\u042a\u0216\2\u0dc3"+
		"\u0dc5\3\2\2\2\u0dc4\u0dab\3\2\2\2\u0dc4\u0db2\3\2\2\2\u0dc4\u0dbb\3\2"+
		"\2\2\u0dc5\u018b\3\2\2\2\u0dc6\u0dc7\7_\2\2\u0dc7\u0dc8\7\u0101\2\2\u0dc8"+
		"\u0dc9\7J\2\2\u0dc9\u0dca\5\u01b0\u00d9\2\u0dca\u0dcb\5\u0192\u00ca\2"+
		"\u0dcb\u0dcc\7\u009c\2\2\u0dcc\u0dcd\7\u0172\2\2\u0dcd\u0dce\5\u036a\u01b6"+
		"\2\u0dce\u0dcf\7\u017f\2\2\u0dcf\u0dd0\5\u041c\u020f\2\u0dd0\u0dd1\5\u0194"+
		"\u00cb\2\u0dd1\u0dd2\7+\2\2\u0dd2\u0dd3\5\u018e\u00c8\2\u0dd3\u018d\3"+
		"\2\2\2\u0dd4\u0dd5\b\u00c8\1\2\u0dd5\u0dd6\5\u0190\u00c9\2\u0dd6\u0ddc"+
		"\3\2\2\2\u0dd7\u0dd8\f\3\2\2\u0dd8\u0dd9\7\b\2\2\u0dd9\u0ddb\5\u0190\u00c9"+
		"\2\u0dda\u0dd7\3\2\2\2\u0ddb\u0dde\3\2\2\2\u0ddc\u0dda\3\2\2\2\u0ddc\u0ddd"+
		"\3\2\2\2\u0ddd\u018f\3\2\2\2\u0dde\u0ddc\3\2\2\2\u0ddf\u0de0\7\u0101\2"+
		"\2\u0de0\u0de1\5\u0428\u0215\2\u0de1\u0de2\5\u0240\u0121\2\u0de2\u0de3"+
		"\5\u0196\u00cc\2\u0de3\u0de4\5\u0198\u00cd\2\u0de4\u0dfc\3\2\2\2\u0de5"+
		"\u0de6\7\u0101\2\2\u0de6\u0de7\5\u0428\u0215\2\u0de7\u0de8\5\u0240\u0121"+
		"\2\u0de8\u0de9\5\u023e\u0120\2\u0de9\u0dea\5\u0196\u00cc\2\u0dea\u0deb"+
		"\5\u0198\u00cd\2\u0deb\u0dfc\3\2\2\2\u0dec\u0ded\7\u00a2\2\2\u0ded\u0dee"+
		"\5\u0428\u0215\2\u0dee\u0def\5\u0424\u0213\2\u0def\u0df0\5\u0210\u0109"+
		"\2\u0df0\u0dfc\3\2\2\2\u0df1\u0df2\7\u00a2\2\2\u0df2\u0df3\5\u0428\u0215"+
		"\2\u0df3\u0df4\7\r\2\2\u0df4\u0df5\5\u03da\u01ee\2\u0df5\u0df6\7\6\2\2"+
		"\u0df6\u0df7\5\u0424\u0213\2\u0df7\u0df8\5\u0210\u0109\2\u0df8\u0dfc\3"+
		"\2\2\2\u0df9\u0dfa\7\u0158\2\2\u0dfa\u0dfc\5\u036a\u01b6\2\u0dfb\u0ddf"+
		"\3\2\2\2\u0dfb\u0de5\3\2\2\2\u0dfb\u0dec\3\2\2\2\u0dfb\u0df1\3\2\2\2\u0dfb"+
		"\u0df9\3\2\2\2\u0dfc\u0191\3\2\2\2\u0dfd\u0e00\7r\2\2\u0dfe\u0e00\3\2"+
		"\2\2\u0dff\u0dfd\3\2\2\2\u0dff\u0dfe\3\2\2\2\u0e00\u0193\3\2\2\2\u0e01"+
		"\u0e02\7\u0097\2\2\u0e02\u0e05\5\u01b0\u00d9\2\u0e03\u0e05\3\2\2\2\u0e04"+
		"\u0e01\3\2\2\2\u0e04\u0e03\3\2\2\2\u0e05\u0195\3\2\2\2\u0e06\u0e07\7\u009c"+
		"\2\2\u0e07\u0e0e\7\u013e\2\2\u0e08\u0e09\7\u009c\2\2\u0e09\u0e0a\7\u0105"+
		"\2\2\u0e0a\u0e0b\7<\2\2\u0e0b\u0e0e\5\u01b0\u00d9\2\u0e0c\u0e0e\3\2\2"+
		"\2\u0e0d\u0e06\3\2\2\2\u0e0d\u0e08\3\2\2\2\u0e0d\u0e0c\3\2\2\2\u0e0e\u0197"+
		"\3\2\2\2\u0e0f\u0e12\7\u0124\2\2\u0e10\u0e12\3\2\2\2\u0e11\u0e0f\3\2\2"+
		"\2\u0e11\u0e10\3\2\2\2\u0e12\u0199\3\2\2\2\u0e13\u0e14\7_\2\2\u0e14\u0e15"+
		"\7\u0101\2\2\u0e15\u0e16\7\u0097\2\2\u0e16\u0e17\5\u01b0\u00d9\2\u0e17"+
		"\u0e18\7\u017f\2\2\u0e18\u0e19\5\u041c\u020f\2\u0e19\u019b\3\2\2\2\u0e1a"+
		"\u0e1b\7$\2\2\u0e1b\u0e1c\7\u0101\2\2\u0e1c\u0e1d\7\u0097\2\2\u0e1d\u0e1e"+
		"\5\u01b0\u00d9\2\u0e1e\u0e1f\7\u017f\2\2\u0e1f\u0e20\5\u041c\u020f\2\u0e20"+
		"\u0e21\7\33\2\2\u0e21\u0e22\5\u018e\u00c8\2\u0e22\u0e2d\3\2\2\2\u0e23"+
		"\u0e24\7$\2\2\u0e24\u0e25\7\u0101\2\2\u0e25\u0e26\7\u0097\2\2\u0e26\u0e27"+
		"\5\u01b0\u00d9\2\u0e27\u0e28\7\u017f\2\2\u0e28\u0e29\5\u041c\u020f\2\u0e29"+
		"\u0e2a\7\u0083\2\2\u0e2a\u0e2b\5\u019e\u00d0\2\u0e2b\u0e2d\3\2\2\2\u0e2c"+
		"\u0e1a\3\2\2\2\u0e2c\u0e23\3\2\2\2\u0e2d\u019d\3\2\2\2\u0e2e\u0e2f\b\u00d0"+
		"\1\2\u0e2f\u0e30\5\u01a0\u00d1\2\u0e30\u0e36\3\2\2\2\u0e31\u0e32\f\3\2"+
		"\2\u0e32\u0e33\7\b\2\2\u0e33\u0e35\5\u01a0\u00d1\2\u0e34\u0e31\3\2\2\2"+
		"\u0e35\u0e38\3\2\2\2\u0e36\u0e34\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37\u019f"+
		"\3\2\2\2\u0e38\u0e36\3\2\2\2\u0e39\u0e3a\7\u0101\2\2\u0e3a\u0e3b\5\u0428"+
		"\u0215\2\u0e3b\u0e3c\7\r\2\2\u0e3c\u0e3d\5\u03da\u01ee\2\u0e3d\u0e3e\7"+
		"\6\2\2\u0e3e\u0e46\3\2\2\2\u0e3f\u0e40\7\u00a2\2\2\u0e40\u0e41\5\u0428"+
		"\u0215\2\u0e41\u0e42\7\r\2\2\u0e42\u0e43\5\u03da\u01ee\2\u0e43\u0e44\7"+
		"\6\2\2\u0e44\u0e46\3\2\2\2\u0e45\u0e39\3\2\2\2\u0e45\u0e3f\3\2\2\2\u0e46"+
		"\u01a1\3\2\2\2\u0e47\u0e48\7\u0083\2\2\u0e48\u0e49\7\u0101\2\2\u0e49\u0e4a"+
		"\7J\2\2\u0e4a\u0e4b\5\u01b0\u00d9\2\u0e4b\u0e4c\7\u017f\2\2\u0e4c\u0e4d"+
		"\5\u041c\u020f\2\u0e4d\u0e4e\5b\62\2\u0e4e\u0e5a\3\2\2\2\u0e4f\u0e50\7"+
		"\u0083\2\2\u0e50\u0e51\7\u0101\2\2\u0e51\u0e52\7J\2\2\u0e52\u0e53\7\u00af"+
		"\2\2\u0e53\u0e54\7\u0091\2\2\u0e54\u0e55\5\u01b0\u00d9\2\u0e55\u0e56\7"+
		"\u017f\2\2\u0e56\u0e57\5\u041c\u020f\2\u0e57\u0e58\5b\62\2\u0e58\u0e5a"+
		"\3\2\2\2\u0e59\u0e47\3\2\2\2\u0e59\u0e4f\3\2\2\2\u0e5a\u01a3\3\2\2\2\u0e5b"+
		"\u0e5c\7\u0083\2\2\u0e5c\u0e5d\7\u0101\2\2\u0e5d\u0e5e\7\u0097\2\2\u0e5e"+
		"\u0e5f\5\u01b0\u00d9\2\u0e5f\u0e60\7\u017f\2\2\u0e60\u0e61\5\u041c\u020f"+
		"\2\u0e61\u0e62\5b\62\2\u0e62\u0e6e\3\2\2\2\u0e63\u0e64\7\u0083\2\2\u0e64"+
		"\u0e65\7\u0101\2\2\u0e65\u0e66\7\u0097\2\2\u0e66\u0e67\7\u00af\2\2\u0e67"+
		"\u0e68\7\u0091\2\2\u0e68\u0e69\5\u01b0\u00d9\2\u0e69\u0e6a\7\u017f\2\2"+
		"\u0e6a\u0e6b\5\u041c\u020f\2\u0e6b\u0e6c\5b\62\2\u0e6c\u0e6e\3\2\2\2\u0e6d"+
		"\u0e5b\3\2\2\2\u0e6d\u0e63\3\2\2\2\u0e6e\u01a5\3\2\2\2\u0e6f\u0e70\7\u0083"+
		"\2\2\u0e70\u0e71\7\u010b\2\2\u0e71\u0e72\7<\2\2\u0e72\u0e73\5\u0416\u020c"+
		"\2\u0e73\u0e74\5b\62\2\u0e74\u01a7\3\2\2\2\u0e75\u0e76\7\u0123\2\2\u0e76"+
		"\u0e77\7\u010b\2\2\u0e77\u0e78\7<\2\2\u0e78\u0e79\5\u0416\u020c\2\u0e79"+
		"\u0e7a\7\u0169\2\2\u0e7a\u0e7b\5\u0418\u020d\2\u0e7b\u01a9\3\2\2\2\u0e7c"+
		"\u0e7d\7\u0083\2\2\u0e7d\u0e7e\5\u01ac\u00d7\2\u0e7e\u0e7f\7\u00af\2\2"+
		"\u0e7f\u0e80\7\u0091\2\2\u0e80\u0e81\5\u01ae\u00d8\2\u0e81\u0e82\5b\62"+
		"\2\u0e82\u0e97\3\2\2\2\u0e83\u0e84\7\u0083\2\2\u0e84\u0e85\5\u01ac\u00d7"+
		"\2\u0e85\u0e86\5\u01ae\u00d8\2\u0e86\u0e87\5b\62\2\u0e87\u0e97\3\2\2\2"+
		"\u0e88\u0e89\7\u0083\2\2\u0e89\u0e8a\7\u00b7\2\2\u0e8a\u0e8b\7U\2\2\u0e8b"+
		"\u0e8c\5\u01ae\u00d8\2\u0e8c\u0e8d\5b\62\2\u0e8d\u0e97\3\2\2\2\u0e8e\u0e8f"+
		"\7\u0083\2\2\u0e8f\u0e90\7\u00b7\2\2\u0e90\u0e91\7U\2\2\u0e91\u0e92\7"+
		"\u00af\2\2\u0e92\u0e93\7\u0091\2\2\u0e93\u0e94\5\u01ae\u00d8\2\u0e94\u0e95"+
		"\5b\62\2\u0e95\u0e97\3\2\2\2\u0e96\u0e7c\3\2\2\2\u0e96\u0e83\3\2\2\2\u0e96"+
		"\u0e88\3\2\2\2\u0e96\u0e8e\3\2\2\2\u0e97\u01ab\3\2\2\2\u0e98\u0eb1\7\u015f"+
		"\2\2\u0e99\u0eb1\7\u0142\2\2\u0e9a\u0eb1\7\u018b\2\2\u0e9b\u0eb1\7\u00b7"+
		"\2\2\u0e9c\u0e9d\7\u009e\2\2\u0e9d\u0eb1\7\u015f\2\2\u0e9e\u0eb1\7\u0172"+
		"\2\2\u0e9f\u0eb1\7\u0081\2\2\u0ea0\u0eb1\7O\2\2\u0ea1\u0eb1\7\\\2\2\u0ea2"+
		"\u0eb1\7\u013c\2\2\u0ea3\u0eb1\7\u0093\2\2\u0ea4\u0ea5\7\u0165\2\2\u0ea5"+
		"\u0ea6\7\u013e\2\2\u0ea6\u0eb1\7\u010d\2\2\u0ea7\u0ea8\7\u0165\2\2\u0ea8"+
		"\u0ea9\7\u013e\2\2\u0ea9\u0eb1\7{\2\2\u0eaa\u0eab\7\u0165\2\2\u0eab\u0eac"+
		"\7\u013e\2\2\u0eac\u0eb1\7\u0163\2\2\u0ead\u0eae\7\u0165\2\2\u0eae\u0eaf"+
		"\7\u013e\2\2\u0eaf\u0eb1\7V\2\2\u0eb0\u0e98\3\2\2\2\u0eb0\u0e99\3\2\2"+
		"\2\u0eb0\u0e9a\3\2\2\2\u0eb0\u0e9b\3\2\2\2\u0eb0\u0e9c\3\2\2\2\u0eb0\u0e9e"+
		"\3\2\2\2\u0eb0\u0e9f\3\2\2\2\u0eb0\u0ea0\3\2\2\2\u0eb0\u0ea1\3\2\2\2\u0eb0"+
		"\u0ea2\3\2\2\2\u0eb0\u0ea3\3\2\2\2\u0eb0\u0ea4\3\2\2\2\u0eb0\u0ea7\3\2"+
		"\2\2\u0eb0\u0eaa\3\2\2\2\u0eb0\u0ead\3\2\2\2\u0eb1\u01ad\3\2\2\2\u0eb2"+
		"\u0eb3\b\u00d8\1\2\u0eb3\u0eb4\5\u01b0\u00d9\2\u0eb4\u0eba\3\2\2\2\u0eb5"+
		"\u0eb6\f\3\2\2\u0eb6\u0eb7\7\b\2\2\u0eb7\u0eb9\5\u01b0\u00d9\2\u0eb8\u0eb5"+
		"\3\2\2\2\u0eb9\u0ebc\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb"+
		"\u01af\3\2\2\2\u0ebc\u0eba\3\2\2\2\u0ebd\u0ec2\5\u0430\u0219\2\u0ebe\u0ebf"+
		"\5\u0430\u0219\2\u0ebf\u0ec0\5\u01b2\u00da\2\u0ec0\u0ec2\3\2\2\2\u0ec1"+
		"\u0ebd\3\2\2\2\u0ec1\u0ebe\3\2\2\2\u0ec2\u01b1\3\2\2\2\u0ec3\u0ec4\b\u00da"+
		"\1\2\u0ec4\u0ec5\7\7\2\2\u0ec5\u0ec6\5\u041e\u0210\2\u0ec6\u0ecc\3\2\2"+
		"\2\u0ec7\u0ec8\f\3\2\2\u0ec8\u0ec9\7\7\2\2\u0ec9\u0ecb\5\u041e\u0210\2"+
		"\u0eca\u0ec7\3\2\2\2\u0ecb\u0ece\3\2\2\2\u0ecc\u0eca\3\2\2\2\u0ecc\u0ecd"+
		"\3\2\2\2\u0ecd\u01b3\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed0\7\u0170\2"+
		"\2\u0ed0\u0ed1\5\u0316\u018c\2\u0ed1\u0ed2\5\u035a\u01ae\2\u0ed2\u0ed3"+
		"\5\u01b6\u00dc\2\u0ed3\u0ed4\5b\62\2\u0ed4\u01b5\3\2\2\2\u0ed5\u0ed6\7"+
		"[\2\2\u0ed6\u0edb\7\u00ae\2\2\u0ed7\u0ed8\7\u0130\2\2\u0ed8\u0edb\7\u00ae"+
		"\2\2\u0ed9\u0edb\3\2\2\2\u0eda\u0ed5\3\2\2\2\u0eda\u0ed7\3\2\2\2\u0eda"+
		"\u0ed9\3\2\2\2\u0edb\u01b7\3\2\2\2\u0edc\u0edd\7Q\2\2\u0edd\u0ede\7\u00ff"+
		"\2\2\u0ede\u0edf\5\u01ba\u00de\2\u0edf\u0ee0\5\u01b0\u00d9\2\u0ee0\u0ee1"+
		"\7\u00c8\2\2\u0ee1\u0ee2\5\u01bc\u00df\2\u0ee2\u0f71\3\2\2\2\u0ee3\u0ee4"+
		"\7Q\2\2\u0ee4\u0ee5\7\u00ff\2\2\u0ee5\u0ee6\7!\2\2\u0ee6\u0ee7\5\u0424"+
		"\u0213\2\u0ee7\u0ee8\5\u017e\u00c0\2\u0ee8\u0ee9\7\u00c8\2\2\u0ee9\u0eea"+
		"\5\u01bc\u00df\2\u0eea\u0f71\3\2\2\2\u0eeb\u0eec\7Q\2\2\u0eec\u0eed\7"+
		"\u00ff\2\2\u0eed\u0eee\7\u00a2\2\2\u0eee\u0eef\5\u0424\u0213\2\u0eef\u0ef0"+
		"\5\u0210\u0109\2\u0ef0\u0ef1\7\u00c8\2\2\u0ef1\u0ef2\5\u01bc\u00df\2\u0ef2"+
		"\u0f71\3\2\2\2\u0ef3\u0ef4\7Q\2\2\u0ef4\u0ef5\7\u00ff\2\2\u0ef5\u0ef6"+
		"\7\u0101\2\2\u0ef6\u0ef7\5\u0240\u0121\2\u0ef7\u0ef8\5\u023e\u0120\2\u0ef8"+
		"\u0ef9\7\u00c8\2\2\u0ef9\u0efa\5\u01bc\u00df\2\u0efa\u0f71\3\2\2\2\u0efb"+
		"\u0efc\7Q\2\2\u0efc\u0efd\7\u00ff\2\2\u0efd\u0efe\7X\2\2\u0efe\u0eff\5"+
		"\u0418\u020d\2\u0eff\u0f00\7\u00ff\2\2\u0f00\u0f01\5\u01b0\u00d9\2\u0f01"+
		"\u0f02\7\u00c8\2\2\u0f02\u0f03\5\u01bc\u00df\2\u0f03\u0f71\3\2\2\2\u0f04"+
		"\u0f05\7Q\2\2\u0f05\u0f06\7\u00ff\2\2\u0f06\u0f07\7\u013a\2\2\u0f07\u0f08"+
		"\5\u0418\u020d\2\u0f08\u0f09\7\u00ff\2\2\u0f09\u0f0a\5\u01b0\u00d9\2\u0f0a"+
		"\u0f0b\7\u00c8\2\2\u0f0b\u0f0c\5\u01bc\u00df\2\u0f0c\u0f71\3\2\2\2\u0f0d"+
		"\u0f0e\7Q\2\2\u0f0e\u0f0f\7\u00ff\2\2\u0f0f\u0f10\7\u013a\2\2\u0f10\u0f11"+
		"\5\u0418\u020d\2\u0f11\u0f12\7\u00c8\2\2\u0f12\u0f13\5\u01bc\u00df\2\u0f13"+
		"\u0f71\3\2\2\2\u0f14\u0f15\7Q\2\2\u0f15\u0f16\7\u00ff\2\2\u0f16\u0f17"+
		"\7\u016d\2\2\u0f17\u0f18\5\u0418\u020d\2\u0f18\u0f19\7\u00ff\2\2\u0f19"+
		"\u0f1a\5\u01b0\u00d9\2\u0f1a\u0f1b\7\u00c8\2\2\u0f1b\u0f1c\5\u01bc\u00df"+
		"\2\u0f1c\u0f71\3\2\2\2\u0f1d\u0f1e\7Q\2\2\u0f1e\u0f1f\7\u00ff\2\2\u0f1f"+
		"\u0f20\7\u0101\2\2\u0f20\u0f21\7J\2\2\u0f21\u0f22\5\u01b0\u00d9\2\u0f22"+
		"\u0f23\7\u017f\2\2\u0f23\u0f24\5\u041c\u020f\2\u0f24\u0f25\7\u00c8\2\2"+
		"\u0f25\u0f26\5\u01bc\u00df\2\u0f26\u0f71\3\2\2\2\u0f27\u0f28\7Q\2\2\u0f28"+
		"\u0f29\7\u00ff\2\2\u0f29\u0f2a\7\u0101\2\2\u0f2a\u0f2b\7\u0097\2\2\u0f2b"+
		"\u0f2c\5\u01b0\u00d9\2\u0f2c\u0f2d\7\u017f\2\2\u0f2d\u0f2e\5\u041c\u020f"+
		"\2\u0f2e\u0f2f\7\u00c8\2\2\u0f2f\u0f30\5\u01bc\u00df\2\u0f30\u0f71\3\2"+
		"\2\2\u0f31\u0f32\7Q\2\2\u0f32\u0f33\7\u00ff\2\2\u0f33\u0f34\7\u00cf\2"+
		"\2\u0f34\u0f35\7\u00fa\2\2\u0f35\u0f36\5\u00f2z\2\u0f36\u0f37\7\u00c8"+
		"\2\2\u0f37\u0f38\5\u01bc\u00df\2\u0f38\u0f71\3\2\2\2\u0f39\u0f3a\7Q\2"+
		"\2\u0f3a\u0f3b\7\u00ff\2\2\u0f3b\u0f3c\7B\2\2\u0f3c\u0f3d\7\r\2\2\u0f3d"+
		"\u0f3e\5\u036a\u01b6\2\u0f3e\u0f3f\7+\2\2\u0f3f\u0f40\5\u036a\u01b6\2"+
		"\u0f40\u0f41\7\6\2\2\u0f41\u0f42\7\u00c8\2\2\u0f42\u0f43\5\u01bc\u00df"+
		"\2\u0f43\u0f71\3\2\2\2\u0f44\u0f45\7Q\2\2\u0f45\u0f46\7\u00ff\2\2\u0f46"+
		"\u0f47\5\u0104\u0083\2\u0f47\u0f48\7\u00ce\2\2\u0f48\u0f49\5\u01b0\u00d9"+
		"\2\u0f49\u0f4a\7\u00c8\2\2\u0f4a\u0f4b\5\u01bc\u00df\2\u0f4b\u0f71\3\2"+
		"\2\2\u0f4c\u0f4d\7Q\2\2\u0f4d\u0f4e\7\u00ff\2\2\u0f4e\u0f4f\7\u0165\2"+
		"\2\u0f4f\u0f50\7\u013e\2\2\u0f50\u0f51\7\u010d\2\2\u0f51\u0f52\5\u01b0"+
		"\u00d9\2\u0f52\u0f53\7\u00c8\2\2\u0f53\u0f54\5\u01bc\u00df\2\u0f54\u0f71"+
		"\3\2\2\2\u0f55\u0f56\7Q\2\2\u0f56\u0f57\7\u00ff\2\2\u0f57\u0f58\7\u0165"+
		"\2\2\u0f58\u0f59\7\u013e\2\2\u0f59\u0f5a\7{\2\2\u0f5a\u0f5b\5\u01b0\u00d9"+
		"\2\u0f5b\u0f5c\7\u00c8\2\2\u0f5c\u0f5d\5\u01bc\u00df\2\u0f5d\u0f71\3\2"+
		"\2\2\u0f5e\u0f5f\7Q\2\2\u0f5f\u0f60\7\u00ff\2\2\u0f60\u0f61\7\u0165\2"+
		"\2\u0f61\u0f62\7\u013e\2\2\u0f62\u0f63\7\u0163\2\2\u0f63\u0f64\5\u01b0"+
		"\u00d9\2\u0f64\u0f65\7\u00c8\2\2\u0f65\u0f66\5\u01bc\u00df\2\u0f66\u0f71"+
		"\3\2\2\2\u0f67\u0f68\7Q\2\2\u0f68\u0f69\7\u00ff\2\2\u0f69\u0f6a\7\u0165"+
		"\2\2\u0f6a\u0f6b\7\u013e\2\2\u0f6b\u0f6c\7V\2\2\u0f6c\u0f6d\5\u01b0\u00d9"+
		"\2\u0f6d\u0f6e\7\u00c8\2\2\u0f6e\u0f6f\5\u01bc\u00df\2\u0f6f\u0f71\3\2"+
		"\2\2\u0f70\u0edc\3\2\2\2\u0f70\u0ee3\3\2\2\2\u0f70\u0eeb\3\2\2\2\u0f70"+
		"\u0ef3\3\2\2\2\u0f70\u0efb\3\2\2\2\u0f70\u0f04\3\2\2\2\u0f70\u0f0d\3\2"+
		"\2\2\u0f70\u0f14\3\2\2\2\u0f70\u0f1d\3\2\2\2\u0f70\u0f27\3\2\2\2\u0f70"+
		"\u0f31\3\2\2\2\u0f70\u0f39\3\2\2\2\u0f70\u0f44\3\2\2\2\u0f70\u0f4c\3\2"+
		"\2\2\u0f70\u0f55\3\2\2\2\u0f70\u0f5e\3\2\2\2\u0f70\u0f67\3\2\2\2\u0f71"+
		"\u01b9\3\2\2\2\u0f72\u0f87\7P\2\2\u0f73\u0f87\7m\2\2\u0f74\u0f87\7\u013c"+
		"\2\2\u0f75\u0f87\7\u00b7\2\2\u0f76\u0f87\7\u0142\2\2\u0f77\u0f87\7\u015f"+
		"\2\2\u0f78\u0f87\7\u0081\2\2\u0f79\u0f87\7\u0172\2\2\u0f7a\u0f87\7\u018b"+
		"\2\2\u0f7b\u0f87\7O\2\2\u0f7c\u0f87\7\\\2\2\u0f7d\u0f87\7\u0161\2\2\u0f7e"+
		"\u0f87\7\u0093\2\2\u0f7f\u0f87\7\u0136\2\2\u0f80\u0f81\7\u009e\2\2\u0f81"+
		"\u0f87\7\u015f\2\2\u0f82\u0f87\7\u0145\2\2\u0f83\u0f84\7\u009e\2\2\u0f84"+
		"\u0f85\7l\2\2\u0f85\u0f87\7\u0194\2\2\u0f86\u0f72\3\2\2\2\u0f86\u0f73"+
		"\3\2\2\2\u0f86\u0f74\3\2\2\2\u0f86\u0f75\3\2\2\2\u0f86\u0f76\3\2\2\2\u0f86"+
		"\u0f77\3\2\2\2\u0f86\u0f78\3\2\2\2\u0f86\u0f79\3\2\2\2\u0f86\u0f7a\3\2"+
		"\2\2\u0f86\u0f7b\3\2\2\2\u0f86\u0f7c\3\2\2\2\u0f86\u0f7d\3\2\2\2\u0f86"+
		"\u0f7e\3\2\2\2\u0f86\u0f7f\3\2\2\2\u0f86\u0f80\3\2\2\2\u0f86\u0f82\3\2"+
		"\2\2\u0f86\u0f83\3\2\2\2\u0f87\u01bb\3\2\2\2\u0f88\u0f8b\5\u042a\u0216"+
		"\2\u0f89\u0f8b\7\u00f6\2\2\u0f8a\u0f88\3\2\2\2\u0f8a\u0f89\3\2\2\2\u0f8b"+
		"\u01bd\3\2\2\2\u0f8c\u0f8d\7\u0140\2\2\u0f8d\u0f8e\7\u00cd\2\2\u0f8e\u0f8f"+
		"\5\u01c0\u00e1\2\u0f8f\u0f90\7\u00ff\2\2\u0f90\u0f91\5\u01c2\u00e2\2\u0f91"+
		"\u0f92\5\u01b0\u00d9\2\u0f92\u0f93\7\u00c8\2\2\u0f93\u0f94\5\u01c4\u00e3"+
		"\2\u0f94\u0fbe\3\2\2\2\u0f95\u0f96\7\u0140\2\2\u0f96\u0f97\7\u00cd\2\2"+
		"\u0f97\u0f98\5\u01c0\u00e1\2\u0f98\u0f99\7\u00ff\2\2\u0f99\u0f9a\7!\2"+
		"\2\u0f9a\u0f9b\5\u0424\u0213\2\u0f9b\u0f9c\5\u017e\u00c0\2\u0f9c\u0f9d"+
		"\7\u00c8\2\2\u0f9d\u0f9e\5\u01c4\u00e3\2\u0f9e\u0fbe\3\2\2\2\u0f9f\u0fa0"+
		"\7\u0140\2\2\u0fa0\u0fa1\7\u00cd\2\2\u0fa1\u0fa2\5\u01c0\u00e1\2\u0fa2"+
		"\u0fa3\7\u00ff\2\2\u0fa3\u0fa4\7\u00a2\2\2\u0fa4\u0fa5\5\u0424\u0213\2"+
		"\u0fa5\u0fa6\5\u0210\u0109\2\u0fa6\u0fa7\7\u00c8\2\2\u0fa7\u0fa8\5\u01c4"+
		"\u00e3\2\u0fa8\u0fbe\3\2\2\2\u0fa9\u0faa\7\u0140\2\2\u0faa\u0fab\7\u00cd"+
		"\2\2\u0fab\u0fac\5\u01c0\u00e1\2\u0fac\u0fad\7\u00ff\2\2\u0fad\u0fae\7"+
		"\u00cf\2\2\u0fae\u0faf\7\u00fa\2\2\u0faf\u0fb0\5\u00f2z\2\u0fb0\u0fb1"+
		"\7\u00c8\2\2\u0fb1\u0fb2\5\u01c4\u00e3\2\u0fb2\u0fbe\3\2\2\2\u0fb3\u0fb4"+
		"\7\u0140\2\2\u0fb4\u0fb5\7\u00cd\2\2\u0fb5\u0fb6\5\u01c0\u00e1\2\u0fb6"+
		"\u0fb7\7\u00ff\2\2\u0fb7\u0fb8\5\u0104\u0083\2\u0fb8\u0fb9\7\u00ce\2\2"+
		"\u0fb9\u0fba\5\u01b0\u00d9\2\u0fba\u0fbb\7\u00c8\2\2\u0fbb\u0fbc\5\u01c4"+
		"\u00e3\2\u0fbc\u0fbe\3\2\2\2\u0fbd\u0f8c\3\2\2\2\u0fbd\u0f95\3\2\2\2\u0fbd"+
		"\u0f9f\3\2\2\2\u0fbd\u0fa9\3\2\2\2\u0fbd\u0fb3\3\2\2\2\u0fbe\u01bf\3\2"+
		"\2\2\u0fbf\u0fc0\7\u009c\2\2\u0fc0\u0fc3\5F$\2\u0fc1\u0fc3\3\2\2\2\u0fc2"+
		"\u0fbf\3\2\2\2\u0fc2\u0fc1\3\2\2\2\u0fc3\u01c1\3\2\2\2\u0fc4\u0fd1\7P"+
		"\2\2\u0fc5\u0fd1\7m\2\2\u0fc6\u0fc7\7\u009e\2\2\u0fc7\u0fd1\7\u015f\2"+
		"\2\u0fc8\u0fd1\7\u013c\2\2\u0fc9\u0fd1\7\u0142\2\2\u0fca\u0fd1\7\u015f"+
		"\2\2\u0fcb\u0fd1\7\u0081\2\2\u0fcc\u0fd1\7\u0136\2\2\u0fcd\u0fd1\7\u0161"+
		"\2\2\u0fce\u0fd1\7\u0172\2\2\u0fcf\u0fd1\7\u018b\2\2\u0fd0\u0fc4\3\2\2"+
		"\2\u0fd0\u0fc5\3\2\2\2\u0fd0\u0fc6\3\2\2\2\u0fd0\u0fc8\3\2\2\2\u0fd0\u0fc9"+
		"\3\2\2\2\u0fd0\u0fca\3\2\2\2\u0fd0\u0fcb\3\2\2\2\u0fd0\u0fcc\3\2\2\2\u0fd0"+
		"\u0fcd\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fcf\3\2\2\2\u0fd1\u01c3\3\2"+
		"\2\2\u0fd2\u0fd5\5\u042a\u0216\2\u0fd3\u0fd5\7\u00f6\2\2\u0fd4\u0fd2\3"+
		"\2\2\2\u0fd4\u0fd3\3\2\2\2\u0fd5\u01c5\3\2\2\2\u0fd6\u0fd7\7\u0098\2\2"+
		"\u0fd7\u0fdb\5\u01c8\u00e5\2\u0fd8\u0fd9\7\u00e8\2\2\u0fd9\u0fdb\5\u01c8"+
		"\u00e5\2\u0fda\u0fd6\3\2\2\2\u0fda\u0fd8\3\2\2\2\u0fdb\u01c7\3\2\2\2\u0fdc"+
		"\u101f\5\u02fa\u017e\2\u0fdd\u0fde\5\u01ca\u00e6\2\u0fde\u0fdf\5\u02fa"+
		"\u017e\2\u0fdf\u101f\3\2\2\2\u0fe0\u0fe1\7\u00ee\2\2\u0fe1\u0fe2\5\u01cc"+
		"\u00e7\2\u0fe2\u0fe3\5\u02fa\u017e\2\u0fe3\u101f\3\2\2\2\u0fe4\u0fe5\7"+
		"\u011b\2\2\u0fe5\u0fe6\5\u01cc\u00e7\2\u0fe6\u0fe7\5\u02fa\u017e\2\u0fe7"+
		"\u101f\3\2\2\2\u0fe8\u0fe9\7\u0099\2\2\u0fe9\u0fea\5\u01cc\u00e7\2\u0fea"+
		"\u0feb\5\u02fa\u017e\2\u0feb\u101f\3\2\2\2\u0fec\u0fed\7\u00d0\2\2\u0fed"+
		"\u0fee\5\u01cc\u00e7\2\u0fee\u0fef\5\u02fa\u017e\2\u0fef\u101f\3\2\2\2"+
		"\u0ff0\u0ff1\7\30\2\2\u0ff1\u0ff2\5\u042e\u0218\2\u0ff2\u0ff3\5\u01cc"+
		"\u00e7\2\u0ff3\u0ff4\5\u02fa\u017e\2\u0ff4\u101f\3\2\2\2\u0ff5\u0ff6\7"+
		"\u0129\2\2\u0ff6\u0ff7\5\u042e\u0218\2\u0ff7\u0ff8\5\u01cc\u00e7\2\u0ff8"+
		"\u0ff9\5\u02fa\u017e\2\u0ff9\u101f\3\2\2\2\u0ffa\u0ffb\5\u042e\u0218\2"+
		"\u0ffb\u0ffc\5\u01cc\u00e7\2\u0ffc\u0ffd\5\u02fa\u017e\2\u0ffd\u101f\3"+
		"\2\2\2\u0ffe\u0fff\7\"\2\2\u0fff\u1000\5\u01cc\u00e7\2\u1000\u1001\5\u02fa"+
		"\u017e\2\u1001\u101f\3\2\2\2\u1002\u1003\7\u009f\2\2\u1003\u1004\5\u01cc"+
		"\u00e7\2\u1004\u1005\5\u02fa\u017e\2\u1005\u101f\3\2\2\2\u1006\u1007\7"+
		"\u009f\2\2\u1007\u1008\5\u042e\u0218\2\u1008\u1009\5\u01cc\u00e7\2\u1009"+
		"\u100a\5\u02fa\u017e\2\u100a\u101f\3\2\2\2\u100b\u100c\7\u009f\2\2\u100c"+
		"\u100d\7\"\2\2\u100d\u100e\5\u01cc\u00e7\2\u100e\u100f\5\u02fa\u017e\2"+
		"\u100f\u101f\3\2\2\2\u1010\u1011\7\63\2\2\u1011\u1012\5\u01cc\u00e7\2"+
		"\u1012\u1013\5\u02fa\u017e\2\u1013\u101f\3\2\2\2\u1014\u1015\7\63\2\2"+
		"\u1015\u1016\5\u042e\u0218\2\u1016\u1017\5\u01cc\u00e7\2\u1017\u1018\5"+
		"\u02fa\u017e\2\u1018\u101f\3\2\2\2\u1019\u101a\7\63\2\2\u101a\u101b\7"+
		"\"\2\2\u101b\u101c\5\u01cc\u00e7\2\u101c\u101d\5\u02fa\u017e\2\u101d\u101f"+
		"\3\2\2\2\u101e\u0fdc\3\2\2\2\u101e\u0fdd\3\2\2\2\u101e\u0fe0\3\2\2\2\u101e"+
		"\u0fe4\3\2\2\2\u101e\u0fe8\3\2\2\2\u101e\u0fec\3\2\2\2\u101e\u0ff0\3\2"+
		"\2\2\u101e\u0ff5\3\2\2\2\u101e\u0ffa\3\2\2\2\u101e\u0ffe\3\2\2\2\u101e"+
		"\u1002\3\2\2\2\u101e\u1006\3\2\2\2\u101e\u100b\3\2\2\2\u101e\u1010\3\2"+
		"\2\2\u101e\u1014\3\2\2\2\u101e\u1019\3\2\2\2\u101f\u01c9\3\2\2\2\u1020"+
		"\u1021\t\7\2\2\u1021\u01cb\3\2\2\2\u1022\u1025\5\u01ca\u00e6\2\u1023\u1025"+
		"\3\2\2\2\u1024\u1022\3\2\2\2\u1024\u1023\3\2\2\2\u1025\u01cd\3\2\2\2\u1026"+
		"\u1027\7\u00a5\2\2\u1027\u1028\5\u01d2\u00ea\2\u1028\u1029\7\u00ff\2\2"+
		"\u1029\u102a\5\u01d8\u00ed\2\u102a\u102b\7\u0169\2\2\u102b\u102c\5\u01da"+
		"\u00ee\2\u102c\u102d\5\u01de\u00f0\2\u102d\u01cf\3\2\2\2\u102e\u102f\7"+
		"\u0134\2\2\u102f\u1030\5\u01d2\u00ea\2\u1030\u1031\7\u00ff\2\2\u1031\u1032"+
		"\5\u01d8\u00ed\2\u1032\u1033\7 \2\2\u1033\u1034\5\u01da\u00ee\2\u1034"+
		"\u1035\5b\62\2\u1035\u1042\3\2\2\2\u1036\u1037\7\u0134\2\2\u1037\u1038"+
		"\7\u00a5\2\2\u1038\u1039\7\u0102\2\2\u1039\u103a\7\u009c";
	private static final String _serializedATNSegment2 =
		"\2\2\u103a\u103b\5\u01d2\u00ea\2\u103b\u103c\7\u00ff\2\2\u103c\u103d\5"+
		"\u01d8\u00ed\2\u103d\u103e\7 \2\2\u103e\u103f\5\u01da\u00ee\2\u103f\u1040"+
		"\5b\62\2\u1040\u1042\3\2\2\2\u1041\u102e\3\2\2\2\u1041\u1036\3\2\2\2\u1042"+
		"\u01d1\3\2\2\2\u1043\u1053\5\u01d4\u00eb\2\u1044\u1053\7\"\2\2\u1045\u1046"+
		"\7\"\2\2\u1046\u1053\7\u011c\2\2\u1047\u1048\7\"\2\2\u1048\u1049\7\r\2"+
		"\2\u1049\u104a\5\u00c0a\2\u104a\u104b\7\6\2\2\u104b\u1053\3\2\2\2\u104c"+
		"\u104d\7\"\2\2\u104d\u104e\7\u011c\2\2\u104e\u104f\7\r\2\2\u104f\u1050"+
		"\5\u00c0a\2\u1050\u1051\7\6\2\2\u1051\u1053\3\2\2\2\u1052\u1043\3\2\2"+
		"\2\u1052\u1044\3\2\2\2\u1052\u1045\3\2\2\2\u1052\u1047\3\2\2\2\u1052\u104c"+
		"\3\2\2\2\u1053\u01d3\3\2\2\2\u1054\u1055\b\u00eb\1\2\u1055\u1056\5\u01d6"+
		"\u00ec\2\u1056\u105c\3\2\2\2\u1057\u1058\f\3\2\2\u1058\u1059\7\b\2\2\u1059"+
		"\u105b\5\u01d6\u00ec\2\u105a\u1057\3\2\2\2\u105b\u105e\3\2\2\2\u105c\u105a"+
		"\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u01d5\3\2\2\2\u105e\u105c\3\2\2\2\u105f"+
		"\u1060\7\u0141\2\2\u1060\u1069\5\u00be`\2\u1061\u1062\7\u0127\2\2\u1062"+
		"\u1069\5\u00be`\2\u1063\u1064\7_\2\2\u1064\u1069\5\u00be`\2\u1065\u1066"+
		"\5\u0430\u0219\2\u1066\u1067\5\u00be`\2\u1067\u1069\3\2\2\2\u1068\u105f"+
		"\3\2\2\2\u1068\u1061\3\2\2\2\u1068\u1063\3\2\2\2\u1068\u1065\3\2\2\2\u1069"+
		"\u01d7\3\2\2\2\u106a\u1097\5\u0412\u020a\2\u106b\u106c\7\u015f\2\2\u106c"+
		"\u1097\5\u0412\u020a\2\u106d\u106e\7\u0142\2\2\u106e\u1097\5\u0412\u020a"+
		"\2\u106f\u1070\7\u009e\2\2\u1070\u1071\7l\2\2\u1071\u1072\7\u0194\2\2"+
		"\u1072\u1097\5\u0416\u020c\2\u1073\u1074\7\u009e\2\2\u1074\u1075\7\u0145"+
		"\2\2\u1075\u1097\5\u0416\u020c\2\u1076\u1077\7\u00a2\2\2\u1077\u1097\5"+
		"\u01e0\u00f1\2\u1078\u1079\7m\2\2\u1079\u1097\5\u0416\u020c\2\u107a\u107b"+
		"\7\u0081\2\2\u107b\u1097\5\u01ae\u00d8\2\u107c\u107d\7\u00ce\2\2\u107d"+
		"\u1097\5\u0416\u020c\2\u107e\u107f\7\u00cf\2\2\u107f\u1080\7\u00fa\2\2"+
		"\u1080\u1097\5\u00f4{\2\u1081\u1082\7\u013c\2\2\u1082\u1097\5\u0416\u020c"+
		"\2\u1083\u1084\7\u0161\2\2\u1084\u1097\5\u0416\u020c\2\u1085\u1086\7\u0172"+
		"\2\2\u1086\u1097\5\u01ae\u00d8\2\u1087\u1088\7\"\2\2\u1088\u1089\7\u0160"+
		"\2\2\u1089\u108a\7\u00b4\2\2\u108a\u108b\7\u013c\2\2\u108b\u1097\5\u0416"+
		"\u020c\2\u108c\u108d\7\"\2\2\u108d\u108e\7\u0143\2\2\u108e\u108f\7\u00b4"+
		"\2\2\u108f\u1090\7\u013c\2\2\u1090\u1097\5\u0416\u020c\2\u1091\u1092\7"+
		"\"\2\2\u1092\u1093\7\u00a3\2\2\u1093\u1094\7\u00b4\2\2\u1094\u1095\7\u013c"+
		"\2\2\u1095\u1097\5\u0416\u020c\2\u1096\u106a\3\2\2\2\u1096\u106b\3\2\2"+
		"\2\u1096\u106d\3\2\2\2\u1096\u106f\3\2\2\2\u1096\u1073\3\2\2\2\u1096\u1076"+
		"\3\2\2\2\u1096\u1078\3\2\2\2\u1096\u107a\3\2\2\2\u1096\u107c\3\2\2\2\u1096"+
		"\u107e\3\2\2\2\u1096\u1081\3\2\2\2\u1096\u1083\3\2\2\2\u1096\u1085\3\2"+
		"\2\2\u1096\u1087\3\2\2\2\u1096\u108c\3\2\2\2\u1096\u1091\3\2\2\2\u1097"+
		"\u01d9\3\2\2\2\u1098\u1099\b\u00ee\1\2\u1099\u109a\5\u01dc\u00ef\2\u109a"+
		"\u10a0\3\2\2\2\u109b\u109c\f\3\2\2\u109c\u109d\7\b\2\2\u109d\u109f\5\u01dc"+
		"\u00ef\2\u109e\u109b\3\2\2\2\u109f\u10a2\3\2\2\2\u10a0\u109e\3\2\2\2\u10a0"+
		"\u10a1\3\2\2\2\u10a1\u01db\3\2\2\2\u10a2\u10a0\3\2\2\2\u10a3\u10a7\5\u042c"+
		"\u0217\2\u10a4\u10a5\7\u00a8\2\2\u10a5\u10a7\5\u042c\u0217\2\u10a6\u10a3"+
		"\3\2\2\2\u10a6\u10a4\3\2\2\2\u10a7\u01dd\3\2\2\2\u10a8\u10a9\7\u0191\2"+
		"\2\u10a9\u10aa\7\u00a5\2\2\u10aa\u10ad\7\u0102\2\2\u10ab\u10ad\3\2\2\2"+
		"\u10ac\u10a8\3\2\2\2\u10ac\u10ab\3\2\2\2\u10ad\u01df\3\2\2\2\u10ae\u10af"+
		"\b\u00f1\1\2\u10af\u10b0\5\u01e2\u00f2\2\u10b0\u10b6\3\2\2\2\u10b1\u10b2"+
		"\f\3\2\2\u10b2\u10b3\7\b\2\2\u10b3\u10b5\5\u01e2\u00f2\2\u10b4\u10b1\3"+
		"\2\2\2\u10b5\u10b8\3\2\2\2\u10b6\u10b4\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7"+
		"\u01e1\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b9\u10ba\5\u0424\u0213\2\u10ba\u10bb"+
		"\5\u0210\u0109\2\u10bb\u01e3\3\2\2\2\u10bc\u10bd\7\u00a5\2\2\u10bd\u10be"+
		"\5\u01d4\u00eb\2\u10be\u10bf\7\u0169\2\2\u10bf\u10c0\5\u0416\u020c\2\u10c0"+
		"\u10c1\5\u01e8\u00f5\2\u10c1\u10c2\5\u01ea\u00f6\2\u10c2\u01e5\3\2\2\2"+
		"\u10c3\u10c4\7\u0134\2\2\u10c4\u10c5\5\u01d4\u00eb\2\u10c5\u10c6\7 \2"+
		"\2\u10c6\u10c7\5\u0416\u020c\2\u10c7\u10c8\5\u01ea\u00f6\2\u10c8\u10c9"+
		"\5b\62\2\u10c9\u10d5\3\2\2\2\u10ca\u10cb\7\u0134\2\2\u10cb\u10cc\7\34"+
		"\2\2\u10cc\u10cd\7\u0102\2\2\u10cd\u10ce\7\u009c\2\2\u10ce\u10cf\5\u01d4"+
		"\u00eb\2\u10cf\u10d0\7 \2\2\u10d0\u10d1\5\u0416\u020c\2\u10d1\u10d2\5"+
		"\u01ea\u00f6\2\u10d2\u10d3\5b\62\2\u10d3\u10d5\3\2\2\2\u10d4\u10c3\3\2"+
		"\2\2\u10d4\u10ca\3\2\2\2\u10d5\u01e7\3\2\2\2\u10d6\u10d7\7\u0191\2\2\u10d7"+
		"\u10d8\7\34\2\2\u10d8\u10db\7\u0102\2\2\u10d9\u10db\3\2\2\2\u10da\u10d6"+
		"\3\2\2\2\u10da\u10d9\3\2\2\2\u10db\u01e9\3\2\2\2\u10dc\u10dd\7\u00a6\2"+
		"\2\u10dd\u10de\7<\2\2\u10de\u10e1\5\u042c\u0217\2\u10df\u10e1\3\2\2\2"+
		"\u10e0\u10dc\3\2\2\2\u10e0\u10df\3\2\2\2\u10e1\u01eb\3\2\2\2\u10e2\u10e3"+
		"\7$\2\2\u10e3\u10e4\7r\2\2\u10e4\u10e5\7\u011c\2\2\u10e5\u10e6\5\u01ee"+
		"\u00f8\2\u10e6\u10e7\5\u01f2\u00fa\2\u10e7\u01ed\3\2\2\2\u10e8\u10ed\b"+
		"\u00f8\1\2\u10e9\u10ea\f\4\2\2\u10ea\u10ec\5\u01f0\u00f9\2\u10eb\u10e9"+
		"\3\2\2\2\u10ec\u10ef\3\2\2\2\u10ed\u10eb\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee"+
		"\u01ef\3\2\2\2\u10ef\u10ed\3\2\2\2\u10f0\u10f1\7\u00b4\2\2\u10f1\u10f2"+
		"\7\u013c\2\2\u10f2\u10fa\5\u0416\u020c\2\u10f3\u10f4\7\u009c\2\2\u10f4"+
		"\u10f5\7\u0136\2\2\u10f5\u10fa\5\u0416\u020c\2\u10f6\u10f7\7\u009c\2\2"+
		"\u10f7\u10f8\7\u017e\2\2\u10f8\u10fa\5\u0416\u020c\2\u10f9\u10f0\3\2\2"+
		"\2\u10f9\u10f3\3\2\2\2\u10f9\u10f6\3\2\2\2\u10fa\u01f1\3\2\2\2\u10fb\u10fc"+
		"\7\u00a5\2\2\u10fc\u10fd\5\u01d2\u00ea\2\u10fd\u10fe\7\u00ff\2\2\u10fe"+
		"\u10ff\5\u01f4\u00fb\2\u10ff\u1100\7\u0169\2\2\u1100\u1101\5\u01da\u00ee"+
		"\2\u1101\u1102\5\u01de\u00f0\2\u1102\u1117\3\2\2\2\u1103\u1104\7\u0134"+
		"\2\2\u1104\u1105\5\u01d2\u00ea\2\u1105\u1106\7\u00ff\2\2\u1106\u1107\5"+
		"\u01f4\u00fb\2\u1107\u1108\7 \2\2\u1108\u1109\5\u01da\u00ee\2\u1109\u110a"+
		"\5b\62\2\u110a\u1117\3\2\2\2\u110b\u110c\7\u0134\2\2\u110c\u110d\7\u00a5"+
		"\2\2\u110d\u110e\7\u0102\2\2\u110e\u110f\7\u009c\2\2\u110f\u1110\5\u01d2"+
		"\u00ea\2\u1110\u1111\7\u00ff\2\2\u1111\u1112\5\u01f4\u00fb\2\u1112\u1113"+
		"\7 \2\2\u1113\u1114\5\u01da\u00ee\2\u1114\u1115\5b\62\2\u1115\u1117\3"+
		"\2\2\2\u1116\u10fb\3\2\2\2\u1116\u1103\3\2\2\2\u1116\u110b\3\2\2\2\u1117"+
		"\u01f3\3\2\2\2\u1118\u1119\t\b\2\2\u1119\u01f5\3\2\2\2\u111a\u111b\7_"+
		"\2\2\u111b\u111c\5\u01f8\u00fd\2\u111c\u111d\7\u00b7\2\2\u111d\u111e\5"+
		"\u01fa\u00fe\2\u111e\u111f\5\u01fc\u00ff\2\u111f\u1120\7\u00ff\2\2\u1120"+
		"\u1121\5\u0414\u020b\2\u1121\u1122\5\u01fe\u0100\2\u1122\u1123\7\r\2\2"+
		"\u1123\u1124\5\u0200\u0101\2\u1124\u1125\7\6\2\2\u1125\u1126\5j\66\2\u1126"+
		"\u1127\5\u00dan\2\u1127\u1128\5\u0360\u01b1\2\u1128\u01f7\3\2\2\2\u1129"+
		"\u112c\7\u0178\2\2\u112a\u112c\3\2\2\2\u112b\u1129\3\2\2\2\u112b\u112a"+
		"\3\2\2\2\u112c\u01f9\3\2\2\2\u112d\u1130\7U\2\2\u112e\u1130\3\2\2\2\u112f"+
		"\u112d\3\2\2\2\u112f\u112e\3\2\2\2\u1130\u01fb\3\2\2\2\u1131\u1134\5\u0420"+
		"\u0211\2\u1132\u1134\3\2\2\2\u1133\u1131\3\2\2\2\u1133\u1132\3\2\2\2\u1134"+
		"\u01fd\3\2\2\2\u1135\u1136\7\u017f\2\2\u1136\u1139\5\u041c\u020f\2\u1137"+
		"\u1139\3\2\2\2\u1138\u1135\3\2\2\2\u1138\u1137\3\2\2\2\u1139\u01ff\3\2"+
		"\2\2\u113a\u113b\b\u0101\1\2\u113b\u113c\5\u0202\u0102\2\u113c\u1142\3"+
		"\2\2\2\u113d\u113e\f\3\2\2\u113e\u113f\7\b\2\2\u113f\u1141\5\u0202\u0102"+
		"\2\u1140\u113d\3\2\2\2\u1141\u1144\3\2\2\2\u1142\u1140\3\2\2\2\u1142\u1143"+
		"\3\2\2\2\u1143\u0201\3\2\2\2\u1144\u1142\3\2\2\2\u1145\u1146\5\u0430\u0219"+
		"\2\u1146\u1147\5\u0204\u0103\2\u1147\u1148\5\u0206\u0104\2\u1148\u1149"+
		"\5\u0208\u0105\2\u1149\u114a\5\u020a\u0106\2\u114a\u115a\3\2\2\2\u114b"+
		"\u114c\5\u03a0\u01d1\2\u114c\u114d\5\u0204\u0103\2\u114d\u114e\5\u0206"+
		"\u0104\2\u114e\u114f\5\u0208\u0105\2\u114f\u1150\5\u020a\u0106\2\u1150"+
		"\u115a\3\2\2\2\u1151\u1152\7\r\2\2\u1152\u1153\5\u039a\u01ce\2\u1153\u1154"+
		"\7\6\2\2\u1154\u1155\5\u0204\u0103\2\u1155\u1156\5\u0206\u0104\2\u1156"+
		"\u1157\5\u0208\u0105\2\u1157\u1158\5\u020a\u0106\2\u1158\u115a\3\2\2\2"+
		"\u1159\u1145\3\2\2\2\u1159\u114b\3\2\2\2\u1159\u1151\3\2\2\2\u115a\u0203"+
		"\3\2\2\2\u115b\u115c\7N\2\2\u115c\u115f\5\u01b0\u00d9\2\u115d\u115f\3"+
		"\2\2\2\u115e\u115b\3\2\2\2\u115e\u115d\3\2\2\2\u115f\u0205\3\2\2\2\u1160"+
		"\u1165\5\u01b0\u00d9\2\u1161\u1162\7\u017f\2\2\u1162\u1165\5\u01b0\u00d9"+
		"\2\u1163\u1165\3\2\2\2\u1164\u1160\3\2\2\2\u1164\u1161\3\2\2\2\u1164\u1163"+
		"\3\2\2\2\u1165\u0207\3\2\2\2\u1166\u116a\7,\2\2\u1167\u116a\7z\2\2\u1168"+
		"\u116a\3\2\2\2\u1169\u1166\3\2\2\2\u1169\u1167\3\2\2\2\u1169\u1168\3\2"+
		"\2\2\u116a\u0209\3\2\2\2\u116b\u116f\7\u01b2\2\2\u116c\u116f\7\u01b3\2"+
		"\2\u116d\u116f\3\2\2\2\u116e\u116b\3\2\2\2\u116e\u116c\3\2\2\2\u116e\u116d"+
		"\3\2\2\2\u116f\u020b\3\2\2\2\u1170\u1172\7_\2\2\u1171\u1173\5\u020e\u0108"+
		"\2\u1172\u1171\3\2\2\2\u1172\u1173\3\2\2\2\u1173\u1174\3\2\2\2\u1174\u1175"+
		"\7\u00a2\2\2\u1175\u1176\5\u0424\u0213\2\u1176\u1177\5\u0214\u010b\2\u1177"+
		"\u1178\7\u0133\2\2\u1178\u1179\5\u021e\u0110\2\u1179\u117a\5\u0224\u0113"+
		"\2\u117a\u117b\5\u022c\u0117\2\u117b\u1196\3\2\2\2\u117c\u117e\7_\2\2"+
		"\u117d\u117f\5\u020e\u0108\2\u117e\u117d\3\2\2\2\u117e\u117f\3\2\2\2\u117f"+
		"\u1180\3\2\2\2\u1180\u1181\7\u00a2\2\2\u1181\u1182\5\u0424\u0213\2\u1182"+
		"\u1183\5\u0214\u010b\2\u1183\u1184\7\u0133\2\2\u1184\u1185\7\u015f\2\2"+
		"\u1185\u1186\7\r\2\2\u1186\u1187\5\u0230\u0119\2\u1187\u1188\7\6\2\2\u1188"+
		"\u1189\5\u0224\u0113\2\u1189\u118a\5\u022c\u0117\2\u118a\u1196\3\2\2\2"+
		"\u118b\u118d\7_\2\2\u118c\u118e\5\u020e\u0108\2\u118d\u118c\3\2\2\2\u118d"+
		"\u118e\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1190\7\u00a2\2\2\u1190\u1191"+
		"\5\u0424\u0213\2\u1191\u1192\5\u0214\u010b\2\u1192\u1193\5\u0224\u0113"+
		"\2\u1193\u1194\5\u022c\u0117\2\u1194\u1196\3\2\2\2\u1195\u1170\3\2\2\2"+
		"\u1195\u117c\3\2\2\2\u1195\u118b\3\2\2\2\u1196\u020d\3\2\2\2\u1197\u1198"+
		"\7\u0104\2\2\u1198\u119b\7\u012d\2\2\u1199\u119b\3\2\2\2\u119a\u1197\3"+
		"\2\2\2\u119a\u1199\3\2\2\2\u119b\u020f\3\2\2\2\u119c\u119d\7\r\2\2\u119d"+
		"\u119e\5\u0212\u010a\2\u119e\u119f\7\6\2\2\u119f\u11a3\3\2\2\2\u11a0\u11a1"+
		"\7\r\2\2\u11a1\u11a3\7\6\2\2\u11a2\u119c\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a3"+
		"\u0211\3\2\2\2\u11a4\u11a5\b\u010a\1\2\u11a5\u11a6\5\u0218\u010d\2\u11a6"+
		"\u11ac\3\2\2\2\u11a7\u11a8\f\3\2\2\u11a8\u11a9\7\b\2\2\u11a9\u11ab\5\u0218"+
		"\u010d\2\u11aa\u11a7\3\2\2\2\u11ab\u11ae\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ac"+
		"\u11ad\3\2\2\2\u11ad\u0213\3\2\2\2\u11ae\u11ac\3\2\2\2\u11af\u11b0\7\r"+
		"\2\2\u11b0\u11b1\5\u0216\u010c\2\u11b1\u11b2\7\6\2\2\u11b2\u11b6\3\2\2"+
		"\2\u11b3\u11b4\7\r\2\2\u11b4\u11b6\7\6\2\2\u11b5\u11af\3\2\2\2\u11b5\u11b3"+
		"\3\2\2\2\u11b6\u0215\3\2\2\2\u11b7\u11b8\b\u010c\1\2\u11b8\u11b9\5\u0222"+
		"\u0112\2\u11b9\u11bf\3\2\2\2\u11ba\u11bb\f\3\2\2\u11bb\u11bc\7\b\2\2\u11bc"+
		"\u11be\5\u0222\u0112\2\u11bd\u11ba\3\2\2\2\u11be\u11c1\3\2\2\2\u11bf\u11bd"+
		"\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u0217\3\2\2\2\u11c1\u11bf\3\2\2\2\u11c2"+
		"\u11c3\5\u021a\u010e\2\u11c3\u11c4\5\u021c\u010f\2\u11c4\u11c5\5\u0220"+
		"\u0111\2\u11c5\u11d2\3\2\2\2\u11c6\u11c7\5\u021c\u010f\2\u11c7\u11c8\5"+
		"\u021a\u010e\2\u11c8\u11c9\5\u0220\u0111\2\u11c9\u11d2\3\2\2\2\u11ca\u11cb"+
		"\5\u021c\u010f\2\u11cb\u11cc\5\u0220\u0111\2\u11cc\u11d2\3\2\2\2\u11cd"+
		"\u11ce\5\u021a\u010e\2\u11ce\u11cf\5\u0220\u0111\2\u11cf\u11d2\3\2\2\2"+
		"\u11d0\u11d2\5\u0220\u0111\2\u11d1\u11c2\3\2\2\2\u11d1\u11c6\3\2\2\2\u11d1"+
		"\u11ca\3\2\2\2\u11d1\u11cd\3\2\2\2\u11d1\u11d0\3\2\2\2\u11d2\u0219\3\2"+
		"\2\2\u11d3\u11da\7\u00b4\2\2\u11d4\u11da\7\u0106\2\2\u11d5\u11da\7\u00be"+
		"\2\2\u11d6\u11d7\7\u00b4\2\2\u11d7\u11da\7\u0106\2\2\u11d8\u11da\7\u0187"+
		"\2\2\u11d9\u11d3\3\2\2\2\u11d9\u11d4\3\2\2\2\u11d9\u11d5\3\2\2\2\u11d9"+
		"\u11d6\3\2\2\2\u11d9\u11d8\3\2\2\2\u11da\u021b\3\2\2\2\u11db\u11dc\5\u0432"+
		"\u021a\2\u11dc\u021d\3\2\2\2\u11dd\u11de\5\u0220\u0111\2\u11de\u021f\3"+
		"\2\2\2\u11df\u11ec\5\u036a\u01b6\2\u11e0\u11e1\5\u0432\u021a\2\u11e1\u11e2"+
		"\5\u01b2\u00da\2\u11e2\u11e3\7\4\2\2\u11e3\u11e4\7\u0172\2\2\u11e4\u11ec"+
		"\3\2\2\2\u11e5\u11e6\7\u0149\2\2\u11e6\u11e7\5\u0432\u021a\2\u11e7\u11e8"+
		"\5\u01b2\u00da\2\u11e8\u11e9\7\4\2\2\u11e9\u11ea\7\u0172\2\2\u11ea\u11ec"+
		"\3\2\2\2\u11eb\u11df\3\2\2\2\u11eb\u11e0\3\2\2\2\u11eb\u11e5\3\2\2\2\u11ec"+
		"\u0221\3\2\2\2\u11ed\u11f7\5\u0218\u010d\2\u11ee\u11ef\5\u0218\u010d\2"+
		"\u11ef\u11f0\7r\2\2\u11f0\u11f1\5\u039a\u01ce\2\u11f1\u11f7\3\2\2\2\u11f2"+
		"\u11f3\5\u0218\u010d\2\u11f3\u11f4\7\20\2\2\u11f4\u11f5\5\u039a\u01ce"+
		"\2\u11f5\u11f7\3\2\2\2\u11f6\u11ed\3\2\2\2\u11f6\u11ee\3\2\2\2\u11f6\u11f2"+
		"\3\2\2\2\u11f7\u0223\3\2\2\2\u11f8\u11f9\b\u0113\1\2\u11f9\u11fa\5\u0228"+
		"\u0115\2\u11fa\u11ff\3\2\2\2\u11fb\u11fc\f\3\2\2\u11fc\u11fe\5\u0228\u0115"+
		"\2\u11fd\u11fb\3\2\2\2\u11fe\u1201\3\2\2\2\u11ff\u11fd\3\2\2\2\u11ff\u1200"+
		"\3\2\2\2\u1200\u0225\3\2\2\2\u1201\u11ff\3\2\2\2\u1202\u1203\7>\2\2\u1203"+
		"\u1204\7\u00ff\2\2\u1204\u1205\7\u00f6\2\2\u1205\u1222\7\u00bf\2\2\u1206"+
		"\u1207\7\u0133\2\2\u1207\u1208\7\u00f6\2\2\u1208\u1209\7\u00ff\2\2\u1209"+
		"\u120a\7\u00f6\2\2\u120a\u1222\7\u00bf\2\2\u120b\u1222\7\u0159\2\2\u120c"+
		"\u1222\7\u00b2\2\2\u120d\u1222\7\u0151\2\2\u120e\u1222\7\u018c\2\2\u120f"+
		"\u1210\7\u0094\2\2\u1210\u1211\7\u0140\2\2\u1211\u1222\7v\2\2\u1212\u1213"+
		"\7\u0094\2\2\u1213\u1214\7\u0140\2\2\u1214\u1222\7\u00c7\2\2\u1215\u1216"+
		"\7\u0140\2\2\u1216\u1222\7v\2\2\u1217\u1218\7\u0140\2\2\u1218\u1222\7"+
		"\u00c7\2\2\u1219\u1222\7\u00d4\2\2\u121a\u121b\7\u00f1\2\2\u121b\u1222"+
		"\7\u00d4\2\2\u121c\u121d\7^\2\2\u121d\u1222\5\u00f2z\2\u121e\u121f\7\u0139"+
		"\2\2\u121f\u1222\5\u00f2z\2\u1220\u1222\5L\'\2\u1221\u1202\3\2\2\2\u1221"+
		"\u1206\3\2\2\2\u1221\u120b\3\2\2\2\u1221\u120c\3\2\2\2\u1221\u120d\3\2"+
		"\2\2\u1221\u120e\3\2\2\2\u1221\u120f\3\2\2\2\u1221\u1212\3\2\2\2\u1221"+
		"\u1215\3\2\2\2\u1221\u1217\3\2\2\2\u1221\u1219\3\2\2\2\u1221\u121a\3\2"+
		"\2\2\u1221\u121c\3\2\2\2\u1221\u121e\3\2\2\2\u1221\u1220\3\2\2\2\u1222"+
		"\u0227\3\2\2\2\u1223\u1224\7+\2\2\u1224\u122a\5\u022a\u0116\2\u1225\u1226"+
		"\7\u00ce\2\2\u1226\u122a\5F$\2\u1227\u122a\7\u0190\2\2\u1228\u122a\5\u0226"+
		"\u0114\2\u1229\u1223\3\2\2\2\u1229\u1225\3\2\2\2\u1229\u1227\3\2\2\2\u1229"+
		"\u1228\3\2\2\2\u122a\u0229\3\2\2\2\u122b\u1231\5\u042a\u0216\2\u122c\u122d"+
		"\5\u042a\u0216\2\u122d\u122e\7\b\2\2\u122e\u122f\5\u042a\u0216\2\u122f"+
		"\u1231\3\2\2\2\u1230\u122b\3\2\2\2\u1230\u122c\3\2\2\2\u1231\u022b\3\2"+
		"\2\2\u1232\u1233\7\u0191\2\2\u1233\u1236\5\u0176\u00bc\2\u1234\u1236\3"+
		"\2\2\2\u1235\u1232\3\2\2\2\u1235\u1234\3\2\2\2\u1236\u022d\3\2\2\2\u1237"+
		"\u1238\5\u021c\u010f\2\u1238\u1239\5\u0220\u0111\2\u1239\u022f\3\2\2\2"+
		"\u123a\u123b\b\u0119\1\2\u123b\u123c\5\u022e\u0118\2\u123c\u1242\3\2\2"+
		"\2\u123d\u123e\f\3\2\2\u123e\u123f\7\b\2\2\u123f\u1241\5\u022e\u0118\2"+
		"\u1240\u123d\3\2\2\2\u1241\u1244\3\2\2\2\u1242\u1240\3\2\2\2\u1242\u1243"+
		"\3\2\2\2\u1243\u0231\3\2\2\2\u1244\u1242\3\2\2\2\u1245\u1246\7$\2\2\u1246"+
		"\u1247\7\u00a2\2\2\u1247\u1248\5\u01e2\u00f2\2\u1248\u1249\5\u0234\u011b"+
		"\2\u1249\u124a\5\u0236\u011c\2\u124a\u0233\3\2\2\2\u124b\u124c\b\u011b"+
		"\1\2\u124c\u124d\5\u0226\u0114\2\u124d\u1252\3\2\2\2\u124e\u124f\f\3\2"+
		"\2\u124f\u1251\5\u0226\u0114\2\u1250\u124e\3\2\2\2\u1251\u1254\3\2\2\2"+
		"\u1252\u1250\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u0235\3\2\2\2\u1254\u1252"+
		"\3\2\2\2\u1255\u1258\7\u0131\2\2\u1256\u1258\3\2\2\2\u1257\u1255\3\2\2"+
		"\2\u1257\u1256\3\2\2\2\u1258\u0237\3\2\2\2\u1259\u125a\7\u0083\2\2\u125a"+
		"\u125b\7\u00a2\2\2\u125b\u125c\5\u0424\u0213\2\u125c\u125d\5\u0210\u0109"+
		"\2\u125d\u125e\5b\62\2\u125e\u1268\3\2\2\2\u125f\u1260\7\u0083\2\2\u1260"+
		"\u1261\7\u00a2\2\2\u1261\u1262\7\u00af\2\2\u1262\u1263\7\u0091\2\2\u1263"+
		"\u1264\5\u0424\u0213\2\u1264\u1265\5\u0210\u0109\2\u1265\u1266\5b\62\2"+
		"\u1266\u1268\3\2\2\2\u1267\u1259\3\2\2\2\u1267\u125f\3\2\2\2\u1268\u0239"+
		"\3\2\2\2\u1269\u126a\7\u0083\2\2\u126a\u126b\7!\2\2\u126b\u126c\5\u0424"+
		"\u0213\2\u126c\u126d\5\u017e\u00c0\2\u126d\u126e\5b\62\2\u126e\u1278\3"+
		"\2\2\2\u126f\u1270\7\u0083\2\2\u1270\u1271\7!\2\2\u1271\u1272\7\u00af"+
		"\2\2\u1272\u1273\7\u0091\2\2\u1273\u1274\5\u0424\u0213\2\u1274\u1275\5"+
		"\u017e\u00c0\2\u1275\u1276\5b\62\2\u1276\u1278\3\2\2\2\u1277\u1269\3\2"+
		"\2\2\u1277\u126f\3\2\2\2\u1278\u023b\3\2\2\2\u1279\u127a\7\u0083\2\2\u127a"+
		"\u127b\7\u0101\2\2\u127b\u127c\5\u0240\u0121\2\u127c\u127d\5\u023e\u0120"+
		"\2\u127d\u127e\5b\62\2\u127e\u1288\3\2\2\2\u127f\u1280\7\u0083\2\2\u1280"+
		"\u1281\7\u0101\2\2\u1281\u1282\7\u00af\2\2\u1282\u1283\7\u0091\2\2\u1283"+
		"\u1284\5\u0240\u0121\2\u1284\u1285\5\u023e\u0120\2\u1285\u1286\5b\62\2"+
		"\u1286\u1288\3\2\2\2\u1287\u1279\3\2\2\2\u1287\u127f\3\2\2\2\u1288\u023d"+
		"\3\2\2\2\u1289\u128a\7\r\2\2\u128a\u128b\5\u036a\u01b6\2\u128b\u128c\7"+
		"\6\2\2\u128c\u12a0\3\2\2\2\u128d\u128e\7\r\2\2\u128e\u128f\5\u036a\u01b6"+
		"\2\u128f\u1290\7\b\2\2\u1290\u1291\5\u036a\u01b6\2\u1291\u1292\7\6\2\2"+
		"\u1292\u12a0\3\2\2\2\u1293\u1294\7\r\2\2\u1294\u1295\7\u00f0\2\2\u1295"+
		"\u1296\7\b\2\2\u1296\u1297\5\u036a\u01b6\2\u1297\u1298\7\6\2\2\u1298\u12a0"+
		"\3\2\2\2\u1299\u129a\7\r\2\2\u129a\u129b\5\u036a\u01b6\2\u129b\u129c\7"+
		"\b\2\2\u129c\u129d\7\u00f0\2\2\u129d\u129e\7\6\2\2\u129e\u12a0\3\2\2\2"+
		"\u129f\u1289\3\2\2\2\u129f\u128d\3\2\2\2\u129f\u1293\3\2\2\2\u129f\u1299"+
		"\3\2\2\2\u12a0\u023f\3\2\2\2\u12a1\u12a7\5\u03ca\u01e6\2\u12a2\u12a3\5"+
		"\u0430\u0219\2\u12a3\u12a4\7\7\2\2\u12a4\u12a5\5\u0240\u0121\2\u12a5\u12a7"+
		"\3\2\2\2\u12a6\u12a1\3\2\2\2\u12a6\u12a2\3\2\2\2\u12a7\u0241\3\2\2\2\u12a8"+
		"\u12a9\7\177\2\2\u12a9\u12aa\5\u0244\u0123\2\u12aa\u0243\3\2\2\2\u12ab"+
		"\u12ac\b\u0123\1\2\u12ac\u12ad\5\u0246\u0124\2\u12ad\u12b2\3\2\2\2\u12ae"+
		"\u12af\f\3\2\2\u12af\u12b1\5\u0246\u0124\2\u12b0\u12ae\3\2\2\2\u12b1\u12b4"+
		"\3\2\2\2\u12b2\u12b0\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u0245\3\2\2\2\u12b4"+
		"\u12b2\3\2\2\2\u12b5\u12b9\5\u042a\u0216\2\u12b6\u12b7\7\u00ce\2\2\u12b7"+
		"\u12b9\5F$\2\u12b8\u12b5\3\2\2\2\u12b8\u12b6\3\2\2\2\u12b9\u0247\3\2\2"+
		"\2\u12ba\u12bb\7_\2\2\u12bb\u12bc\7B\2\2\u12bc\u12bd\7\r\2\2\u12bd\u12be"+
		"\5\u036a\u01b6\2\u12be\u12bf\7+\2\2\u12bf\u12c0\5\u036a\u01b6\2\u12c0"+
		"\u12c1\7\6\2\2\u12c1\u12c2\7\u0191\2\2\u12c2\u12c3\7\u00a2\2\2\u12c3\u12c4"+
		"\5\u01e2\u00f2\2\u12c4\u12c5\5\u024a\u0126\2\u12c5\u12dd\3\2\2\2\u12c6"+
		"\u12c7\7_\2\2\u12c7\u12c8\7B\2\2\u12c8\u12c9\7\r\2\2\u12c9\u12ca\5\u036a"+
		"\u01b6\2\u12ca\u12cb\7+\2\2\u12cb\u12cc\5\u036a\u01b6\2\u12cc\u12cd\7"+
		"\6\2\2\u12cd\u12ce\7\u0192\2\2\u12ce\u12cf\7\u00a2\2\2\u12cf\u12d0\5\u024a"+
		"\u0126\2\u12d0\u12dd\3\2\2\2\u12d1\u12d2\7_\2\2\u12d2\u12d3\7B\2\2\u12d3"+
		"\u12d4\7\r\2\2\u12d4\u12d5\5\u036a\u01b6\2\u12d5\u12d6\7+\2\2\u12d6\u12d7"+
		"\5\u036a\u01b6\2\u12d7\u12d8\7\6\2\2\u12d8\u12d9\7\u0191\2\2\u12d9\u12da"+
		"\7\u00be\2\2\u12da\u12db\5\u024a\u0126\2\u12db\u12dd\3\2\2\2\u12dc\u12ba"+
		"\3\2\2\2\u12dc\u12c6\3\2\2\2\u12dc\u12d1\3\2\2\2\u12dd\u0249\3\2\2\2\u12de"+
		"\u12df\7+\2\2\u12df\u12e4\7\u00b3\2\2\u12e0\u12e1\7+\2\2\u12e1\u12e4\7"+
		".\2\2\u12e2\u12e4\3\2\2\2\u12e3\u12de\3\2\2\2\u12e3\u12e0\3\2\2\2\u12e3"+
		"\u12e2\3\2\2\2\u12e4\u024b\3\2\2\2\u12e5\u12e6\7\u0083\2\2\u12e6\u12e7"+
		"\7B\2\2\u12e7\u12e8\5\u024e\u0128\2\u12e8\u12e9\7\r\2\2\u12e9\u12ea\5"+
		"\u036a\u01b6\2\u12ea\u12eb\7+\2\2\u12eb\u12ec\5\u036a\u01b6\2\u12ec\u12ed"+
		"\7\6\2\2\u12ed\u12ee\5b\62\2\u12ee\u024d\3\2\2\2\u12ef\u12f0\7\u00af\2"+
		"\2\u12f0\u12f3\7\u0091\2\2\u12f1\u12f3\3\2\2\2\u12f2\u12ef\3\2\2\2\u12f2"+
		"\u12f1\3\2\2\2\u12f3\u024f\3\2\2\2\u12f4\u12f5\7\u0128\2\2\u12f5\u12f6"+
		"\5\u0252\u012a\2\u12f6\u12f7\5\u0414\u020b\2\u12f7\u12f8\5\u0254\u012b"+
		"\2\u12f8\u1304\3\2\2\2\u12f9\u12fa\7\u0128\2\2\u12fa\u12fb\7\u015e\2\2"+
		"\u12fb\u12fc\5\u0418\u020d\2\u12fc\u12fd\5\u0254\u012b\2\u12fd\u1304\3"+
		"\2\2\2\u12fe\u12ff\7\u0128\2\2\u12ff\u1300\7m\2\2\u1300\u1301\5\u0418"+
		"\u020d\2\u1301\u1302\5\u0254\u012b\2\u1302\u1304\3\2\2\2\u1303\u12f4\3"+
		"\2\2\2\u1303\u12f9\3\2\2\2\u1303\u12fe\3\2\2\2\u1304\u0251\3\2\2\2\u1305"+
		"\u1306\t\t\2\2\u1306\u0253\3\2\2\2\u1307\u130a\7\u009d\2\2\u1308\u130a"+
		"\3\2\2\2\u1309\u1307\3\2\2\2\u1309\u1308\3\2\2\2\u130a\u0255\3\2\2\2\u130b"+
		"\u130c\7$\2\2\u130c\u130d\7!\2\2\u130d\u130e\5\u0424\u0213\2\u130e\u130f"+
		"\5\u017e\u00c0\2\u130f\u1310\7\u012b\2\2\u1310\u1311\7\u0169\2\2\u1311"+
		"\u1312\5\u0418\u020d\2\u1312\u145e\3\2\2\2\u1313\u1314\7$\2\2\u1314\u1315"+
		"\7O\2\2\u1315\u1316\5\u01b0\u00d9\2\u1316\u1317\7\u012b\2\2\u1317\u1318"+
		"\7\u0169\2\2\u1318\u1319\5\u0418\u020d\2\u1319\u145e\3\2\2\2\u131a\u131b"+
		"\7$\2\2\u131b\u131c\7\\\2\2\u131c\u131d\5\u01b0\u00d9\2\u131d\u131e\7"+
		"\u012b\2\2\u131e\u131f\7\u0169\2\2\u131f\u1320\5\u0418\u020d\2\u1320\u145e"+
		"\3\2\2\2\u1321\u1322\7$\2\2\u1322\u1323\7m\2\2\u1323\u1324\5\u041a\u020e"+
		"\2\u1324\u1325\7\u012b\2\2\u1325\u1326\7\u0169\2\2\u1326\u1327\5\u041a"+
		"\u020e\2\u1327\u145e\3\2\2\2\u1328\u1329\7$\2\2\u1329\u132a\7\u0081\2"+
		"\2\u132a\u132b\5\u01b0\u00d9\2\u132b\u132c\7\u012b\2\2\u132c\u132d\7\u0169"+
		"\2\2\u132d\u132e\5\u0418\u020d\2\u132e\u145e\3\2\2\2\u132f\u1330\7$\2"+
		"\2\u1330\u1331\7\u0081\2\2\u1331\u1332\5\u01b0\u00d9\2\u1332\u1333\7\u012b"+
		"\2\2\u1333\u1334\7X\2\2\u1334\u1335\5\u0418\u020d\2\u1335\u1336\7\u0169"+
		"\2\2\u1336\u1337\5\u0418\u020d\2\u1337\u145e\3\2\2\2\u1338\u1339\7$\2"+
		"\2\u1339\u133a\7\u009e\2\2\u133a\u133b\7l\2\2\u133b\u133c\7\u0194\2\2"+
		"\u133c\u133d\5\u0418\u020d\2\u133d\u133e\7\u012b\2\2\u133e\u133f\7\u0169"+
		"\2\2\u133f\u1340\5\u0418\u020d\2\u1340\u145e\3\2\2\2\u1341\u1342\7$\2"+
		"\2\u1342\u1343\7\u00a2\2\2\u1343\u1344\5\u01e2\u00f2\2\u1344\u1345\7\u012b"+
		"\2\2\u1345\u1346\7\u0169\2\2\u1346\u1347\5\u0418\u020d\2\u1347\u145e\3"+
		"\2\2\2\u1348\u1349\7$\2\2\u1349\u134a\7\u00a8\2\2\u134a\u134b\5\u042c"+
		"\u0217\2\u134b\u134c\7\u012b\2\2\u134c\u134d\7\u0169\2\2\u134d\u134e\5"+
		"\u042c\u0217\2\u134e\u145e\3\2\2\2\u134f\u1350\7$\2\2\u1350\u1351\5\u0104"+
		"\u0083\2\u1351\u1352\7\u00ce\2\2\u1352\u1353\5\u0418\u020d\2\u1353\u1354"+
		"\7\u012b\2\2\u1354\u1355\7\u0169\2\2\u1355\u1356\5\u0418\u020d\2\u1356"+
		"\u145e\3\2\2\2\u1357\u1358\7$\2\2\u1358\u1359\7\u0101\2\2\u1359\u135a"+
		"\7J\2\2\u135a\u135b\5\u01b0\u00d9\2\u135b\u135c\7\u017f\2\2\u135c\u135d"+
		"\5\u041c\u020f\2\u135d\u135e\7\u012b\2\2\u135e\u135f\7\u0169\2\2\u135f"+
		"\u1360\5\u0418\u020d\2\u1360\u145e\3\2\2\2\u1361\u1362\7$\2\2\u1362\u1363"+
		"\7\u0101\2\2\u1363\u1364\7\u0097\2\2\u1364\u1365\5\u01b0\u00d9\2\u1365"+
		"\u1366\7\u017f\2\2\u1366\u1367\5\u041c\u020f\2\u1367\u1368\7\u012b\2\2"+
		"\u1368\u1369\7\u0169\2\2\u1369\u136a\5\u0418\u020d\2\u136a\u145e\3\2\2"+
		"\2\u136b\u136c\7$\2\2\u136c\u136d\7\u013c\2\2\u136d\u136e\5\u0418\u020d"+
		"\2\u136e\u136f\7\u012b\2\2\u136f\u1370\7\u0169\2\2\u1370\u1371\5\u0418"+
		"\u020d\2\u1371\u145e\3\2\2\2\u1372\u1373\7$\2\2\u1373\u1374\7\u0145\2"+
		"\2\u1374\u1375\5\u0418\u020d\2\u1375\u1376\7\u012b\2\2\u1376\u1377\7\u0169"+
		"\2\2\u1377\u1378\5\u0418\u020d\2\u1378\u145e\3\2\2\2\u1379\u137a\7$\2"+
		"\2\u137a\u137b\7\u015f\2\2\u137b\u137c\5\u0358\u01ad\2\u137c\u137d\7\u012b"+
		"\2\2\u137d\u137e\7\u0169\2\2\u137e\u137f\5\u0418\u020d\2\u137f\u145e\3"+
		"\2\2\2\u1380\u1381\7$\2\2\u1381\u1382\7\u015f\2\2\u1382\u1383\7\u00af"+
		"\2\2\u1383\u1384\7\u0091\2\2\u1384\u1385\5\u0358\u01ad\2\u1385\u1386\7"+
		"\u012b\2\2\u1386\u1387\7\u0169\2\2\u1387\u1388\5\u0418\u020d\2\u1388\u145e"+
		"\3\2\2\2\u1389\u138a\7$\2\2\u138a\u138b\7\u0142\2\2\u138b\u138c\5\u0414"+
		"\u020b\2\u138c\u138d\7\u012b\2\2\u138d\u138e\7\u0169\2\2\u138e\u138f\5"+
		"\u0418\u020d\2\u138f\u145e\3\2\2\2\u1390\u1391\7$\2\2\u1391\u1392\7\u0142"+
		"\2\2\u1392\u1393\7\u00af\2\2\u1393\u1394\7\u0091\2\2\u1394\u1395\5\u0414"+
		"\u020b\2\u1395\u1396\7\u012b\2\2\u1396\u1397\7\u0169\2\2\u1397\u1398\5"+
		"\u0418\u020d\2\u1398\u145e\3\2\2\2\u1399\u139a\7$\2\2\u139a\u139b\7\u018b"+
		"\2\2\u139b\u139c\5\u0414\u020b\2\u139c\u139d\7\u012b\2\2\u139d\u139e\7"+
		"\u0169\2\2\u139e\u139f\5\u0418\u020d\2\u139f\u145e\3\2\2\2\u13a0\u13a1"+
		"\7$\2\2\u13a1\u13a2\7\u018b\2\2\u13a2\u13a3\7\u00af\2\2\u13a3\u13a4\7"+
		"\u0091\2\2\u13a4\u13a5\5\u0414\u020b\2\u13a5\u13a6\7\u012b\2\2\u13a6\u13a7"+
		"\7\u0169\2\2\u13a7\u13a8\5\u0418\u020d\2\u13a8\u145e\3\2\2\2\u13a9\u13aa"+
		"\7$\2\2\u13aa\u13ab\7\u00b7\2\2\u13ab\u13ac\5\u0414\u020b\2\u13ac\u13ad"+
		"\7\u012b\2\2\u13ad\u13ae\7\u0169\2\2\u13ae\u13af\5\u0418\u020d\2\u13af"+
		"\u145e\3\2\2\2\u13b0\u13b1\7$\2\2\u13b1\u13b2\7\u00b7\2\2\u13b2\u13b3"+
		"\7\u00af\2\2\u13b3\u13b4\7\u0091\2\2\u13b4\u13b5\5\u0414\u020b\2\u13b5"+
		"\u13b6\7\u012b\2\2\u13b6\u13b7\7\u0169\2\2\u13b7\u13b8\5\u0418\u020d\2"+
		"\u13b8\u145e\3\2\2\2\u13b9\u13ba\7$\2\2\u13ba\u13bb\7\u009e\2\2\u13bb"+
		"\u13bc\7\u015f\2\2\u13bc\u13bd\5\u0358\u01ad\2\u13bd\u13be\7\u012b\2\2"+
		"\u13be\u13bf\7\u0169\2\2\u13bf\u13c0\5\u0418\u020d\2\u13c0\u145e\3\2\2"+
		"\2\u13c1\u13c2\7$\2\2\u13c2\u13c3\7\u009e\2\2\u13c3\u13c4\7\u015f\2\2"+
		"\u13c4\u13c5\7\u00af\2\2\u13c5\u13c6\7\u0091\2\2\u13c6\u13c7\5\u0358\u01ad"+
		"\2\u13c7\u13c8\7\u012b\2\2\u13c8\u13c9\7\u0169\2\2\u13c9\u13ca\5\u0418"+
		"\u020d\2\u13ca\u145e\3\2\2\2\u13cb\u13cc\7$\2\2\u13cc\u13cd\7\u015f\2"+
		"\2\u13cd\u13ce\5\u0358\u01ad\2\u13ce\u13cf\7\u012b\2\2\u13cf\u13d0\5\u0258"+
		"\u012d\2\u13d0\u13d1\5\u0418\u020d\2\u13d1\u13d2\7\u0169\2\2\u13d2\u13d3"+
		"\5\u0418\u020d\2\u13d3\u145e\3\2\2\2\u13d4\u13d5\7$\2\2\u13d5\u13d6\7"+
		"\u015f\2\2\u13d6\u13d7\7\u00af\2\2\u13d7\u13d8\7\u0091\2\2\u13d8\u13d9"+
		"\5\u0358\u01ad\2\u13d9\u13da\7\u012b\2\2\u13da\u13db\5\u0258\u012d\2\u13db"+
		"\u13dc\5\u0418\u020d\2\u13dc\u13dd\7\u0169\2\2\u13dd\u13de\5\u0418\u020d"+
		"\2\u13de\u145e\3\2\2\2\u13df\u13e0\7$\2\2\u13e0\u13e1\7\u015f\2\2\u13e1"+
		"\u13e2\5\u0358\u01ad\2\u13e2\u13e3\7\u012b\2\2\u13e3\u13e4\7X\2\2\u13e4"+
		"\u13e5\5\u0418\u020d\2\u13e5\u13e6\7\u0169\2\2\u13e6\u13e7\5\u0418\u020d"+
		"\2\u13e7\u145e\3\2\2\2\u13e8\u13e9\7$\2\2\u13e9\u13ea\7\u009e\2\2\u13ea"+
		"\u13eb\7\u015f\2\2\u13eb\u13ec\5\u0358\u01ad\2\u13ec\u13ed\7\u012b\2\2"+
		"\u13ed\u13ee\5\u0258\u012d\2\u13ee\u13ef\5\u0418\u020d\2\u13ef\u13f0\7"+
		"\u0169\2\2\u13f0\u13f1\5\u0418\u020d\2\u13f1\u145e\3\2\2\2\u13f2\u13f3"+
		"\7$\2\2\u13f3\u13f4\7\u009e\2\2\u13f4\u13f5\7\u015f\2\2\u13f5\u13f6\7"+
		"\u00af\2\2\u13f6\u13f7\7\u0091\2\2\u13f7\u13f8\5\u0358\u01ad\2\u13f8\u13f9"+
		"\7\u012b\2\2\u13f9\u13fa\5\u0258\u012d\2\u13fa\u13fb\5\u0418\u020d\2\u13fb"+
		"\u13fc\7\u0169\2\2\u13fc\u13fd\5\u0418\u020d\2\u13fd\u145e\3\2\2\2\u13fe"+
		"\u13ff\7$\2\2\u13ff\u1400\7\u016d\2\2\u1400\u1401\5\u0418\u020d\2\u1401"+
		"\u1402\7\u00ff\2\2\u1402\u1403\5\u0414\u020b\2\u1403\u1404\7\u012b\2\2"+
		"\u1404\u1405\7\u0169\2\2\u1405\u1406\5\u0418\u020d\2\u1406\u145e\3\2\2"+
		"\2\u1407\u1408\7$\2\2\u1408\u1409\7\u0136\2\2\u1409\u140a\5\u042c\u0217"+
		"\2\u140a\u140b\7\u012b\2\2\u140b\u140c\7\u0169\2\2\u140c\u140d\5\u042c"+
		"\u0217\2\u140d\u145e\3\2\2\2\u140e\u140f\7$\2\2\u140f\u1410\7\u017e\2"+
		"\2\u1410\u1411\5\u042c\u0217\2\u1411\u1412\7\u012b\2\2\u1412\u1413\7\u0169"+
		"\2\2\u1413\u1414\5\u042c\u0217\2\u1414\u145e\3\2\2\2\u1415\u1416\7$\2"+
		"\2\u1416\u1417\7\u0161\2\2\u1417\u1418\5\u0418\u020d\2\u1418\u1419\7\u012b"+
		"\2\2\u1419\u141a\7\u0169\2\2\u141a\u141b\5\u0418\u020d\2\u141b\u145e\3"+
		"\2\2\2\u141c\u141d\7$\2\2\u141d\u141e\7\u0161\2\2\u141e\u141f\5\u0418"+
		"\u020d\2\u141f\u1420\7\u0148\2\2\u1420\u1421\5h\65\2\u1421\u145e\3\2\2"+
		"\2\u1422\u1423\7$\2\2\u1423\u1424\7\u0161\2\2\u1424\u1425\5\u0418\u020d"+
		"\2\u1425\u1426\7\u012f\2\2\u1426\u1427\5h\65\2\u1427\u145e\3\2\2\2\u1428"+
		"\u1429\7$\2\2\u1429\u142a\7\u0165\2\2\u142a\u142b\7\u013e\2\2\u142b\u142c"+
		"\7\u010d\2\2\u142c\u142d\5\u01b0\u00d9\2\u142d\u142e\7\u012b\2\2\u142e"+
		"\u142f\7\u0169\2\2\u142f\u1430\5\u0418\u020d\2\u1430\u145e\3\2\2\2\u1431"+
		"\u1432\7$\2\2\u1432\u1433\7\u0165\2\2\u1433\u1434\7\u013e\2\2\u1434\u1435"+
		"\7{\2\2\u1435\u1436\5\u01b0\u00d9\2\u1436\u1437\7\u012b\2\2\u1437\u1438"+
		"\7\u0169\2\2\u1438\u1439\5\u0418\u020d\2\u1439\u145e\3\2\2\2\u143a\u143b"+
		"\7$\2\2\u143b\u143c\7\u0165\2\2\u143c\u143d\7\u013e\2\2\u143d\u143e\7"+
		"\u0163\2\2\u143e\u143f\5\u01b0\u00d9\2\u143f\u1440\7\u012b\2\2\u1440\u1441"+
		"\7\u0169\2\2\u1441\u1442\5\u0418\u020d\2\u1442\u145e\3\2\2\2\u1443\u1444"+
		"\7$\2\2\u1444\u1445\7\u0165\2\2\u1445\u1446\7\u013e\2\2\u1446\u1447\7"+
		"V\2\2\u1447\u1448\5\u01b0\u00d9\2\u1448\u1449\7\u012b\2\2\u1449\u144a"+
		"\7\u0169\2\2\u144a\u144b\5\u0418\u020d\2\u144b\u145e\3\2\2\2\u144c\u144d"+
		"\7$\2\2\u144d\u144e\7\u0172\2\2\u144e\u144f\5\u01b0\u00d9\2\u144f\u1450"+
		"\7\u012b\2\2\u1450\u1451\7\u0169\2\2\u1451\u1452\5\u0418\u020d\2\u1452"+
		"\u145e\3\2\2\2\u1453\u1454\7$\2\2\u1454\u1455\7\u0172\2\2\u1455\u1456"+
		"\5\u01b0\u00d9\2\u1456\u1457\7\u012b\2\2\u1457\u1458\7\61\2\2\u1458\u1459"+
		"\5\u0418\u020d\2\u1459\u145a\7\u0169\2\2\u145a\u145b\5\u0418\u020d\2\u145b"+
		"\u145c\5b\62\2\u145c\u145e\3\2\2\2\u145d\u130b\3\2\2\2\u145d\u1313\3\2"+
		"\2\2\u145d\u131a\3\2\2\2\u145d\u1321\3\2\2\2\u145d\u1328\3\2\2\2\u145d"+
		"\u132f\3\2\2\2\u145d\u1338\3\2\2\2\u145d\u1341\3\2\2\2\u145d\u1348\3\2"+
		"\2\2\u145d\u134f\3\2\2\2\u145d\u1357\3\2\2\2\u145d\u1361\3\2\2\2\u145d"+
		"\u136b\3\2\2\2\u145d\u1372\3\2\2\2\u145d\u1379\3\2\2\2\u145d\u1380\3\2"+
		"\2\2\u145d\u1389\3\2\2\2\u145d\u1390\3\2\2\2\u145d\u1399\3\2\2\2\u145d"+
		"\u13a0\3\2\2\2\u145d\u13a9\3\2\2\2\u145d\u13b0\3\2\2\2\u145d\u13b9\3\2"+
		"\2\2\u145d\u13c1\3\2\2\2\u145d\u13cb\3\2\2\2\u145d\u13d4\3\2\2\2\u145d"+
		"\u13df\3\2\2\2\u145d\u13e8\3\2\2\2\u145d\u13f2\3\2\2\2\u145d\u13fe\3\2"+
		"\2\2\u145d\u1407\3\2\2\2\u145d\u140e\3\2\2\2\u145d\u1415\3\2\2\2\u145d"+
		"\u141c\3\2\2\2\u145d\u1422\3\2\2\2\u145d\u1428\3\2\2\2\u145d\u1431\3\2"+
		"\2\2\u145d\u143a\3\2\2\2\u145d\u1443\3\2\2\2\u145d\u144c\3\2\2\2\u145d"+
		"\u1453\3\2\2\2\u145e\u0257\3\2\2\2\u145f\u1462\7P\2\2\u1460\u1462\3\2"+
		"\2\2\u1461\u145f\3\2\2\2\u1461\u1460\3\2\2\2\u1462\u0259\3\2\2\2\u1463"+
		"\u1464\7\u0148\2\2\u1464\u1467\7l\2\2\u1465\u1467\3\2\2\2\u1466\u1463"+
		"\3\2\2\2\u1466\u1465\3\2\2\2\u1467\u025b\3\2\2\2\u1468\u1469\7$\2\2\u1469"+
		"\u146a\7!\2\2\u146a\u146b\5\u0424\u0213\2\u146b\u146c\5\u017e\u00c0\2"+
		"\u146c\u146d\7\u0148\2\2\u146d\u146e\7\u013c\2\2\u146e\u146f\5\u0418\u020d"+
		"\2\u146f\u151d\3\2\2\2\u1470\u1471\7$\2\2\u1471\u1472\7O\2\2\u1472\u1473"+
		"\5\u01b0\u00d9\2\u1473\u1474\7\u0148\2\2\u1474\u1475\7\u013c\2\2\u1475"+
		"\u1476\5\u0418\u020d\2\u1476\u151d\3\2\2\2\u1477\u1478\7$\2\2\u1478\u1479"+
		"\7\\\2\2\u1479\u147a\5\u01b0\u00d9\2\u147a\u147b\7\u0148\2\2\u147b\u147c"+
		"\7\u013c\2\2\u147c\u147d\5\u0418\u020d\2\u147d\u151d\3\2\2\2\u147e\u147f"+
		"\7$\2\2\u147f\u1480\7\u0081\2\2\u1480\u1481\5\u01b0\u00d9\2\u1481\u1482"+
		"\7\u0148\2\2\u1482\u1483\7\u013c\2\2\u1483\u1484\5\u0418\u020d\2\u1484"+
		"\u151d\3\2\2\2\u1485\u1486\7$\2\2\u1486\u1487\7\u0093\2\2\u1487\u1488"+
		"\5\u01b0\u00d9\2\u1488\u1489\7\u0148\2\2\u1489\u148a\7\u013c\2\2\u148a"+
		"\u148b\5\u0418\u020d\2\u148b\u151d\3\2\2\2\u148c\u148d\7$\2\2\u148d\u148e"+
		"\7\u00a2\2\2\u148e\u148f\5\u01e2\u00f2\2\u148f\u1490\7\u0148\2\2\u1490"+
		"\u1491\7\u013c\2\2\u1491\u1492\5\u0418\u020d\2\u1492\u151d\3\2\2\2\u1493"+
		"\u1494\7$\2\2\u1494\u1495\7\u0101\2\2\u1495\u1496\5\u0240\u0121\2\u1496"+
		"\u1497\5\u023e\u0120\2\u1497\u1498\7\u0148\2\2\u1498\u1499\7\u013c\2\2"+
		"\u1499\u149a\5\u0418\u020d\2\u149a\u151d\3\2\2\2\u149b\u149c\7$\2\2\u149c"+
		"\u149d\7\u0101\2\2\u149d\u149e\7J\2\2\u149e\u149f\5\u01b0\u00d9\2\u149f"+
		"\u14a0\7\u017f\2\2\u14a0\u14a1\5\u041c\u020f\2\u14a1\u14a2\7\u0148\2\2"+
		"\u14a2\u14a3\7\u013c\2\2\u14a3\u14a4\5\u0418\u020d\2\u14a4\u151d\3\2\2"+
		"\2\u14a5\u14a6\7$\2\2\u14a6\u14a7\7\u0101\2\2\u14a7\u14a8\7\u0097\2\2"+
		"\u14a8\u14a9\5\u01b0\u00d9\2\u14a9\u14aa\7\u017f\2\2\u14aa\u14ab\5\u041c"+
		"\u020f\2\u14ab\u14ac\7\u0148\2\2\u14ac\u14ad\7\u013c\2\2\u14ad\u14ae\5"+
		"\u0418\u020d\2\u14ae\u151d\3\2\2\2\u14af\u14b0\7$\2\2\u14b0\u14b1\7\u015f"+
		"\2\2\u14b1\u14b2\5\u0358\u01ad\2\u14b2\u14b3\7\u0148\2\2\u14b3\u14b4\7"+
		"\u013c\2\2\u14b4\u14b5\5\u0418\u020d\2\u14b5\u151d\3\2\2\2\u14b6\u14b7"+
		"\7$\2\2\u14b7\u14b8\7\u015f\2\2\u14b8\u14b9\7\u00af\2\2\u14b9\u14ba\7"+
		"\u0091\2\2\u14ba\u14bb\5\u0358\u01ad\2\u14bb\u14bc\7\u0148\2\2\u14bc\u14bd"+
		"\7\u013c\2\2\u14bd\u14be\5\u0418\u020d\2\u14be\u151d\3\2\2\2\u14bf\u14c0"+
		"\7$\2\2\u14c0\u14c1\7\u0165\2\2\u14c1\u14c2\7\u013e\2\2\u14c2\u14c3\7"+
		"\u010d\2\2\u14c3\u14c4\5\u01b0\u00d9\2\u14c4\u14c5\7\u0148\2\2\u14c5\u14c6"+
		"\7\u013c\2\2\u14c6\u14c7\5\u0418\u020d\2\u14c7\u151d\3\2\2\2\u14c8\u14c9"+
		"\7$\2\2\u14c9\u14ca\7\u0165\2\2\u14ca\u14cb\7\u013e\2\2\u14cb\u14cc\7"+
		"{\2\2\u14cc\u14cd\5\u01b0\u00d9\2\u14cd\u14ce\7\u0148\2\2\u14ce\u14cf"+
		"\7\u013c\2\2\u14cf\u14d0\5\u0418\u020d\2\u14d0\u151d\3\2\2\2\u14d1\u14d2"+
		"\7$\2\2\u14d2\u14d3\7\u0165\2\2\u14d3\u14d4\7\u013e\2\2\u14d4\u14d5\7"+
		"\u0163\2\2\u14d5\u14d6\5\u01b0\u00d9\2\u14d6\u14d7\7\u0148\2\2\u14d7\u14d8"+
		"\7\u013c\2\2\u14d8\u14d9\5\u0418\u020d\2\u14d9\u151d\3\2\2\2\u14da\u14db"+
		"\7$\2\2\u14db\u14dc\7\u0165\2\2\u14dc\u14dd\7\u013e\2\2\u14dd\u14de\7"+
		"V\2\2\u14de\u14df\5\u01b0\u00d9\2\u14df\u14e0\7\u0148\2\2\u14e0\u14e1"+
		"\7\u013c\2\2\u14e1\u14e2\5\u0418\u020d\2\u14e2\u151d\3\2\2\2\u14e3\u14e4"+
		"\7$\2\2\u14e4\u14e5\7\u0142\2\2\u14e5\u14e6\5\u0414\u020b\2\u14e6\u14e7"+
		"\7\u0148\2\2\u14e7\u14e8\7\u013c\2\2\u14e8\u14e9\5\u0418\u020d\2\u14e9"+
		"\u151d\3\2\2\2\u14ea\u14eb\7$\2\2\u14eb\u14ec\7\u0142\2\2\u14ec\u14ed"+
		"\7\u00af\2\2\u14ed\u14ee\7\u0091\2\2\u14ee\u14ef\5\u0414\u020b\2\u14ef"+
		"\u14f0\7\u0148\2\2\u14f0\u14f1\7\u013c\2\2\u14f1\u14f2\5\u0418\u020d\2"+
		"\u14f2\u151d\3\2\2\2\u14f3\u14f4\7$\2\2\u14f4\u14f5\7\u018b\2\2\u14f5"+
		"\u14f6\5\u0414\u020b\2\u14f6\u14f7\7\u0148\2\2\u14f7\u14f8\7\u013c\2\2"+
		"\u14f8\u14f9\5\u0418\u020d\2\u14f9\u151d\3\2\2\2\u14fa\u14fb\7$\2\2\u14fb"+
		"\u14fc\7\u018b\2\2\u14fc\u14fd\7\u00af\2\2\u14fd\u14fe\7\u0091\2\2\u14fe"+
		"\u14ff\5\u0414\u020b\2\u14ff\u1500\7\u0148\2\2\u1500\u1501\7\u013c\2\2"+
		"\u1501\u1502\5\u0418\u020d\2\u1502\u151d\3\2\2\2\u1503\u1504\7$\2\2\u1504"+
		"\u1505\7\u009e\2\2\u1505\u1506\7\u015f\2\2\u1506\u1507\5\u0358\u01ad\2"+
		"\u1507\u1508\7\u0148\2\2\u1508\u1509\7\u013c\2\2\u1509\u150a\5\u0418\u020d"+
		"\2\u150a\u151d\3\2\2\2\u150b\u150c\7$\2\2\u150c\u150d\7\u009e\2\2\u150d"+
		"\u150e\7\u015f\2\2\u150e\u150f\7\u00af\2\2\u150f\u1510\7\u0091\2\2\u1510"+
		"\u1511\5\u0358\u01ad\2\u1511\u1512\7\u0148\2\2\u1512\u1513\7\u013c\2\2"+
		"\u1513\u1514\5\u0418\u020d\2\u1514\u151d\3\2\2\2\u1515\u1516\7$\2\2\u1516"+
		"\u1517\7\u0172\2\2\u1517\u1518\5\u01b0\u00d9\2\u1518\u1519\7\u0148\2\2"+
		"\u1519\u151a\7\u013c\2\2\u151a\u151b\5\u0418\u020d\2\u151b\u151d\3\2\2"+
		"\2\u151c\u1468\3\2\2\2\u151c\u1470\3\2\2\2\u151c\u1477\3\2\2\2\u151c\u147e"+
		"\3\2\2\2\u151c\u1485\3\2\2\2\u151c\u148c\3\2\2\2\u151c\u1493\3\2\2\2\u151c"+
		"\u149b\3\2\2\2\u151c\u14a5\3\2\2\2\u151c\u14af\3\2\2\2\u151c\u14b6\3\2"+
		"\2\2\u151c\u14bf\3\2\2\2\u151c\u14c8\3\2\2\2\u151c\u14d1\3\2\2\2\u151c"+
		"\u14da\3\2\2\2\u151c\u14e3\3\2\2\2\u151c\u14ea\3\2\2\2\u151c\u14f3\3\2"+
		"\2\2\u151c\u14fa\3\2\2\2\u151c\u1503\3\2\2\2\u151c\u150b\3\2\2\2\u151c"+
		"\u1515\3\2\2\2\u151d\u025d\3\2\2\2\u151e\u151f\7$\2\2\u151f\u1520\7!\2"+
		"\2\u1520\u1521\5\u0424\u0213\2\u1521\u1522\5\u017e\u00c0\2\u1522\u1523"+
		"\7\u010c\2\2\u1523\u1524\7\u0169\2\2\u1524\u1525\5\u042c\u0217\2\u1525"+
		"\u15ad\3\2\2\2\u1526\u1527\7$\2\2\u1527\u1528\7O\2\2\u1528\u1529\5\u01b0"+
		"\u00d9\2\u1529\u152a\7\u010c\2\2\u152a\u152b\7\u0169\2\2\u152b\u152c\5"+
		"\u042c\u0217\2\u152c\u15ad\3\2\2\2\u152d\u152e\7$\2\2\u152e\u152f\7\\"+
		"\2\2\u152f\u1530\5\u01b0\u00d9\2\u1530\u1531\7\u010c\2\2\u1531\u1532\7"+
		"\u0169\2\2\u1532\u1533\5\u042c\u0217\2\u1533\u15ad\3\2\2\2\u1534\u1535"+
		"\7$\2\2\u1535\u1536\7m\2\2\u1536\u1537\5\u041a\u020e\2\u1537\u1538\7\u010c"+
		"\2\2\u1538\u1539\7\u0169\2\2\u1539\u153a\5\u042c\u0217\2\u153a\u15ad\3"+
		"\2\2\2\u153b\u153c\7$\2\2\u153c\u153d\7\u0081\2\2\u153d\u153e\5\u01b0"+
		"\u00d9\2\u153e\u153f\7\u010c\2\2\u153f\u1540\7\u0169\2\2\u1540\u1541\5"+
		"\u042c\u0217\2\u1541\u15ad\3\2\2\2\u1542\u1543\7$\2\2\u1543\u1544\7\u00a2"+
		"\2\2\u1544\u1545\5\u01e2\u00f2\2\u1545\u1546\7\u010c\2\2\u1546\u1547\7"+
		"\u0169\2\2\u1547\u1548\5\u042c\u0217\2\u1548\u15ad\3\2\2\2\u1549\u154a"+
		"\7$\2\2\u154a\u154b\5\u0104\u0083\2\u154b\u154c\7\u00ce\2\2\u154c\u154d"+
		"\5\u0418\u020d\2\u154d\u154e\7\u010c\2\2\u154e\u154f\7\u0169\2\2\u154f"+
		"\u1550\5\u042c\u0217\2\u1550\u15ad\3\2\2\2\u1551\u1552\7$\2\2\u1552\u1553"+
		"\7\u00cf\2\2\u1553\u1554\7\u00fa\2\2\u1554\u1555\5\u00f2z\2\u1555\u1556"+
		"\7\u010c\2\2\u1556\u1557\7\u0169\2\2\u1557\u1558\5\u042c\u0217\2\u1558"+
		"\u15ad\3\2\2\2\u1559\u155a\7$\2\2\u155a\u155b\7\u0101\2\2\u155b\u155c"+
		"\5\u0240\u0121\2\u155c\u155d\5\u023e\u0120\2\u155d\u155e\7\u010c\2\2\u155e"+
		"\u155f\7\u0169\2\2\u155f\u1560\5\u042c\u0217\2\u1560\u15ad\3\2\2\2\u1561"+
		"\u1562\7$\2\2\u1562\u1563\7\u0101\2\2\u1563\u1564\7J\2\2\u1564\u1565\5"+
		"\u01b0\u00d9\2\u1565\u1566\7\u017f\2\2\u1566\u1567\5\u041c\u020f\2\u1567"+
		"\u1568\7\u010c\2\2\u1568\u1569\7\u0169\2\2\u1569\u156a\5\u042c\u0217\2"+
		"\u156a\u15ad\3\2\2\2\u156b\u156c\7$\2\2\u156c\u156d\7\u0101\2\2\u156d"+
		"\u156e\7\u0097\2\2\u156e\u156f\5\u01b0\u00d9\2\u156f\u1570\7\u017f\2\2"+
		"\u1570\u1571\5\u041c\u020f\2\u1571\u1572\7\u010c\2\2\u1572\u1573\7\u0169"+
		"\2\2\u1573\u1574\5\u042c\u0217\2\u1574\u15ad\3\2\2\2\u1575\u1576\7$\2"+
		"\2\u1576\u1577\7\u013c\2\2\u1577\u1578\5\u0418\u020d\2\u1578\u1579\7\u010c"+
		"\2\2\u1579\u157a\7\u0169\2\2\u157a\u157b\5\u042c\u0217\2\u157b\u15ad\3"+
		"\2\2\2\u157c\u157d\7$\2\2\u157d\u157e\7\u0172\2\2\u157e\u157f\5\u01b0"+
		"\u00d9\2\u157f\u1580\7\u010c\2\2\u1580\u1581\7\u0169\2\2\u1581\u1582\5"+
		"\u042c\u0217\2\u1582\u15ad\3\2\2\2\u1583\u1584\7$\2\2\u1584\u1585\7\u0161"+
		"\2\2\u1585\u1586\5\u0418\u020d\2\u1586\u1587\7\u010c\2\2\u1587\u1588\7"+
		"\u0169\2\2\u1588\u1589\5\u042c\u0217\2\u1589\u15ad\3\2\2\2\u158a\u158b"+
		"\7$\2\2\u158b\u158c\7\u0165\2\2\u158c\u158d\7\u013e\2\2\u158d\u158e\7"+
		"{\2\2\u158e\u158f\5\u01b0\u00d9\2\u158f\u1590\7\u010c\2\2\u1590\u1591"+
		"\7\u0169\2\2\u1591\u1592\5\u042c\u0217\2\u1592\u15ad\3\2\2\2\u1593\u1594"+
		"\7$\2\2\u1594\u1595\7\u0165\2\2\u1595\u1596\7\u013e\2\2\u1596\u1597\7"+
		"V\2\2\u1597\u1598\5\u01b0\u00d9\2\u1598\u1599\7\u010c\2\2\u1599\u159a"+
		"\7\u0169\2\2\u159a\u159b\5\u042c\u0217\2\u159b\u15ad\3\2\2\2\u159c\u159d"+
		"\7$\2\2\u159d\u159e\7\u009e\2\2\u159e\u159f\7l\2\2\u159f\u15a0\7\u0194"+
		"\2\2\u15a0\u15a1\5\u0418\u020d\2\u15a1\u15a2\7\u010c\2\2\u15a2\u15a3\7"+
		"\u0169\2\2\u15a3\u15a4\5\u042c\u0217\2\u15a4\u15ad\3\2\2\2\u15a5\u15a6"+
		"\7$\2\2\u15a6\u15a7\7\u0145\2\2\u15a7\u15a8\5\u0418\u020d\2\u15a8\u15a9"+
		"\7\u010c\2\2\u15a9\u15aa\7\u0169\2\2\u15aa\u15ab\5\u042c\u0217\2\u15ab"+
		"\u15ad\3\2\2\2\u15ac\u151e\3\2\2\2\u15ac\u1526\3\2\2\2\u15ac\u152d\3\2"+
		"\2\2\u15ac\u1534\3\2\2\2\u15ac\u153b\3\2\2\2\u15ac\u1542\3\2\2\2\u15ac"+
		"\u1549\3\2\2\2\u15ac\u1551\3\2\2\2\u15ac\u1559\3\2\2\2\u15ac\u1561\3\2"+
		"\2\2\u15ac\u156b\3\2\2\2\u15ac\u1575\3\2\2\2\u15ac\u157c\3\2\2\2\u15ac"+
		"\u1583\3\2\2\2\u15ac\u158a\3\2\2\2\u15ac\u1593\3\2\2\2\u15ac\u159c\3\2"+
		"\2\2\u15ac\u15a5\3\2\2\2\u15ad\u025f\3\2\2\2\u15ae\u15af\7_\2\2\u15af"+
		"\u15b0\5\u020e\u0108\2\u15b0\u15b1\7\u013a\2\2\u15b1\u15b2\5\u0418\u020d"+
		"\2\u15b2\u15b3\7+\2\2\u15b3\u15b4\7\u00ff\2\2\u15b4\u15b5\5\u026a\u0136"+
		"\2\u15b5\u15b6\7\u0169\2\2\u15b6\u15b7\5\u0414\u020b\2\u15b7\u15b8\5\u0360"+
		"\u01b1\2\u15b8\u15b9\7\177\2\2\u15b9\u15ba\5\u026c\u0137\2\u15ba\u15bb"+
		"\5\u0262\u0132\2\u15bb\u0261\3\2\2\2\u15bc\u15c3\7\u00f2\2\2\u15bd\u15c3"+
		"\5\u0266\u0134\2\u15be\u15bf\7\r\2\2\u15bf\u15c0\5\u0264\u0133\2\u15c0"+
		"\u15c1\7\6\2\2\u15c1\u15c3\3\2\2\2\u15c2\u15bc\3\2\2\2\u15c2\u15bd\3\2"+
		"\2\2\u15c2\u15be\3\2\2\2\u15c3\u0263\3\2\2\2\u15c4\u15c5\b\u0133\1\2\u15c5"+
		"\u15c6\5\u0268\u0135\2\u15c6\u15cc\3\2\2\2\u15c7\u15c8\f\4\2\2\u15c8\u15c9"+
		"\7\21\2\2\u15c9\u15cb\5\u0268\u0135\2\u15ca\u15c7\3\2\2\2\u15cb\u15ce"+
		"\3\2\2\2\u15cc\u15ca\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u0265\3\2\2\2\u15ce"+
		"\u15cc\3\2\2\2\u15cf\u15d5\5\u0300\u0181\2\u15d0\u15d5\5\u02d4\u016b\2"+
		"\u15d1\u15d5\5\u02ea\u0176\2\u15d2\u15d5\5\u02de\u0170\2\u15d3\u15d5\5"+
		"\u0270\u0139\2\u15d4\u15cf\3\2\2\2\u15d4\u15d0\3\2\2\2\u15d4\u15d1\3\2"+
		"\2\2\u15d4\u15d2\3\2\2\2\u15d4\u15d3\3\2\2\2\u15d5\u0267\3\2\2\2\u15d6"+
		"\u15d9\5\u0266\u0134\2\u15d7\u15d9\3\2\2\2\u15d8\u15d6\3\2\2\2\u15d8\u15d7"+
		"\3\2\2\2\u15d9\u0269\3\2\2\2\u15da\u15db\t\n\2\2\u15db\u026b\3\2\2\2\u15dc"+
		"\u15e0\7\u00c2\2\2\u15dd\u15e0\7#\2\2\u15de\u15e0\3\2\2\2\u15df\u15dc"+
		"\3\2\2\2\u15df\u15dd\3\2\2\2\u15df\u15de\3\2\2\2\u15e0\u026d\3\2\2\2\u15e1"+
		"\u15e2\7\u0083\2\2\u15e2\u15e3\7\u013a\2\2\u15e3\u15e4\5\u0418\u020d\2"+
		"\u15e4\u15e5\7\u00ff\2\2\u15e5\u15e6\5\u01b0\u00d9\2\u15e6\u15e7\5b\62"+
		"\2\u15e7\u15f2\3\2\2\2\u15e8\u15e9\7\u0083\2\2\u15e9\u15ea\7\u013a\2\2"+
		"\u15ea\u15eb\7\u00af\2\2\u15eb\u15ec\7\u0091\2\2\u15ec\u15ed\5\u0418\u020d"+
		"\2\u15ed\u15ee\7\u00ff\2\2\u15ee\u15ef\5\u01b0\u00d9\2\u15ef\u15f0\5b"+
		"\62\2\u15f0\u15f2\3\2\2\2\u15f1\u15e1\3\2\2\2\u15f1\u15e8\3\2\2\2\u15f2"+
		"\u026f\3\2\2\2\u15f3\u15f4\7\u00f3\2\2\u15f4\u15f5\5\u0430\u0219\2\u15f5"+
		"\u15f6\5\u0272\u013a\2\u15f6\u0271\3\2\2\2\u15f7\u15f8\7\b\2\2\u15f8\u15fb"+
		"\5\u042a\u0216\2\u15f9\u15fb\3\2\2\2\u15fa\u15f7\3\2\2\2\u15fa\u15f9\3"+
		"\2\2\2\u15fb\u0273\3\2\2\2\u15fc\u15fd\7\u00da\2\2\u15fd\u15fe\5\u0430"+
		"\u0219\2\u15fe\u0275\3\2\2\2\u15ff\u1600\7\u017a\2\2\u1600\u1604\5\u0430"+
		"\u0219\2\u1601\u1602\7\u017a\2\2\u1602\u1604\7\f\2\2\u1603\u15ff\3\2\2"+
		"\2\u1603\u1601\3\2\2\2\u1604\u0277\3\2\2\2\u1605\u1606\7\27\2\2\u1606"+
		"\u1630\5\u027a\u013e\2\u1607\u1608\7\65\2\2\u1608\u1609\5\u027a\u013e"+
		"\2\u1609\u160a\5\u0280\u0141\2\u160a\u1630\3\2\2\2\u160b\u160c\7\u0153"+
		"\2\2\u160c\u160d\7\u016b\2\2\u160d\u1630\5\u0280\u0141\2\u160e\u160f\7"+
		"S\2\2\u160f\u1630\5\u027a\u013e\2\u1610\u1611\7\u0089\2\2\u1611\u1630"+
		"\5\u027a\u013e\2\u1612\u1613\7\u0137\2\2\u1613\u1630\5\u027a\u013e\2\u1614"+
		"\u1615\7\u013b\2\2\u1615\u1630\5\u0430\u0219\2\u1616\u1617\7\u012a\2\2"+
		"\u1617\u1618\7\u013b\2\2\u1618\u1630\5\u0430\u0219\2\u1619\u161a\7\u012a"+
		"\2\2\u161a\u1630\5\u0430\u0219\2\u161b\u161c\7\u0137\2\2\u161c\u161d\5"+
		"\u027a\u013e\2\u161d\u161e\7\u0169\2\2\u161e\u161f\7\u013b\2\2\u161f\u1620"+
		"\5\u0430\u0219\2\u1620\u1630\3\2\2\2\u1621\u1622\7\u0137\2\2\u1622\u1623"+
		"\5\u027a\u013e\2\u1623\u1624\7\u0169\2\2\u1624\u1625\5\u0430\u0219\2\u1625"+
		"\u1630\3\2\2\2\u1626\u1627\7\u0117\2\2\u1627\u1628\7\u016b\2\2\u1628\u1630"+
		"\5\u042a\u0216\2\u1629\u162a\7S\2\2\u162a\u162b\7\u0118\2\2\u162b\u1630"+
		"\5\u042a\u0216\2\u162c\u162d\7\u0137\2\2\u162d\u162e\7\u0118\2\2\u162e"+
		"\u1630\5\u042a\u0216\2\u162f\u1605\3\2\2\2\u162f\u1607\3\2\2\2\u162f\u160b"+
		"\3\2\2\2\u162f\u160e\3\2\2\2\u162f\u1610\3\2\2\2\u162f\u1612\3\2\2\2\u162f"+
		"\u1614\3\2\2\2\u162f\u1616\3\2\2\2\u162f\u1619\3\2\2\2\u162f\u161b\3\2"+
		"\2\2\u162f\u1621\3\2\2\2\u162f\u1626\3\2\2\2\u162f\u1629\3\2\2\2\u162f"+
		"\u162c\3\2\2\2\u1630\u0279\3\2\2\2\u1631\u1635\7\u0193\2\2\u1632\u1635"+
		"\7\u016b\2\2\u1633\u1635\3\2\2\2\u1634\u1631\3\2\2\2\u1634\u1632\3\2\2"+
		"\2\u1634\u1633\3\2\2\2\u1635\u027b\3\2\2\2\u1636\u1637\7\u00ca\2\2\u1637"+
		"\u1638\7\u00d7\2\2\u1638\u1641\5> \2\u1639\u163a\7\u0121\2\2\u163a\u1641"+
		"\7\u0100\2\2\u163b\u163c\7\u0121\2\2\u163c\u1641\7\u0195\2\2\u163d\u1641"+
		"\7t\2\2\u163e\u163f\7\u00f1\2\2\u163f\u1641\7t\2\2\u1640\u1636\3\2\2\2"+
		"\u1640\u1639\3\2\2\2\u1640\u163b\3\2\2\2\u1640\u163d\3\2\2\2\u1640\u163e"+
		"\3\2\2\2\u1641\u027d\3\2\2\2\u1642\u1643\b\u0140\1\2\u1643\u1644\5\u027c"+
		"\u013f\2\u1644\u164c\3\2\2\2\u1645\u1646\f\4\2\2\u1646\u1647\7\b\2\2\u1647"+
		"\u164b\5\u027c\u013f\2\u1648\u1649\f\3\2\2\u1649\u164b\5\u027c\u013f\2"+
		"\u164a\u1645\3\2\2\2\u164a\u1648\3\2\2\2\u164b\u164e\3\2\2\2\u164c\u164a"+
		"\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u027f\3\2\2\2\u164e\u164c\3\2\2\2\u164f"+
		"\u1652\5\u027e\u0140\2\u1650\u1652\3\2\2\2\u1651\u164f\3\2\2\2\u1651\u1650"+
		"\3\2\2\2\u1652\u0281\3\2\2\2\u1653\u1654\7_\2\2\u1654\u1655\5\u0098M\2"+
		"\u1655\u1656\7\u018b\2\2\u1656\u1657\5\u0414\u020b\2\u1657\u1658\5\u00be"+
		"`\2\u1658\u1659\5j\66\2\u1659\u165a\7+\2\2\u165a\u165b\5\u0300\u0181\2"+
		"\u165b\u165c\5\u0284\u0143\2\u165c\u166a\3\2\2\2\u165d\u165e\7_\2\2\u165e"+
		"\u165f\7\u0104\2\2\u165f\u1660\7\u012d\2\2\u1660\u1661\5\u0098M\2\u1661"+
		"\u1662\7\u018b\2\2\u1662\u1663\5\u0414\u020b\2\u1663\u1664\5\u00be`\2"+
		"\u1664\u1665\5j\66\2\u1665\u1666\7+\2\2\u1666\u1667\5\u0300\u0181\2\u1667"+
		"\u1668\5\u0284\u0143\2\u1668\u166a\3\2\2\2\u1669\u1653\3\2\2\2\u1669\u165d"+
		"\3\2\2\2\u166a\u0283\3\2\2\2\u166b\u166c\7\u0191\2\2\u166c\u166d\7H\2"+
		"\2\u166d\u1678\7\u0102\2\2\u166e\u166f\7\u0191\2\2\u166f\u1670\7@\2\2"+
		"\u1670\u1671\7H\2\2\u1671\u1678\7\u0102\2\2\u1672\u1673\7\u0191\2\2\u1673"+
		"\u1674\7\u00dc\2\2\u1674\u1675\7H\2\2\u1675\u1678\7\u0102\2\2\u1676\u1678"+
		"\3\2\2\2\u1677\u166b\3\2\2\2\u1677\u166e\3\2\2\2\u1677\u1672\3\2\2\2\u1677"+
		"\u1676\3\2\2\2\u1678\u0285\3\2\2\2\u1679\u167a\7\u00db\2\2\u167a\u167b"+
		"\5\u0422\u0212\2\u167b\u0287\3\2\2\2\u167c\u167d\7_\2\2\u167d\u167e\7"+
		"m\2\2\u167e\u1680\5\u041a\u020e\2\u167f\u1681\7\u0191\2\2\u1680\u167f"+
		"\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\5\u028a\u0146"+
		"\2\u1683\u0289\3\2\2\2\u1684\u1689\b\u0146\1\2\u1685\u1686\f\4\2\2\u1686"+
		"\u1688\5\u028c\u0147\2\u1687\u1685\3\2\2\2\u1688\u168b\3\2\2\2\u1689\u1687"+
		"\3\2\2\2\u1689\u168a\3\2\2\2\u168a\u028b\3\2\2\2\u168b\u1689\3\2\2\2\u168c"+
		"\u168d\7\u0161\2\2\u168d\u168e\5\u028e\u0148\2\u168e\u168f\5\u0418\u020d"+
		"\2\u168f\u16ce\3\2\2\2\u1690\u1691\7\u0161\2\2\u1691\u1692\5\u028e\u0148"+
		"\2\u1692\u1693\7r\2\2\u1693\u16ce\3\2\2\2\u1694\u1695\7\u00df\2\2\u1695"+
		"\u1696\5\u028e\u0148\2\u1696\u1697\5\u042a\u0216\2\u1697\u16ce\3\2\2\2"+
		"\u1698\u1699\7\u00df\2\2\u1699\u169a\5\u028e\u0148\2\u169a\u169b\7r\2"+
		"\2\u169b\u16ce\3\2\2\2\u169c\u169d\7\u0163\2\2\u169d\u169e\5\u028e\u0148"+
		"\2\u169e\u169f\5\u0418\u020d\2\u169f\u16ce\3\2\2\2\u16a0\u16a1\7\u0163"+
		"\2\2\u16a1\u16a2\5\u028e\u0148\2\u16a2\u16a3\7r\2\2\u16a3\u16ce\3\2\2"+
		"\2\u16a4\u16a5\7\u0087\2\2\u16a5\u16a6\5\u028e\u0148\2\u16a6\u16a7\5\u042a"+
		"\u0216\2\u16a7\u16ce\3\2\2\2\u16a8\u16a9\7\u0087\2\2\u16a9\u16aa\5\u028e"+
		"\u0148\2\u16aa\u16ab\5\u0428\u0215\2\u16ab\u16ce\3\2\2\2\u16ac\u16ad\7"+
		"\u0087\2\2\u16ad\u16ae\5\u028e\u0148\2\u16ae\u16af\7r\2\2\u16af\u16ce"+
		"\3\2\2\2\u16b0\u16b1\7\u00d1\2\2\u16b1\u16b2\5\u028e\u0148\2\u16b2\u16b3"+
		"\5\u042a\u0216\2\u16b3\u16ce\3\2\2\2\u16b4\u16b5\7\u00d1\2\2\u16b5\u16b6"+
		"\5\u028e\u0148\2\u16b6\u16b7\7r\2\2\u16b7\u16ce\3\2\2\2\u16b8\u16b9\7"+
		"\u00d2\2\2\u16b9\u16ba\5\u028e\u0148\2\u16ba\u16bb\5\u042a\u0216\2\u16bb"+
		"\u16ce\3\2\2\2\u16bc\u16bd\7\u00d2\2\2\u16bd\u16be\5\u028e\u0148\2\u16be"+
		"\u16bf\7r\2\2\u16bf\u16ce\3\2\2\2\u16c0\u16c1\7W\2\2\u16c1\u16c2\7\u00d9"+
		"\2\2\u16c2\u16c3\5\u028e\u0148\2\u16c3\u16c4\5\u042e\u0218\2\u16c4\u16ce"+
		"\3\2\2\2\u16c5\u16c6\7\u010c\2\2\u16c6\u16c7\5\u028e\u0148\2\u16c7\u16c8"+
		"\5\u0418\u020d\2\u16c8\u16ce\3\2\2\2\u16c9\u16ca\7\u010c\2\2\u16ca\u16cb"+
		"\5\u028e\u0148\2\u16cb\u16cc\7r\2\2\u16cc\u16ce\3\2\2\2\u16cd\u168c\3"+
		"\2\2\2\u16cd\u1690\3\2\2\2\u16cd\u1694\3\2\2\2\u16cd\u1698\3\2\2\2\u16cd"+
		"\u169c\3\2\2\2\u16cd\u16a0\3\2\2\2\u16cd\u16a4\3\2\2\2\u16cd\u16a8\3\2"+
		"\2\2\u16cd\u16ac\3\2\2\2\u16cd\u16b0\3\2\2\2\u16cd\u16b4\3\2\2\2\u16cd"+
		"\u16b8\3\2\2\2\u16cd\u16bc\3\2\2\2\u16cd\u16c0\3\2\2\2\u16cd\u16c5\3\2"+
		"\2\2\u16cd\u16c9\3\2\2\2\u16ce\u028d\3\2\2\2\u16cf\u16d2\7\20\2\2\u16d0"+
		"\u16d2\3\2\2\2\u16d1\u16cf\3\2\2\2\u16d1\u16d0\3\2\2\2\u16d2\u028f\3\2"+
		"\2\2\u16d3\u16d4\7$\2\2\u16d4\u16d5\7m\2\2\u16d5\u16d7\5\u041a\u020e\2"+
		"\u16d6\u16d8\7\u0191\2\2\u16d7\u16d6\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8"+
		"\u16d9\3\2\2\2\u16d9\u16da\5\u0294\u014b\2\u16da\u16e3\3\2\2\2\u16db\u16dc"+
		"\7$\2\2\u16dc\u16dd\7m\2\2\u16dd\u16de\5\u041a\u020e\2\u16de\u16df\7\u0148"+
		"\2\2\u16df\u16e0\7\u0161\2\2\u16e0\u16e1\5\u0418\u020d\2\u16e1\u16e3\3"+
		"\2\2\2\u16e2\u16d3\3\2\2\2\u16e2\u16db\3\2\2\2\u16e3\u0291\3\2\2\2\u16e4"+
		"\u16e5\7$\2\2\u16e5\u16e6\7m\2\2\u16e6\u16e7\5\u041a\u020e\2\u16e7\u16e8"+
		"\5J&\2\u16e8\u0293\3\2\2\2\u16e9\u16ee\b\u014b\1\2\u16ea\u16eb\f\4\2\2"+
		"\u16eb\u16ed\5\u0296\u014c\2\u16ec\u16ea\3\2\2\2\u16ed\u16f0\3\2\2\2\u16ee"+
		"\u16ec\3\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u0295\3\2\2\2\u16f0\u16ee\3\2"+
		"\2\2\u16f1\u16f2\7W\2\2\u16f2\u16f3\7\u00d9\2\2\u16f3\u16f4\5\u028e\u0148"+
		"\2\u16f4\u16f5\5\u042e\u0218\2\u16f5\u0297\3\2\2\2\u16f6\u16f7\7\u0083"+
		"\2\2\u16f7\u16f8\7m\2\2\u16f8\u16ff\5\u041a\u020e\2\u16f9\u16fa\7\u0083"+
		"\2\2\u16fa\u16fb\7m\2\2\u16fb\u16fc\7\u00af\2\2\u16fc\u16fd\7\u0091\2"+
		"\2\u16fd\u16ff\5\u041a\u020e\2\u16fe\u16f6\3\2\2\2\u16fe\u16f9\3\2\2\2"+
		"\u16ff\u0299\3\2\2\2\u1700\u1701\7_\2\2\u1701\u1702\7\u0081\2\2\u1702"+
		"\u1703\5\u01b0\u00d9\2\u1703\u1704\5\u029e\u0150\2\u1704\u1705\5\u036a"+
		"\u01b6\2\u1705\u1706\5\u00aaV\2\u1706\u029b\3\2\2\2\u1707\u1708\7$\2\2"+
		"\u1708\u1709\7\u0081\2\2\u1709\u170a\5\u01b0\u00d9\2\u170a\u170b\5`\61"+
		"\2\u170b\u173a\3\2\2\2\u170c\u170d\7$\2\2\u170d\u170e\7\u0081\2\2\u170e"+
		"\u170f\5\u01b0\u00d9\2\u170f\u1710\7\u0083\2\2\u1710\u1711\7\u00f1\2\2"+
		"\u1711\u1712\7\u00f6\2\2\u1712\u173a\3\2\2\2\u1713\u1714\7$\2\2\u1714"+
		"\u1715\7\u0081\2\2\u1715\u1716\5\u01b0\u00d9\2\u1716\u1717\7\u0148\2\2"+
		"\u1717\u1718\7\u00f1\2\2\u1718\u1719\7\u00f6\2\2\u1719\u173a\3\2\2\2\u171a"+
		"\u171b\7$\2\2\u171b\u171c\7\u0081\2\2\u171c\u171d\5\u01b0\u00d9\2\u171d"+
		"\u171e\7\33\2\2\u171e\u171f\5\u00b8]\2\u171f\u173a\3\2\2\2\u1720\u1721"+
		"\7$\2\2\u1721\u1722\7\u0081\2\2\u1722\u1723\5\u01b0\u00d9\2\u1723\u1724"+
		"\7\u0083\2\2\u1724\u1725\7X\2\2\u1725\u1726\5\u0418\u020d\2\u1726\u1727"+
		"\5b\62\2\u1727\u173a\3\2\2\2\u1728\u1729\7$\2\2\u1729\u172a\7\u0081\2"+
		"\2\u172a\u172b\5\u01b0\u00d9\2\u172b\u172c\7\u0083\2\2\u172c\u172d\7X"+
		"\2\2\u172d\u172e\7\u00af\2\2\u172e\u172f\7\u0091\2\2\u172f\u1730\5\u0418"+
		"\u020d\2\u1730\u1731\5b\62\2\u1731\u173a\3\2\2\2\u1732\u1733\7$\2\2\u1733"+
		"\u1734\7\u0081\2\2\u1734\u1735\5\u01b0\u00d9\2\u1735\u1736\7\u0182\2\2"+
		"\u1736\u1737\7X\2\2\u1737\u1738\5\u0418\u020d\2\u1738\u173a\3\2\2\2\u1739"+
		"\u1707\3\2\2\2\u1739\u170c\3\2\2\2\u1739\u1713\3\2\2\2\u1739\u171a\3\2"+
		"\2\2\u1739\u1720\3\2\2\2\u1739\u1728\3\2\2\2\u1739\u1732\3\2\2\2\u173a"+
		"\u029d\3\2\2\2\u173b\u173e\7+\2\2\u173c\u173e\3\2\2\2\u173d\u173b\3\2"+
		"\2\2\u173d\u173c\3\2\2\2\u173e\u029f\3\2\2\2\u173f\u1740\7$\2\2\u1740"+
		"\u1741\7\u0165\2\2\u1741\u1742\7\u013e\2\2\u1742\u1743\7{\2\2\u1743\u1744"+
		"\5\u01b0\u00d9\2\u1744\u1745\5\u0176\u00bc\2\u1745\u02a1\3\2\2\2\u1746"+
		"\u1747\7$\2\2\u1747\u1748\7\u0165\2\2\u1748\u1749\7\u013e\2\2\u1749\u174a"+
		"\7V\2\2\u174a\u174b\5\u01b0\u00d9\2\u174b\u174c\7\33\2\2\u174c\u174d\7"+
		"\u00e1\2\2\u174d\u174e\7\u009c\2\2\u174e\u174f\5\u0416\u020c\2\u174f\u1750"+
		"\7\u0191\2\2\u1750\u1751\5\u01ae\u00d8\2\u1751\u178f\3\2\2\2\u1752\u1753"+
		"\7$\2\2\u1753\u1754\7\u0165\2\2\u1754\u1755\7\u013e\2\2\u1755\u1756\7"+
		"V\2\2\u1756\u1757\5\u01b0\u00d9\2\u1757\u1758\7$\2\2\u1758\u1759\7\u00e1"+
		"\2\2\u1759\u175a\7\u009c\2\2\u175a\u175b\5\u0416\u020c\2\u175b\u175c\7"+
		"\u0191\2\2\u175c\u175d\5\u01ae\u00d8\2\u175d\u178f\3\2\2\2\u175e\u175f"+
		"\7$\2\2\u175f\u1760\7\u0165\2\2\u1760\u1761\7\u013e\2\2\u1761\u1762\7"+
		"V\2\2\u1762\u1763\5\u01b0\u00d9\2\u1763\u1764\7$\2\2\u1764\u1765\7\u00e1"+
		"\2\2\u1765\u1766\7\u012d\2\2\u1766\u1767\5\u01b0\u00d9\2\u1767\u1768\7"+
		"\u0191\2\2\u1768\u1769\5\u01b0\u00d9\2\u1769\u178f\3\2\2\2\u176a\u176b"+
		"\7$\2\2\u176b\u176c\7\u0165\2\2\u176c\u176d\7\u013e\2\2\u176d\u176e\7"+
		"V\2\2\u176e\u176f\5\u01b0\u00d9\2\u176f\u1770\7$\2\2\u1770\u1771\7\u00e1"+
		"\2\2\u1771\u1772\7\u009c\2\2\u1772\u1773\5\u0416\u020c\2\u1773\u1774\7"+
		"\u012d\2\2\u1774\u1775\5\u01b0\u00d9\2\u1775\u1776\7\u0191\2\2\u1776\u1777"+
		"\5\u01b0\u00d9\2\u1777\u178f\3\2\2\2\u1778\u1779\7$\2\2\u1779\u177a\7"+
		"\u0165\2\2\u177a\u177b\7\u013e\2\2\u177b\u177c\7V\2\2\u177c\u177d\5\u01b0"+
		"\u00d9\2\u177d\u177e\7\u0083\2\2\u177e\u177f\7\u00e1\2\2\u177f\u1780\7"+
		"\u009c\2\2\u1780\u1781\5\u0416\u020c\2\u1781\u178f\3\2\2\2\u1782\u1783"+
		"\7$\2\2\u1783\u1784\7\u0165\2\2\u1784\u1785\7\u013e\2\2\u1785\u1786\7"+
		"V\2\2\u1786\u1787\5\u01b0\u00d9\2\u1787\u1788\7\u0083\2\2\u1788\u1789"+
		"\7\u00e1\2\2\u1789\u178a\7\u00af\2\2\u178a\u178b\7\u0091\2\2\u178b\u178c"+
		"\7\u009c\2\2\u178c\u178d\5\u0416\u020c\2\u178d\u178f\3\2\2\2\u178e\u1746"+
		"\3\2\2\2\u178e\u1752\3\2\2\2\u178e\u175e\3\2\2\2\u178e\u176a\3\2\2\2\u178e"+
		"\u1778\3\2\2\2\u178e\u1782\3\2\2\2\u178f\u02a3\3\2\2\2\u1790\u1791\7_"+
		"\2\2\u1791\u1792\5\u0192\u00ca\2\u1792\u1793\7\\\2\2\u1793\u1794\5\u01b0"+
		"\u00d9\2\u1794\u1795\7\u009c\2\2\u1795\u1796\5\u042a\u0216\2\u1796\u1797"+
		"\7\u0169\2\2\u1797\u1798\5\u042a\u0216\2\u1798\u1799\7 \2\2\u1799\u179a"+
		"\5\u01b0\u00d9\2\u179a\u02a5\3\2\2\2\u179b\u179c\7L\2\2\u179c\u179d\5"+
		"\u02b4\u015b\2\u179d\u179e\5\u0414\u020b\2\u179e\u179f\5\u02a8\u0155\2"+
		"\u179f\u17a9\3\2\2\2\u17a0\u17a1\7L\2\2\u17a1\u17a9\5\u02b4\u015b\2\u17a2"+
		"\u17a3\7L\2\2\u17a3\u17a4\5\u02b4\u015b\2\u17a4\u17a5\5\u0420\u0211\2"+
		"\u17a5\u17a6\7\u00ff\2\2\u17a6\u17a7\5\u0414\u020b\2\u17a7\u17a9\3\2\2"+
		"\2\u17a8\u179b\3\2\2\2\u17a8\u17a0\3\2\2\2\u17a8\u17a2\3\2\2\2\u17a9\u02a7"+
		"\3\2\2\2\u17aa\u17ab\7\u017f\2\2\u17ab\u17ae\5\u0420\u0211\2\u17ac\u17ae"+
		"\3\2\2\2\u17ad\u17aa\3\2\2\2\u17ad\u17ac\3\2\2\2\u17ae\u02a9\3\2\2\2\u17af"+
		"\u17b0\7\u0180\2\2\u17b0\u17b1\5\u02b6\u015c\2\u17b1\u17b2\5\u02b8\u015d"+
		"\2\u17b2\u17b3\5\u02b4\u015b\2\u17b3\u17cd\3\2\2\2\u17b4\u17b5\7\u0180"+
		"\2\2\u17b5\u17b6\5\u02b6\u015c\2\u17b6\u17b7\5\u02b8\u015d\2\u17b7\u17b8"+
		"\5\u02b4\u015b\2\u17b8\u17b9\5\u0414\u020b\2\u17b9\u17cd\3\2\2\2\u17ba"+
		"\u17bb\7\u0180\2\2\u17bb\u17bc\5\u02b6\u015c\2\u17bc\u17bd\5\u02b8\u015d"+
		"\2\u17bd\u17be\5\u02b4\u015b\2\u17be\u17bf\5\u02b0\u0159\2\u17bf\u17cd"+
		"\3\2\2\2\u17c0\u17c1\7\u0180\2\2\u17c1\u17c2\7\r\2\2\u17c2\u17c3\5\u02ac"+
		"\u0157\2\u17c3\u17c4\7\6\2\2\u17c4\u17cd\3\2\2\2\u17c5\u17c6\7\u0180\2"+
		"\2\u17c6\u17c7\7\r\2\2\u17c7\u17c8\5\u02ac\u0157\2\u17c8\u17c9\7\6\2\2"+
		"\u17c9\u17ca\5\u0414\u020b\2\u17ca\u17cb\5\u02ba\u015e\2\u17cb\u17cd\3"+
		"\2\2\2\u17cc\u17af\3\2\2\2\u17cc\u17b4\3\2\2\2\u17cc\u17ba\3\2\2\2\u17cc"+
		"\u17c0\3\2\2\2\u17cc\u17c5\3\2\2\2\u17cd\u02ab\3\2\2\2\u17ce\u17cf\b\u0157"+
		"\1\2\u17cf\u17d0\5\u02ae\u0158\2\u17d0\u17d6\3\2\2\2\u17d1\u17d2\f\3\2"+
		"\2\u17d2\u17d3\7\b\2\2\u17d3\u17d5\5\u02ae\u0158\2\u17d4\u17d1\3\2\2\2"+
		"\u17d5\u17d8\3\2\2\2\u17d6\u17d4\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7\u02ad"+
		"\3\2\2\2\u17d8\u17d6\3\2\2\2\u17d9\u17de\5\u02b2\u015a\2\u17da\u17de\7"+
		"\u0189\2\2\u17db\u17de\7\u00a0\2\2\u17dc\u17de\7\u00a1\2\2\u17dd\u17d9"+
		"\3\2\2\2\u17dd\u17da\3\2\2\2\u17dd\u17db\3\2\2\2\u17dd\u17dc\3\2\2\2\u17de"+
		"\u02af\3\2\2\2\u17df\u17e0\5\u02b2\u015a\2\u17e0\u17e1\5\u02b4\u015b\2"+
		"\u17e1\u17e8\3\2\2\2\u17e2\u17e3\5\u02b2\u015a\2\u17e3\u17e4\5\u02b4\u015b"+
		"\2\u17e4\u17e5\5\u0414\u020b\2\u17e5\u17e6\5\u02ba\u015e\2\u17e6\u17e8"+
		"\3\2\2\2\u17e7\u17df\3\2\2\2\u17e7\u17e2\3\2\2\2\u17e8\u02b1\3\2\2\2\u17e9"+
		"\u17ea\t\13\2\2\u17ea\u02b3\3\2\2\2\u17eb\u17ee\7\u0189\2\2\u17ec\u17ee"+
		"\3\2\2\2\u17ed\u17eb\3\2\2\2\u17ed\u17ec\3\2\2\2\u17ee\u02b5\3\2\2\2\u17ef"+
		"\u17f2\7\u00a1\2\2\u17f0\u17f2\3\2\2\2\u17f1\u17ef\3\2\2\2\u17f1\u17f0"+
		"\3\2\2\2\u17f2\u02b7\3\2\2\2\u17f3\u17f6\7\u00a0\2\2\u17f4\u17f6\3\2\2"+
		"\2\u17f5\u17f3\3\2\2\2\u17f5\u17f4\3\2\2\2\u17f6\u02b9\3\2\2\2\u17f7\u17f8"+
		"\7\r\2\2\u17f8\u17f9\5\u0416\u020c\2\u17f9\u17fa\7\6\2\2\u17fa\u17fd\3"+
		"\2\2\2\u17fb\u17fd\3\2\2\2\u17fc\u17f7\3\2\2\2\u17fc\u17fb\3\2\2\2\u17fd"+
		"\u02bb\3\2\2\2\u17fe\u17ff\7\u0092\2\2\u17ff\u180f\5\u02be\u0160\2\u1800"+
		"\u1801\7\u0092\2\2\u1801\u1802\5\u02b2\u015a\2\u1802\u1803\5\u02b4\u015b"+
		"\2\u1803\u1804\5\u02be\u0160\2\u1804\u180f\3\2\2\2\u1805\u1806\7\u0092"+
		"\2\2\u1806\u1807\7\u0189\2\2\u1807\u180f\5\u02be\u0160\2\u1808\u1809\7"+
		"\u0092\2\2\u1809\u180a\7\r\2\2\u180a\u180b\5\u02c0\u0161\2\u180b\u180c"+
		"\7\6\2\2\u180c\u180d\5\u02be\u0160\2\u180d\u180f\3\2\2\2\u180e\u17fe\3"+
		"\2\2\2\u180e\u1800\3\2\2\2\u180e\u1805\3\2\2\2\u180e\u1808\3\2\2\2\u180f"+
		"\u02bd\3\2\2\2\u1810\u1818\5\u0300\u0181\2\u1811\u1818\5\u02d4\u016b\2"+
		"\u1812\u1818\5\u02ea\u0176\2\u1813\u1818\5\u02de\u0170\2\u1814\u1818\5"+
		"\u02f8\u017d\2\u1815\u1818\5\u00e0q\2\u1816\u1818\5\u02ce\u0168\2\u1817"+
		"\u1810\3\2\2\2\u1817\u1811\3\2\2\2\u1817\u1812\3\2\2\2\u1817\u1813\3\2"+
		"\2\2\u1817\u1814\3\2\2\2\u1817\u1815\3\2\2\2\u1817\u1816\3\2\2\2\u1818"+
		"\u02bf\3\2\2\2\u1819\u181a\b\u0161\1\2\u181a\u181b\5\u02c2\u0162\2\u181b"+
		"\u1821\3\2\2\2\u181c\u181d\f\3\2\2\u181d\u181e\7\b\2\2\u181e\u1820\5\u02c2"+
		"\u0162\2\u181f\u181c\3\2\2\2\u1820\u1823\3\2\2\2\u1821\u181f\3\2\2\2\u1821"+
		"\u1822\3\2\2\2\u1822\u02c1\3\2\2\2\u1823\u1821\3\2\2\2\u1824\u1825\5\u02c4"+
		"\u0163\2\u1825\u1826\5\u02c6\u0164\2\u1826\u02c3\3\2\2\2\u1827\u182b\5"+
		"\u0430\u0219\2\u1828\u182b\5\u02b2\u015a\2\u1829\u182b\7\u0189\2\2\u182a"+
		"\u1827\3\2\2\2\u182a\u1828\3\2\2\2\u182a\u1829\3\2\2\2\u182b\u02c5\3\2"+
		"\2\2\u182c\u1830\5@!\2\u182d\u1830\5\u00f2z\2\u182e\u1830\3\2\2\2\u182f"+
		"\u182c\3\2\2\2\u182f\u182d\3\2\2\2\u182f\u182e\3\2\2\2\u1830\u02c7\3\2"+
		"\2\2\u1831\u1832\7\u0117\2\2\u1832\u1833\5\u0418\u020d\2\u1833\u1834\5"+
		"\u02ca\u0166\2\u1834\u1835\7+\2\2\u1835\u1836\5\u02cc\u0167\2\u1836\u02c9"+
		"\3\2\2\2\u1837\u1838\7\r\2\2\u1838\u1839\5\u03da\u01ee\2\u1839\u183a\7"+
		"\6\2\2\u183a\u183d\3\2\2\2\u183b\u183d\3\2\2\2\u183c\u1837\3\2\2\2\u183c"+
		"\u183b\3\2\2\2\u183d\u02cb\3\2\2\2\u183e\u1843\5\u0300\u0181\2\u183f\u1843"+
		"\5\u02d4\u016b\2\u1840\u1843\5\u02ea\u0176\2\u1841\u1843\5\u02de\u0170"+
		"\2\u1842\u183e\3\2\2\2\u1842\u183f\3\2\2\2\u1842\u1840\3\2\2\2\u1842\u1841"+
		"\3\2\2\2\u1843\u02cd\3\2\2\2\u1844\u1845\7\u0090\2\2\u1845\u1846\5\u0418"+
		"\u020d\2\u1846\u1847\5\u02d0\u0169\2\u1847\u1853\3\2\2\2\u1848\u1849\7"+
		"_\2\2\u1849\u184a\5\u0098M\2\u184a\u184b\7\u015f\2\2\u184b\u184c\5\u00e2"+
		"r\2\u184c\u184d\7+\2\2\u184d\u184e\7\u0090\2\2\u184e\u184f\5\u0418\u020d"+
		"\2\u184f\u1850\5\u02d0\u0169\2\u1850\u1851\5\u00e4s\2\u1851\u1853\3\2"+
		"\2\2\u1852\u1844\3\2\2\2\u1852\u1848\3\2\2\2\u1853\u02cf\3\2\2\2\u1854"+
		"\u1855\7\r\2\2\u1855\u1856\5\u03d4\u01eb\2\u1856\u1857\7\6\2\2\u1857\u185a"+
		"\3\2\2\2\u1858\u185a\3\2\2\2\u1859\u1854\3\2\2\2\u1859\u1858\3\2\2\2\u185a"+
		"\u02d1\3\2\2\2\u185b\u185c\7o\2\2\u185c\u1866\5\u0418\u020d\2\u185d\u185e"+
		"\7o\2\2\u185e\u185f\7\u0117\2\2\u185f\u1866\5\u0418\u020d\2\u1860\u1861"+
		"\7o\2\2\u1861\u1866\7\"\2\2\u1862\u1863\7o\2\2\u1863\u1864\7\u0117\2\2"+
		"\u1864\u1866\7\"\2\2\u1865\u185b\3\2\2\2\u1865\u185d\3\2\2\2\u1865\u1860"+
		"\3\2\2\2\u1865\u1862\3\2\2\2\u1866\u02d3\3\2\2\2\u1867\u1868\5\u0310\u0189"+
		"\2\u1868\u1869\7\u00c1\2\2\u1869\u186a\7\36\2\2\u186a\u186b\5\u0414\u020b"+
		"\2\u186b\u186c\5\u02d6\u016c\2\u186c\u186d\5\u02dc\u016f\2\u186d\u02d5"+
		"\3\2\2\2\u186e\u1877\5\u0300\u0181\2\u186f\u1870\7\r\2\2\u1870\u1871\5"+
		"\u02d8\u016d\2\u1871\u1872\7\6\2\2\u1872\u1873\5\u0300\u0181\2\u1873\u1877"+
		"\3\2\2\2\u1874\u1875\7r\2\2\u1875\u1877\7\u0185\2\2\u1876\u186e\3\2\2"+
		"\2\u1876\u186f\3\2\2\2\u1876\u1874\3\2\2\2\u1877\u02d7\3\2\2\2\u1878\u1879"+
		"\b\u016d\1\2\u1879\u187a\5\u02da\u016e\2\u187a\u1880\3\2\2\2\u187b\u187c"+
		"\f\3\2\2\u187c\u187d\7\b\2\2\u187d\u187f\5\u02da\u016e\2\u187e\u187b\3"+
		"\2\2\2\u187f\u1882\3\2\2\2\u1880\u187e\3\2\2\2\u1880\u1881\3\2\2\2\u1881"+
		"\u02d9\3\2\2\2\u1882\u1880\3\2\2\2\u1883\u1884\5\u0430\u0219\2\u1884\u1885"+
		"\5\u0404\u0203\2\u1885\u02db\3\2\2\2\u1886\u1887\7\u0132\2\2\u1887\u188a"+
		"\5\u040e\u0208\2\u1888\u188a\3\2\2\2\u1889\u1886\3\2\2\2\u1889\u1888\3"+
		"\2\2\2\u188a\u02dd\3\2\2\2\u188b\u188c\5\u0310\u0189\2\u188c\u188d\7w"+
		"\2\2\u188d\u188e\7 \2\2\u188e\u188f\5\u035c\u01af\2\u188f\u1890\5\u02e0"+
		"\u0171\2\u1890\u1891\5\u0362\u01b2\2\u1891\u1892\5\u02dc\u016f\2\u1892"+
		"\u02df\3\2\2\2\u1893\u1894\7\u017f\2\2\u1894\u1897\5\u034a\u01a6\2\u1895"+
		"\u1897\3\2\2\2\u1896\u1893\3\2\2\2\u1896\u1895\3\2\2\2\u1897\u02e1\3\2"+
		"\2\2\u1898\u1899\7\u00e0\2\2\u1899\u189a\5\u0316\u018c\2\u189a\u189b\5"+
		"\u035a\u01ae\2\u189b\u189c\5\u02e4\u0173\2\u189c\u189d\5\u02e8\u0175\2"+
		"\u189d\u02e3\3\2\2\2\u189e\u189f\7\u00b4\2\2\u189f\u18a0\5\u02e6\u0174"+
		"\2\u18a0\u18a1\7\u00e6\2\2\u18a1\u18a4\3\2\2\2\u18a2\u18a4\3\2\2\2\u18a3"+
		"\u189e\3\2\2\2\u18a3\u18a2\3\2\2\2\u18a4\u02e5\3\2\2\2\u18a5\u18a6\7\31"+
		"\2\2\u18a6\u18b6\7\u014a\2\2\u18a7\u18a8\7\u0138\2\2\u18a8\u18b6\7\u014a"+
		"\2\2\u18a9\u18aa\7\u0138\2\2\u18aa\u18b6\7\u008f\2\2\u18ab\u18ac\7\u014a"+
		"\2\2\u18ac\u18ad\7\u017d\2\2\u18ad\u18b6\7\u008f\2\2\u18ae\u18b6\7\u014a"+
		"\2\2\u18af\u18b0\7\u014a\2\2\u18b0\u18b1\7\u0138\2\2\u18b1\u18b6\7\u008f"+
		"\2\2\u18b2\u18b6\7\u008f\2\2\u18b3\u18b4\7\31\2\2\u18b4\u18b6\7\u008f"+
		"\2\2\u18b5\u18a5\3\2\2\2\u18b5\u18a7\3\2\2\2\u18b5\u18a9\3\2\2\2\u18b5"+
		"\u18ab\3\2\2\2\u18b5\u18ae\3\2\2\2\u18b5\u18af\3\2\2\2\u18b5\u18b2\3\2"+
		"\2\2\u18b5\u18b3\3\2\2\2\u18b6\u02e7\3\2\2\2\u18b7\u18ba\7\u00f5\2\2\u18b8"+
		"\u18ba\3\2\2\2\u18b9\u18b7\3\2\2\2\u18b9\u18b8\3\2\2\2\u18ba\u02e9\3\2"+
		"\2\2\u18bb\u18bc\5\u0310\u0189\2\u18bc\u18bd\7\u017d\2\2\u18bd\u18be\5"+
		"\u035c\u01af\2\u18be\u18bf\7\u0148\2\2\u18bf\u18c0\5\u02ec\u0177\2\u18c0"+
		"\u18c1\5\u0348\u01a5\2\u18c1\u18c2\5\u0362\u01b2\2\u18c2\u18c3\5\u02dc"+
		"\u016f\2\u18c3\u02eb\3\2\2\2\u18c4\u18c5\b\u0177\1\2\u18c5\u18c6\5\u02ee"+
		"\u0178\2\u18c6\u18cc\3\2\2\2\u18c7\u18c8\f\3\2\2\u18c8\u18c9\7\b\2\2\u18c9"+
		"\u18cb\5\u02ee\u0178\2\u18ca\u18c7\3\2\2\2\u18cb\u18ce\3\2\2\2\u18cc\u18ca"+
		"\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd\u02ed\3\2\2\2\u18ce\u18cc\3\2\2\2\u18cf"+
		"\u18d2\5\u02f0\u0179\2\u18d0\u18d2\5\u02f2\u017a\2\u18d1\u18cf\3\2\2\2"+
		"\u18d1\u18d0\3\2\2\2\u18d2\u02ef\3\2\2\2\u18d3\u18d4\5\u02f4\u017b\2\u18d4"+
		"\u18d5\7\20\2\2\u18d5\u18d6\5\u0408\u0205\2\u18d6\u02f1\3\2\2\2\u18d7"+
		"\u18d8\7\r\2\2\u18d8\u18d9\5\u02f6\u017c\2\u18d9\u18da\7\6\2\2\u18da\u18db"+
		"\7\20\2\2\u18db\u18dc\5\u040c\u0207\2\u18dc\u02f3\3\2\2\2\u18dd\u18de"+
		"\5\u0430\u0219\2\u18de\u18df\5\u0404\u0203\2\u18df\u02f5\3\2\2\2\u18e0"+
		"\u18e1\b\u017c\1\2\u18e1\u18e2\5\u02f4\u017b\2\u18e2\u18e8\3\2\2\2\u18e3"+
		"\u18e4\f\3\2\2\u18e4\u18e5\7\b\2\2\u18e5\u18e7\5\u02f4\u017b\2\u18e6\u18e3"+
		"\3\2\2\2\u18e7\u18ea\3\2\2\2\u18e8\u18e6\3\2\2\2\u18e8\u18e9\3\2\2\2\u18e9"+
		"\u02f7\3\2\2\2\u18ea\u18e8\3\2\2\2\u18eb\u18ec\7\37\2\2\u18ec\u18ed\5"+
		"\u02fa\u017e\2\u18ed\u18ee\5\u02fc\u017f\2\u18ee\u18ef\7j\2\2\u18ef\u18f0"+
		"\5\u02fe\u0180\2\u18f0\u18f1\7\u009c\2\2\u18f1\u18f2\5\u0300\u0181\2\u18f2"+
		"\u02f9\3\2\2\2\u18f3\u18f4\5\u0418\u020d\2\u18f4\u02fb\3\2\2\2\u18f5\u1901"+
		"\b\u017f\1\2\u18f6\u18f7\f\6\2\2\u18f7\u18f8\7\u00ef\2\2\u18f8\u1900\7"+
		"\u013d\2\2\u18f9\u18fa\f\5\2\2\u18fa\u1900\7\u013d\2\2\u18fb\u18fc\f\4"+
		"\2\2\u18fc\u1900\78\2\2\u18fd\u18fe\f\3\2\2\u18fe\u1900\7\u00c0\2\2\u18ff"+
		"\u18f6\3\2\2\2\u18ff\u18f9\3\2\2\2\u18ff\u18fb\3\2\2\2\u18ff\u18fd\3\2"+
		"\2\2\u1900\u1903\3\2\2\2\u1901\u18ff\3\2\2\2\u1901\u1902\3\2\2\2\u1902"+
		"\u02fd\3\2\2\2\u1903\u1901\3\2\2\2\u1904\u190a\3\2\2\2\u1905\u1906\7\u0191"+
		"\2\2\u1906\u190a\7\u00ac\2\2\u1907\u1908\7\u0192\2\2\u1908\u190a\7\u00ac"+
		"\2\2\u1909\u1904\3\2\2\2\u1909\u1905\3\2\2\2\u1909\u1907\3\2\2\2\u190a"+
		"\u02ff\3\2\2\2\u190b\u190e\5\u0304\u0183\2\u190c\u190e\5\u0302\u0182\2"+
		"\u190d\u190b\3\2\2\2\u190d\u190c\3\2\2\2\u190e\u0301\3\2\2\2\u190f\u1910"+
		"\b\u0182\1\2\u1910\u1911\7\r\2\2\u1911\u1912\5\u0304\u0183\2\u1912\u1913"+
		"\7\6\2\2\u1913\u1919\3\2\2\2\u1914\u1915\7\r\2\2\u1915\u1916\5\u0302\u0182"+
		"\2\u1916\u1917\7\6\2\2\u1917\u1919\3\2\2\2\u1918\u190f\3\2\2\2\u1918\u1914"+
		"\3\2\2\2\u1919\u1931\3\2\2\2\u191a\u191b\f\5\2\2\u191b\u191c\7\u0177\2"+
		"\2\u191c\u191f\5\u0318\u018d\2\u191d\u1920\5\u0302\u0182\2\u191e\u1920"+
		"\5\u0308\u0185\2\u191f\u191d\3\2\2\2\u191f\u191e\3\2\2\2\u1920\u1930\3"+
		"\2\2\2\u1921\u1922\f\4\2\2\u1922\u1923\7\u00c5\2\2\u1923\u1926\5\u0318"+
		"\u018d\2\u1924\u1927\5\u0302\u0182\2\u1925\u1927\5\u0308\u0185\2\u1926"+
		"\u1924\3\2\2\2\u1926\u1925\3\2\2\2\u1927\u1930\3\2\2\2\u1928\u1929\f\3"+
		"\2\2\u1929\u192a\7\u008c\2\2\u192a\u192d\5\u0318\u018d\2\u192b\u192e\5"+
		"\u0302\u0182\2\u192c\u192e\5\u0308\u0185\2\u192d\u192b\3\2\2\2\u192d\u192c"+
		"\3\2\2\2\u192e\u1930\3\2\2\2\u192f\u191a\3\2\2\2\u192f\u1921\3\2\2\2\u192f"+
		"\u1928\3\2\2\2\u1930\u1933\3\2\2\2\u1931\u192f\3\2\2\2\u1931\u1932\3\2"+
		"\2\2\u1932\u0303\3\2\2\2\u1933\u1931\3\2\2\2\u1934\u1956\5\u0308\u0185"+
		"\2\u1935\u1936\5\u0306\u0184\2\u1936\u1937\5\u031e\u0190\2\u1937\u1956"+
		"\3\2\2\2\u1938\u1939\5\u0306\u0184\2\u1939\u193a\5\u031c\u018f\2\u193a"+
		"\u193b\5\u033c\u019f\2\u193b\u193c\5\u0326\u0194\2\u193c\u1956\3\2\2\2"+
		"\u193d\u193e\5\u0306\u0184\2\u193e\u193f\5\u031c\u018f\2\u193f\u1940\5"+
		"\u0324\u0193\2\u1940\u1941\5\u033e\u01a0\2\u1941\u1956\3\2\2\2\u1942\u1943"+
		"\5\u030a\u0186\2\u1943\u1944\5\u0306\u0184\2\u1944\u1956\3\2\2\2\u1945"+
		"\u1946\5\u030a\u0186\2\u1946\u1947\5\u0306\u0184\2\u1947\u1948\5\u031e"+
		"\u0190\2\u1948\u1956\3\2\2\2\u1949\u194a\5\u030a\u0186\2\u194a\u194b\5"+
		"\u0306\u0184\2\u194b\u194c\5\u031c\u018f\2\u194c\u194d\5\u033c\u019f\2"+
		"\u194d\u194e\5\u0326\u0194\2\u194e\u1956\3\2\2\2\u194f\u1950\5\u030a\u0186"+
		"\2\u1950\u1951\5\u0306\u0184\2\u1951\u1952\5\u031c\u018f\2\u1952\u1953"+
		"\5\u0324\u0193\2\u1953\u1954\5\u033e\u01a0\2\u1954\u1956\3\2\2\2\u1955"+
		"\u1934\3\2\2\2\u1955\u1935\3\2\2\2\u1955\u1938\3\2\2\2\u1955\u193d\3\2"+
		"\2\2\u1955\u1942\3\2\2\2\u1955\u1945\3\2\2\2\u1955\u1949\3\2\2\2\u1955"+
		"\u194f\3\2\2\2\u1956\u0305\3\2\2\2\u1957\u195a\5\u0308\u0185\2\u1958\u195a"+
		"\5\u0302\u0182\2\u1959\u1957\3\2\2\2\u1959\u1958\3\2\2\2\u195a\u0307\3"+
		"\2\2\2\u195b\u195c\b\u0185\1\2\u195c\u195d\7\u0141\2\2\u195d\u195e\5\u031a"+
		"\u018e\2\u195e\u195f\5\u040e\u0208\2\u195f\u1960\5\u0312\u018a\2\u1960"+
		"\u1961\5\u0348\u01a5\2\u1961\u1962\5\u0360\u01b1\2\u1962\u1963\5\u0338"+
		"\u019d\2\u1963\u1964\5\u033a\u019e\2\u1964\u1965\5\u03b2\u01da\2\u1965"+
		"\u196a\3\2\2\2\u1966\u196a\5\u0346\u01a4\2\u1967\u1968\7\u015f\2\2\u1968"+
		"\u196a\5\u0358\u01ad\2\u1969\u195b\3\2\2\2\u1969\u1966\3\2\2\2\u1969\u1967"+
		"\3\2\2\2\u196a\u1982\3\2\2\2\u196b\u196c\f\5\2\2\u196c\u196d\7\u0177\2"+
		"\2\u196d\u1970\5\u0318\u018d\2\u196e\u1971\5\u0302\u0182\2\u196f\u1971"+
		"\5\u0308\u0185\2\u1970\u196e\3\2\2\2\u1970\u196f\3\2\2\2\u1971\u1981\3"+
		"\2\2\2\u1972\u1973\f\4\2\2\u1973\u1974\7\u00c5\2\2\u1974\u1977\5\u0318"+
		"\u018d\2\u1975\u1978\5\u0302\u0182\2\u1976\u1978\5\u0308\u0185\2\u1977"+
		"\u1975\3\2\2\2\u1977\u1976\3\2\2\2\u1978\u1981\3\2\2\2\u1979\u197a\f\3"+
		"\2\2\u197a\u197b\7\u008c\2\2\u197b\u197e\5\u0318\u018d\2\u197c\u197f\5"+
		"\u0302\u0182\2\u197d\u197f\5\u0308\u0185\2\u197e\u197c\3\2\2\2\u197e\u197d"+
		"\3\2\2\2\u197f\u1981\3\2\2\2\u1980\u196b\3\2\2\2\u1980\u1972\3\2\2\2\u1980"+
		"\u1979\3\2\2\2\u1981\u1984\3\2\2\2\u1982\u1980\3\2\2\2\u1982\u1983\3\2"+
		"\2\2\u1983\u0309\3\2\2\2\u1984\u1982\3\2\2\2\u1985\u1986\7\u0191\2\2\u1986"+
		"\u198b\5\u030c\u0187\2\u1987\u1988\7\u0191\2\2\u1988\u1989\7\u0125\2\2"+
		"\u1989\u198b\5\u030c\u0187\2\u198a\u1985\3\2\2\2\u198a\u1987\3\2\2\2\u198b"+
		"\u030b\3\2\2\2\u198c\u198d\b\u0187\1\2\u198d\u198e\5\u030e\u0188\2\u198e"+
		"\u1994\3\2\2\2\u198f\u1990\f\3\2\2\u1990\u1991\7\b\2\2\u1991\u1993\5\u030e"+
		"\u0188\2\u1992\u198f\3\2\2\2\u1993\u1996\3\2\2\2\u1994\u1992\3\2\2\2\u1994"+
		"\u1995\3\2\2\2\u1995\u030d\3\2\2\2\u1996\u1994\3\2\2\2\u1997\u1998\5\u0418"+
		"\u020d\2\u1998\u1999\5\u02ba\u015e\2\u1999\u199a\7+\2\2\u199a\u199b\7"+
		"\r\2\2\u199b\u199c\5\u02cc\u0167\2\u199c\u199d\7\6\2\2\u199d\u030f\3\2"+
		"\2\2\u199e\u19a1\5\u030a\u0186\2\u199f\u19a1\3\2\2\2\u19a0\u199e\3\2\2"+
		"\2\u19a0\u199f\3\2\2\2\u19a1\u0311\3\2\2\2\u19a2\u19a3\7\36\2\2\u19a3"+
		"\u19a6\5\u0314\u018b\2\u19a4\u19a6\3\2\2\2\u19a5\u19a2\3\2\2\2\u19a5\u19a4"+
		"\3\2\2\2\u19a6\u0313\3\2\2\2\u19a7\u19a8\7\u0164\2\2\u19a8\u19a9\5\u0316"+
		"\u018c\2\u19a9\u19aa\5\u0414\u020b\2\u19aa\u19cb\3\2\2\2\u19ab\u19ac\7"+
		"\u0162\2\2\u19ac\u19ad\5\u0316\u018c\2\u19ad\u19ae\5\u0414\u020b\2\u19ae"+
		"\u19cb\3\2\2\2\u19af\u19b0\7\u00dc\2\2\u19b0\u19b1\7\u0164\2\2\u19b1\u19b2"+
		"\5\u0316\u018c\2\u19b2\u19b3\5\u0414\u020b\2\u19b3\u19cb\3\2\2\2\u19b4"+
		"\u19b5\7\u00dc\2\2\u19b5\u19b6\7\u0162\2\2\u19b6\u19b7\5\u0316\u018c\2"+
		"\u19b7\u19b8\5\u0414\u020b\2\u19b8\u19cb\3\2\2\2\u19b9\u19ba\7\u00a4\2"+
		"\2\u19ba\u19bb\7\u0164\2\2\u19bb\u19bc\5\u0316\u018c\2\u19bc\u19bd\5\u0414"+
		"\u020b\2\u19bd\u19cb\3\2\2\2\u19be\u19bf\7\u00a4\2\2\u19bf\u19c0\7\u0162"+
		"\2\2\u19c0\u19c1\5\u0316\u018c\2\u19c1\u19c2\5\u0414\u020b\2\u19c2\u19cb"+
		"\3\2\2\2\u19c3\u19c4\7\u017b\2\2\u19c4\u19c5\5\u0316\u018c\2\u19c5\u19c6"+
		"\5\u0414\u020b\2\u19c6\u19cb\3\2\2\2\u19c7\u19c8\7\u015f\2\2\u19c8\u19cb"+
		"\5\u0414\u020b\2\u19c9\u19cb\5\u0414\u020b\2\u19ca\u19a7\3\2\2\2\u19ca"+
		"\u19ab\3\2\2\2\u19ca\u19af\3\2\2\2\u19ca\u19b4\3\2\2\2\u19ca\u19b9\3\2"+
		"\2\2\u19ca\u19be\3\2\2\2\u19ca\u19c3\3\2\2\2\u19ca\u19c7\3\2\2\2\u19ca"+
		"\u19c9\3\2\2\2\u19cb\u0315\3\2\2\2\u19cc\u19cf\7\u015f\2\2\u19cd\u19cf"+
		"\3\2\2\2\u19ce\u19cc\3\2\2\2\u19ce\u19cd\3\2\2\2\u19cf\u0317\3\2\2\2\u19d0"+
		"\u19d4\7\"\2\2\u19d1\u19d4\7~\2\2\u19d2\u19d4\3\2\2\2\u19d3\u19d0\3\2"+
		"\2\2\u19d3\u19d1\3\2\2\2\u19d3\u19d2\3\2\2\2\u19d4\u0319\3\2\2\2\u19d5"+
		"\u19df\7~\2\2\u19d6\u19d7\7~\2\2\u19d7\u19d8\7\u00ff\2\2\u19d8\u19d9\7"+
		"\r\2\2\u19d9\u19da\5\u03d4\u01eb\2\u19da\u19db\7\6\2\2\u19db\u19df\3\2"+
		"\2\2\u19dc\u19df\7\"\2\2\u19dd\u19df\3\2\2\2\u19de\u19d5\3\2\2\2\u19de"+
		"\u19d6\3\2\2\2\u19de\u19dc\3\2\2\2\u19de\u19dd\3\2\2\2\u19df\u031b\3\2"+
		"\2\2\u19e0\u19e3\5\u031e\u0190\2\u19e1\u19e3\3\2\2\2\u19e2\u19e0\3\2\2"+
		"\2\u19e2\u19e1\3\2\2\2\u19e3\u031d\3\2\2\2\u19e4\u19e5\7\u0105\2\2\u19e5"+
		"\u19e6\7<\2\2\u19e6\u19e7\5\u0320\u0191\2\u19e7\u031f\3\2\2\2\u19e8\u19e9"+
		"\b\u0191\1\2\u19e9\u19ea\5\u0322\u0192\2\u19ea\u19f0\3\2\2\2\u19eb\u19ec"+
		"\f\3\2\2\u19ec\u19ed\7\b\2\2\u19ed\u19ef\5\u0322\u0192\2\u19ee\u19eb\3"+
		"\2\2\2\u19ef\u19f2\3\2\2\2\u19f0\u19ee\3\2\2\2\u19f0\u19f1\3\2\2\2\u19f1"+
		"\u0321\3\2\2\2\u19f2\u19f0\3\2\2\2\u19f3\u19f4\5\u039a\u01ce\2\u19f4\u19f5"+
		"\7\u017f\2\2\u19f5\u19f6\5\u03d0\u01e9\2\u19f6\u19f7\5\u020a\u0106\2\u19f7"+
		"\u19fd\3\2\2\2\u19f8\u19f9\5\u039a\u01ce\2\u19f9\u19fa\5\u0208\u0105\2"+
		"\u19fa\u19fb\5\u020a\u0106\2\u19fb\u19fd\3\2\2\2\u19fc\u19f3\3\2\2\2\u19fc"+
		"\u19f8\3\2\2\2\u19fd\u0323\3\2\2\2\u19fe\u19ff\5\u0328\u0195\2\u19ff\u1a00"+
		"\5\u032a\u0196\2\u1a00\u1a07\3\2\2\2\u1a01\u1a02\5\u032a\u0196\2\u1a02"+
		"\u1a03\5\u0328\u0195\2\u1a03\u1a07\3\2\2\2\u1a04\u1a07\5\u0328\u0195\2"+
		"\u1a05\u1a07\5\u032a\u0196\2\u1a06\u19fe\3\2\2\2\u1a06\u1a01\3\2\2\2\u1a06"+
		"\u1a04\3\2\2\2\u1a06\u1a05\3\2\2\2\u1a07\u0325\3\2\2\2\u1a08\u1a0b\5\u0324"+
		"\u0193\2\u1a09\u1a0b\3\2\2\2\u1a0a\u1a08\3\2\2\2\u1a0a\u1a09\3\2\2\2\u1a0b"+
		"\u0327\3\2\2\2\u1a0c\u1a0d\7\u00d9\2\2\u1a0d\u1a1a\5\u032c\u0197\2\u1a0e"+
		"\u1a0f\7\u00d9\2\2\u1a0f\u1a10\5\u032c\u0197\2\u1a10\u1a11\7\b\2\2\u1a11"+
		"\u1a12\5\u032e\u0198\2\u1a12\u1a1a\3\2\2\2\u1a13\u1a14\7\u0098\2\2\u1a14"+
		"\u1a15\5\u0336\u019c\2\u1a15\u1a16\5\u0330\u0199\2\u1a16\u1a17\5\u0334"+
		"\u019b\2\u1a17\u1a18\7\u0100\2\2\u1a18\u1a1a\3\2\2\2\u1a19\u1a0c\3\2\2"+
		"\2\u1a19\u1a0e\3\2\2\2\u1a19\u1a13\3\2\2\2\u1a1a\u0329\3\2\2\2\u1a1b\u1a1c"+
		"\7\u00fd\2\2\u1a1c\u1a22\5\u032e\u0198\2\u1a1d\u1a1e\7\u00fd\2\2\u1a1e"+
		"\u1a1f\5\u0332\u019a\2\u1a1f\u1a20\5\u0334\u019b\2\u1a20\u1a22\3\2\2\2"+
		"\u1a21\u1a1b\3\2\2\2\u1a21\u1a1d\3\2\2\2\u1a22\u032b\3\2\2\2\u1a23\u1a26"+
		"\5\u039a\u01ce\2\u1a24\u1a26\7\"\2\2\u1a25\u1a23\3\2\2\2\u1a25\u1a24\3"+
		"\2\2\2\u1a26\u032d\3\2\2\2\u1a27\u1a28\5\u039a\u01ce\2\u1a28\u032f\3\2"+
		"\2\2\u1a29\u1a30\5\u042e\u0218\2\u1a2a\u1a2b\7\r\2\2\u1a2b\u1a2c\5\u039a"+
		"\u01ce\2\u1a2c\u1a2d\7\6\2\2\u1a2d\u1a30\3\2\2\2\u1a2e\u1a30\3\2\2\2\u1a2f"+
		"\u1a29\3\2\2\2\u1a2f\u1a2a\3\2\2\2\u1a2f\u1a2e\3\2\2\2\u1a30\u0331\3\2"+
		"\2\2\u1a31\u1a32\5\u039e\u01d0\2\u1a32\u0333\3\2\2\2\u1a33\u1a34\t\f\2"+
		"\2\u1a34\u0335\3\2\2\2\u1a35\u1a36\t\r\2\2\u1a36\u0337\3\2\2\2\u1a37\u1a38"+
		"\7\u00a8\2\2\u1a38\u1a39\7<\2\2\u1a39\u1a3c\5\u03d4\u01eb\2\u1a3a\u1a3c"+
		"\3\2\2\2\u1a3b\u1a37\3\2\2\2\u1a3b\u1a3a\3\2\2\2\u1a3c\u0339\3\2\2\2\u1a3d"+
		"\u1a3e\7\u00aa\2\2\u1a3e\u1a41\5\u039a\u01ce\2\u1a3f\u1a41\3\2\2\2\u1a40"+
		"\u1a3d\3\2\2\2\u1a40\u1a3f\3\2\2\2\u1a41\u033b\3\2\2\2\u1a42\u1a47\5\u0340"+
		"\u01a1\2\u1a43\u1a44\7\u009c\2\2\u1a44\u1a45\7\u0121\2\2\u1a45\u1a47\7"+
		"\u0100\2\2\u1a46\u1a42\3\2\2\2\u1a46\u1a43\3\2\2\2\u1a47\u033d\3\2\2\2"+
		"\u1a48\u1a4b\5\u033c\u019f\2\u1a49\u1a4b\3\2\2\2\u1a4a\u1a48\3\2\2\2\u1a4a"+
		"\u1a49\3\2\2\2\u1a4b\u033f\3\2\2\2\u1a4c\u1a4d\b\u01a1\1\2\u1a4d\u1a4e"+
		"\5\u0342\u01a2\2\u1a4e\u1a53\3\2\2\2\u1a4f\u1a50\f\3\2\2\u1a50\u1a52\5"+
		"\u0342\u01a2\2\u1a51\u1a4f\3\2\2\2\u1a52\u1a55\3\2\2\2\u1a53\u1a51\3\2"+
		"\2\2\u1a53\u1a54\3\2\2\2\u1a54\u0341\3\2\2\2\u1a55\u1a53\3\2\2\2\u1a56"+
		"\u1a57\7\u009c\2\2\u1a57\u1a58\7\u017d\2\2\u1a58\u1a59\5\u0344\u01a3\2"+
		"\u1a59\u1a5a\5\u02e8\u0175\2\u1a5a\u1a61\3\2\2\2\u1a5b\u1a5c\7\u009c\2"+
		"\2\u1a5c\u1a5d\7\u014a\2\2\u1a5d\u1a5e\5\u0344\u01a3\2\u1a5e\u1a5f\5\u02e8"+
		"\u0175\2\u1a5f\u1a61\3\2\2\2\u1a60\u1a56\3\2\2\2\u1a60\u1a5b\3\2\2\2\u1a61"+
		"\u0343\3\2\2\2\u1a62\u1a63\7\u00fb\2\2\u1a63\u1a66\5\u0412\u020a\2\u1a64"+
		"\u1a66\3\2\2\2\u1a65\u1a62\3\2\2\2\u1a65\u1a64\3\2\2\2\u1a66\u0345\3\2"+
		"\2\2\u1a67\u1a68\b\u01a4\1\2\u1a68\u1a69\7\u0185\2\2\u1a69\u1a6a\5\u040c"+
		"\u0207\2\u1a6a\u1a70\3\2\2\2\u1a6b\u1a6c\f\3\2\2\u1a6c\u1a6d\7\b\2\2\u1a6d"+
		"\u1a6f\5\u040c\u0207\2\u1a6e\u1a6b\3\2\2\2\u1a6f\u1a72\3\2\2\2\u1a70\u1a6e"+
		"\3\2\2\2\u1a70\u1a71\3\2\2\2\u1a71\u0347\3\2\2\2\u1a72\u1a70\3\2\2\2\u1a73"+
		"\u1a74\7 \2\2\u1a74\u1a77\5\u034a\u01a6\2\u1a75\u1a77\3\2\2\2\u1a76\u1a73"+
		"\3\2\2\2\u1a76\u1a75\3\2\2\2\u1a77\u0349\3\2\2\2\u1a78\u1a79\b\u01a6\1"+
		"\2\u1a79\u1a7a\5\u034c\u01a7\2\u1a7a\u1a80\3\2\2\2\u1a7b\u1a7c\f\3\2\2"+
		"\u1a7c\u1a7d\7\b\2\2\u1a7d\u1a7f\5\u034c\u01a7\2\u1a7e\u1a7b\3\2\2\2\u1a7f"+
		"\u1a82\3\2\2\2\u1a80\u1a7e\3\2\2\2\u1a80\u1a81\3\2\2\2\u1a81\u034b\3\2"+
		"\2\2\u1a82\u1a80\3\2\2\2\u1a83\u1a86\5\u0350\u01a9\2\u1a84\u1a86\5\u034e"+
		"\u01a8\2\u1a85\u1a83\3\2\2\2\u1a85\u1a84\3\2\2\2\u1a86\u034d\3\2\2\2\u1a87"+
		"\u1aa7\5\u0358\u01ad\2\u1a88\u1a89\5\u0358\u01ad\2\u1a89\u1a8a\5\u0352"+
		"\u01aa\2\u1a8a\u1aa7\3\2\2\2\u1a8b\u1aa7\5\u035e\u01b0\2\u1a8c\u1a8d\5"+
		"\u035e\u01b0\2\u1a8d\u1a8e\5\u0352\u01aa\2\u1a8e\u1aa7\3\2\2\2\u1a8f\u1a90"+
		"\5\u035e\u01b0\2\u1a90\u1a91\7+\2\2\u1a91\u1a92\7\r\2\2\u1a92\u1a93\5"+
		"\u0366\u01b4\2\u1a93\u1a94\7\6\2\2\u1a94\u1aa7\3\2\2\2\u1a95\u1a96\5\u035e"+
		"\u01b0\2\u1a96\u1a97\7+\2\2\u1a97\u1a98\5\u0430\u0219\2\u1a98\u1a99\7"+
		"\r\2\2\u1a99\u1a9a\5\u0366\u01b4\2\u1a9a\u1a9b\7\6\2\2\u1a9b\u1aa7\3\2"+
		"\2\2\u1a9c\u1a9d\5\u035e\u01b0\2\u1a9d\u1a9e\5\u0430\u0219\2\u1a9e\u1a9f"+
		"\7\r\2\2\u1a9f\u1aa0\5\u0366\u01b4\2\u1aa0\u1aa1\7\6\2\2\u1aa1\u1aa7\3"+
		"\2\2\2\u1aa2\u1aa7\5\u0302\u0182\2\u1aa3\u1aa4\5\u0302\u0182\2\u1aa4\u1aa5"+
		"\5\u0352\u01aa\2\u1aa5\u1aa7\3\2\2\2\u1aa6\u1a87\3\2\2\2\u1aa6\u1a88\3"+
		"\2\2\2\u1aa6\u1a8b\3\2\2\2\u1aa6\u1a8c\3\2\2\2\u1aa6\u1a8f\3\2\2\2\u1aa6"+
		"\u1a95\3\2\2\2\u1aa6\u1a9c\3\2\2\2\u1aa6\u1aa2\3\2\2\2\u1aa6\u1aa3\3\2"+
		"\2\2\u1aa7\u034f\3\2\2\2\u1aa8\u1aa9\b\u01a9\1\2\u1aa9\u1aaa\7\r\2\2\u1aaa"+
		"\u1aab\5\u0350\u01a9\2\u1aab\u1aad\7\6\2\2\u1aac\u1aae\5\u0352\u01aa\2"+
		"\u1aad\u1aac\3\2\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1acb\3\2\2\2\u1aaf\u1ab0"+
		"\5\u034e\u01a8\2\u1ab0\u1ab1\7`\2\2\u1ab1\u1ab2\7\u00cb\2\2\u1ab2\u1ab3"+
		"\5\u034c\u01a7\2\u1ab3\u1acb\3\2\2\2\u1ab4\u1ab5\5\u034e\u01a8\2\u1ab5"+
		"\u1ab6\5\u0354\u01ab\2\u1ab6\u1ab7\7\u00cb\2\2\u1ab7\u1ab8\5\u034c\u01a7"+
		"\2\u1ab8\u1ab9\5\u0356\u01ac\2\u1ab9\u1acb\3\2\2\2\u1aba\u1abb\5\u034e"+
		"\u01a8\2\u1abb\u1abc\7\u00cb\2\2\u1abc\u1abd\5\u034c\u01a7\2\u1abd\u1abe"+
		"\5\u0356\u01ac\2\u1abe\u1acb\3\2\2\2\u1abf\u1ac0\5\u034e\u01a8\2\u1ac0"+
		"\u1ac1\7\u00ec\2\2\u1ac1\u1ac2\5\u0354\u01ab\2\u1ac2\u1ac3\7\u00cb\2\2"+
		"\u1ac3\u1ac4\5\u034c\u01a7\2\u1ac4\u1acb\3\2\2\2\u1ac5\u1ac6\5\u034e\u01a8"+
		"\2\u1ac6\u1ac7\7\u00ec\2\2\u1ac7\u1ac8\7\u00cb\2\2\u1ac8\u1ac9\5\u034c"+
		"\u01a7\2\u1ac9\u1acb\3\2\2\2\u1aca\u1aa8\3\2\2\2\u1aca\u1aaf\3\2\2\2\u1aca"+
		"\u1ab4\3\2\2\2\u1aca\u1aba\3\2\2\2\u1aca\u1abf\3\2\2\2\u1aca\u1ac5\3\2"+
		"\2\2\u1acb\u1ae7\3\2\2\2\u1acc\u1acd\f\7\2\2\u1acd\u1ace\7`\2\2\u1ace"+
		"\u1acf\7\u00cb\2\2\u1acf\u1ae6\5\u034c\u01a7\2\u1ad0\u1ad1\f\6\2\2\u1ad1"+
		"\u1ad2\5\u0354\u01ab\2\u1ad2\u1ad3\7\u00cb\2\2\u1ad3\u1ad4\5\u034c\u01a7"+
		"\2\u1ad4\u1ad5\5\u0356\u01ac\2\u1ad5\u1ae6\3\2\2\2\u1ad6\u1ad7\f\5\2\2"+
		"\u1ad7\u1ad8\7\u00cb\2\2\u1ad8\u1ad9\5\u034c\u01a7\2\u1ad9\u1ada\5\u0356"+
		"\u01ac\2\u1ada\u1ae6\3\2\2\2\u1adb\u1adc\f\4\2\2\u1adc\u1add\7\u00ec\2"+
		"\2\u1add\u1ade\5\u0354\u01ab\2\u1ade\u1adf\7\u00cb\2\2\u1adf\u1ae0\5\u034c"+
		"\u01a7\2\u1ae0\u1ae6\3\2\2\2\u1ae1\u1ae2\f\3\2\2\u1ae2\u1ae3\7\u00ec\2"+
		"\2\u1ae3\u1ae4\7\u00cb\2\2\u1ae4\u1ae6\5\u034c\u01a7\2\u1ae5\u1acc\3\2"+
		"\2\2\u1ae5\u1ad0\3\2\2\2\u1ae5\u1ad6\3\2\2\2\u1ae5\u1adb\3\2\2\2\u1ae5"+
		"\u1ae1\3\2\2\2\u1ae6\u1ae9\3\2\2\2\u1ae7\u1ae5\3\2\2\2\u1ae7\u1ae8\3\2"+
		"\2\2\u1ae8\u0351\3\2\2\2\u1ae9\u1ae7\3\2\2\2\u1aea\u1aeb\7+\2\2\u1aeb"+
		"\u1aec\5\u0430\u0219\2\u1aec\u1aed\7\r\2\2\u1aed\u1aee\5\u0416\u020c\2"+
		"\u1aee\u1aef\7\6\2\2\u1aef\u1af9\3\2\2\2\u1af0\u1af1\7+\2\2\u1af1\u1af9"+
		"\5\u0430\u0219\2\u1af2\u1af3\5\u0430\u0219\2\u1af3\u1af4\7\r\2\2\u1af4"+
		"\u1af5\5\u0416\u020c\2\u1af5\u1af6\7\6\2\2\u1af6\u1af9\3\2\2\2\u1af7\u1af9"+
		"\5\u0430\u0219\2\u1af8\u1aea\3\2\2\2\u1af8\u1af0\3\2\2\2\u1af8\u1af2\3"+
		"\2\2\2\u1af8\u1af7\3\2\2\2\u1af9\u0353\3\2\2\2\u1afa\u1afc\7\u00a1\2\2"+
		"\u1afb\u1afd\7\u0107\2\2\u1afc\u1afb\3\2\2\2\u1afc\u1afd\3\2\2\2\u1afd"+
		"\u1b08\3\2\2\2\u1afe\u1b00\7\u00d6\2\2\u1aff\u1b01\7\u0107\2\2\u1b00\u1aff"+
		"\3\2\2\2\u1b00\u1b01\3\2\2\2\u1b01\u1b08\3\2\2\2\u1b02\u1b04\7\u0135\2"+
		"\2\u1b03\u1b05\7\u0107\2\2\u1b04\u1b03\3\2\2\2\u1b04\u1b05\3\2\2\2\u1b05"+
		"\u1b08\3\2\2\2\u1b06\u1b08\7\u00bd\2\2\u1b07\u1afa\3\2\2\2\u1b07\u1afe"+
		"\3\2\2\2\u1b07\u1b02\3\2\2\2\u1b07\u1b06\3\2\2\2\u1b08\u0355\3\2\2\2\u1b09"+
		"\u1b0a\7\u017f\2\2\u1b0a\u1b0b\7\r\2\2\u1b0b\u1b0c\5\u0416\u020c\2\u1b0c"+
		"\u1b0d\7\6\2\2\u1b0d\u1b11\3\2\2\2\u1b0e\u1b0f\7\u00ff\2\2\u1b0f\u1b11"+
		"\5\u039a\u01ce\2\u1b10\u1b09\3\2\2\2\u1b10\u1b0e\3\2\2\2\u1b11\u0357\3"+
		"\2\2\2\u1b12\u1b1e\5\u0414\u020b\2\u1b13\u1b14\5\u0414\u020b\2\u1b14\u1b15"+
		"\7\f\2\2\u1b15\u1b1e\3\2\2\2\u1b16\u1b17\7\u0100\2\2\u1b17\u1b1e\5\u0414"+
		"\u020b\2\u1b18\u1b19\7\u0100\2\2\u1b19\u1b1a\7\r\2\2\u1b1a\u1b1b\5\u0414"+
		"\u020b\2\u1b1b\u1b1c\7\6\2\2\u1b1c\u1b1e\3\2\2\2\u1b1d\u1b12\3\2\2\2\u1b1d"+
		"\u1b13\3\2\2\2\u1b1d\u1b16\3\2\2\2\u1b1d\u1b18\3\2\2\2\u1b1e\u0359\3\2"+
		"\2\2\u1b1f\u1b20\b\u01ae\1\2\u1b20\u1b21\5\u0358\u01ad\2\u1b21\u1b27\3"+
		"\2\2\2\u1b22\u1b23\f\3\2\2\u1b23\u1b24\7\b\2\2\u1b24\u1b26\5\u0358\u01ad"+
		"\2\u1b25\u1b22\3\2\2\2\u1b26\u1b29\3\2\2\2\u1b27\u1b25\3\2\2\2\u1b27\u1b28"+
		"\3\2\2\2\u1b28\u035b\3\2\2\2\u1b29\u1b27\3\2\2\2\u1b2a\u1b33\5\u0358\u01ad"+
		"\2\u1b2b\u1b2c\5\u0358\u01ad\2\u1b2c\u1b2d\5\u0430\u0219\2\u1b2d\u1b33"+
		"\3\2\2\2\u1b2e\u1b2f\5\u0358\u01ad\2\u1b2f\u1b30\7+\2\2\u1b30\u1b31\5"+
		"\u0430\u0219\2\u1b31\u1b33\3\2\2\2\u1b32\u1b2a\3\2\2\2\u1b32\u1b2b\3\2"+
		"\2\2\u1b32\u1b2e\3\2\2\2\u1b33\u035d\3\2\2\2\u1b34\u1b35\5\u03a0\u01d1"+
		"\2\u1b35\u035f\3\2\2\2\u1b36\u1b37\7\u018e\2\2\u1b37\u1b3a\5\u039a\u01ce"+
		"\2\u1b38\u1b3a\3\2\2\2\u1b39\u1b36\3\2\2\2\u1b39\u1b38\3\2\2\2\u1b3a\u0361"+
		"\3\2\2\2\u1b3b\u1b3c\7\u018e\2\2\u1b3c\u1b43\5\u039a\u01ce\2\u1b3d\u1b3e"+
		"\7\u018e\2\2\u1b3e\u1b3f\7b\2\2\u1b3f\u1b40\7\u00fb\2\2\u1b40\u1b43\5"+
		"\u02fa\u017e\2\u1b41\u1b43\3\2\2\2\u1b42\u1b3b\3\2\2\2\u1b42\u1b3d\3\2"+
		"\2\2\u1b42\u1b41\3\2\2\2\u1b43\u0363\3\2\2\2\u1b44\u1b47\5\u0366\u01b4"+
		"\2\u1b45\u1b47\3\2\2\2\u1b46\u1b44\3\2\2\2\u1b46\u1b45\3\2\2\2\u1b47\u0365"+
		"\3\2\2\2\u1b48\u1b49\b\u01b4\1\2\u1b49\u1b4a\5\u0368\u01b5\2\u1b4a\u1b50"+
		"\3\2\2\2\u1b4b\u1b4c\f\3\2\2\u1b4c\u1b4d\7\b\2\2\u1b4d\u1b4f\5\u0368\u01b5"+
		"\2\u1b4e\u1b4b\3\2\2\2\u1b4f\u1b52\3\2\2\2\u1b50\u1b4e\3\2\2\2\u1b50\u1b51"+
		"\3\2\2\2\u1b51\u0367\3\2\2\2\u1b52\u1b50\3\2\2\2\u1b53\u1b54\5\u0430\u0219"+
		"\2\u1b54\u1b55\5\u036a\u01b6\2\u1b55\u1b56\5d\63\2\u1b56\u0369\3\2\2\2"+
		"\u1b57\u1b58\5\u036e\u01b8\2\u1b58\u1b59\5\u036c\u01b7\2\u1b59\u1b73\3"+
		"\2\2\2\u1b5a\u1b5b\7\u0149\2\2\u1b5b\u1b5c\5\u036e\u01b8\2\u1b5c\u1b5d"+
		"\5\u036c\u01b7\2\u1b5d\u1b73\3\2\2\2\u1b5e\u1b5f\5\u036e\u01b8\2\u1b5f"+
		"\u1b60\7*\2\2\u1b60\u1b61\7\n\2\2\u1b61\u1b62\5\u0428\u0215\2\u1b62\u1b63"+
		"\7\3\2\2\u1b63\u1b73\3\2\2\2\u1b64\u1b65\7\u0149\2\2\u1b65\u1b66\5\u036e"+
		"\u01b8\2\u1b66\u1b67\7*\2\2\u1b67\u1b68\7\n\2\2\u1b68\u1b69\5\u0428\u0215"+
		"\2\u1b69\u1b6a\7\3\2\2\u1b6a\u1b73\3\2\2\2\u1b6b\u1b6c\5\u036e\u01b8\2"+
		"\u1b6c\u1b6d\7*\2\2\u1b6d\u1b73\3\2\2\2\u1b6e\u1b6f\7\u0149\2\2\u1b6f"+
		"\u1b70\5\u036e\u01b8\2\u1b70\u1b71\7*\2\2\u1b71\u1b73\3\2\2\2\u1b72\u1b57"+
		"\3\2\2\2\u1b72\u1b5a\3\2\2\2\u1b72\u1b5e\3\2\2\2\u1b72\u1b64\3\2\2\2\u1b72"+
		"\u1b6b\3\2\2\2\u1b72\u1b6e\3\2\2\2\u1b73\u036b\3\2\2\2\u1b74\u1b7f\b\u01b7"+
		"\1\2\u1b75\u1b76\f\5\2\2\u1b76\u1b77\7\n\2\2\u1b77\u1b7e\7\3\2\2\u1b78"+
		"\u1b79\f\4\2\2\u1b79\u1b7a\7\n\2\2\u1b7a\u1b7b\5\u0428\u0215\2\u1b7b\u1b7c"+
		"\7\3\2\2\u1b7c\u1b7e\3\2\2\2\u1b7d\u1b75\3\2\2\2\u1b7d\u1b78\3\2\2\2\u1b7e"+
		"\u1b81\3\2\2\2\u1b7f\u1b7d\3\2\2\2\u1b7f\u1b80\3\2\2\2\u1b80\u036d\3\2"+
		"\2\2\u1b81\u1b7f\3\2\2\2\u1b82\u1b91\5\u0372\u01ba\2\u1b83\u1b91\5\u0376"+
		"\u01bc\2\u1b84\u1b91\5\u037a\u01be\2\u1b85\u1b91\5\u0382\u01c2\2\u1b86"+
		"\u1b91\5\u0390\u01c9\2\u1b87\u1b88\5\u0392\u01ca\2\u1b88\u1b89\5\u0396"+
		"\u01cc\2\u1b89\u1b91\3\2\2\2\u1b8a\u1b8b\5\u0392\u01ca\2\u1b8b\u1b8c\7"+
		"\r\2\2\u1b8c\u1b8d\5\u0428\u0215\2\u1b8d\u1b8e\7\6\2\2\u1b8e\u1b8f\5\u0396"+
		"\u01cc\2\u1b8f\u1b91\3\2\2\2\u1b90\u1b82\3\2\2\2\u1b90\u1b83\3\2\2\2\u1b90"+
		"\u1b84\3\2\2\2\u1b90\u1b85\3\2\2\2\u1b90\u1b86\3\2\2\2\u1b90\u1b87\3\2"+
		"\2\2\u1b90\u1b8a\3\2\2\2\u1b91\u036f\3\2\2\2\u1b92\u1b97\5\u0376\u01bc"+
		"\2\u1b93\u1b97\5\u037c\u01bf\2\u1b94\u1b97\5\u0384\u01c3\2\u1b95\u1b97"+
		"\5\u0390\u01c9\2\u1b96\u1b92\3\2\2\2\u1b96\u1b93\3\2\2\2\u1b96\u1b94\3"+
		"\2\2\2\u1b96\u1b95\3\2\2\2\u1b97\u0371\3\2\2\2\u1b98\u1b99\5\u0432\u021a"+
		"\2\u1b99\u1b9a\5\u0374\u01bb\2\u1b9a\u1ba0\3\2\2\2\u1b9b\u1b9c\5\u0432"+
		"\u021a\2\u1b9c\u1b9d\5\u01b2\u00da\2\u1b9d\u1b9e\5\u0374\u01bb\2\u1b9e"+
		"\u1ba0\3\2\2\2\u1b9f\u1b98\3\2\2\2\u1b9f\u1b9b\3\2\2\2\u1ba0\u0373\3\2"+
		"\2\2\u1ba1\u1ba2\7\r\2\2\u1ba2\u1ba3\5\u03d4\u01eb\2\u1ba3\u1ba4\7\6\2"+
		"\2\u1ba4\u1ba7\3\2\2\2\u1ba5\u1ba7\3\2\2\2\u1ba6\u1ba1\3\2\2\2\u1ba6\u1ba5"+
		"\3\2\2\2\u1ba7\u0375\3\2\2\2\u1ba8\u1bb9\7\u00c3\2\2\u1ba9\u1bb9\7\u00c4"+
		"\2\2\u1baa\u1bb9\7\u014e\2\2\u1bab\u1bb9\7\67\2\2\u1bac\u1bb9\7\u0122"+
		"\2\2\u1bad\u1bae\7\u009a\2\2\u1bae\u1bb9\5\u0378\u01bd\2\u1baf\u1bb0\7"+
		"\u0082\2\2\u1bb0\u1bb9\7\u0116\2\2\u1bb1\u1bb2\7q\2\2\u1bb2\u1bb9\5\u0374"+
		"\u01bb\2\u1bb3\u1bb4\7p\2\2\u1bb4\u1bb9\5\u0374\u01bb\2\u1bb5\u1bb6\7"+
		"\u00f9\2\2\u1bb6\u1bb9\5\u0374\u01bb\2\u1bb7\u1bb9\7:\2\2\u1bb8\u1ba8"+
		"\3\2\2\2\u1bb8\u1ba9\3\2\2\2\u1bb8\u1baa\3\2\2\2\u1bb8\u1bab\3\2\2\2\u1bb8"+
		"\u1bac\3\2\2\2\u1bb8\u1bad\3\2\2\2\u1bb8\u1baf\3\2\2\2\u1bb8\u1bb1\3\2"+
		"\2\2\u1bb8\u1bb3\3\2\2\2\u1bb8\u1bb5\3\2\2\2\u1bb8\u1bb7\3\2\2\2\u1bb9"+
		"\u0377\3\2\2\2\u1bba\u1bbb\7\r\2\2\u1bbb\u1bbc\5\u0428\u0215\2\u1bbc\u1bbd"+
		"\7\6\2\2\u1bbd\u1bc0\3\2\2\2\u1bbe\u1bc0\3\2\2\2\u1bbf\u1bba\3\2\2\2\u1bbf"+
		"\u1bbe\3\2\2\2\u1bc0\u0379\3\2\2\2\u1bc1\u1bc4\5\u037e\u01c0\2\u1bc2\u1bc4"+
		"\5\u0380\u01c1\2\u1bc3\u1bc1\3\2\2\2\u1bc3\u1bc2\3\2\2\2\u1bc4\u037b\3"+
		"\2\2\2\u1bc5\u1bc8\5\u037e\u01c0\2\u1bc6\u1bc8\5\u0380\u01c1\2\u1bc7\u1bc5"+
		"\3\2\2\2\u1bc7\u1bc6\3\2\2\2\u1bc8\u037d\3\2\2\2\u1bc9\u1bca\79\2\2\u1bca"+
		"\u1bcb\5\u038c\u01c7\2\u1bcb\u1bcc\7\r\2\2\u1bcc\u1bcd\5\u03d4\u01eb\2"+
		"\u1bcd\u1bce\7\6\2\2\u1bce\u037f\3\2\2\2\u1bcf\u1bd0\79\2\2\u1bd0\u1bd1"+
		"\5\u038c\u01c7\2\u1bd1\u0381\3\2\2\2\u1bd2\u1bd5\5\u0386\u01c4\2\u1bd3"+
		"\u1bd5\5\u0388\u01c5\2\u1bd4\u1bd2\3\2\2\2\u1bd4\u1bd3\3\2\2\2\u1bd5\u0383"+
		"\3\2\2\2\u1bd6\u1bd9\5\u0386\u01c4\2\u1bd7\u1bd9\5\u0388\u01c5\2\u1bd8"+
		"\u1bd6\3\2\2\2\u1bd8\u1bd7\3\2\2\2\u1bd9\u0385\3\2\2\2\u1bda\u1bdb\5\u038a"+
		"\u01c6\2\u1bdb\u1bdc\7\r\2\2\u1bdc\u1bdd\5\u0428\u0215\2\u1bdd\u1bde\7"+
		"\6\2\2\u1bde\u1bdf\5\u038e\u01c8\2\u1bdf\u0387\3\2\2\2\u1be0\u1be1\5\u038a"+
		"\u01c6\2\u1be1\u1be2\5\u038e\u01c8\2\u1be2\u0389\3\2\2\2\u1be3\u1be4\7"+
		"F\2\2\u1be4\u1bf1\5\u038c\u01c7\2\u1be5\u1be6\7E\2\2\u1be6\u1bf1\5\u038c"+
		"\u01c7\2\u1be7\u1bf1\7\u0186\2\2\u1be8\u1be9\7\u00eb\2\2\u1be9\u1bea\7"+
		"F\2\2\u1bea\u1bf1\5\u038c\u01c7\2\u1beb\u1bec\7\u00eb\2\2\u1bec\u1bed"+
		"\7E\2\2\u1bed\u1bf1\5\u038c\u01c7\2\u1bee\u1bef\7\u00ed\2\2\u1bef\u1bf1"+
		"\5\u038c\u01c7\2\u1bf0\u1be3\3\2\2\2\u1bf0\u1be5\3\2\2\2\u1bf0\u1be7\3"+
		"\2\2\2\u1bf0\u1be8\3\2\2\2\u1bf0\u1beb\3\2\2\2\u1bf0\u1bee\3\2\2\2\u1bf1"+
		"\u038b\3\2\2\2\u1bf2\u1bf5\7\u0188\2\2\u1bf3\u1bf5\3\2\2\2\u1bf4\u1bf2"+
		"\3\2\2\2\u1bf4\u1bf3\3\2\2\2\u1bf5\u038d\3\2\2\2\u1bf6\u1bf7\7F\2\2\u1bf7"+
		"\u1bf8\7\u0148\2\2\u1bf8\u1bfb\5\u0430\u0219\2\u1bf9\u1bfb\3\2\2\2\u1bfa"+
		"\u1bf6\3\2\2\2\u1bfa\u1bf9\3\2\2\2\u1bfb\u038f\3\2\2\2\u1bfc\u1bfd\7\u0168"+
		"\2\2\u1bfd\u1bfe\7\r\2\2\u1bfe\u1bff\5\u0428\u0215\2\u1bff\u1c00\7\6\2"+
		"\2\u1c00\u1c01\5\u0394\u01cb\2\u1c01\u1c0d\3\2\2\2\u1c02\u1c03\7\u0168"+
		"\2\2\u1c03\u1c0d\5\u0394\u01cb\2\u1c04\u1c05\7\u0167\2\2\u1c05\u1c06\7"+
		"\r\2\2\u1c06\u1c07\5\u0428\u0215\2\u1c07\u1c08\7\6\2\2\u1c08\u1c09\5\u0394"+
		"\u01cb\2\u1c09\u1c0d\3\2\2\2\u1c0a\u1c0b\7\u0167\2\2\u1c0b\u1c0d\5\u0394"+
		"\u01cb\2\u1c0c\u1bfc\3\2\2\2\u1c0c\u1c02\3\2\2\2\u1c0c\u1c04\3\2\2\2\u1c0c"+
		"\u1c0a\3\2\2\2\u1c0d\u0391\3\2\2\2\u1c0e\u1c0f\7\u00c6\2\2\u1c0f\u0393"+
		"\3\2\2\2\u1c10\u1c11\7\u01af\2\2\u1c11\u1c17\7\u01a2\2\2\u1c12\u1c13\7"+
		"\u0192\2\2\u1c13\u1c14\7\u0167\2\2\u1c14\u1c17\7\u01a2\2\2\u1c15\u1c17"+
		"\3\2\2\2\u1c16\u1c10\3\2\2\2\u1c16\u1c12\3\2\2\2\u1c16\u1c15\3\2\2\2\u1c17"+
		"\u0395\3\2\2\2\u1c18\u1c35\7\u01a0\2\2\u1c19\u1c35\7\u00e7\2\2\u1c1a\u1c35"+
		"\7n\2\2\u1c1b\u1c35\7\u00ad\2\2\u1c1c\u1c35\7\u00e4\2\2\u1c1d\u1c35\5"+
		"\u0398\u01cd\2\u1c1e\u1c1f\7\u01a0\2\2\u1c1f\u1c20\7\u0169\2\2\u1c20\u1c35"+
		"\7\u00e7\2\2\u1c21\u1c22\7n\2\2\u1c22\u1c23\7\u0169\2\2\u1c23\u1c35\7"+
		"\u00ad\2\2\u1c24\u1c25\7n\2\2\u1c25\u1c26\7\u0169\2\2\u1c26\u1c35\7\u00e4"+
		"\2\2\u1c27\u1c28\7n\2\2\u1c28\u1c29\7\u0169\2\2\u1c29\u1c35\5\u0398\u01cd"+
		"\2\u1c2a\u1c2b\7\u00ad\2\2\u1c2b\u1c2c\7\u0169\2\2\u1c2c\u1c35\7\u00e4"+
		"\2\2\u1c2d\u1c2e\7\u00ad\2\2\u1c2e\u1c2f\7\u0169\2\2\u1c2f\u1c35\5\u0398"+
		"\u01cd\2\u1c30\u1c31\7\u00e4\2\2\u1c31\u1c32\7\u0169\2\2\u1c32\u1c35\5"+
		"\u0398\u01cd\2\u1c33\u1c35\3\2\2\2\u1c34\u1c18\3\2\2\2\u1c34\u1c19\3\2"+
		"\2\2\u1c34\u1c1a\3\2\2\2\u1c34\u1c1b\3\2\2\2\u1c34\u1c1c\3\2\2\2\u1c34"+
		"\u1c1d\3\2\2\2\u1c34\u1c1e\3\2\2\2\u1c34\u1c21\3\2\2\2\u1c34\u1c24\3\2"+
		"\2\2\u1c34\u1c27\3\2\2\2\u1c34\u1c2a\3\2\2\2\u1c34\u1c2d\3\2\2\2\u1c34"+
		"\u1c30\3\2\2\2\u1c34\u1c33\3\2\2\2\u1c35\u0397\3\2\2\2\u1c36\u1c3d\7\u013f"+
		"\2\2\u1c37\u1c38\7\u013f\2\2\u1c38\u1c39\7\r\2\2\u1c39\u1c3a\5\u0428\u0215"+
		"\2\u1c3a\u1c3b\7\6\2\2\u1c3b\u1c3d\3\2\2\2\u1c3c\u1c36\3\2\2\2\u1c3c\u1c37"+
		"\3\2\2\2\u1c3d\u0399\3\2\2\2\u1c3e\u1c3f\b\u01ce\1\2\u1c3f\u1c40\7\t\2"+
		"\2\u1c40\u1c50\5\u039a\u01ce;\u1c41\u1c42\7\13\2\2\u1c42\u1c50\5\u039a"+
		"\u01ce:\u1c43\u1c44\5\u03ce\u01e8\2\u1c44\u1c45\5\u039a\u01ce-\u1c45\u1c50"+
		"\3\2\2\2\u1c46\u1c47\7\u00f1\2\2\u1c47\u1c50\5\u039a\u01ce)\u1c48\u1c50"+
		"\5\u039e\u01d0\2\u1c49\u1c4a\5\u03c6\u01e4\2\u1c4a\u1c4b\7\u0109\2\2\u1c4b"+
		"\u1c4c\5\u03c6\u01e4\2\u1c4c\u1c50\3\2\2\2\u1c4d\u1c4e\7\u0178\2\2\u1c4e"+
		"\u1c50\5\u0302\u0182\2\u1c4f\u1c3e\3\2\2\2\u1c4f\u1c41\3\2\2\2\u1c4f\u1c43"+
		"\3\2\2\2\u1c4f\u1c46\3\2\2\2\u1c4f\u1c48\3\2\2\2\u1c4f\u1c49\3\2\2\2\u1c4f"+
		"\u1c4d\3\2\2\2\u1c50\u1d3d\3\2\2\2\u1c51\u1c52\f<\2\2\u1c52\u1c53\7\60"+
		"\2\2\u1c53\u1c54\7\u0167\2\2\u1c54\u1c55\7\u01a2\2\2\u1c55\u1d3c\5\u039a"+
		"\u01ce=\u1c56\u1c57\f9\2\2\u1c57\u1c58\7\t\2\2\u1c58\u1d3c\5\u039a\u01ce"+
		":\u1c59\u1c5a\f8\2\2\u1c5a\u1c5b\7\13\2\2\u1c5b\u1d3c\5\u039a\u01ce9\u1c5c"+
		"\u1c5d\f\67\2\2\u1c5d\u1c5e\7\f\2\2\u1c5e\u1d3c\5\u039a\u01ce8\u1c5f\u1c60"+
		"\f\66\2\2\u1c60\u1c61\7\24\2\2\u1c61\u1d3c\5\u039a\u01ce\67\u1c62\u1c63"+
		"\f\65\2\2\u1c63\u1c64\7\4\2\2\u1c64\u1d3c\5\u039a\u01ce\66\u1c65\u1c66"+
		"\f\64\2\2\u1c66\u1c67\7\5\2\2\u1c67\u1d3c\5\u039a\u01ce\65\u1c68\u1c69"+
		"\f\63\2\2\u1c69\u1c6a\7\17\2\2\u1c6a\u1d3c\5\u039a\u01ce\64\u1c6b\u1c6c"+
		"\f\62\2\2\u1c6c\u1c6d\7\23\2\2\u1c6d\u1d3c\5\u039a\u01ce\63\u1c6e\u1c6f"+
		"\f\61\2\2\u1c6f\u1c70\7\20\2\2\u1c70\u1d3c\5\u039a\u01ce\62\u1c71\u1c72"+
		"\f\60\2\2\u1c72\u1c73\7\25\2\2\u1c73\u1d3c\5\u039a\u01ce\61\u1c74\u1c75"+
		"\f/\2\2\u1c75\u1c76\7\22\2\2\u1c76\u1d3c\5\u039a\u01ce\60\u1c77\u1c78"+
		"\f.\2\2\u1c78\u1c79\5\u03ce\u01e8\2\u1c79\u1c7a\5\u039a\u01ce/\u1c7a\u1d3c"+
		"\3\2\2\2\u1c7b\u1c7c\f+\2\2\u1c7c\u1c7d\7(\2\2\u1c7d\u1d3c\5\u039a\u01ce"+
		",\u1c7e\u1c7f\f*\2\2\u1c7f\u1c80\7\u0104\2\2\u1c80\u1d3c\5";
	private static final String _serializedATNSegment3 =
		"\u039a\u01ce+\u1c81\u1c82\f(\2\2\u1c82\u1c83\7\u00d8\2\2\u1c83\u1d3c\5"+
		"\u039a\u01ce)\u1c84\u1c85\f\'\2\2\u1c85\u1c86\7\u00d8\2\2\u1c86\u1c87"+
		"\5\u039a\u01ce\2\u1c87\u1c88\7\u008b\2\2\u1c88\u1c89\5\u039a\u01ce(\u1c89"+
		"\u1d3c\3\2\2\2\u1c8a\u1c8b\f&\2\2\u1c8b\u1c8c\7\u00f1\2\2\u1c8c\u1c8d"+
		"\7\u00d8\2\2\u1c8d\u1d3c\5\u039a\u01ce\'\u1c8e\u1c8f\f%\2\2\u1c8f\u1c90"+
		"\7\u00f1\2\2\u1c90\u1c91\7\u00d8\2\2\u1c91\u1c92\5\u039a\u01ce\2\u1c92"+
		"\u1c93\7\u008b\2\2\u1c93\u1c94\5\u039a\u01ce&\u1c94\u1d3c\3\2\2\2\u1c95"+
		"\u1c96\f$\2\2\u1c96\u1c97\7\u00b0\2\2\u1c97\u1d3c\5\u039a\u01ce%\u1c98"+
		"\u1c99\f#\2\2\u1c99\u1c9a\7\u00b0\2\2\u1c9a\u1c9b\5\u039a\u01ce\2\u1c9b"+
		"\u1c9c\7\u008b\2\2\u1c9c\u1c9d\5\u039a\u01ce$\u1c9d\u1d3c\3\2\2\2\u1c9e"+
		"\u1c9f\f\"\2\2\u1c9f\u1ca0\7\u00f1\2\2\u1ca0\u1ca1\7\u00b0\2\2\u1ca1\u1d3c"+
		"\5\u039a\u01ce#\u1ca2\u1ca3\f!\2\2\u1ca3\u1ca4\7\u00f1\2\2\u1ca4\u1ca5"+
		"\7\u00b0\2\2\u1ca5\u1ca6\5\u039a\u01ce\2\u1ca6\u1ca7\7\u008b\2\2\u1ca7"+
		"\u1ca8\5\u039a\u01ce\"\u1ca8\u1d3c\3\2\2\2\u1ca9\u1caa\f \2\2\u1caa\u1cab"+
		"\7\u014c\2\2\u1cab\u1cac\7\u0169\2\2\u1cac\u1d3c\5\u039a\u01ce!\u1cad"+
		"\u1cae\f\37\2\2\u1cae\u1caf\7\u014c\2\2\u1caf\u1cb0\7\u0169\2\2\u1cb0"+
		"\u1cb1\5\u039a\u01ce\2\u1cb1\u1cb2\7\u008b\2\2\u1cb2\u1cb3\5\u039a\u01ce"+
		" \u1cb3\u1d3c\3\2\2\2\u1cb4\u1cb5\f\36\2\2\u1cb5\u1cb6\7\u00f1\2\2\u1cb6"+
		"\u1cb7\7\u014c\2\2\u1cb7\u1cb8\7\u0169\2\2\u1cb8\u1d3c\5\u039a\u01ce\37"+
		"\u1cb9\u1cba\f\35\2\2\u1cba\u1cbb\7\u00f1\2\2\u1cbb\u1cbc\7\u014c\2\2"+
		"\u1cbc\u1cbd\7\u0169\2\2\u1cbd\u1cbe\5\u039a\u01ce\2\u1cbe\u1cbf\7\u008b"+
		"\2\2\u1cbf\u1cc0\5\u039a\u01ce\36\u1cc0\u1d3c\3\2\2\2\u1cc1\u1cc2\f\21"+
		"\2\2\u1cc2\u1cc3\7\u00c8\2\2\u1cc3\u1cc4\7~\2\2\u1cc4\u1cc5\7 \2\2\u1cc5"+
		"\u1d3c\5\u039a\u01ce\22\u1cc6\u1cc7\f\20\2\2\u1cc7\u1cc8\7\u00c8\2\2\u1cc8"+
		"\u1cc9\7\u00f1\2\2\u1cc9\u1cca\7~\2\2\u1cca\u1ccb\7 \2\2\u1ccb\u1d3c\5"+
		"\u039a\u01ce\21\u1ccc\u1ccd\f>\2\2\u1ccd\u1cce\7\u01c1\2\2\u1cce\u1d3c"+
		"\5\u036a\u01b6\2\u1ccf\u1cd0\f=\2\2\u1cd0\u1cd1\7N\2\2\u1cd1\u1d3c\5\u01b0"+
		"\u00d9\2\u1cd2\u1cd3\f,\2\2\u1cd3\u1d3c\5\u03ce\u01e8\2\u1cd4\u1cd5\f"+
		"\34\2\2\u1cd5\u1cd6\7\u00c8\2\2\u1cd6\u1d3c\7\u00f6\2\2\u1cd7\u1cd8\f"+
		"\33\2\2\u1cd8\u1d3c\7\u00c9\2\2\u1cd9\u1cda\f\32\2\2\u1cda\u1cdb\7\u00c8"+
		"\2\2\u1cdb\u1cdc\7\u00f1\2\2\u1cdc\u1d3c\7\u00f6\2\2\u1cdd\u1cde\f\31"+
		"\2\2\u1cde\u1d3c\7\u00f4\2\2\u1cdf\u1ce0\f\27\2\2\u1ce0\u1ce1\7\u00c8"+
		"\2\2\u1ce1\u1d3c\7\u016f\2\2\u1ce2\u1ce3\f\26\2\2\u1ce3\u1ce4\7\u00c8"+
		"\2\2\u1ce4\u1ce5\7\u00f1\2\2\u1ce5\u1d3c\7\u016f\2\2\u1ce6\u1ce7\f\25"+
		"\2\2\u1ce7\u1ce8\7\u00c8\2\2\u1ce8\u1d3c\7\u0096\2\2\u1ce9\u1cea\f\24"+
		"\2\2\u1cea\u1ceb\7\u00c8\2\2\u1ceb\u1cec\7\u00f1\2\2\u1cec\u1d3c\7\u0096"+
		"\2\2\u1ced\u1cee\f\23\2\2\u1cee\u1cef\7\u00c8\2\2\u1cef\u1d3c\7\u0179"+
		"\2\2\u1cf0\u1cf1\f\22\2\2\u1cf1\u1cf2\7\u00c8\2\2\u1cf2\u1cf3\7\u00f1"+
		"\2\2\u1cf3\u1d3c\7\u0179\2\2\u1cf4\u1cf5\f\17\2\2\u1cf5\u1cf6\7\u00c8"+
		"\2\2\u1cf6\u1cf7\7\u00fb\2\2\u1cf7\u1cf8\7\r\2\2\u1cf8\u1cf9\5\u03da\u01ee"+
		"\2\u1cf9\u1cfa\7\6\2\2\u1cfa\u1d3c\3\2\2\2\u1cfb\u1cfc\f\16\2\2\u1cfc"+
		"\u1cfd\7\u00c8\2\2\u1cfd\u1cfe\7\u00f1\2\2\u1cfe\u1cff\7\u00fb\2\2\u1cff"+
		"\u1d00\7\r\2\2\u1d00\u1d01\5\u03da\u01ee\2\u1d01\u1d02\7\6\2\2\u1d02\u1d3c"+
		"\3\2\2\2\u1d03\u1d04\f\r\2\2\u1d04\u1d05\7\66\2\2\u1d05\u1d06\5\u0406"+
		"\u0204\2\u1d06\u1d07\5\u039c\u01cf\2\u1d07\u1d08\7(\2\2\u1d08\u1d09\5"+
		"\u039c\u01cf\2\u1d09\u1d3c\3\2\2\2\u1d0a\u1d0b\f\f\2\2\u1d0b\u1d0c\7\u00f1"+
		"\2\2\u1d0c\u1d0d\7\66\2\2\u1d0d\u1d0e\5\u0406\u0204\2\u1d0e\u1d0f\5\u039c"+
		"\u01cf\2\u1d0f\u1d10\7(\2\2\u1d10\u1d11\5\u039c\u01cf\2\u1d11\u1d3c\3"+
		"\2\2\2\u1d12\u1d13\f\13\2\2\u1d13\u1d14\7\66\2\2\u1d14\u1d15\7\u015c\2"+
		"\2\u1d15\u1d16\5\u039c\u01cf\2\u1d16\u1d17\7(\2\2\u1d17\u1d18\5\u039c"+
		"\u01cf\2\u1d18\u1d3c\3\2\2\2\u1d19\u1d1a\f\n\2\2\u1d1a\u1d1b\7\u00f1\2"+
		"\2\u1d1b\u1d1c\7\66\2\2\u1d1c\u1d1d\7\u015c\2\2\u1d1d\u1d1e\5\u039c\u01cf"+
		"\2\u1d1e\u1d1f\7(\2\2\u1d1f\u1d20\5\u039c\u01cf\2\u1d20\u1d3c\3\2\2\2"+
		"\u1d21\u1d22\f\t\2\2\u1d22\u1d23\7\u00b4\2\2\u1d23\u1d3c\5\u03f2\u01fa"+
		"\2\u1d24\u1d25\f\b\2\2\u1d25\u1d26\7\u00f1\2\2\u1d26\u1d27\7\u00b4\2\2"+
		"\u1d27\u1d3c\5\u03f2\u01fa\2\u1d28\u1d29\f\7\2\2\u1d29\u1d2a\5\u03d2\u01ea"+
		"\2\u1d2a\u1d2b\5\u03c8\u01e5\2\u1d2b\u1d2c\5\u0302\u0182\2\u1d2c\u1d3c"+
		"\3\2\2\2\u1d2d\u1d2e\f\6\2\2\u1d2e\u1d2f\5\u03d2\u01ea\2\u1d2f\u1d30\5"+
		"\u03c8\u01e5\2\u1d30\u1d31\7\r\2\2\u1d31\u1d32\5\u039a\u01ce\2\u1d32\u1d33"+
		"\7\6\2\2\u1d33\u1d3c\3\2\2\2\u1d34\u1d35\f\4\2\2\u1d35\u1d36\7\u00c8\2"+
		"\2\u1d36\u1d3c\7\u0080\2\2\u1d37\u1d38\f\3\2\2\u1d38\u1d39\7\u00c8\2\2"+
		"\u1d39\u1d3a\7\u00f1\2\2\u1d3a\u1d3c\7\u0080\2\2\u1d3b\u1c51\3\2\2\2\u1d3b"+
		"\u1c56\3\2\2\2\u1d3b\u1c59\3\2\2\2\u1d3b\u1c5c\3\2\2\2\u1d3b\u1c5f\3\2"+
		"\2\2\u1d3b\u1c62\3\2\2\2\u1d3b\u1c65\3\2\2\2\u1d3b\u1c68\3\2\2\2\u1d3b"+
		"\u1c6b\3\2\2\2\u1d3b\u1c6e\3\2\2\2\u1d3b\u1c71\3\2\2\2\u1d3b\u1c74\3\2"+
		"\2\2\u1d3b\u1c77\3\2\2\2\u1d3b\u1c7b\3\2\2\2\u1d3b\u1c7e\3\2\2\2\u1d3b"+
		"\u1c81\3\2\2\2\u1d3b\u1c84\3\2\2\2\u1d3b\u1c8a\3\2\2\2\u1d3b\u1c8e\3\2"+
		"\2\2\u1d3b\u1c95\3\2\2\2\u1d3b\u1c98\3\2\2\2\u1d3b\u1c9e\3\2\2\2\u1d3b"+
		"\u1ca2\3\2\2\2\u1d3b\u1ca9\3\2\2\2\u1d3b\u1cad\3\2\2\2\u1d3b\u1cb4\3\2"+
		"\2\2\u1d3b\u1cb9\3\2\2\2\u1d3b\u1cc1\3\2\2\2\u1d3b\u1cc6\3\2\2\2\u1d3b"+
		"\u1ccc\3\2\2\2\u1d3b\u1ccf\3\2\2\2\u1d3b\u1cd2\3\2\2\2\u1d3b\u1cd4\3\2"+
		"\2\2\u1d3b\u1cd7\3\2\2\2\u1d3b\u1cd9\3\2\2\2\u1d3b\u1cdd\3\2\2\2\u1d3b"+
		"\u1cdf\3\2\2\2\u1d3b\u1ce2\3\2\2\2\u1d3b\u1ce6\3\2\2\2\u1d3b\u1ce9\3\2"+
		"\2\2\u1d3b\u1ced\3\2\2\2\u1d3b\u1cf0\3\2\2\2\u1d3b\u1cf4\3\2\2\2\u1d3b"+
		"\u1cfb\3\2\2\2\u1d3b\u1d03\3\2\2\2\u1d3b\u1d0a\3\2\2\2\u1d3b\u1d12\3\2"+
		"\2\2\u1d3b\u1d19\3\2\2\2\u1d3b\u1d21\3\2\2\2\u1d3b\u1d24\3\2\2\2\u1d3b"+
		"\u1d28\3\2\2\2\u1d3b\u1d2d\3\2\2\2\u1d3b\u1d34\3\2\2\2\u1d3b\u1d37\3\2"+
		"\2\2\u1d3c\u1d3f\3\2\2\2\u1d3d\u1d3b\3\2\2\2\u1d3d\u1d3e\3\2\2\2\u1d3e"+
		"\u039b\3\2\2\2\u1d3f\u1d3d\3\2\2\2\u1d40\u1d41\b\u01cf\1\2\u1d41\u1d42"+
		"\7\t\2\2\u1d42\u1d4a\5\u039c\u01cf\26\u1d43\u1d44\7\13\2\2\u1d44\u1d4a"+
		"\5\u039c\u01cf\25\u1d45\u1d46\5\u03ce\u01e8\2\u1d46\u1d47\5\u039c\u01cf"+
		"\n\u1d47\u1d4a\3\2\2\2\u1d48\u1d4a\5\u039e\u01d0\2\u1d49\u1d40\3\2\2\2"+
		"\u1d49\u1d43\3\2\2\2\u1d49\u1d45\3\2\2\2\u1d49\u1d48\3\2\2\2\u1d4a\u1d92"+
		"\3\2\2\2\u1d4b\u1d4c\f\24\2\2\u1d4c\u1d4d\7\t\2\2\u1d4d\u1d91\5\u039c"+
		"\u01cf\25\u1d4e\u1d4f\f\23\2\2\u1d4f\u1d50\7\13\2\2\u1d50\u1d91\5\u039c"+
		"\u01cf\24\u1d51\u1d52\f\22\2\2\u1d52\u1d53\7\f\2\2\u1d53\u1d91\5\u039c"+
		"\u01cf\23\u1d54\u1d55\f\21\2\2\u1d55\u1d56\7\24\2\2\u1d56\u1d91\5\u039c"+
		"\u01cf\22\u1d57\u1d58\f\20\2\2\u1d58\u1d59\7\4\2\2\u1d59\u1d91\5\u039c"+
		"\u01cf\21\u1d5a\u1d5b\f\17\2\2\u1d5b\u1d5c\7\5\2\2\u1d5c\u1d91\5\u039c"+
		"\u01cf\20\u1d5d\u1d5e\f\16\2\2\u1d5e\u1d5f\7\17\2\2\u1d5f\u1d91\5\u039c"+
		"\u01cf\17\u1d60\u1d61\f\r\2\2\u1d61\u1d62\7\23\2\2\u1d62\u1d91\5\u039c"+
		"\u01cf\16\u1d63\u1d64\f\f\2\2\u1d64\u1d65\7\20\2\2\u1d65\u1d91\5\u039c"+
		"\u01cf\r\u1d66\u1d67\f\13\2\2\u1d67\u1d68\5\u03ce\u01e8\2\u1d68\u1d69"+
		"\5\u039c\u01cf\f\u1d69\u1d91\3\2\2\2\u1d6a\u1d6b\f\b\2\2\u1d6b\u1d6c\7"+
		"\u00c8\2\2\u1d6c\u1d6d\7~\2\2\u1d6d\u1d6e\7 \2\2\u1d6e\u1d91\5\u039c\u01cf"+
		"\t\u1d6f\u1d70\f\7\2\2\u1d70\u1d71\7\u00c8\2\2\u1d71\u1d72\7\u00f1\2\2"+
		"\u1d72\u1d73\7~\2\2\u1d73\u1d74\7 \2\2\u1d74\u1d91\5\u039c\u01cf\b\u1d75"+
		"\u1d76\f\27\2\2\u1d76\u1d77\7\u01c1\2\2\u1d77\u1d91\5\u036a\u01b6\2\u1d78"+
		"\u1d79\f\t\2\2\u1d79\u1d91\5\u03ce\u01e8\2\u1d7a\u1d7b\f\6\2\2\u1d7b\u1d7c"+
		"\7\u00c8\2\2\u1d7c\u1d7d\7\u00fb\2\2\u1d7d\u1d7e\7\r\2\2\u1d7e\u1d7f\5"+
		"\u03da\u01ee\2\u1d7f\u1d80\7\6\2\2\u1d80\u1d91\3\2\2\2\u1d81\u1d82\f\5"+
		"\2\2\u1d82\u1d83\7\u00c8\2\2\u1d83\u1d84\7\u00f1\2\2\u1d84\u1d85\7\u00fb"+
		"\2\2\u1d85\u1d86\7\r\2\2\u1d86\u1d87\5\u03da\u01ee\2\u1d87\u1d88\7\6\2"+
		"\2\u1d88\u1d91\3\2\2\2\u1d89\u1d8a\f\4\2\2\u1d8a\u1d8b\7\u00c8\2\2\u1d8b"+
		"\u1d91\7\u0080\2\2\u1d8c\u1d8d\f\3\2\2\u1d8d\u1d8e\7\u00c8\2\2\u1d8e\u1d8f"+
		"\7\u00f1\2\2\u1d8f\u1d91\7\u0080\2\2\u1d90\u1d4b\3\2\2\2\u1d90\u1d4e\3"+
		"\2\2\2\u1d90\u1d51\3\2\2\2\u1d90\u1d54\3\2\2\2\u1d90\u1d57\3\2\2\2\u1d90"+
		"\u1d5a\3\2\2\2\u1d90\u1d5d\3\2\2\2\u1d90\u1d60\3\2\2\2\u1d90\u1d63\3\2"+
		"\2\2\u1d90\u1d66\3\2\2\2\u1d90\u1d6a\3\2\2\2\u1d90\u1d6f\3\2\2\2\u1d90"+
		"\u1d75\3\2\2\2\u1d90\u1d78\3\2\2\2\u1d90\u1d7a\3\2\2\2\u1d90\u1d81\3\2"+
		"\2\2\u1d90\u1d89\3\2\2\2\u1d90\u1d8c\3\2\2\2\u1d91\u1d94\3\2\2\2\u1d92"+
		"\u1d90\3\2\2\2\u1d92\u1d93\3\2\2\2\u1d93\u039d\3\2\2\2\u1d94\u1d92\3\2"+
		"\2\2\u1d95\u1da9\5\u03fe\u0200\2\u1d96\u1da9\5\u0426\u0214\2\u1d97\u1d98"+
		"\7\u01ae\2\2\u1d98\u1da9\5\u0404\u0203\2\u1d99\u1d9a\7\r\2\2\u1d9a\u1d9b"+
		"\5\u039a\u01ce\2\u1d9b\u1d9c\7\6\2\2\u1d9c\u1d9d\5\u0404\u0203\2\u1d9d"+
		"\u1da9\3\2\2\2\u1d9e\u1da9\5\u03f4\u01fb\2\u1d9f\u1da9\5\u03a0\u01d1\2"+
		"\u1da0\u1da9\5\u0302\u0182\2\u1da1\u1da2\7\u0091\2\2\u1da2\u1da9\5\u0302"+
		"\u0182\2\u1da3\u1da4\7*\2\2\u1da4\u1da9\5\u0302\u0182\2\u1da5\u1da6\7"+
		"*\2\2\u1da6\u1da9\5\u03dc\u01ef\2\u1da7\u1da9\5\u03c6\u01e4\2\u1da8\u1d95"+
		"\3\2\2\2\u1da8\u1d96\3\2\2\2\u1da8\u1d97\3\2\2\2\u1da8\u1d99\3\2\2\2\u1da8"+
		"\u1d9e\3\2\2\2\u1da8\u1d9f\3\2\2\2\u1da8\u1da0\3\2\2\2\u1da8\u1da1\3\2"+
		"\2\2\u1da8\u1da3\3\2\2\2\u1da8\u1da5\3\2\2\2\u1da8\u1da7\3\2\2\2\u1da9"+
		"\u039f\3\2\2\2\u1daa\u1dab\5\u0424\u0213\2\u1dab\u1dac\7\r\2\2\u1dac\u1dad"+
		"\7\6\2\2\u1dad\u1dae\5\u03b8\u01dd\2\u1dae\u1eac\3\2\2\2\u1daf\u1db0\5"+
		"\u0424\u0213\2\u1db0\u1db1\7\r\2\2\u1db1\u1db2\5\u03d6\u01ec\2\u1db2\u1db3"+
		"\7\6\2\2\u1db3\u1db4\5\u03b8\u01dd\2\u1db4\u1eac\3\2\2\2\u1db5\u1db6\5"+
		"\u0424\u0213\2\u1db6\u1db7\7\r\2\2\u1db7\u1db8\7\u0187\2\2\u1db8\u1db9"+
		"\5\u03d8\u01ed\2\u1db9\u1dba\7\6\2\2\u1dba\u1dbb\5\u03b8\u01dd\2\u1dbb"+
		"\u1eac\3\2\2\2\u1dbc\u1dbd\5\u0424\u0213\2\u1dbd\u1dbe\7\r\2\2\u1dbe\u1dbf"+
		"\5\u03d6\u01ec\2\u1dbf\u1dc0\7\b\2\2\u1dc0\u1dc1\7\u0187\2\2\u1dc1\u1dc2"+
		"\5\u03d8\u01ed\2\u1dc2\u1dc3\7\6\2\2\u1dc3\u1dc4\5\u03b8\u01dd\2\u1dc4"+
		"\u1eac\3\2\2\2\u1dc5\u1dc6\5\u0424\u0213\2\u1dc6\u1dc7\7\r\2\2\u1dc7\u1dc8"+
		"\5\u03d6\u01ec\2\u1dc8\u1dc9\5\u031e\u0190\2\u1dc9\u1dca\7\6\2\2\u1dca"+
		"\u1dcb\5\u03b8\u01dd\2\u1dcb\u1eac\3\2\2\2\u1dcc\u1dcd\5\u0424\u0213\2"+
		"\u1dcd\u1dce\7\r\2\2\u1dce\u1dcf\7\"\2\2\u1dcf\u1dd0\5\u03d6\u01ec\2\u1dd0"+
		"\u1dd1\5\u031c\u018f\2\u1dd1\u1dd2\7\6\2\2\u1dd2\u1dd3\5\u03b8\u01dd\2"+
		"\u1dd3\u1eac\3\2\2\2\u1dd4\u1dd5\5\u0424\u0213\2\u1dd5\u1dd6\7\r\2\2\u1dd6"+
		"\u1dd7\7~\2\2\u1dd7\u1dd8\5\u03d6\u01ec\2\u1dd8\u1dd9\5\u031c\u018f\2"+
		"\u1dd9\u1dda\7\6\2\2\u1dda\u1ddb\5\u03b8\u01dd\2\u1ddb\u1eac\3\2\2\2\u1ddc"+
		"\u1ddd\5\u0424\u0213\2\u1ddd\u1dde\7\r\2\2\u1dde\u1ddf\7\f\2\2\u1ddf\u1de0"+
		"\7\6\2\2\u1de0\u1de1\5\u03b8\u01dd\2\u1de1\u1eac\3\2\2\2\u1de2\u1de3\7"+
		"O\2\2\u1de3\u1de4\7\u009c\2\2\u1de4\u1de5\7\r\2\2\u1de5\u1de6\5\u039a"+
		"\u01ce\2\u1de6\u1de7\7\6\2\2\u1de7\u1eac\3\2\2\2\u1de8\u1eac\7d\2\2\u1de9"+
		"\u1eac\7g\2\2\u1dea\u1deb\7g\2\2\u1deb\u1dec\7\r\2\2\u1dec\u1ded\5\u0428"+
		"\u0215\2\u1ded\u1dee\7\6\2\2\u1dee\u1eac\3\2\2\2\u1def\u1eac\7h\2\2\u1df0"+
		"\u1df1\7h\2\2\u1df1\u1df2\7\r\2\2\u1df2\u1df3\5\u0428\u0215\2\u1df3\u1df4"+
		"\7\6\2\2\u1df4\u1eac\3\2\2\2\u1df5\u1eac\7\u00dd\2\2\u1df6\u1df7\7\u00dd"+
		"\2\2\u1df7\u1df8\7\r\2\2\u1df8\u1df9\5\u0428\u0215\2\u1df9\u1dfa\7\6\2"+
		"\2\u1dfa\u1eac\3\2\2\2\u1dfb\u1eac\7\u00de\2\2\u1dfc\u1dfd\7\u00de\2\2"+
		"\u1dfd\u1dfe\7\r\2\2\u1dfe\u1dff\5\u0428\u0215\2\u1dff\u1e00\7\6\2\2\u1e00"+
		"\u1eac\3\2\2\2\u1e01\u1eac\7e\2\2\u1e02\u1eac\7i\2\2\u1e03\u1eac\7\u0147"+
		"\2\2\u1e04\u1eac\7\u017e\2\2\u1e05\u1eac\7c\2\2\u1e06\u1eac\7f\2\2\u1e07"+
		"\u1e08\7B\2\2\u1e08\u1e09\7\r\2\2\u1e09\u1e0a\5\u039a\u01ce\2\u1e0a\u1e0b"+
		"\7+\2\2\u1e0b\u1e0c\5\u036a\u01b6\2\u1e0c\u1e0d\7\6\2\2\u1e0d\u1eac\3"+
		"\2\2\2\u1e0e\u1e0f\7\u0095\2\2\u1e0f\u1e10\7\r\2\2\u1e10\u1e11\5\u03e0"+
		"\u01f1\2\u1e11\u1e12\7\6\2\2\u1e12\u1eac\3\2\2\2\u1e13\u1e14\7\u010a\2"+
		"\2\u1e14\u1e15\7\r\2\2\u1e15\u1e16\5\u03e4\u01f3\2\u1e16\u1e17\7\6\2\2"+
		"\u1e17\u1eac\3\2\2\2\u1e18\u1e19\7\u0114\2\2\u1e19\u1e1a\7\r\2\2\u1e1a"+
		"\u1e1b\5\u03e8\u01f5\2\u1e1b\u1e1c\7\6\2\2\u1e1c\u1eac\3\2\2\2\u1e1d\u1e1e"+
		"\7\u015b\2\2\u1e1e\u1e1f\7\r\2\2\u1e1f\u1e20\5\u03ea\u01f6\2\u1e20\u1e21"+
		"\7\6\2\2\u1e21\u1eac\3\2\2\2\u1e22\u1e23\7\u016c\2\2\u1e23\u1e24\7\r\2"+
		"\2\u1e24\u1e25\5\u039a\u01ce\2\u1e25\u1e26\7+\2\2\u1e26\u1e27\5\u036a"+
		"\u01b6\2\u1e27\u1e28\7\6\2\2\u1e28\u1eac\3\2\2\2\u1e29\u1e2a\7\u016e\2"+
		"\2\u1e2a\u1e2b\7\r\2\2\u1e2b\u1e2c\7;\2\2\u1e2c\u1e2d\5\u03f0\u01f9\2"+
		"\u1e2d\u1e2e\7\6\2\2\u1e2e\u1eac\3\2\2\2\u1e2f\u1e30\7\u016e\2\2\u1e30"+
		"\u1e31\7\r\2\2\u1e31\u1e32\7\u00d3\2\2\u1e32\u1e33\5\u03f0\u01f9\2\u1e33"+
		"\u1e34\7\6\2\2\u1e34\u1eac\3\2\2\2\u1e35\u1e36\7\u016e\2\2\u1e36\u1e37"+
		"\7\r\2\2\u1e37\u1e38\7\u016a\2\2\u1e38\u1e39\5\u03f0\u01f9\2\u1e39\u1e3a"+
		"\7\6\2\2\u1e3a\u1eac\3\2\2\2\u1e3b\u1e3c\7\u016e\2\2\u1e3c\u1e3d\7\r\2"+
		"\2\u1e3d\u1e3e\5\u03f0\u01f9\2\u1e3e\u1e3f\7\6\2\2\u1e3f\u1eac\3\2\2\2"+
		"\u1e40\u1e41\7\u00f7\2\2\u1e41\u1e42\7\r\2\2\u1e42\u1e43\5\u039a\u01ce"+
		"\2\u1e43\u1e44\7\b\2\2\u1e44\u1e45\5\u039a\u01ce\2\u1e45\u1e46\7\6\2\2"+
		"\u1e46\u1eac\3\2\2\2\u1e47\u1e48\7M\2\2\u1e48\u1e49\7\r\2\2\u1e49\u1e4a"+
		"\5\u03d4\u01eb\2\u1e4a\u1e4b\7\6\2\2\u1e4b\u1eac\3\2\2\2\u1e4c\u1e4d\7"+
		"\u00a7\2\2\u1e4d\u1e4e\7\r\2\2\u1e4e\u1e4f\5\u03d4\u01eb\2\u1e4f\u1e50"+
		"\7\6\2\2\u1e50\u1eac\3\2\2\2\u1e51\u1e52\7\u00d5\2\2\u1e52\u1e53\7\r\2"+
		"\2\u1e53\u1e54\5\u03d4\u01eb\2\u1e54\u1e55\7\6\2\2\u1e55\u1eac\3\2\2\2"+
		"\u1e56\u1e57\7\u0198\2\2\u1e57\u1e58\7\r\2\2\u1e58\u1e59\5\u03d4\u01eb"+
		"\2\u1e59\u1e5a\7\6\2\2\u1e5a\u1eac\3\2\2\2\u1e5b\u1e5c\7\u0199\2\2\u1e5c"+
		"\u1e5d\7\r\2\2\u1e5d\u1e5e\7\u00e9\2\2\u1e5e\u1e5f\5\u0434\u021b\2\u1e5f"+
		"\u1e60\7\6\2\2\u1e60\u1eac\3\2\2\2\u1e61\u1e62\7\u0199\2\2\u1e62\u1e63"+
		"\7\r\2\2\u1e63\u1e64\7\u00e9\2\2\u1e64\u1e65\5\u0434\u021b\2\u1e65\u1e66"+
		"\7\b\2\2\u1e66\u1e67\5\u03a6\u01d4\2\u1e67\u1e68\7\6\2\2\u1e68\u1eac\3"+
		"\2\2\2\u1e69\u1e6a\7\u0199\2\2\u1e6a\u1e6b\7\r\2\2\u1e6b\u1e6c\7\u00e9"+
		"\2\2\u1e6c\u1e6d\5\u0434\u021b\2\u1e6d\u1e6e\7\b\2\2\u1e6e\u1e6f\5\u03d4"+
		"\u01eb\2\u1e6f\u1e70\7\6\2\2\u1e70\u1eac\3\2\2\2\u1e71\u1e72\7\u0199\2"+
		"\2\u1e72\u1e73\7\r\2\2\u1e73\u1e74\7\u00e9\2\2\u1e74\u1e75\5\u0434\u021b"+
		"\2\u1e75\u1e76\7\b\2\2\u1e76\u1e77\5\u03a6\u01d4\2\u1e77\u1e78\7\b\2\2"+
		"\u1e78\u1e79\5\u03d4\u01eb\2\u1e79\u1e7a\7\6\2\2\u1e7a\u1eac\3\2\2\2\u1e7b"+
		"\u1e7c\7\u019a\2\2\u1e7c\u1e7d\7\r\2\2\u1e7d\u1e7e\5\u039e\u01d0\2\u1e7e"+
		"\u1e7f\5\u03b0\u01d9\2\u1e7f\u1e80\7\6\2\2\u1e80\u1eac\3\2\2\2\u1e81\u1e82"+
		"\7\u019b\2\2\u1e82\u1e83\7\r\2\2\u1e83\u1e84\5\u03a8\u01d5\2\u1e84\u1e85"+
		"\7\6\2\2\u1e85\u1eac\3\2\2\2\u1e86\u1e87\7\u019c\2\2\u1e87\u1e88\7\r\2"+
		"\2\u1e88\u1e89\5\u03ac\u01d7\2\u1e89\u1e8a\5\u039a\u01ce\2\u1e8a\u1e8b"+
		"\5\u03ae\u01d8\2\u1e8b\u1e8c\7\6\2\2\u1e8c\u1eac\3\2\2\2\u1e8d\u1e8e\7"+
		"\u019d\2\2\u1e8e\u1e8f\7\r\2\2\u1e8f\u1e90\7\u00e9\2\2\u1e90\u1e91\5\u0434"+
		"\u021b\2\u1e91\u1e92\7\6\2\2\u1e92\u1eac\3\2\2\2\u1e93\u1e94\7\u019d\2"+
		"\2\u1e94\u1e95\7\r\2\2\u1e95\u1e96\7\u00e9\2\2\u1e96\u1e97\5\u0434\u021b"+
		"\2\u1e97\u1e98\7\b\2\2\u1e98\u1e99\5\u039a\u01ce\2\u1e99\u1e9a\7\6\2\2"+
		"\u1e9a\u1eac\3\2\2\2\u1e9b\u1e9c\7\u019e\2\2\u1e9c\u1e9d\7\r\2\2\u1e9d"+
		"\u1e9e\5\u039a\u01ce\2\u1e9e\u1e9f\7\b\2\2\u1e9f\u1ea0\5\u03a2\u01d2\2"+
		"\u1ea0\u1ea1\5\u03a4\u01d3\2\u1ea1\u1ea2\7\6\2\2\u1ea2\u1eac\3\2\2\2\u1ea3"+
		"\u1ea4\7\u019f\2\2\u1ea4\u1ea5\7\r\2\2\u1ea5\u1ea6\5\u03ac\u01d7\2\u1ea6"+
		"\u1ea7\5\u039a\u01ce\2\u1ea7\u1ea8\7+\2\2\u1ea8\u1ea9\5\u036e\u01b8\2"+
		"\u1ea9\u1eaa\7\6\2\2\u1eaa\u1eac\3\2\2\2\u1eab\u1daa\3\2\2\2\u1eab\u1daf"+
		"\3\2\2\2\u1eab\u1db5\3\2\2\2\u1eab\u1dbc\3\2\2\2\u1eab\u1dc5\3\2\2\2\u1eab"+
		"\u1dcc\3\2\2\2\u1eab\u1dd4\3\2\2\2\u1eab\u1ddc\3\2\2\2\u1eab\u1de2\3\2"+
		"\2\2\u1eab\u1de8\3\2\2\2\u1eab\u1de9\3\2\2\2\u1eab\u1dea\3\2\2\2\u1eab"+
		"\u1def\3\2\2\2\u1eab\u1df0\3\2\2\2\u1eab\u1df5\3\2\2\2\u1eab\u1df6\3\2"+
		"\2\2\u1eab\u1dfb\3\2\2\2\u1eab\u1dfc\3\2\2\2\u1eab\u1e01\3\2\2\2\u1eab"+
		"\u1e02\3\2\2\2\u1eab\u1e03\3\2\2\2\u1eab\u1e04\3\2\2\2\u1eab\u1e05\3\2"+
		"\2\2\u1eab\u1e06\3\2\2\2\u1eab\u1e07\3\2\2\2\u1eab\u1e0e\3\2\2\2\u1eab"+
		"\u1e13\3\2\2\2\u1eab\u1e18\3\2\2\2\u1eab\u1e1d\3\2\2\2\u1eab\u1e22\3\2"+
		"\2\2\u1eab\u1e29\3\2\2\2\u1eab\u1e2f\3\2\2\2\u1eab\u1e35\3\2\2\2\u1eab"+
		"\u1e3b\3\2\2\2\u1eab\u1e40\3\2\2\2\u1eab\u1e47\3\2\2\2\u1eab\u1e4c\3\2"+
		"\2\2\u1eab\u1e51\3\2\2\2\u1eab\u1e56\3\2\2\2\u1eab\u1e5b\3\2\2\2\u1eab"+
		"\u1e61\3\2\2\2\u1eab\u1e69\3\2\2\2\u1eab\u1e71\3\2\2\2\u1eab\u1e7b\3\2"+
		"\2\2\u1eab\u1e81\3\2\2\2\u1eab\u1e86\3\2\2\2\u1eab\u1e8d\3\2\2\2\u1eab"+
		"\u1e93\3\2\2\2\u1eab\u1e9b\3\2\2\2\u1eab\u1ea3\3\2\2\2\u1eac\u03a1\3\2"+
		"\2\2\u1ead\u1eae\7\u018a\2\2\u1eae\u1eb3\5\u039a\u01ce\2\u1eaf\u1eb0\7"+
		"\u018a\2\2\u1eb0\u1eb1\7\u00ef\2\2\u1eb1\u1eb3\7\u0184\2\2\u1eb2\u1ead"+
		"\3\2\2\2\u1eb2\u1eaf\3\2\2\2\u1eb3\u03a3\3\2\2\2\u1eb4\u1eb5\7\b\2\2\u1eb5"+
		"\u1eb6\7\u0152\2\2\u1eb6\u1ec0\7\u01a1\2\2\u1eb7\u1eb8\7\b\2\2\u1eb8\u1eb9"+
		"\7\u0152\2\2\u1eb9\u1ec0\7\u00ef\2\2\u1eba\u1ebb\7\b\2\2\u1ebb\u1ebc\7"+
		"\u0152\2\2\u1ebc\u1ebd\7\u00ef\2\2\u1ebd\u1ec0\7\u0184\2\2\u1ebe\u1ec0"+
		"\3\2\2\2\u1ebf\u1eb4\3\2\2\2\u1ebf\u1eb7\3\2\2\2\u1ebf\u1eba\3\2\2\2\u1ebf"+
		"\u1ebe\3\2\2\2\u1ec0\u03a5\3\2\2\2\u1ec1\u1ec2\7\u0197\2\2\u1ec2\u1ec3"+
		"\7\r\2\2\u1ec3\u1ec4\5\u03a8\u01d5\2\u1ec4\u1ec5\7\6\2\2\u1ec5\u03a7\3"+
		"\2\2\2\u1ec6\u1ec7\b\u01d5\1\2\u1ec7\u1ec8\5\u03aa\u01d6\2\u1ec8\u1ece"+
		"\3\2\2\2\u1ec9\u1eca\f\3\2\2\u1eca\u1ecb\7\b\2\2\u1ecb\u1ecd\5\u03aa\u01d6"+
		"\2\u1ecc\u1ec9\3\2\2\2\u1ecd\u1ed0\3\2\2\2\u1ece\u1ecc\3\2\2\2\u1ece\u1ecf"+
		"\3\2\2\2\u1ecf\u03a9\3\2\2\2\u1ed0\u1ece\3\2\2\2\u1ed1\u1ed2\5\u039a\u01ce"+
		"\2\u1ed2\u1ed3\7+\2\2\u1ed3\u1ed4\5\u0434\u021b\2\u1ed4\u1ed7\3\2\2\2"+
		"\u1ed5\u1ed7\5\u039a\u01ce\2\u1ed6\u1ed1\3\2\2\2\u1ed6\u1ed5\3\2\2\2\u1ed7"+
		"\u03ab\3\2\2\2\u1ed8\u1ed9\t\16\2\2\u1ed9\u03ad\3\2\2\2\u1eda\u1edb\7"+
		"\u0119\2\2\u1edb\u1ee0\7\u018f\2\2\u1edc\u1edd\7\u015a\2\2\u1edd\u1ee0"+
		"\7\u018f\2\2\u1ede\u1ee0\3\2\2\2\u1edf\u1eda\3\2\2\2\u1edf\u1edc\3\2\2"+
		"\2\u1edf\u1ede\3\2\2\2\u1ee0\u03af\3\2\2\2\u1ee1\u1ee2\7\u0110\2\2\u1ee2"+
		"\u1ef4\5\u039e\u01d0\2\u1ee3\u1ee4\7\u0110\2\2\u1ee4\u1ee5\5\u039e\u01d0"+
		"\2\u1ee5\u1ee6\7<\2\2\u1ee6\u1ee7\7\u0126\2\2\u1ee7\u1ef4\3\2\2\2\u1ee8"+
		"\u1ee9\7\u0110\2\2\u1ee9\u1eea\7<\2\2\u1eea\u1eeb\7\u0126\2\2\u1eeb\u1ef4"+
		"\5\u039e\u01d0\2\u1eec\u1eed\7\u0110\2\2\u1eed\u1eee\7<\2\2\u1eee\u1eef"+
		"\7\u0126\2\2\u1eef\u1ef0\5\u039e\u01d0\2\u1ef0\u1ef1\7<\2\2\u1ef1\u1ef2"+
		"\7\u0126\2\2\u1ef2\u1ef4\3\2\2\2\u1ef3\u1ee1\3\2\2\2\u1ef3\u1ee3\3\2\2"+
		"\2\u1ef3\u1ee8\3\2\2\2\u1ef3\u1eec\3\2\2\2\u1ef4\u03b1\3\2\2\2\u1ef5\u1ef6"+
		"\7\u0190\2\2\u1ef6\u1ef9\5\u03b4\u01db\2\u1ef7\u1ef9\3\2\2\2\u1ef8\u1ef5"+
		"\3\2\2\2\u1ef8\u1ef7\3\2\2\2\u1ef9\u03b3\3\2\2\2\u1efa\u1efb\b\u01db\1"+
		"\2\u1efb\u1efc\5\u03b6\u01dc\2\u1efc\u1f02\3\2\2\2\u1efd\u1efe\f\3\2\2"+
		"\u1efe\u1eff\7\b\2\2\u1eff\u1f01\5\u03b6\u01dc\2\u1f00\u1efd\3\2\2\2\u1f01"+
		"\u1f04\3\2\2\2\u1f02\u1f00\3\2\2\2\u1f02\u1f03\3\2\2\2\u1f03\u03b5\3\2"+
		"\2\2\u1f04\u1f02\3\2\2\2\u1f05\u1f06\5\u0430\u0219\2\u1f06\u1f07\7+\2"+
		"\2\u1f07\u1f08\5\u03ba\u01de\2\u1f08\u03b7\3\2\2\2\u1f09\u1f0a\7\u0108"+
		"\2\2\u1f0a\u1f0f\5\u03ba\u01de\2\u1f0b\u1f0c\7\u0108\2\2\u1f0c\u1f0f\5"+
		"\u0430\u0219\2\u1f0d\u1f0f\3\2\2\2\u1f0e\u1f09\3\2\2\2\u1f0e\u1f0b\3\2"+
		"\2\2\u1f0e\u1f0d\3\2\2\2\u1f0f\u03b9\3\2\2\2\u1f10\u1f11\7\r\2\2\u1f11"+
		"\u1f12\5\u03bc\u01df\2\u1f12\u1f13\5\u03be\u01e0\2\u1f13\u1f14\5\u031c"+
		"\u018f\2\u1f14\u1f15\5\u03c0\u01e1\2\u1f15\u1f16\7\6\2\2\u1f16\u03bb\3"+
		"\2\2\2\u1f17\u1f1a\5\u0430\u0219\2\u1f18\u1f1a\3\2\2\2\u1f19\u1f17\3\2"+
		"\2\2\u1f19\u1f18\3\2\2\2\u1f1a\u03bd\3\2\2\2\u1f1b\u1f1c\7\u010f\2\2\u1f1c"+
		"\u1f1d\7<\2\2\u1f1d\u1f20\5\u03d4\u01eb\2\u1f1e\u1f20\3\2\2\2\u1f1f\u1f1b"+
		"\3\2\2\2\u1f1f\u1f1e\3\2\2\2\u1f20\u03bf\3\2\2\2\u1f21\u1f22\7\u0120\2"+
		"\2\u1f22\u1f27\5\u03c2\u01e2\2\u1f23\u1f24\7\u0139\2\2\u1f24\u1f27\5\u03c2"+
		"\u01e2\2\u1f25\u1f27\3\2\2\2\u1f26\u1f21\3\2\2\2\u1f26\u1f23\3\2\2\2\u1f26"+
		"\u1f25\3\2\2\2\u1f27\u03c1\3\2\2\2\u1f28\u1f2f\5\u03c4\u01e3\2\u1f29\u1f2a"+
		"\7\66\2\2\u1f2a\u1f2b\5\u03c4\u01e3\2\u1f2b\u1f2c\7(\2\2\u1f2c\u1f2d\5"+
		"\u03c4\u01e3\2\u1f2d\u1f2f\3\2\2\2\u1f2e\u1f28\3\2\2\2\u1f2e\u1f29\3\2"+
		"\2\2\u1f2f\u03c3\3\2\2\2\u1f30\u1f31\7\u0174\2\2\u1f31\u1f3d\7\u0115\2"+
		"\2\u1f32\u1f33\7\u0174\2\2\u1f33\u1f3d\7\u009b\2\2\u1f34\u1f35\7b\2\2"+
		"\u1f35\u1f3d\7\u0138\2\2\u1f36\u1f37\5\u039a\u01ce\2\u1f37\u1f38\7\u0115"+
		"\2\2\u1f38\u1f3d\3\2\2\2\u1f39\u1f3a\5\u039a\u01ce\2\u1f3a\u1f3b\7\u009b"+
		"\2\2\u1f3b\u1f3d\3\2\2\2\u1f3c\u1f30\3\2\2\2\u1f3c\u1f32\3\2\2\2\u1f3c"+
		"\u1f34\3\2\2\2\u1f3c\u1f36\3\2\2\2\u1f3c\u1f39\3\2\2\2\u1f3d\u03c5\3\2"+
		"\2\2\u1f3e\u1f3f\7\u0138\2\2\u1f3f\u1f40\7\r\2\2\u1f40\u1f41\5\u03d4\u01eb"+
		"\2\u1f41\u1f42\7\6\2\2\u1f42\u1f4d\3\2\2\2\u1f43\u1f44\7\u0138\2\2\u1f44"+
		"\u1f45\7\r\2\2\u1f45\u1f4d\7\6\2\2\u1f46\u1f47\7\r\2\2\u1f47\u1f48\5\u03d4"+
		"\u01eb\2\u1f48\u1f49\7\b\2\2\u1f49\u1f4a\5\u039a\u01ce\2\u1f4a\u1f4b\7"+
		"\6\2\2\u1f4b\u1f4d\3\2\2\2\u1f4c\u1f3e\3\2\2\2\u1f4c\u1f43\3\2\2\2\u1f4c"+
		"\u1f46\3\2\2\2\u1f4d\u03c7\3\2\2\2\u1f4e\u1f4f\t\17\2\2\u1f4f\u03c9\3"+
		"\2\2\2\u1f50\u1f53\7\26\2\2\u1f51\u1f53\5\u03cc\u01e7\2\u1f52\u1f50\3"+
		"\2\2\2\u1f52\u1f51\3\2\2\2\u1f53\u03cb\3\2\2\2\u1f54\u1f55\t\20\2\2\u1f55"+
		"\u03cd\3\2\2\2\u1f56\u1f5d\7\26\2\2\u1f57\u1f58\7\u0101\2\2\u1f58\u1f59"+
		"\7\r\2\2\u1f59\u1f5a\5\u0240\u0121\2\u1f5a\u1f5b\7\6\2\2\u1f5b\u1f5d\3"+
		"\2\2\2\u1f5c\u1f56\3\2\2\2\u1f5c\u1f57\3\2\2\2\u1f5d\u03cf\3\2\2\2\u1f5e"+
		"\u1f65\5\u03ca\u01e6\2\u1f5f\u1f60\7\u0101\2\2\u1f60\u1f61\7\r\2\2\u1f61"+
		"\u1f62\5\u0240\u0121\2\u1f62\u1f63\7\6\2\2\u1f63\u1f65\3\2\2\2\u1f64\u1f5e"+
		"\3\2\2\2\u1f64\u1f5f\3\2\2\2\u1f65\u03d1\3\2\2\2\u1f66\u1f73\5\u03ca\u01e6"+
		"\2\u1f67\u1f68\7\u0101\2\2\u1f68\u1f69\7\r\2\2\u1f69\u1f6a\5\u0240\u0121"+
		"\2\u1f6a\u1f6b\7\6\2\2\u1f6b\u1f73\3\2\2\2\u1f6c\u1f73\7\u00d8\2\2\u1f6d"+
		"\u1f6e\7\u00f1\2\2\u1f6e\u1f73\7\u00d8\2\2\u1f6f\u1f73\7\u00b0\2\2\u1f70"+
		"\u1f71\7\u00f1\2\2\u1f71\u1f73\7\u00b0\2\2\u1f72\u1f66\3\2\2\2\u1f72\u1f67"+
		"\3\2\2\2\u1f72\u1f6c\3\2\2\2\u1f72\u1f6d\3\2\2\2\u1f72\u1f6f\3\2\2\2\u1f72"+
		"\u1f70\3\2\2\2\u1f73\u03d3\3\2\2\2\u1f74\u1f75\b\u01eb\1\2\u1f75\u1f76"+
		"\5\u039a\u01ce\2\u1f76\u1f7c\3\2\2\2\u1f77\u1f78\f\3\2\2\u1f78\u1f79\7"+
		"\b\2\2\u1f79\u1f7b\5\u039a\u01ce\2\u1f7a\u1f77\3\2\2\2\u1f7b\u1f7e\3\2"+
		"\2\2\u1f7c\u1f7a\3\2\2\2\u1f7c\u1f7d\3\2\2\2\u1f7d\u03d5\3\2\2\2\u1f7e"+
		"\u1f7c\3\2\2\2\u1f7f\u1f80\b\u01ec\1\2\u1f80\u1f81\5\u03d8\u01ed\2\u1f81"+
		"\u1f87\3\2\2\2\u1f82\u1f83\f\3\2\2\u1f83\u1f84\7\b\2\2\u1f84\u1f86\5\u03d8"+
		"\u01ed\2\u1f85\u1f82\3\2\2\2\u1f86\u1f89\3\2\2\2\u1f87\u1f85\3\2\2\2\u1f87"+
		"\u1f88\3\2\2\2\u1f88\u03d7\3\2\2\2\u1f89\u1f87\3\2\2\2\u1f8a\u1f90\5\u039a"+
		"\u01ce\2\u1f8b\u1f8c\5\u021c\u010f\2\u1f8c\u1f8d\7\u01c3\2\2\u1f8d\u1f8e"+
		"\5\u039a\u01ce\2\u1f8e\u1f90\3\2\2\2\u1f8f\u1f8a\3\2\2\2\u1f8f\u1f8b\3"+
		"\2\2\2\u1f90\u03d9\3\2\2\2\u1f91\u1f92\b\u01ee\1\2\u1f92\u1f93\5\u036a"+
		"\u01b6\2\u1f93\u1f99\3\2\2\2\u1f94\u1f95\f\3\2\2\u1f95\u1f96\7\b\2\2\u1f96"+
		"\u1f98\5\u036a\u01b6\2\u1f97\u1f94\3\2\2\2\u1f98\u1f9b\3\2\2\2\u1f99\u1f97"+
		"\3\2\2\2\u1f99\u1f9a\3\2\2\2\u1f9a\u03db\3\2\2\2\u1f9b\u1f99\3\2\2\2\u1f9c"+
		"\u1f9d\7\n\2\2\u1f9d\u1f9e\5\u03d4\u01eb\2\u1f9e\u1f9f\7\3\2\2\u1f9f\u1fa7"+
		"\3\2\2\2\u1fa0\u1fa1\7\n\2\2\u1fa1\u1fa2\5\u03de\u01f0\2\u1fa2\u1fa3\7"+
		"\3\2\2\u1fa3\u1fa7\3\2\2\2\u1fa4\u1fa5\7\n\2\2\u1fa5\u1fa7\7\3\2\2\u1fa6"+
		"\u1f9c\3\2\2\2\u1fa6\u1fa0\3\2\2\2\u1fa6\u1fa4\3\2\2\2\u1fa7\u03dd\3\2"+
		"\2\2\u1fa8\u1fa9\b\u01f0\1\2\u1fa9\u1faa\5\u03dc\u01ef\2\u1faa\u1fb0\3"+
		"\2\2\2\u1fab\u1fac\f\3\2\2\u1fac\u1fad\7\b\2\2\u1fad\u1faf\5\u03dc\u01ef"+
		"\2\u1fae\u1fab\3\2\2\2\u1faf\u1fb2\3\2\2\2\u1fb0\u1fae\3\2\2\2\u1fb0\u1fb1"+
		"\3\2\2\2\u1fb1\u03df\3\2\2\2\u1fb2\u1fb0\3\2\2\2\u1fb3\u1fb4\5\u03e2\u01f2"+
		"\2\u1fb4\u1fb5\7 \2\2\u1fb5\u1fb6\5\u039a\u01ce\2\u1fb6\u1fb9\3\2\2\2"+
		"\u1fb7\u1fb9\3\2\2\2\u1fb8\u1fb3\3\2\2\2\u1fb8\u1fb7\3\2\2\2\u1fb9\u03e1"+
		"\3\2\2\2\u1fba\u1fc3\7\u01a6\2\2\u1fbb\u1fc3\7\u01a0\2\2\u1fbc\u1fc3\7"+
		"\u00e7\2\2\u1fbd\u1fc3\7n\2\2\u1fbe\u1fc3\7\u00ad\2\2\u1fbf\u1fc3\7\u00e4"+
		"\2\2\u1fc0\u1fc3\7\u013f\2\2\u1fc1\u1fc3\5\u042a\u0216\2\u1fc2\u1fba\3"+
		"\2\2\2\u1fc2\u1fbb\3\2\2\2\u1fc2\u1fbc\3\2\2\2\u1fc2\u1fbd\3\2\2\2\u1fc2"+
		"\u1fbe\3\2\2\2\u1fc2\u1fbf\3\2\2\2\u1fc2\u1fc0\3\2\2\2\u1fc2\u1fc1\3\2"+
		"\2\2\u1fc3\u03e3\3\2\2\2\u1fc4\u1fc5\5\u039a\u01ce\2\u1fc5\u1fc6\5\u03e6"+
		"\u01f4\2\u1fc6\u1fc7\5\u03ec\u01f7\2\u1fc7\u1fc8\5\u03ee\u01f8\2\u1fc8"+
		"\u1fce\3\2\2\2\u1fc9\u1fca\5\u039a\u01ce\2\u1fca\u1fcb\5\u03e6\u01f4\2"+
		"\u1fcb\u1fcc\5\u03ec\u01f7\2\u1fcc\u1fce\3\2\2\2\u1fcd\u1fc4\3\2\2\2\u1fcd"+
		"\u1fc9\3\2\2\2\u1fce\u03e5\3\2\2\2\u1fcf\u1fd0\7\u0112\2\2\u1fd0\u1fd1"+
		"\5\u039a\u01ce\2\u1fd1\u03e7\3\2\2\2\u1fd2\u1fd3\5\u039c\u01cf\2\u1fd3"+
		"\u1fd4\7\u00b4\2\2\u1fd4\u1fd5\5\u039c\u01cf\2\u1fd5\u1fd8\3\2\2\2\u1fd6"+
		"\u1fd8\3\2\2\2\u1fd7\u1fd2\3\2\2\2\u1fd7\u1fd6\3\2\2\2\u1fd8\u03e9\3\2"+
		"\2\2\u1fd9\u1fda\5\u039a\u01ce\2\u1fda\u1fdb\5\u03ec\u01f7\2\u1fdb\u1fdc"+
		"\5\u03ee\u01f8\2\u1fdc\u1fea\3\2\2\2\u1fdd\u1fde\5\u039a\u01ce\2\u1fde"+
		"\u1fdf\5\u03ee\u01f8\2\u1fdf\u1fe0\5\u03ec\u01f7\2\u1fe0\u1fea\3\2\2\2"+
		"\u1fe1\u1fe2\5\u039a\u01ce\2\u1fe2\u1fe3\5\u03ec\u01f7\2\u1fe3\u1fea\3"+
		"\2\2\2\u1fe4\u1fe5\5\u039a\u01ce\2\u1fe5\u1fe6\5\u03ee\u01f8\2\u1fe6\u1fea"+
		"\3\2\2\2\u1fe7\u1fea\5\u03d4\u01eb\2\u1fe8\u1fea\3\2\2\2\u1fe9\u1fd9\3"+
		"\2\2\2\u1fe9\u1fdd\3\2\2\2\u1fe9\u1fe1\3\2\2\2\u1fe9\u1fe4\3\2\2\2\u1fe9"+
		"\u1fe7\3\2\2\2\u1fe9\u1fe8\3\2\2\2\u1fea\u03eb\3\2\2\2\u1feb\u1fec\7 "+
		"\2\2\u1fec\u1fed\5\u039a\u01ce\2\u1fed\u03ed\3\2\2\2\u1fee\u1fef\7\u009c"+
		"\2\2\u1fef\u1ff0\5\u039a\u01ce\2\u1ff0\u03ef\3\2\2\2\u1ff1\u1ff2\5\u039a"+
		"\u01ce\2\u1ff2\u1ff3\7 \2\2\u1ff3\u1ff4\5\u03d4\u01eb\2\u1ff4\u1ff9\3"+
		"\2\2\2\u1ff5\u1ff6\7 \2\2\u1ff6\u1ff9\5\u03d4\u01eb\2\u1ff7\u1ff9\5\u03d4"+
		"\u01eb\2\u1ff8\u1ff1\3\2\2\2\u1ff8\u1ff5\3\2\2\2\u1ff8\u1ff7\3\2\2\2\u1ff9"+
		"\u03f1\3\2\2\2\u1ffa\u2000\5\u0302\u0182\2\u1ffb\u1ffc\7\r\2\2\u1ffc\u1ffd"+
		"\5\u03d4\u01eb\2\u1ffd\u1ffe\7\6\2\2\u1ffe\u2000\3\2\2\2\u1fff\u1ffa\3"+
		"\2\2\2\u1fff\u1ffb\3\2\2\2\u2000\u03f3\3\2\2\2\u2001\u2002\7A\2\2\u2002"+
		"\u2003\5\u03fc\u01ff\2\u2003\u2004\5\u03f6\u01fc\2\u2004\u2005\5\u03fa"+
		"\u01fe\2\u2005\u2006\7\u0089\2\2\u2006\u03f5\3\2\2\2\u2007\u2008\b\u01fc"+
		"\1\2\u2008\u2009\5\u03f8\u01fd\2\u2009\u200e\3\2\2\2\u200a\u200b\f\3\2"+
		"\2\u200b\u200d\5\u03f8\u01fd\2\u200c\u200a\3\2\2\2\u200d\u2010\3\2\2\2"+
		"\u200e\u200c\3\2\2\2\u200e\u200f\3\2\2\2\u200f\u03f7\3\2\2\2\u2010\u200e"+
		"\3\2\2\2\u2011\u2012\7\u018d\2\2\u2012\u2013\5\u039a\u01ce\2\u2013\u2014"+
		"\7\u0166\2\2\u2014\u2015\5\u039a\u01ce\2\u2015\u03f9\3\2\2\2\u2016\u2017"+
		"\7\u0085\2\2\u2017\u201a\5\u039a\u01ce\2\u2018\u201a\3\2\2\2\u2019\u2016"+
		"\3\2\2\2\u2019\u2018\3\2\2\2\u201a\u03fb\3\2\2\2\u201b\u201e\5\u039a\u01ce"+
		"\2\u201c\u201e\3\2\2\2\u201d\u201b\3\2\2\2\u201d\u201c\3\2\2\2\u201e\u03fd"+
		"\3\2\2\2\u201f\u2024\5\u0430\u0219\2\u2020\u2021\5\u0430\u0219\2\u2021"+
		"\u2022\5\u0402\u0202\2\u2022\u2024\3\2\2\2\u2023\u201f\3\2\2\2\u2023\u2020"+
		"\3\2\2\2\u2024\u03ff\3\2\2\2\u2025\u2026\7\7\2\2\u2026\u2034\5\u041e\u0210"+
		"\2\u2027\u2028\7\7\2\2\u2028\u2034\7\f\2\2\u2029\u202a\7\n\2\2\u202a\u202b"+
		"\5\u039a\u01ce\2\u202b\u202c\7\3\2\2\u202c\u2034\3\2\2\2\u202d\u202e\7"+
		"\n\2\2\u202e\u202f\5\u039a\u01ce\2\u202f\u2030\7\16\2\2\u2030\u2031\5"+
		"\u039a\u01ce\2\u2031\u2032\7\3\2\2\u2032\u2034\3\2\2\2\u2033\u2025\3\2"+
		"\2\2\u2033\u2027\3\2\2\2\u2033\u2029\3\2\2\2\u2033\u202d\3\2\2\2\u2034"+
		"\u0401\3\2\2\2\u2035\u2036\b\u0202\1\2\u2036\u2037\5\u0400\u0201\2\u2037"+
		"\u203c\3\2\2\2\u2038\u2039\f\3\2\2\u2039\u203b\5\u0400\u0201\2\u203a\u2038"+
		"\3\2\2\2\u203b\u203e\3\2\2\2\u203c\u203a\3\2\2\2\u203c\u203d\3\2\2\2\u203d"+
		"\u0403\3\2\2\2\u203e\u203c\3\2\2\2\u203f\u2044\b\u0203\1\2\u2040\u2041"+
		"\f\3\2\2\u2041\u2043\5\u0400\u0201\2\u2042\u2040\3\2\2\2\u2043\u2046\3"+
		"\2\2\2\u2044\u2042\3\2\2\2\u2044\u2045\3\2\2\2\u2045\u0405\3\2\2\2\u2046"+
		"\u2044\3\2\2\2\u2047\u204a\7/\2\2\u2048\u204a\3\2\2\2\u2049\u2047\3\2"+
		"\2\2\u2049\u2048\3\2\2\2\u204a\u0407\3\2\2\2\u204b\u204e\5\u039a\u01ce"+
		"\2\u204c\u204e\7r\2\2\u204d\u204b\3\2\2\2\u204d\u204c\3\2\2\2\u204e\u0409"+
		"\3\2\2\2\u204f\u2050\b\u0206\1\2\u2050\u2051\5\u0408\u0205\2\u2051\u2057"+
		"\3\2\2\2\u2052\u2053\f\3\2\2\u2053\u2054\7\b\2\2\u2054\u2056\5\u0408\u0205"+
		"\2\u2055\u2052\3\2\2\2\u2056\u2059\3\2\2\2\u2057\u2055\3\2\2\2\u2057\u2058"+
		"\3\2\2\2\u2058\u040b\3\2\2\2\u2059\u2057\3\2\2\2\u205a\u205b\7\r\2\2\u205b"+
		"\u205c\5\u040a\u0206\2\u205c\u205d\7\6\2\2\u205d\u040d\3\2\2\2\u205e\u205f"+
		"\b\u0208\1\2\u205f\u2060\5\u0410\u0209\2\u2060\u2066\3\2\2\2\u2061\u2062"+
		"\f\3\2\2\u2062\u2063\7\b\2\2\u2063\u2065\5\u0410\u0209\2\u2064\u2061\3"+
		"\2\2\2\u2065\u2068\3\2\2\2\u2066\u2064\3\2\2\2\u2066\u2067\3\2\2\2\u2067"+
		"\u040f\3\2\2\2\u2068\u2066\3\2\2\2\u2069\u206a\5\u039a\u01ce\2\u206a\u206b"+
		"\7+\2\2\u206b\u206c\5\u0434\u021b\2\u206c\u2073\3\2\2\2\u206d\u206e\5"+
		"\u039a\u01ce\2\u206e\u206f\7\u01a6\2\2\u206f\u2073\3\2\2\2\u2070\u2073"+
		"\5\u039a\u01ce\2\u2071\u2073\7\f\2\2\u2072\u2069\3\2\2\2\u2072\u206d\3"+
		"\2\2\2\u2072\u2070\3\2\2\2\u2072\u2071\3\2\2\2\u2073\u0411\3\2\2\2\u2074"+
		"\u2075\b\u020a\1\2\u2075\u2076\5\u0414\u020b\2\u2076\u207c\3\2\2\2\u2077"+
		"\u2078\f\3\2\2\u2078\u2079\7\b\2\2\u2079\u207b\5\u0414\u020b\2\u207a\u2077"+
		"\3\2\2\2\u207b\u207e\3\2\2\2\u207c\u207a\3\2\2\2\u207c\u207d\3\2\2\2\u207d"+
		"\u0413\3\2\2\2\u207e\u207c\3\2\2\2\u207f\u2084\5\u0430\u0219\2\u2080\u2081"+
		"\5\u0430\u0219\2\u2081\u2082\5\u0402\u0202\2\u2082\u2084\3\2\2\2\u2083"+
		"\u207f\3\2\2\2\u2083\u2080\3\2\2\2\u2084\u0415\3\2\2\2\u2085\u2086\b\u020c"+
		"\1\2\u2086\u2087\5\u0418\u020d\2\u2087\u208d\3\2\2\2\u2088\u2089\f\3\2"+
		"\2\u2089\u208a\7\b\2\2\u208a\u208c\5\u0418\u020d\2\u208b\u2088\3\2\2\2"+
		"\u208c\u208f\3\2\2\2\u208d\u208b\3\2\2\2\u208d\u208e\3\2\2\2\u208e\u0417"+
		"\3\2\2\2\u208f\u208d\3\2\2\2\u2090\u2091\5\u0430\u0219\2\u2091\u0419\3"+
		"\2\2\2\u2092\u2093\5\u0430\u0219\2\u2093\u041b\3\2\2\2\u2094\u2095\5\u0430"+
		"\u0219\2\u2095\u041d\3\2\2\2\u2096\u2097\5\u0434\u021b\2\u2097\u041f\3"+
		"\2\2\2\u2098\u2099\5\u0430\u0219\2\u2099\u0421\3\2\2\2\u209a\u209b\5\u042a"+
		"\u0216\2\u209b\u0423\3\2\2\2\u209c\u20a1\5\u0432\u021a\2\u209d\u209e\5"+
		"\u0430\u0219\2\u209e\u209f\5\u0402\u0202\2\u209f\u20a1\3\2\2\2\u20a0\u209c"+
		"\3\2\2\2\u20a0\u209d\3\2\2\2\u20a1\u0425\3\2\2\2\u20a2\u20c2\5\u0428\u0215"+
		"\2\u20a3\u20c2\7\u01a8\2\2\u20a4\u20c2\5\u042a\u0216\2\u20a5\u20c2\7\u01a9"+
		"\2\2\u20a6\u20c2\7\u01aa\2\2\u20a7\u20a8\5\u0424\u0213\2\u20a8\u20a9\5"+
		"\u042a\u0216\2\u20a9\u20c2\3\2\2\2\u20aa\u20ab\5\u0424\u0213\2\u20ab\u20ac"+
		"\7\r\2\2\u20ac\u20ad\5\u03d6\u01ec\2\u20ad\u20ae\7\6\2\2\u20ae\u20af\5"+
		"\u042a\u0216\2\u20af\u20c2\3\2\2\2\u20b0\u20b1\5\u0370\u01b9\2\u20b1\u20b2"+
		"\5\u042a\u0216\2\u20b2\u20c2\3\2\2\2\u20b3\u20b4\5\u0392\u01ca\2\u20b4"+
		"\u20b5\5\u042a\u0216\2\u20b5\u20b6\5\u0396\u01cc\2\u20b6\u20c2\3\2\2\2"+
		"\u20b7\u20b8\5\u0392\u01ca\2\u20b8\u20b9\7\r\2\2\u20b9\u20ba\5\u0428\u0215"+
		"\2\u20ba\u20bb\7\6\2\2\u20bb\u20bc\5\u042a\u0216\2\u20bc\u20bd\5\u0396"+
		"\u01cc\2\u20bd\u20c2\3\2\2\2\u20be\u20c2\7\u016f\2\2\u20bf\u20c2\7\u0096"+
		"\2\2\u20c0\u20c2\7\u00f6\2\2\u20c1\u20a2\3\2\2\2\u20c1\u20a3\3\2\2\2\u20c1"+
		"\u20a4\3\2\2\2\u20c1\u20a5\3\2\2\2\u20c1\u20a6\3\2\2\2\u20c1\u20a7\3\2"+
		"\2\2\u20c1\u20aa\3\2\2\2\u20c1\u20b0\3\2\2\2\u20c1\u20b3\3\2\2\2\u20c1"+
		"\u20b7\3\2\2\2\u20c1\u20be\3\2\2\2\u20c1\u20bf\3\2\2\2\u20c1\u20c0\3\2"+
		"\2\2\u20c2\u0427\3\2\2\2\u20c3\u20c4\7\u01a7\2\2\u20c4\u0429\3\2\2\2\u20c5"+
		"\u20c6\7\u01ab\2\2\u20c6\u042b\3\2\2\2\u20c7\u20c8\5\u0430\u0219\2\u20c8"+
		"\u042d\3\2\2\2\u20c9\u20cf\5\u0428\u0215\2\u20ca\u20cb\7\t\2\2\u20cb\u20cf"+
		"\5\u0428\u0215\2\u20cc\u20cd\7\13\2\2\u20cd\u20cf\5\u0428\u0215\2\u20ce"+
		"\u20c9\3\2\2\2\u20ce\u20ca\3\2\2\2\u20ce\u20cc\3\2\2\2\u20cf\u042f\3\2"+
		"\2\2\u20d0\u20d4\7\u01a6\2\2\u20d1\u20d4\5\u0436\u021c\2\u20d2\u20d4\5"+
		"\u0438\u021d\2\u20d3\u20d0\3\2\2\2\u20d3\u20d1\3\2\2\2\u20d3\u20d2\3\2"+
		"\2\2\u20d4\u0431\3\2\2\2\u20d5\u20d9\7\u01a6\2\2\u20d6\u20d9\5\u0436\u021c"+
		"\2\u20d7\u20d9\5\u043a\u021e\2\u20d8\u20d5\3\2\2\2\u20d8\u20d6\3\2\2\2"+
		"\u20d8\u20d7\3\2\2\2\u20d9\u0433\3\2\2\2\u20da\u20e0\7\u01a6\2\2\u20db"+
		"\u20e0\5\u0436\u021c\2\u20dc\u20e0\5\u0438\u021d\2\u20dd\u20e0\5\u043a"+
		"\u021e\2\u20de\u20e0\5\u043c\u021f\2\u20df\u20da\3\2\2\2\u20df\u20db\3"+
		"\2\2\2\u20df\u20dc\3\2\2\2\u20df\u20dd\3\2\2\2\u20df\u20de\3\2\2\2\u20e0"+
		"\u0435\3\2\2\2\u20e1\u20e2\t\21\2\2\u20e2\u0437\3\2\2\2\u20e3\u20e4\t"+
		"\22\2\2\u20e4\u0439\3\2\2\2\u20e5\u20e6\t\23\2\2\u20e6\u043b\3\2\2\2\u20e7"+
		"\u20e8\t\24\2\2\u20e8\u043d\3\2\2\2\u01c9\u0448\u04ba\u04c0\u04c9\u04d1"+
		"\u04e8\u04f7\u04fd\u0505\u050d\u0519\u052a\u0534\u053a\u054f\u055d\u0561"+
		"\u0568\u0571\u057b\u0585\u05b2\u05bc\u05c7\u05cc\u05d5\u05db\u05ed\u05f2"+
		"\u05f6\u0606\u060b\u0610\u0620\u0629\u0637\u0669\u0673\u071b\u0722\u0727"+
		"\u072c\u0731\u073a\u0744\u0756\u0765\u0782\u0788\u0793\u079c\u07a0\u07a7"+
		"\u07ae\u07b5\u07d8\u07dc\u07e1\u07e8\u07ec\u07f6\u0804\u080e\u0847\u0855"+
		"\u0859\u0860\u086a\u0875\u087b\u087f\u0890\u089b\u08b7\u08c0\u08cd\u08cf"+
		"\u08d9\u0911\u0916\u091d\u0927\u0933\u093d\u094b\u0953\u095e\u0970\u0978"+
		"\u0981\u098f\u0994\u099b\u09b5\u09c9\u09cd\u09d6\u09ef\u09f5\u09f8\u09fc"+
		"\u0a02\u0a0c\u0a21\u0a25\u0a2b\u0a30\u0a36\u0a3a\u0a4a\u0a4e\u0a5a\u0a64"+
		"\u0a6a\u0a75\u0a79\u0a80\u0a89\u0a96\u0b4e\u0b60\u0b69\u0b6e\u0b80\u0b91"+
		"\u0b99\u0ba3\u0bb3\u0bbd\u0bd4\u0bda\u0bde\u0bec\u0bfe\u0c15\u0c1d\u0c27"+
		"\u0c3a\u0c48\u0c5c\u0c8c\u0c92\u0c9c\u0ca6\u0cad\u0cb1\u0cbb\u0cc0\u0cc7"+
		"\u0cce\u0cd3\u0cda\u0ce8\u0cfa\u0d61\u0d6f\u0d77\u0d7e\u0d87\u0d95\u0d9e"+
		"\u0da8\u0dc4\u0ddc\u0dfb\u0dff\u0e04\u0e0d\u0e11\u0e2c\u0e36\u0e45\u0e59"+
		"\u0e6d\u0e96\u0eb0\u0eba\u0ec1\u0ecc\u0eda\u0f70\u0f86\u0f8a\u0fbd\u0fc2"+
		"\u0fd0\u0fd4\u0fda\u101e\u1024\u1041\u1052\u105c\u1068\u1096\u10a0\u10a6"+
		"\u10ac\u10b6\u10d4\u10da\u10e0\u10ed\u10f9\u1116\u112b\u112f\u1133\u1138"+
		"\u1142\u1159\u115e\u1164\u1169\u116e\u1172\u117e\u118d\u1195\u119a\u11a2"+
		"\u11ac\u11b5\u11bf\u11d1\u11d9\u11eb\u11f6\u11ff\u1221\u1229\u1230\u1235"+
		"\u1242\u1252\u1257\u1267\u1277\u1287\u129f\u12a6\u12b2\u12b8\u12dc\u12e3"+
		"\u12f2\u1303\u1309\u145d\u1461\u1466\u151c\u15ac\u15c2\u15cc\u15d4\u15d8"+
		"\u15df\u15f1\u15fa\u1603\u162f\u1634\u1640\u164a\u164c\u1651\u1669\u1677"+
		"\u1680\u1689\u16cd\u16d1\u16d7\u16e2\u16ee\u16fe\u1739\u173d\u178e\u17a8"+
		"\u17ad\u17cc\u17d6\u17dd\u17e7\u17ed\u17f1\u17f5\u17fc\u180e\u1817\u1821"+
		"\u182a\u182f\u183c\u1842\u1852\u1859\u1865\u1876\u1880\u1889\u1896\u18a3"+
		"\u18b5\u18b9\u18cc\u18d1\u18e8\u18ff\u1901\u1909\u190d\u1918\u191f\u1926"+
		"\u192d\u192f\u1931\u1955\u1959\u1969\u1970\u1977\u197e\u1980\u1982\u198a"+
		"\u1994\u19a0\u19a5\u19ca\u19ce\u19d3\u19de\u19e2\u19f0\u19fc\u1a06\u1a0a"+
		"\u1a19\u1a21\u1a25\u1a2f\u1a3b\u1a40\u1a46\u1a4a\u1a53\u1a60\u1a65\u1a70"+
		"\u1a76\u1a80\u1a85\u1aa6\u1aad\u1aca\u1ae5\u1ae7\u1af8\u1afc\u1b00\u1b04"+
		"\u1b07\u1b10\u1b1d\u1b27\u1b32\u1b39\u1b42\u1b46\u1b50\u1b72\u1b7d\u1b7f"+
		"\u1b90\u1b96\u1b9f\u1ba6\u1bb8\u1bbf\u1bc3\u1bc7\u1bd4\u1bd8\u1bf0\u1bf4"+
		"\u1bfa\u1c0c\u1c16\u1c34\u1c3c\u1c4f\u1d3b\u1d3d\u1d49\u1d90\u1d92\u1da8"+
		"\u1eab\u1eb2\u1ebf\u1ece\u1ed6\u1edf\u1ef3\u1ef8\u1f02\u1f0e\u1f19\u1f1f"+
		"\u1f26\u1f2e\u1f3c\u1f4c\u1f52\u1f5c\u1f64\u1f72\u1f7c\u1f87\u1f8f\u1f99"+
		"\u1fa6\u1fb0\u1fb8\u1fc2\u1fcd\u1fd7\u1fe9\u1ff8\u1fff\u200e\u2019\u201d"+
		"\u2023\u2033\u203c\u2044\u2049\u204d\u2057\u2066\u2072\u207c\u2083\u208d"+
		"\u20a0\u20c1\u20ce\u20d3\u20d8\u20df";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}