# Generated from java-escape by ANTLR 4.2.3
from __future__ import print_function
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .PlPgSqlListener import PlPgSqlListener
    from .PlPgSqlVisitor import PlPgSqlVisitor
else:
    from PlPgSqlListener import PlPgSqlListener
    from PlPgSqlVisitor import PlPgSqlVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u0205\u230b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\t")
        buf.write(u"c\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l")
        buf.write(u"\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4")
        buf.write(u"u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}")
        buf.write(u"\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4")
        buf.write(u"\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085")
        buf.write(u"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088")
        buf.write(u"\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c")
        buf.write(u"\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f")
        buf.write(u"\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093")
        buf.write(u"\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096")
        buf.write(u"\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a")
        buf.write(u"\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c\4\u009d\t\u009d")
        buf.write(u"\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1")
        buf.write(u"\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4")
        buf.write(u"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8")
        buf.write(u"\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab")
        buf.write(u"\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae\4\u00af")
        buf.write(u"\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2")
        buf.write(u"\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6")
        buf.write(u"\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9")
        buf.write(u"\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc\t\u00bc\4\u00bd")
        buf.write(u"\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0")
        buf.write(u"\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4")
        buf.write(u"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7")
        buf.write(u"\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb")
        buf.write(u"\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce\t\u00ce")
        buf.write(u"\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2")
        buf.write(u"\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5")
        buf.write(u"\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9")
        buf.write(u"\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db\4\u00dc\t\u00dc")
        buf.write(u"\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0")
        buf.write(u"\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3")
        buf.write(u"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7")
        buf.write(u"\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea")
        buf.write(u"\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed\4\u00ee")
        buf.write(u"\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1")
        buf.write(u"\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5")
        buf.write(u"\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8")
        buf.write(u"\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb\t\u00fb\4\u00fc")
        buf.write(u"\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff")
        buf.write(u"\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103")
        buf.write(u"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106")
        buf.write(u"\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a")
        buf.write(u"\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d\t\u010d")
        buf.write(u"\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111")
        buf.write(u"\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114")
        buf.write(u"\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118")
        buf.write(u"\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a\4\u011b\t\u011b")
        buf.write(u"\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f")
        buf.write(u"\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122")
        buf.write(u"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126")
        buf.write(u"\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129")
        buf.write(u"\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c\4\u012d")
        buf.write(u"\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130")
        buf.write(u"\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134")
        buf.write(u"\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137")
        buf.write(u"\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a\t\u013a\4\u013b")
        buf.write(u"\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e")
        buf.write(u"\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142")
        buf.write(u"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145")
        buf.write(u"\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149")
        buf.write(u"\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c\t\u014c")
        buf.write(u"\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150")
        buf.write(u"\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153")
        buf.write(u"\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157")
        buf.write(u"\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159\4\u015a\t\u015a")
        buf.write(u"\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e")
        buf.write(u"\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161")
        buf.write(u"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165")
        buf.write(u"\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168")
        buf.write(u"\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b\t\u016b\4\u016c")
        buf.write(u"\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f\t\u016f")
        buf.write(u"\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173")
        buf.write(u"\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176")
        buf.write(u"\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179\t\u0179\4\u017a")
        buf.write(u"\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c\4\u017d\t\u017d")
        buf.write(u"\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181")
        buf.write(u"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184")
        buf.write(u"\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188")
        buf.write(u"\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a\4\u018b\t\u018b")
        buf.write(u"\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e\4\u018f")
        buf.write(u"\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192")
        buf.write(u"\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196")
        buf.write(u"\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198\4\u0199\t\u0199")
        buf.write(u"\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c\t\u019c\4\u019d")
        buf.write(u"\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0")
        buf.write(u"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4")
        buf.write(u"\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7")
        buf.write(u"\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa\t\u01aa\4\u01ab")
        buf.write(u"\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae\t\u01ae")
        buf.write(u"\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2")
        buf.write(u"\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5")
        buf.write(u"\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8\t\u01b8\4\u01b9")
        buf.write(u"\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb\4\u01bc\t\u01bc")
        buf.write(u"\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0")
        buf.write(u"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3")
        buf.write(u"\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7")
        buf.write(u"\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9\4\u01ca\t\u01ca")
        buf.write(u"\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd\4\u01ce")
        buf.write(u"\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1")
        buf.write(u"\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5")
        buf.write(u"\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7\4\u01d8\t\u01d8")
        buf.write(u"\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db\t\u01db\4\u01dc")
        buf.write(u"\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df")
        buf.write(u"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3")
        buf.write(u"\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6")
        buf.write(u"\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9\t\u01e9\4\u01ea")
        buf.write(u"\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed\t\u01ed")
        buf.write(u"\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1")
        buf.write(u"\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4")
        buf.write(u"\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7\t\u01f7\4\u01f8")
        buf.write(u"\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa\4\u01fb\t\u01fb")
        buf.write(u"\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff")
        buf.write(u"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202")
        buf.write(u"\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206")
        buf.write(u"\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208\4\u0209\t\u0209")
        buf.write(u"\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c\4\u020d")
        buf.write(u"\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210")
        buf.write(u"\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214")
        buf.write(u"\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216\4\u0217\t\u0217")
        buf.write(u"\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a\t\u021a\4\u021b")
        buf.write(u"\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e")
        buf.write(u"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222")
        buf.write(u"\t\u0222\4\u0223\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225")
        buf.write(u"\4\u0226\t\u0226\4\u0227\t\u0227\4\u0228\t\u0228\4\u0229")
        buf.write(u"\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c\t\u022c")
        buf.write(u"\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230")
        buf.write(u"\t\u0230\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233")
        buf.write(u"\4\u0234\t\u0234\4\u0235\t\u0235\4\u0236\t\u0236\4\u0237")
        buf.write(u"\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239\4\u023a\t\u023a")
        buf.write(u"\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e")
        buf.write(u"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241")
        buf.write(u"\4\u0242\t\u0242\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245")
        buf.write(u"\t\u0245\4\u0246\t\u0246\4\u0247\t\u0247\4\u0248\t\u0248")
        buf.write(u"\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b\4\u024c")
        buf.write(u"\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f")
        buf.write(u"\4\u0250\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253")
        buf.write(u"\t\u0253\4\u0254\t\u0254\4\u0255\t\u0255\4\u0256\t\u0256")
        buf.write(u"\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259\t\u0259\4\u025a")
        buf.write(u"\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d")
        buf.write(u"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261")
        buf.write(u"\t\u0261\4\u0262\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264")
        buf.write(u"\4\u0265\t\u0265\4\u0266\t\u0266\4\u0267\t\u0267\4\u0268")
        buf.write(u"\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b\t\u026b")
        buf.write(u"\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\3\2")
        buf.write(u"\3\2\3\2\3\2\3\3\3\3\3\3\7\3\u04e4\n\3\f\3\16\3\u04e7")
        buf.write(u"\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\5\4\u04f5\n\4\3\5\3\5\5\5\u04f9\n\5\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u050a")
        buf.write(u"\n\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\7\t\u0513\n\t\f\t\16")
        buf.write(u"\t\u0516\13\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u051e\n\n\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0534")
        buf.write(u"\n\13\3\f\3\f\3\f\3\f\5\f\u053a\n\f\3\r\3\r\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\5\16\u0543\n\16\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\7\17\u054b\n\17\f\17\16\17\u054e\13\17\3\20")
        buf.write(u"\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\5\23\u0559\n")
        buf.write(u"\23\3\24\3\24\5\24\u055d\n\24\3\25\3\25\3\26\3\26\3\26")
        buf.write(u"\3\26\3\26\5\26\u0566\n\26\3\27\3\27\3\27\5\27\u056b")
        buf.write(u"\n\27\3\30\3\30\5\30\u056f\n\30\3\31\3\31\5\31\u0573")
        buf.write(u"\n\31\3\32\3\32\3\33\3\33\5\33\u0579\n\33\3\34\3\34\3")
        buf.write(u"\34\3\34\3\34\7\34\u0580\n\34\f\34\16\34\u0583\13\34")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\5\35\u059b\n\35\3\36\3\36\3\36\3\37\3\37\3\37\3")
        buf.write(u"\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\5!\u05ad\n!\3\"\3\"\3")
        buf.write(u"\"\3\"\3\"\3\"\7\"\u05b5\n\"\f\"\16\"\u05b8\13\"\3#\3")
        buf.write(u"#\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3&\7&\u05c8\n&\f&")
        buf.write(u"\16&\u05cb\13&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write(u"(\3(\3(\3(\3(\3(\7(\u05dc\n(\f(\16(\u05df\13(\3)\3)\3")
        buf.write(u")\5)\u05e4\n)\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,")
        buf.write(u"\3,\3,\7,\u05f5\n,\f,\16,\u05f8\13,\3-\3-\3-\3-\3.\3")
        buf.write(u".\3.\5.\u0601\n.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3")
        buf.write(u"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\65\3\65")
        buf.write(u"\3\65\5\65\u0622\n\65\3\66\3\66\3\66\3\66\3\67\3\67\3")
        buf.write(u"8\38\39\39\3:\3:\3:\3:\3:\3:\3;\3;\3<\3<\3=\3=\3=\3>")
        buf.write(u"\3>\3>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3A\3A\3A\3A\3B\3B\3")
        buf.write(u"B\3C\3C\3D\3D\3D\5D\u0653\nD\3E\3E\3E\3E\3E\7E\u065a")
        buf.write(u"\nE\fE\16E\u065d\13E\3F\3F\3F\3F\3F\3G\3G\3G\3G\3G\3")
        buf.write(u"G\7G\u066a\nG\fG\16G\u066d\13G\3H\3H\3I\3I\3J\3J\3K\3")
        buf.write(u"K\3L\3L\3M\3M\3M\3M\3M\5M\u067e\nM\3N\3N\5N\u0682\nN")
        buf.write(u"\3O\3O\3O\5O\u0687\nO\3P\3P\3Q\3Q\3R\3R\3S\3S\3S\3S\3")
        buf.write(u"S\3S\7S\u0695\nS\fS\16S\u0698\13S\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write(u"T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5")
        buf.write(u"T\u0709\nT\3U\3U\3U\3U\5U\u070f\nU\3U\3U\3V\3V\3V\7V")
        buf.write(u"\u0716\nV\fV\16V\u0719\13V\3W\3W\3W\7W\u071e\nW\fW\16")
        buf.write(u"W\u0721\13W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write(u"X\3X\3X\3X\3X\3X\3X\5X\u0737\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y")
        buf.write(u"\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0746\nY\3Z\3Z\3Z\3Z\5Z\u074c\n")
        buf.write(u"Z\3Z\3Z\3[\3[\3[\3[\5[\u0754\n[\3[\3[\3\\\3\\\3\\\3\\")
        buf.write(u"\5\\\u075c\n\\\3]\3]\3]\3]\3]\3]\3^\3^\3^\3^\5^\u0768")
        buf.write(u"\n^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0779")
        buf.write(u"\n`\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0783\na\3b\3b\3b\3b\5")
        buf.write(u"b\u0789\nb\3b\3b\3c\3c\3c\3c\3c\3c\3c\3d\3d\3e\3e\3e")
        buf.write(u"\3e\3e\3e\3e\3e\5e\u079e\ne\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write(u"f\3f\3f\3f\5f\u07ac\nf\3g\3g\5g\u07b0\ng\3h\3h\3h\7h")
        buf.write(u"\u07b5\nh\fh\16h\u07b8\13h\3i\3i\3i\3i\3i\3i\5i\u07c0")
        buf.write(u"\ni\3j\3j\3j\3j\3j\3j\3j\3j\5j\u07ca\nj\3k\3k\3k\3k\3")
        buf.write(u"k\3k\3k\3k\5k\u07d4\nk\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l")
        buf.write(u"\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3")
        buf.write(u"l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0801")
        buf.write(u"\nl\3m\3m\3m\3m\3m\3m\7m\u0809\nm\fm\16m\u080c\13m\3")
        buf.write(u"n\3n\3n\3n\3n\3n\7n\u0814\nn\fn\16n\u0817\13n\3o\3o\5")
        buf.write(u"o\u081b\no\3p\3p\3p\3p\3p\3p\3p\5p\u0824\np\3q\3q\3q")
        buf.write(u"\3q\5q\u082a\nq\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3")
        buf.write(u"r\3r\3r\3r\5r\u083c\nr\3s\3s\3s\5s\u0841\ns\3t\3t\5t")
        buf.write(u"\u0845\nt\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5")
        buf.write(u"u\u0855\nu\3v\3v\3v\5v\u085a\nv\3w\3w\3w\5w\u085f\nw")
        buf.write(u"\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u086f\n")
        buf.write(u"x\3y\3y\3y\3y\3y\3z\3z\5z\u0878\nz\3{\3{\3|\3|\3}\3}")
        buf.write(u"\3}\3}\3}\3}\3}\3}\5}\u0886\n}\3~\3~\3~\3~\3~\3~\3~\3")
        buf.write(u"~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~")
        buf.write(u"\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3")
        buf.write(u"~\3~\3~\3~\3~\3~\5~\u08b8\n~\3\177\3\177\3\177\3\177")
        buf.write(u"\3\177\3\177\7\177\u08c0\n\177\f\177\16\177\u08c3\13")
        buf.write(u"\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u096a")
        buf.write(u"\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write(u"\u0971\n\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u0976")
        buf.write(u"\n\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u097b\n\u0083")
        buf.write(u"\3\u0084\3\u0084\3\u0084\5\u0084\u0980\n\u0084\3\u0085")
        buf.write(u"\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write(u"\u0989\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write(u"\3\u0087\7\u0087\u0991\n\u0087\f\u0087\16\u0087\u0994")
        buf.write(u"\13\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write(u"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write(u"\3\u0088\3\u0088\5\u0088\u09a5\n\u0088\3\u0089\3\u0089")
        buf.write(u"\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write(u"\3\u008a\3\u008a\7\u008a\u09b2\n\u008a\f\u008a\16\u008a")
        buf.write(u"\u09b5\13\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\5\u008b\u09d1\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write(u"\5\u008c\u09d7\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u09e2")
        buf.write(u"\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\5\u008d\u09eb\n\u008d\3\u008d\3\u008d\5\u008d")
        buf.write(u"\u09ef\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write(u"\5\u008f\u09f6\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write(u"\3\u0090\5\u0090\u09fd\n\u0090\3\u0091\3\u0091\3\u0091")
        buf.write(u"\7\u0091\u0a02\n\u0091\f\u0091\16\u0091\u0a05\13\u0091")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0a27\n\u0092")
        buf.write(u"\3\u0093\3\u0093\5\u0093\u0a2b\n\u0093\3\u0094\3\u0094")
        buf.write(u"\3\u0094\5\u0094\u0a30\n\u0094\3\u0095\3\u0095\3\u0095")
        buf.write(u"\3\u0095\3\u0095\5\u0095\u0a37\n\u0095\3\u0096\3\u0096")
        buf.write(u"\5\u0096\u0a3b\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write(u"\3\u0097\3\u0097\7\u0097\u0a43\n\u0097\f\u0097\16\u0097")
        buf.write(u"\u0a46\13\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099")
        buf.write(u"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099")
        buf.write(u"\u0a53\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write(u"\3\u009a\7\u009a\u0a5b\n\u009a\f\u009a\16\u009a\u0a5e")
        buf.write(u"\13\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c")
        buf.write(u"\u0a96\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write(u"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write(u"\5\u009d\u0aa4\n\u009d\3\u009e\3\u009e\5\u009e\u0aa8")
        buf.write(u"\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f")
        buf.write(u"\u0aaf\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write(u"\3\u00a0\7\u00a0\u0ab7\n\u00a0\f\u00a0\16\u00a0\u0aba")
        buf.write(u"\13\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write(u"\7\u00a1\u0ac2\n\u00a1\f\u00a1\16\u00a1\u0ac5\13\u00a1")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0aca\n\u00a2\3\u00a3")
        buf.write(u"\3\u00a3\5\u00a3\u0ace\n\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write(u"\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write(u"\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0add\n\u00a6\f\u00a6")
        buf.write(u"\16\u00a6\u0ae0\13\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write(u"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0aea\n\u00a7")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0b06")
        buf.write(u"\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write(u"\3\u00a9\5\u00a9\u0b0f\n\u00a9\3\u00aa\3\u00aa\3\u00aa")
        buf.write(u"\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\7\u00ab\u0b1c\n\u00ab\f\u00ab\16\u00ab\u0b1f")
        buf.write(u"\13\u00ab\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write(u"\3\u00ad\5\u00ad\u0b28\n\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\5\u00ae\u0b60\n\u00ae\3\u00af\3\u00af")
        buf.write(u"\3\u00af\5\u00af\u0b65\n\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write(u"\3\u00b0\3\u00b0\5\u00b0\u0b6c\n\u00b0\3\u00b1\3\u00b1")
        buf.write(u"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b74\n\u00b1")
        buf.write(u"\f\u00b1\16\u00b1\u0b77\13\u00b1\3\u00b2\3\u00b2\3\u00b3")
        buf.write(u"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write(u"\u0b82\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write(u"\3\u00b4\7\u00b4\u0b8a\n\u00b4\f\u00b4\16\u00b4\u0b8d")
        buf.write(u"\13\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write(u"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0b9a")
        buf.write(u"\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write(u"\5\u00b6\u0ba2\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write(u"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bad")
        buf.write(u"\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9")
        buf.write(u"\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba")
        buf.write(u"\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bbf\n\u00ba\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0bc7")
        buf.write(u"\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write(u"\3\u00bc\5\u00bc\u0bd0\n\u00bc\3\u00bd\3\u00bd\3\u00bd")
        buf.write(u"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write(u"\3\u00bd\3\u00bd\5\u00bd\u0bde\n\u00bd\3\u00be\3\u00be")
        buf.write(u"\3\u00be\5\u00be\u0be3\n\u00be\3\u00bf\3\u00bf\3\u00bf")
        buf.write(u"\3\u00bf\3\u00bf\5\u00bf\u0bea\n\u00bf\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write(u"\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write(u"\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write(u"\3\u00c3\5\u00c3\u0c04\n\u00c3\3\u00c4\3\u00c4\3\u00c4")
        buf.write(u"\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write(u"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write(u"\3\u00c5\5\u00c5\u0c18\n\u00c5\3\u00c6\3\u00c6\5\u00c6")
        buf.write(u"\u0c1c\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write(u"\7\u00c7\u0c23\n\u00c7\f\u00c7\16\u00c7\u0c26\13\u00c7")
        buf.write(u"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\5\u00c8\u0c3e\n\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\5\u00c8\u0c44\n\u00c8\3\u00c8\5\u00c8\u0c47")
        buf.write(u"\n\u00c8\3\u00c9\3\u00c9\5\u00c9\u0c4b\n\u00c9\3\u00ca")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0c51\n\u00ca\3\u00cb")
        buf.write(u"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0c59")
        buf.write(u"\n\u00cb\f\u00cb\16\u00cb\u0c5c\13\u00cb\3\u00cc\3\u00cc")
        buf.write(u"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write(u"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write(u"\3\u00cc\3\u00cc\5\u00cc\u0c70\n\u00cc\3\u00cd\3\u00cd")
        buf.write(u"\5\u00cd\u0c74\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write(u"\5\u00ce\u0c7a\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf")
        buf.write(u"\u0c7f\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write(u"\u0c85\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u0c89\n\u00d1")
        buf.write(u"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\5\u00d2\u0c99\n\u00d2\3\u00d3\3\u00d3\5\u00d3\u0c9d")
        buf.write(u"\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write(u"\3\u00d4\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0ca9\n\u00d5")
        buf.write(u"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write(u"\3\u00d6\5\u00d6\u0cb3\n\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\5\u00d7\u0cb9\n\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7")
        buf.write(u"\u0cc4\n\u00d7\3\u00d7\3\u00d7\5\u00d7\u0cc8\n\u00d7")
        buf.write(u"\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0ccd\n\u00d8\f\u00d8")
        buf.write(u"\16\u00d8\u0cd0\13\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write(u"\3\u00d9\3\u00d9\5\u00d9\u0cd8\n\u00d9\3\u00da\3\u00da")
        buf.write(u"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db")
        buf.write(u"\7\u00db\u0ce3\n\u00db\f\u00db\16\u00db\u0ce6\13\u00db")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd")
        buf.write(u"\u0d9d\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write(u"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0daf\n\u00df")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0db6")
        buf.write(u"\n\u00e0\f\u00e0\16\u00e0\u0db9\13\u00e0\3\u00e1\3\u00e1")
        buf.write(u"\5\u00e1\u0dbd\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0dcf")
        buf.write(u"\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write(u"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write(u"\3\u00e3\3\u00e3\5\u00e3\u0de0\n\u00e3\3\u00e4\3\u00e4")
        buf.write(u"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0de8\n\u00e4")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5")
        buf.write(u"\u0df0\n\u00e5\f\u00e5\16\u00e5\u0df3\13\u00e5\3\u00e6")
        buf.write(u"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7")
        buf.write(u"\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0e00\n\u00e7\f\u00e7")
        buf.write(u"\16\u00e7\u0e03\13\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write(u"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0e0c\n\u00e8\3\u00e9")
        buf.write(u"\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed")
        buf.write(u"\u0e23\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee")
        buf.write(u"\u0e29\n\u00ee\3\u00ef\3\u00ef\5\u00ef\u0e2d\n\u00ef")
        buf.write(u"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write(u"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e3b")
        buf.write(u"\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write(u"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write(u"\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0e4d\n\u00f1\3\u00f2")
        buf.write(u"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2")
        buf.write(u"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2")
        buf.write(u"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2")
        buf.write(u"\u0e64\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write(u"\3\u00f3\5\u00f3\u0e6c\n\u00f3\3\u00f4\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0e74\n\u00f4\f\u00f4")
        buf.write(u"\16\u00f4\u0e77\13\u00f4\3\u00f5\3\u00f5\3\u00f6\3\u00f6")
        buf.write(u"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write(u"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e89")
        buf.write(u"\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write(u"\u0e97\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write(u"\u0eab\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb")
        buf.write(u"\u0edb\n\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc")
        buf.write(u"\u0ee1\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write(u"\3\u00fd\7\u00fd\u0ee9\n\u00fd\f\u00fd\16\u00fd\u0eec")
        buf.write(u"\13\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe")
        buf.write(u"\3\u00fe\5\u00fe\u0ef5\n\u00fe\3\u00ff\3\u00ff\3\u00ff")
        buf.write(u"\3\u00ff\3\u00ff\5\u00ff\u0efc\n\u00ff\3\u0100\3\u0100")
        buf.write(u"\5\u0100\u0f00\n\u0100\3\u0101\3\u0101\3\u0102\3\u0102")
        buf.write(u"\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0f0a\n\u0102")
        buf.write(u"\3\u0103\3\u0103\3\u0103\5\u0103\u0f0f\n\u0103\3\u0103")
        buf.write(u"\3\u0103\3\u0103\7\u0103\u0f14\n\u0103\f\u0103\16\u0103")
        buf.write(u"\u0f17\13\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104")
        buf.write(u"\u0f1d\n\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u0f22")
        buf.write(u"\n\u0105\3\u0106\3\u0106\3\u0106\7\u0106\u0f27\n\u0106")
        buf.write(u"\f\u0106\16\u0106\u0f2a\13\u0106\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\5\u0107\u0f37\n\u0107\3\u0108\3\u0108\3\u0108")
        buf.write(u"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write(u"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108")
        buf.write(u"\u0f49\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write(u"\3\u0109\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a")
        buf.write(u"\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u0fb0")
        buf.write(u"\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d")
        buf.write(u"\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u0fbc\n\u010d")
        buf.write(u"\f\u010d\16\u010d\u0fbf\13\u010d\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\5\u010e\u0fc6\n\u010e\3\u010f\3\u010f")
        buf.write(u"\3\u010f\3\u010f\3\u010f\5\u010f\u0fcd\n\u010f\3\u0110")
        buf.write(u"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110")
        buf.write(u"\u0fd6\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0112")
        buf.write(u"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\7\u0112\u0fe2")
        buf.write(u"\n\u0112\f\u0112\16\u0112\u0fe5\13\u0112\3\u0113\3\u0113")
        buf.write(u"\3\u0113\3\u0113\3\u0114\3\u0114\5\u0114\u0fed\n\u0114")
        buf.write(u"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115")
        buf.write(u"\u0ff5\n\u0115\f\u0115\16\u0115\u0ff8\13\u0115\3\u0116")
        buf.write(u"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write(u"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write(u"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write(u"\3\u0116\3\u0116\3\u0116\5\u0116\u1013\n\u0116\3\u0117")
        buf.write(u"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117")
        buf.write(u"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118")
        buf.write(u"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u1029")
        buf.write(u"\n\u0118\f\u0118\16\u0118\u102c\13\u0118\3\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u104a")
        buf.write(u"\n\u0119\3\u011a\3\u011a\5\u011a\u104e\n\u011a\3\u011b")
        buf.write(u"\3\u011b\3\u011b\5\u011b\u1053\n\u011b\3\u011c\3\u011c")
        buf.write(u"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u105c")
        buf.write(u"\n\u011c\3\u011d\3\u011d\5\u011d\u1060\n\u011d\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f")
        buf.write(u"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write(u"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write(u"\3\u011f\3\u011f\3\u011f\5\u011f\u107b\n\u011f\3\u0120")
        buf.write(u"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\7\u0120\u1083")
        buf.write(u"\n\u0120\f\u0120\16\u0120\u1086\13\u0120\3\u0121\3\u0121")
        buf.write(u"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write(u"\3\u0121\3\u0121\3\u0121\5\u0121\u1094\n\u0121\3\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\5\u0122\u10a8\n\u0122\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\5\u0123\u10bc\n\u0123\3\u0124")
        buf.write(u"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126")
        buf.write(u"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write(u"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write(u"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write(u"\3\u0126\3\u0126\3\u0126\5\u0126\u10e5\n\u0126\3\u0127")
        buf.write(u"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\3\u0127\5\u0127\u10ff\n\u0127\3\u0128\3\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u1107\n\u0128")
        buf.write(u"\f\u0128\16\u0128\u110a\13\u0128\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\5\u0129\u1110\n\u0129\3\u012a\3\u012a\3\u012a")
        buf.write(u"\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u1119\n\u012a")
        buf.write(u"\f\u012a\16\u012a\u111c\13\u012a\3\u012b\3\u012b\3\u012b")
        buf.write(u"\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\5\u012c\u1129\n\u012c\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u11bf")
        buf.write(u"\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write(u"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write(u"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write(u"\5\u012e\u11d5\n\u012e\3\u012f\3\u012f\5\u012f\u11d9")
        buf.write(u"\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\5\u0130\u120c\n\u0130\3\u0131\3\u0131\3\u0131")
        buf.write(u"\5\u0131\u1211\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write(u"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write(u"\3\u0132\5\u0132\u121f\n\u0132\3\u0133\3\u0133\5\u0133")
        buf.write(u"\u1223\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134")
        buf.write(u"\u1229\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write(u"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u126d")
        buf.write(u"\n\u0135\3\u0136\3\u0136\3\u0137\3\u0137\5\u0137\u1273")
        buf.write(u"\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write(u"\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write(u"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write(u"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write(u"\5\u0139\u1290\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a")
        buf.write(u"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a")
        buf.write(u"\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u12a1\n\u013a")
        buf.write(u"\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\7\u013b")
        buf.write(u"\u12a9\n\u013b\f\u013b\16\u013b\u12ac\13\u013b\3\u013c")
        buf.write(u"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c")
        buf.write(u"\3\u013c\5\u013c\u12b7\n\u013c\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d")
        buf.write(u"\u12e5\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e")
        buf.write(u"\3\u013e\7\u013e\u12ed\n\u013e\f\u013e\16\u013e\u12f0")
        buf.write(u"\13\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u12f5\n\u013f")
        buf.write(u"\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u12fb\n\u0140")
        buf.write(u"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141")
        buf.write(u"\u1303\n\u0141\f\u0141\16\u0141\u1306\13\u0141\3\u0142")
        buf.write(u"\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write(u"\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144")
        buf.write(u"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144")
        buf.write(u"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1323")
        buf.write(u"\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1329")
        buf.write(u"\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u132f")
        buf.write(u"\n\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0148\3\u0148\3\u0148\7\u0148\u133a\n\u0148\f\u0148")
        buf.write(u"\16\u0148\u133d\13\u0148\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write(u"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1348")
        buf.write(u"\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write(u"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write(u"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write(u"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write(u"\5\u014a\u1365\n\u014a\3\u014b\3\u014b\3\u014c\3\u014c")
        buf.write(u"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c")
        buf.write(u"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d")
        buf.write(u"\3\u014d\5\u014d\u137a\n\u014d\3\u014e\3\u014e\5\u014e")
        buf.write(u"\u137e\n\u014e\3\u014f\3\u014f\5\u014f\u1382\n\u014f")
        buf.write(u"\3\u0150\3\u0150\3\u0150\5\u0150\u1387\n\u0150\3\u0151")
        buf.write(u"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\7\u0151\u138f")
        buf.write(u"\n\u0151\f\u0151\16\u0151\u1392\13\u0151\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u13a8\n\u0152")
        buf.write(u"\3\u0153\3\u0153\3\u0153\5\u0153\u13ad\n\u0153\3\u0154")
        buf.write(u"\3\u0154\3\u0154\3\u0154\5\u0154\u13b3\n\u0154\3\u0155")
        buf.write(u"\3\u0155\3\u0155\5\u0155\u13b8\n\u0155\3\u0156\3\u0156")
        buf.write(u"\3\u0156\5\u0156\u13bd\n\u0156\3\u0157\3\u0157\3\u0157")
        buf.write(u"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write(u"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write(u"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write(u"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write(u"\5\u0157\u13de\n\u0157\3\u0158\3\u0158\3\u0158\5\u0158")
        buf.write(u"\u13e3\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write(u"\3\u0159\5\u0159\u13eb\n\u0159\3\u015a\3\u015a\3\u015a")
        buf.write(u"\3\u015a\3\u015a\3\u015a\7\u015a\u13f3\n\u015a\f\u015a")
        buf.write(u"\16\u015a\u13f6\13\u015a\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write(u"\3\u015b\3\u015b\5\u015b\u13fe\n\u015b\3\u015c\3\u015c")
        buf.write(u"\3\u015c\3\u015c\3\u015c\3\u015c\7\u015c\u1406\n\u015c")
        buf.write(u"\f\u015c\16\u015c\u1409\13\u015c\3\u015d\3\u015d\3\u015d")
        buf.write(u"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write(u"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u141a")
        buf.write(u"\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write(u"\5\u015e\u1422\n\u015e\3\u015f\3\u015f\3\u0160\3\u0160")
        buf.write(u"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161")
        buf.write(u"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u1434")
        buf.write(u"\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write(u"\3\u0162\3\u0162\3\u0162\5\u0162\u143f\n\u0162\3\u0163")
        buf.write(u"\3\u0163\3\u0163\3\u0163\3\u0163\7\u0163\u1446\n\u0163")
        buf.write(u"\f\u0163\16\u0163\u1449\13\u0163\3\u0164\3\u0164\3\u0164")
        buf.write(u"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\5\u0164\u146a\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write(u"\3\u0165\3\u0165\5\u0165\u1472\n\u0165\3\u0166\3\u0166")
        buf.write(u"\3\u0166\3\u0166\3\u0166\5\u0166\u1479\n\u0166\3\u0167")
        buf.write(u"\3\u0167\3\u0167\5\u0167\u147e\n\u0167\3\u0168\3\u0168")
        buf.write(u"\3\u0168\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write(u"\7\u0169\u1489\n\u0169\f\u0169\16\u0169\u148c\13\u0169")
        buf.write(u"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016b")
        buf.write(u"\3\u016b\3\u016b\3\u016b\3\u016b\7\u016b\u1499\n\u016b")
        buf.write(u"\f\u016b\16\u016b\u149c\13\u016b\3\u016c\3\u016c\5\u016c")
        buf.write(u"\u14a0\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d")
        buf.write(u"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d")
        buf.write(u"\3\u016d\3\u016d\5\u016d\u14b0\n\u016d\3\u016e\3\u016e")
        buf.write(u"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e")
        buf.write(u"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u14c0")
        buf.write(u"\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write(u"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write(u"\3\u016f\5\u016f\u14d0\n\u016f\3\u0170\3\u0170\3\u0170")
        buf.write(u"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write(u"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write(u"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u14e8")
        buf.write(u"\n\u0170\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171")
        buf.write(u"\u14ef\n\u0171\3\u0172\3\u0172\3\u0172\3\u0173\3\u0173")
        buf.write(u"\3\u0173\3\u0173\3\u0173\7\u0173\u14f9\n\u0173\f\u0173")
        buf.write(u"\16\u0173\u14fc\13\u0173\3\u0174\3\u0174\3\u0174\5\u0174")
        buf.write(u"\u1501\n\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write(u"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write(u"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write(u"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write(u"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write(u"\3\u0175\5\u0175\u1525\n\u0175\3\u0176\3\u0176\3\u0176")
        buf.write(u"\3\u0176\3\u0176\5\u0176\u152c\n\u0176\3\u0177\3\u0177")
        buf.write(u"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177")
        buf.write(u"\3\u0177\3\u0178\3\u0178\3\u0178\5\u0178\u153b\n\u0178")
        buf.write(u"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179")
        buf.write(u"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179")
        buf.write(u"\3\u0179\5\u0179\u154c\n\u0179\3\u017a\3\u017a\3\u017b")
        buf.write(u"\3\u017b\5\u017b\u1552\n\u017b\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c")
        buf.write(u"\u16a6\n\u017c\3\u017d\3\u017d\5\u017d\u16aa\n\u017d")
        buf.write(u"\3\u017e\3\u017e\3\u017e\5\u017e\u16af\n\u017e\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u1765\n\u017f")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\5\u0180\u17f5\n\u0180\3\u0181\3\u0181")
        buf.write(u"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181")
        buf.write(u"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0182\3\u0182")
        buf.write(u"\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u180b\n\u0182")
        buf.write(u"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\7\u0183")
        buf.write(u"\u1813\n\u0183\f\u0183\16\u0183\u1816\13\u0183\3\u0184")
        buf.write(u"\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u181d\n\u0184")
        buf.write(u"\3\u0185\3\u0185\5\u0185\u1821\n\u0185\3\u0186\3\u0186")
        buf.write(u"\3\u0187\3\u0187\3\u0187\5\u0187\u1828\n\u0187\3\u0188")
        buf.write(u"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188")
        buf.write(u"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188")
        buf.write(u"\3\u0188\5\u0188\u183a\n\u0188\3\u0189\3\u0189\3\u0189")
        buf.write(u"\3\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u1843\n\u018a")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\3\u018c")
        buf.write(u"\5\u018c\u184c\n\u018c\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d")
        buf.write(u"\3\u018d\3\u018d\3\u018d\5\u018d\u1878\n\u018d\3\u018e")
        buf.write(u"\3\u018e\3\u018e\5\u018e\u187d\n\u018e\3\u018f\3\u018f")
        buf.write(u"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f")
        buf.write(u"\3\u018f\5\u018f\u1889\n\u018f\3\u0190\3\u0190\3\u0190")
        buf.write(u"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\7\u0190\u1893")
        buf.write(u"\n\u0190\f\u0190\16\u0190\u1896\13\u0190\3\u0191\3\u0191")
        buf.write(u"\5\u0191\u189a\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write(u"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write(u"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write(u"\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u18b2\n\u0192")
        buf.write(u"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write(u"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u18c0")
        buf.write(u"\n\u0193\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195")
        buf.write(u"\3\u0195\5\u0195\u18c9\n\u0195\3\u0195\3\u0195\3\u0196")
        buf.write(u"\3\u0196\3\u0196\7\u0196\u18d0\n\u0196\f\u0196\16\u0196")
        buf.write(u"\u18d3\13\u0196\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1916\n\u0197")
        buf.write(u"\3\u0198\3\u0198\5\u0198\u191a\n\u0198\3\u0199\3\u0199")
        buf.write(u"\3\u0199\3\u0199\5\u0199\u1920\n\u0199\3\u0199\3\u0199")
        buf.write(u"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write(u"\5\u0199\u192b\n\u0199\3\u019a\3\u019a\3\u019a\3\u019a")
        buf.write(u"\3\u019a\3\u019b\3\u019b\3\u019b\7\u019b\u1935\n\u019b")
        buf.write(u"\f\u019b\16\u019b\u1938\13\u019b\3\u019c\3\u019c\3\u019c")
        buf.write(u"\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d")
        buf.write(u"\3\u019d\3\u019d\3\u019d\5\u019d\u1947\n\u019d\3\u019e")
        buf.write(u"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\5\u019f\u1982\n\u019f\3\u01a0\3\u01a0\5\u01a0\u1986")
        buf.write(u"\n\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1")
        buf.write(u"\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u19d7\n\u01a2\3\u01a3")
        buf.write(u"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3")
        buf.write(u"\3\u01a3\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write(u"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4")
        buf.write(u"\3\u01a4\3\u01a4\5\u01a4\u19f1\n\u01a4\3\u01a5\3\u01a5")
        buf.write(u"\3\u01a5\5\u01a5\u19f6\n\u01a5\3\u01a6\3\u01a6\3\u01a6")
        buf.write(u"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write(u"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write(u"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write(u"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a15")
        buf.write(u"\n\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7")
        buf.write(u"\7\u01a7\u1a1d\n\u01a7\f\u01a7\16\u01a7\u1a20\13\u01a7")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1a26\n\u01a8")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write(u"\3\u01a9\5\u01a9\u1a30\n\u01a9\3\u01aa\3\u01aa\3\u01ab")
        buf.write(u"\3\u01ab\5\u01ab\u1a36\n\u01ab\3\u01ac\3\u01ac\5\u01ac")
        buf.write(u"\u1a3a\n\u01ac\3\u01ad\3\u01ad\5\u01ad\u1a3e\n\u01ad")
        buf.write(u"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1a45")
        buf.write(u"\n\u01ae\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af")
        buf.write(u"\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af")
        buf.write(u"\3\u01af\3\u01af\3\u01af\5\u01af\u1a57\n\u01af\3\u01b0")
        buf.write(u"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0")
        buf.write(u"\u1a60\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write(u"\3\u01b1\7\u01b1\u1a68\n\u01b1\f\u01b1\16\u01b1\u1a6b")
        buf.write(u"\13\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3")
        buf.write(u"\5\u01b3\u1a73\n\u01b3\3\u01b4\3\u01b4\3\u01b4\5\u01b4")
        buf.write(u"\u1a78\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5")
        buf.write(u"\3\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6")
        buf.write(u"\u1a85\n\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7")
        buf.write(u"\u1a8b\n\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write(u"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write(u"\3\u01b8\3\u01b8\5\u01b8\u1a9b\n\u01b8\3\u01b9\3\u01b9")
        buf.write(u"\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1aa2\n\u01b9\3\u01ba")
        buf.write(u"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba")
        buf.write(u"\3\u01ba\3\u01ba\5\u01ba\u1aae\n\u01ba\3\u01bb\3\u01bb")
        buf.write(u"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bc\3\u01bc")
        buf.write(u"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write(u"\u1abf\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd")
        buf.write(u"\3\u01bd\7\u01bd\u1ac7\n\u01bd\f\u01bd\16\u01bd\u1aca")
        buf.write(u"\13\u01bd\3\u01be\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01bf")
        buf.write(u"\5\u01bf\u1ad2\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0")
        buf.write(u"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c1")
        buf.write(u"\5\u01c1\u1adf\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2")
        buf.write(u"\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3")
        buf.write(u"\5\u01c3\u1aec\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4")
        buf.write(u"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4")
        buf.write(u"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1afe")
        buf.write(u"\n\u01c4\3\u01c5\3\u01c5\5\u01c5\u1b02\n\u01c5\3\u01c6")
        buf.write(u"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6")
        buf.write(u"\3\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7")
        buf.write(u"\7\u01c7\u1b13\n\u01c7\f\u01c7\16\u01c7\u1b16\13\u01c7")
        buf.write(u"\3\u01c8\3\u01c8\5\u01c8\u1b1a\n\u01c8\3\u01c9\3\u01c9")
        buf.write(u"\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca")
        buf.write(u"\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cc")
        buf.write(u"\3\u01cc\3\u01cc\3\u01cc\7\u01cc\u1b2f\n\u01cc\f\u01cc")
        buf.write(u"\16\u01cc\u1b32\13\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write(u"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\7\u01cf\u1b48\n\u01cf\f\u01cf\16\u01cf")
        buf.write(u"\u1b4b\13\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write(u"\5\u01d0\u1b52\n\u01d0\3\u01d1\3\u01d1\5\u01d1\u1b56")
        buf.write(u"\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write(u"\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b61\n\u01d2\3\u01d2")
        buf.write(u"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b68\n\u01d2")
        buf.write(u"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b6f")
        buf.write(u"\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2")
        buf.write(u"\u1b76\n\u01d2\7\u01d2\u1b78\n\u01d2\f\u01d2\16\u01d2")
        buf.write(u"\u1b7b\13\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\5\u01d3\u1b9e\n\u01d3\3\u01d4\3\u01d4\5\u01d4\u1ba2")
        buf.write(u"\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5")
        buf.write(u"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5")
        buf.write(u"\3\u01d5\5\u01d5\u1bb2\n\u01d5\3\u01d5\3\u01d5\3\u01d5")
        buf.write(u"\3\u01d5\3\u01d5\5\u01d5\u1bb9\n\u01d5\3\u01d5\3\u01d5")
        buf.write(u"\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bc0\n\u01d5\3\u01d5")
        buf.write(u"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1bc7\n\u01d5")
        buf.write(u"\7\u01d5\u1bc9\n\u01d5\f\u01d5\16\u01d5\u1bcc\13\u01d5")
        buf.write(u"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1bd3")
        buf.write(u"\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7")
        buf.write(u"\7\u01d7\u1bdb\n\u01d7\f\u01d7\16\u01d7\u1bde\13\u01d7")
        buf.write(u"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8")
        buf.write(u"\3\u01d9\3\u01d9\5\u01d9\u1be9\n\u01d9\3\u01da\3\u01da")
        buf.write(u"\3\u01da\5\u01da\u1bee\n\u01da\3\u01db\3\u01db\3\u01db")
        buf.write(u"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write(u"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write(u"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write(u"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write(u"\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1c13\n\u01db")
        buf.write(u"\3\u01dc\3\u01dc\5\u01dc\u1c17\n\u01dc\3\u01dd\3\u01dd")
        buf.write(u"\3\u01dd\5\u01dd\u1c1c\n\u01dd\3\u01de\3\u01de\3\u01de")
        buf.write(u"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\5\u01de")
        buf.write(u"\u1c27\n\u01de\3\u01df\3\u01df\5\u01df\u1c2b\n\u01df")
        buf.write(u"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e1")
        buf.write(u"\3\u01e1\3\u01e1\3\u01e1\7\u01e1\u1c37\n\u01e1\f\u01e1")
        buf.write(u"\16\u01e1\u1c3a\13\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2")
        buf.write(u"\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1c45")
        buf.write(u"\n\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3")
        buf.write(u"\3\u01e3\3\u01e3\5\u01e3\u1c4f\n\u01e3\3\u01e4\3\u01e4")
        buf.write(u"\5\u01e4\u1c53\n\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5")
        buf.write(u"\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5")
        buf.write(u"\3\u01e5\3\u01e5\5\u01e5\u1c62\n\u01e5\3\u01e6\3\u01e6")
        buf.write(u"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1c6a\n\u01e6")
        buf.write(u"\3\u01e7\3\u01e7\5\u01e7\u1c6e\n\u01e7\3\u01e8\3\u01e8")
        buf.write(u"\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\5\u01e9")
        buf.write(u"\u1c78\n\u01e9\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01ec")
        buf.write(u"\3\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u1c84")
        buf.write(u"\n\u01ed\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1c89\n\u01ee")
        buf.write(u"\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1c8f\n\u01ef")
        buf.write(u"\3\u01f0\3\u01f0\5\u01f0\u1c93\n\u01f0\3\u01f1\3\u01f1")
        buf.write(u"\3\u01f1\3\u01f1\3\u01f1\7\u01f1\u1c9a\n\u01f1\f\u01f1")
        buf.write(u"\16\u01f1\u1c9d\13\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2")
        buf.write(u"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2")
        buf.write(u"\u1ca9\n\u01f2\3\u01f3\3\u01f3\3\u01f3\5\u01f3\u1cae")
        buf.write(u"\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4")
        buf.write(u"\3\u01f4\7\u01f4\u1cb7\n\u01f4\f\u01f4\16\u01f4\u1cba")
        buf.write(u"\13\u01f4\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1cbf\n\u01f5")
        buf.write(u"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\7\u01f6")
        buf.write(u"\u1cc7\n\u01f6\f\u01f6\16\u01f6\u1cca\13\u01f6\3\u01f7")
        buf.write(u"\3\u01f7\5\u01f7\u1cce\n\u01f7\3\u01f8\3\u01f8\3\u01f8")
        buf.write(u"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8")
        buf.write(u"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8")
        buf.write(u"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8")
        buf.write(u"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8")
        buf.write(u"\5\u01f8\u1cef\n\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\5\u01f9\u1cf5\n\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\3\u01f9\3\u01f9\5\u01f9\u1d12\n\u01f9\3\u01fa\3\u01fa")
        buf.write(u"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa")
        buf.write(u"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1d22")
        buf.write(u"\n\u01fa\3\u01fb\3\u01fb\5\u01fb\u1d26\n\u01fb\3\u01fb")
        buf.write(u"\3\u01fb\5\u01fb\u1d2a\n\u01fb\3\u01fb\3\u01fb\5\u01fb")
        buf.write(u"\u1d2e\n\u01fb\3\u01fb\5\u01fb\u1d31\n\u01fb\3\u01fc")
        buf.write(u"\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc")
        buf.write(u"\u1d3a\n\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd")
        buf.write(u"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd")
        buf.write(u"\u1d47\n\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe")
        buf.write(u"\3\u01fe\7\u01fe\u1d4f\n\u01fe\f\u01fe\16\u01fe\u1d52")
        buf.write(u"\13\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff")
        buf.write(u"\3\u01ff\3\u01ff\5\u01ff\u1d5c\n\u01ff\3\u0200\3\u0200")
        buf.write(u"\3\u0201\3\u0201\3\u0201\5\u0201\u1d63\n\u0201\3\u0202")
        buf.write(u"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202")
        buf.write(u"\u1d6c\n\u0202\3\u0203\3\u0203\5\u0203\u1d70\n\u0203")
        buf.write(u"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\7\u0204")
        buf.write(u"\u1d78\n\u0204\f\u0204\16\u0204\u1d7b\13\u0204\3\u0205")
        buf.write(u"\3\u0205\3\u0205\3\u0205\3\u0206\3\u0206\3\u0206\3\u0206")
        buf.write(u"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206")
        buf.write(u"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206")
        buf.write(u"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206")
        buf.write(u"\3\u0206\3\u0206\5\u0206\u1d9c\n\u0206\3\u0207\3\u0207")
        buf.write(u"\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207")
        buf.write(u"\7\u0207\u1da7\n\u0207\f\u0207\16\u0207\u1daa\13\u0207")
        buf.write(u"\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208")
        buf.write(u"\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208")
        buf.write(u"\5\u0208\u1dba\n\u0208\3\u0209\3\u0209\3\u0209\3\u0209")
        buf.write(u"\5\u0209\u1dc0\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a")
        buf.write(u"\3\u020a\3\u020a\3\u020a\5\u020a\u1dc9\n\u020a\3\u020b")
        buf.write(u"\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1dd0\n\u020b")
        buf.write(u"\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c")
        buf.write(u"\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c")
        buf.write(u"\3\u020c\3\u020c\5\u020c\u1de2\n\u020c\3\u020d\3\u020d")
        buf.write(u"\3\u020d\3\u020d\3\u020d\5\u020d\u1de9\n\u020d\3\u020e")
        buf.write(u"\3\u020e\5\u020e\u1ded\n\u020e\3\u020f\3\u020f\5\u020f")
        buf.write(u"\u1df1\n\u020f\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210")
        buf.write(u"\3\u0210\3\u0211\3\u0211\3\u0211\3\u0212\3\u0212\5\u0212")
        buf.write(u"\u1dfe\n\u0212\3\u0213\3\u0213\5\u0213\u1e02\n\u0213")
        buf.write(u"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0215")
        buf.write(u"\3\u0215\3\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216")
        buf.write(u"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216")
        buf.write(u"\3\u0216\5\u0216\u1e1a\n\u0216\3\u0217\3\u0217\5\u0217")
        buf.write(u"\u1e1e\n\u0217\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218")
        buf.write(u"\u1e24\n\u0218\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219")
        buf.write(u"\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219\3\u0219")
        buf.write(u"\3\u0219\3\u0219\3\u0219\3\u0219\5\u0219\u1e36\n\u0219")
        buf.write(u"\3\u021a\3\u021a\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b")
        buf.write(u"\3\u021b\5\u021b\u1e40\n\u021b\3\u021c\3\u021c\3\u021c")
        buf.write(u"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c")
        buf.write(u"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c")
        buf.write(u"\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c")
        buf.write(u"\3\u021c\3\u021c\3\u021c\3\u021c\5\u021c\u1e5e\n\u021c")
        buf.write(u"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d")
        buf.write(u"\u1e66\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\5\u021e\u1e79")
        buf.write(u"\n\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\7\u021e\u1f5f")
        buf.write(u"\n\u021e\f\u021e\16\u021e\u1f62\13\u021e\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\5\u021f\u1f6d\n\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\3\u021f\7\u021f\u1fb4\n\u021f\f\u021f\16\u021f")
        buf.write(u"\u1fb7\13\u021f\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220")
        buf.write(u"\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220")
        buf.write(u"\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220")
        buf.write(u"\5\u0220\u1fcc\n\u0220\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221")
        buf.write(u"\3\u0221\5\u0221\u20cf\n\u0221\3\u0222\3\u0222\3\u0222")
        buf.write(u"\3\u0222\3\u0222\5\u0222\u20d6\n\u0222\3\u0223\3\u0223")
        buf.write(u"\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223")
        buf.write(u"\3\u0223\3\u0223\5\u0223\u20e3\n\u0223\3\u0224\3\u0224")
        buf.write(u"\3\u0224\3\u0224\3\u0224\3\u0225\3\u0225\3\u0225\3\u0225")
        buf.write(u"\3\u0225\3\u0225\7\u0225\u20f0\n\u0225\f\u0225\16\u0225")
        buf.write(u"\u20f3\13\u0225\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226")
        buf.write(u"\5\u0226\u20fa\n\u0226\3\u0227\3\u0227\3\u0228\3\u0228")
        buf.write(u"\3\u0228\3\u0228\3\u0228\5\u0228\u2103\n\u0228\3\u0229")
        buf.write(u"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229")
        buf.write(u"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229")
        buf.write(u"\3\u0229\3\u0229\3\u0229\5\u0229\u2117\n\u0229\3\u022a")
        buf.write(u"\3\u022a\3\u022a\5\u022a\u211c\n\u022a\3\u022b\3\u022b")
        buf.write(u"\3\u022b\3\u022b\3\u022b\3\u022b\7\u022b\u2124\n\u022b")
        buf.write(u"\f\u022b\16\u022b\u2127\13\u022b\3\u022c\3\u022c\3\u022c")
        buf.write(u"\3\u022c\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\5\u022d")
        buf.write(u"\u2132\n\u022d\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e")
        buf.write(u"\3\u022e\3\u022e\3\u022f\3\u022f\5\u022f\u213d\n\u022f")
        buf.write(u"\3\u0230\3\u0230\3\u0230\3\u0230\5\u0230\u2143\n\u0230")
        buf.write(u"\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u214a")
        buf.write(u"\n\u0231\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232")
        buf.write(u"\5\u0232\u2152\n\u0232\3\u0233\3\u0233\3\u0233\3\u0233")
        buf.write(u"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233")
        buf.write(u"\3\u0233\5\u0233\u2160\n\u0233\3\u0234\3\u0234\3\u0234")
        buf.write(u"\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234")
        buf.write(u"\3\u0234\3\u0234\3\u0234\3\u0234\5\u0234\u2170\n\u0234")
        buf.write(u"\3\u0235\3\u0235\3\u0236\3\u0236\5\u0236\u2176\n\u0236")
        buf.write(u"\3\u0237\3\u0237\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238")
        buf.write(u"\3\u0238\5\u0238\u2180\n\u0238\3\u0239\3\u0239\3\u0239")
        buf.write(u"\3\u0239\3\u0239\3\u0239\5\u0239\u2188\n\u0239\3\u023a")
        buf.write(u"\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a")
        buf.write(u"\3\u023a\3\u023a\3\u023a\3\u023a\5\u023a\u2196\n\u023a")
        buf.write(u"\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\7\u023b")
        buf.write(u"\u219e\n\u023b\f\u023b\16\u023b\u21a1\13\u023b\3\u023c")
        buf.write(u"\3\u023c\3\u023c\3\u023c\3\u023c\3\u023c\7\u023c\u21a9")
        buf.write(u"\n\u023c\f\u023c\16\u023c\u21ac\13\u023c\3\u023d\3\u023d")
        buf.write(u"\3\u023d\3\u023d\3\u023d\5\u023d\u21b3\n\u023d\3\u023e")
        buf.write(u"\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\7\u023e\u21bb")
        buf.write(u"\n\u023e\f\u023e\16\u023e\u21be\13\u023e\3\u023f\3\u023f")
        buf.write(u"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f")
        buf.write(u"\3\u023f\5\u023f\u21ca\n\u023f\3\u0240\3\u0240\3\u0240")
        buf.write(u"\3\u0240\3\u0240\3\u0240\7\u0240\u21d2\n\u0240\f\u0240")
        buf.write(u"\16\u0240\u21d5\13\u0240\3\u0241\3\u0241\3\u0241\3\u0241")
        buf.write(u"\3\u0241\5\u0241\u21dc\n\u0241\3\u0242\3\u0242\3\u0242")
        buf.write(u"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\5\u0242\u21e6")
        buf.write(u"\n\u0242\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243")
        buf.write(u"\3\u0243\3\u0243\3\u0243\5\u0243\u21f1\n\u0243\3\u0244")
        buf.write(u"\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245")
        buf.write(u"\5\u0245\u21fb\n\u0245\3\u0246\3\u0246\3\u0246\3\u0246")
        buf.write(u"\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246")
        buf.write(u"\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\5\u0246\u220d")
        buf.write(u"\n\u0246\3\u0247\3\u0247\3\u0247\3\u0248\3\u0248\3\u0248")
        buf.write(u"\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249")
        buf.write(u"\5\u0249\u221c\n\u0249\3\u024a\3\u024a\3\u024a\3\u024a")
        buf.write(u"\3\u024a\5\u024a\u2223\n\u024a\3\u024b\3\u024b\3\u024b")
        buf.write(u"\3\u024b\3\u024b\3\u024b\3\u024c\3\u024c\3\u024c\3\u024c")
        buf.write(u"\3\u024c\7\u024c\u2230\n\u024c\f\u024c\16\u024c\u2233")
        buf.write(u"\13\u024c\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024e")
        buf.write(u"\3\u024e\3\u024e\5\u024e\u223d\n\u024e\3\u024f\3\u024f")
        buf.write(u"\5\u024f\u2241\n\u024f\3\u0250\3\u0250\3\u0250\3\u0250")
        buf.write(u"\5\u0250\u2247\n\u0250\3\u0251\3\u0251\3\u0251\3\u0251")
        buf.write(u"\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251")
        buf.write(u"\3\u0251\3\u0251\3\u0251\5\u0251\u2257\n\u0251\3\u0252")
        buf.write(u"\3\u0252\3\u0252\3\u0252\3\u0252\7\u0252\u225e\n\u0252")
        buf.write(u"\f\u0252\16\u0252\u2261\13\u0252\3\u0253\3\u0253\3\u0253")
        buf.write(u"\7\u0253\u2266\n\u0253\f\u0253\16\u0253\u2269\13\u0253")
        buf.write(u"\3\u0254\3\u0254\5\u0254\u226d\n\u0254\3\u0255\3\u0255")
        buf.write(u"\5\u0255\u2271\n\u0255\3\u0256\3\u0256\3\u0256\3\u0256")
        buf.write(u"\3\u0256\3\u0256\7\u0256\u2279\n\u0256\f\u0256\16\u0256")
        buf.write(u"\u227c\13\u0256\3\u0257\3\u0257\3\u0257\3\u0257\3\u0258")
        buf.write(u"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\7\u0258\u2288")
        buf.write(u"\n\u0258\f\u0258\16\u0258\u228b\13\u0258\3\u0259\3\u0259")
        buf.write(u"\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259")
        buf.write(u"\5\u0259\u2296\n\u0259\3\u025a\3\u025a\3\u025a\3\u025a")
        buf.write(u"\3\u025a\3\u025a\7\u025a\u229e\n\u025a\f\u025a\16\u025a")
        buf.write(u"\u22a1\13\u025a\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b")
        buf.write(u"\u22a7\n\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write(u"\3\u025c\7\u025c\u22af\n\u025c\f\u025c\16\u025c\u22b2")
        buf.write(u"\13\u025c\3\u025d\3\u025d\3\u025e\3\u025e\3\u025f\3\u025f")
        buf.write(u"\3\u0260\3\u0260\3\u0261\3\u0261\3\u0262\3\u0262\3\u0263")
        buf.write(u"\3\u0263\3\u0263\3\u0263\5\u0263\u22c4\n\u0263\3\u0264")
        buf.write(u"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264")
        buf.write(u"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264")
        buf.write(u"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264")
        buf.write(u"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264")
        buf.write(u"\3\u0264\3\u0264\5\u0264\u22e5\n\u0264\3\u0265\3\u0265")
        buf.write(u"\3\u0266\3\u0266\3\u0267\3\u0267\3\u0268\3\u0268\3\u0268")
        buf.write(u"\3\u0268\3\u0268\5\u0268\u22f2\n\u0268\3\u0269\3\u0269")
        buf.write(u"\3\u0269\5\u0269\u22f7\n\u0269\3\u026a\3\u026a\3\u026a")
        buf.write(u"\5\u026a\u22fc\n\u026a\3\u026b\3\u026b\3\u026b\3\u026b")
        buf.write(u"\3\u026b\5\u026b\u2303\n\u026b\3\u026c\3\u026c\3\u026d")
        buf.write(u"\3\u026d\3\u026e\3\u026e\3\u026e\2^\4\20\34\66BJNV\u0088")
        buf.write(u"\u008c\u00a4\u00aa\u00ac\u00ce\u00d8\u00da\u00fc\u010c")
        buf.write(u"\u0112\u0120\u012c\u0132\u013e\u0140\u014a\u0154\u0160")
        buf.write(u"\u0166\u018c\u0194\u01ae\u01b4\u01be\u01c8\u01cc\u01e6")
        buf.write(u"\u01f8\u0204\u020a\u0218\u0222\u0228\u022e\u023e\u024e")
        buf.write(u"\u0252\u0274\u027a\u0280\u028e\u02a0\u02b2\u02b6\u02c4")
        buf.write(u"\u02d0\u02d4\u02e4\u0304\u031e\u032a\u0334\u034c\u0360")
        buf.write(u"\u0378\u038c\u0396\u039c\u03a2\u03a8\u03ac\u03c0\u03e0")
        buf.write(u"\u03e6\u03ea\u03fa\u0406\u040c\u043a\u043c\u0448\u0454")
        buf.write(u"\u0474\u0476\u047a\u047e\u0496\u04a2\u04a4\u04aa\u04ae")
        buf.write(u"\u04b2\u04b6\u026f\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write(u"\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl")
        buf.write(u"nprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write(u"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write(u"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write(u"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write(u"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write(u"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write(u"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write(u"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write(u"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write(u"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write(u"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142")
        buf.write(u"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154")
        buf.write(u"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166")
        buf.write(u"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178")
        buf.write(u"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a")
        buf.write(u"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c")
        buf.write(u"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae")
        buf.write(u"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0")
        buf.write(u"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2")
        buf.write(u"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4")
        buf.write(u"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6")
        buf.write(u"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208")
        buf.write(u"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a")
        buf.write(u"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c")
        buf.write(u"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e")
        buf.write(u"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250")
        buf.write(u"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262")
        buf.write(u"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274")
        buf.write(u"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286")
        buf.write(u"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298")
        buf.write(u"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa")
        buf.write(u"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc")
        buf.write(u"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce")
        buf.write(u"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0")
        buf.write(u"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2")
        buf.write(u"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304")
        buf.write(u"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316")
        buf.write(u"\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328")
        buf.write(u"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a")
        buf.write(u"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c")
        buf.write(u"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e")
        buf.write(u"\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370")
        buf.write(u"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382")
        buf.write(u"\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394")
        buf.write(u"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6")
        buf.write(u"\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8")
        buf.write(u"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca")
        buf.write(u"\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc")
        buf.write(u"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee")
        buf.write(u"\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400")
        buf.write(u"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412")
        buf.write(u"\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424")
        buf.write(u"\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436")
        buf.write(u"\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448")
        buf.write(u"\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a")
        buf.write(u"\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c")
        buf.write(u"\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e")
        buf.write(u"\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490")
        buf.write(u"\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2")
        buf.write(u"\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4")
        buf.write(u"\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6")
        buf.write(u"\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8")
        buf.write(u"\u04da\2\34\4\2\u01be\u01be\u01c2\u01c2\3\2\u01c3\u01c4")
        buf.write(u"\4\2\20\20\u01ac\u01ac\4\2\u01c3\u01c4\u01cf\u01cf\3")
        buf.write(u"\2\u01db\u01dc\4\2\u01c3\u01c4\u01df\u01df\4\2\u01c3")
        buf.write(u"\u01c3\u01cf\u01cf\t\2\u01b4\u01b9\u01bd\u01bd\u01bf")
        buf.write(u"\u01c2\u01c5\u01c5\u01cd\u01ce\u01d9\u01da\u01e9\u0205")
        buf.write(u"\4\2\32\32\u0080\u0080\4\2rr\u00af\u00af\4\2\u009e\u009e")
        buf.write(u"\u0168\u0168\b\2\36\36NNUUpp\u00b6\u00b6\u0157\u0157")
        buf.write(u"\4\2\u0137\u0137\u0153\u0153\4\2\u009e\u009e\u00b2\u00b2")
        buf.write(u"\6\2\u00a1\u00a1\u0142\u0142\u015f\u015f\u0172\u0172")
        buf.write(u"\4\2\u00b5\u00b5\u015e\u015e\6\2tt\u00bf\u00bf\u0140")
        buf.write(u"\u0140\u017c\u017c\3\2\"#\3\2\u0137\u0138\4\2\u0096\u0096")
        buf.write(u"\u00ed\u00ed\4\2VV}}\5\2\36\36%%\u014f\u014f\6\2\4\5")
        buf.write(u"\t\13\17\20\22\23\"\2\62\63\65\66ABIIlm\u008e\u008e\u0092")
        buf.write(u"\u0092\u0097\u0097\u00a5\u00a5\u00bc\u00bc\u00c1\u00c2")
        buf.write(u"\u00c4\u00c4\u00d4\u00d4\u00ea\u00ea\u00ec\u00ec\u00ef")
        buf.write(u"\u00ef\u00f6\u00f6\u00f8\u00f8\u0105\u0105\u0109\u0109")
        buf.write(u"\u0113\u0113\u0115\u0115\u0121\u0121\u0137\u0137\u0148")
        buf.write(u"\u0148\u014d\u014d\u015a\u015a\u0166\u0167\u016b\u016b")
        buf.write(u"\u016d\u016d\u0184\u0185\u0196\u019e\26\2..\64\64KKQ")
        buf.write(u"Q\\\\bb\u009d\u009d\u009f\u009f\u00ae\u00ae\u00bb\u00bb")
        buf.write(u"\u00c7\u00c8\u00ca\u00ca\u00d5\u00d5\u00d7\u00d7\u00eb")
        buf.write(u"\u00eb\u00f3\u00f3\u0106\u0108\u0134\u0134\u014b\u014b")
        buf.write(u"\u0188\u0188:\2\36\36\"(++\67\67=>DDJJLLTT[[_aceooqq")
        buf.write(u"ww{|\u0082\u0082\u0086\u0086\u0089\u0089\u0093\u0093")
        buf.write(u"\u0095\u0095\u0099\u0099\u009b\u009b\u009e\u009e\u00a3")
        buf.write(u"\u00a3\u00a6\u00a6\u00a8\u00a8\u00b2\u00b2\u00b9\u00b9")
        buf.write(u"\u00c3\u00c3\u00c5\u00c5\u00d2\u00d2\u00d8\u00d8\u00dc")
        buf.write(u"\u00dd\u00f0\u00f0\u00f5\u00f5\u00fc\u00fc\u00fe\u00ff")
        buf.write(u"\u0103\u0104\u0111\u0111\u0119\u0119\u0126\u0126\u0131")
        buf.write(u"\u0131\u0140\u0140\u0146\u0146\u014f\u014f\u015b\u015b")
        buf.write(u"\u015e\u015e\u0165\u0165\u0168\u0169\u016e\u016e\u0176")
        buf.write(u"\u0177\u017d\u017e\u0186\u0186\u018c\u018d\u018f\u0190")
        buf.write(u"\u25f6\2\u04dc\3\2\2\2\4\u04e0\3\2\2\2\6\u04f4\3\2\2")
        buf.write(u"\2\b\u04f8\3\2\2\2\n\u04fa\3\2\2\2\f\u0509\3\2\2\2\16")
        buf.write(u"\u050b\3\2\2\2\20\u050d\3\2\2\2\22\u051d\3\2\2\2\24\u0533")
        buf.write(u"\3\2\2\2\26\u0539\3\2\2\2\30\u053b\3\2\2\2\32\u0542\3")
        buf.write(u"\2\2\2\34\u0544\3\2\2\2\36\u054f\3\2\2\2 \u0552\3\2\2")
        buf.write(u"\2\"\u0554\3\2\2\2$\u0558\3\2\2\2&\u055c\3\2\2\2(\u055e")
        buf.write(u"\3\2\2\2*\u0565\3\2\2\2,\u056a\3\2\2\2.\u056e\3\2\2\2")
        buf.write(u"\60\u0572\3\2\2\2\62\u0574\3\2\2\2\64\u0578\3\2\2\2\66")
        buf.write(u"\u057a\3\2\2\28\u059a\3\2\2\2:\u059c\3\2\2\2<\u059f\3")
        buf.write(u"\2\2\2>\u05a3\3\2\2\2@\u05ac\3\2\2\2B\u05ae\3\2\2\2D")
        buf.write(u"\u05b9\3\2\2\2F\u05bd\3\2\2\2H\u05bf\3\2\2\2J\u05c1\3")
        buf.write(u"\2\2\2L\u05cc\3\2\2\2N\u05d5\3\2\2\2P\u05e3\3\2\2\2R")
        buf.write(u"\u05e5\3\2\2\2T\u05ed\3\2\2\2V\u05ef\3\2\2\2X\u05f9\3")
        buf.write(u"\2\2\2Z\u0600\3\2\2\2\\\u0602\3\2\2\2^\u0606\3\2\2\2")
        buf.write(u"`\u060b\3\2\2\2b\u0610\3\2\2\2d\u0613\3\2\2\2f\u0615")
        buf.write(u"\3\2\2\2h\u0621\3\2\2\2j\u0623\3\2\2\2l\u0627\3\2\2\2")
        buf.write(u"n\u0629\3\2\2\2p\u062b\3\2\2\2r\u062d\3\2\2\2t\u0633")
        buf.write(u"\3\2\2\2v\u0635\3\2\2\2x\u0637\3\2\2\2z\u063a\3\2\2\2")
        buf.write(u"|\u063f\3\2\2\2~\u0644\3\2\2\2\u0080\u0646\3\2\2\2\u0082")
        buf.write(u"\u064a\3\2\2\2\u0084\u064d\3\2\2\2\u0086\u0652\3\2\2")
        buf.write(u"\2\u0088\u0654\3\2\2\2\u008a\u065e\3\2\2\2\u008c\u0663")
        buf.write(u"\3\2\2\2\u008e\u066e\3\2\2\2\u0090\u0670\3\2\2\2\u0092")
        buf.write(u"\u0672\3\2\2\2\u0094\u0674\3\2\2\2\u0096\u0676\3\2\2")
        buf.write(u"\2\u0098\u067d\3\2\2\2\u009a\u0681\3\2\2\2\u009c\u0686")
        buf.write(u"\3\2\2\2\u009e\u0688\3\2\2\2\u00a0\u068a\3\2\2\2\u00a2")
        buf.write(u"\u068c\3\2\2\2\u00a4\u068e\3\2\2\2\u00a6\u0708\3\2\2")
        buf.write(u"\2\u00a8\u070a\3\2\2\2\u00aa\u0712\3\2\2\2\u00ac\u071a")
        buf.write(u"\3\2\2\2\u00ae\u0736\3\2\2\2\u00b0\u0745\3\2\2\2\u00b2")
        buf.write(u"\u0747\3\2\2\2\u00b4\u074f\3\2\2\2\u00b6\u075b\3\2\2")
        buf.write(u"\2\u00b8\u075d\3\2\2\2\u00ba\u0763\3\2\2\2\u00bc\u076b")
        buf.write(u"\3\2\2\2\u00be\u0778\3\2\2\2\u00c0\u0782\3\2\2\2\u00c2")
        buf.write(u"\u0784\3\2\2\2\u00c4\u078c\3\2\2\2\u00c6\u0793\3\2\2")
        buf.write(u"\2\u00c8\u079d\3\2\2\2\u00ca\u07ab\3\2\2\2\u00cc\u07af")
        buf.write(u"\3\2\2\2\u00ce\u07b1\3\2\2\2\u00d0\u07bf\3\2\2\2\u00d2")
        buf.write(u"\u07c9\3\2\2\2\u00d4\u07d3\3\2\2\2\u00d6\u0800\3\2\2")
        buf.write(u"\2\u00d8\u0802\3\2\2\2\u00da\u080d\3\2\2\2\u00dc\u081a")
        buf.write(u"\3\2\2\2\u00de\u0823\3\2\2\2\u00e0\u0829\3\2\2\2\u00e2")
        buf.write(u"\u083b\3\2\2\2\u00e4\u0840\3\2\2\2\u00e6\u0844\3\2\2")
        buf.write(u"\2\u00e8\u0854\3\2\2\2\u00ea\u0859\3\2\2\2\u00ec\u085e")
        buf.write(u"\3\2\2\2\u00ee\u086e\3\2\2\2\u00f0\u0870\3\2\2\2\u00f2")
        buf.write(u"\u0877\3\2\2\2\u00f4\u0879\3\2\2\2\u00f6\u087b\3\2\2")
        buf.write(u"\2\u00f8\u0885\3\2\2\2\u00fa\u08b7\3\2\2\2\u00fc\u08b9")
        buf.write(u"\3\2\2\2\u00fe\u0969\3\2\2\2\u0100\u0970\3\2\2\2\u0102")
        buf.write(u"\u0975\3\2\2\2\u0104\u097a\3\2\2\2\u0106\u097f\3\2\2")
        buf.write(u"\2\u0108\u0981\3\2\2\2\u010a\u0988\3\2\2\2\u010c\u098a")
        buf.write(u"\3\2\2\2\u010e\u09a4\3\2\2\2\u0110\u09a6\3\2\2\2\u0112")
        buf.write(u"\u09ab\3\2\2\2\u0114\u09d0\3\2\2\2\u0116\u09d6\3\2\2")
        buf.write(u"\2\u0118\u09ee\3\2\2\2\u011a\u09f0\3\2\2\2\u011c\u09f5")
        buf.write(u"\3\2\2\2\u011e\u09fc\3\2\2\2\u0120\u09fe\3\2\2\2\u0122")
        buf.write(u"\u0a26\3\2\2\2\u0124\u0a2a\3\2\2\2\u0126\u0a2f\3\2\2")
        buf.write(u"\2\u0128\u0a36\3\2\2\2\u012a\u0a3a\3\2\2\2\u012c\u0a3c")
        buf.write(u"\3\2\2\2\u012e\u0a47\3\2\2\2\u0130\u0a52\3\2\2\2\u0132")
        buf.write(u"\u0a54\3\2\2\2\u0134\u0a5f\3\2\2\2\u0136\u0a95\3\2\2")
        buf.write(u"\2\u0138\u0aa3\3\2\2\2\u013a\u0aa7\3\2\2\2\u013c\u0aae")
        buf.write(u"\3\2\2\2\u013e\u0ab0\3\2\2\2\u0140\u0abb\3\2\2\2\u0142")
        buf.write(u"\u0ac9\3\2\2\2\u0144\u0acd\3\2\2\2\u0146\u0acf\3\2\2")
        buf.write(u"\2\u0148\u0ad4\3\2\2\2\u014a\u0ad9\3\2\2\2\u014c\u0ae9")
        buf.write(u"\3\2\2\2\u014e\u0b05\3\2\2\2\u0150\u0b0e\3\2\2\2\u0152")
        buf.write(u"\u0b10\3\2\2\2\u0154\u0b14\3\2\2\2\u0156\u0b20\3\2\2")
        buf.write(u"\2\u0158\u0b27\3\2\2\2\u015a\u0b5f\3\2\2\2\u015c\u0b64")
        buf.write(u"\3\2\2\2\u015e\u0b6b\3\2\2\2\u0160\u0b6d\3\2\2\2\u0162")
        buf.write(u"\u0b78\3\2\2\2\u0164\u0b81\3\2\2\2\u0166\u0b83\3\2\2")
        buf.write(u"\2\u0168\u0b99\3\2\2\2\u016a\u0ba1\3\2\2\2\u016c\u0bac")
        buf.write(u"\3\2\2\2\u016e\u0bae\3\2\2\2\u0170\u0bb2\3\2\2\2\u0172")
        buf.write(u"\u0bbe\3\2\2\2\u0174\u0bc6\3\2\2\2\u0176\u0bcf\3\2\2")
        buf.write(u"\2\u0178\u0bdd\3\2\2\2\u017a\u0be2\3\2\2\2\u017c\u0be9")
        buf.write(u"\3\2\2\2\u017e\u0beb\3\2\2\2\u0180\u0bef\3\2\2\2\u0182")
        buf.write(u"\u0bf7\3\2\2\2\u0184\u0c03\3\2\2\2\u0186\u0c05\3\2\2")
        buf.write(u"\2\u0188\u0c17\3\2\2\2\u018a\u0c1b\3\2\2\2\u018c\u0c1d")
        buf.write(u"\3\2\2\2\u018e\u0c46\3\2\2\2\u0190\u0c4a\3\2\2\2\u0192")
        buf.write(u"\u0c50\3\2\2\2\u0194\u0c52\3\2\2\2\u0196\u0c6f\3\2\2")
        buf.write(u"\2\u0198\u0c73\3\2\2\2\u019a\u0c79\3\2\2\2\u019c\u0c7e")
        buf.write(u"\3\2\2\2\u019e\u0c84\3\2\2\2\u01a0\u0c88\3\2\2\2\u01a2")
        buf.write(u"\u0c98\3\2\2\2\u01a4\u0c9c\3\2\2\2\u01a6\u0c9e\3\2\2")
        buf.write(u"\2\u01a8\u0ca8\3\2\2\2\u01aa\u0cb2\3\2\2\2\u01ac\u0cc7")
        buf.write(u"\3\2\2\2\u01ae\u0cc9\3\2\2\2\u01b0\u0cd7\3\2\2\2\u01b2")
        buf.write(u"\u0cd9\3\2\2\2\u01b4\u0cdf\3\2\2\2\u01b6\u0ce7\3\2\2")
        buf.write(u"\2\u01b8\u0d9c\3\2\2\2\u01ba\u0d9e\3\2\2\2\u01bc\u0dae")
        buf.write(u"\3\2\2\2\u01be\u0db0\3\2\2\2\u01c0\u0dbc\3\2\2\2\u01c2")
        buf.write(u"\u0dce\3\2\2\2\u01c4\u0ddf\3\2\2\2\u01c6\u0de7\3\2\2")
        buf.write(u"\2\u01c8\u0de9\3\2\2\2\u01ca\u0df4\3\2\2\2\u01cc\u0df9")
        buf.write(u"\3\2\2\2\u01ce\u0e0b\3\2\2\2\u01d0\u0e0d\3\2\2\2\u01d2")
        buf.write(u"\u0e10\3\2\2\2\u01d4\u0e12\3\2\2\2\u01d6\u0e14\3\2\2")
        buf.write(u"\2\u01d8\u0e22\3\2\2\2\u01da\u0e28\3\2\2\2\u01dc\u0e2c")
        buf.write(u"\3\2\2\2\u01de\u0e3a\3\2\2\2\u01e0\u0e4c\3\2\2\2\u01e2")
        buf.write(u"\u0e63\3\2\2\2\u01e4\u0e6b\3\2\2\2\u01e6\u0e6d\3\2\2")
        buf.write(u"\2\u01e8\u0e78\3\2\2\2\u01ea\u0e88\3\2\2\2\u01ec\u0e8a")
        buf.write(u"\3\2\2\2\u01ee\u0e96\3\2\2\2\u01f0\u0eaa\3\2\2\2\u01f2")
        buf.write(u"\u0eac\3\2\2\2\u01f4\u0eda\3\2\2\2\u01f6\u0ee0\3\2\2")
        buf.write(u"\2\u01f8\u0ee2\3\2\2\2\u01fa\u0ef4\3\2\2\2\u01fc\u0efb")
        buf.write(u"\3\2\2\2\u01fe\u0eff\3\2\2\2\u0200\u0f01\3\2\2\2\u0202")
        buf.write(u"\u0f09\3\2\2\2\u0204\u0f0e\3\2\2\2\u0206\u0f1c\3\2\2")
        buf.write(u"\2\u0208\u0f21\3\2\2\2\u020a\u0f23\3\2\2\2\u020c\u0f36")
        buf.write(u"\3\2\2\2\u020e\u0f48\3\2\2\2\u0210\u0f4a\3\2\2\2\u0212")
        buf.write(u"\u0f53\3\2\2\2\u0214\u0faf\3\2\2\2\u0216\u0fb1\3\2\2")
        buf.write(u"\2\u0218\u0fb5\3\2\2\2\u021a\u0fc5\3\2\2\2\u021c\u0fcc")
        buf.write(u"\3\2\2\2\u021e\u0fd5\3\2\2\2\u0220\u0fd7\3\2\2\2\u0222")
        buf.write(u"\u0fdb\3\2\2\2\u0224\u0fe6\3\2\2\2\u0226\u0fec\3\2\2")
        buf.write(u"\2\u0228\u0fee\3\2\2\2\u022a\u1012\3\2\2\2\u022c\u1014")
        buf.write(u"\3\2\2\2\u022e\u1022\3\2\2\2\u0230\u1049\3\2\2\2\u0232")
        buf.write(u"\u104d\3\2\2\2\u0234\u1052\3\2\2\2\u0236\u105b\3\2\2")
        buf.write(u"\2\u0238\u105f\3\2\2\2\u023a\u1061\3\2\2\2\u023c\u107a")
        buf.write(u"\3\2\2\2\u023e\u107c\3\2\2\2\u0240\u1093\3\2\2\2\u0242")
        buf.write(u"\u10a7\3\2\2\2\u0244\u10bb\3\2\2\2\u0246\u10bd\3\2\2")
        buf.write(u"\2\u0248\u10c3\3\2\2\2\u024a\u10e4\3\2\2\2\u024c\u10fe")
        buf.write(u"\3\2\2\2\u024e\u1100\3\2\2\2\u0250\u110f\3\2\2\2\u0252")
        buf.write(u"\u1111\3\2\2\2\u0254\u111d\3\2\2\2\u0256\u1128\3\2\2")
        buf.write(u"\2\u0258\u11be\3\2\2\2\u025a\u11d4\3\2\2\2\u025c\u11d8")
        buf.write(u"\3\2\2\2\u025e\u120b\3\2\2\2\u0260\u1210\3\2\2\2\u0262")
        buf.write(u"\u121e\3\2\2\2\u0264\u1222\3\2\2\2\u0266\u1228\3\2\2")
        buf.write(u"\2\u0268\u126c\3\2\2\2\u026a\u126e\3\2\2\2\u026c\u1272")
        buf.write(u"\3\2\2\2\u026e\u1274\3\2\2\2\u0270\u128f\3\2\2\2\u0272")
        buf.write(u"\u12a0\3\2\2\2\u0274\u12a2\3\2\2\2\u0276\u12b6\3\2\2")
        buf.write(u"\2\u0278\u12e4\3\2\2\2\u027a\u12e6\3\2\2\2\u027c\u12f4")
        buf.write(u"\3\2\2\2\u027e\u12fa\3\2\2\2\u0280\u12fc\3\2\2\2\u0282")
        buf.write(u"\u1307\3\2\2\2\u0284\u130a\3\2\2\2\u0286\u1322\3\2\2")
        buf.write(u"\2\u0288\u1328\3\2\2\2\u028a\u132e\3\2\2\2\u028c\u1330")
        buf.write(u"\3\2\2\2\u028e\u1336\3\2\2\2\u0290\u1347\3\2\2\2\u0292")
        buf.write(u"\u1364\3\2\2\2\u0294\u1366\3\2\2\2\u0296\u1368\3\2\2")
        buf.write(u"\2\u0298\u1379\3\2\2\2\u029a\u137d\3\2\2\2\u029c\u1381")
        buf.write(u"\3\2\2\2\u029e\u1386\3\2\2\2\u02a0\u1388\3\2\2\2\u02a2")
        buf.write(u"\u13a7\3\2\2\2\u02a4\u13ac\3\2\2\2\u02a6\u13b2\3\2\2")
        buf.write(u"\2\u02a8\u13b7\3\2\2\2\u02aa\u13bc\3\2\2\2\u02ac\u13dd")
        buf.write(u"\3\2\2\2\u02ae\u13e2\3\2\2\2\u02b0\u13ea\3\2\2\2\u02b2")
        buf.write(u"\u13ec\3\2\2\2\u02b4\u13fd\3\2\2\2\u02b6\u13ff\3\2\2")
        buf.write(u"\2\u02b8\u1419\3\2\2\2\u02ba\u1421\3\2\2\2\u02bc\u1423")
        buf.write(u"\3\2\2\2\u02be\u1425\3\2\2\2\u02c0\u1433\3\2\2\2\u02c2")
        buf.write(u"\u143e\3\2\2\2\u02c4\u1440\3\2\2\2\u02c6\u1469\3\2\2")
        buf.write(u"\2\u02c8\u1471\3\2\2\2\u02ca\u1478\3\2\2\2\u02cc\u147d")
        buf.write(u"\3\2\2\2\u02ce\u147f\3\2\2\2\u02d0\u1482\3\2\2\2\u02d2")
        buf.write(u"\u148d\3\2\2\2\u02d4\u1493\3\2\2\2\u02d6\u149f\3\2\2")
        buf.write(u"\2\u02d8\u14af\3\2\2\2\u02da\u14bf\3\2\2\2\u02dc\u14cf")
        buf.write(u"\3\2\2\2\u02de\u14e7\3\2\2\2\u02e0\u14ee\3\2\2\2\u02e2")
        buf.write(u"\u14f0\3\2\2\2\u02e4\u14f3\3\2\2\2\u02e6\u1500\3\2\2")
        buf.write(u"\2\u02e8\u1524\3\2\2\2\u02ea\u152b\3\2\2\2\u02ec\u152d")
        buf.write(u"\3\2\2\2\u02ee\u153a\3\2\2\2\u02f0\u154b\3\2\2\2\u02f2")
        buf.write(u"\u154d\3\2\2\2\u02f4\u1551\3\2\2\2\u02f6\u16a5\3\2\2")
        buf.write(u"\2\u02f8\u16a9\3\2\2\2\u02fa\u16ae\3\2\2\2\u02fc\u1764")
        buf.write(u"\3\2\2\2\u02fe\u17f4\3\2\2\2\u0300\u17f6\3\2\2\2\u0302")
        buf.write(u"\u180a\3\2\2\2\u0304\u180c\3\2\2\2\u0306\u181c\3\2\2")
        buf.write(u"\2\u0308\u1820\3\2\2\2\u030a\u1822\3\2\2\2\u030c\u1827")
        buf.write(u"\3\2\2\2\u030e\u1839\3\2\2\2\u0310\u183b\3\2\2\2\u0312")
        buf.write(u"\u1842\3\2\2\2\u0314\u1844\3\2\2\2\u0316\u184b\3\2\2")
        buf.write(u"\2\u0318\u1877\3\2\2\2\u031a\u187c\3\2\2\2\u031c\u1888")
        buf.write(u"\3\2\2\2\u031e\u188a\3\2\2\2\u0320\u1899\3\2\2\2\u0322")
        buf.write(u"\u18b1\3\2\2\2\u0324\u18bf\3\2\2\2\u0326\u18c1\3\2\2")
        buf.write(u"\2\u0328\u18c4\3\2\2\2\u032a\u18cc\3\2\2\2\u032c\u1915")
        buf.write(u"\3\2\2\2\u032e\u1919\3\2\2\2\u0330\u192a\3\2\2\2\u0332")
        buf.write(u"\u192c\3\2\2\2\u0334\u1931\3\2\2\2\u0336\u1939\3\2\2")
        buf.write(u"\2\u0338\u1946\3\2\2\2\u033a\u1948\3\2\2\2\u033c\u1981")
        buf.write(u"\3\2\2\2\u033e\u1985\3\2\2\2\u0340\u1987\3\2\2\2\u0342")
        buf.write(u"\u19d6\3\2\2\2\u0344\u19d8\3\2\2\2\u0346\u19f0\3\2\2")
        buf.write(u"\2\u0348\u19f5\3\2\2\2\u034a\u1a14\3\2\2\2\u034c\u1a16")
        buf.write(u"\3\2\2\2\u034e\u1a25\3\2\2\2\u0350\u1a2f\3\2\2\2\u0352")
        buf.write(u"\u1a31\3\2\2\2\u0354\u1a35\3\2\2\2\u0356\u1a39\3\2\2")
        buf.write(u"\2\u0358\u1a3d\3\2\2\2\u035a\u1a44\3\2\2\2\u035c\u1a56")
        buf.write(u"\3\2\2\2\u035e\u1a5f\3\2\2\2\u0360\u1a61\3\2\2\2\u0362")
        buf.write(u"\u1a6c\3\2\2\2\u0364\u1a72\3\2\2\2\u0366\u1a77\3\2\2")
        buf.write(u"\2\u0368\u1a79\3\2\2\2\u036a\u1a84\3\2\2\2\u036c\u1a8a")
        buf.write(u"\3\2\2\2\u036e\u1a9a\3\2\2\2\u0370\u1aa1\3\2\2\2\u0372")
        buf.write(u"\u1aad\3\2\2\2\u0374\u1aaf\3\2\2\2\u0376\u1abe\3\2\2")
        buf.write(u"\2\u0378\u1ac0\3\2\2\2\u037a\u1acb\3\2\2\2\u037c\u1ad1")
        buf.write(u"\3\2\2\2\u037e\u1ad3\3\2\2\2\u0380\u1ade\3\2\2\2\u0382")
        buf.write(u"\u1ae0\3\2\2\2\u0384\u1aeb\3\2\2\2\u0386\u1afd\3\2\2")
        buf.write(u"\2\u0388\u1b01\3\2\2\2\u038a\u1b03\3\2\2\2\u038c\u1b0c")
        buf.write(u"\3\2\2\2\u038e\u1b19\3\2\2\2\u0390\u1b1b\3\2\2\2\u0392")
        buf.write(u"\u1b1f\3\2\2\2\u0394\u1b25\3\2\2\2\u0396\u1b28\3\2\2")
        buf.write(u"\2\u0398\u1b33\3\2\2\2\u039a\u1b3b\3\2\2\2\u039c\u1b3d")
        buf.write(u"\3\2\2\2\u039e\u1b51\3\2\2\2\u03a0\u1b55\3\2\2\2\u03a2")
        buf.write(u"\u1b60\3\2\2\2\u03a4\u1b9d\3\2\2\2\u03a6\u1ba1\3\2\2")
        buf.write(u"\2\u03a8\u1bb1\3\2\2\2\u03aa\u1bd2\3\2\2\2\u03ac\u1bd4")
        buf.write(u"\3\2\2\2\u03ae\u1bdf\3\2\2\2\u03b0\u1be8\3\2\2\2\u03b2")
        buf.write(u"\u1bed\3\2\2\2\u03b4\u1c12\3\2\2\2\u03b6\u1c16\3\2\2")
        buf.write(u"\2\u03b8\u1c1b\3\2\2\2\u03ba\u1c26\3\2\2\2\u03bc\u1c2a")
        buf.write(u"\3\2\2\2\u03be\u1c2c\3\2\2\2\u03c0\u1c30\3\2\2\2\u03c2")
        buf.write(u"\u1c44\3\2\2\2\u03c4\u1c4e\3\2\2\2\u03c6\u1c52\3\2\2")
        buf.write(u"\2\u03c8\u1c61\3\2\2\2\u03ca\u1c69\3\2\2\2\u03cc\u1c6d")
        buf.write(u"\3\2\2\2\u03ce\u1c6f\3\2\2\2\u03d0\u1c77\3\2\2\2\u03d2")
        buf.write(u"\u1c79\3\2\2\2\u03d4\u1c7b\3\2\2\2\u03d6\u1c7d\3\2\2")
        buf.write(u"\2\u03d8\u1c83\3\2\2\2\u03da\u1c88\3\2\2\2\u03dc\u1c8e")
        buf.write(u"\3\2\2\2\u03de\u1c92\3\2\2\2\u03e0\u1c94\3\2\2\2\u03e2")
        buf.write(u"\u1ca8\3\2\2\2\u03e4\u1cad\3\2\2\2\u03e6\u1caf\3\2\2")
        buf.write(u"\2\u03e8\u1cbe\3\2\2\2\u03ea\u1cc0\3\2\2\2\u03ec\u1ccd")
        buf.write(u"\3\2\2\2\u03ee\u1cee\3\2\2\2\u03f0\u1d11\3\2\2\2\u03f2")
        buf.write(u"\u1d21\3\2\2\2\u03f4\u1d30\3\2\2\2\u03f6\u1d39\3\2\2")
        buf.write(u"\2\u03f8\u1d46\3\2\2\2\u03fa\u1d48\3\2\2\2\u03fc\u1d5b")
        buf.write(u"\3\2\2\2\u03fe\u1d5d\3\2\2\2\u0400\u1d62\3\2\2\2\u0402")
        buf.write(u"\u1d6b\3\2\2\2\u0404\u1d6f\3\2\2\2\u0406\u1d71\3\2\2")
        buf.write(u"\2\u0408\u1d7c\3\2\2\2\u040a\u1d9b\3\2\2\2\u040c\u1d9d")
        buf.write(u"\3\2\2\2\u040e\u1db9\3\2\2\2\u0410\u1dbf\3\2\2\2\u0412")
        buf.write(u"\u1dc8\3\2\2\2\u0414\u1dcf\3\2\2\2\u0416\u1de1\3\2\2")
        buf.write(u"\2\u0418\u1de8\3\2\2\2\u041a\u1dec\3\2\2\2\u041c\u1df0")
        buf.write(u"\3\2\2\2\u041e\u1df2\3\2\2\2\u0420\u1df8\3\2\2\2\u0422")
        buf.write(u"\u1dfd\3\2\2\2\u0424\u1e01\3\2\2\2\u0426\u1e03\3\2\2")
        buf.write(u"\2\u0428\u1e09\3\2\2\2\u042a\u1e19\3\2\2\2\u042c\u1e1d")
        buf.write(u"\3\2\2\2\u042e\u1e23\3\2\2\2\u0430\u1e35\3\2\2\2\u0432")
        buf.write(u"\u1e37\3\2\2\2\u0434\u1e3f\3\2\2\2\u0436\u1e5d\3\2\2")
        buf.write(u"\2\u0438\u1e65\3\2\2\2\u043a\u1e78\3\2\2\2\u043c\u1f6c")
        buf.write(u"\3\2\2\2\u043e\u1fcb\3\2\2\2\u0440\u20ce\3\2\2\2\u0442")
        buf.write(u"\u20d5\3\2\2\2\u0444\u20e2\3\2\2\2\u0446\u20e4\3\2\2")
        buf.write(u"\2\u0448\u20e9\3\2\2\2\u044a\u20f9\3\2\2\2\u044c\u20fb")
        buf.write(u"\3\2\2\2\u044e\u2102\3\2\2\2\u0450\u2116\3\2\2\2\u0452")
        buf.write(u"\u211b\3\2\2\2\u0454\u211d\3\2\2\2\u0456\u2128\3\2\2")
        buf.write(u"\2\u0458\u2131\3\2\2\2\u045a\u2133\3\2\2\2\u045c\u213c")
        buf.write(u"\3\2\2\2\u045e\u2142\3\2\2\2\u0460\u2149\3\2\2\2\u0462")
        buf.write(u"\u2151\3\2\2\2\u0464\u215f\3\2\2\2\u0466\u216f\3\2\2")
        buf.write(u"\2\u0468\u2171\3\2\2\2\u046a\u2175\3\2\2\2\u046c\u2177")
        buf.write(u"\3\2\2\2\u046e\u217f\3\2\2\2\u0470\u2187\3\2\2\2\u0472")
        buf.write(u"\u2195\3\2\2\2\u0474\u2197\3\2\2\2\u0476\u21a2\3\2\2")
        buf.write(u"\2\u0478\u21b2\3\2\2\2\u047a\u21b4\3\2\2\2\u047c\u21c9")
        buf.write(u"\3\2\2\2\u047e\u21cb\3\2\2\2\u0480\u21db\3\2\2\2\u0482")
        buf.write(u"\u21e5\3\2\2\2\u0484\u21f0\3\2\2\2\u0486\u21f2\3\2\2")
        buf.write(u"\2\u0488\u21fa\3\2\2\2\u048a\u220c\3\2\2\2\u048c\u220e")
        buf.write(u"\3\2\2\2\u048e\u2211\3\2\2\2\u0490\u221b\3\2\2\2\u0492")
        buf.write(u"\u2222\3\2\2\2\u0494\u2224\3\2\2\2\u0496\u222a\3\2\2")
        buf.write(u"\2\u0498\u2234\3\2\2\2\u049a\u223c\3\2\2\2\u049c\u2240")
        buf.write(u"\3\2\2\2\u049e\u2246\3\2\2\2\u04a0\u2256\3\2\2\2\u04a2")
        buf.write(u"\u2258\3\2\2\2\u04a4\u2262\3\2\2\2\u04a6\u226c\3\2\2")
        buf.write(u"\2\u04a8\u2270\3\2\2\2\u04aa\u2272\3\2\2\2\u04ac\u227d")
        buf.write(u"\3\2\2\2\u04ae\u2281\3\2\2\2\u04b0\u2295\3\2\2\2\u04b2")
        buf.write(u"\u2297\3\2\2\2\u04b4\u22a6\3\2\2\2\u04b6\u22a8\3\2\2")
        buf.write(u"\2\u04b8\u22b3\3\2\2\2\u04ba\u22b5\3\2\2\2\u04bc\u22b7")
        buf.write(u"\3\2\2\2\u04be\u22b9\3\2\2\2\u04c0\u22bb\3\2\2\2\u04c2")
        buf.write(u"\u22bd\3\2\2\2\u04c4\u22c3\3\2\2\2\u04c6\u22e4\3\2\2")
        buf.write(u"\2\u04c8\u22e6\3\2\2\2\u04ca\u22e8\3\2\2\2\u04cc\u22ea")
        buf.write(u"\3\2\2\2\u04ce\u22f1\3\2\2\2\u04d0\u22f6\3\2\2\2\u04d2")
        buf.write(u"\u22fb\3\2\2\2\u04d4\u2302\3\2\2\2\u04d6\u2304\3\2\2")
        buf.write(u"\2\u04d8\u2306\3\2\2\2\u04da\u2308\3\2\2\2\u04dc\u04dd")
        buf.write(u"\5\4\3\2\u04dd\u04de\5\n\6\2\u04de\u04df\5\b\5\2\u04df")
        buf.write(u"\3\3\2\2\2\u04e0\u04e5\b\3\1\2\u04e1\u04e2\f\3\2\2\u04e2")
        buf.write(u"\u04e4\5\6\4\2\u04e3\u04e1\3\2\2\2\u04e4\u04e7\3\2\2")
        buf.write(u"\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\5\3")
        buf.write(u"\2\2\2\u04e7\u04e5\3\2\2\2\u04e8\u04e9\7\24\2\2\u04e9")
        buf.write(u"\u04ea\7\u01b4\2\2\u04ea\u04f5\7\u01b5\2\2\u04eb\u04ec")
        buf.write(u"\7\24\2\2\u04ec\u04ed\7\u01b6\2\2\u04ed\u04f5\7\u01b7")
        buf.write(u"\2\2\u04ee\u04ef\7\24\2\2\u04ef\u04f0\7\u01b6\2\2\u04f0")
        buf.write(u"\u04f5\7\u01b8\2\2\u04f1\u04f2\7\24\2\2\u04f2\u04f3\7")
        buf.write(u"\u01b6\2\2\u04f3\u04f5\7\u01b9\2\2\u04f4\u04e8\3\2\2")
        buf.write(u"\2\u04f4\u04eb\3\2\2\2\u04f4\u04ee\3\2\2\2\u04f4\u04f1")
        buf.write(u"\3\2\2\2\u04f5\7\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04f9")
        buf.write(u"\7\21\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f7\3\2\2\2\u04f9")
        buf.write(u"\t\3\2\2\2\u04fa\u04fb\5\f\7\2\u04fb\u04fc\7\u01ba\2")
        buf.write(u"\2\u04fc\u04fd\5\64\33\2\u04fd\u04fe\5\u0086D\2\u04fe")
        buf.write(u"\u04ff\7\u01bb\2\2\u04ff\u0500\5\u009aN\2\u0500\13\3")
        buf.write(u"\2\2\2\u0501\u050a\5\u0098M\2\u0502\u0503\5\u0098M\2")
        buf.write(u"\u0503\u0504\5\16\b\2\u0504\u050a\3\2\2\2\u0505\u0506")
        buf.write(u"\5\u0098M\2\u0506\u0507\5\16\b\2\u0507\u0508\5\20\t\2")
        buf.write(u"\u0508\u050a\3\2\2\2\u0509\u0501\3\2\2\2\u0509\u0502")
        buf.write(u"\3\2\2\2\u0509\u0505\3\2\2\2\u050a\r\3\2\2\2\u050b\u050c")
        buf.write(u"\7\u01bc\2\2\u050c\17\3\2\2\2\u050d\u050e\b\t\1\2\u050e")
        buf.write(u"\u050f\5\22\n\2\u050f\u0514\3\2\2\2\u0510\u0511\f\4\2")
        buf.write(u"\2\u0511\u0513\5\22\n\2\u0512\u0510\3\2\2\2\u0513\u0516")
        buf.write(u"\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write(u"\21\3\2\2\2\u0516\u0514\3\2\2\2\u0517\u051e\5\24\13\2")
        buf.write(u"\u0518\u051e\7\u01bc\2\2\u0519\u051a\7\u01aa\2\2\u051a")
        buf.write(u"\u051b\5\u009eP\2\u051b\u051c\7\u01ab\2\2\u051c\u051e")
        buf.write(u"\3\2\2\2\u051d\u0517\3\2\2\2\u051d\u0518\3\2\2\2\u051d")
        buf.write(u"\u0519\3\2\2\2\u051e\23\3\2\2\2\u051f\u0520\5$\23\2\u0520")
        buf.write(u"\u0521\5&\24\2\u0521\u0522\5(\25\2\u0522\u0523\5*\26")
        buf.write(u"\2\u0523\u0524\5,\27\2\u0524\u0525\5.\30\2\u0525\u0534")
        buf.write(u"\3\2\2\2\u0526\u0527\5$\23\2\u0527\u0528\7\u01bd\2\2")
        buf.write(u"\u0528\u0529\7\u01be\2\2\u0529\u052a\5\"\22\2\u052a\u052b")
        buf.write(u"\7\21\2\2\u052b\u0534\3\2\2\2\u052c\u052d\5$\23\2\u052d")
        buf.write(u"\u052e\5\26\f\2\u052e\u052f\7\u01bf\2\2\u052f\u0530\5")
        buf.write(u"\32\16\2\u0530\u0531\5 \21\2\u0531\u0532\5\30\r\2\u0532")
        buf.write(u"\u0534\3\2\2\2\u0533\u051f\3\2\2\2\u0533\u0526\3\2\2")
        buf.write(u"\2\u0533\u052c\3\2\2\2\u0534\25\3\2\2\2\u0535\u053a\3")
        buf.write(u"\2\2\2\u0536\u0537\7\u01c0\2\2\u0537\u053a\7\u01c1\2")
        buf.write(u"\2\u0538\u053a\7\u01c1\2\2\u0539\u0535\3\2\2\2\u0539")
        buf.write(u"\u0536\3\2\2\2\u0539\u0538\3\2\2\2\u053a\27\3\2\2\2\u053b")
        buf.write(u"\u053c\3\2\2\2\u053c\31\3\2\2\2\u053d\u0543\3\2\2\2\u053e")
        buf.write(u"\u053f\7\r\2\2\u053f\u0540\5\34\17\2\u0540\u0541\7\7")
        buf.write(u"\2\2\u0541\u0543\3\2\2\2\u0542\u053d\3\2\2\2\u0542\u053e")
        buf.write(u"\3\2\2\2\u0543\33\3\2\2\2\u0544\u0545\b\17\1\2\u0545")
        buf.write(u"\u0546\5\36\20\2\u0546\u054c\3\2\2\2\u0547\u0548\f\3")
        buf.write(u"\2\2\u0548\u0549\7\b\2\2\u0549\u054b\5\36\20\2\u054a")
        buf.write(u"\u0547\3\2\2\2\u054b\u054e\3\2\2\2\u054c\u054a\3\2\2")
        buf.write(u"\2\u054c\u054d\3\2\2\2\u054d\35\3\2\2\2\u054e\u054c\3")
        buf.write(u"\2\2\2\u054f\u0550\5$\23\2\u0550\u0551\5(\25\2\u0551")
        buf.write(u"\37\3\2\2\2\u0552\u0553\t\2\2\2\u0553!\3\2\2\2\u0554")
        buf.write(u"\u0555\t\3\2\2\u0555#\3\2\2\2\u0556\u0559\7\u01c3\2\2")
        buf.write(u"\u0557\u0559\5\u00a0Q\2\u0558\u0556\3\2\2\2\u0558\u0557")
        buf.write(u"\3\2\2\2\u0559%\3\2\2\2\u055a\u055d\3\2\2\2\u055b\u055d")
        buf.write(u"\7\u01c5\2\2\u055c\u055a\3\2\2\2\u055c\u055b\3\2\2\2")
        buf.write(u"\u055d\'\3\2\2\2\u055e\u055f\3\2\2\2\u055f)\3\2\2\2\u0560")
        buf.write(u"\u0566\3\2\2\2\u0561\u0562\7\u01c6\2\2\u0562\u0566\7")
        buf.write(u"\u01c3\2\2\u0563\u0564\7\u01c6\2\2\u0564\u0566\7\u01c4")
        buf.write(u"\2\2\u0565\u0560\3\2\2\2\u0565\u0561\3\2\2\2\u0565\u0563")
        buf.write(u"\3\2\2\2\u0566+\3\2\2\2\u0567\u056b\3\2\2\2\u0568\u0569")
        buf.write(u"\7\u01c7\2\2\u0569\u056b\7\u01c8\2\2\u056a\u0567\3\2")
        buf.write(u"\2\2\u056a\u0568\3\2\2\2\u056b-\3\2\2\2\u056c\u056f\7")
        buf.write(u"\21\2\2\u056d\u056f\5\60\31\2\u056e\u056c\3\2\2\2\u056e")
        buf.write(u"\u056d\3\2\2\2\u056f/\3\2\2\2\u0570\u0573\5\62\32\2\u0571")
        buf.write(u"\u0573\7\u01c9\2\2\u0572\u0570\3\2\2\2\u0572\u0571\3")
        buf.write(u"\2\2\2\u0573\61\3\2\2\2\u0574\u0575\t\4\2\2\u0575\63")
        buf.write(u"\3\2\2\2\u0576\u0579\3\2\2\2\u0577\u0579\5\66\34\2\u0578")
        buf.write(u"\u0576\3\2\2\2\u0578\u0577\3\2\2\2\u0579\65\3\2\2\2\u057a")
        buf.write(u"\u057b\b\34\1\2\u057b\u057c\58\35\2\u057c\u0581\3\2\2")
        buf.write(u"\2\u057d\u057e\f\4\2\2\u057e\u0580\58\35\2\u057f\u057d")
        buf.write(u"\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0581")
        buf.write(u"\u0582\3\2\2\2\u0582\67\3\2\2\2\u0583\u0581\3\2\2\2\u0584")
        buf.write(u"\u0585\5\n\6\2\u0585\u0586\7\21\2\2\u0586\u059b\3\2\2")
        buf.write(u"\2\u0587\u059b\5<\37\2\u0588\u059b\5L\'\2\u0589\u059b")
        buf.write(u"\5R*\2\u058a\u059b\5\\/\2\u058b\u059b\5^\60\2\u058c\u059b")
        buf.write(u"\5`\61\2\u058d\u059b\5f\64\2\u058e\u059b\5j\66\2\u058f")
        buf.write(u"\u059b\5n8\2\u0590\u059b\5p9\2\u0591\u059b\5t;\2\u0592")
        buf.write(u"\u059b\5v<\2\u0593\u059b\5:\36\2\u0594\u059b\5> \2\u0595")
        buf.write(u"\u059b\5x=\2\u0596\u059b\5z>\2\u0597\u059b\5|?\2\u0598")
        buf.write(u"\u059b\5\u0080A\2\u0599\u059b\5\u0082B\2\u059a\u0584")
        buf.write(u"\3\2\2\2\u059a\u0587\3\2\2\2\u059a\u0588\3\2\2\2\u059a")
        buf.write(u"\u0589\3\2\2\2\u059a\u058a\3\2\2\2\u059a\u058b\3\2\2")
        buf.write(u"\2\u059a\u058c\3\2\2\2\u059a\u058d\3\2\2\2\u059a\u058e")
        buf.write(u"\3\2\2\2\u059a\u058f\3\2\2\2\u059a\u0590\3\2\2\2\u059a")
        buf.write(u"\u0591\3\2\2\2\u059a\u0592\3\2\2\2\u059a\u0593\3\2\2")
        buf.write(u"\2\u059a\u0594\3\2\2\2\u059a\u0595\3\2\2\2\u059a\u0596")
        buf.write(u"\3\2\2\2\u059a\u0597\3\2\2\2\u059a\u0598\3\2\2\2\u059a")
        buf.write(u"\u0599\3\2\2\2\u059b9\3\2\2\2\u059c\u059d\7\u01ca\2\2")
        buf.write(u"\u059d\u059e\5\u0090I\2\u059e;\3\2\2\2\u059f\u05a0\5")
        buf.write(u"J&\2\u05a0\u05a1\5\62\32\2\u05a1\u05a2\5\u0090I\2\u05a2")
        buf.write(u"=\3\2\2\2\u05a3\u05a4\7\u01cb\2\2\u05a4\u05a5\5@!\2\u05a5")
        buf.write(u"\u05a6\7\u01cc\2\2\u05a6\u05a7\5B\"\2\u05a7\u05a8\7\21")
        buf.write(u"\2\2\u05a8?\3\2\2\2\u05a9\u05ad\3\2\2\2\u05aa\u05ad\7")
        buf.write(u"\u01cd\2\2\u05ab\u05ad\7\u01ce\2\2\u05ac\u05a9\3\2\2")
        buf.write(u"\2\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3\2\2\2\u05adA\3\2")
        buf.write(u"\2\2\u05ae\u05af\b\"\1\2\u05af\u05b0\5D#\2\u05b0\u05b6")
        buf.write(u"\3\2\2\2\u05b1\u05b2\f\4\2\2\u05b2\u05b3\7\b\2\2\u05b3")
        buf.write(u"\u05b5\5D#\2\u05b4\u05b1\3\2\2\2\u05b5\u05b8\3\2\2\2")
        buf.write(u"\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7C\3\2\2")
        buf.write(u"\2\u05b8\u05b6\3\2\2\2\u05b9\u05ba\5H%\2\u05ba\u05bb")
        buf.write(u"\5\62\32\2\u05bb\u05bc\5F$\2\u05bcE\3\2\2\2\u05bd\u05be")
        buf.write(u"\3\2\2\2\u05beG\3\2\2\2\u05bf\u05c0\t\5\2\2\u05c0I\3")
        buf.write(u"\2\2\2\u05c1\u05c2\b&\1\2\u05c2\u05c3\7\u01cf\2\2\u05c3")
        buf.write(u"\u05c9\3\2\2\2\u05c4\u05c5\f\3\2\2\u05c5\u05c6\7\f\2")
        buf.write(u"\2\u05c6\u05c8\5\u0092J\2\u05c7\u05c4\3\2\2\2\u05c8\u05cb")
        buf.write(u"\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write(u"K\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc\u05cd\7\u01d0\2\2")
        buf.write(u"\u05cd\u05ce\5\u0094K\2\u05ce\u05cf\5\64\33\2\u05cf\u05d0")
        buf.write(u"\5N(\2\u05d0\u05d1\5P)\2\u05d1\u05d2\7\u01bb\2\2\u05d2")
        buf.write(u"\u05d3\7\u01d0\2\2\u05d3\u05d4\7\21\2\2\u05d4M\3\2\2")
        buf.write(u"\2\u05d5\u05dd\b(\1\2\u05d6\u05d7\f\3\2\2\u05d7\u05d8")
        buf.write(u"\7\u01d1\2\2\u05d8\u05d9\5\u0094K\2\u05d9\u05da\5\64")
        buf.write(u"\33\2\u05da\u05dc\3\2\2\2\u05db\u05d6\3\2\2\2\u05dc\u05df")
        buf.write(u"\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05de")
        buf.write(u"O\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e4\3\2\2\2\u05e1")
        buf.write(u"\u05e2\7\u01d2\2\2\u05e2\u05e4\5\64\33\2\u05e3\u05e0")
        buf.write(u"\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4Q\3\2\2\2\u05e5\u05e6")
        buf.write(u"\7\u01d3\2\2\u05e6\u05e7\5T+\2\u05e7\u05e8\5V,\2\u05e8")
        buf.write(u"\u05e9\5Z.\2\u05e9\u05ea\7\u01bb\2\2\u05ea\u05eb\7\u01d3")
        buf.write(u"\2\2\u05eb\u05ec\7\21\2\2\u05ecS\3\2\2\2\u05ed\u05ee")
        buf.write(u"\3\2\2\2\u05eeU\3\2\2\2\u05ef\u05f0\b,\1\2\u05f0\u05f1")
        buf.write(u"\5X-\2\u05f1\u05f6\3\2\2\2\u05f2\u05f3\f\4\2\2\u05f3")
        buf.write(u"\u05f5\5X-\2\u05f4\u05f2\3\2\2\2\u05f5\u05f8\3\2\2\2")
        buf.write(u"\u05f6\u05f4\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7W\3\2\2")
        buf.write(u"\2\u05f8\u05f6\3\2\2\2\u05f9\u05fa\7\u01d4\2\2\u05fa")
        buf.write(u"\u05fb\5\u0094K\2\u05fb\u05fc\5\64\33\2\u05fcY\3\2\2")
        buf.write(u"\2\u05fd\u0601\3\2\2\2\u05fe\u05ff\7\u01d2\2\2\u05ff")
        buf.write(u"\u0601\5\64\33\2\u0600\u05fd\3\2\2\2\u0600\u05fe\3\2")
        buf.write(u"\2\2\u0601[\3\2\2\2\u0602\u0603\5\u0098M\2\u0603\u0604")
        buf.write(u"\7\u01d5\2\2\u0604\u0605\5r:\2\u0605]\3\2\2\2\u0606\u0607")
        buf.write(u"\5\u0098M\2\u0607\u0608\7\u01d6\2\2\u0608\u0609\5\u0096")
        buf.write(u"L\2\u0609\u060a\5r:\2\u060a_\3\2\2\2\u060b\u060c\5\u0098")
        buf.write(u"M\2\u060c\u060d\7\u01be\2\2\u060d\u060e\5b\62\2\u060e")
        buf.write(u"\u060f\5r:\2\u060fa\3\2\2\2\u0610\u0611\5d\63\2\u0611")
        buf.write(u"\u0612\7\u01d7\2\2\u0612c\3\2\2\2\u0613\u0614\t\5\2\2")
        buf.write(u"\u0614e\3\2\2\2\u0615\u0616\5\u0098M\2\u0616\u0617\7")
        buf.write(u"\u01d8\2\2\u0617\u0618\5d\63\2\u0618\u0619\5h\65\2\u0619")
        buf.write(u"\u061a\7\u01d7\2\2\u061a\u061b\7\u01d9\2\2\u061b\u061c")
        buf.write(u"\5\u0096L\2\u061c\u061d\5r:\2\u061dg\3\2\2\2\u061e\u0622")
        buf.write(u"\3\2\2\2\u061f\u0620\7\u01da\2\2\u0620\u0622\7\u01ad")
        buf.write(u"\2\2\u0621\u061e\3\2\2\2\u0621\u061f\3\2\2\2\u0622i\3")
        buf.write(u"\2\2\2\u0623\u0624\5l\67\2\u0624\u0625\5\u009aN\2\u0625")
        buf.write(u"\u0626\5\u009cO\2\u0626k\3\2\2\2\u0627\u0628\t\6\2\2")
        buf.write(u"\u0628m\3\2\2\2\u0629\u062a\7\u01dd\2\2\u062ao\3\2\2")
        buf.write(u"\2\u062b\u062c\7\u01de\2\2\u062cq\3\2\2\2\u062d\u062e")
        buf.write(u"\5\64\33\2\u062e\u062f\7\u01bb\2\2\u062f\u0630\7\u01d5")
        buf.write(u"\2\2\u0630\u0631\5\u009aN\2\u0631\u0632\7\21\2\2\u0632")
        buf.write(u"s\3\2\2\2\u0633\u0634\t\7\2\2\u0634u\3\2\2\2\u0635\u0636")
        buf.write(u"\7\u01e0\2\2\u0636w\3\2\2\2\u0637\u0638\7\u01e1\2\2\u0638")
        buf.write(u"\u0639\5\u0084C\2\u0639y\3\2\2\2\u063a\u063b\7\u01e2")
        buf.write(u"\2\2\u063b\u063c\5~@\2\u063c\u063d\5\u0084C\2\u063d\u063e")
        buf.write(u"\7\u01e3\2\2\u063e{\3\2\2\2\u063f\u0640\7\u01e4\2\2\u0640")
        buf.write(u"\u0641\5~@\2\u0641\u0642\5\u0084C\2\u0642\u0643\7\21")
        buf.write(u"\2\2\u0643}\3\2\2\2\u0644\u0645\3\2\2\2\u0645\177\3\2")
        buf.write(u"\2\2\u0646\u0647\7\u01e5\2\2\u0647\u0648\5\u0084C\2\u0648")
        buf.write(u"\u0649\7\21\2\2\u0649\u0081\3\2\2\2\u064a\u064b\7\u01c8")
        buf.write(u"\2\2\u064b\u064c\7\21\2\2\u064c\u0083\3\2\2\2\u064d\u064e")
        buf.write(u"\t\5\2\2\u064e\u0085\3\2\2\2\u064f\u0653\3\2\2\2\u0650")
        buf.write(u"\u0651\7\u01e6\2\2\u0651\u0653\5\u0088E\2\u0652\u064f")
        buf.write(u"\3\2\2\2\u0652\u0650\3\2\2\2\u0653\u0087\3\2\2\2\u0654")
        buf.write(u"\u0655\bE\1\2\u0655\u0656\5\u008aF\2\u0656\u065b\3\2")
        buf.write(u"\2\2\u0657\u0658\f\4\2\2\u0658\u065a\5\u008aF\2\u0659")
        buf.write(u"\u0657\3\2\2\2\u065a\u065d\3\2\2\2\u065b\u0659\3\2\2")
        buf.write(u"\2\u065b\u065c\3\2\2\2\u065c\u0089\3\2\2\2\u065d\u065b")
        buf.write(u"\3\2\2\2\u065e\u065f\7\u01d4\2\2\u065f\u0660\5\u008c")
        buf.write(u"G\2\u0660\u0661\7\u01e7\2\2\u0661\u0662\5\64\33\2\u0662")
        buf.write(u"\u008b\3\2\2\2\u0663\u0664\bG\1\2\u0664\u0665\5\u008e")
        buf.write(u"H\2\u0665\u066b\3\2\2\2\u0666\u0667\f\4\2\2\u0667\u0668")
        buf.write(u"\7\u01e8\2\2\u0668\u066a\5\u008eH\2\u0669\u0666\3\2\2")
        buf.write(u"\2\u066a\u066d\3\2\2\2\u066b\u0669\3\2\2\2\u066b\u066c")
        buf.write(u"\3\2\2\2\u066c\u008d\3\2\2\2\u066d\u066b\3\2\2\2\u066e")
        buf.write(u"\u066f\5\u009eP\2\u066f\u008f\3\2\2\2\u0670\u0671\3\2")
        buf.write(u"\2\2\u0671\u0091\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0093")
        buf.write(u"\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0095\3\2\2\2\u0676")
        buf.write(u"\u0677\3\2\2\2\u0677\u0097\3\2\2\2\u0678\u067e\3\2\2")
        buf.write(u"\2\u0679\u067a\7\u01aa\2\2\u067a\u067b\5\u009eP\2\u067b")
        buf.write(u"\u067c\7\u01ab\2\2\u067c\u067e\3\2\2\2\u067d\u0678\3")
        buf.write(u"\2\2\2\u067d\u0679\3\2\2\2\u067e\u0099\3\2\2\2\u067f")
        buf.write(u"\u0682\3\2\2\2\u0680\u0682\5\u009eP\2\u0681\u067f\3\2")
        buf.write(u"\2\2\u0681\u0680\3\2\2\2\u0682\u009b\3\2\2\2\u0683\u0687")
        buf.write(u"\7\21\2\2\u0684\u0685\7\u01d4\2\2\u0685\u0687\5\u0090")
        buf.write(u"I\2\u0686\u0683\3\2\2\2\u0686\u0684\3\2\2\2\u0687\u009d")
        buf.write(u"\3\2\2\2\u0688\u0689\t\b\2\2\u0689\u009f\3\2\2\2\u068a")
        buf.write(u"\u068b\t\t\2\2\u068b\u00a1\3\2\2\2\u068c\u068d\5\u00a4")
        buf.write(u"S\2\u068d\u00a3\3\2\2\2\u068e\u068f\bS\1\2\u068f\u0690")
        buf.write(u"\5\u00a6T\2\u0690\u0696\3\2\2\2\u0691\u0692\f\4\2\2\u0692")
        buf.write(u"\u0693\7\21\2\2\u0693\u0695\5\u00a6T\2\u0694\u0691\3")
        buf.write(u"\2\2\2\u0695\u0698\3\2\2\2\u0696\u0694\3\2\2\2\u0696")
        buf.write(u"\u0697\3\2\2\2\u0697\u00a5\3\2\2\2\u0698\u0696\3\2\2")
        buf.write(u"\2\u0699\u0709\5\u0330\u0199\2\u069a\u0709\5\u0332\u019a")
        buf.write(u"\2\u069b\u0709\5\u028c\u0147\2\u069c\u0709\5\u033c\u019f")
        buf.write(u"\2\u069d\u0709\5\u022a\u0116\2\u069e\u0709\5\u01b2\u00da")
        buf.write(u"\2\u069f\u0709\5\u01b8\u00dd\2\u06a0\u0709\5\u01c4\u00e3")
        buf.write(u"\2\u06a1\u0709\5\u01e0\u00f1\2\u06a2\u0709\5\u01ea\u00f6")
        buf.write(u"\2\u06a3\u0709\5\u02d2\u016a\2\u06a4\u0709\5\u00c4c\2")
        buf.write(u"\u06a5\u0709\5\u02fc\u017f\2\u06a6\u0709\5\u02fe\u0180")
        buf.write(u"\2\u06a7\u0709\5\u0188\u00c5\2\u06a8\u0709\5\u00fa~\2")
        buf.write(u"\u06a9\u0709\5\u0110\u0089\2\u06aa\u0709\5\u00b8]\2\u06ab")
        buf.write(u"\u0709\5\u00b4[\2\u06ac\u0709\5\u0342\u01a2\2\u06ad\u0709")
        buf.write(u"\5\u0340\u01a1\2\u06ae\u0709\5\u01f2\u00fa\2\u06af\u0709")
        buf.write(u"\5\u00bc_\2\u06b0\u0709\5\u00ba^\2\u06b1\u0709\5\u0350")
        buf.write(u"\u01a9\2\u06b2\u0709\5\u00f6|\2\u06b3\u0709\5\u0116\u008c")
        buf.write(u"\2\u06b4\u0709\5\u0346\u01a4\2\u06b5\u0709\5\u0258\u012d")
        buf.write(u"\2\u06b6\u0709\5\u00f0y\2\u06b7\u0709\5\u0118\u008d\2")
        buf.write(u"\u06b8\u0709\5\u0180\u00c1\2\u06b9\u0709\5\u0210\u0109")
        buf.write(u"\2\u06ba\u0709\5\u02e8\u0175\2\u06bb\u0709\5\u0344\u01a3")
        buf.write(u"\2\u06bc\u0709\5\u033a\u019e\2\u06bd\u0709\5\u01ac\u00d7")
        buf.write(u"\2\u06be\u0709\5\u01ba\u00de\2\u06bf\u0709\5\u01d6\u00ec")
        buf.write(u"\2\u06c0\u0709\5\u01e2\u00f2\2\u06c1\u0709\5\u02ac\u0157")
        buf.write(u"\2\u06c2\u0709\5\u00c2b\2\u06c3\u0709\5\u022c\u0117\2")
        buf.write(u"\u06c4\u0709\5\u023a\u011e\2\u06c5\u0709\5\u023c\u011f")
        buf.write(u"\2\u06c6\u0709\5\u0196\u00cc\2\u06c7\u0709\5\u00caf\2")
        buf.write(u"\u06c8\u0709\5\u0186\u00c4\2\u06c9\u0709\5\u0136\u009c")
        buf.write(u"\2\u06ca\u0709\5\u01a6\u00d4\2\u06cb\u0709\5\u01f4\u00fb")
        buf.write(u"\2\u06cc\u0709\5\u00a8U\2\u06cd\u0709\5\u00b2Z\2\u06ce")
        buf.write(u"\u0709\5\u01ec\u00f7\2\u06cf\u0709\5\u0328\u0195\2\u06d0")
        buf.write(u"\u0709\5\u0372\u01ba\2\u06d1\u0709\5\u0398\u01cd\2\u06d2")
        buf.write(u"\u0709\5\u0214\u010b\2\u06d3\u0709\5\u037e\u01c0\2\u06d4")
        buf.write(u"\u0709\5\u00f8}\2\u06d5\u0709\5\u02e2\u0172\2\u06d6\u0709")
        buf.write(u"\5\u0212\u010a\2\u06d7\u0709\5\u02ec\u0177\2\u06d8\u0709")
        buf.write(u"\5\u01c2\u00e2\2\u06d9\u0709\5\u01de\u00f0\2\u06da\u0709")
        buf.write(u"\5\u00c8e\2\u06db\u0709\5\u0242\u0122\2\u06dc\u0709\5")
        buf.write(u"\u0244\u0123\2\u06dd\u0709\5\u0246\u0124\2\u06de\u0709")
        buf.write(u"\5\u01a2\u00d2\2\u06df\u0709\5\u030e\u0188\2\u06e0\u0709")
        buf.write(u"\5\u024a\u0126\2\u06e1\u0709\5\u01aa\u00d6\2\u06e2\u0709")
        buf.write(u"\5\u020e\u0108\2\u06e3\u0709\5\u00be`\2\u06e4\u0709\5")
        buf.write(u"\u00c0a\2\u06e5\u0709\5\u01f0\u00f9\2\u06e6\u0709\5\u0338")
        buf.write(u"\u019d\2\u06e7\u0709\5\u036e\u01b8\2\u06e8\u0709\5\u035c")
        buf.write(u"\u01af\2\u06e9\u0709\5\u0266\u0134\2\u06ea\u0709\5\u026e")
        buf.write(u"\u0138\2\u06eb\u0709\5\u0284\u0143\2\u06ec\u0709\5\u0296")
        buf.write(u"\u014c\2\u06ed\u0709\5\u0374\u01bb\2\u06ee\u0709\5\u0314")
        buf.write(u"\u018b\2\u06ef\u0709\5\u0326\u0194\2\u06f0\u0709\5\u0382")
        buf.write(u"\u01c2\2\u06f1\u0709\5\u0310\u0189\2\u06f2\u0709\5\u0368")
        buf.write(u"\u01b5\2\u06f3\u0709\5\u0248\u0125\2\u06f4\u0709\5\u02f0")
        buf.write(u"\u0179\2\u06f5\u0709\5\u02da\u016e\2\u06f6\u0709\5\u02d8")
        buf.write(u"\u016d\2\u06f7\u0709\5\u02dc\u016f\2\u06f8\u0709\5\u02f6")
        buf.write(u"\u017c\2\u06f9\u0709\5\u0270\u0139\2\u06fa\u0709\5\u0286")
        buf.write(u"\u0144\2\u06fb\u0709\5\u0300\u0181\2\u06fc\u0709\5\u025e")
        buf.write(u"\u0130\2\u06fd\u0709\5\u03a0\u01d1\2\u06fe\u0709\5\u0318")
        buf.write(u"\u018d\2\u06ff\u0709\5\u0254\u012b\2\u0700\u0709\5\u0316")
        buf.write(u"\u018c\2\u0701\u0709\5\u038a\u01c6\2\u0702\u0709\5\u034a")
        buf.write(u"\u01a6\2\u0703\u0709\5\u00e8u\2\u0704\u0709\5\u00d2j")
        buf.write(u"\2\u0705\u0709\5\u00eex\2\u0706\u0709\5\u0322\u0192\2")
        buf.write(u"\u0707\u0709\3\2\2\2\u0708\u0699\3\2\2\2\u0708\u069a")
        buf.write(u"\3\2\2\2\u0708\u069b\3\2\2\2\u0708\u069c\3\2\2\2\u0708")
        buf.write(u"\u069d\3\2\2\2\u0708\u069e\3\2\2\2\u0708\u069f\3\2\2")
        buf.write(u"\2\u0708\u06a0\3\2\2\2\u0708\u06a1\3\2\2\2\u0708\u06a2")
        buf.write(u"\3\2\2\2\u0708\u06a3\3\2\2\2\u0708\u06a4\3\2\2\2\u0708")
        buf.write(u"\u06a5\3\2\2\2\u0708\u06a6\3\2\2\2\u0708\u06a7\3\2\2")
        buf.write(u"\2\u0708\u06a8\3\2\2\2\u0708\u06a9\3\2\2\2\u0708\u06aa")
        buf.write(u"\3\2\2\2\u0708\u06ab\3\2\2\2\u0708\u06ac\3\2\2\2\u0708")
        buf.write(u"\u06ad\3\2\2\2\u0708\u06ae\3\2\2\2\u0708\u06af\3\2\2")
        buf.write(u"\2\u0708\u06b0\3\2\2\2\u0708\u06b1\3\2\2\2\u0708\u06b2")
        buf.write(u"\3\2\2\2\u0708\u06b3\3\2\2\2\u0708\u06b4\3\2\2\2\u0708")
        buf.write(u"\u06b5\3\2\2\2\u0708\u06b6\3\2\2\2\u0708\u06b7\3\2\2")
        buf.write(u"\2\u0708\u06b8\3\2\2\2\u0708\u06b9\3\2\2\2\u0708\u06ba")
        buf.write(u"\3\2\2\2\u0708\u06bb\3\2\2\2\u0708\u06bc\3\2\2\2\u0708")
        buf.write(u"\u06bd\3\2\2\2\u0708\u06be\3\2\2\2\u0708\u06bf\3\2\2")
        buf.write(u"\2\u0708\u06c0\3\2\2\2\u0708\u06c1\3\2\2\2\u0708\u06c2")
        buf.write(u"\3\2\2\2\u0708\u06c3\3\2\2\2\u0708\u06c4\3\2\2\2\u0708")
        buf.write(u"\u06c5\3\2\2\2\u0708\u06c6\3\2\2\2\u0708\u06c7\3\2\2")
        buf.write(u"\2\u0708\u06c8\3\2\2\2\u0708\u06c9\3\2\2\2\u0708\u06ca")
        buf.write(u"\3\2\2\2\u0708\u06cb\3\2\2\2\u0708\u06cc\3\2\2\2\u0708")
        buf.write(u"\u06cd\3\2\2\2\u0708\u06ce\3\2\2\2\u0708\u06cf\3\2\2")
        buf.write(u"\2\u0708\u06d0\3\2\2\2\u0708\u06d1\3\2\2\2\u0708\u06d2")
        buf.write(u"\3\2\2\2\u0708\u06d3\3\2\2\2\u0708\u06d4\3\2\2\2\u0708")
        buf.write(u"\u06d5\3\2\2\2\u0708\u06d6\3\2\2\2\u0708\u06d7\3\2\2")
        buf.write(u"\2\u0708\u06d8\3\2\2\2\u0708\u06d9\3\2\2\2\u0708\u06da")
        buf.write(u"\3\2\2\2\u0708\u06db\3\2\2\2\u0708\u06dc\3\2\2\2\u0708")
        buf.write(u"\u06dd\3\2\2\2\u0708\u06de\3\2\2\2\u0708\u06df\3\2\2")
        buf.write(u"\2\u0708\u06e0\3\2\2\2\u0708\u06e1\3\2\2\2\u0708\u06e2")
        buf.write(u"\3\2\2\2\u0708\u06e3\3\2\2\2\u0708\u06e4\3\2\2\2\u0708")
        buf.write(u"\u06e5\3\2\2\2\u0708\u06e6\3\2\2\2\u0708\u06e7\3\2\2")
        buf.write(u"\2\u0708\u06e8\3\2\2\2\u0708\u06e9\3\2\2\2\u0708\u06ea")
        buf.write(u"\3\2\2\2\u0708\u06eb\3\2\2\2\u0708\u06ec\3\2\2\2\u0708")
        buf.write(u"\u06ed\3\2\2\2\u0708\u06ee\3\2\2\2\u0708\u06ef\3\2\2")
        buf.write(u"\2\u0708\u06f0\3\2\2\2\u0708\u06f1\3\2\2\2\u0708\u06f2")
        buf.write(u"\3\2\2\2\u0708\u06f3\3\2\2\2\u0708\u06f4\3\2\2\2\u0708")
        buf.write(u"\u06f5\3\2\2\2\u0708\u06f6\3\2\2\2\u0708\u06f7\3\2\2")
        buf.write(u"\2\u0708\u06f8\3\2\2\2\u0708\u06f9\3\2\2\2\u0708\u06fa")
        buf.write(u"\3\2\2\2\u0708\u06fb\3\2\2\2\u0708\u06fc\3\2\2\2\u0708")
        buf.write(u"\u06fd\3\2\2\2\u0708\u06fe\3\2\2\2\u0708\u06ff\3\2\2")
        buf.write(u"\2\u0708\u0700\3\2\2\2\u0708\u0701\3\2\2\2\u0708\u0702")
        buf.write(u"\3\2\2\2\u0708\u0703\3\2\2\2\u0708\u0704\3\2\2\2\u0708")
        buf.write(u"\u0705\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0707\3\2\2")
        buf.write(u"\2\u0709\u00a7\3\2\2\2\u070a\u070b\7[\2\2\u070b\u070c")
        buf.write(u"\7\u0135\2\2\u070c\u070e\5\u04cc\u0267\2\u070d\u070f")
        buf.write(u"\7\u0190\2\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2")
        buf.write(u"\u070f\u0710\3\2\2\2\u0710\u0711\5\u00aaV\2\u0711\u00a9")
        buf.write(u"\3\2\2\2\u0712\u0717\bV\1\2\u0713\u0714\f\4\2\2\u0714")
        buf.write(u"\u0716\5\u00b0Y\2\u0715\u0713\3\2\2\2\u0716\u0719\3\2")
        buf.write(u"\2\2\u0717\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u00ab")
        buf.write(u"\3\2\2\2\u0719\u0717\3\2\2\2\u071a\u071f\bW\1\2\u071b")
        buf.write(u"\u071c\f\4\2\2\u071c\u071e\5\u00aeX\2\u071d\u071b\3\2")
        buf.write(u"\2\2\u071e\u0721\3\2\2\2\u071f\u071d\3\2\2\2\u071f\u0720")
        buf.write(u"\3\2\2\2\u0720\u00ad\3\2\2\2\u0721\u071f\3\2\2\2\u0722")
        buf.write(u"\u0723\7\u0110\2\2\u0723\u0737\5\u04ca\u0266\2\u0724")
        buf.write(u"\u0725\7\u0110\2\2\u0725\u0737\7\u00f5\2\2\u0726\u0727")
        buf.write(u"\7\u0085\2\2\u0727\u0728\7\u0110\2\2\u0728\u0737\5\u04ca")
        buf.write(u"\u0266\2\u0729\u072a\7\u0175\2\2\u072a\u072b\7\u0110")
        buf.write(u"\2\2\u072b\u0737\5\u04ca\u0266\2\u072c\u0737\7\u00b7")
        buf.write(u"\2\2\u072d\u072e\7S\2\2\u072e\u072f\7\u00d8\2\2\u072f")
        buf.write(u"\u0737\5\u04ce\u0268\2\u0730\u0731\7\u0180\2\2\u0731")
        buf.write(u"\u0732\7\u017b\2\2\u0732\u0737\5\u04ca\u0266\2\u0733")
        buf.write(u"\u0734\7\u017d\2\2\u0734\u0737\5\u04b6\u025c\2\u0735")
        buf.write(u"\u0737\7\u01ae\2\2\u0736\u0722\3\2\2\2\u0736\u0724\3")
        buf.write(u"\2\2\2\u0736\u0726\3\2\2\2\u0736\u0729\3\2\2\2\u0736")
        buf.write(u"\u072c\3\2\2\2\u0736\u072d\3\2\2\2\u0736\u0730\3\2\2")
        buf.write(u"\2\u0736\u0733\3\2\2\2\u0736\u0735\3\2\2\2\u0737\u00af")
        buf.write(u"\3\2\2\2\u0738\u0746\5\u00aeX\2\u0739\u073a\7\u015c\2")
        buf.write(u"\2\u073a\u0746\5\u04c8\u0265\2\u073b\u073c\7\33\2\2\u073c")
        buf.write(u"\u0746\5\u04b6\u025c\2\u073d\u073e\7\u0135\2\2\u073e")
        buf.write(u"\u0746\5\u04b6\u025c\2\u073f\u0740\7\u00b2\2\2\u0740")
        buf.write(u"\u0741\7\u0135\2\2\u0741\u0746\5\u04b6\u025c\2\u0742")
        buf.write(u"\u0743\7\u00b2\2\2\u0743\u0744\7\u00a6\2\2\u0744\u0746")
        buf.write(u"\5\u04b6\u025c\2\u0745\u0738\3\2\2\2\u0745\u0739\3\2")
        buf.write(u"\2\2\u0745\u073b\3\2\2\2\u0745\u073d\3\2\2\2\u0745\u073f")
        buf.write(u"\3\2\2\2\u0745\u0742\3\2\2\2\u0746\u00b1\3\2\2\2\u0747")
        buf.write(u"\u0748\7[\2\2\u0748\u0749\7\u017d\2\2\u0749\u074b\5\u04cc")
        buf.write(u"\u0267\2\u074a\u074c\7\u0190\2\2\u074b\u074a\3\2\2\2")
        buf.write(u"\u074b\u074c\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e")
        buf.write(u"\5\u00aaV\2\u074e\u00b3\3\2\2\2\u074f\u0750\7 \2\2\u0750")
        buf.write(u"\u0751\7\u0135\2\2\u0751\u0753\5\u04cc\u0267\2\u0752")
        buf.write(u"\u0754\7\u0190\2\2\u0753\u0752\3\2\2\2\u0753\u0754\3")
        buf.write(u"\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756\5\u00acW\2\u0756")
        buf.write(u"\u00b5\3\2\2\2\u0757\u075c\3\2\2\2\u0758\u0759\7\u00b2")
        buf.write(u"\2\2\u0759\u075a\7i\2\2\u075a\u075c\5\u04ba\u025e\2\u075b")
        buf.write(u"\u0757\3\2\2\2\u075b\u0758\3\2\2\2\u075c\u00b7\3\2\2")
        buf.write(u"\2\u075d\u075e\7 \2\2\u075e\u075f\7\u0135\2\2\u075f\u0760")
        buf.write(u"\5\u04cc\u0267\2\u0760\u0761\5\u00b6\\\2\u0761\u0762")
        buf.write(u"\5\u00eav\2\u0762\u00b9\3\2\2\2\u0763\u0764\7 \2\2\u0764")
        buf.write(u"\u0765\7\u017d\2\2\u0765\u0767\5\u04cc\u0267\2\u0766")
        buf.write(u"\u0768\7\u0190\2\2\u0767\u0766\3\2\2\2\u0767\u0768\3")
        buf.write(u"\2\2\2\u0768\u0769\3\2\2\2\u0769\u076a\5\u00acW\2\u076a")
        buf.write(u"\u00bb\3\2\2\2\u076b\u076c\7 \2\2\u076c\u076d\7\u017d")
        buf.write(u"\2\2\u076d\u076e\5\u04cc\u0267\2\u076e\u076f\5\u00ea")
        buf.write(u"v\2\u076f\u00bd\3\2\2\2\u0770\u0771\7\u0080\2\2\u0771")
        buf.write(u"\u0772\7\u0135\2\2\u0772\u0779\5\u04b6\u025c\2\u0773")
        buf.write(u"\u0774\7\u0080\2\2\u0774\u0775\7\u0135\2\2\u0775\u0776")
        buf.write(u"\7\u00ad\2\2\u0776\u0777\7\u008e\2\2\u0777\u0779\5\u04b6")
        buf.write(u"\u025c\2\u0778\u0770\3\2\2\2\u0778\u0773\3\2\2\2\u0779")
        buf.write(u"\u00bf\3\2\2\2\u077a\u077b\7\u0080\2\2\u077b\u077c\7")
        buf.write(u"\u017d\2\2\u077c\u0783\5\u04b6\u025c\2\u077d\u077e\7")
        buf.write(u"\u0080\2\2\u077e\u077f\7\u017d\2\2\u077f\u0780\7\u00ad")
        buf.write(u"\2\2\u0780\u0781\7\u008e\2\2\u0781\u0783\5\u04b6\u025c")
        buf.write(u"\2\u0782\u077a\3\2\2\2\u0782\u077d\3\2\2\2\u0783\u00c1")
        buf.write(u"\3\2\2\2\u0784\u0785\7[\2\2\u0785\u0786\7\u00a6\2\2\u0786")
        buf.write(u"\u0788\5\u04cc\u0267\2\u0787\u0789\7\u0190\2\2\u0788")
        buf.write(u"\u0787\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078a\3\2\2")
        buf.write(u"\2\u078a\u078b\5\u00aaV\2\u078b\u00c3\3\2\2\2\u078c\u078d")
        buf.write(u"\7 \2\2\u078d\u078e\7\u00a6\2\2\u078e\u078f\5\u04cc\u0267")
        buf.write(u"\2\u078f\u0790\5\u00c6d\2\u0790\u0791\7\u017d\2\2\u0791")
        buf.write(u"\u0792\5\u04b6\u025c\2\u0792\u00c5\3\2\2\2\u0793\u0794")
        buf.write(u"\t\n\2\2\u0794\u00c7\3\2\2\2\u0795\u0796\7\u0080\2\2")
        buf.write(u"\u0796\u0797\7\u00a6\2\2\u0797\u079e\5\u04b6\u025c\2")
        buf.write(u"\u0798\u0799\7\u0080\2\2\u0799\u079a\7\u00a6\2\2\u079a")
        buf.write(u"\u079b\7\u00ad\2\2\u079b\u079c\7\u008e\2\2\u079c\u079e")
        buf.write(u"\5\u04b6\u025c\2\u079d\u0795\3\2\2\2\u079d\u0798\3\2")
        buf.write(u"\2\2\u079e\u00c9\3\2\2\2\u079f\u07a0\7[\2\2\u07a0\u07a1")
        buf.write(u"\7\u013b\2\2\u07a1\u07a2\5\u00ccg\2\u07a2\u07a3\7.\2")
        buf.write(u"\2\u07a3\u07a4\5\u04cc\u0267\2\u07a4\u07a5\5\u00ceh\2")
        buf.write(u"\u07a5\u07ac\3\2\2\2\u07a6\u07a7\7[\2\2\u07a7\u07a8\7")
        buf.write(u"\u013b\2\2\u07a8\u07a9\5\u04d0\u0269\2\u07a9\u07aa\5")
        buf.write(u"\u00ceh\2\u07aa\u07ac\3\2\2\2\u07ab\u079f\3\2\2\2\u07ab")
        buf.write(u"\u07a6\3\2\2\2\u07ac\u00cb\3\2\2\2\u07ad\u07b0\5\u04d0")
        buf.write(u"\u0269\2\u07ae\u07b0\3\2\2\2\u07af\u07ad\3\2\2\2\u07af")
        buf.write(u"\u07ae\3\2\2\2\u07b0\u00cd\3\2\2\2\u07b1\u07b6\bh\1\2")
        buf.write(u"\u07b2\u07b3\f\4\2\2\u07b3\u07b5\5\u00d0i\2\u07b4\u07b2")
        buf.write(u"\3\2\2\2\u07b5\u07b8\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6")
        buf.write(u"\u07b7\3\2\2\2\u07b7\u00cf\3\2\2\2\u07b8\u07b6\3\2\2")
        buf.write(u"\2\u07b9\u07c0\5\u0136\u009c\2\u07ba\u07c0\5\u0296\u014c")
        buf.write(u"\2\u07bb\u07c0\5\u0186\u00c4\2\u07bc\u07c0\5\u01f4\u00fb")
        buf.write(u"\2\u07bd\u07c0\5\u026e\u0138\2\u07be\u07c0\5\u0322\u0192")
        buf.write(u"\2\u07bf\u07b9\3\2\2\2\u07bf\u07ba\3\2\2\2\u07bf\u07bb")
        buf.write(u"\3\2\2\2\u07bf\u07bc\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf")
        buf.write(u"\u07be\3\2\2\2\u07c0\u00d1\3\2\2\2\u07c1\u07c2\7\u0147")
        buf.write(u"\2\2\u07c2\u07ca\5\u00d4k\2\u07c3\u07c4\7\u0147\2\2\u07c4")
        buf.write(u"\u07c5\7\u00db\2\2\u07c5\u07ca\5\u00d4k\2\u07c6\u07c7")
        buf.write(u"\7\u0147\2\2\u07c7\u07c8\7\u0145\2\2\u07c8\u07ca\5\u00d4")
        buf.write(u"k\2\u07c9\u07c1\3\2\2\2\u07c9\u07c3\3\2\2\2\u07c9\u07c6")
        buf.write(u"\3\2\2\2\u07ca\u00d3\3\2\2\2\u07cb\u07cc\7\u016a\2\2")
        buf.write(u"\u07cc\u07d4\5\u031e\u0190\2\u07cd\u07ce\7\u0145\2\2")
        buf.write(u"\u07ce\u07cf\7C\2\2\u07cf\u07d0\7\'\2\2\u07d0\u07d1\7")
        buf.write(u"\u016a\2\2\u07d1\u07d4\5\u031e\u0190\2\u07d2\u07d4\5")
        buf.write(u"\u00d6l\2\u07d3\u07cb\3\2\2\2\u07d3\u07cd\3\2\2\2\u07d3")
        buf.write(u"\u07d2\3\2\2\2\u07d4\u00d5\3\2\2\2\u07d5\u07d6\5\u00d8")
        buf.write(u"m\2\u07d6\u07d7\7\u0168\2\2\u07d7\u07d8\5\u00dan\2\u07d8")
        buf.write(u"\u0801\3\2\2\2\u07d9\u07da\5\u00d8m\2\u07da\u07db\7\20")
        buf.write(u"\2\2\u07db\u07dc\5\u00dan\2\u07dc\u0801\3\2\2\2\u07dd")
        buf.write(u"\u07de\5\u00d8m\2\u07de\u07df\7\u0168\2\2\u07df\u07e0")
        buf.write(u"\7o\2\2\u07e0\u0801\3\2\2\2\u07e1\u07e2\5\u00d8m\2\u07e2")
        buf.write(u"\u07e3\7\20\2\2\u07e3\u07e4\7o\2\2\u07e4\u0801\3\2\2")
        buf.write(u"\2\u07e5\u07e6\5\u00d8m\2\u07e6\u07e7\7\u009e\2\2\u07e7")
        buf.write(u"\u07e8\7^\2\2\u07e8\u0801\3\2\2\2\u07e9\u07ea\7\u0166")
        buf.write(u"\2\2\u07ea\u07eb\7\u01a1\2\2\u07eb\u0801\5\u00e2r\2\u07ec")
        buf.write(u"\u07ed\7?\2\2\u07ed\u0801\5\u04ca\u0266\2\u07ee\u07ef")
        buf.write(u"\7\u013b\2\2\u07ef\u0801\5\u04ca\u0266\2\u07f0\u07f1")
        buf.write(u"\7\u00e9\2\2\u07f1\u0801\5\u00e4s\2\u07f2\u07f3\7\u0135")
        buf.write(u"\2\2\u07f3\u0801\5\u00e6t\2\u07f4\u07f5\7\u0145\2\2\u07f5")
        buf.write(u"\u07f6\7.\2\2\u07f6\u0801\5\u00e6t\2\u07f7\u07f8\7\u0145")
        buf.write(u"\2\2\u07f8\u07f9\7.\2\2\u07f9\u0801\7o\2\2\u07fa\u07fb")
        buf.write(u"\7\u0195\2\2\u07fb\u07fc\7\u0101\2\2\u07fc\u0801\5\u044c")
        buf.write(u"\u0227\2\u07fd\u07fe\7\u016a\2\2\u07fe\u07ff\7\u014e")
        buf.write(u"\2\2\u07ff\u0801\5\u04ca\u0266\2\u0800\u07d5\3\2\2\2")
        buf.write(u"\u0800\u07d9\3\2\2\2\u0800\u07dd\3\2\2\2\u0800\u07e1")
        buf.write(u"\3\2\2\2\u0800\u07e5\3\2\2\2\u0800\u07e9\3\2\2\2\u0800")
        buf.write(u"\u07ec\3\2\2\2\u0800\u07ee\3\2\2\2\u0800\u07f0\3\2\2")
        buf.write(u"\2\u0800\u07f2\3\2\2\2\u0800\u07f4\3\2\2\2\u0800\u07f7")
        buf.write(u"\3\2\2\2\u0800\u07fa\3\2\2\2\u0800\u07fd\3\2\2\2\u0801")
        buf.write(u"\u00d7\3\2\2\2\u0802\u0803\bm\1\2\u0803\u0804\5\u04d0")
        buf.write(u"\u0269\2\u0804\u080a\3\2\2\2\u0805\u0806\f\3\2\2\u0806")
        buf.write(u"\u0807\7\6\2\2\u0807\u0809\5\u04d0\u0269\2\u0808\u0805")
        buf.write(u"\3\2\2\2\u0809\u080c\3\2\2\2\u080a\u0808\3\2\2\2\u080a")
        buf.write(u"\u080b\3\2\2\2\u080b\u00d9\3\2\2\2\u080c\u080a\3\2\2")
        buf.write(u"\2\u080d\u080e\bn\1\2\u080e\u080f\5\u00dco\2\u080f\u0815")
        buf.write(u"\3\2\2\2\u0810\u0811\f\3\2\2\u0811\u0812\7\b\2\2\u0812")
        buf.write(u"\u0814\5\u00dco\2\u0813\u0810\3\2\2\2\u0814\u0817\3\2")
        buf.write(u"\2\2\u0815\u0813\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u00db")
        buf.write(u"\3\2\2\2\u0817\u0815\3\2\2\2\u0818\u081b\5\u00e0q\2\u0819")
        buf.write(u"\u081b\5\u0192\u00ca\2\u081a\u0818\3\2\2\2\u081a\u0819")
        buf.write(u"\3\2\2\2\u081b\u00dd\3\2\2\2\u081c\u081d\7\u0120\2\2")
        buf.write(u"\u081d\u0824\7\u0174\2\2\u081e\u081f\7\u0120\2\2\u081f")
        buf.write(u"\u0824\7P\2\2\u0820\u0821\7\u012b\2\2\u0821\u0824\7\u0120")
        buf.write(u"\2\2\u0822\u0824\7\u0143\2\2\u0823\u081c\3\2\2\2\u0823")
        buf.write(u"\u081e\3\2\2\2\u0823\u0820\3\2\2\2\u0823\u0822\3\2\2")
        buf.write(u"\2\u0824\u00df\3\2\2\2\u0825\u082a\7\u016e\2\2\u0826")
        buf.write(u"\u082a\7\u0093\2\2\u0827\u082a\7\u00fe\2\2\u0828\u082a")
        buf.write(u"\5\u00e6t\2\u0829\u0825\3\2\2\2\u0829\u0826\3\2\2\2\u0829")
        buf.write(u"\u0827\3\2\2\2\u0829\u0828\3\2\2\2\u082a\u00e1\3\2\2")
        buf.write(u"\2\u082b\u083c\5\u04ca\u0266\2\u082c\u083c\7\u01ae\2")
        buf.write(u"\2\u082d\u082e\5\u0432\u021a\2\u082e\u082f\5\u04ca\u0266")
        buf.write(u"\2\u082f\u0830\5\u0436\u021c\2\u0830\u083c\3\2\2\2\u0831")
        buf.write(u"\u0832\5\u0432\u021a\2\u0832\u0833\7\r\2\2\u0833\u0834")
        buf.write(u"\5\u04c8\u0265\2\u0834\u0835\7\7\2\2\u0835\u0836\5\u04ca")
        buf.write(u"\u0266\2\u0836\u0837\5\u0436\u021c\2\u0837\u083c\3\2")
        buf.write(u"\2\2\u0838\u083c\5\u0192\u00ca\2\u0839\u083c\7o\2\2\u083a")
        buf.write(u"\u083c\7\u00db\2\2\u083b\u082b\3\2\2\2\u083b\u082c\3")
        buf.write(u"\2\2\2\u083b\u082d\3\2\2\2\u083b\u0831\3\2\2\2\u083b")
        buf.write(u"\u0838\3\2\2\2\u083b\u0839\3\2\2\2\u083b\u083a\3\2\2")
        buf.write(u"\2\u083c\u00e3\3\2\2\2\u083d\u0841\5\u04ca\u0266\2\u083e")
        buf.write(u"\u0841\7o\2\2\u083f\u0841\3\2\2\2\u0840\u083d\3\2\2\2")
        buf.write(u"\u0840\u083e\3\2\2\2\u0840\u083f\3\2\2\2\u0841\u00e5")
        buf.write(u"\3\2\2\2\u0842\u0845\5\u04d0\u0269\2\u0843\u0845\5\u04ca")
        buf.write(u"\u0266\2\u0844\u0842\3\2\2\2\u0844\u0843\3\2\2\2\u0845")
        buf.write(u"\u00e7\3\2\2\2\u0846\u0847\7\u012e\2\2\u0847\u0855\5")
        buf.write(u"\u00d8m\2\u0848\u0849\7\u012e\2\2\u0849\u084a\7\u0166")
        buf.write(u"\2\2\u084a\u0855\7\u01a1\2\2\u084b\u084c\7\u012e\2\2")
        buf.write(u"\u084c\u084d\7\u016a\2\2\u084d\u084e\7\u00c9\2\2\u084e")
        buf.write(u"\u0855\7\u00d6\2\2\u084f\u0850\7\u012e\2\2\u0850\u0851")
        buf.write(u"\7\u0145\2\2\u0851\u0855\7.\2\2\u0852\u0853\7\u012e\2")
        buf.write(u"\2\u0853\u0855\7\36\2\2\u0854\u0846\3\2\2\2\u0854\u0848")
        buf.write(u"\3\2\2\2\u0854\u084b\3\2\2\2\u0854\u084f\3\2\2\2\u0854")
        buf.write(u"\u0852\3\2\2\2\u0855\u00e9\3\2\2\2\u0856\u0857\7\u0147")
        buf.write(u"\2\2\u0857\u085a\5\u00d4k\2\u0858\u085a\5\u00e8u\2\u0859")
        buf.write(u"\u0856\3\2\2\2\u0859\u0858\3\2\2\2\u085a\u00eb\3\2\2")
        buf.write(u"\2\u085b\u085c\7\u0147\2\2\u085c\u085f\5\u00d6l\2\u085d")
        buf.write(u"\u085f\5\u00e8u\2\u085e\u085b\3\2\2\2\u085e\u085d\3\2")
        buf.write(u"\2\2\u085f\u00ed\3\2\2\2\u0860\u0861\7\u014a\2\2\u0861")
        buf.write(u"\u086f\5\u00d8m\2\u0862\u0863\7\u014a\2\2\u0863\u0864")
        buf.write(u"\7\u0166\2\2\u0864\u086f\7\u01a1\2\2\u0865\u0866\7\u014a")
        buf.write(u"\2\2\u0866\u0867\7\u016a\2\2\u0867\u0868\7\u00c9\2\2")
        buf.write(u"\u0868\u086f\7\u00d6\2\2\u0869\u086a\7\u014a\2\2\u086a")
        buf.write(u"\u086b\7\u0145\2\2\u086b\u086f\7.\2\2\u086c\u086d\7\u014a")
        buf.write(u"\2\2\u086d\u086f\7\36\2\2\u086e\u0860\3\2\2\2\u086e\u0862")
        buf.write(u"\3\2\2\2\u086e\u0865\3\2\2\2\u086e\u0869\3\2\2\2\u086e")
        buf.write(u"\u086c\3\2\2\2\u086f\u00ef\3\2\2\2\u0870\u0871\7\u0147")
        buf.write(u"\2\2\u0871\u0872\7U\2\2\u0872\u0873\5\u00f2z\2\u0873")
        buf.write(u"\u0874\5\u00f4{\2\u0874\u00f1\3\2\2\2\u0875\u0878\7\36")
        buf.write(u"\2\2\u0876\u0878\5\u04b2\u025a\2\u0877\u0875\3\2\2\2")
        buf.write(u"\u0877\u0876\3\2\2\2\u0878\u00f3\3\2\2\2\u0879\u087a")
        buf.write(u"\t\13\2\2\u087a\u00f5\3\2\2\2\u087b\u087c\7E\2\2\u087c")
        buf.write(u"\u00f7\3\2\2\2\u087d\u087e\7z\2\2\u087e\u0886\7\36\2")
        buf.write(u"\2\u087f\u0880\7z\2\2\u0880\u0886\7\u0161\2\2\u0881\u0882")
        buf.write(u"\7z\2\2\u0882\u0886\7\u0163\2\2\u0883\u0884\7z\2\2\u0884")
        buf.write(u"\u0886\7\u0112\2\2\u0885\u087d\3\2\2\2\u0885\u087f\3")
        buf.write(u"\2\2\2\u0885\u0881\3\2\2\2\u0885\u0883\3\2\2\2\u0886")
        buf.write(u"\u00f9\3\2\2\2\u0887\u0888\7 \2\2\u0888\u0889\7\u015e")
        buf.write(u"\2\2\u0889\u088a\5\u03f8\u01fd\2\u088a\u088b\5\u00fc")
        buf.write(u"\177\2\u088b\u08b8\3\2\2\2\u088c\u088d\7 \2\2\u088d\u088e")
        buf.write(u"\7\u015e\2\2\u088e\u088f\7\u00ad\2\2\u088f\u0890\7\u008e")
        buf.write(u"\2\2\u0890\u0891\5\u03f8\u01fd\2\u0891\u0892\5\u00fc")
        buf.write(u"\177\2\u0892\u08b8\3\2\2\2\u0893\u0894\7 \2\2\u0894\u0895")
        buf.write(u"\7\u00b5\2\2\u0895\u0896\5\u04b4\u025b\2\u0896\u0897")
        buf.write(u"\5\u00fc\177\2\u0897\u08b8\3\2\2\2\u0898\u0899\7 \2\2")
        buf.write(u"\u0899\u089a\7\u00b5\2\2\u089a\u089b\7\u00ad\2\2\u089b")
        buf.write(u"\u089c\7\u008e\2\2\u089c\u089d\5\u04b4\u025b\2\u089d")
        buf.write(u"\u089e\5\u00fc\177\2\u089e\u08b8\3\2\2\2\u089f\u08a0")
        buf.write(u"\7 \2\2\u08a0\u08a1\7\u0141\2\2\u08a1\u08a2\5\u04b4\u025b")
        buf.write(u"\2\u08a2\u08a3\5\u00fc\177\2\u08a3\u08b8\3\2\2\2\u08a4")
        buf.write(u"\u08a5\7 \2\2\u08a5\u08a6\7\u0141\2\2\u08a6\u08a7\7\u00ad")
        buf.write(u"\2\2\u08a7\u08a8\7\u008e\2\2\u08a8\u08a9\5\u04b4\u025b")
        buf.write(u"\2\u08a9\u08aa\5\u00fc\177\2\u08aa\u08b8\3\2\2\2\u08ab")
        buf.write(u"\u08ac\7 \2\2\u08ac\u08ad\7\u018a\2\2\u08ad\u08ae\5\u04b4")
        buf.write(u"\u025b\2\u08ae\u08af\5\u00fc\177\2\u08af\u08b8\3\2\2")
        buf.write(u"\2\u08b0\u08b1\7 \2\2\u08b1\u08b2\7\u018a\2\2\u08b2\u08b3")
        buf.write(u"\7\u00ad\2\2\u08b3\u08b4\7\u008e\2\2\u08b4\u08b5\5\u04b4")
        buf.write(u"\u025b\2\u08b5\u08b6\5\u00fc\177\2\u08b6\u08b8\3\2\2")
        buf.write(u"\2\u08b7\u0887\3\2\2\2\u08b7\u088c\3\2\2\2\u08b7\u0893")
        buf.write(u"\3\2\2\2\u08b7\u0898\3\2\2\2\u08b7\u089f\3\2\2\2\u08b7")
        buf.write(u"\u08a4\3\2\2\2\u08b7\u08ab\3\2\2\2\u08b7\u08b0\3\2\2")
        buf.write(u"\2\u08b8\u00fb\3\2\2\2\u08b9\u08ba\b\177\1\2\u08ba\u08bb")
        buf.write(u"\5\u00fe\u0080\2\u08bb\u08c1\3\2\2\2\u08bc\u08bd\f\3")
        buf.write(u"\2\2\u08bd\u08be\7\b\2\2\u08be\u08c0\5\u00fe\u0080\2")
        buf.write(u"\u08bf\u08bc\3\2\2\2\u08c0\u08c3\3\2\2\2\u08c1\u08bf")
        buf.write(u"\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u00fd\3\2\2\2\u08c3")
        buf.write(u"\u08c1\3\2\2\2\u08c4\u08c5\7\32\2\2\u08c5\u096a\5\u0146")
        buf.write(u"\u00a4\2\u08c6\u08c7\7\32\2\2\u08c7\u08c8\7L\2\2\u08c8")
        buf.write(u"\u096a\5\u0146\u00a4\2\u08c9\u08ca\7 \2\2\u08ca\u08cb")
        buf.write(u"\5\u02f8\u017d\2\u08cb\u08cc\5\u04d0\u0269\2\u08cc\u08cd")
        buf.write(u"\5\u0100\u0081\2\u08cd\u096a\3\2\2\2\u08ce\u08cf\7 \2")
        buf.write(u"\2\u08cf\u08d0\5\u02f8\u017d\2\u08d0\u08d1\5\u04d0\u0269")
        buf.write(u"\2\u08d1\u08d2\7\u0080\2\2\u08d2\u08d3\7\u00f0\2\2\u08d3")
        buf.write(u"\u08d4\7\u00f5\2\2\u08d4\u096a\3\2\2\2\u08d5\u08d6\7")
        buf.write(u" \2\2\u08d6\u08d7\5\u02f8\u017d\2\u08d7\u08d8\5\u04d0")
        buf.write(u"\u0269\2\u08d8\u08d9\7\u0147\2\2\u08d9\u08da\7\u00f0")
        buf.write(u"\2\2\u08da\u08db\7\u00f5\2\2\u08db\u096a\3\2\2\2\u08dc")
        buf.write(u"\u08dd\7 \2\2\u08dd\u08de\5\u02f8\u017d\2\u08de\u08df")
        buf.write(u"\5\u04d0\u0269\2\u08df\u08e0\7\u0147\2\2\u08e0\u08e1")
        buf.write(u"\7\u0154\2\2\u08e1\u08e2\5\u04ce\u0268\2\u08e2\u096a")
        buf.write(u"\3\2\2\2\u08e3\u08e4\7 \2\2\u08e4\u08e5\5\u02f8\u017d")
        buf.write(u"\2\u08e5\u08e6\5\u04d0\u0269\2\u08e6\u08e7\7\u0147\2")
        buf.write(u"\2\u08e7\u08e8\5\u0108\u0085\2\u08e8\u096a\3\2\2\2\u08e9")
        buf.write(u"\u08ea\7 \2\2\u08ea\u08eb\5\u02f8\u017d\2\u08eb\u08ec")
        buf.write(u"\5\u04d0\u0269\2\u08ec\u08ed\7\u012e\2\2\u08ed\u08ee")
        buf.write(u"\5\u0108\u0085\2\u08ee\u096a\3\2\2\2\u08ef\u08f0\7 \2")
        buf.write(u"\2\u08f0\u08f1\5\u02f8\u017d\2\u08f1\u08f2\5\u04d0\u0269")
        buf.write(u"\2\u08f2\u08f3\7\u0147\2\2\u08f3\u08f4\7\u0157\2\2\u08f4")
        buf.write(u"\u08f5\5\u04d0\u0269\2\u08f5\u096a\3\2\2\2\u08f6\u08f7")
        buf.write(u"\7\u0080\2\2\u08f7\u08f8\5\u02f8\u017d\2\u08f8\u08f9")
        buf.write(u"\7\u00ad\2\2\u08f9\u08fa\7\u008e\2\2\u08fa\u08fb\5\u04d0")
        buf.write(u"\u0269\2\u08fb\u08fc\5\u0102\u0082\2\u08fc\u096a\3\2")
        buf.write(u"\2\2\u08fd\u08fe\7\u0080\2\2\u08fe\u08ff\5\u02f8\u017d")
        buf.write(u"\2\u08ff\u0900\5\u04d0\u0269\2\u0900\u0901\5\u0102\u0082")
        buf.write(u"\2\u0901\u096a\3\2\2\2\u0902\u0903\7 \2\2\u0903\u0904")
        buf.write(u"\5\u02f8\u017d\2\u0904\u0905\5\u04d0\u0269\2\u0905\u0906")
        buf.write(u"\5\u02fa\u017e\2\u0906\u0907\7\u0171\2\2\u0907\u0908")
        buf.write(u"\5\u040a\u0206\2\u0908\u0909\5\u0104\u0083\2\u0909\u090a")
        buf.write(u"\5\u0106\u0084\2\u090a\u096a\3\2\2\2\u090b\u090c\7 \2")
        buf.write(u"\2\u090c\u090d\5\u02f8\u017d\2\u090d\u090e\5\u04d0\u0269")
        buf.write(u"\2\u090e\u090f\5\u01ca\u00e6\2\u090f\u096a\3\2\2\2\u0910")
        buf.write(u"\u0911\7\32\2\2\u0911\u096a\5\u0158\u00ad\2\u0912\u0913")
        buf.write(u"\7\u0181\2\2\u0913\u0914\7T\2\2\u0914\u096a\5\u04b8\u025d")
        buf.write(u"\2\u0915\u0916\7\u0080\2\2\u0916\u0917\7T\2\2\u0917\u0918")
        buf.write(u"\7\u00ad\2\2\u0918\u0919\7\u008e\2\2\u0919\u091a\5\u04b8")
        buf.write(u"\u025d\2\u091a\u091b\5\u0102\u0082\2\u091b\u096a\3\2")
        buf.write(u"\2\2\u091c\u091d\7\u0080\2\2\u091d\u091e\7T\2\2\u091e")
        buf.write(u"\u091f\5\u04b8\u025d\2\u091f\u0920\5\u0102\u0082\2\u0920")
        buf.write(u"\u096a\3\2\2\2\u0921\u0922\7\u0147\2\2\u0922\u0923\7")
        buf.write(u"\u0190\2\2\u0923\u096a\7\u00fd\2\2\u0924\u0925\7\u0147")
        buf.write(u"\2\2\u0925\u0926\7\u0191\2\2\u0926\u096a\7\u00fd\2\2")
        buf.write(u"\u0927\u0928\7H\2\2\u0928\u0929\7\u00fe\2\2\u0929\u096a")
        buf.write(u"\5\u04b8\u025d\2\u092a\u092b\7\u0147\2\2\u092b\u092c")
        buf.write(u"\7\u0191\2\2\u092c\u096a\7H\2\2\u092d\u092e\7\u0083\2")
        buf.write(u"\2\u092e\u092f\7\u016c\2\2\u092f\u096a\5\u04b8\u025d")
        buf.write(u"\2\u0930\u0931\7\u0083\2\2\u0931\u0932\7!\2\2\u0932\u0933")
        buf.write(u"\7\u016c\2\2\u0933\u096a\5\u04b8\u025d\2\u0934\u0935")
        buf.write(u"\7\u0083\2\2\u0935\u0936\7\u012d\2\2\u0936\u0937\7\u016c")
        buf.write(u"\2\2\u0937\u096a\5\u04b8\u025d\2\u0938\u0939\7\u0083")
        buf.write(u"\2\2\u0939\u093a\7\u016c\2\2\u093a\u096a\7\36\2\2\u093b")
        buf.write(u"\u093c\7\u0083\2\2\u093c\u093d\7\u016c\2\2\u093d\u096a")
        buf.write(u"\7\u017d\2\2\u093e\u093f\7y\2\2\u093f\u0940\7\u016c\2")
        buf.write(u"\2\u0940\u096a\5\u04b8\u025d\2\u0941\u0942\7y\2\2\u0942")
        buf.write(u"\u0943\7\u016c\2\2\u0943\u096a\7\36\2\2\u0944\u0945\7")
        buf.write(u"y\2\2\u0945\u0946\7\u016c\2\2\u0946\u096a\7\u017d\2\2")
        buf.write(u"\u0947\u0948\7\u0083\2\2\u0948\u0949\7\u0139\2\2\u0949")
        buf.write(u"\u096a\5\u04b8\u025d\2\u094a\u094b\7\u0083\2\2\u094b")
        buf.write(u"\u094c\7!\2\2\u094c\u094d\7\u0139\2\2\u094d\u096a\5\u04b8")
        buf.write(u"\u025d\2\u094e\u094f\7\u0083\2\2\u094f\u0950\7\u012d")
        buf.write(u"\2\2\u0950\u0951\7\u0139\2\2\u0951\u096a\5\u04b8\u025d")
        buf.write(u"\2\u0952\u0953\7y\2\2\u0953\u0954\7\u0139\2\2\u0954\u096a")
        buf.write(u"\5\u04b8\u025d\2\u0955\u0956\7\u00b7\2\2\u0956\u096a")
        buf.write(u"\5\u04b4\u025b\2\u0957\u0958\7\u00ee\2\2\u0958\u0959")
        buf.write(u"\7\u00b7\2\2\u0959\u096a\5\u04b4\u025b\2\u095a\u095b")
        buf.write(u"\7\u00fa\2\2\u095b\u096a\5\u0250\u0129\2\u095c\u095d")
        buf.write(u"\7\u00f0\2\2\u095d\u096a\7\u00fa\2\2\u095e\u095f\7\u010b")
        buf.write(u"\2\2\u095f\u0960\7\u0168\2\2\u0960\u096a\5\u04cc\u0267")
        buf.write(u"\2\u0961\u0962\7\u0147\2\2\u0962\u0963\7\u0160\2\2\u0963")
        buf.write(u"\u096a\5\u04b8\u025d\2\u0964\u0965\7\u0147\2\2\u0965")
        buf.write(u"\u096a\5\u0108\u0085\2\u0966\u0967\7\u012e\2\2\u0967")
        buf.write(u"\u096a\5\u0108\u0085\2\u0968\u096a\5\u01ca\u00e6\2\u0969")
        buf.write(u"\u08c4\3\2\2\2\u0969\u08c6\3\2\2\2\u0969\u08c9\3\2\2")
        buf.write(u"\2\u0969\u08ce\3\2\2\2\u0969\u08d5\3\2\2\2\u0969\u08dc")
        buf.write(u"\3\2\2\2\u0969\u08e3\3\2\2\2\u0969\u08e9\3\2\2\2\u0969")
        buf.write(u"\u08ef\3\2\2\2\u0969\u08f6\3\2\2\2\u0969\u08fd\3\2\2")
        buf.write(u"\2\u0969\u0902\3\2\2\2\u0969\u090b\3\2\2\2\u0969\u0910")
        buf.write(u"\3\2\2\2\u0969\u0912\3\2\2\2\u0969\u0915\3\2\2\2\u0969")
        buf.write(u"\u091c\3\2\2\2\u0969\u0921\3\2\2\2\u0969\u0924\3\2\2")
        buf.write(u"\2\u0969\u0927\3\2\2\2\u0969\u092a\3\2\2\2\u0969\u092d")
        buf.write(u"\3\2\2\2\u0969\u0930\3\2\2\2\u0969\u0934\3\2\2\2\u0969")
        buf.write(u"\u0938\3\2\2\2\u0969\u093b\3\2\2\2\u0969\u093e\3\2\2")
        buf.write(u"\2\u0969\u0941\3\2\2\2\u0969\u0944\3\2\2\2\u0969\u0947")
        buf.write(u"\3\2\2\2\u0969\u094a\3\2\2\2\u0969\u094e\3\2\2\2\u0969")
        buf.write(u"\u0952\3\2\2\2\u0969\u0955\3\2\2\2\u0969\u0957\3\2\2")
        buf.write(u"\2\u0969\u095a\3\2\2\2\u0969\u095c\3\2\2\2\u0969\u095e")
        buf.write(u"\3\2\2\2\u0969\u0961\3\2\2\2\u0969\u0964\3\2\2\2\u0969")
        buf.write(u"\u0966\3\2\2\2\u0969\u0968\3\2\2\2\u096a\u00ff\3\2\2")
        buf.write(u"\2\u096b\u096c\7\u0147\2\2\u096c\u096d\7o\2\2\u096d\u0971")
        buf.write(u"\5\u043a\u021e\2\u096e\u096f\7\u0080\2\2\u096f\u0971")
        buf.write(u"\7o\2\2\u0970\u096b\3\2\2\2\u0970\u096e\3\2\2\2\u0971")
        buf.write(u"\u0101\3\2\2\2\u0972\u0976\7;\2\2\u0973\u0976\7\u0130")
        buf.write(u"\2\2\u0974\u0976\3\2\2\2\u0975\u0972\3\2\2\2\u0975\u0973")
        buf.write(u"\3\2\2\2\u0975\u0974\3\2\2\2\u0976\u0103\3\2\2\2\u0977")
        buf.write(u"\u0978\7J\2\2\u0978\u097b\5\u0250\u0129\2\u0979\u097b")
        buf.write(u"\3\2\2\2\u097a\u0977\3\2\2\2\u097a\u0979\3\2\2\2\u097b")
        buf.write(u"\u0105\3\2\2\2\u097c\u097d\7\u017e\2\2\u097d\u0980\5")
        buf.write(u"\u043a\u021e\2\u097e\u0980\3\2\2\2\u097f\u097c\3\2\2")
        buf.write(u"\2\u097f\u097e\3\2\2\2\u0980\u0107\3\2\2\2\u0981\u0982")
        buf.write(u"\7\r\2\2\u0982\u0983\5\u010c\u0087\2\u0983\u0984\7\7")
        buf.write(u"\2\2\u0984\u0109\3\2\2\2\u0985\u0986\7\u0190\2\2\u0986")
        buf.write(u"\u0989\5\u0108\u0085\2\u0987\u0989\3\2\2\2\u0988\u0985")
        buf.write(u"\3\2\2\2\u0988\u0987\3\2\2\2\u0989\u010b\3\2\2\2\u098a")
        buf.write(u"\u098b\b\u0087\1\2\u098b\u098c\5\u010e\u0088\2\u098c")
        buf.write(u"\u0992\3\2\2\2\u098d\u098e\f\3\2\2\u098e\u098f\7\b\2")
        buf.write(u"\2\u098f\u0991\5\u010e\u0088\2\u0990\u098d\3\2\2\2\u0991")
        buf.write(u"\u0994\3\2\2\2\u0992\u0990\3\2\2\2\u0992\u0993\3\2\2")
        buf.write(u"\2\u0993\u010d\3\2\2\2\u0994\u0992\3\2\2\2\u0995\u0996")
        buf.write(u"\5\u04d4\u026b\2\u0996\u0997\7\20\2\2\u0997\u0998\5\u021c")
        buf.write(u"\u010f\2\u0998\u09a5\3\2\2\2\u0999\u09a5\5\u04d4\u026b")
        buf.write(u"\2\u099a\u099b\5\u04d4\u026b\2\u099b\u099c\7\6\2\2\u099c")
        buf.write(u"\u099d\5\u04d4\u026b\2\u099d\u099e\7\20\2\2\u099e\u099f")
        buf.write(u"\5\u021c\u010f\2\u099f\u09a5\3\2\2\2\u09a0\u09a1\5\u04d4")
        buf.write(u"\u026b\2\u09a1\u09a2\7\6\2\2\u09a2\u09a3\5\u04d4\u026b")
        buf.write(u"\2\u09a3\u09a5\3\2\2\2\u09a4\u0995\3\2\2\2\u09a4\u0999")
        buf.write(u"\3\2\2\2\u09a4\u099a\3\2\2\2\u09a4\u09a0\3\2\2\2\u09a5")
        buf.write(u"\u010f\3\2\2\2\u09a6\u09a7\7 \2\2\u09a7\u09a8\7\u0171")
        buf.write(u"\2\2\u09a8\u09a9\5\u0250\u0129\2\u09a9\u09aa\5\u0112")
        buf.write(u"\u008a\2\u09aa\u0111\3\2\2\2\u09ab\u09ac\b\u008a\1\2")
        buf.write(u"\u09ac\u09ad\5\u0114\u008b\2\u09ad\u09b3\3\2\2\2\u09ae")
        buf.write(u"\u09af\f\3\2\2\u09af\u09b0\7\b\2\2\u09b0\u09b2\5\u0114")
        buf.write(u"\u008b\2\u09b1\u09ae\3\2\2\2\u09b2\u09b5\3\2\2\2\u09b3")
        buf.write(u"\u09b1\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u0113\3\2\2")
        buf.write(u"\2\u09b5\u09b3\3\2\2\2\u09b6\u09b7\7\32\2\2\u09b7\u09b8")
        buf.write(u"\7-\2\2\u09b8\u09b9\5\u0408\u0205\2\u09b9\u09ba\5\u0102")
        buf.write(u"\u0082\2\u09ba\u09d1\3\2\2\2\u09bb\u09bc\7\u0080\2\2")
        buf.write(u"\u09bc\u09bd\7-\2\2\u09bd\u09be\7\u00ad\2\2\u09be\u09bf")
        buf.write(u"\7\u008e\2\2\u09bf\u09c0\5\u04d0\u0269\2\u09c0\u09c1")
        buf.write(u"\5\u0102\u0082\2\u09c1\u09d1\3\2\2\2\u09c2\u09c3\7\u0080")
        buf.write(u"\2\2\u09c3\u09c4\7-\2\2\u09c4\u09c5\5\u04d0\u0269\2\u09c5")
        buf.write(u"\u09c6\5\u0102\u0082\2\u09c6\u09d1\3\2\2\2\u09c7\u09c8")
        buf.write(u"\7 \2\2\u09c8\u09c9\7-\2\2\u09c9\u09ca\5\u04d0\u0269")
        buf.write(u"\2\u09ca\u09cb\5\u02fa\u017e\2\u09cb\u09cc\7\u0171\2")
        buf.write(u"\2\u09cc\u09cd\5\u040a\u0206\2\u09cd\u09ce\5\u0104\u0083")
        buf.write(u"\2\u09ce\u09cf\5\u0102\u0082\2\u09cf\u09d1\3\2\2\2\u09d0")
        buf.write(u"\u09b6\3\2\2\2\u09d0\u09bb\3\2\2\2\u09d0\u09c2\3\2\2")
        buf.write(u"\2\u09d0\u09c7\3\2\2\2\u09d1\u0115\3\2\2\2\u09d2\u09d3")
        buf.write(u"\7G\2\2\u09d3\u09d7\5\u039a\u01ce\2\u09d4\u09d5\7G\2")
        buf.write(u"\2\u09d5\u09d7\7\36\2\2\u09d6\u09d2\3\2\2\2\u09d6\u09d4")
        buf.write(u"\3\2\2\2\u09d7\u0117\3\2\2\2\u09d8\u09d9\7Y\2\2\u09d9")
        buf.write(u"\u09da\5\u0124\u0093\2\u09da\u09db\5\u04b4\u025b\2\u09db")
        buf.write(u"\u09dc\5\u015e\u00b0\2\u09dc\u09dd\5\u0126\u0094\2\u09dd")
        buf.write(u"\u09de\5\u011a\u008e\2\u09de\u09df\5\u011c\u008f\2\u09df")
        buf.write(u"\u09e1\5\u0128\u0095\2\u09e0\u09e2\7\u0190\2\2\u09e1")
        buf.write(u"\u09e0\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e3\3\2\2")
        buf.write(u"\2\u09e3\u09e4\5\u011e\u0090\2\u09e4\u09ef\3\2\2\2\u09e5")
        buf.write(u"\u09e6\7Y\2\2\u09e6\u09e7\5\u03a2\u01d2\2\u09e7\u09e8")
        buf.write(u"\7\u0168\2\2\u09e8\u09ea\5\u011c\u008f\2\u09e9\u09eb")
        buf.write(u"\7\u0190\2\2\u09ea\u09e9\3\2\2\2\u09ea\u09eb\3\2\2\2")
        buf.write(u"\u09eb\u09ec\3\2\2\2\u09ec\u09ed\5\u011e\u0090\2\u09ed")
        buf.write(u"\u09ef\3\2\2\2\u09ee\u09d8\3\2\2\2\u09ee\u09e5\3\2\2")
        buf.write(u"\2\u09ef\u0119\3\2\2\2\u09f0\u09f1\t\f\2\2\u09f1\u011b")
        buf.write(u"\3\2\2\2\u09f2\u09f6\5\u04ca\u0266\2\u09f3\u09f6\7\u0155")
        buf.write(u"\2\2\u09f4\u09f6\7\u0156\2\2\u09f5\u09f2\3\2\2\2\u09f5")
        buf.write(u"\u09f3\3\2\2\2\u09f5\u09f4\3\2\2\2\u09f6\u011d\3\2\2")
        buf.write(u"\2\u09f7\u09fd\5\u0120\u0091\2\u09f8\u09f9\7\r\2\2\u09f9")
        buf.write(u"\u09fa\5\u012c\u0097\2\u09fa\u09fb\7\7\2\2\u09fb\u09fd")
        buf.write(u"\3\2\2\2\u09fc\u09f7\3\2\2\2\u09fc\u09f8\3\2\2\2\u09fd")
        buf.write(u"\u011f\3\2\2\2\u09fe\u0a03\b\u0091\1\2\u09ff\u0a00\f")
        buf.write(u"\4\2\2\u0a00\u0a02\5\u0122\u0092\2\u0a01\u09ff\3\2\2")
        buf.write(u"\2\u0a02\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04")
        buf.write(u"\3\2\2\2\u0a04\u0121\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06")
        buf.write(u"\u0a27\7\64\2\2\u0a07\u0a27\7\u00fd\2\2\u0a08\u0a09\7")
        buf.write(u"u\2\2\u0a09\u0a0a\5\u033e\u01a0\2\u0a0a\u0a0b\5\u04ca")
        buf.write(u"\u0266\2\u0a0b\u0a27\3\2\2\2\u0a0c\u0a0d\7\u00f5\2\2")
        buf.write(u"\u0a0d\u0a0e\5\u033e\u01a0\2\u0a0e\u0a0f\5\u04ca\u0266")
        buf.write(u"\2\u0a0f\u0a27\3\2\2\2\u0a10\u0a27\7]\2\2\u0a11\u0a27")
        buf.write(u"\7\u00a9\2\2\u0a12\u0a13\7\u011e\2\2\u0a13\u0a14\5\u033e")
        buf.write(u"\u01a0\2\u0a14\u0a15\5\u04ca\u0266\2\u0a15\u0a27\3\2")
        buf.write(u"\2\2\u0a16\u0a17\7\u0088\2\2\u0a17\u0a18\5\u033e\u01a0")
        buf.write(u"\2\u0a18\u0a19\5\u04ca\u0266\2\u0a19\u0a27\3\2\2\2\u0a1a")
        buf.write(u"\u0a1b\7\u009a\2\2\u0a1b\u0a1c\7\u011e\2\2\u0a1c\u0a27")
        buf.write(u"\5\u0160\u00b1\2\u0a1d\u0a1e\7\u009a\2\2\u0a1e\u0a1f")
        buf.write(u"\7\u011e\2\2\u0a1f\u0a27\7\13\2\2\u0a20\u0a21\7\u009a")
        buf.write(u"\2\2\u0a21\u0a22\7\u00f0\2\2\u0a22\u0a23\7\u00f5\2\2")
        buf.write(u"\u0a23\u0a27\5\u0160\u00b1\2\u0a24\u0a25\7\u0084\2\2")
        buf.write(u"\u0a25\u0a27\5\u04ca\u0266\2\u0a26\u0a06\3\2\2\2\u0a26")
        buf.write(u"\u0a07\3\2\2\2\u0a26\u0a08\3\2\2\2\u0a26\u0a0c\3\2\2")
        buf.write(u"\2\u0a26\u0a10\3\2\2\2\u0a26\u0a11\3\2\2\2\u0a26\u0a12")
        buf.write(u"\3\2\2\2\u0a26\u0a16\3\2\2\2\u0a26\u0a1a\3\2\2\2\u0a26")
        buf.write(u"\u0a1d\3\2\2\2\u0a26\u0a20\3\2\2\2\u0a26\u0a24\3\2\2")
        buf.write(u"\2\u0a27\u0123\3\2\2\2\u0a28\u0a2b\7\64\2\2\u0a29\u0a2b")
        buf.write(u"\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a29\3\2\2\2\u0a2b")
        buf.write(u"\u0125\3\2\2\2\u0a2c\u0a2d\7\u0190\2\2\u0a2d\u0a30\7")
        buf.write(u"\u00fd\2\2\u0a2e\u0a30\3\2\2\2\u0a2f\u0a2c\3\2\2\2\u0a2f")
        buf.write(u"\u0a2e\3\2\2\2\u0a30\u0127\3\2\2\2\u0a31\u0a32\5\u012a")
        buf.write(u"\u0096\2\u0a32\u0a33\7v\2\2\u0a33\u0a34\5\u04ca\u0266")
        buf.write(u"\2\u0a34\u0a37\3\2\2\2\u0a35\u0a37\3\2\2\2\u0a36\u0a31")
        buf.write(u"\3\2\2\2\u0a36\u0a35\3\2\2\2\u0a37\u0129\3\2\2\2\u0a38")
        buf.write(u"\u0a3b\7\u017e\2\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a38\3")
        buf.write(u"\2\2\2\u0a3a\u0a39\3\2\2\2\u0a3b\u012b\3\2\2\2\u0a3c")
        buf.write(u"\u0a3d\b\u0097\1\2\u0a3d\u0a3e\5\u012e\u0098\2\u0a3e")
        buf.write(u"\u0a44\3\2\2\2\u0a3f\u0a40\f\3\2\2\u0a40\u0a41\7\b\2")
        buf.write(u"\2\u0a41\u0a43\5\u012e\u0098\2\u0a42\u0a3f\3\2\2\2\u0a43")
        buf.write(u"\u0a46\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a44\u0a45\3\2\2")
        buf.write(u"\2\u0a45\u012d\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a47\u0a48")
        buf.write(u"\5\u04d4\u026b\2\u0a48\u0a49\5\u0130\u0099\2\u0a49\u012f")
        buf.write(u"\3\2\2\2\u0a4a\u0a53\5\u00e0q\2\u0a4b\u0a53\5\u0192\u00ca")
        buf.write(u"\2\u0a4c\u0a53\7\13\2\2\u0a4d\u0a4e\7\r\2\2\u0a4e\u0a4f")
        buf.write(u"\5\u0132\u009a\2\u0a4f\u0a50\7\7\2\2\u0a50\u0a53\3\2")
        buf.write(u"\2\2\u0a51\u0a53\3\2\2\2\u0a52\u0a4a\3\2\2\2\u0a52\u0a4b")
        buf.write(u"\3\2\2\2\u0a52\u0a4c\3\2\2\2\u0a52\u0a4d\3\2\2\2\u0a52")
        buf.write(u"\u0a51\3\2\2\2\u0a53\u0131\3\2\2\2\u0a54\u0a55\b\u009a")
        buf.write(u"\1\2\u0a55\u0a56\5\u0134\u009b\2\u0a56\u0a5c\3\2\2\2")
        buf.write(u"\u0a57\u0a58\f\3\2\2\u0a58\u0a59\7\b\2\2\u0a59\u0a5b")
        buf.write(u"\5\u0134\u009b\2\u0a5a\u0a57\3\2\2\2\u0a5b\u0a5e\3\2")
        buf.write(u"\2\2\u0a5c\u0a5a\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0133")
        buf.write(u"\3\2\2\2\u0a5e\u0a5c\3\2\2\2\u0a5f\u0a60\5\u00e0q\2\u0a60")
        buf.write(u"\u0135\3\2\2\2\u0a61\u0a62\7[\2\2\u0a62\u0a63\5\u0138")
        buf.write(u"\u009d\2\u0a63\u0a64\7\u015e\2\2\u0a64\u0a65\5\u04b4")
        buf.write(u"\u025b\2\u0a65\u0a66\7\r\2\2\u0a66\u0a67\5\u013a\u009e")
        buf.write(u"\2\u0a67\u0a68\7\7\2\2\u0a68\u0a69\5\u0174\u00bb\2\u0a69")
        buf.write(u"\u0a6a\5\u0176\u00bc\2\u0a6a\u0a6b\5\u0178\u00bd\2\u0a6b")
        buf.write(u"\u0a6c\5\u017a\u00be\2\u0a6c\u0a96\3\2\2\2\u0a6d\u0a6e")
        buf.write(u"\7[\2\2\u0a6e\u0a6f\5\u0138\u009d\2\u0a6f\u0a70\7\u015e")
        buf.write(u"\2\2\u0a70\u0a71\7\u00ad\2\2\u0a71\u0a72\7\u00f0\2\2")
        buf.write(u"\u0a72\u0a73\7\u008e\2\2\u0a73\u0a74\5\u04b4\u025b\2")
        buf.write(u"\u0a74\u0a75\7\r\2\2\u0a75\u0a76\5\u013a\u009e\2\u0a76")
        buf.write(u"\u0a77\7\7\2\2\u0a77\u0a78\5\u0174\u00bb\2\u0a78\u0a79")
        buf.write(u"\5\u0176\u00bc\2\u0a79\u0a7a\5\u0178\u00bd\2\u0a7a\u0a7b")
        buf.write(u"\5\u017a\u00be\2\u0a7b\u0a96\3\2\2\2\u0a7c\u0a7d\7[\2")
        buf.write(u"\2\u0a7d\u0a7e\5\u0138\u009d\2\u0a7e\u0a7f\7\u015e\2")
        buf.write(u"\2\u0a7f\u0a80\5\u04b4\u025b\2\u0a80\u0a81\7\u00fa\2")
        buf.write(u"\2\u0a81\u0a82\5\u0250\u0129\2\u0a82\u0a83\5\u013c\u009f")
        buf.write(u"\2\u0a83\u0a84\5\u0176\u00bc\2\u0a84\u0a85\5\u0178\u00bd")
        buf.write(u"\2\u0a85\u0a86\5\u017a\u00be\2\u0a86\u0a96\3\2\2\2\u0a87")
        buf.write(u"\u0a88\7[\2\2\u0a88\u0a89\5\u0138\u009d\2\u0a89\u0a8a")
        buf.write(u"\7\u015e\2\2\u0a8a\u0a8b\7\u00ad\2\2\u0a8b\u0a8c\7\u00f0")
        buf.write(u"\2\2\u0a8c\u0a8d\7\u008e\2\2\u0a8d\u0a8e\5\u04b4\u025b")
        buf.write(u"\2\u0a8e\u0a8f\7\u00fa\2\2\u0a8f\u0a90\5\u0250\u0129")
        buf.write(u"\2\u0a90\u0a91\5\u013c\u009f\2\u0a91\u0a92\5\u0176\u00bc")
        buf.write(u"\2\u0a92\u0a93\5\u0178\u00bd\2\u0a93\u0a94\5\u017a\u00be")
        buf.write(u"\2\u0a94\u0a96\3\2\2\2\u0a95\u0a61\3\2\2\2\u0a95\u0a6d")
        buf.write(u"\3\2\2\2\u0a95\u0a7c\3\2\2\2\u0a95\u0a87\3\2\2\2\u0a96")
        buf.write(u"\u0137\3\2\2\2\u0a97\u0aa4\7\u0163\2\2\u0a98\u0aa4\7")
        buf.write(u"\u0161\2\2\u0a99\u0a9a\7\u00db\2\2\u0a9a\u0aa4\7\u0163")
        buf.write(u"\2\2\u0a9b\u0a9c\7\u00db\2\2\u0a9c\u0aa4\7\u0161\2\2")
        buf.write(u"\u0a9d\u0a9e\7\u00a2\2\2\u0a9e\u0aa4\7\u0163\2\2\u0a9f")
        buf.write(u"\u0aa0\7\u00a2\2\2\u0aa0\u0aa4\7\u0161\2\2\u0aa1\u0aa4")
        buf.write(u"\7\u017a\2\2\u0aa2\u0aa4\3\2\2\2\u0aa3\u0a97\3\2\2\2")
        buf.write(u"\u0aa3\u0a98\3\2\2\2\u0aa3\u0a99\3\2\2\2\u0aa3\u0a9b")
        buf.write(u"\3\2\2\2\u0aa3\u0a9d\3\2\2\2\u0aa3\u0a9f\3\2\2\2\u0aa3")
        buf.write(u"\u0aa1\3\2\2\2\u0aa3\u0aa2\3\2\2\2\u0aa4\u0139\3\2\2")
        buf.write(u"\2\u0aa5\u0aa8\5\u013e\u00a0\2\u0aa6\u0aa8\3\2\2\2\u0aa7")
        buf.write(u"\u0aa5\3\2\2\2\u0aa7\u0aa6\3\2\2\2\u0aa8\u013b\3\2\2")
        buf.write(u"\2\u0aa9\u0aaa\7\r\2\2\u0aaa\u0aab\5\u0140\u00a1\2\u0aab")
        buf.write(u"\u0aac\7\7\2\2\u0aac\u0aaf\3\2\2\2\u0aad\u0aaf\3\2\2")
        buf.write(u"\2\u0aae\u0aa9\3\2\2\2\u0aae\u0aad\3\2\2\2\u0aaf\u013d")
        buf.write(u"\3\2\2\2\u0ab0\u0ab1\b\u00a0\1\2\u0ab1\u0ab2\5\u0142")
        buf.write(u"\u00a2\2\u0ab2\u0ab8\3\2\2\2\u0ab3\u0ab4\f\3\2\2\u0ab4")
        buf.write(u"\u0ab5\7\b\2\2\u0ab5\u0ab7\5\u0142\u00a2\2\u0ab6\u0ab3")
        buf.write(u"\3\2\2\2\u0ab7\u0aba\3\2\2\2\u0ab8\u0ab6\3\2\2\2\u0ab8")
        buf.write(u"\u0ab9\3\2\2\2\u0ab9\u013f\3\2\2\2\u0aba\u0ab8\3\2\2")
        buf.write(u"\2\u0abb\u0abc\b\u00a1\1\2\u0abc\u0abd\5\u0144\u00a3")
        buf.write(u"\2\u0abd\u0ac3\3\2\2\2\u0abe\u0abf\f\3\2\2\u0abf\u0ac0")
        buf.write(u"\7\b\2\2\u0ac0\u0ac2\5\u0144\u00a3\2\u0ac1\u0abe\3\2")
        buf.write(u"\2\2\u0ac2\u0ac5\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4")
        buf.write(u"\3\2\2\2\u0ac4\u0141\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac6")
        buf.write(u"\u0aca\5\u0146\u00a4\2\u0ac7\u0aca\5\u0152\u00aa\2\u0ac8")
        buf.write(u"\u0aca\5\u0158\u00ad\2\u0ac9\u0ac6\3\2\2\2\u0ac9\u0ac7")
        buf.write(u"\3\2\2\2\u0ac9\u0ac8\3\2\2\2\u0aca\u0143\3\2\2\2\u0acb")
        buf.write(u"\u0ace\5\u0148\u00a5\2\u0acc\u0ace\5\u0158\u00ad\2\u0acd")
        buf.write(u"\u0acb\3\2\2\2\u0acd\u0acc\3\2\2\2\u0ace\u0145\3\2\2")
        buf.write(u"\2\u0acf\u0ad0\5\u04d0\u0269\2\u0ad0\u0ad1\5\u040a\u0206")
        buf.write(u"\2\u0ad1\u0ad2\5\u01c6\u00e4\2\u0ad2\u0ad3\5\u014a\u00a6")
        buf.write(u"\2\u0ad3\u0147\3\2\2\2\u0ad4\u0ad5\5\u04d0\u0269\2\u0ad5")
        buf.write(u"\u0ad6\7\u0190\2\2\u0ad6\u0ad7\7\u0102\2\2\u0ad7\u0ad8")
        buf.write(u"\5\u014a\u00a6\2\u0ad8\u0149\3\2\2\2\u0ad9\u0ade\b\u00a6")
        buf.write(u"\1\2\u0ada\u0adb\f\4\2\2\u0adb\u0add\5\u014c\u00a7\2")
        buf.write(u"\u0adc\u0ada\3\2\2\2\u0add\u0ae0\3\2\2\2\u0ade\u0adc")
        buf.write(u"\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u014b\3\2\2\2\u0ae0")
        buf.write(u"\u0ade\3\2\2\2\u0ae1\u0ae2\7T\2\2\u0ae2\u0ae3\5\u04b8")
        buf.write(u"\u025d\2\u0ae3\u0ae4\5\u014e\u00a8\2\u0ae4\u0aea\3\2")
        buf.write(u"\2\2\u0ae5\u0aea\5\u014e\u00a8\2\u0ae6\u0aea\5\u0150")
        buf.write(u"\u00a9\2\u0ae7\u0ae8\7J\2\2\u0ae8\u0aea\5\u0250\u0129")
        buf.write(u"\2\u0ae9\u0ae1\3\2\2\2\u0ae9\u0ae5\3\2\2\2\u0ae9\u0ae6")
        buf.write(u"\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0aea\u014d\3\2\2\2\u0aeb")
        buf.write(u"\u0aec\7\u00f0\2\2\u0aec\u0b06\7\u00f5\2\2\u0aed\u0b06")
        buf.write(u"\7\u00f5\2\2\u0aee\u0aef\7\u0177\2\2\u0aef\u0af0\5\u02cc")
        buf.write(u"\u0167\2\u0af0\u0af1\5\u017c\u00bf\2\u0af1\u0b06\3\2")
        buf.write(u"\2\2\u0af2\u0af3\7\u0119\2\2\u0af3\u0af4\7\u00cb\2\2")
        buf.write(u"\u0af4\u0af5\5\u02cc\u0167\2\u0af5\u0af6\5\u017c\u00bf")
        buf.write(u"\2\u0af6\u0b06\3\2\2\2\u0af7\u0af8\7D\2\2\u0af8\u0af9")
        buf.write(u"\7\r\2\2\u0af9\u0afa\5\u043a\u021e\2\u0afa\u0afb\7\7")
        buf.write(u"\2\2\u0afb\u0afc\5\u015c\u00af\2\u0afc\u0b06\3\2\2\2")
        buf.write(u"\u0afd\u0afe\7o\2\2\u0afe\u0b06\5\u043c\u021f\2\u0aff")
        buf.write(u"\u0b00\7\u0126\2\2\u0b00\u0b01\5\u04b4\u025b\2\u0b01")
        buf.write(u"\u0b02\5\u015e\u00b0\2\u0b02\u0b03\5\u0164\u00b3\2\u0b03")
        buf.write(u"\u0b04\5\u016c\u00b7\2\u0b04\u0b06\3\2\2\2\u0b05\u0aeb")
        buf.write(u"\3\2\2\2\u0b05\u0aed\3\2\2\2\u0b05\u0aee\3\2\2\2\u0b05")
        buf.write(u"\u0af2\3\2\2\2\u0b05\u0af7\3\2\2\2\u0b05\u0afd\3\2\2")
        buf.write(u"\2\u0b05\u0aff\3\2\2\2\u0b06\u014f\3\2\2\2\u0b07\u0b0f")
        buf.write(u"\7q\2\2\u0b08\u0b09\7\u00f0\2\2\u0b09\u0b0f\7q\2\2\u0b0a")
        buf.write(u"\u0b0b\7\u00b9\2\2\u0b0b\u0b0f\7r\2\2\u0b0c\u0b0d\7\u00b9")
        buf.write(u"\2\2\u0b0d\u0b0f\7\u00af\2\2\u0b0e\u0b07\3\2\2\2\u0b0e")
        buf.write(u"\u0b08\3\2\2\2\u0b0e\u0b0a\3\2\2\2\u0b0e\u0b0c\3\2\2")
        buf.write(u"\2\u0b0f\u0151\3\2\2\2\u0b10\u0b11\7\u00d7\2\2\u0b11")
        buf.write(u"\u0b12\5\u04b4\u025b\2\u0b12\u0b13\5\u0154\u00ab\2\u0b13")
        buf.write(u"\u0153\3\2\2\2\u0b14\u0b1d\b\u00ab\1\2\u0b15\u0b16\f")
        buf.write(u"\5\2\2\u0b16\u0b17\7\u00b3\2\2\u0b17\u0b1c\5\u0156\u00ac")
        buf.write(u"\2\u0b18\u0b19\f\4\2\2\u0b19\u0b1a\7\u008b\2\2\u0b1a")
        buf.write(u"\u0b1c\5\u0156\u00ac\2\u0b1b\u0b15\3\2\2\2\u0b1b\u0b18")
        buf.write(u"\3\2\2\2\u0b1c\u0b1f\3\2\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d")
        buf.write(u"\u0b1e\3\2\2\2\u0b1e\u0155\3\2\2\2\u0b1f\u0b1d\3\2\2")
        buf.write(u"\2\u0b20\u0b21\t\r\2\2\u0b21\u0157\3\2\2\2\u0b22\u0b23")
        buf.write(u"\7T\2\2\u0b23\u0b24\5\u04b8\u025d\2\u0b24\u0b25\5\u015a")
        buf.write(u"\u00ae\2\u0b25\u0b28\3\2\2\2\u0b26\u0b28\5\u015a\u00ae")
        buf.write(u"\2\u0b27\u0b22\3\2\2\2\u0b27\u0b26\3\2\2\2\u0b28\u0159")
        buf.write(u"\3\2\2\2\u0b29\u0b2a\7D\2\2\u0b2a\u0b2b\7\r\2\2\u0b2b")
        buf.write(u"\u0b2c\5\u043a\u021e\2\u0b2c\u0b2d\7\7\2\2\u0b2d\u0b2e")
        buf.write(u"\5\u020a\u0106\2\u0b2e\u0b60\3\2\2\2\u0b2f\u0b30\7\u0177")
        buf.write(u"\2\2\u0b30\u0b31\7\r\2\2\u0b31\u0b32\5\u0160\u00b1\2")
        buf.write(u"\u0b32\u0b33\7\7\2\2\u0b33\u0b34\5\u02cc\u0167\2\u0b34")
        buf.write(u"\u0b35\5\u017c\u00bf\2\u0b35\u0b36\5\u020a\u0106\2\u0b36")
        buf.write(u"\u0b60\3\2\2\2\u0b37\u0b38\7\u0177\2\2\u0b38\u0b39\5")
        buf.write(u"\u017e\u00c0\2\u0b39\u0b3a\5\u020a\u0106\2\u0b3a\u0b60")
        buf.write(u"\3\2\2\2\u0b3b\u0b3c\7\u0119\2\2\u0b3c\u0b3d\7\u00cb")
        buf.write(u"\2\2\u0b3d\u0b3e\7\r\2\2\u0b3e\u0b3f\5\u0160\u00b1\2")
        buf.write(u"\u0b3f\u0b40\7\7\2\2\u0b40\u0b41\5\u02cc\u0167\2\u0b41")
        buf.write(u"\u0b42\5\u017c\u00bf\2\u0b42\u0b43\5\u020a\u0106\2\u0b43")
        buf.write(u"\u0b60\3\2\2\2\u0b44\u0b45\7\u0119\2\2\u0b45\u0b46\7")
        buf.write(u"\u00cb\2\2\u0b46\u0b47\5\u017e\u00c0\2\u0b47\u0b48\5")
        buf.write(u"\u020a\u0106\2\u0b48\u0b60\3\2\2\2\u0b49\u0b4a\7\u008a")
        buf.write(u"\2\2\u0b4a\u0b4b\5\u029e\u0150\2\u0b4b\u0b4c\7\r\2\2")
        buf.write(u"\u0b4c\u0b4d\5\u0166\u00b4\2\u0b4d\u0b4e\7\7\2\2\u0b4e")
        buf.write(u"\u0b4f\5\u02cc\u0167\2\u0b4f\u0b50\5\u017c\u00bf\2\u0b50")
        buf.write(u"\u0b51\5\u016a\u00b6\2\u0b51\u0b52\5\u020a\u0106\2\u0b52")
        buf.write(u"\u0b60\3\2\2\2\u0b53\u0b54\7\u009b\2\2\u0b54\u0b55\7")
        buf.write(u"\u00cb\2\2\u0b55\u0b56\7\r\2\2\u0b56\u0b57\5\u0160\u00b1")
        buf.write(u"\2\u0b57\u0b58\7\7\2\2\u0b58\u0b59\7\u0126\2\2\u0b59")
        buf.write(u"\u0b5a\5\u04b4\u025b\2\u0b5a\u0b5b\5\u015e\u00b0\2\u0b5b")
        buf.write(u"\u0b5c\5\u0164\u00b3\2\u0b5c\u0b5d\5\u016c\u00b7\2\u0b5d")
        buf.write(u"\u0b5e\5\u020a\u0106\2\u0b5e\u0b60\3\2\2\2\u0b5f\u0b29")
        buf.write(u"\3\2\2\2\u0b5f\u0b2f\3\2\2\2\u0b5f\u0b37\3\2\2\2\u0b5f")
        buf.write(u"\u0b3b\3\2\2\2\u0b5f\u0b44\3\2\2\2\u0b5f\u0b49\3\2\2")
        buf.write(u"\2\u0b5f\u0b53\3\2\2\2\u0b60\u015b\3\2\2\2\u0b61\u0b62")
        buf.write(u"\7\u00ee\2\2\u0b62\u0b65\7\u00b7\2\2\u0b63\u0b65\3\2")
        buf.write(u"\2\2\u0b64\u0b61\3\2\2\2\u0b64\u0b63\3\2\2\2\u0b65\u015d")
        buf.write(u"\3\2\2\2\u0b66\u0b67\7\r\2\2\u0b67\u0b68\5\u0160\u00b1")
        buf.write(u"\2\u0b68\u0b69\7\7\2\2\u0b69\u0b6c\3\2\2\2\u0b6a\u0b6c")
        buf.write(u"\3\2\2\2\u0b6b\u0b66\3\2\2\2\u0b6b\u0b6a\3\2\2\2\u0b6c")
        buf.write(u"\u015f\3\2\2\2\u0b6d\u0b6e\b\u00b1\1\2\u0b6e\u0b6f\5")
        buf.write(u"\u0162\u00b2\2\u0b6f\u0b75\3\2\2\2\u0b70\u0b71\f\3\2")
        buf.write(u"\2\u0b71\u0b72\7\b\2\2\u0b72\u0b74\5\u0162\u00b2\2\u0b73")
        buf.write(u"\u0b70\3\2\2\2\u0b74\u0b77\3\2\2\2\u0b75\u0b73\3\2\2")
        buf.write(u"\2\u0b75\u0b76\3\2\2\2\u0b76\u0161\3\2\2\2\u0b77\u0b75")
        buf.write(u"\3\2\2\2\u0b78\u0b79\5\u04d0\u0269\2\u0b79\u0163\3\2")
        buf.write(u"\2\2\u0b7a\u0b7b\7\u00e1\2\2\u0b7b\u0b82\7\u009f\2\2")
        buf.write(u"\u0b7c\u0b7d\7\u00e1\2\2\u0b7d\u0b82\7\u010d\2\2\u0b7e")
        buf.write(u"\u0b7f\7\u00e1\2\2\u0b7f\u0b82\7\u014c\2\2\u0b80\u0b82")
        buf.write(u"\3\2\2\2\u0b81\u0b7a\3\2\2\2\u0b81\u0b7c\3\2\2\2\u0b81")
        buf.write(u"\u0b7e\3\2\2\2\u0b81\u0b80\3\2\2\2\u0b82\u0165\3\2\2")
        buf.write(u"\2\u0b83\u0b84\b\u00b4\1\2\u0b84\u0b85\5\u0168\u00b5")
        buf.write(u"\2\u0b85\u0b8b\3\2\2\2\u0b86\u0b87\f\3\2\2\u0b87\u0b88")
        buf.write(u"\7\b\2\2\u0b88\u0b8a\5\u0168\u00b5\2\u0b89\u0b86\3\2")
        buf.write(u"\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8b\u0b8c")
        buf.write(u"\3\2\2\2\u0b8c\u0167\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e")
        buf.write(u"\u0b8f\5\u02a2\u0152\2\u0b8f\u0b90\7\u0190\2\2\u0b90")
        buf.write(u"\u0b91\5\u02e0\u0171\2\u0b91\u0b9a\3\2\2\2\u0b92\u0b93")
        buf.write(u"\5\u02a2\u0152\2\u0b93\u0b94\7\u0190\2\2\u0b94\u0b95")
        buf.write(u"\7\u0100\2\2\u0b95\u0b96\7\r\2\2\u0b96\u0b97\5\u02e0")
        buf.write(u"\u0171\2\u0b97\u0b98\7\7\2\2\u0b98\u0b9a\3\2\2\2\u0b99")
        buf.write(u"\u0b8e\3\2\2\2\u0b99\u0b92\3\2\2\2\u0b9a\u0169\3\2\2")
        buf.write(u"\2\u0b9b\u0b9c\7\u018d\2\2\u0b9c\u0b9d\7\r\2\2\u0b9d")
        buf.write(u"\u0b9e\5\u043a\u021e\2\u0b9e\u0b9f\7\7\2\2\u0b9f\u0ba2")
        buf.write(u"\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1\u0b9b\3\2\2\2\u0ba1")
        buf.write(u"\u0ba0\3\2\2\2\u0ba2\u016b\3\2\2\2\u0ba3\u0bad\5\u016e")
        buf.write(u"\u00b8\2\u0ba4\u0bad\5\u0170\u00b9\2\u0ba5\u0ba6\5\u016e")
        buf.write(u"\u00b8\2\u0ba6\u0ba7\5\u0170\u00b9\2\u0ba7\u0bad\3\2")
        buf.write(u"\2\2\u0ba8\u0ba9\5\u0170\u00b9\2\u0ba9\u0baa\5\u016e")
        buf.write(u"\u00b8\2\u0baa\u0bad\3\2\2\2\u0bab\u0bad\3\2\2\2\u0bac")
        buf.write(u"\u0ba3\3\2\2\2\u0bac\u0ba4\3\2\2\2\u0bac\u0ba5\3\2\2")
        buf.write(u"\2\u0bac\u0ba8\3\2\2\2\u0bac\u0bab\3\2\2\2\u0bad\u016d")
        buf.write(u"\3\2\2\2\u0bae\u0baf\7\u00fe\2\2\u0baf\u0bb0\7\u017c")
        buf.write(u"\2\2\u0bb0\u0bb1\5\u0172\u00ba\2\u0bb1\u016f\3\2\2\2")
        buf.write(u"\u0bb2\u0bb3\7\u00fe\2\2\u0bb3\u0bb4\7t\2\2\u0bb4\u0bb5")
        buf.write(u"\5\u0172\u00ba\2\u0bb5\u0171\3\2\2\2\u0bb6\u0bb7\7\u00ee")
        buf.write(u"\2\2\u0bb7\u0bbf\7\31\2\2\u0bb8\u0bbf\7\u0130\2\2\u0bb9")
        buf.write(u"\u0bbf\7;\2\2\u0bba\u0bbb\7\u0147\2\2\u0bbb\u0bbf\7\u00f5")
        buf.write(u"\2\2\u0bbc\u0bbd\7\u0147\2\2\u0bbd\u0bbf\7o\2\2\u0bbe")
        buf.write(u"\u0bb6\3\2\2\2\u0bbe\u0bb8\3\2\2\2\u0bbe\u0bb9\3\2\2")
        buf.write(u"\2\u0bbe\u0bba\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0173")
        buf.write(u"\3\2\2\2\u0bc0\u0bc1\7\u00b8\2\2\u0bc1\u0bc2\7\r\2\2")
        buf.write(u"\u0bc2\u0bc3\5\u04b2\u025a\2\u0bc3\u0bc4\7\7\2\2\u0bc4")
        buf.write(u"\u0bc7\3\2\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bc0\3\2\2")
        buf.write(u"\2\u0bc6\u0bc5\3\2\2\2\u0bc7\u0175\3\2\2\2\u0bc8\u0bc9")
        buf.write(u"\7\u0190\2\2\u0bc9\u0bd0\5\u0108\u0085\2\u0bca\u0bcb")
        buf.write(u"\7\u0190\2\2\u0bcb\u0bd0\7\u00fd\2\2\u0bcc\u0bcd\7\u0191")
        buf.write(u"\2\2\u0bcd\u0bd0\7\u00fd\2\2\u0bce\u0bd0\3\2\2\2\u0bcf")
        buf.write(u"\u0bc8\3\2\2\2\u0bcf\u0bca\3\2\2\2\u0bcf\u0bcc\3\2\2")
        buf.write(u"\2\u0bcf\u0bce\3\2\2\2\u0bd0\u0177\3\2\2\2\u0bd1\u0bd2")
        buf.write(u"\7\u00fe\2\2\u0bd2\u0bd3\7O\2\2\u0bd3\u0bde\7\u0080\2")
        buf.write(u"\2\u0bd4\u0bd5\7\u00fe\2\2\u0bd5\u0bd6\7O\2\2\u0bd6\u0bd7")
        buf.write(u"\7t\2\2\u0bd7\u0bde\7\u0138\2\2\u0bd8\u0bd9\7\u00fe\2")
        buf.write(u"\2\u0bd9\u0bda\7O\2\2\u0bda\u0bdb\7\u0118\2\2\u0bdb\u0bde")
        buf.write(u"\7\u0138\2\2\u0bdc\u0bde\3\2\2\2\u0bdd\u0bd1\3\2\2\2")
        buf.write(u"\u0bdd\u0bd4\3\2\2\2\u0bdd\u0bd8\3\2\2\2\u0bdd\u0bdc")
        buf.write(u"\3\2\2\2\u0bde\u0179\3\2\2\2\u0bdf\u0be0\7\u0160\2\2")
        buf.write(u"\u0be0\u0be3\5\u04b8\u025d\2\u0be1\u0be3\3\2\2\2\u0be2")
        buf.write(u"\u0bdf\3\2\2\2\u0be2\u0be1\3\2\2\2\u0be3\u017b\3\2\2")
        buf.write(u"\2\u0be4\u0be5\7\u017e\2\2\u0be5\u0be6\7\u00b5\2\2\u0be6")
        buf.write(u"\u0be7\7\u0160\2\2\u0be7\u0bea\5\u04b8\u025d\2\u0be8")
        buf.write(u"\u0bea\3\2\2\2\u0be9\u0be4\3\2\2\2\u0be9\u0be8\3\2\2")
        buf.write(u"\2\u0bea\u017d\3\2\2\2\u0beb\u0bec\7\u017e\2\2\u0bec")
        buf.write(u"\u0bed\7\u00b5\2\2\u0bed\u0bee\5\u04c0\u0261\2\u0bee")
        buf.write(u"\u017f\3\2\2\2\u0bef\u0bf0\7[\2\2\u0bf0\u0bf1\5\u0138")
        buf.write(u"\u009d\2\u0bf1\u0bf2\7\u015e\2\2\u0bf2\u0bf3\5\u0182")
        buf.write(u"\u00c2\2\u0bf3\u0bf4\7\'\2\2\u0bf4\u0bf5\5\u03a0\u01d1")
        buf.write(u"\2\u0bf5\u0bf6\5\u0184\u00c3\2\u0bf6\u0181\3\2\2\2\u0bf7")
        buf.write(u"\u0bf8\5\u04b4\u025b\2\u0bf8\u0bf9\5\u015e\u00b0\2\u0bf9")
        buf.write(u"\u0bfa\5\u0176\u00bc\2\u0bfa\u0bfb\5\u0178\u00bd\2\u0bfb")
        buf.write(u"\u0bfc\5\u017a\u00be\2\u0bfc\u0183\3\2\2\2\u0bfd\u0bfe")
        buf.write(u"\7\u0190\2\2\u0bfe\u0c04\7h\2\2\u0bff\u0c00\7\u0190\2")
        buf.write(u"\2\u0c00\u0c01\7\u00ee\2\2\u0c01\u0c04\7h\2\2\u0c02\u0c04")
        buf.write(u"\3\2\2\2\u0c03\u0bfd\3\2\2\2\u0c03\u0bff\3\2\2\2\u0c03")
        buf.write(u"\u0c02\3\2\2\2\u0c04\u0185\3\2\2\2\u0c05\u0c06\7[\2\2")
        buf.write(u"\u0c06\u0c07\5\u0138\u009d\2\u0c07\u0c08\7\u0141\2\2")
        buf.write(u"\u0c08\u0c09\5\u04b4\u025b\2\u0c09\u0c0a\5\u018a\u00c6")
        buf.write(u"\2\u0c0a\u0187\3\2\2\2\u0c0b\u0c0c\7 \2\2\u0c0c\u0c0d")
        buf.write(u"\7\u0141\2\2\u0c0d\u0c0e\5\u04b4\u025b\2\u0c0e\u0c0f")
        buf.write(u"\5\u018c\u00c7\2\u0c0f\u0c18\3\2\2\2\u0c10\u0c11\7 \2")
        buf.write(u"\2\u0c11\u0c12\7\u0141\2\2\u0c12\u0c13\7\u00ad\2\2\u0c13")
        buf.write(u"\u0c14\7\u008e\2\2\u0c14\u0c15\5\u04b4\u025b\2\u0c15")
        buf.write(u"\u0c16\5\u018c\u00c7\2\u0c16\u0c18\3\2\2\2\u0c17\u0c0b")
        buf.write(u"\3\2\2\2\u0c17\u0c10\3\2\2\2\u0c18\u0189\3\2\2\2\u0c19")
        buf.write(u"\u0c1c\5\u018c\u00c7\2\u0c1a\u0c1c\3\2\2\2\u0c1b\u0c19")
        buf.write(u"\3\2\2\2\u0c1b\u0c1a\3\2\2\2\u0c1c\u018b\3\2\2\2\u0c1d")
        buf.write(u"\u0c1e\b\u00c7\1\2\u0c1e\u0c1f\5\u018e\u00c8\2\u0c1f")
        buf.write(u"\u0c24\3\2\2\2\u0c20\u0c21\f\3\2\2\u0c21\u0c23\5\u018e")
        buf.write(u"\u00c8\2\u0c22\u0c20\3\2\2\2\u0c23\u0c26\3\2\2\2\u0c24")
        buf.write(u"\u0c22\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u018d\3\2\2")
        buf.write(u"\2\u0c26\u0c24\3\2\2\2\u0c27\u0c28\79\2\2\u0c28\u0c47")
        buf.write(u"\5\u0192\u00ca\2\u0c29\u0c47\7g\2\2\u0c2a\u0c2b\7\u00ee")
        buf.write(u"\2\2\u0c2b\u0c47\7g\2\2\u0c2c\u0c2d\7\u00b4\2\2\u0c2d")
        buf.write(u"\u0c2e\5\u0190\u00c9\2\u0c2e\u0c2f\5\u0192\u00ca\2\u0c2f")
        buf.write(u"\u0c47\3\2\2\2\u0c30\u0c31\7\u00e2\2\2\u0c31\u0c47\5")
        buf.write(u"\u0192\u00ca\2\u0c32\u0c33\7\u00e4\2\2\u0c33\u0c47\5")
        buf.write(u"\u0192\u00ca\2\u0c34\u0c35\7\u00ee\2\2\u0c35\u0c47\7")
        buf.write(u"\u00e2\2\2\u0c36\u0c37\7\u00ee\2\2\u0c37\u0c47\7\u00e4")
        buf.write(u"\2\2\u0c38\u0c39\7\u010a\2\2\u0c39\u0c3a\78\2\2\u0c3a")
        buf.write(u"\u0c47\5\u0250\u0129\2\u0c3b\u0c3d\7\u0152\2\2\u0c3c")
        buf.write(u"\u0c3e\7\u0190\2\2\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e\3")
        buf.write(u"\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c47\5\u0192\u00ca")
        buf.write(u"\2\u0c40\u0c47\7\u012f\2\2\u0c41\u0c43\7\u012f\2\2\u0c42")
        buf.write(u"\u0c44\7\u0190\2\2\u0c43\u0c42\3\2\2\2\u0c43\u0c44\3")
        buf.write(u"\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c47\5\u0192\u00ca")
        buf.write(u"\2\u0c46\u0c27\3\2\2\2\u0c46\u0c29\3\2\2\2\u0c46\u0c2a")
        buf.write(u"\3\2\2\2\u0c46\u0c2c\3\2\2\2\u0c46\u0c30\3\2\2\2\u0c46")
        buf.write(u"\u0c32\3\2\2\2\u0c46\u0c34\3\2\2\2\u0c46\u0c36\3\2\2")
        buf.write(u"\2\u0c46\u0c38\3\2\2\2\u0c46\u0c3b\3\2\2\2\u0c46\u0c40")
        buf.write(u"\3\2\2\2\u0c46\u0c41\3\2\2\2\u0c47\u018f\3\2\2\2\u0c48")
        buf.write(u"\u0c4b\78\2\2\u0c49\u0c4b\3\2\2\2\u0c4a\u0c48\3\2\2\2")
        buf.write(u"\u0c4a\u0c49\3\2\2\2\u0c4b\u0191\3\2\2\2\u0c4c\u0c51")
        buf.write(u"\7\u01b0\2\2\u0c4d\u0c4e\7\n\2\2\u0c4e\u0c51\7\u01b0")
        buf.write(u"\2\2\u0c4f\u0c51\5\u04ce\u0268\2\u0c50\u0c4c\3\2\2\2")
        buf.write(u"\u0c50\u0c4d\3\2\2\2\u0c50\u0c4f\3\2\2\2\u0c51\u0193")
        buf.write(u"\3\2\2\2\u0c52\u0c53\b\u00cb\1\2\u0c53\u0c54\5\u0192")
        buf.write(u"\u00ca\2\u0c54\u0c5a\3\2\2\2\u0c55\u0c56\f\3\2\2\u0c56")
        buf.write(u"\u0c57\7\b\2\2\u0c57\u0c59\5\u0192\u00ca\2\u0c58\u0c55")
        buf.write(u"\3\2\2\2\u0c59\u0c5c\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5a")
        buf.write(u"\u0c5b\3\2\2\2\u0c5b\u0195\3\2\2\2\u0c5c\u0c5a\3\2\2")
        buf.write(u"\2\u0c5d\u0c5e\7[\2\2\u0c5e\u0c5f\5\u02ae\u0158\2\u0c5f")
        buf.write(u"\u0c60\5\u0198\u00cd\2\u0c60\u0c61\5\u01a4\u00d3\2\u0c61")
        buf.write(u"\u0c62\7\u00cd\2\2\u0c62\u0c63\5\u00e6t\2\u0c63\u0c70")
        buf.write(u"\3\2\2\2\u0c64\u0c65\7[\2\2\u0c65\u0c66\5\u02ae\u0158")
        buf.write(u"\2\u0c66\u0c67\5\u0198\u00cd\2\u0c67\u0c68\5\u01a4\u00d3")
        buf.write(u"\2\u0c68\u0c69\7\u00cd\2\2\u0c69\u0c6a\5\u00e6t\2\u0c6a")
        buf.write(u"\u0c6b\7\u00a7\2\2\u0c6b\u0c6c\5\u019a\u00ce\2\u0c6c")
        buf.write(u"\u0c6d\5\u019c\u00cf\2\u0c6d\u0c6e\5\u01a0\u00d1\2\u0c6e")
        buf.write(u"\u0c70\3\2\2\2\u0c6f\u0c5d\3\2\2\2\u0c6f\u0c64\3\2\2")
        buf.write(u"\2\u0c70\u0197\3\2\2\2\u0c71\u0c74\7\u0170\2\2\u0c72")
        buf.write(u"\u0c74\3\2\2\2\u0c73\u0c71\3\2\2\2\u0c73\u0c72\3\2\2")
        buf.write(u"\2\u0c74\u0199\3\2\2\2\u0c75\u0c7a\5\u04b8\u025d\2\u0c76")
        buf.write(u"\u0c77\5\u04b8\u025d\2\u0c77\u0c78\5\u0252\u012a\2\u0c78")
        buf.write(u"\u0c7a\3\2\2\2\u0c79\u0c75\3\2\2\2\u0c79\u0c76\3\2\2")
        buf.write(u"\2\u0c7a\u019b\3\2\2\2\u0c7b\u0c7c\7\u00ba\2\2\u0c7c")
        buf.write(u"\u0c7f\5\u019a\u00ce\2\u0c7d\u0c7f\3\2\2\2\u0c7e\u0c7b")
        buf.write(u"\3\2\2\2\u0c7e\u0c7d\3\2\2\2\u0c7f\u019d\3\2\2\2\u0c80")
        buf.write(u"\u0c81\7\u0182\2\2\u0c81\u0c85\5\u019a\u00ce\2\u0c82")
        buf.write(u"\u0c83\7\u00ee\2\2\u0c83\u0c85\7\u0182\2\2\u0c84\u0c80")
        buf.write(u"\3\2\2\2\u0c84\u0c82\3\2\2\2\u0c85\u019f\3\2\2\2\u0c86")
        buf.write(u"\u0c89\5\u019e\u00d0\2\u0c87\u0c89\3\2\2\2\u0c88\u0c86")
        buf.write(u"\3\2\2\2\u0c88\u0c87\3\2\2\2\u0c89\u01a1\3\2\2\2\u0c8a")
        buf.write(u"\u0c8b\7\u0080\2\2\u0c8b\u0c8c\5\u01a4\u00d3\2\u0c8c")
        buf.write(u"\u0c8d\7\u00cd\2\2\u0c8d\u0c8e\5\u00e6t\2\u0c8e\u0c8f")
        buf.write(u"\5\u0102\u0082\2\u0c8f\u0c99\3\2\2\2\u0c90\u0c91\7\u0080")
        buf.write(u"\2\2\u0c91\u0c92\5\u01a4\u00d3\2\u0c92\u0c93\7\u00cd")
        buf.write(u"\2\2\u0c93\u0c94\7\u00ad\2\2\u0c94\u0c95\7\u008e\2\2")
        buf.write(u"\u0c95\u0c96\5\u00e6t\2\u0c96\u0c97\5\u0102\u0082\2\u0c97")
        buf.write(u"\u0c99\3\2\2\2\u0c98\u0c8a\3\2\2\2\u0c98\u0c90\3\2\2")
        buf.write(u"\2\u0c99\u01a3\3\2\2\2\u0c9a\u0c9d\7\u011c\2\2\u0c9b")
        buf.write(u"\u0c9d\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9b\3\2\2")
        buf.write(u"\2\u0c9d\u01a5\3\2\2\2\u0c9e\u0c9f\7[\2\2\u0c9f\u0ca0")
        buf.write(u"\7\u0160\2\2\u0ca0\u0ca1\5\u04b8\u025d\2\u0ca1\u0ca2")
        buf.write(u"\5\u01a8\u00d5\2\u0ca2\u0ca3\7\u00de\2\2\u0ca3\u0ca4")
        buf.write(u"\5\u04ca\u0266\2\u0ca4\u01a7\3\2\2\2\u0ca5\u0ca6\7\u010b")
        buf.write(u"\2\2\u0ca6\u0ca9\5\u04b8\u025d\2\u0ca7\u0ca9\3\2\2\2")
        buf.write(u"\u0ca8\u0ca5\3\2\2\2\u0ca8\u0ca7\3\2\2\2\u0ca9\u01a9")
        buf.write(u"\3\2\2\2\u0caa\u0cab\7\u0080\2\2\u0cab\u0cac\7\u0160")
        buf.write(u"\2\2\u0cac\u0cb3\5\u04b8\u025d\2\u0cad\u0cae\7\u0080")
        buf.write(u"\2\2\u0cae\u0caf\7\u0160\2\2\u0caf\u0cb0\7\u00ad\2\2")
        buf.write(u"\u0cb0\u0cb1\7\u008e\2\2\u0cb1\u0cb3\5\u04b8\u025d\2")
        buf.write(u"\u0cb2\u0caa\3\2\2\2\u0cb2\u0cad\3\2\2\2\u0cb3\u01ab")
        buf.write(u"\3\2\2\2\u0cb4\u0cb5\7[\2\2\u0cb5\u0cb6\7\u0090\2\2\u0cb6")
        buf.write(u"\u0cb8\5\u04b8\u025d\2\u0cb7\u0cb9\7\u0190\2\2\u0cb8")
        buf.write(u"\u0cb7\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cba\3\2\2")
        buf.write(u"\2\u0cba\u0cbb\5\u01ae\u00d8\2\u0cbb\u0cc8\3\2\2\2\u0cbc")
        buf.write(u"\u0cbd\7[\2\2\u0cbd\u0cbe\7\u0090\2\2\u0cbe\u0cbf\7\u00ad")
        buf.write(u"\2\2\u0cbf\u0cc0\7\u00f0\2\2\u0cc0\u0cc1\7\u008e\2\2")
        buf.write(u"\u0cc1\u0cc3\5\u04b8\u025d\2\u0cc2\u0cc4\7\u0190\2\2")
        buf.write(u"\u0cc3\u0cc2\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc5")
        buf.write(u"\3\2\2\2\u0cc5\u0cc6\5\u01ae\u00d8\2\u0cc6\u0cc8\3\2")
        buf.write(u"\2\2\u0cc7\u0cb4\3\2\2\2\u0cc7\u0cbc\3\2\2\2\u0cc8\u01ad")
        buf.write(u"\3\2\2\2\u0cc9\u0cce\b\u00d8\1\2\u0cca\u0ccb\f\4\2\2")
        buf.write(u"\u0ccb\u0ccd\5\u01b0\u00d9\2\u0ccc\u0cca\3\2\2\2\u0ccd")
        buf.write(u"\u0cd0\3\2\2\2\u0cce\u0ccc\3\2\2\2\u0cce\u0ccf\3\2\2")
        buf.write(u"\2\u0ccf\u01af\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd1\u0cd2")
        buf.write(u"\7\u013b\2\2\u0cd2\u0cd8\5\u04b8\u025d\2\u0cd3\u0cd4")
        buf.write(u"\7\u0189\2\2\u0cd4\u0cd8\5\u00e6t\2\u0cd5\u0cd6\7\u009e")
        buf.write(u"\2\2\u0cd6\u0cd8\5\u00e6t\2\u0cd7\u0cd1\3\2\2\2\u0cd7")
        buf.write(u"\u0cd3\3\2\2\2\u0cd7\u0cd5\3\2\2\2\u0cd8\u01b1\3\2\2")
        buf.write(u"\2\u0cd9\u0cda\7 \2\2\u0cda\u0cdb\7\u0090\2\2\u0cdb\u0cdc")
        buf.write(u"\5\u04b8\u025d\2\u0cdc\u0cdd\7\u017c\2\2\u0cdd\u0cde")
        buf.write(u"\5\u01b4\u00db\2\u0cde\u01b3\3\2\2\2\u0cdf\u0ce4\b\u00db")
        buf.write(u"\1\2\u0ce0\u0ce1\f\4\2\2\u0ce1\u0ce3\5\u01b6\u00dc\2")
        buf.write(u"\u0ce2\u0ce0\3\2\2\2\u0ce3\u0ce6\3\2\2\2\u0ce4\u0ce2")
        buf.write(u"\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u01b5\3\2\2\2\u0ce6")
        buf.write(u"\u0ce4\3\2\2\2\u0ce7\u0ce8\7\u0168\2\2\u0ce8\u0ce9\5")
        buf.write(u"\u00e6t\2\u0ce9\u01b7\3\2\2\2\u0cea\u0ceb\7 \2\2\u0ceb")
        buf.write(u"\u0cec\7\u0090\2\2\u0cec\u0ced\5\u04b8\u025d\2\u0ced")
        buf.write(u"\u0cee\5\u00c6d\2\u0cee\u0cef\7\35\2\2\u0cef\u0cf0\5")
        buf.write(u"\u04c4\u0263\2\u0cf0\u0cf1\5\u021e\u0110\2\u0cf1\u0d9d")
        buf.write(u"\3\2\2\2\u0cf2\u0cf3\7 \2\2\u0cf3\u0cf4\7\u0090\2\2\u0cf4")
        buf.write(u"\u0cf5\5\u04b8\u025d\2\u0cf5\u0cf6\5\u00c6d\2\u0cf6\u0cf7")
        buf.write(u"\7>\2\2\u0cf7\u0cf8\7\r\2\2\u0cf8\u0cf9\5\u040a\u0206")
        buf.write(u"\2\u0cf9\u0cfa\7\'\2\2\u0cfa\u0cfb\5\u040a\u0206\2\u0cfb")
        buf.write(u"\u0cfc\7\7\2\2\u0cfc\u0d9d\3\2\2\2\u0cfd\u0cfe\7 \2\2")
        buf.write(u"\u0cfe\u0cff\7\u0090\2\2\u0cff\u0d00\5\u04b8\u025d\2")
        buf.write(u"\u0d00\u0d01\5\u00c6d\2\u0d01\u0d02\7K\2\2\u0d02\u0d03")
        buf.write(u"\5\u0250\u0129\2\u0d03\u0d9d\3\2\2\2\u0d04\u0d05\7 \2")
        buf.write(u"\2\u0d05\u0d06\7\u0090\2\2\u0d06\u0d07\5\u04b8\u025d")
        buf.write(u"\2\u0d07\u0d08\5\u00c6d\2\u0d08\u0d09\7X\2\2\u0d09\u0d0a")
        buf.write(u"\5\u0250\u0129\2\u0d0a\u0d9d\3\2\2\2\u0d0b\u0d0c\7 \2")
        buf.write(u"\2\u0d0c\u0d0d\7\u0090\2\2\u0d0d\u0d0e\5\u04b8\u025d")
        buf.write(u"\2\u0d0e\u0d0f\5\u00c6d\2\u0d0f\u0d10\7~\2\2\u0d10\u0d11")
        buf.write(u"\5\u0250\u0129\2\u0d11\u0d9d\3\2\2\2\u0d12\u0d13\7 \2")
        buf.write(u"\2\u0d13\u0d14\7\u0090\2\2\u0d14\u0d15\5\u04b8\u025d")
        buf.write(u"\2\u0d15\u0d16\5\u00c6d\2\u0d16\u0d17\7\u00a0\2\2\u0d17")
        buf.write(u"\u0d18\5\u0282\u0142\2\u0d18\u0d9d\3\2\2\2\u0d19\u0d1a")
        buf.write(u"\7 \2\2\u0d1a\u0d1b\7\u0090\2\2\u0d1b\u0d1c\5\u04b8\u025d")
        buf.write(u"\2\u0d1c\u0d1d\5\u00c6d\2\u0d1d\u0d1e\5\u01a4\u00d3\2")
        buf.write(u"\u0d1e\u0d1f\7\u00cd\2\2\u0d1f\u0d20\5\u04b8\u025d\2")
        buf.write(u"\u0d20\u0d9d\3\2\2\2\u0d21\u0d22\7 \2\2\u0d22\u0d23\7")
        buf.write(u"\u0090\2\2\u0d23\u0d24\5\u04b8\u025d\2\u0d24\u0d25\5")
        buf.write(u"\u00c6d\2\u0d25\u0d26\7\u0100\2\2\u0d26\u0d27\5\u02e0")
        buf.write(u"\u0171\2\u0d27\u0d28\5\u02de\u0170\2\u0d28\u0d9d\3\2")
        buf.write(u"\2\2\u0d29\u0d2a\7 \2\2\u0d2a\u0d2b\7\u0090\2\2\u0d2b")
        buf.write(u"\u0d2c\5\u04b8\u025d\2\u0d2c\u0d2d\5\u00c6d\2\u0d2d\u0d2e")
        buf.write(u"\7\u0100\2\2\u0d2e\u0d2f\7F\2\2\u0d2f\u0d30\5\u0250\u0129")
        buf.write(u"\2\u0d30\u0d31\7\u017e\2\2\u0d31\u0d32\5\u04bc\u025f")
        buf.write(u"\2\u0d32\u0d9d\3\2\2\2\u0d33\u0d34\7 \2\2\u0d34\u0d35")
        buf.write(u"\7\u0090\2\2\u0d35\u0d36\5\u04b8\u025d\2\u0d36\u0d37")
        buf.write(u"\5\u00c6d\2\u0d37\u0d38\7\u0100\2\2\u0d38\u0d39\7\u0094")
        buf.write(u"\2\2\u0d39\u0d3a\5\u0250\u0129\2\u0d3a\u0d3b\7\u017e")
        buf.write(u"\2\2\u0d3b\u0d3c\5\u04bc\u025f\2\u0d3c\u0d9d\3\2\2\2")
        buf.write(u"\u0d3d\u0d3e\7 \2\2\u0d3e\u0d3f\7\u0090\2\2\u0d3f\u0d40")
        buf.write(u"\5\u04b8\u025d\2\u0d40\u0d41\5\u00c6d\2\u0d41\u0d42\7")
        buf.write(u"\u013b\2\2\u0d42\u0d43\5\u04b8\u025d\2\u0d43\u0d9d\3")
        buf.write(u"\2\2\2\u0d44\u0d45\7 \2\2\u0d45\u0d46\7\u0090\2\2\u0d46")
        buf.write(u"\u0d47\5\u04b8\u025d\2\u0d47\u0d48\5\u00c6d\2\u0d48\u0d49")
        buf.write(u"\7\u015e\2\2\u0d49\u0d4a\5\u0250\u0129\2\u0d4a\u0d9d")
        buf.write(u"\3\2\2\2\u0d4b\u0d4c\7 \2\2\u0d4c\u0d4d\7\u0090\2\2\u0d4d")
        buf.write(u"\u0d4e\5\u04b8\u025d\2\u0d4e\u0d4f\5\u00c6d\2\u0d4f\u0d50")
        buf.write(u"\7\u0164\2\2\u0d50\u0d51\7\u013d\2\2\u0d51\u0d52\7\u010c")
        buf.write(u"\2\2\u0d52\u0d53\5\u0250\u0129\2\u0d53\u0d9d\3\2\2\2")
        buf.write(u"\u0d54\u0d55\7 \2\2\u0d55\u0d56\7\u0090\2\2\u0d56\u0d57")
        buf.write(u"\5\u04b8\u025d\2\u0d57\u0d58\5\u00c6d\2\u0d58\u0d59\7")
        buf.write(u"\u0164\2\2\u0d59\u0d5a\7\u013d\2\2\u0d5a\u0d5b\7x\2\2")
        buf.write(u"\u0d5b\u0d5c\5\u0250\u0129\2\u0d5c\u0d9d\3\2\2\2\u0d5d")
        buf.write(u"\u0d5e\7 \2\2\u0d5e\u0d5f\7\u0090\2\2\u0d5f\u0d60\5\u04b8")
        buf.write(u"\u025d\2\u0d60\u0d61\5\u00c6d\2\u0d61\u0d62\7\u0164\2")
        buf.write(u"\2\u0d62\u0d63\7\u013d\2\2\u0d63\u0d64\7\u0162\2\2\u0d64")
        buf.write(u"\u0d65\5\u0250\u0129\2\u0d65\u0d9d\3\2\2\2\u0d66\u0d67")
        buf.write(u"\7 \2\2\u0d67\u0d68\7\u0090\2\2\u0d68\u0d69\5\u04b8\u025d")
        buf.write(u"\2\u0d69\u0d6a\5\u00c6d\2\u0d6a\u0d6b\7\u0164\2\2\u0d6b")
        buf.write(u"\u0d6c\7\u013d\2\2\u0d6c\u0d6d\7R\2\2\u0d6d\u0d6e\5\u0250")
        buf.write(u"\u0129\2\u0d6e\u0d9d\3\2\2\2\u0d6f\u0d70\7 \2\2\u0d70")
        buf.write(u"\u0d71\7\u0090\2\2\u0d71\u0d72\5\u04b8\u025d\2\u0d72")
        buf.write(u"\u0d73\5\u00c6d\2\u0d73\u0d74\7\u0141\2\2\u0d74\u0d75")
        buf.write(u"\5\u0250\u0129\2\u0d75\u0d9d\3\2\2\2\u0d76\u0d77\7 \2")
        buf.write(u"\2\u0d77\u0d78\7\u0090\2\2\u0d78\u0d79\5\u04b8\u025d")
        buf.write(u"\2\u0d79\u0d7a\5\u00c6d\2\u0d7a\u0d7b\7\u018a\2\2\u0d7b")
        buf.write(u"\u0d7c\5\u0250\u0129\2\u0d7c\u0d9d\3\2\2\2\u0d7d\u0d7e")
        buf.write(u"\7 \2\2\u0d7e\u0d7f\7\u0090\2\2\u0d7f\u0d80\5\u04b8\u025d")
        buf.write(u"\2\u0d80\u0d81\5\u00c6d\2\u0d81\u0d82\7\u009b\2\2\u0d82")
        buf.write(u"\u0d83\7\u015e\2\2\u0d83\u0d84\5\u0250\u0129\2\u0d84")
        buf.write(u"\u0d9d\3\2\2\2\u0d85\u0d86\7 \2\2\u0d86\u0d87\7\u0090")
        buf.write(u"\2\2\u0d87\u0d88\5\u04b8\u025d\2\u0d88\u0d89\5\u00c6")
        buf.write(u"d\2\u0d89\u0d8a\7\u009b\2\2\u0d8a\u0d8b\7h\2\2\u0d8b")
        buf.write(u"\u0d8c\7\u0193\2\2\u0d8c\u0d8d\5\u04b8\u025d\2\u0d8d")
        buf.write(u"\u0d9d\3\2\2\2\u0d8e\u0d8f\7 \2\2\u0d8f\u0d90\7\u0090")
        buf.write(u"\2\2\u0d90\u0d91\5\u04b8\u025d\2\u0d91\u0d92\5\u00c6")
        buf.write(u"d\2\u0d92\u0d93\7\u0144\2\2\u0d93\u0d94\5\u04b8\u025d")
        buf.write(u"\2\u0d94\u0d9d\3\2\2\2\u0d95\u0d96\7 \2\2\u0d96\u0d97")
        buf.write(u"\7\u0090\2\2\u0d97\u0d98\5\u04b8\u025d\2\u0d98\u0d99")
        buf.write(u"\5\u00c6d\2\u0d99\u0d9a\7\u0171\2\2\u0d9a\u0d9b\5\u0250")
        buf.write(u"\u0129\2\u0d9b\u0d9d\3\2\2\2\u0d9c\u0cea\3\2\2\2\u0d9c")
        buf.write(u"\u0cf2\3\2\2\2\u0d9c\u0cfd\3\2\2\2\u0d9c\u0d04\3\2\2")
        buf.write(u"\2\u0d9c\u0d0b\3\2\2\2\u0d9c\u0d12\3\2\2\2\u0d9c\u0d19")
        buf.write(u"\3\2\2\2\u0d9c\u0d21\3\2\2\2\u0d9c\u0d29\3\2\2\2\u0d9c")
        buf.write(u"\u0d33\3\2\2\2\u0d9c\u0d3d\3\2\2\2\u0d9c\u0d44\3\2\2")
        buf.write(u"\2\u0d9c\u0d4b\3\2\2\2\u0d9c\u0d54\3\2\2\2\u0d9c\u0d5d")
        buf.write(u"\3\2\2\2\u0d9c\u0d66\3\2\2\2\u0d9c\u0d6f\3\2\2\2\u0d9c")
        buf.write(u"\u0d76\3\2\2\2\u0d9c\u0d7d\3\2\2\2\u0d9c\u0d85\3\2\2")
        buf.write(u"\2\u0d9c\u0d8e\3\2\2\2\u0d9c\u0d95\3\2\2\2\u0d9d\u01b9")
        buf.write(u"\3\2\2\2\u0d9e\u0d9f\7[\2\2\u0d9f\u0da0\7\u009b\2\2\u0da0")
        buf.write(u"\u0da1\7h\2\2\u0da1\u0da2\7\u0193\2\2\u0da2\u0da3\5\u04b8")
        buf.write(u"\u025d\2\u0da3\u0da4\5\u01c0\u00e1\2\u0da4\u0da5\5\u01c6")
        buf.write(u"\u00e4\2\u0da5\u01bb\3\2\2\2\u0da6\u0da7\7\u00a7\2\2")
        buf.write(u"\u0da7\u0daf\5\u019a\u00ce\2\u0da8\u0da9\7\u00ee\2\2")
        buf.write(u"\u0da9\u0daf\7\u00a7\2\2\u0daa\u0dab\7\u0182\2\2\u0dab")
        buf.write(u"\u0daf\5\u019a\u00ce\2\u0dac\u0dad\7\u00ee\2\2\u0dad")
        buf.write(u"\u0daf\7\u0182\2\2\u0dae\u0da6\3\2\2\2\u0dae\u0da8\3")
        buf.write(u"\2\2\2\u0dae\u0daa\3\2\2\2\u0dae\u0dac\3\2\2\2\u0daf")
        buf.write(u"\u01bd\3\2\2\2\u0db0\u0db1\b\u00e0\1\2\u0db1\u0db2\5")
        buf.write(u"\u01bc\u00df\2\u0db2\u0db7\3\2\2\2\u0db3\u0db4\f\3\2")
        buf.write(u"\2\u0db4\u0db6\5\u01bc\u00df\2\u0db5\u0db3\3\2\2\2\u0db6")
        buf.write(u"\u0db9\3\2\2\2\u0db7\u0db5\3\2\2\2\u0db7\u0db8\3\2\2")
        buf.write(u"\2\u0db8\u01bf\3\2\2\2\u0db9\u0db7\3\2\2\2\u0dba\u0dbd")
        buf.write(u"\5\u01be\u00e0\2\u0dbb\u0dbd\3\2\2\2\u0dbc\u0dba\3\2")
        buf.write(u"\2\2\u0dbc\u0dbb\3\2\2\2\u0dbd\u01c1\3\2\2\2\u0dbe\u0dbf")
        buf.write(u"\7\u0080\2\2\u0dbf\u0dc0\7\u009b\2\2\u0dc0\u0dc1\7h\2")
        buf.write(u"\2\u0dc1\u0dc2\7\u0193\2\2\u0dc2\u0dc3\5\u04b8\u025d")
        buf.write(u"\2\u0dc3\u0dc4\5\u0102\u0082\2\u0dc4\u0dcf\3\2\2\2\u0dc5")
        buf.write(u"\u0dc6\7\u0080\2\2\u0dc6\u0dc7\7\u009b\2\2\u0dc7\u0dc8")
        buf.write(u"\7h\2\2\u0dc8\u0dc9\7\u0193\2\2\u0dc9\u0dca\7\u00ad\2")
        buf.write(u"\2\u0dca\u0dcb\7\u008e\2\2\u0dcb\u0dcc\5\u04b8\u025d")
        buf.write(u"\2\u0dcc\u0dcd\5\u0102\u0082\2\u0dcd\u0dcf\3\2\2\2\u0dce")
        buf.write(u"\u0dbe\3\2\2\2\u0dce\u0dc5\3\2\2\2\u0dcf\u01c3\3\2\2")
        buf.write(u"\2\u0dd0\u0dd1\7 \2\2\u0dd1\u0dd2\7\u009b\2\2\u0dd2\u0dd3")
        buf.write(u"\7h\2\2\u0dd3\u0dd4\7\u0193\2\2\u0dd4\u0dd5\5\u04b8\u025d")
        buf.write(u"\2\u0dd5\u0dd6\5\u01c0\u00e1\2\u0dd6\u0dd7\5\u01ca\u00e6")
        buf.write(u"\2\u0dd7\u0de0\3\2\2\2\u0dd8\u0dd9\7 \2\2\u0dd9\u0dda")
        buf.write(u"\7\u009b\2\2\u0dda\u0ddb\7h\2\2\u0ddb\u0ddc\7\u0193\2")
        buf.write(u"\2\u0ddc\u0ddd\5\u04b8\u025d\2\u0ddd\u0dde\5\u01be\u00e0")
        buf.write(u"\2\u0dde\u0de0\3\2\2\2\u0ddf\u0dd0\3\2\2\2\u0ddf\u0dd8")
        buf.write(u"\3\2\2\2\u0de0\u01c5\3\2\2\2\u0de1\u0de2\7\u0102\2\2")
        buf.write(u"\u0de2\u0de3\7\r\2\2\u0de3\u0de4\5\u01c8\u00e5\2\u0de4")
        buf.write(u"\u0de5\7\7\2\2\u0de5\u0de8\3\2\2\2\u0de6\u0de8\3\2\2")
        buf.write(u"\2\u0de7\u0de1\3\2\2\2\u0de7\u0de6\3\2\2\2\u0de8\u01c7")
        buf.write(u"\3\2\2\2\u0de9\u0dea\b\u00e5\1\2\u0dea\u0deb\5\u01d0")
        buf.write(u"\u00e9\2\u0deb\u0df1\3\2\2\2\u0dec\u0ded\f\3\2\2\u0ded")
        buf.write(u"\u0dee\7\b\2\2\u0dee\u0df0\5\u01d0\u00e9\2\u0def\u0dec")
        buf.write(u"\3\2\2\2\u0df0\u0df3\3\2\2\2\u0df1\u0def\3\2\2\2\u0df1")
        buf.write(u"\u0df2\3\2\2\2\u0df2\u01c9\3\2\2\2\u0df3\u0df1\3\2\2")
        buf.write(u"\2\u0df4\u0df5\7\u0102\2\2\u0df5\u0df6\7\r\2\2\u0df6")
        buf.write(u"\u0df7\5\u01cc\u00e7\2\u0df7\u0df8\7\7\2\2\u0df8\u01cb")
        buf.write(u"\3\2\2\2\u0df9\u0dfa\b\u00e7\1\2\u0dfa\u0dfb\5\u01ce")
        buf.write(u"\u00e8\2\u0dfb\u0e01\3\2\2\2\u0dfc\u0dfd\f\3\2\2\u0dfd")
        buf.write(u"\u0dfe\7\b\2\2\u0dfe\u0e00\5\u01ce\u00e8\2\u0dff\u0dfc")
        buf.write(u"\3\2\2\2\u0e00\u0e03\3\2\2\2\u0e01\u0dff\3\2\2\2\u0e01")
        buf.write(u"\u0e02\3\2\2\2\u0e02\u01cd\3\2\2\2\u0e03\u0e01\3\2\2")
        buf.write(u"\2\u0e04\u0e0c\5\u01d0\u00e9\2\u0e05\u0e06\7\u0147\2")
        buf.write(u"\2\u0e06\u0e0c\5\u01d0\u00e9\2\u0e07\u0e08\7\32\2\2\u0e08")
        buf.write(u"\u0e0c\5\u01d0\u00e9\2\u0e09\u0e0a\7\u0080\2\2\u0e0a")
        buf.write(u"\u0e0c\5\u01d2\u00ea\2\u0e0b\u0e04\3\2\2\2\u0e0b\u0e05")
        buf.write(u"\3\2\2\2\u0e0b\u0e07\3\2\2\2\u0e0b\u0e09\3\2\2\2\u0e0c")
        buf.write(u"\u01cf\3\2\2\2\u0e0d\u0e0e\5\u01d2\u00ea\2\u0e0e\u0e0f")
        buf.write(u"\5\u01d4\u00eb\2\u0e0f\u01d1\3\2\2\2\u0e10\u0e11\5\u04d4")
        buf.write(u"\u026b\2\u0e11\u01d3\3\2\2\2\u0e12\u0e13\5\u04ca\u0266")
        buf.write(u"\2\u0e13\u01d5\3\2\2\2\u0e14\u0e15\7[\2\2\u0e15\u0e16")
        buf.write(u"\7\u0144\2\2\u0e16\u0e17\5\u04b8\u025d\2\u0e17\u0e18")
        buf.write(u"\5\u01d8\u00ed\2\u0e18\u0e19\5\u01dc\u00ef\2\u0e19\u0e1a")
        buf.write(u"\7\u009b\2\2\u0e1a\u0e1b\7h\2\2\u0e1b\u0e1c\7\u0193\2")
        buf.write(u"\2\u0e1c\u0e1d\5\u04b8\u025d\2\u0e1d\u0e1e\5\u01c6\u00e4")
        buf.write(u"\2\u0e1e\u01d7\3\2\2\2\u0e1f\u0e20\7\u0171\2\2\u0e20")
        buf.write(u"\u0e23\5\u04ca\u0266\2\u0e21\u0e23\3\2\2\2\u0e22\u0e1f")
        buf.write(u"\3\2\2\2\u0e22\u0e21\3\2\2\2\u0e23\u01d9\3\2\2\2\u0e24")
        buf.write(u"\u0e25\7\u0189\2\2\u0e25\u0e29\5\u04ca\u0266\2\u0e26")
        buf.write(u"\u0e27\7\u0189\2\2\u0e27\u0e29\7\u00f5\2\2\u0e28\u0e24")
        buf.write(u"\3\2\2\2\u0e28\u0e26\3\2\2\2\u0e29\u01db\3\2\2\2\u0e2a")
        buf.write(u"\u0e2d\5\u01da\u00ee\2\u0e2b\u0e2d\3\2\2\2\u0e2c\u0e2a")
        buf.write(u"\3\2\2\2\u0e2c\u0e2b\3\2\2\2\u0e2d\u01dd\3\2\2\2\u0e2e")
        buf.write(u"\u0e2f\7\u0080\2\2\u0e2f\u0e30\7\u0144\2\2\u0e30\u0e31")
        buf.write(u"\5\u04b8\u025d\2\u0e31\u0e32\5\u0102\u0082\2\u0e32\u0e3b")
        buf.write(u"\3\2\2\2\u0e33\u0e34\7\u0080\2\2\u0e34\u0e35\7\u0144")
        buf.write(u"\2\2\u0e35\u0e36\7\u00ad\2\2\u0e36\u0e37\7\u008e\2\2")
        buf.write(u"\u0e37\u0e38\5\u04b8\u025d\2\u0e38\u0e39\5\u0102\u0082")
        buf.write(u"\2\u0e39\u0e3b\3\2\2\2\u0e3a\u0e2e\3\2\2\2\u0e3a\u0e33")
        buf.write(u"\3\2\2\2\u0e3b\u01df\3\2\2\2\u0e3c\u0e3d\7 \2\2\u0e3d")
        buf.write(u"\u0e3e\7\u0144\2\2\u0e3e\u0e3f\5\u04b8\u025d\2\u0e3f")
        buf.write(u"\u0e40\5\u01da\u00ee\2\u0e40\u0e41\5\u01ca\u00e6\2\u0e41")
        buf.write(u"\u0e4d\3\2\2\2\u0e42\u0e43\7 \2\2\u0e43\u0e44\7\u0144")
        buf.write(u"\2\2\u0e44\u0e45\5\u04b8\u025d\2\u0e45\u0e46\5\u01da")
        buf.write(u"\u00ee\2\u0e46\u0e4d\3\2\2\2\u0e47\u0e48\7 \2\2\u0e48")
        buf.write(u"\u0e49\7\u0144\2\2\u0e49\u0e4a\5\u04b8\u025d\2\u0e4a")
        buf.write(u"\u0e4b\5\u01ca\u00e6\2\u0e4b\u0e4d\3\2\2\2\u0e4c\u0e3c")
        buf.write(u"\3\2\2\2\u0e4c\u0e42\3\2\2\2\u0e4c\u0e47\3\2\2\2\u0e4d")
        buf.write(u"\u01e1\3\2\2\2\u0e4e\u0e4f\7[\2\2\u0e4f\u0e50\7\u009b")
        buf.write(u"\2\2\u0e50\u0e51\7\u015e\2\2\u0e51\u0e52\5\u04b4\u025b")
        buf.write(u"\2\u0e52\u0e53\5\u01e4\u00f3\2\u0e53\u0e54\7\u0144\2")
        buf.write(u"\2\u0e54\u0e55\5\u04b8\u025d\2\u0e55\u0e56\5\u01c6\u00e4")
        buf.write(u"\2\u0e56\u0e64\3\2\2\2\u0e57\u0e58\7[\2\2\u0e58\u0e59")
        buf.write(u"\7\u009b\2\2\u0e59\u0e5a\7\u015e\2\2\u0e5a\u0e5b\7\u00ad")
        buf.write(u"\2\2\u0e5b\u0e5c\7\u00f0\2\2\u0e5c\u0e5d\7\u008e\2\2")
        buf.write(u"\u0e5d\u0e5e\5\u04b4\u025b\2\u0e5e\u0e5f\5\u01e4\u00f3")
        buf.write(u"\2\u0e5f\u0e60\7\u0144\2\2\u0e60\u0e61\5\u04b8\u025d")
        buf.write(u"\2\u0e61\u0e62\5\u01c6\u00e4\2\u0e62\u0e64\3\2\2\2\u0e63")
        buf.write(u"\u0e4e\3\2\2\2\u0e63\u0e57\3\2\2\2\u0e64\u01e3\3\2\2")
        buf.write(u"\2\u0e65\u0e66\7\r\2\2\u0e66\u0e67\5\u01e6\u00f4\2\u0e67")
        buf.write(u"\u0e68\7\7\2\2\u0e68\u0e6c\3\2\2\2\u0e69\u0e6a\7\r\2")
        buf.write(u"\2\u0e6a\u0e6c\7\7\2\2\u0e6b\u0e65\3\2\2\2\u0e6b\u0e69")
        buf.write(u"\3\2\2\2\u0e6c\u01e5\3\2\2\2\u0e6d\u0e6e\b\u00f4\1\2")
        buf.write(u"\u0e6e\u0e6f\5\u01e8\u00f5\2\u0e6f\u0e75\3\2\2\2\u0e70")
        buf.write(u"\u0e71\f\3\2\2\u0e71\u0e72\7\b\2\2\u0e72\u0e74\5\u01e8")
        buf.write(u"\u00f5\2\u0e73\u0e70\3\2\2\2\u0e74\u0e77\3\2\2\2\u0e75")
        buf.write(u"\u0e73\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u01e7\3\2\2")
        buf.write(u"\2\u0e77\u0e75\3\2\2\2\u0e78\u0e79\5\u0146\u00a4\2\u0e79")
        buf.write(u"\u01e9\3\2\2\2\u0e7a\u0e7b\7 \2\2\u0e7b\u0e7c\7\u009b")
        buf.write(u"\2\2\u0e7c\u0e7d\7\u015e\2\2\u0e7d\u0e7e\5\u03f8\u01fd")
        buf.write(u"\2\u0e7e\u0e7f\5\u00fc\177\2\u0e7f\u0e89\3\2\2\2\u0e80")
        buf.write(u"\u0e81\7 \2\2\u0e81\u0e82\7\u009b\2\2\u0e82\u0e83\7\u015e")
        buf.write(u"\2\2\u0e83\u0e84\7\u00ad\2\2\u0e84\u0e85\7\u008e\2\2")
        buf.write(u"\u0e85\u0e86\5\u03f8\u01fd\2\u0e86\u0e87\5\u00fc\177")
        buf.write(u"\2\u0e87\u0e89\3\2\2\2\u0e88\u0e7a\3\2\2\2\u0e88\u0e80")
        buf.write(u"\3\2\2\2\u0e89\u01eb\3\2\2\2\u0e8a\u0e8b\7[\2\2\u0e8b")
        buf.write(u"\u0e8c\7\u017d\2\2\u0e8c\u0e8d\7\u00e0\2\2\u0e8d\u0e8e")
        buf.write(u"\7\u0099\2\2\u0e8e\u0e8f\5\u01ee\u00f8\2\u0e8f\u0e90")
        buf.write(u"\7\u0144\2\2\u0e90\u0e91\5\u04b8\u025d\2\u0e91\u0e92")
        buf.write(u"\5\u01c6\u00e4\2\u0e92\u01ed\3\2\2\2\u0e93\u0e97\7e\2")
        buf.write(u"\2\u0e94\u0e97\7\u017d\2\2\u0e95\u0e97\5\u04cc\u0267")
        buf.write(u"\2\u0e96\u0e93\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e96\u0e95")
        buf.write(u"\3\2\2\2\u0e97\u01ef\3\2\2\2\u0e98\u0e99\7\u0080\2\2")
        buf.write(u"\u0e99\u0e9a\7\u017d\2\2\u0e9a\u0e9b\7\u00e0\2\2\u0e9b")
        buf.write(u"\u0e9c\7\u0099\2\2\u0e9c\u0e9d\5\u01ee\u00f8\2\u0e9d")
        buf.write(u"\u0e9e\7\u0144\2\2\u0e9e\u0e9f\5\u04b8\u025d\2\u0e9f")
        buf.write(u"\u0eab\3\2\2\2\u0ea0\u0ea1\7\u0080\2\2\u0ea1\u0ea2\7")
        buf.write(u"\u017d\2\2\u0ea2\u0ea3\7\u00e0\2\2\u0ea3\u0ea4\7\u00ad")
        buf.write(u"\2\2\u0ea4\u0ea5\7\u008e\2\2\u0ea5\u0ea6\7\u0099\2\2")
        buf.write(u"\u0ea6\u0ea7\5\u01ee\u00f8\2\u0ea7\u0ea8\7\u0144\2\2")
        buf.write(u"\u0ea8\u0ea9\5\u04b8\u025d\2\u0ea9\u0eab\3\2\2\2\u0eaa")
        buf.write(u"\u0e98\3\2\2\2\u0eaa\u0ea0\3\2\2\2\u0eab\u01f1\3\2\2")
        buf.write(u"\2\u0eac\u0ead\7 \2\2\u0ead\u0eae\7\u017d\2\2\u0eae\u0eaf")
        buf.write(u"\7\u00e0\2\2\u0eaf\u0eb0\7\u0099\2\2\u0eb0\u0eb1\5\u01ee")
        buf.write(u"\u00f8\2\u0eb1\u0eb2\7\u0144\2\2\u0eb2\u0eb3\5\u04b8")
        buf.write(u"\u025d\2\u0eb3\u0eb4\5\u01ca\u00e6\2\u0eb4\u01f3\3\2")
        buf.write(u"\2\2\u0eb5\u0eb6\7[\2\2\u0eb6\u0eb7\7\u016c\2\2\u0eb7")
        buf.write(u"\u0eb8\5\u04b8\u025d\2\u0eb8\u0eb9\5\u01f6\u00fc\2\u0eb9")
        buf.write(u"\u0eba\5\u01f8\u00fd\2\u0eba\u0ebb\7\u00fe\2\2\u0ebb")
        buf.write(u"\u0ebc\5\u04b4\u025b\2\u0ebc\u0ebd\5\u01fc\u00ff\2\u0ebd")
        buf.write(u"\u0ebe\5\u0202\u0102\2\u0ebe\u0ebf\7\u008d\2\2\u0ebf")
        buf.write(u"\u0ec0\7\u011d\2\2\u0ec0\u0ec1\5\u04c4\u0263\2\u0ec1")
        buf.write(u"\u0ec2\7\r\2\2\u0ec2\u0ec3\5\u0204\u0103\2\u0ec3\u0ec4")
        buf.write(u"\7\7\2\2\u0ec4\u0edb\3\2\2\2\u0ec5\u0ec6\7[\2\2\u0ec6")
        buf.write(u"\u0ec7\7T\2\2\u0ec7\u0ec8\7\u016c\2\2\u0ec8\u0ec9\5\u04b8")
        buf.write(u"\u025d\2\u0ec9\u0eca\7\34\2\2\u0eca\u0ecb\5\u01f8\u00fd")
        buf.write(u"\2\u0ecb\u0ecc\7\u00fe\2\2\u0ecc\u0ecd\5\u04b4\u025b")
        buf.write(u"\2\u0ecd\u0ece\5\u0208\u0105\2\u0ece\u0ecf\5\u020a\u0106")
        buf.write(u"\2\u0ecf\u0ed0\7\u0099\2\2\u0ed0\u0ed1\7\u0081\2\2\u0ed1")
        buf.write(u"\u0ed2\7\u0137\2\2\u0ed2\u0ed3\5\u0202\u0102\2\u0ed3")
        buf.write(u"\u0ed4\7\u008d\2\2\u0ed4\u0ed5\7\u011d\2\2\u0ed5\u0ed6")
        buf.write(u"\5\u04c4\u0263\2\u0ed6\u0ed7\7\r\2\2\u0ed7\u0ed8\5\u0204")
        buf.write(u"\u0103\2\u0ed8\u0ed9\7\7\2\2\u0ed9\u0edb\3\2\2\2\u0eda")
        buf.write(u"\u0eb5\3\2\2\2\u0eda\u0ec5\3\2\2\2\u0edb\u01f5\3\2\2")
        buf.write(u"\2\u0edc\u0ee1\7\60\2\2\u0edd\u0ee1\7\34\2\2\u0ede\u0edf")
        buf.write(u"\7\u00c0\2\2\u0edf\u0ee1\7\u00fa\2\2\u0ee0\u0edc\3\2")
        buf.write(u"\2\2\u0ee0\u0edd\3\2\2\2\u0ee0\u0ede\3\2\2\2\u0ee1\u01f7")
        buf.write(u"\3\2\2\2\u0ee2\u0ee3\b\u00fd\1\2\u0ee3\u0ee4\5\u01fa")
        buf.write(u"\u00fe\2\u0ee4\u0eea\3\2\2\2\u0ee5\u0ee6\f\3\2\2\u0ee6")
        buf.write(u"\u0ee7\7\u0103\2\2\u0ee7\u0ee9\5\u01fa\u00fe\2\u0ee8")
        buf.write(u"\u0ee5\3\2\2\2\u0ee9\u0eec\3\2\2\2\u0eea\u0ee8\3\2\2")
        buf.write(u"\2\u0eea\u0eeb\3\2\2\2\u0eeb\u01f9\3\2\2\2\u0eec\u0eea")
        buf.write(u"\3\2\2\2\u0eed\u0ef5\7\u00bf\2\2\u0eee\u0ef5\7t\2\2\u0eef")
        buf.write(u"\u0ef5\7\u017c\2\2\u0ef0\u0ef1\7\u017c\2\2\u0ef1\u0ef2")
        buf.write(u"\7\u00fa\2\2\u0ef2\u0ef5\5\u0160\u00b1\2\u0ef3\u0ef5")
        buf.write(u"\7\u016f\2\2\u0ef4\u0eed\3\2\2\2\u0ef4\u0eee\3\2\2\2")
        buf.write(u"\u0ef4\u0eef\3\2\2\2\u0ef4\u0ef0\3\2\2\2\u0ef4\u0ef3")
        buf.write(u"\3\2\2\2\u0ef5\u01fb\3\2\2\2\u0ef6\u0ef7\7\u0099\2\2")
        buf.write(u"\u0ef7\u0ef8\5\u01fe\u0100\2\u0ef8\u0ef9\5\u0200\u0101")
        buf.write(u"\2\u0ef9\u0efc\3\2\2\2\u0efa\u0efc\3\2\2\2\u0efb\u0ef6")
        buf.write(u"\3\2\2\2\u0efb\u0efa\3\2\2\2\u0efc\u01fd\3\2\2\2\u0efd")
        buf.write(u"\u0f00\7\u0081\2\2\u0efe\u0f00\3\2\2\2\u0eff\u0efd\3")
        buf.write(u"\2\2\2\u0eff\u0efe\3\2\2\2\u0f00\u01ff\3\2\2\2\u0f01")
        buf.write(u"\u0f02\t\16\2\2\u0f02\u0201\3\2\2\2\u0f03\u0f04\7\u018c")
        buf.write(u"\2\2\u0f04\u0f05\7\r\2\2\u0f05\u0f06\5\u043a\u021e\2")
        buf.write(u"\u0f06\u0f07\7\7\2\2\u0f07\u0f0a\3\2\2\2\u0f08\u0f0a")
        buf.write(u"\3\2\2\2\u0f09\u0f03\3\2\2\2\u0f09\u0f08\3\2\2\2\u0f0a")
        buf.write(u"\u0203\3\2\2\2\u0f0b\u0f0c\b\u0103\1\2\u0f0c\u0f0f\5")
        buf.write(u"\u0206\u0104\2\u0f0d\u0f0f\3\2\2\2\u0f0e\u0f0b\3\2\2")
        buf.write(u"\2\u0f0e\u0f0d\3\2\2\2\u0f0f\u0f15\3\2\2\2\u0f10\u0f11")
        buf.write(u"\f\4\2\2\u0f11\u0f12\7\b\2\2\u0f12\u0f14\5\u0206\u0104")
        buf.write(u"\2\u0f13\u0f10\3\2\2\2\u0f14\u0f17\3\2\2\2\u0f15\u0f13")
        buf.write(u"\3\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0205\3\2\2\2\u0f17")
        buf.write(u"\u0f15\3\2\2\2\u0f18\u0f1d\5\u04c8\u0265\2\u0f19\u0f1d")
        buf.write(u"\7\u01b0\2\2\u0f1a\u0f1d\5\u04ca\u0266\2\u0f1b\u0f1d")
        buf.write(u"\5\u04d4\u026b\2\u0f1c\u0f18\3\2\2\2\u0f1c\u0f19\3\2")
        buf.write(u"\2\2\u0f1c\u0f1a\3\2\2\2\u0f1c\u0f1b\3\2\2\2\u0f1d\u0207")
        buf.write(u"\3\2\2\2\u0f1e\u0f1f\7\u009e\2\2\u0f1f\u0f22\5\u04b4")
        buf.write(u"\u025b\2\u0f20\u0f22\3\2\2\2\u0f21\u0f1e\3\2\2\2\u0f21")
        buf.write(u"\u0f20\3\2\2\2\u0f22\u0209\3\2\2\2\u0f23\u0f28\b\u0106")
        buf.write(u"\1\2\u0f24\u0f25\f\3\2\2\u0f25\u0f27\5\u020c\u0107\2")
        buf.write(u"\u0f26\u0f24\3\2\2\2\u0f27\u0f2a\3\2\2\2\u0f28\u0f26")
        buf.write(u"\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u020b\3\2\2\2\u0f2a")
        buf.write(u"\u0f28\3\2\2\2\u0f2b\u0f2c\7\u00f0\2\2\u0f2c\u0f37\7")
        buf.write(u"q\2\2\u0f2d\u0f37\7q\2\2\u0f2e\u0f2f\7\u00b9\2\2\u0f2f")
        buf.write(u"\u0f37\7\u00af\2\2\u0f30\u0f31\7\u00b9\2\2\u0f31\u0f37")
        buf.write(u"\7r\2\2\u0f32\u0f33\7\u00f0\2\2\u0f33\u0f37\7\u0180\2")
        buf.write(u"\2\u0f34\u0f35\7\u00ee\2\2\u0f35\u0f37\7\u00b7\2\2\u0f36")
        buf.write(u"\u0f2b\3\2\2\2\u0f36\u0f2d\3\2\2\2\u0f36\u0f2e\3\2\2")
        buf.write(u"\2\u0f36\u0f30\3\2\2\2\u0f36\u0f32\3\2\2\2\u0f36\u0f34")
        buf.write(u"\3\2\2\2\u0f37\u020d\3\2\2\2\u0f38\u0f39\7\u0080\2\2")
        buf.write(u"\u0f39\u0f3a\7\u016c\2\2\u0f3a\u0f3b\5\u04b8\u025d\2")
        buf.write(u"\u0f3b\u0f3c\7\u00fe\2\2\u0f3c\u0f3d\5\u0250\u0129\2")
        buf.write(u"\u0f3d\u0f3e\5\u0102\u0082\2\u0f3e\u0f49\3\2\2\2\u0f3f")
        buf.write(u"\u0f40\7\u0080\2\2\u0f40\u0f41\7\u016c\2\2\u0f41\u0f42")
        buf.write(u"\7\u00ad\2\2\u0f42\u0f43\7\u008e\2\2\u0f43\u0f44\5\u04b8")
        buf.write(u"\u025d\2\u0f44\u0f45\7\u00fe\2\2\u0f45\u0f46\5\u0250")
        buf.write(u"\u0129\2\u0f46\u0f47\5\u0102\u0082\2\u0f47\u0f49\3\2")
        buf.write(u"\2\2\u0f48\u0f38\3\2\2\2\u0f48\u0f3f\3\2\2\2\u0f49\u020f")
        buf.write(u"\3\2\2\2\u0f4a\u0f4b\7[\2\2\u0f4b\u0f4c\7)\2\2\u0f4c")
        buf.write(u"\u0f4d\5\u04b8\u025d\2\u0f4d\u0f4e\7D\2\2\u0f4e\u0f4f")
        buf.write(u"\7\r\2\2\u0f4f\u0f50\5\u043a\u021e\2\u0f50\u0f51\7\7")
        buf.write(u"\2\2\u0f51\u0f52\5\u020a\u0106\2\u0f52\u0211\3\2\2\2")
        buf.write(u"\u0f53\u0f54\7\u0080\2\2\u0f54\u0f55\7)\2\2\u0f55\u0f56")
        buf.write(u"\5\u04b8\u025d\2\u0f56\u0f57\5\u0102\u0082\2\u0f57\u0213")
        buf.write(u"\3\2\2\2\u0f58\u0f59\7[\2\2\u0f59\u0f5a\7\35\2\2\u0f5a")
        buf.write(u"\u0f5b\5\u04c4\u0263\2\u0f5b\u0f5c\5\u021e\u0110\2\u0f5c")
        buf.write(u"\u0f5d\5\u0216\u010c\2\u0f5d\u0fb0\3\2\2\2\u0f5e\u0f5f")
        buf.write(u"\7[\2\2\u0f5f\u0f60\7\35\2\2\u0f60\u0f61\5\u04c4\u0263")
        buf.write(u"\2\u0f61\u0f62\5\u0220\u0111\2\u0f62\u0fb0\3\2\2\2\u0f63")
        buf.write(u"\u0f64\7[\2\2\u0f64\u0f65\7\u0100\2\2\u0f65\u0f66\5\u02e0")
        buf.write(u"\u0171\2\u0f66\u0f67\5\u0216\u010c\2\u0f67\u0fb0\3\2")
        buf.write(u"\2\2\u0f68\u0f69\7[\2\2\u0f69\u0f6a\7\u0171\2\2\u0f6a")
        buf.write(u"\u0f6b\5\u0250\u0129\2\u0f6b\u0f6c\5\u0216\u010c\2\u0f6c")
        buf.write(u"\u0fb0\3\2\2\2\u0f6d\u0f6e\7[\2\2\u0f6e\u0f6f\7\u0171")
        buf.write(u"\2\2\u0f6f\u0fb0\5\u0250\u0129\2\u0f70\u0f71\7[\2\2\u0f71")
        buf.write(u"\u0f72\7\u0171\2\2\u0f72\u0f73\5\u0250\u0129\2\u0f73")
        buf.write(u"\u0f74\7\'\2\2\u0f74\u0f75\7\r\2\2\u0f75\u0f76\5\u0404")
        buf.write(u"\u0203\2\u0f76\u0f77\7\7\2\2\u0f77\u0fb0\3\2\2\2\u0f78")
        buf.write(u"\u0f79\7[\2\2\u0f79\u0f7a\7\u0171\2\2\u0f7a\u0f7b\5\u0250")
        buf.write(u"\u0129\2\u0f7b\u0f7c\7\'\2\2\u0f7c\u0f7d\7\u0087\2\2")
        buf.write(u"\u0f7d\u0f7e\7\r\2\2\u0f7e\u0f7f\5\u0226\u0114\2\u0f7f")
        buf.write(u"\u0f80\7\7\2\2\u0f80\u0fb0\3\2\2\2\u0f81\u0f82\7[\2\2")
        buf.write(u"\u0f82\u0f83\7\u0171\2\2\u0f83\u0f84\5\u0250\u0129\2")
        buf.write(u"\u0f84\u0f85\7\'\2\2\u0f85\u0f86\7\u011f\2\2\u0f86\u0f87")
        buf.write(u"\5\u0216\u010c\2\u0f87\u0fb0\3\2\2\2\u0f88\u0f89\7[\2")
        buf.write(u"\2\u0f89\u0f8a\7\u0164\2\2\u0f8a\u0f8b\7\u013d\2\2\u0f8b")
        buf.write(u"\u0f8c\7\u010c\2\2\u0f8c\u0f8d\5\u0250\u0129\2\u0f8d")
        buf.write(u"\u0f8e\5\u0216\u010c\2\u0f8e\u0fb0\3\2\2\2\u0f8f\u0f90")
        buf.write(u"\7[\2\2\u0f90\u0f91\7\u0164\2\2\u0f91\u0f92\7\u013d\2")
        buf.write(u"\2\u0f92\u0f93\7x\2\2\u0f93\u0f94\5\u0250\u0129\2\u0f94")
        buf.write(u"\u0f95\5\u0216\u010c\2\u0f95\u0fb0\3\2\2\2\u0f96\u0f97")
        buf.write(u"\7[\2\2\u0f97\u0f98\7\u0164\2\2\u0f98\u0f99\7\u013d\2")
        buf.write(u"\2\u0f99\u0f9a\7\u0162\2\2\u0f9a\u0f9b\5\u0250\u0129")
        buf.write(u"\2\u0f9b\u0f9c\5\u0216\u010c\2\u0f9c\u0fb0\3\2\2\2\u0f9d")
        buf.write(u"\u0f9e\7[\2\2\u0f9e\u0f9f\7\u0164\2\2\u0f9f\u0fa0\7\u013d")
        buf.write(u"\2\2\u0fa0\u0fa1\7R\2\2\u0fa1\u0fa2\5\u0250\u0129\2\u0fa2")
        buf.write(u"\u0fa3\5\u0216\u010c\2\u0fa3\u0fb0\3\2\2\2\u0fa4\u0fa5")
        buf.write(u"\7[\2\2\u0fa5\u0fa6\7K\2\2\u0fa6\u0fa7\5\u0250\u0129")
        buf.write(u"\2\u0fa7\u0fa8\5\u0216\u010c\2\u0fa8\u0fb0\3\2\2\2\u0fa9")
        buf.write(u"\u0faa\7[\2\2\u0faa\u0fab\7K\2\2\u0fab\u0fac\5\u0250")
        buf.write(u"\u0129\2\u0fac\u0fad\7\u009e\2\2\u0fad\u0fae\5\u0250")
        buf.write(u"\u0129\2\u0fae\u0fb0\3\2\2\2\u0faf\u0f58\3\2\2\2\u0faf")
        buf.write(u"\u0f5e\3\2\2\2\u0faf\u0f63\3\2\2\2\u0faf\u0f68\3\2\2")
        buf.write(u"\2\u0faf\u0f6d\3\2\2\2\u0faf\u0f70\3\2\2\2\u0faf\u0f78")
        buf.write(u"\3\2\2\2\u0faf\u0f81\3\2\2\2\u0faf\u0f88\3\2\2\2\u0faf")
        buf.write(u"\u0f8f\3\2\2\2\u0faf\u0f96\3\2\2\2\u0faf\u0f9d\3\2\2")
        buf.write(u"\2\u0faf\u0fa4\3\2\2\2\u0faf\u0fa9\3\2\2\2\u0fb0\u0215")
        buf.write(u"\3\2\2\2\u0fb1\u0fb2\7\r\2\2\u0fb2\u0fb3\5\u0218\u010d")
        buf.write(u"\2\u0fb3\u0fb4\7\7\2\2\u0fb4\u0217\3\2\2\2\u0fb5\u0fb6")
        buf.write(u"\b\u010d\1\2\u0fb6\u0fb7\5\u021a\u010e\2\u0fb7\u0fbd")
        buf.write(u"\3\2\2\2\u0fb8\u0fb9\f\3\2\2\u0fb9\u0fba\7\b\2\2\u0fba")
        buf.write(u"\u0fbc\5\u021a\u010e\2\u0fbb\u0fb8\3\2\2\2\u0fbc\u0fbf")
        buf.write(u"\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe")
        buf.write(u"\u0219\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc1\5\u04d4")
        buf.write(u"\u026b\2\u0fc1\u0fc2\7\20\2\2\u0fc2\u0fc3\5\u021c\u010f")
        buf.write(u"\2\u0fc3\u0fc6\3\2\2\2\u0fc4\u0fc6\5\u04d4\u026b\2\u0fc5")
        buf.write(u"\u0fc0\3\2\2\2\u0fc5\u0fc4\3\2\2\2\u0fc6\u021b\3\2\2")
        buf.write(u"\2\u0fc7\u0fcd\5\u02c0\u0161\2\u0fc8\u0fcd\5\u04da\u026e")
        buf.write(u"\2\u0fc9\u0fcd\5\u0470\u0239\2\u0fca\u0fcd\5\u0192\u00ca")
        buf.write(u"\2\u0fcb\u0fcd\5\u04ca\u0266\2\u0fcc\u0fc7\3\2\2\2\u0fcc")
        buf.write(u"\u0fc8\3\2\2\2\u0fcc\u0fc9\3\2\2\2\u0fcc\u0fca\3\2\2")
        buf.write(u"\2\u0fcc\u0fcb\3\2\2\2\u0fcd\u021d\3\2\2\2\u0fce\u0fcf")
        buf.write(u"\7\r\2\2\u0fcf\u0fd0\5\u047a\u023e\2\u0fd0\u0fd1\7\7")
        buf.write(u"\2\2\u0fd1\u0fd6\3\2\2\2\u0fd2\u0fd3\7\r\2\2\u0fd3\u0fd4")
        buf.write(u"\7\13\2\2\u0fd4\u0fd6\7\7\2\2\u0fd5\u0fce\3\2\2\2\u0fd5")
        buf.write(u"\u0fd2\3\2\2\2\u0fd6\u021f\3\2\2\2\u0fd7\u0fd8\7\r\2")
        buf.write(u"\2\u0fd8\u0fd9\5\u0222\u0112\2\u0fd9\u0fda\7\7\2\2\u0fda")
        buf.write(u"\u0221\3\2\2\2\u0fdb\u0fdc\b\u0112\1\2\u0fdc\u0fdd\5")
        buf.write(u"\u0224\u0113\2\u0fdd\u0fe3\3\2\2\2\u0fde\u0fdf\f\3\2")
        buf.write(u"\2\u0fdf\u0fe0\7\b\2\2\u0fe0\u0fe2\5\u0224\u0113\2\u0fe1")
        buf.write(u"\u0fde\3\2\2\2\u0fe2\u0fe5\3\2\2\2\u0fe3\u0fe1\3\2\2")
        buf.write(u"\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u0223\3\2\2\2\u0fe5\u0fe3")
        buf.write(u"\3\2\2\2\u0fe6\u0fe7\7\u01ae\2\2\u0fe7\u0fe8\7\20\2\2")
        buf.write(u"\u0fe8\u0fe9\5\u021c\u010f\2\u0fe9\u0225\3\2\2\2\u0fea")
        buf.write(u"\u0fed\5\u0228\u0115\2\u0feb\u0fed\3\2\2\2\u0fec\u0fea")
        buf.write(u"\3\2\2\2\u0fec\u0feb\3\2\2\2\u0fed\u0227\3\2\2\2\u0fee")
        buf.write(u"\u0fef\b\u0115\1\2\u0fef\u0ff0\5\u04ca\u0266\2\u0ff0")
        buf.write(u"\u0ff6\3\2\2\2\u0ff1\u0ff2\f\3\2\2\u0ff2\u0ff3\7\b\2")
        buf.write(u"\2\u0ff3\u0ff5\5\u04ca\u0266\2\u0ff4\u0ff1\3\2\2\2\u0ff5")
        buf.write(u"\u0ff8\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff6\u0ff7\3\2\2")
        buf.write(u"\2\u0ff7\u0229\3\2\2\2\u0ff8\u0ff6\3\2\2\2\u0ff9\u0ffa")
        buf.write(u"\7 \2\2\u0ffa\u0ffb\7\u0171\2\2\u0ffb\u0ffc\5\u0250\u0129")
        buf.write(u"\2\u0ffc\u0ffd\7\32\2\2\u0ffd\u0ffe\7\u0183\2\2\u0ffe")
        buf.write(u"\u0fff\5\u04ca\u0266\2\u0fff\u1013\3\2\2\2\u1000\u1001")
        buf.write(u"\7 \2\2\u1001\u1002\7\u0171\2\2\u1002\u1003\5\u0250\u0129")
        buf.write(u"\2\u1003\u1004\7\32\2\2\u1004\u1005\7\u0183\2\2\u1005")
        buf.write(u"\u1006\5\u04ca\u0266\2\u1006\u1007\7\60\2\2\u1007\u1008")
        buf.write(u"\5\u04ca\u0266\2\u1008\u1013\3\2\2\2\u1009\u100a\7 \2")
        buf.write(u"\2\u100a\u100b\7\u0171\2\2\u100b\u100c\5\u0250\u0129")
        buf.write(u"\2\u100c\u100d\7\32\2\2\u100d\u100e\7\u0183\2\2\u100e")
        buf.write(u"\u100f\5\u04ca\u0266\2\u100f\u1010\7\34\2\2\u1010\u1011")
        buf.write(u"\5\u04ca\u0266\2\u1011\u1013\3\2\2\2\u1012\u0ff9\3\2")
        buf.write(u"\2\2\u1012\u1000\3\2\2\2\u1012\u1009\3\2\2\2\u1013\u022b")
        buf.write(u"\3\2\2\2\u1014\u1015\7[\2\2\u1015\u1016\7\u0100\2\2\u1016")
        buf.write(u"\u1017\7F\2\2\u1017\u1018\5\u0250\u0129\2\u1018\u1019")
        buf.write(u"\5\u0232\u011a\2\u1019\u101a\7\u0099\2\2\u101a\u101b")
        buf.write(u"\7\u0171\2\2\u101b\u101c\5\u040a\u0206\2\u101c\u101d")
        buf.write(u"\7\u017e\2\2\u101d\u101e\5\u04bc\u025f\2\u101e\u101f")
        buf.write(u"\5\u0234\u011b\2\u101f\u1020\7\'\2\2\u1020\u1021\5\u022e")
        buf.write(u"\u0118\2\u1021\u022d\3\2\2\2\u1022\u1023\b\u0118\1\2")
        buf.write(u"\u1023\u1024\5\u0230\u0119\2\u1024\u102a\3\2\2\2\u1025")
        buf.write(u"\u1026\f\3\2\2\u1026\u1027\7\b\2\2\u1027\u1029\5\u0230")
        buf.write(u"\u0119\2\u1028\u1025\3\2\2\2\u1029\u102c\3\2\2\2\u102a")
        buf.write(u"\u1028\3\2\2\2\u102a\u102b\3\2\2\2\u102b\u022f\3\2\2")
        buf.write(u"\2\u102c\u102a\3\2\2\2\u102d\u102e\7\u0100\2\2\u102e")
        buf.write(u"\u102f\5\u04c8\u0265\2\u102f\u1030\5\u02e0\u0171\2\u1030")
        buf.write(u"\u1031\5\u0236\u011c\2\u1031\u1032\5\u0238\u011d\2\u1032")
        buf.write(u"\u104a\3\2\2\2\u1033\u1034\7\u0100\2\2\u1034\u1035\5")
        buf.write(u"\u04c8\u0265\2\u1035\u1036\5\u02e0\u0171\2\u1036\u1037")
        buf.write(u"\5\u02de\u0170\2\u1037\u1038\5\u0236\u011c\2\u1038\u1039")
        buf.write(u"\5\u0238\u011d\2\u1039\u104a\3\2\2\2\u103a\u103b\7\u00a0")
        buf.write(u"\2\2\u103b\u103c\5\u04c8\u0265\2\u103c\u103d\5\u04c4")
        buf.write(u"\u0263\2\u103d\u103e\5\u02b0\u0159\2\u103e\u104a\3\2")
        buf.write(u"\2\2\u103f\u1040\7\u00a0\2\2\u1040\u1041\5\u04c8\u0265")
        buf.write(u"\2\u1041\u1042\7\r\2\2\u1042\u1043\5\u047a\u023e\2\u1043")
        buf.write(u"\u1044\7\7\2\2\u1044\u1045\5\u04c4\u0263\2\u1045\u1046")
        buf.write(u"\5\u02b0\u0159\2\u1046\u104a\3\2\2\2\u1047\u1048\7\u0157")
        buf.write(u"\2\2\u1048\u104a\5\u040a\u0206\2\u1049\u102d\3\2\2\2")
        buf.write(u"\u1049\u1033\3\2\2\2\u1049\u103a\3\2\2\2\u1049\u103f")
        buf.write(u"\3\2\2\2\u1049\u1047\3\2\2\2\u104a\u0231\3\2\2\2\u104b")
        buf.write(u"\u104e\7o\2\2\u104c\u104e\3\2\2\2\u104d\u104b\3\2\2\2")
        buf.write(u"\u104d\u104c\3\2\2\2\u104e\u0233\3\2\2\2\u104f\u1050")
        buf.write(u"\7\u0094\2\2\u1050\u1053\5\u0250\u0129\2\u1051\u1053")
        buf.write(u"\3\2\2\2\u1052\u104f\3\2\2\2\u1052\u1051\3\2\2\2\u1053")
        buf.write(u"\u0235\3\2\2\2\u1054\u1055\7\u0099\2\2\u1055\u105c\7")
        buf.write(u"\u013d\2\2\u1056\u1057\7\u0099\2\2\u1057\u1058\7\u0104")
        buf.write(u"\2\2\u1058\u1059\78\2\2\u1059\u105c\5\u0250\u0129\2\u105a")
        buf.write(u"\u105c\3\2\2\2\u105b\u1054\3\2\2\2\u105b\u1056\3\2\2")
        buf.write(u"\2\u105b\u105a\3\2\2\2\u105c\u0237\3\2\2\2\u105d\u1060")
        buf.write(u"\7\u0123\2\2\u105e\u1060\3\2\2\2\u105f\u105d\3\2\2\2")
        buf.write(u"\u105f\u105e\3\2\2\2\u1060\u0239\3\2\2\2\u1061\u1062")
        buf.write(u"\7[\2\2\u1062\u1063\7\u0100\2\2\u1063\u1064\7\u0094\2")
        buf.write(u"\2\u1064\u1065\5\u0250\u0129\2\u1065\u1066\7\u017e\2")
        buf.write(u"\2\u1066\u1067\5\u04bc\u025f\2\u1067\u023b\3\2\2\2\u1068")
        buf.write(u"\u1069\7 \2\2\u1069\u106a\7\u0100\2\2\u106a\u106b\7\u0094")
        buf.write(u"\2\2\u106b\u106c\5\u0250\u0129\2\u106c\u106d\7\u017e")
        buf.write(u"\2\2\u106d\u106e\5\u04bc\u025f\2\u106e\u106f\7\32\2\2")
        buf.write(u"\u106f\u1070\5\u022e\u0118\2\u1070\u107b\3\2\2\2\u1071")
        buf.write(u"\u1072\7 \2\2\u1072\u1073\7\u0100\2\2\u1073\u1074\7\u0094")
        buf.write(u"\2\2\u1074\u1075\5\u0250\u0129\2\u1075\u1076\7\u017e")
        buf.write(u"\2\2\u1076\u1077\5\u04bc\u025f\2\u1077\u1078\7\u0080")
        buf.write(u"\2\2\u1078\u1079\5\u023e\u0120\2\u1079\u107b\3\2\2\2")
        buf.write(u"\u107a\u1068\3\2\2\2\u107a\u1071\3\2\2\2\u107b\u023d")
        buf.write(u"\3\2\2\2\u107c\u107d\b\u0120\1\2\u107d\u107e\5\u0240")
        buf.write(u"\u0121\2\u107e\u1084\3\2\2\2\u107f\u1080\f\3\2\2\u1080")
        buf.write(u"\u1081\7\b\2\2\u1081\u1083\5\u0240\u0121\2\u1082\u107f")
        buf.write(u"\3\2\2\2\u1083\u1086\3\2\2\2\u1084\u1082\3\2\2\2\u1084")
        buf.write(u"\u1085\3\2\2\2\u1085\u023f\3\2\2\2\u1086\u1084\3\2\2")
        buf.write(u"\2\u1087\u1088\7\u0100\2\2\u1088\u1089\5\u04c8\u0265")
        buf.write(u"\2\u1089\u108a\7\r\2\2\u108a\u108b\5\u047a\u023e\2\u108b")
        buf.write(u"\u108c\7\7\2\2\u108c\u1094\3\2\2\2\u108d\u108e\7\u00a0")
        buf.write(u"\2\2\u108e\u108f\5\u04c8\u0265\2\u108f\u1090\7\r\2\2")
        buf.write(u"\u1090\u1091\5\u047a\u023e\2\u1091\u1092\7\7\2\2\u1092")
        buf.write(u"\u1094\3\2\2\2\u1093\u1087\3\2\2\2\u1093\u108d\3\2\2")
        buf.write(u"\2\u1094\u0241\3\2\2\2\u1095\u1096\7\u0080\2\2\u1096")
        buf.write(u"\u1097\7\u0100\2\2\u1097\u1098\7F\2\2\u1098\u1099\5\u0250")
        buf.write(u"\u0129\2\u1099\u109a\7\u017e\2\2\u109a\u109b\5\u04bc")
        buf.write(u"\u025f\2\u109b\u109c\5\u0102\u0082\2\u109c\u10a8\3\2")
        buf.write(u"\2\2\u109d\u109e\7\u0080\2\2\u109e\u109f\7\u0100\2\2")
        buf.write(u"\u109f\u10a0\7F\2\2\u10a0\u10a1\7\u00ad\2\2\u10a1\u10a2")
        buf.write(u"\7\u008e\2\2\u10a2\u10a3\5\u0250\u0129\2\u10a3\u10a4")
        buf.write(u"\7\u017e\2\2\u10a4\u10a5\5\u04bc\u025f\2\u10a5\u10a6")
        buf.write(u"\5\u0102\u0082\2\u10a6\u10a8\3\2\2\2\u10a7\u1095\3\2")
        buf.write(u"\2\2\u10a7\u109d\3\2\2\2\u10a8\u0243\3\2\2\2\u10a9\u10aa")
        buf.write(u"\7\u0080\2\2\u10aa\u10ab\7\u0100\2\2\u10ab\u10ac\7\u0094")
        buf.write(u"\2\2\u10ac\u10ad\5\u0250\u0129\2\u10ad\u10ae\7\u017e")
        buf.write(u"\2\2\u10ae\u10af\5\u04bc\u025f\2\u10af\u10b0\5\u0102")
        buf.write(u"\u0082\2\u10b0\u10bc\3\2\2\2\u10b1\u10b2\7\u0080\2\2")
        buf.write(u"\u10b2\u10b3\7\u0100\2\2\u10b3\u10b4\7\u0094\2\2\u10b4")
        buf.write(u"\u10b5\7\u00ad\2\2\u10b5\u10b6\7\u008e\2\2\u10b6\u10b7")
        buf.write(u"\5\u0250\u0129\2\u10b7\u10b8\7\u017e\2\2\u10b8\u10b9")
        buf.write(u"\5\u04bc\u025f\2\u10b9\u10ba\5\u0102\u0082\2\u10ba\u10bc")
        buf.write(u"\3\2\2\2\u10bb\u10a9\3\2\2\2\u10bb\u10b1\3\2\2\2\u10bc")
        buf.write(u"\u0245\3\2\2\2\u10bd\u10be\7\u0080\2\2\u10be\u10bf\7")
        buf.write(u"\u010a\2\2\u10bf\u10c0\78\2\2\u10c0\u10c1\5\u04b6\u025c")
        buf.write(u"\2\u10c1\u10c2\5\u0102\u0082\2\u10c2\u0247\3\2\2\2\u10c3")
        buf.write(u"\u10c4\7\u0122\2\2\u10c4\u10c5\7\u010a\2\2\u10c5\u10c6")
        buf.write(u"\78\2\2\u10c6\u10c7\5\u04b6\u025c\2\u10c7\u10c8\7\u0168")
        buf.write(u"\2\2\u10c8\u10c9\5\u04b8\u025d\2\u10c9\u0249\3\2\2\2")
        buf.write(u"\u10ca\u10cb\7\u0080\2\2\u10cb\u10cc\5\u024c\u0127\2")
        buf.write(u"\u10cc\u10cd\7\u00ad\2\2\u10cd\u10ce\7\u008e\2\2\u10ce")
        buf.write(u"\u10cf\5\u024e\u0128\2\u10cf\u10d0\5\u0102\u0082\2\u10d0")
        buf.write(u"\u10e5\3\2\2\2\u10d1\u10d2\7\u0080\2\2\u10d2\u10d3\5")
        buf.write(u"\u024c\u0127\2\u10d3\u10d4\5\u024e\u0128\2\u10d4\u10d5")
        buf.write(u"\5\u0102\u0082\2\u10d5\u10e5\3\2\2\2\u10d6\u10d7\7\u0080")
        buf.write(u"\2\2\u10d7\u10d8\7\u00b5\2\2\u10d8\u10d9\7Q\2\2\u10d9")
        buf.write(u"\u10da\5\u024e\u0128\2\u10da\u10db\5\u0102\u0082\2\u10db")
        buf.write(u"\u10e5\3\2\2\2\u10dc\u10dd\7\u0080\2\2\u10dd\u10de\7")
        buf.write(u"\u00b5\2\2\u10de\u10df\7Q\2\2\u10df\u10e0\7\u00ad\2\2")
        buf.write(u"\u10e0\u10e1\7\u008e\2\2\u10e1\u10e2\5\u024e\u0128\2")
        buf.write(u"\u10e2\u10e3\5\u0102\u0082\2\u10e3\u10e5\3\2\2\2\u10e4")
        buf.write(u"\u10ca\3\2\2\2\u10e4\u10d1\3\2\2\2\u10e4\u10d6\3\2\2")
        buf.write(u"\2\u10e4\u10dc\3\2\2\2\u10e5\u024b\3\2\2\2\u10e6\u10ff")
        buf.write(u"\7\u015e\2\2\u10e7\u10ff\7\u0141\2\2\u10e8\u10ff\7\u018a")
        buf.write(u"\2\2\u10e9\u10ff\7\u00b5\2\2\u10ea\u10eb\7\u009b\2\2")
        buf.write(u"\u10eb\u10ff\7\u015e\2\2\u10ec\u10ff\7\u0171\2\2\u10ed")
        buf.write(u"\u10ff\7~\2\2\u10ee\u10ff\7K\2\2\u10ef\u10ff\7X\2\2\u10f0")
        buf.write(u"\u10ff\7\u013b\2\2\u10f1\u10ff\7\u0090\2\2\u10f2\u10f3")
        buf.write(u"\7\u0164\2\2\u10f3\u10f4\7\u013d\2\2\u10f4\u10ff\7\u010c")
        buf.write(u"\2\2\u10f5\u10f6\7\u0164\2\2\u10f6\u10f7\7\u013d\2\2")
        buf.write(u"\u10f7\u10ff\7x\2\2\u10f8\u10f9\7\u0164\2\2\u10f9\u10fa")
        buf.write(u"\7\u013d\2\2\u10fa\u10ff\7\u0162\2\2\u10fb\u10fc\7\u0164")
        buf.write(u"\2\2\u10fc\u10fd\7\u013d\2\2\u10fd\u10ff\7R\2\2\u10fe")
        buf.write(u"\u10e6\3\2\2\2\u10fe\u10e7\3\2\2\2\u10fe\u10e8\3\2\2")
        buf.write(u"\2\u10fe\u10e9\3\2\2\2\u10fe\u10ea\3\2\2\2\u10fe\u10ec")
        buf.write(u"\3\2\2\2\u10fe\u10ed\3\2\2\2\u10fe\u10ee\3\2\2\2\u10fe")
        buf.write(u"\u10ef\3\2\2\2\u10fe\u10f0\3\2\2\2\u10fe\u10f1\3\2\2")
        buf.write(u"\2\u10fe\u10f2\3\2\2\2\u10fe\u10f5\3\2\2\2\u10fe\u10f8")
        buf.write(u"\3\2\2\2\u10fe\u10fb\3\2\2\2\u10ff\u024d\3\2\2\2\u1100")
        buf.write(u"\u1101\b\u0128\1\2\u1101\u1102\5\u0250\u0129\2\u1102")
        buf.write(u"\u1108\3\2\2\2\u1103\u1104\f\3\2\2\u1104\u1105\7\b\2")
        buf.write(u"\2\u1105\u1107\5\u0250\u0129\2\u1106\u1103\3\2\2\2\u1107")
        buf.write(u"\u110a\3\2\2\2\u1108\u1106\3\2\2\2\u1108\u1109\3\2\2")
        buf.write(u"\2\u1109\u024f\3\2\2\2\u110a\u1108\3\2\2\2\u110b\u1110")
        buf.write(u"\5\u04d0\u0269\2\u110c\u110d\5\u04d0\u0269\2\u110d\u110e")
        buf.write(u"\5\u0252\u012a\2\u110e\u1110\3\2\2\2\u110f\u110b\3\2")
        buf.write(u"\2\2\u110f\u110c\3\2\2\2\u1110\u0251\3\2\2\2\u1111\u1112")
        buf.write(u"\b\u012a\1\2\u1112\u1113\7\6\2\2\u1113\u1114\5\u04be")
        buf.write(u"\u0260\2\u1114\u111a\3\2\2\2\u1115\u1116\f\3\2\2\u1116")
        buf.write(u"\u1117\7\6\2\2\u1117\u1119\5\u04be\u0260\2\u1118\u1115")
        buf.write(u"\3\2\2\2\u1119\u111c\3\2\2\2\u111a\u1118\3\2\2\2\u111a")
        buf.write(u"\u111b\3\2\2\2\u111b\u0253\3\2\2\2\u111c\u111a\3\2\2")
        buf.write(u"\2\u111d\u111e\7\u016f\2\2\u111e\u111f\5\u03b6\u01dc")
        buf.write(u"\2\u111f\u1120\5\u03fa\u01fe\2\u1120\u1121\5\u0256\u012c")
        buf.write(u"\2\u1121\u1122\5\u0102\u0082\2\u1122\u0255\3\2\2\2\u1123")
        buf.write(u"\u1124\7W\2\2\u1124\u1129\7\u00ac\2\2\u1125\u1126\7\u012f")
        buf.write(u"\2\2\u1126\u1129\7\u00ac\2\2\u1127\u1129\3\2\2\2\u1128")
        buf.write(u"\u1123\3\2\2\2\u1128\u1125\3\2\2\2\u1128\u1127\3\2\2")
        buf.write(u"\2\u1129\u0257\3\2\2\2\u112a\u112b\7M\2\2\u112b\u112c")
        buf.write(u"\7\u00fe\2\2\u112c\u112d\5\u025a\u012e\2\u112d\u112e")
        buf.write(u"\5\u0250\u0129\2\u112e\u112f\7\u00c7\2\2\u112f\u1130")
        buf.write(u"\5\u025c\u012f\2\u1130\u11bf\3\2\2\2\u1131\u1132\7M\2")
        buf.write(u"\2\u1132\u1133\7\u00fe\2\2\u1133\u1134\7\35\2\2\u1134")
        buf.write(u"\u1135\5\u04c4\u0263\2\u1135\u1136\5\u021e\u0110\2\u1136")
        buf.write(u"\u1137\7\u00c7\2\2\u1137\u1138\5\u025c\u012f\2\u1138")
        buf.write(u"\u11bf\3\2\2\2\u1139\u113a\7M\2\2\u113a\u113b\7\u00fe")
        buf.write(u"\2\2\u113b\u113c\7\u00a0\2\2\u113c\u113d\5\u04c4\u0263")
        buf.write(u"\2\u113d\u113e\5\u02b0\u0159\2\u113e\u113f\7\u00c7\2")
        buf.write(u"\2\u113f\u1140\5\u025c\u012f\2\u1140\u11bf\3\2\2\2\u1141")
        buf.write(u"\u1142\7M\2\2\u1142\u1143\7\u00fe\2\2\u1143\u1144\7\u0100")
        buf.write(u"\2\2\u1144\u1145\5\u02e0\u0171\2\u1145\u1146\5\u02de")
        buf.write(u"\u0170\2\u1146\u1147\7\u00c7\2\2\u1147\u1148\5\u025c")
        buf.write(u"\u012f\2\u1148\u11bf\3\2\2\2\u1149\u114a\7M\2\2\u114a")
        buf.write(u"\u114b\7\u00fe\2\2\u114b\u114c\7T\2\2\u114c\u114d\5\u04b8")
        buf.write(u"\u025d\2\u114d\u114e\7\u00fe\2\2\u114e\u114f\5\u0250")
        buf.write(u"\u0129\2\u114f\u1150\7\u00c7\2\2\u1150\u1151\5\u025c")
        buf.write(u"\u012f\2\u1151\u11bf\3\2\2\2\u1152\u1153\7M\2\2\u1153")
        buf.write(u"\u1154\7\u00fe\2\2\u1154\u1155\7\u0139\2\2\u1155\u1156")
        buf.write(u"\5\u04b8\u025d\2\u1156\u1157\7\u00fe\2\2\u1157\u1158")
        buf.write(u"\5\u0250\u0129\2\u1158\u1159\7\u00c7\2\2\u1159\u115a")
        buf.write(u"\5\u025c\u012f\2\u115a\u11bf\3\2\2\2\u115b\u115c\7M\2")
        buf.write(u"\2\u115c\u115d\7\u00fe\2\2\u115d\u115e\7\u0139\2\2\u115e")
        buf.write(u"\u115f\5\u04b8\u025d\2\u115f\u1160\7\u00c7\2\2\u1160")
        buf.write(u"\u1161\5\u025c\u012f\2\u1161\u11bf\3\2\2\2\u1162\u1163")
        buf.write(u"\7M\2\2\u1163\u1164\7\u00fe\2\2\u1164\u1165\7\u016c\2")
        buf.write(u"\2\u1165\u1166\5\u04b8\u025d\2\u1166\u1167\7\u00fe\2")
        buf.write(u"\2\u1167\u1168\5\u0250\u0129\2\u1168\u1169\7\u00c7\2")
        buf.write(u"\2\u1169\u116a\5\u025c\u012f\2\u116a\u11bf\3\2\2\2\u116b")
        buf.write(u"\u116c\7M\2\2\u116c\u116d\7\u00fe\2\2\u116d\u116e\7\u0100")
        buf.write(u"\2\2\u116e\u116f\7F\2\2\u116f\u1170\5\u0250\u0129\2\u1170")
        buf.write(u"\u1171\7\u017e\2\2\u1171\u1172\5\u04bc\u025f\2\u1172")
        buf.write(u"\u1173\7\u00c7\2\2\u1173\u1174\5\u025c\u012f\2\u1174")
        buf.write(u"\u11bf\3\2\2\2\u1175\u1176\7M\2\2\u1176\u1177\7\u00fe")
        buf.write(u"\2\2\u1177\u1178\7\u0100\2\2\u1178\u1179\7\u0094\2\2")
        buf.write(u"\u1179\u117a\5\u0250\u0129\2\u117a\u117b\7\u017e\2\2")
        buf.write(u"\u117b\u117c\5\u04bc\u025f\2\u117c\u117d\7\u00c7\2\2")
        buf.write(u"\u117d\u117e\5\u025c\u012f\2\u117e\u11bf\3\2\2\2\u117f")
        buf.write(u"\u1180\7M\2\2\u1180\u1181\7\u00fe\2\2\u1181\u1182\7\u00ce")
        buf.write(u"\2\2\u1182\u1183\7\u00f9\2\2\u1183\u1184\5\u0192\u00ca")
        buf.write(u"\2\u1184\u1185\7\u00c7\2\2\u1185\u1186\5\u025c\u012f")
        buf.write(u"\2\u1186\u11bf\3\2\2\2\u1187\u1188\7M\2\2\u1188\u1189")
        buf.write(u"\7\u00fe\2\2\u1189\u118a\7>\2\2\u118a\u118b\7\r\2\2\u118b")
        buf.write(u"\u118c\5\u040a\u0206\2\u118c\u118d\7\'\2\2\u118d\u118e")
        buf.write(u"\5\u040a\u0206\2\u118e\u118f\7\7\2\2\u118f\u1190\7\u00c7")
        buf.write(u"\2\2\u1190\u1191\5\u025c\u012f\2\u1191\u11bf\3\2\2\2")
        buf.write(u"\u1192\u1193\7M\2\2\u1193\u1194\7\u00fe\2\2\u1194\u1195")
        buf.write(u"\5\u01a4\u00d3\2\u1195\u1196\7\u00cd\2\2\u1196\u1197")
        buf.write(u"\5\u0250\u0129\2\u1197\u1198\7\u00c7\2\2\u1198\u1199")
        buf.write(u"\5\u025c\u012f\2\u1199\u11bf\3\2\2\2\u119a\u119b\7M\2")
        buf.write(u"\2\u119b\u119c\7\u00fe\2\2\u119c\u119d\7\u0164\2\2\u119d")
        buf.write(u"\u119e\7\u013d\2\2\u119e\u119f\7\u010c\2\2\u119f\u11a0")
        buf.write(u"\5\u0250\u0129\2\u11a0\u11a1\7\u00c7\2\2\u11a1\u11a2")
        buf.write(u"\5\u025c\u012f\2\u11a2\u11bf\3\2\2\2\u11a3\u11a4\7M\2")
        buf.write(u"\2\u11a4\u11a5\7\u00fe\2\2\u11a5\u11a6\7\u0164\2\2\u11a6")
        buf.write(u"\u11a7\7\u013d\2\2\u11a7\u11a8\7x\2\2\u11a8\u11a9\5\u0250")
        buf.write(u"\u0129\2\u11a9\u11aa\7\u00c7\2\2\u11aa\u11ab\5\u025c")
        buf.write(u"\u012f\2\u11ab\u11bf\3\2\2\2\u11ac\u11ad\7M\2\2\u11ad")
        buf.write(u"\u11ae\7\u00fe\2\2\u11ae\u11af\7\u0164\2\2\u11af\u11b0")
        buf.write(u"\7\u013d\2\2\u11b0\u11b1\7\u0162\2\2\u11b1\u11b2\5\u0250")
        buf.write(u"\u0129\2\u11b2\u11b3\7\u00c7\2\2\u11b3\u11b4\5\u025c")
        buf.write(u"\u012f\2\u11b4\u11bf\3\2\2\2\u11b5\u11b6\7M\2\2\u11b6")
        buf.write(u"\u11b7\7\u00fe\2\2\u11b7\u11b8\7\u0164\2\2\u11b8\u11b9")
        buf.write(u"\7\u013d\2\2\u11b9\u11ba\7R\2\2\u11ba\u11bb\5\u0250\u0129")
        buf.write(u"\2\u11bb\u11bc\7\u00c7\2\2\u11bc\u11bd\5\u025c\u012f")
        buf.write(u"\2\u11bd\u11bf\3\2\2\2\u11be\u112a\3\2\2\2\u11be\u1131")
        buf.write(u"\3\2\2\2\u11be\u1139\3\2\2\2\u11be\u1141\3\2\2\2\u11be")
        buf.write(u"\u1149\3\2\2\2\u11be\u1152\3\2\2\2\u11be\u115b\3\2\2")
        buf.write(u"\2\u11be\u1162\3\2\2\2\u11be\u116b\3\2\2\2\u11be\u1175")
        buf.write(u"\3\2\2\2\u11be\u117f\3\2\2\2\u11be\u1187\3\2\2\2\u11be")
        buf.write(u"\u1192\3\2\2\2\u11be\u119a\3\2\2\2\u11be\u11a3\3\2\2")
        buf.write(u"\2\u11be\u11ac\3\2\2\2\u11be\u11b5\3\2\2\2\u11bf\u0259")
        buf.write(u"\3\2\2\2\u11c0\u11d5\7L\2\2\u11c1\u11d5\7i\2\2\u11c2")
        buf.write(u"\u11d5\7\u013b\2\2\u11c3\u11d5\7\u00b5\2\2\u11c4\u11d5")
        buf.write(u"\7\u0141\2\2\u11c5\u11d5\7\u015e\2\2\u11c6\u11d5\7~\2")
        buf.write(u"\2\u11c7\u11d5\7\u0171\2\2\u11c8\u11d5\7\u018a\2\2\u11c9")
        buf.write(u"\u11d5\7K\2\2\u11ca\u11d5\7X\2\2\u11cb\u11d5\7\u0160")
        buf.write(u"\2\2\u11cc\u11d5\7\u0090\2\2\u11cd\u11d5\7\u0135\2\2")
        buf.write(u"\u11ce\u11cf\7\u009b\2\2\u11cf\u11d5\7\u015e\2\2\u11d0")
        buf.write(u"\u11d5\7\u0144\2\2\u11d1\u11d2\7\u009b\2\2\u11d2\u11d3")
        buf.write(u"\7h\2\2\u11d3\u11d5\7\u0193\2\2\u11d4\u11c0\3\2\2\2\u11d4")
        buf.write(u"\u11c1\3\2\2\2\u11d4\u11c2\3\2\2\2\u11d4\u11c3\3\2\2")
        buf.write(u"\2\u11d4\u11c4\3\2\2\2\u11d4\u11c5\3\2\2\2\u11d4\u11c6")
        buf.write(u"\3\2\2\2\u11d4\u11c7\3\2\2\2\u11d4\u11c8\3\2\2\2\u11d4")
        buf.write(u"\u11c9\3\2\2\2\u11d4\u11ca\3\2\2\2\u11d4\u11cb\3\2\2")
        buf.write(u"\2\u11d4\u11cc\3\2\2\2\u11d4\u11cd\3\2\2\2\u11d4\u11ce")
        buf.write(u"\3\2\2\2\u11d4\u11d0\3\2\2\2\u11d4\u11d1\3\2\2\2\u11d5")
        buf.write(u"\u025b\3\2\2\2\u11d6\u11d9\5\u04ca\u0266\2\u11d7\u11d9")
        buf.write(u"\7\u00f5\2\2\u11d8\u11d6\3\2\2\2\u11d8\u11d7\3\2\2\2")
        buf.write(u"\u11d9\u025d\3\2\2\2\u11da\u11db\7\u013f\2\2\u11db\u11dc")
        buf.write(u"\7\u00cc\2\2\u11dc\u11dd\5\u0260\u0131\2\u11dd\u11de")
        buf.write(u"\7\u00fe\2\2\u11de\u11df\5\u0262\u0132\2\u11df\u11e0")
        buf.write(u"\5\u0250\u0129\2\u11e0\u11e1\7\u00c7\2\2\u11e1\u11e2")
        buf.write(u"\5\u0264\u0133\2\u11e2\u120c\3\2\2\2\u11e3\u11e4\7\u013f")
        buf.write(u"\2\2\u11e4\u11e5\7\u00cc\2\2\u11e5\u11e6\5\u0260\u0131")
        buf.write(u"\2\u11e6\u11e7\7\u00fe\2\2\u11e7\u11e8\7\35\2\2\u11e8")
        buf.write(u"\u11e9\5\u04c4\u0263\2\u11e9\u11ea\5\u021e\u0110\2\u11ea")
        buf.write(u"\u11eb\7\u00c7\2\2\u11eb\u11ec\5\u0264\u0133\2\u11ec")
        buf.write(u"\u120c\3\2\2\2\u11ed\u11ee\7\u013f\2\2\u11ee\u11ef\7")
        buf.write(u"\u00cc\2\2\u11ef\u11f0\5\u0260\u0131\2\u11f0\u11f1\7")
        buf.write(u"\u00fe\2\2\u11f1\u11f2\7\u00a0\2\2\u11f2\u11f3\5\u04c4")
        buf.write(u"\u0263\2\u11f3\u11f4\5\u02b0\u0159\2\u11f4\u11f5\7\u00c7")
        buf.write(u"\2\2\u11f5\u11f6\5\u0264\u0133\2\u11f6\u120c\3\2\2\2")
        buf.write(u"\u11f7\u11f8\7\u013f\2\2\u11f8\u11f9\7\u00cc\2\2\u11f9")
        buf.write(u"\u11fa\5\u0260\u0131\2\u11fa\u11fb\7\u00fe\2\2\u11fb")
        buf.write(u"\u11fc\7\u00ce\2\2\u11fc\u11fd\7\u00f9\2\2\u11fd\u11fe")
        buf.write(u"\5\u0192\u00ca\2\u11fe\u11ff\7\u00c7\2\2\u11ff\u1200")
        buf.write(u"\5\u0264\u0133\2\u1200\u120c\3\2\2\2\u1201\u1202\7\u013f")
        buf.write(u"\2\2\u1202\u1203\7\u00cc\2\2\u1203\u1204\5\u0260\u0131")
        buf.write(u"\2\u1204\u1205\7\u00fe\2\2\u1205\u1206\5\u01a4\u00d3")
        buf.write(u"\2\u1206\u1207\7\u00cd\2\2\u1207\u1208\5\u0250\u0129")
        buf.write(u"\2\u1208\u1209\7\u00c7\2\2\u1209\u120a\5\u0264\u0133")
        buf.write(u"\2\u120a\u120c\3\2\2\2\u120b\u11da\3\2\2\2\u120b\u11e3")
        buf.write(u"\3\2\2\2\u120b\u11ed\3\2\2\2\u120b\u11f7\3\2\2\2\u120b")
        buf.write(u"\u1201\3\2\2\2\u120c\u025f\3\2\2\2\u120d\u120e\7\u0099")
        buf.write(u"\2\2\u120e\u1211\5\u00e6t\2\u120f\u1211\3\2\2\2\u1210")
        buf.write(u"\u120d\3\2\2\2\u1210\u120f\3\2\2\2\u1211\u0261\3\2\2")
        buf.write(u"\2\u1212\u121f\7L\2\2\u1213\u121f\7i\2\2\u1214\u1215")
        buf.write(u"\7\u009b\2\2\u1215\u121f\7\u015e\2\2\u1216\u121f\7\u013b")
        buf.write(u"\2\2\u1217\u121f\7\u0141\2\2\u1218\u121f\7\u015e\2\2")
        buf.write(u"\u1219\u121f\7~\2\2\u121a\u121f\7\u0135\2\2\u121b\u121f")
        buf.write(u"\7\u0160\2\2\u121c\u121f\7\u0171\2\2\u121d\u121f\7\u018a")
        buf.write(u"\2\2\u121e\u1212\3\2\2\2\u121e\u1213\3\2\2\2\u121e\u1214")
        buf.write(u"\3\2\2\2\u121e\u1216\3\2\2\2\u121e\u1217\3\2\2\2\u121e")
        buf.write(u"\u1218\3\2\2\2\u121e\u1219\3\2\2\2\u121e\u121a\3\2\2")
        buf.write(u"\2\u121e\u121b\3\2\2\2\u121e\u121c\3\2\2\2\u121e\u121d")
        buf.write(u"\3\2\2\2\u121f\u0263\3\2\2\2\u1220\u1223\5\u04ca\u0266")
        buf.write(u"\2\u1221\u1223\7\u00f5\2\2\u1222\u1220\3\2\2\2\u1222")
        buf.write(u"\u1221\3\2\2\2\u1223\u0265\3\2\2\2\u1224\u1225\7\u0095")
        buf.write(u"\2\2\u1225\u1229\5\u0268\u0135\2\u1226\u1227\7\u00e7")
        buf.write(u"\2\2\u1227\u1229\5\u0268\u0135\2\u1228\u1224\3\2\2\2")
        buf.write(u"\u1228\u1226\3\2\2\2\u1229\u0267\3\2\2\2\u122a\u126d")
        buf.write(u"\5\u039a\u01ce\2\u122b\u122c\5\u026a\u0136\2\u122c\u122d")
        buf.write(u"\5\u039a\u01ce\2\u122d\u126d\3\2\2\2\u122e\u122f\7\u00ed")
        buf.write(u"\2\2\u122f\u1230\5\u026c\u0137\2\u1230\u1231\5\u039a")
        buf.write(u"\u01ce\2\u1231\u126d\3\2\2\2\u1232\u1233\7\u011a\2\2")
        buf.write(u"\u1233\u1234\5\u026c\u0137\2\u1234\u1235\5\u039a\u01ce")
        buf.write(u"\2\u1235\u126d\3\2\2\2\u1236\u1237\7\u0096\2\2\u1237")
        buf.write(u"\u1238\5\u026c\u0137\2\u1238\u1239\5\u039a\u01ce\2\u1239")
        buf.write(u"\u126d\3\2\2\2\u123a\u123b\7\u00cf\2\2\u123b\u123c\5")
        buf.write(u"\u026c\u0137\2\u123c\u123d\5\u039a\u01ce\2\u123d\u126d")
        buf.write(u"\3\2\2\2\u123e\u123f\7\27\2\2\u123f\u1240\5\u04ce\u0268")
        buf.write(u"\2\u1240\u1241\5\u026c\u0137\2\u1241\u1242\5\u039a\u01ce")
        buf.write(u"\2\u1242\u126d\3\2\2\2\u1243\u1244\7\u0128\2\2\u1244")
        buf.write(u"\u1245\5\u04ce\u0268\2\u1245\u1246\5\u026c\u0137\2\u1246")
        buf.write(u"\u1247\5\u039a\u01ce\2\u1247\u126d\3\2\2\2\u1248\u1249")
        buf.write(u"\5\u04ce\u0268\2\u1249\u124a\5\u026c\u0137\2\u124a\u124b")
        buf.write(u"\5\u039a\u01ce\2\u124b\u126d\3\2\2\2\u124c\u124d\7\36")
        buf.write(u"\2\2\u124d\u124e\5\u026c\u0137\2\u124e\u124f\5\u039a")
        buf.write(u"\u01ce\2\u124f\u126d\3\2\2\2\u1250\u1251\7\u009c\2\2")
        buf.write(u"\u1251\u1252\5\u026c\u0137\2\u1252\u1253\5\u039a\u01ce")
        buf.write(u"\2\u1253\u126d\3\2\2\2\u1254\u1255\7\u009c\2\2\u1255")
        buf.write(u"\u1256\5\u04ce\u0268\2\u1256\u1257\5\u026c\u0137\2\u1257")
        buf.write(u"\u1258\5\u039a\u01ce\2\u1258\u126d\3\2\2\2\u1259\u125a")
        buf.write(u"\7\u009c\2\2\u125a\u125b\7\36\2\2\u125b\u125c\5\u026c")
        buf.write(u"\u0137\2\u125c\u125d\5\u039a\u01ce\2\u125d\u126d\3\2")
        buf.write(u"\2\2\u125e\u125f\7/\2\2\u125f\u1260\5\u026c\u0137\2\u1260")
        buf.write(u"\u1261\5\u039a\u01ce\2\u1261\u126d\3\2\2\2\u1262\u1263")
        buf.write(u"\7/\2\2\u1263\u1264\5\u04ce\u0268\2\u1264\u1265\5\u026c")
        buf.write(u"\u0137\2\u1265\u1266\5\u039a\u01ce\2\u1266\u126d\3\2")
        buf.write(u"\2\2\u1267\u1268\7/\2\2\u1268\u1269\7\36\2\2\u1269\u126a")
        buf.write(u"\5\u026c\u0137\2\u126a\u126b\5\u039a\u01ce\2\u126b\u126d")
        buf.write(u"\3\2\2\2\u126c\u122a\3\2\2\2\u126c\u122b\3\2\2\2\u126c")
        buf.write(u"\u122e\3\2\2\2\u126c\u1232\3\2\2\2\u126c\u1236\3\2\2")
        buf.write(u"\2\u126c\u123a\3\2\2\2\u126c\u123e\3\2\2\2\u126c\u1243")
        buf.write(u"\3\2\2\2\u126c\u1248\3\2\2\2\u126c\u124c\3\2\2\2\u126c")
        buf.write(u"\u1250\3\2\2\2\u126c\u1254\3\2\2\2\u126c\u1259\3\2\2")
        buf.write(u"\2\u126c\u125e\3\2\2\2\u126c\u1262\3\2\2\2\u126c\u1267")
        buf.write(u"\3\2\2\2\u126d\u0269\3\2\2\2\u126e\u126f\t\17\2\2\u126f")
        buf.write(u"\u026b\3\2\2\2\u1270\u1273\5\u026a\u0136\2\u1271\u1273")
        buf.write(u"\3\2\2\2\u1272\u1270\3\2\2\2\u1272\u1271\3\2\2\2\u1273")
        buf.write(u"\u026d\3\2\2\2\u1274\u1275\7\u00a3\2\2\u1275\u1276\5")
        buf.write(u"\u0272\u013a\2\u1276\u1277\7\u00fe\2\2\u1277\u1278\5")
        buf.write(u"\u0278\u013d\2\u1278\u1279\7\u0168\2\2\u1279\u127a\5")
        buf.write(u"\u027a\u013e\2\u127a\u127b\5\u027e\u0140\2\u127b\u026f")
        buf.write(u"\3\2\2\2\u127c\u127d\7\u0133\2\2\u127d\u127e\5\u0272")
        buf.write(u"\u013a\2\u127e\u127f\7\u00fe\2\2\u127f\u1280\5\u0278")
        buf.write(u"\u013d\2\u1280\u1281\7\u009e\2\2\u1281\u1282\5\u027a")
        buf.write(u"\u013e\2\u1282\u1283\5\u0102\u0082\2\u1283\u1290\3\2")
        buf.write(u"\2\2\u1284\u1285\7\u0133\2\2\u1285\u1286\7\u00a3\2\2")
        buf.write(u"\u1286\u1287\7\u0101\2\2\u1287\u1288\7\u0099\2\2\u1288")
        buf.write(u"\u1289\5\u0272\u013a\2\u1289\u128a\7\u00fe\2\2\u128a")
        buf.write(u"\u128b\5\u0278\u013d\2\u128b\u128c\7\u009e\2\2\u128c")
        buf.write(u"\u128d\5\u027a\u013e\2\u128d\u128e\5\u0102\u0082\2\u128e")
        buf.write(u"\u1290\3\2\2\2\u128f\u127c\3\2\2\2\u128f\u1284\3\2\2")
        buf.write(u"\2\u1290\u0271\3\2\2\2\u1291\u12a1\5\u0274\u013b\2\u1292")
        buf.write(u"\u12a1\7\36\2\2\u1293\u1294\7\36\2\2\u1294\u12a1\7\u011b")
        buf.write(u"\2\2\u1295\u1296\7\36\2\2\u1296\u1297\7\r\2\2\u1297\u1298")
        buf.write(u"\5\u0160\u00b1\2\u1298\u1299\7\7\2\2\u1299\u12a1\3\2")
        buf.write(u"\2\2\u129a\u129b\7\36\2\2\u129b\u129c\7\u011b\2\2\u129c")
        buf.write(u"\u129d\7\r\2\2\u129d\u129e\5\u0160\u00b1\2\u129e\u129f")
        buf.write(u"\7\7\2\2\u129f\u12a1\3\2\2\2\u12a0\u1291\3\2\2\2\u12a0")
        buf.write(u"\u1292\3\2\2\2\u12a0\u1293\3\2\2\2\u12a0\u1295\3\2\2")
        buf.write(u"\2\u12a0\u129a\3\2\2\2\u12a1\u0273\3\2\2\2\u12a2\u12a3")
        buf.write(u"\b\u013b\1\2\u12a3\u12a4\5\u0276\u013c\2\u12a4\u12aa")
        buf.write(u"\3\2\2\2\u12a5\u12a6\f\3\2\2\u12a6\u12a7\7\b\2\2\u12a7")
        buf.write(u"\u12a9\5\u0276\u013c\2\u12a8\u12a5\3\2\2\2\u12a9\u12ac")
        buf.write(u"\3\2\2\2\u12aa\u12a8\3\2\2\2\u12aa\u12ab\3\2\2\2\u12ab")
        buf.write(u"\u0275\3\2\2\2\u12ac\u12aa\3\2\2\2\u12ad\u12ae\7\u0140")
        buf.write(u"\2\2\u12ae\u12b7\5\u015e\u00b0\2\u12af\u12b0\7\u0126")
        buf.write(u"\2\2\u12b0\u12b7\5\u015e\u00b0\2\u12b1\u12b2\7[\2\2\u12b2")
        buf.write(u"\u12b7\5\u015e\u00b0\2\u12b3\u12b4\5\u04d0\u0269\2\u12b4")
        buf.write(u"\u12b5\5\u015e\u00b0\2\u12b5\u12b7\3\2\2\2\u12b6\u12ad")
        buf.write(u"\3\2\2\2\u12b6\u12af\3\2\2\2\u12b6\u12b1\3\2\2\2\u12b6")
        buf.write(u"\u12b3\3\2\2\2\u12b7\u0277\3\2\2\2\u12b8\u12e5\5\u04b2")
        buf.write(u"\u025a\2\u12b9\u12ba\7\u015e\2\2\u12ba\u12e5\5\u04b2")
        buf.write(u"\u025a\2\u12bb\u12bc\7\u0141\2\2\u12bc\u12e5\5\u04b2")
        buf.write(u"\u025a\2\u12bd\u12be\7\u009b\2\2\u12be\u12bf\7h\2\2\u12bf")
        buf.write(u"\u12c0\7\u0193\2\2\u12c0\u12e5\5\u04b6\u025c\2\u12c1")
        buf.write(u"\u12c2\7\u009b\2\2\u12c2\u12c3\7\u0144\2\2\u12c3\u12e5")
        buf.write(u"\5\u04b6\u025c\2\u12c4\u12c5\7\u00a0\2\2\u12c5\u12e5")
        buf.write(u"\5\u0280\u0141\2\u12c6\u12c7\7i\2\2\u12c7\u12e5\5\u04b6")
        buf.write(u"\u025c\2\u12c8\u12c9\7~\2\2\u12c9\u12e5\5\u024e\u0128")
        buf.write(u"\2\u12ca\u12cb\7\u00cd\2\2\u12cb\u12e5\5\u04b6\u025c")
        buf.write(u"\2\u12cc\u12cd\7\u00ce\2\2\u12cd\u12ce\7\u00f9\2\2\u12ce")
        buf.write(u"\u12e5\5\u0194\u00cb\2\u12cf\u12d0\7\u013b\2\2\u12d0")
        buf.write(u"\u12e5\5\u04b6\u025c\2\u12d1\u12d2\7\u0160\2\2\u12d2")
        buf.write(u"\u12e5\5\u04b6\u025c\2\u12d3\u12d4\7\u0171\2\2\u12d4")
        buf.write(u"\u12e5\5\u024e\u0128\2\u12d5\u12d6\7\36\2\2\u12d6\u12d7")
        buf.write(u"\7\u015f\2\2\u12d7\u12d8\7\u00b2\2\2\u12d8\u12d9\7\u013b")
        buf.write(u"\2\2\u12d9\u12e5\5\u04b6\u025c\2\u12da\u12db\7\36\2\2")
        buf.write(u"\u12db\u12dc\7\u0142\2\2\u12dc\u12dd\7\u00b2\2\2\u12dd")
        buf.write(u"\u12de\7\u013b\2\2\u12de\u12e5\5\u04b6\u025c\2\u12df")
        buf.write(u"\u12e0\7\36\2\2\u12e0\u12e1\7\u00a1\2\2\u12e1\u12e2\7")
        buf.write(u"\u00b2\2\2\u12e2\u12e3\7\u013b\2\2\u12e3\u12e5\5\u04b6")
        buf.write(u"\u025c\2\u12e4\u12b8\3\2\2\2\u12e4\u12b9\3\2\2\2\u12e4")
        buf.write(u"\u12bb\3\2\2\2\u12e4\u12bd\3\2\2\2\u12e4\u12c1\3\2\2")
        buf.write(u"\2\u12e4\u12c4\3\2\2\2\u12e4\u12c6\3\2\2\2\u12e4\u12c8")
        buf.write(u"\3\2\2\2\u12e4\u12ca\3\2\2\2\u12e4\u12cc\3\2\2\2\u12e4")
        buf.write(u"\u12cf\3\2\2\2\u12e4\u12d1\3\2\2\2\u12e4\u12d3\3\2\2")
        buf.write(u"\2\u12e4\u12d5\3\2\2\2\u12e4\u12da\3\2\2\2\u12e4\u12df")
        buf.write(u"\3\2\2\2\u12e5\u0279\3\2\2\2\u12e6\u12e7\b\u013e\1\2")
        buf.write(u"\u12e7\u12e8\5\u027c\u013f\2\u12e8\u12ee\3\2\2\2\u12e9")
        buf.write(u"\u12ea\f\3\2\2\u12ea\u12eb\7\b\2\2\u12eb\u12ed\5\u027c")
        buf.write(u"\u013f\2\u12ec\u12e9\3\2\2\2\u12ed\u12f0\3\2\2\2\u12ee")
        buf.write(u"\u12ec\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u027b\3\2\2")
        buf.write(u"\2\u12f0\u12ee\3\2\2\2\u12f1\u12f5\5\u04cc\u0267\2\u12f2")
        buf.write(u"\u12f3\7\u00a6\2\2\u12f3\u12f5\5\u04cc\u0267\2\u12f4")
        buf.write(u"\u12f1\3\2\2\2\u12f4\u12f2\3\2\2\2\u12f5\u027d\3\2\2")
        buf.write(u"\2\u12f6\u12f7\7\u0190\2\2\u12f7\u12f8\7\u00a3\2\2\u12f8")
        buf.write(u"\u12fb\7\u0101\2\2\u12f9\u12fb\3\2\2\2\u12fa\u12f6\3")
        buf.write(u"\2\2\2\u12fa\u12f9\3\2\2\2\u12fb\u027f\3\2\2\2\u12fc")
        buf.write(u"\u12fd\b\u0141\1\2\u12fd\u12fe\5\u0282\u0142\2\u12fe")
        buf.write(u"\u1304\3\2\2\2\u12ff\u1300\f\3\2\2\u1300\u1301\7\b\2")
        buf.write(u"\2\u1301\u1303\5\u0282\u0142\2\u1302\u12ff\3\2\2\2\u1303")
        buf.write(u"\u1306\3\2\2\2\u1304\u1302\3\2\2\2\u1304\u1305\3\2\2")
        buf.write(u"\2\u1305\u0281\3\2\2\2\u1306\u1304\3\2\2\2\u1307\u1308")
        buf.write(u"\5\u04c4\u0263\2\u1308\u1309\5\u02b0\u0159\2\u1309\u0283")
        buf.write(u"\3\2\2\2\u130a\u130b\7\u00a3\2\2\u130b\u130c\5\u0274")
        buf.write(u"\u013b\2\u130c\u130d\7\u0168\2\2\u130d\u130e\5\u04b6")
        buf.write(u"\u025c\2\u130e\u130f\5\u0288\u0145\2\u130f\u1310\5\u028a")
        buf.write(u"\u0146\2\u1310\u0285\3\2\2\2\u1311\u1312\7\u0133\2\2")
        buf.write(u"\u1312\u1313\5\u0274\u013b\2\u1313\u1314\7\u009e\2\2")
        buf.write(u"\u1314\u1315\5\u04b6\u025c\2\u1315\u1316\5\u028a\u0146")
        buf.write(u"\2\u1316\u1317\5\u0102\u0082\2\u1317\u1323\3\2\2\2\u1318")
        buf.write(u"\u1319\7\u0133\2\2\u1319\u131a\7\33\2\2\u131a\u131b\7")
        buf.write(u"\u0101\2\2\u131b\u131c\7\u0099\2\2\u131c\u131d\5\u0274")
        buf.write(u"\u013b\2\u131d\u131e\7\u009e\2\2\u131e\u131f\5\u04b6")
        buf.write(u"\u025c\2\u131f\u1320\5\u028a\u0146\2\u1320\u1321\5\u0102")
        buf.write(u"\u0082\2\u1321\u1323\3\2\2\2\u1322\u1311\3\2\2\2\u1322")
        buf.write(u"\u1318\3\2\2\2\u1323\u0287\3\2\2\2\u1324\u1325\7\u0190")
        buf.write(u"\2\2\u1325\u1326\7\33\2\2\u1326\u1329\7\u0101\2\2\u1327")
        buf.write(u"\u1329\3\2\2\2\u1328\u1324\3\2\2\2\u1328\u1327\3\2\2")
        buf.write(u"\2\u1329\u0289\3\2\2\2\u132a\u132b\7\u00a4\2\2\u132b")
        buf.write(u"\u132c\78\2\2\u132c\u132f\5\u04cc\u0267\2\u132d\u132f")
        buf.write(u"\3\2\2\2\u132e\u132a\3\2\2\2\u132e\u132d\3\2\2\2\u132f")
        buf.write(u"\u028b\3\2\2\2\u1330\u1331\7 \2\2\u1331\u1332\7o\2\2")
        buf.write(u"\u1332\u1333\7\u011b\2\2\u1333\u1334\5\u028e\u0148\2")
        buf.write(u"\u1334\u1335\5\u0292\u014a\2\u1335\u028d\3\2\2\2\u1336")
        buf.write(u"\u133b\b\u0148\1\2\u1337\u1338\f\4\2\2\u1338\u133a\5")
        buf.write(u"\u0290\u0149\2\u1339\u1337\3\2\2\2\u133a\u133d\3\2\2")
        buf.write(u"\2\u133b\u1339\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u028f")
        buf.write(u"\3\2\2\2\u133d\u133b\3\2\2\2\u133e\u133f\7\u00b2\2\2")
        buf.write(u"\u133f\u1340\7\u013b\2\2\u1340\u1348\5\u04b6\u025c\2")
        buf.write(u"\u1341\u1342\7\u0099\2\2\u1342\u1343\7\u0135\2\2\u1343")
        buf.write(u"\u1348\5\u04b6\u025c\2\u1344\u1345\7\u0099\2\2\u1345")
        buf.write(u"\u1346\7\u017d\2\2\u1346\u1348\5\u04b6\u025c\2\u1347")
        buf.write(u"\u133e\3\2\2\2\u1347\u1341\3\2\2\2\u1347\u1344\3\2\2")
        buf.write(u"\2\u1348\u0291\3\2\2\2\u1349\u134a\7\u00a3\2\2\u134a")
        buf.write(u"\u134b\5\u0272\u013a\2\u134b\u134c\7\u00fe\2\2\u134c")
        buf.write(u"\u134d\5\u0294\u014b\2\u134d\u134e\7\u0168\2\2\u134e")
        buf.write(u"\u134f\5\u027a\u013e\2\u134f\u1350\5\u027e\u0140\2\u1350")
        buf.write(u"\u1365\3\2\2\2\u1351\u1352\7\u0133\2\2\u1352\u1353\5")
        buf.write(u"\u0272\u013a\2\u1353\u1354\7\u00fe\2\2\u1354\u1355\5")
        buf.write(u"\u0294\u014b\2\u1355\u1356\7\u009e\2\2\u1356\u1357\5")
        buf.write(u"\u027a\u013e\2\u1357\u1358\5\u0102\u0082\2\u1358\u1365")
        buf.write(u"\3\2\2\2\u1359\u135a\7\u0133\2\2\u135a\u135b\7\u00a3")
        buf.write(u"\2\2\u135b\u135c\7\u0101\2\2\u135c\u135d\7\u0099\2\2")
        buf.write(u"\u135d\u135e\5\u0272\u013a\2\u135e\u135f\7\u00fe\2\2")
        buf.write(u"\u135f\u1360\5\u0294\u014b\2\u1360\u1361\7\u009e\2\2")
        buf.write(u"\u1361\u1362\5\u027a\u013e\2\u1362\u1363\5\u0102\u0082")
        buf.write(u"\2\u1363\u1365\3\2\2\2\u1364\u1349\3\2\2\2\u1364\u1351")
        buf.write(u"\3\2\2\2\u1364\u1359\3\2\2\2\u1365\u0293\3\2\2\2\u1366")
        buf.write(u"\u1367\t\20\2\2\u1367\u0295\3\2\2\2\u1368\u1369\7[\2")
        buf.write(u"\2\u1369\u136a\5\u0298\u014d\2\u136a\u136b\7\u00b5\2")
        buf.write(u"\2\u136b\u136c\5\u029a\u014e\2\u136c\u136d\5\u029c\u014f")
        buf.write(u"\2\u136d\u136e\7\u00fe\2\2\u136e\u136f\5\u04b4\u025b")
        buf.write(u"\2\u136f\u1370\5\u029e\u0150\2\u1370\u1371\7\r\2\2\u1371")
        buf.write(u"\u1372\5\u02a0\u0151\2\u1372\u1373\7\7\2\2\u1373\u1374")
        buf.write(u"\5\u010a\u0086\2\u1374\u1375\5\u017a\u00be\2\u1375\u1376")
        buf.write(u"\5\u0400\u0201\2\u1376\u0297\3\2\2\2\u1377\u137a\7\u0177")
        buf.write(u"\2\2\u1378\u137a\3\2\2\2\u1379\u1377\3\2\2\2\u1379\u1378")
        buf.write(u"\3\2\2\2\u137a\u0299\3\2\2\2\u137b\u137e\7Q\2\2\u137c")
        buf.write(u"\u137e\3\2\2\2\u137d\u137b\3\2\2\2\u137d\u137c\3\2\2")
        buf.write(u"\2\u137e\u029b\3\2\2\2\u137f\u1382\5\u04c0\u0261\2\u1380")
        buf.write(u"\u1382\3\2\2\2\u1381\u137f\3\2\2\2\u1381\u1380\3\2\2")
        buf.write(u"\2\u1382\u029d\3\2\2\2\u1383\u1384\7\u017e\2\2\u1384")
        buf.write(u"\u1387\5\u04bc\u025f\2\u1385\u1387\3\2\2\2\u1386\u1383")
        buf.write(u"\3\2\2\2\u1386\u1385\3\2\2\2\u1387\u029f\3\2\2\2\u1388")
        buf.write(u"\u1389\b\u0151\1\2\u1389\u138a\5\u02a2\u0152\2\u138a")
        buf.write(u"\u1390\3\2\2\2\u138b\u138c\f\3\2\2\u138c\u138d\7\b\2")
        buf.write(u"\2\u138d\u138f\5\u02a2\u0152\2\u138e\u138b\3\2\2\2\u138f")
        buf.write(u"\u1392\3\2\2\2\u1390\u138e\3\2\2\2\u1390\u1391\3\2\2")
        buf.write(u"\2\u1391\u02a1\3\2\2\2\u1392\u1390\3\2\2\2\u1393\u1394")
        buf.write(u"\5\u04d0\u0269\2\u1394\u1395\5\u02a4\u0153\2\u1395\u1396")
        buf.write(u"\5\u02a6\u0154\2\u1396\u1397\5\u02a8\u0155\2\u1397\u1398")
        buf.write(u"\5\u02aa\u0156\2\u1398\u13a8\3\2\2\2\u1399\u139a\5\u0440")
        buf.write(u"\u0221\2\u139a\u139b\5\u02a4\u0153\2\u139b\u139c\5\u02a6")
        buf.write(u"\u0154\2\u139c\u139d\5\u02a8\u0155\2\u139d\u139e\5\u02aa")
        buf.write(u"\u0156\2\u139e\u13a8\3\2\2\2\u139f\u13a0\7\r\2\2\u13a0")
        buf.write(u"\u13a1\5\u043a\u021e\2\u13a1\u13a2\7\7\2\2\u13a2\u13a3")
        buf.write(u"\5\u02a4\u0153\2\u13a3\u13a4\5\u02a6\u0154\2\u13a4\u13a5")
        buf.write(u"\5\u02a8\u0155\2\u13a5\u13a6\5\u02aa\u0156\2\u13a6\u13a8")
        buf.write(u"\3\2\2\2\u13a7\u1393\3\2\2\2\u13a7\u1399\3\2\2\2\u13a7")
        buf.write(u"\u139f\3\2\2\2\u13a8\u02a3\3\2\2\2\u13a9\u13aa\7J\2\2")
        buf.write(u"\u13aa\u13ad\5\u0250\u0129\2\u13ab\u13ad\3\2\2\2\u13ac")
        buf.write(u"\u13a9\3\2\2\2\u13ac\u13ab\3\2\2\2\u13ad\u02a5\3\2\2")
        buf.write(u"\2\u13ae\u13b3\5\u0250\u0129\2\u13af\u13b0\7\u017e\2")
        buf.write(u"\2\u13b0\u13b3\5\u0250\u0129\2\u13b1\u13b3\3\2\2\2\u13b2")
        buf.write(u"\u13ae\3\2\2\2\u13b2\u13af\3\2\2\2\u13b2\u13b1\3\2\2")
        buf.write(u"\2\u13b3\u02a7\3\2\2\2\u13b4\u13b8\7(\2\2\u13b5\u13b8")
        buf.write(u"\7w\2\2\u13b6\u13b8\3\2\2\2\u13b7\u13b4\3\2\2\2\u13b7")
        buf.write(u"\u13b5\3\2\2\2\u13b7\u13b6\3\2\2\2\u13b8\u02a9\3\2\2")
        buf.write(u"\2\u13b9\u13bd\7\u01a8\2\2\u13ba\u13bd\7\u01a9\2\2\u13bb")
        buf.write(u"\u13bd\3\2\2\2\u13bc\u13b9\3\2\2\2\u13bc\u13ba\3\2\2")
        buf.write(u"\2\u13bc\u13bb\3\2\2\2\u13bd\u02ab\3\2\2\2\u13be\u13bf")
        buf.write(u"\7[\2\2\u13bf\u13c0\5\u02ae\u0158\2\u13c0\u13c1\7\u00a0")
        buf.write(u"\2\2\u13c1\u13c2\5\u04c4\u0263\2\u13c2\u13c3\5\u02b4")
        buf.write(u"\u015b\2\u13c3\u13c4\7\u0132\2\2\u13c4\u13c5\5\u02be")
        buf.write(u"\u0160\2\u13c5\u13c6\5\u02c4\u0163\2\u13c6\u13c7\5\u02cc")
        buf.write(u"\u0167\2\u13c7\u13de\3\2\2\2\u13c8\u13c9\7[\2\2\u13c9")
        buf.write(u"\u13ca\5\u02ae\u0158\2\u13ca\u13cb\7\u00a0\2\2\u13cb")
        buf.write(u"\u13cc\5\u04c4\u0263\2\u13cc\u13cd\5\u02b4\u015b\2\u13cd")
        buf.write(u"\u13ce\7\u0132\2\2\u13ce\u13cf\7\u015e\2\2\u13cf\u13d0")
        buf.write(u"\7\r\2\2\u13d0\u13d1\5\u02d0\u0169\2\u13d1\u13d2\7\7")
        buf.write(u"\2\2\u13d2\u13d3\5\u02c4\u0163\2\u13d3\u13d4\5\u02cc")
        buf.write(u"\u0167\2\u13d4\u13de\3\2\2\2\u13d5\u13d6\7[\2\2\u13d6")
        buf.write(u"\u13d7\5\u02ae\u0158\2\u13d7\u13d8\7\u00a0\2\2\u13d8")
        buf.write(u"\u13d9\5\u04c4\u0263\2\u13d9\u13da\5\u02b4\u015b\2\u13da")
        buf.write(u"\u13db\5\u02c4\u0163\2\u13db\u13dc\5\u02cc\u0167\2\u13dc")
        buf.write(u"\u13de\3\2\2\2\u13dd\u13be\3\2\2\2\u13dd\u13c8\3\2\2")
        buf.write(u"\2\u13dd\u13d5\3\2\2\2\u13de\u02ad\3\2\2\2\u13df\u13e0")
        buf.write(u"\7\u0103\2\2\u13e0\u13e3\7\u012c\2\2\u13e1\u13e3\3\2")
        buf.write(u"\2\2\u13e2\u13df\3\2\2\2\u13e2\u13e1\3\2\2\2\u13e3\u02af")
        buf.write(u"\3\2\2\2\u13e4\u13e5\7\r\2\2\u13e5\u13e6\5\u02b2\u015a")
        buf.write(u"\2\u13e6\u13e7\7\7\2\2\u13e7\u13eb\3\2\2\2\u13e8\u13e9")
        buf.write(u"\7\r\2\2\u13e9\u13eb\7\7\2\2\u13ea\u13e4\3\2\2\2\u13ea")
        buf.write(u"\u13e8\3\2\2\2\u13eb\u02b1\3\2\2\2\u13ec\u13ed\b\u015a")
        buf.write(u"\1\2\u13ed\u13ee\5\u02b8\u015d\2\u13ee\u13f4\3\2\2\2")
        buf.write(u"\u13ef\u13f0\f\3\2\2\u13f0\u13f1\7\b\2\2\u13f1\u13f3")
        buf.write(u"\5\u02b8\u015d\2\u13f2\u13ef\3\2\2\2\u13f3\u13f6\3\2")
        buf.write(u"\2\2\u13f4\u13f2\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u02b3")
        buf.write(u"\3\2\2\2\u13f6\u13f4\3\2\2\2\u13f7\u13f8\7\r\2\2\u13f8")
        buf.write(u"\u13f9\5\u02b6\u015c\2\u13f9\u13fa\7\7\2\2\u13fa\u13fe")
        buf.write(u"\3\2\2\2\u13fb\u13fc\7\r\2\2\u13fc\u13fe\7\7\2\2\u13fd")
        buf.write(u"\u13f7\3\2\2\2\u13fd\u13fb\3\2\2\2\u13fe\u02b5\3\2\2")
        buf.write(u"\2\u13ff\u1400\b\u015c\1\2\u1400\u1401\5\u02c2\u0162")
        buf.write(u"\2\u1401\u1407\3\2\2\2\u1402\u1403\f\3\2\2\u1403\u1404")
        buf.write(u"\7\b\2\2\u1404\u1406\5\u02c2\u0162\2\u1405\u1402\3\2")
        buf.write(u"\2\2\u1406\u1409\3\2\2\2\u1407\u1405\3\2\2\2\u1407\u1408")
        buf.write(u"\3\2\2\2\u1408\u02b7\3\2\2\2\u1409\u1407\3\2\2\2\u140a")
        buf.write(u"\u140b\5\u02ba\u015e\2\u140b\u140c\5\u02bc\u015f\2\u140c")
        buf.write(u"\u140d\5\u02c0\u0161\2\u140d\u141a\3\2\2\2\u140e\u140f")
        buf.write(u"\5\u02bc\u015f\2\u140f\u1410\5\u02ba\u015e\2\u1410\u1411")
        buf.write(u"\5\u02c0\u0161\2\u1411\u141a\3\2\2\2\u1412\u1413\5\u02bc")
        buf.write(u"\u015f\2\u1413\u1414\5\u02c0\u0161\2\u1414\u141a\3\2")
        buf.write(u"\2\2\u1415\u1416\5\u02ba\u015e\2\u1416\u1417\5\u02c0")
        buf.write(u"\u0161\2\u1417\u141a\3\2\2\2\u1418\u141a\5\u02c0\u0161")
        buf.write(u"\2\u1419\u140a\3\2\2\2\u1419\u140e\3\2\2\2\u1419\u1412")
        buf.write(u"\3\2\2\2\u1419\u1415\3\2\2\2\u1419\u1418\3\2\2\2\u141a")
        buf.write(u"\u02b9\3\2\2\2\u141b\u1422\7\u00b2\2\2\u141c\u1422\7")
        buf.write(u"\u0105\2\2\u141d\u1422\7\u00bc\2\2\u141e\u141f\7\u00b2")
        buf.write(u"\2\2\u141f\u1422\7\u0105\2\2\u1420\u1422\7\u0186\2\2")
        buf.write(u"\u1421\u141b\3\2\2\2\u1421\u141c\3\2\2\2\u1421\u141d")
        buf.write(u"\3\2\2\2\u1421\u141e\3\2\2\2\u1421\u1420\3\2\2\2\u1422")
        buf.write(u"\u02bb\3\2\2\2\u1423\u1424\5\u04d2\u026a\2\u1424\u02bd")
        buf.write(u"\3\2\2\2\u1425\u1426\5\u02c0\u0161\2\u1426\u02bf\3\2")
        buf.write(u"\2\2\u1427\u1434\5\u040a\u0206\2\u1428\u1429\5\u04d2")
        buf.write(u"\u026a\2\u1429\u142a\5\u0252\u012a\2\u142a\u142b\7\4")
        buf.write(u"\2\2\u142b\u142c\7\u0171\2\2\u142c\u1434\3\2\2\2\u142d")
        buf.write(u"\u142e\7\u0148\2\2\u142e\u142f\5\u04d2\u026a\2\u142f")
        buf.write(u"\u1430\5\u0252\u012a\2\u1430\u1431\7\4\2\2\u1431\u1432")
        buf.write(u"\7\u0171\2\2\u1432\u1434\3\2\2\2\u1433\u1427\3\2\2\2")
        buf.write(u"\u1433\u1428\3\2\2\2\u1433\u142d\3\2\2\2\u1434\u02c1")
        buf.write(u"\3\2\2\2\u1435\u143f\5\u02b8\u015d\2\u1436\u1437\5\u02b8")
        buf.write(u"\u015d\2\u1437\u1438\7o\2\2\u1438\u1439\5\u043a\u021e")
        buf.write(u"\2\u1439\u143f\3\2\2\2\u143a\u143b\5\u02b8\u015d\2\u143b")
        buf.write(u"\u143c\7\20\2\2\u143c\u143d\5\u043a\u021e\2\u143d\u143f")
        buf.write(u"\3\2\2\2\u143e\u1435\3\2\2\2\u143e\u1436\3\2\2\2\u143e")
        buf.write(u"\u143a\3\2\2\2\u143f\u02c3\3\2\2\2\u1440\u1441\b\u0163")
        buf.write(u"\1\2\u1441\u1442\5\u02c8\u0165\2\u1442\u1447\3\2\2\2")
        buf.write(u"\u1443\u1444\f\3\2\2\u1444\u1446\5\u02c8\u0165\2\u1445")
        buf.write(u"\u1443\3\2\2\2\u1446\u1449\3\2\2\2\u1447\u1445\3\2\2")
        buf.write(u"\2\u1447\u1448\3\2\2\2\u1448\u02c5\3\2\2\2\u1449\u1447")
        buf.write(u"\3\2\2\2\u144a\u144b\7:\2\2\u144b\u144c\7\u00fe\2\2\u144c")
        buf.write(u"\u144d\7\u00f5\2\2\u144d\u146a\7\u00bd\2\2\u144e\u144f")
        buf.write(u"\7\u0132\2\2\u144f\u1450\7\u00f5\2\2\u1450\u1451\7\u00fe")
        buf.write(u"\2\2\u1451\u1452\7\u00f5\2\2\u1452\u146a\7\u00bd\2\2")
        buf.write(u"\u1453\u146a\7\u0158\2\2\u1454\u146a\7\u00b0\2\2\u1455")
        buf.write(u"\u146a\7\u0150\2\2\u1456\u146a\7\u018b\2\2\u1457\u1458")
        buf.write(u"\7\u0091\2\2\u1458\u1459\7\u013f\2\2\u1459\u146a\7s\2")
        buf.write(u"\2\u145a\u145b\7\u0091\2\2\u145b\u145c\7\u013f\2\2\u145c")
        buf.write(u"\u146a\7\u00c6\2\2\u145d\u145e\7\u013f\2\2\u145e\u146a")
        buf.write(u"\7s\2\2\u145f\u1460\7\u013f\2\2\u1460\u146a\7\u00c6\2")
        buf.write(u"\2\u1461\u146a\7\u00d3\2\2\u1462\u1463\7\u00f0\2\2\u1463")
        buf.write(u"\u146a\7\u00d3\2\2\u1464\u1465\7Z\2\2\u1465\u146a\5\u0192")
        buf.write(u"\u00ca\2\u1466\u1467\7\u0138\2\2\u1467\u146a\5\u0192")
        buf.write(u"\u00ca\2\u1468\u146a\5\u00ecw\2\u1469\u144a\3\2\2\2\u1469")
        buf.write(u"\u144e\3\2\2\2\u1469\u1453\3\2\2\2\u1469\u1454\3\2\2")
        buf.write(u"\2\u1469\u1455\3\2\2\2\u1469\u1456\3\2\2\2\u1469\u1457")
        buf.write(u"\3\2\2\2\u1469\u145a\3\2\2\2\u1469\u145d\3\2\2\2\u1469")
        buf.write(u"\u145f\3\2\2\2\u1469\u1461\3\2\2\2\u1469\u1462\3\2\2")
        buf.write(u"\2\u1469\u1464\3\2\2\2\u1469\u1466\3\2\2\2\u1469\u1468")
        buf.write(u"\3\2\2\2\u146a\u02c7\3\2\2\2\u146b\u146c\7\'\2\2\u146c")
        buf.write(u"\u1472\5\u02ca\u0166\2\u146d\u146e\7\u00cd\2\2\u146e")
        buf.write(u"\u1472\5\u00e6t\2\u146f\u1472\7\u018f\2\2\u1470\u1472")
        buf.write(u"\5\u02c6\u0164\2\u1471\u146b\3\2\2\2\u1471\u146d\3\2")
        buf.write(u"\2\2\u1471\u146f\3\2\2\2\u1471\u1470\3\2\2\2\u1472\u02c9")
        buf.write(u"\3\2\2\2\u1473\u1479\5\u04ca\u0266\2\u1474\u1475\5\u04ca")
        buf.write(u"\u0266\2\u1475\u1476\7\b\2\2\u1476\u1477\5\u04ca\u0266")
        buf.write(u"\2\u1477\u1479\3\2\2\2\u1478\u1473\3\2\2\2\u1478\u1474")
        buf.write(u"\3\2\2\2\u1479\u02cb\3\2\2\2\u147a\u147b\7\u0190\2\2")
        buf.write(u"\u147b\u147e\5\u0216\u010c\2\u147c\u147e\3\2\2\2\u147d")
        buf.write(u"\u147a\3\2\2\2\u147d\u147c\3\2\2\2\u147e\u02cd\3\2\2")
        buf.write(u"\2\u147f\u1480\5\u02bc\u015f\2\u1480\u1481\5\u02c0\u0161")
        buf.write(u"\2\u1481\u02cf\3\2\2\2\u1482\u1483\b\u0169\1\2\u1483")
        buf.write(u"\u1484\5\u02ce\u0168\2\u1484\u148a\3\2\2\2\u1485\u1486")
        buf.write(u"\f\3\2\2\u1486\u1487\7\b\2\2\u1487\u1489\5\u02ce\u0168")
        buf.write(u"\2\u1488\u1485\3\2\2\2\u1489\u148c\3\2\2\2\u148a\u1488")
        buf.write(u"\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u02d1\3\2\2\2\u148c")
        buf.write(u"\u148a\3\2\2\2\u148d\u148e\7 \2\2\u148e\u148f\7\u00a0")
        buf.write(u"\2\2\u148f\u1490\5\u0282\u0142\2\u1490\u1491\5\u02d4")
        buf.write(u"\u016b\2\u1491\u1492\5\u02d6\u016c\2\u1492\u02d3\3\2")
        buf.write(u"\2\2\u1493\u1494\b\u016b\1\2\u1494\u1495\5\u02c6\u0164")
        buf.write(u"\2\u1495\u149a\3\2\2\2\u1496\u1497\f\3\2\2\u1497\u1499")
        buf.write(u"\5\u02c6\u0164\2\u1498\u1496\3\2\2\2\u1499\u149c\3\2")
        buf.write(u"\2\2\u149a\u1498\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u02d5")
        buf.write(u"\3\2\2\2\u149c\u149a\3\2\2\2\u149d\u14a0\7\u0130\2\2")
        buf.write(u"\u149e\u14a0\3\2\2\2\u149f\u149d\3\2\2\2\u149f\u149e")
        buf.write(u"\3\2\2\2\u14a0\u02d7\3\2\2\2\u14a1\u14a2\7\u0080\2\2")
        buf.write(u"\u14a2\u14a3\7\u00a0\2\2\u14a3\u14a4\5\u04c4\u0263\2")
        buf.write(u"\u14a4\u14a5\5\u02b0\u0159\2\u14a5\u14a6\5\u0102\u0082")
        buf.write(u"\2\u14a6\u14b0\3\2\2\2\u14a7\u14a8\7\u0080\2\2\u14a8")
        buf.write(u"\u14a9\7\u00a0\2\2\u14a9\u14aa\7\u00ad\2\2\u14aa\u14ab")
        buf.write(u"\7\u008e\2\2\u14ab\u14ac\5\u04c4\u0263\2\u14ac\u14ad")
        buf.write(u"\5\u02b0\u0159\2\u14ad\u14ae\5\u0102\u0082\2\u14ae\u14b0")
        buf.write(u"\3\2\2\2\u14af\u14a1\3\2\2\2\u14af\u14a7\3\2\2\2\u14b0")
        buf.write(u"\u02d9\3\2\2\2\u14b1\u14b2\7\u0080\2\2\u14b2\u14b3\7")
        buf.write(u"\35\2\2\u14b3\u14b4\5\u04c4\u0263\2\u14b4\u14b5\5\u021e")
        buf.write(u"\u0110\2\u14b5\u14b6\5\u0102\u0082\2\u14b6\u14c0\3\2")
        buf.write(u"\2\2\u14b7\u14b8\7\u0080\2\2\u14b8\u14b9\7\35\2\2\u14b9")
        buf.write(u"\u14ba\7\u00ad\2\2\u14ba\u14bb\7\u008e\2\2\u14bb\u14bc")
        buf.write(u"\5\u04c4\u0263\2\u14bc\u14bd\5\u021e\u0110\2\u14bd\u14be")
        buf.write(u"\5\u0102\u0082\2\u14be\u14c0\3\2\2\2\u14bf\u14b1\3\2")
        buf.write(u"\2\2\u14bf\u14b7\3\2\2\2\u14c0\u02db\3\2\2\2\u14c1\u14c2")
        buf.write(u"\7\u0080\2\2\u14c2\u14c3\7\u0100\2\2\u14c3\u14c4\5\u02e0")
        buf.write(u"\u0171\2\u14c4\u14c5\5\u02de\u0170\2\u14c5\u14c6\5\u0102")
        buf.write(u"\u0082\2\u14c6\u14d0\3\2\2\2\u14c7\u14c8\7\u0080\2\2")
        buf.write(u"\u14c8\u14c9\7\u0100\2\2\u14c9\u14ca\7\u00ad\2\2\u14ca")
        buf.write(u"\u14cb\7\u008e\2\2\u14cb\u14cc\5\u02e0\u0171\2\u14cc")
        buf.write(u"\u14cd\5\u02de\u0170\2\u14cd\u14ce\5\u0102\u0082\2\u14ce")
        buf.write(u"\u14d0\3\2\2\2\u14cf\u14c1\3\2\2\2\u14cf\u14c7\3\2\2")
        buf.write(u"\2\u14d0\u02dd\3\2\2\2\u14d1\u14d2\7\r\2\2\u14d2\u14d3")
        buf.write(u"\5\u040a\u0206\2\u14d3\u14d4\7\7\2\2\u14d4\u14e8\3\2")
        buf.write(u"\2\2\u14d5\u14d6\7\r\2\2\u14d6\u14d7\5\u040a\u0206\2")
        buf.write(u"\u14d7\u14d8\7\b\2\2\u14d8\u14d9\5\u040a\u0206\2\u14d9")
        buf.write(u"\u14da\7\7\2\2\u14da\u14e8\3\2\2\2\u14db\u14dc\7\r\2")
        buf.write(u"\2\u14dc\u14dd\7\u00ef\2\2\u14dd\u14de\7\b\2\2\u14de")
        buf.write(u"\u14df\5\u040a\u0206\2\u14df\u14e0\7\7\2\2\u14e0\u14e8")
        buf.write(u"\3\2\2\2\u14e1\u14e2\7\r\2\2\u14e2\u14e3\5\u040a\u0206")
        buf.write(u"\2\u14e3\u14e4\7\b\2\2\u14e4\u14e5\7\u00ef\2\2\u14e5")
        buf.write(u"\u14e6\7\7\2\2\u14e6\u14e8\3\2\2\2\u14e7\u14d1\3\2\2")
        buf.write(u"\2\u14e7\u14d5\3\2\2\2\u14e7\u14db\3\2\2\2\u14e7\u14e1")
        buf.write(u"\3\2\2\2\u14e8\u02df\3\2\2\2\u14e9\u14ef\5\u046a\u0236")
        buf.write(u"\2\u14ea\u14eb\5\u04d0\u0269\2\u14eb\u14ec\7\6\2\2\u14ec")
        buf.write(u"\u14ed\5\u02e0\u0171\2\u14ed\u14ef\3\2\2\2\u14ee\u14e9")
        buf.write(u"\3\2\2\2\u14ee\u14ea\3\2\2\2\u14ef\u02e1\3\2\2\2\u14f0")
        buf.write(u"\u14f1\7|\2\2\u14f1\u14f2\5\u02e4\u0173\2\u14f2\u02e3")
        buf.write(u"\3\2\2\2\u14f3\u14f4\b\u0173\1\2\u14f4\u14f5\5\u02e6")
        buf.write(u"\u0174\2\u14f5\u14fa\3\2\2\2\u14f6\u14f7\f\3\2\2\u14f7")
        buf.write(u"\u14f9\5\u02e6\u0174\2\u14f8\u14f6\3\2\2\2\u14f9\u14fc")
        buf.write(u"\3\2\2\2\u14fa\u14f8\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb")
        buf.write(u"\u02e5\3\2\2\2\u14fc\u14fa\3\2\2\2\u14fd\u1501\5\u04ca")
        buf.write(u"\u0266\2\u14fe\u14ff\7\u00cd\2\2\u14ff\u1501\5\u00e6")
        buf.write(u"t\2\u1500\u14fd\3\2\2\2\u1500\u14fe\3\2\2\2\u1501\u02e7")
        buf.write(u"\3\2\2\2\u1502\u1503\7[\2\2\u1503\u1504\7>\2\2\u1504")
        buf.write(u"\u1505\7\r\2\2\u1505\u1506\5\u040a\u0206\2\u1506\u1507")
        buf.write(u"\7\'\2\2\u1507\u1508\5\u040a\u0206\2\u1508\u1509\7\7")
        buf.write(u"\2\2\u1509\u150a\7\u0190\2\2\u150a\u150b\7\u00a0\2\2")
        buf.write(u"\u150b\u150c\5\u0282\u0142\2\u150c\u150d\5\u02ea\u0176")
        buf.write(u"\2\u150d\u1525\3\2\2\2\u150e\u150f\7[\2\2\u150f\u1510")
        buf.write(u"\7>\2\2\u1510\u1511\7\r\2\2\u1511\u1512\5\u040a\u0206")
        buf.write(u"\2\u1512\u1513\7\'\2\2\u1513\u1514\5\u040a\u0206\2\u1514")
        buf.write(u"\u1515\7\7\2\2\u1515\u1516\7\u0191\2\2\u1516\u1517\7")
        buf.write(u"\u00a0\2\2\u1517\u1518\5\u02ea\u0176\2\u1518\u1525\3")
        buf.write(u"\2\2\2\u1519\u151a\7[\2\2\u151a\u151b\7>\2\2\u151b\u151c")
        buf.write(u"\7\r\2\2\u151c\u151d\5\u040a\u0206\2\u151d\u151e\7\'")
        buf.write(u"\2\2\u151e\u151f\5\u040a\u0206\2\u151f\u1520\7\7\2\2")
        buf.write(u"\u1520\u1521\7\u0190\2\2\u1521\u1522\7\u00bc\2\2\u1522")
        buf.write(u"\u1523\5\u02ea\u0176\2\u1523\u1525\3\2\2\2\u1524\u1502")
        buf.write(u"\3\2\2\2\u1524\u150e\3\2\2\2\u1524\u1519\3\2\2\2\u1525")
        buf.write(u"\u02e9\3\2\2\2\u1526\u1527\7\'\2\2\u1527\u152c\7\u00b1")
        buf.write(u"\2\2\u1528\u1529\7\'\2\2\u1529\u152c\7*\2\2\u152a\u152c")
        buf.write(u"\3\2\2\2\u152b\u1526\3\2\2\2\u152b\u1528\3\2\2\2\u152b")
        buf.write(u"\u152a\3\2\2\2\u152c\u02eb\3\2\2\2\u152d\u152e\7\u0080")
        buf.write(u"\2\2\u152e\u152f\7>\2\2\u152f\u1530\5\u02ee\u0178\2\u1530")
        buf.write(u"\u1531\7\r\2\2\u1531\u1532\5\u040a\u0206\2\u1532\u1533")
        buf.write(u"\7\'\2\2\u1533\u1534\5\u040a\u0206\2\u1534\u1535\7\7")
        buf.write(u"\2\2\u1535\u1536\5\u0102\u0082\2\u1536\u02ed\3\2\2\2")
        buf.write(u"\u1537\u1538\7\u00ad\2\2\u1538\u153b\7\u008e\2\2\u1539")
        buf.write(u"\u153b\3\2\2\2\u153a\u1537\3\2\2\2\u153a\u1539\3\2\2")
        buf.write(u"\2\u153b\u02ef\3\2\2\2\u153c\u153d\7\u0127\2\2\u153d")
        buf.write(u"\u153e\5\u02f2\u017a\2\u153e\u153f\5\u04b4\u025b\2\u153f")
        buf.write(u"\u1540\5\u02f4\u017b\2\u1540\u154c\3\2\2\2\u1541\u1542")
        buf.write(u"\7\u0127\2\2\u1542\u1543\7\u015d\2\2\u1543\u1544\5\u04b8")
        buf.write(u"\u025d\2\u1544\u1545\5\u02f4\u017b\2\u1545\u154c\3\2")
        buf.write(u"\2\2\u1546\u1547\7\u0127\2\2\u1547\u1548\7i\2\2\u1548")
        buf.write(u"\u1549\5\u04b8\u025d\2\u1549\u154a\5\u02f4\u017b\2\u154a")
        buf.write(u"\u154c\3\2\2\2\u154b\u153c\3\2\2\2\u154b\u1541\3\2\2")
        buf.write(u"\2\u154b\u1546\3\2\2\2\u154c\u02f1\3\2\2\2\u154d\u154e")
        buf.write(u"\t\21\2\2\u154e\u02f3\3\2\2\2\u154f\u1552\7\u009a\2\2")
        buf.write(u"\u1550\u1552\3\2\2\2\u1551\u154f\3\2\2\2\u1551\u1550")
        buf.write(u"\3\2\2\2\u1552\u02f5\3\2\2\2\u1553\u1554\7 \2\2\u1554")
        buf.write(u"\u1555\7\35\2\2\u1555\u1556\5\u04c4\u0263\2\u1556\u1557")
        buf.write(u"\5\u021e\u0110\2\u1557\u1558\7\u012a\2\2\u1558\u1559")
        buf.write(u"\7\u0168\2\2\u1559\u155a\5\u04b8\u025d\2\u155a\u16a6")
        buf.write(u"\3\2\2\2\u155b\u155c\7 \2\2\u155c\u155d\7K\2\2\u155d")
        buf.write(u"\u155e\5\u0250\u0129\2\u155e\u155f\7\u012a\2\2\u155f")
        buf.write(u"\u1560\7\u0168\2\2\u1560\u1561\5\u04b8\u025d\2\u1561")
        buf.write(u"\u16a6\3\2\2\2\u1562\u1563\7 \2\2\u1563\u1564\7X\2\2")
        buf.write(u"\u1564\u1565\5\u0250\u0129\2\u1565\u1566\7\u012a\2\2")
        buf.write(u"\u1566\u1567\7\u0168\2\2\u1567\u1568\5\u04b8\u025d\2")
        buf.write(u"\u1568\u16a6\3\2\2\2\u1569\u156a\7 \2\2\u156a\u156b\7")
        buf.write(u"i\2\2\u156b\u156c\5\u04ba\u025e\2\u156c\u156d\7\u012a")
        buf.write(u"\2\2\u156d\u156e\7\u0168\2\2\u156e\u156f\5\u04ba\u025e")
        buf.write(u"\2\u156f\u16a6\3\2\2\2\u1570\u1571\7 \2\2\u1571\u1572")
        buf.write(u"\7~\2\2\u1572\u1573\5\u0250\u0129\2\u1573\u1574\7\u012a")
        buf.write(u"\2\2\u1574\u1575\7\u0168\2\2\u1575\u1576\5\u04b8\u025d")
        buf.write(u"\2\u1576\u16a6\3\2\2\2\u1577\u1578\7 \2\2\u1578\u1579")
        buf.write(u"\7~\2\2\u1579\u157a\5\u0250\u0129\2\u157a\u157b\7\u012a")
        buf.write(u"\2\2\u157b\u157c\7T\2\2\u157c\u157d\5\u04b8\u025d\2\u157d")
        buf.write(u"\u157e\7\u0168\2\2\u157e\u157f\5\u04b8\u025d\2\u157f")
        buf.write(u"\u16a6\3\2\2\2\u1580\u1581\7 \2\2\u1581\u1582\7\u009b")
        buf.write(u"\2\2\u1582\u1583\7h\2\2\u1583\u1584\7\u0193\2\2\u1584")
        buf.write(u"\u1585\5\u04b8\u025d\2\u1585\u1586\7\u012a\2\2\u1586")
        buf.write(u"\u1587\7\u0168\2\2\u1587\u1588\5\u04b8\u025d\2\u1588")
        buf.write(u"\u16a6\3\2\2\2\u1589\u158a\7 \2\2\u158a\u158b\7\u00a0")
        buf.write(u"\2\2\u158b\u158c\5\u0282\u0142\2\u158c\u158d\7\u012a")
        buf.write(u"\2\2\u158d\u158e\7\u0168\2\2\u158e\u158f\5\u04b8\u025d")
        buf.write(u"\2\u158f\u16a6\3\2\2\2\u1590\u1591\7 \2\2\u1591\u1592")
        buf.write(u"\7\u00a6\2\2\u1592\u1593\5\u04cc\u0267\2\u1593\u1594")
        buf.write(u"\7\u012a\2\2\u1594\u1595\7\u0168\2\2\u1595\u1596\5\u04cc")
        buf.write(u"\u0267\2\u1596\u16a6\3\2\2\2\u1597\u1598\7 \2\2\u1598")
        buf.write(u"\u1599\5\u01a4\u00d3\2\u1599\u159a\7\u00cd\2\2\u159a")
        buf.write(u"\u159b\5\u04b8\u025d\2\u159b\u159c\7\u012a\2\2\u159c")
        buf.write(u"\u159d\7\u0168\2\2\u159d\u159e\5\u04b8\u025d\2\u159e")
        buf.write(u"\u16a6\3\2\2\2\u159f\u15a0\7 \2\2\u15a0\u15a1\7\u0100")
        buf.write(u"\2\2\u15a1\u15a2\7F\2\2\u15a2\u15a3\5\u0250\u0129\2\u15a3")
        buf.write(u"\u15a4\7\u017e\2\2\u15a4\u15a5\5\u04bc\u025f\2\u15a5")
        buf.write(u"\u15a6\7\u012a\2\2\u15a6\u15a7\7\u0168\2\2\u15a7\u15a8")
        buf.write(u"\5\u04b8\u025d\2\u15a8\u16a6\3\2\2\2\u15a9\u15aa\7 \2")
        buf.write(u"\2\u15aa\u15ab\7\u0100\2\2\u15ab\u15ac\7\u0094\2\2\u15ac")
        buf.write(u"\u15ad\5\u0250\u0129\2\u15ad\u15ae\7\u017e\2\2\u15ae")
        buf.write(u"\u15af\5\u04bc\u025f\2\u15af\u15b0\7\u012a\2\2\u15b0")
        buf.write(u"\u15b1\7\u0168\2\2\u15b1\u15b2\5\u04b8\u025d\2\u15b2")
        buf.write(u"\u16a6\3\2\2\2\u15b3\u15b4\7 \2\2\u15b4\u15b5\7\u013b")
        buf.write(u"\2\2\u15b5\u15b6\5\u04b8\u025d\2\u15b6\u15b7\7\u012a")
        buf.write(u"\2\2\u15b7\u15b8\7\u0168\2\2\u15b8\u15b9\5\u04b8\u025d")
        buf.write(u"\2\u15b9\u16a6\3\2\2\2\u15ba\u15bb\7 \2\2\u15bb\u15bc")
        buf.write(u"\7\u0144\2\2\u15bc\u15bd\5\u04b8\u025d\2\u15bd\u15be")
        buf.write(u"\7\u012a\2\2\u15be\u15bf\7\u0168\2\2\u15bf\u15c0\5\u04b8")
        buf.write(u"\u025d\2\u15c0\u16a6\3\2\2\2\u15c1\u15c2\7 \2\2\u15c2")
        buf.write(u"\u15c3\7\u015e\2\2\u15c3\u15c4\5\u03f8\u01fd\2\u15c4")
        buf.write(u"\u15c5\7\u012a\2\2\u15c5\u15c6\7\u0168\2\2\u15c6\u15c7")
        buf.write(u"\5\u04b8\u025d\2\u15c7\u16a6\3\2\2\2\u15c8\u15c9\7 \2")
        buf.write(u"\2\u15c9\u15ca\7\u015e\2\2\u15ca\u15cb\7\u00ad\2\2\u15cb")
        buf.write(u"\u15cc\7\u008e\2\2\u15cc\u15cd\5\u03f8\u01fd\2\u15cd")
        buf.write(u"\u15ce\7\u012a\2\2\u15ce\u15cf\7\u0168\2\2\u15cf\u15d0")
        buf.write(u"\5\u04b8\u025d\2\u15d0\u16a6\3\2\2\2\u15d1\u15d2\7 \2")
        buf.write(u"\2\u15d2\u15d3\7\u0141\2\2\u15d3\u15d4\5\u04b4\u025b")
        buf.write(u"\2\u15d4\u15d5\7\u012a\2\2\u15d5\u15d6\7\u0168\2\2\u15d6")
        buf.write(u"\u15d7\5\u04b8\u025d\2\u15d7\u16a6\3\2\2\2\u15d8\u15d9")
        buf.write(u"\7 \2\2\u15d9\u15da\7\u0141\2\2\u15da\u15db\7\u00ad\2")
        buf.write(u"\2\u15db\u15dc\7\u008e\2\2\u15dc\u15dd\5\u04b4\u025b")
        buf.write(u"\2\u15dd\u15de\7\u012a\2\2\u15de\u15df\7\u0168\2\2\u15df")
        buf.write(u"\u15e0\5\u04b8\u025d\2\u15e0\u16a6\3\2\2\2\u15e1\u15e2")
        buf.write(u"\7 \2\2\u15e2\u15e3\7\u018a\2\2\u15e3\u15e4\5\u04b4\u025b")
        buf.write(u"\2\u15e4\u15e5\7\u012a\2\2\u15e5\u15e6\7\u0168\2\2\u15e6")
        buf.write(u"\u15e7\5\u04b8\u025d\2\u15e7\u16a6\3\2\2\2\u15e8\u15e9")
        buf.write(u"\7 \2\2\u15e9\u15ea\7\u018a\2\2\u15ea\u15eb\7\u00ad\2")
        buf.write(u"\2\u15eb\u15ec\7\u008e\2\2\u15ec\u15ed\5\u04b4\u025b")
        buf.write(u"\2\u15ed\u15ee\7\u012a\2\2\u15ee\u15ef\7\u0168\2\2\u15ef")
        buf.write(u"\u15f0\5\u04b8\u025d\2\u15f0\u16a6\3\2\2\2\u15f1\u15f2")
        buf.write(u"\7 \2\2\u15f2\u15f3\7\u00b5\2\2\u15f3\u15f4\5\u04b4\u025b")
        buf.write(u"\2\u15f4\u15f5\7\u012a\2\2\u15f5\u15f6\7\u0168\2\2\u15f6")
        buf.write(u"\u15f7\5\u04b8\u025d\2\u15f7\u16a6\3\2\2\2\u15f8\u15f9")
        buf.write(u"\7 \2\2\u15f9\u15fa\7\u00b5\2\2\u15fa\u15fb\7\u00ad\2")
        buf.write(u"\2\u15fb\u15fc\7\u008e\2\2\u15fc\u15fd\5\u04b4\u025b")
        buf.write(u"\2\u15fd\u15fe\7\u012a\2\2\u15fe\u15ff\7\u0168\2\2\u15ff")
        buf.write(u"\u1600\5\u04b8\u025d\2\u1600\u16a6\3\2\2\2\u1601\u1602")
        buf.write(u"\7 \2\2\u1602\u1603\7\u009b\2\2\u1603\u1604\7\u015e\2")
        buf.write(u"\2\u1604\u1605\5\u03f8\u01fd\2\u1605\u1606\7\u012a\2")
        buf.write(u"\2\u1606\u1607\7\u0168\2\2\u1607\u1608\5\u04b8\u025d")
        buf.write(u"\2\u1608\u16a6\3\2\2\2\u1609\u160a\7 \2\2\u160a\u160b")
        buf.write(u"\7\u009b\2\2\u160b\u160c\7\u015e\2\2\u160c\u160d\7\u00ad")
        buf.write(u"\2\2\u160d\u160e\7\u008e\2\2\u160e\u160f\5\u03f8\u01fd")
        buf.write(u"\2\u160f\u1610\7\u012a\2\2\u1610\u1611\7\u0168\2\2\u1611")
        buf.write(u"\u1612\5\u04b8\u025d\2\u1612\u16a6\3\2\2\2\u1613\u1614")
        buf.write(u"\7 \2\2\u1614\u1615\7\u015e\2\2\u1615\u1616\5\u03f8\u01fd")
        buf.write(u"\2\u1616\u1617\7\u012a\2\2\u1617\u1618\5\u02f8\u017d")
        buf.write(u"\2\u1618\u1619\5\u04b8\u025d\2\u1619\u161a\7\u0168\2")
        buf.write(u"\2\u161a\u161b\5\u04b8\u025d\2\u161b\u16a6\3\2\2\2\u161c")
        buf.write(u"\u161d\7 \2\2\u161d\u161e\7\u015e\2\2\u161e\u161f\7\u00ad")
        buf.write(u"\2\2\u161f\u1620\7\u008e\2\2\u1620\u1621\5\u03f8\u01fd")
        buf.write(u"\2\u1621\u1622\7\u012a\2\2\u1622\u1623\5\u02f8\u017d")
        buf.write(u"\2\u1623\u1624\5\u04b8\u025d\2\u1624\u1625\7\u0168\2")
        buf.write(u"\2\u1625\u1626\5\u04b8\u025d\2\u1626\u16a6\3\2\2\2\u1627")
        buf.write(u"\u1628\7 \2\2\u1628\u1629\7\u015e\2\2\u1629\u162a\5\u03f8")
        buf.write(u"\u01fd\2\u162a\u162b\7\u012a\2\2\u162b\u162c\7T\2\2\u162c")
        buf.write(u"\u162d\5\u04b8\u025d\2\u162d\u162e\7\u0168\2\2\u162e")
        buf.write(u"\u162f\5\u04b8\u025d\2\u162f\u16a6\3\2\2\2\u1630\u1631")
        buf.write(u"\7 \2\2\u1631\u1632\7\u009b\2\2\u1632\u1633\7\u015e\2")
        buf.write(u"\2\u1633\u1634\5\u03f8\u01fd\2\u1634\u1635\7\u012a\2")
        buf.write(u"\2\u1635\u1636\5\u02f8\u017d\2\u1636\u1637\5\u04b8\u025d")
        buf.write(u"\2\u1637\u1638\7\u0168\2\2\u1638\u1639\5\u04b8\u025d")
        buf.write(u"\2\u1639\u16a6\3\2\2\2\u163a\u163b\7 \2\2\u163b\u163c")
        buf.write(u"\7\u009b\2\2\u163c\u163d\7\u015e\2\2\u163d\u163e\7\u00ad")
        buf.write(u"\2\2\u163e\u163f\7\u008e\2\2\u163f\u1640\5\u03f8\u01fd")
        buf.write(u"\2\u1640\u1641\7\u012a\2\2\u1641\u1642\5\u02f8\u017d")
        buf.write(u"\2\u1642\u1643\5\u04b8\u025d\2\u1643\u1644\7\u0168\2")
        buf.write(u"\2\u1644\u1645\5\u04b8\u025d\2\u1645\u16a6\3\2\2\2\u1646")
        buf.write(u"\u1647\7 \2\2\u1647\u1648\7\u016c\2\2\u1648\u1649\5\u04b8")
        buf.write(u"\u025d\2\u1649\u164a\7\u00fe\2\2\u164a\u164b\5\u04b4")
        buf.write(u"\u025b\2\u164b\u164c\7\u012a\2\2\u164c\u164d\7\u0168")
        buf.write(u"\2\2\u164d\u164e\5\u04b8\u025d\2\u164e\u16a6\3\2\2\2")
        buf.write(u"\u164f\u1650\7 \2\2\u1650\u1651\7\u0135\2\2\u1651\u1652")
        buf.write(u"\5\u04cc\u0267\2\u1652\u1653\7\u012a\2\2\u1653\u1654")
        buf.write(u"\7\u0168\2\2\u1654\u1655\5\u04cc\u0267\2\u1655\u16a6")
        buf.write(u"\3\2\2\2\u1656\u1657\7 \2\2\u1657\u1658\7\u017d\2\2\u1658")
        buf.write(u"\u1659\5\u04cc\u0267\2\u1659\u165a\7\u012a\2\2\u165a")
        buf.write(u"\u165b\7\u0168\2\2\u165b\u165c\5\u04cc\u0267\2\u165c")
        buf.write(u"\u16a6\3\2\2\2\u165d\u165e\7 \2\2\u165e\u165f\7\u0160")
        buf.write(u"\2\2\u165f\u1660\5\u04b8\u025d\2\u1660\u1661\7\u012a")
        buf.write(u"\2\2\u1661\u1662\7\u0168\2\2\u1662\u1663\5\u04b8\u025d")
        buf.write(u"\2\u1663\u16a6\3\2\2\2\u1664\u1665\7 \2\2\u1665\u1666")
        buf.write(u"\7\u0160\2\2\u1666\u1667\5\u04b8\u025d\2\u1667\u1668")
        buf.write(u"\7\u0147\2\2\u1668\u1669\5\u0108\u0085\2\u1669\u16a6")
        buf.write(u"\3\2\2\2\u166a\u166b\7 \2\2\u166b\u166c\7\u0160\2\2\u166c")
        buf.write(u"\u166d\5\u04b8\u025d\2\u166d\u166e\7\u012e\2\2\u166e")
        buf.write(u"\u166f\5\u0108\u0085\2\u166f\u16a6\3\2\2\2\u1670\u1671")
        buf.write(u"\7 \2\2\u1671\u1672\7\u0164\2\2\u1672\u1673\7\u013d\2")
        buf.write(u"\2\u1673\u1674\7\u010c\2\2\u1674\u1675\5\u0250\u0129")
        buf.write(u"\2\u1675\u1676\7\u012a\2\2\u1676\u1677\7\u0168\2\2\u1677")
        buf.write(u"\u1678\5\u04b8\u025d\2\u1678\u16a6\3\2\2\2\u1679\u167a")
        buf.write(u"\7 \2\2\u167a\u167b\7\u0164\2\2\u167b\u167c\7\u013d\2")
        buf.write(u"\2\u167c\u167d\7x\2\2\u167d\u167e\5\u0250\u0129\2\u167e")
        buf.write(u"\u167f\7\u012a\2\2\u167f\u1680\7\u0168\2\2\u1680\u1681")
        buf.write(u"\5\u04b8\u025d\2\u1681\u16a6\3\2\2\2\u1682\u1683\7 \2")
        buf.write(u"\2\u1683\u1684\7\u0164\2\2\u1684\u1685\7\u013d\2\2\u1685")
        buf.write(u"\u1686\7\u0162\2\2\u1686\u1687\5\u0250\u0129\2\u1687")
        buf.write(u"\u1688\7\u012a\2\2\u1688\u1689\7\u0168\2\2\u1689\u168a")
        buf.write(u"\5\u04b8\u025d\2\u168a\u16a6\3\2\2\2\u168b\u168c\7 \2")
        buf.write(u"\2\u168c\u168d\7\u0164\2\2\u168d\u168e\7\u013d\2\2\u168e")
        buf.write(u"\u168f\7R\2\2\u168f\u1690\5\u0250\u0129\2\u1690\u1691")
        buf.write(u"\7\u012a\2\2\u1691\u1692\7\u0168\2\2\u1692\u1693\5\u04b8")
        buf.write(u"\u025d\2\u1693\u16a6\3\2\2\2\u1694\u1695\7 \2\2\u1695")
        buf.write(u"\u1696\7\u0171\2\2\u1696\u1697\5\u0250\u0129\2\u1697")
        buf.write(u"\u1698\7\u012a\2\2\u1698\u1699\7\u0168\2\2\u1699\u169a")
        buf.write(u"\5\u04b8\u025d\2\u169a\u16a6\3\2\2\2\u169b\u169c\7 \2")
        buf.write(u"\2\u169c\u169d\7\u0171\2\2\u169d\u169e\5\u0250\u0129")
        buf.write(u"\2\u169e\u169f\7\u012a\2\2\u169f\u16a0\7-\2\2\u16a0\u16a1")
        buf.write(u"\5\u04b8\u025d\2\u16a1\u16a2\7\u0168\2\2\u16a2\u16a3")
        buf.write(u"\5\u04b8\u025d\2\u16a3\u16a4\5\u0102\u0082\2\u16a4\u16a6")
        buf.write(u"\3\2\2\2\u16a5\u1553\3\2\2\2\u16a5\u155b\3\2\2\2\u16a5")
        buf.write(u"\u1562\3\2\2\2\u16a5\u1569\3\2\2\2\u16a5\u1570\3\2\2")
        buf.write(u"\2\u16a5\u1577\3\2\2\2\u16a5\u1580\3\2\2\2\u16a5\u1589")
        buf.write(u"\3\2\2\2\u16a5\u1590\3\2\2\2\u16a5\u1597\3\2\2\2\u16a5")
        buf.write(u"\u159f\3\2\2\2\u16a5\u15a9\3\2\2\2\u16a5\u15b3\3\2\2")
        buf.write(u"\2\u16a5\u15ba\3\2\2\2\u16a5\u15c1\3\2\2\2\u16a5\u15c8")
        buf.write(u"\3\2\2\2\u16a5\u15d1\3\2\2\2\u16a5\u15d8\3\2\2\2\u16a5")
        buf.write(u"\u15e1\3\2\2\2\u16a5\u15e8\3\2\2\2\u16a5\u15f1\3\2\2")
        buf.write(u"\2\u16a5\u15f8\3\2\2\2\u16a5\u1601\3\2\2\2\u16a5\u1609")
        buf.write(u"\3\2\2\2\u16a5\u1613\3\2\2\2\u16a5\u161c\3\2\2\2\u16a5")
        buf.write(u"\u1627\3\2\2\2\u16a5\u1630\3\2\2\2\u16a5\u163a\3\2\2")
        buf.write(u"\2\u16a5\u1646\3\2\2\2\u16a5\u164f\3\2\2\2\u16a5\u1656")
        buf.write(u"\3\2\2\2\u16a5\u165d\3\2\2\2\u16a5\u1664\3\2\2\2\u16a5")
        buf.write(u"\u166a\3\2\2\2\u16a5\u1670\3\2\2\2\u16a5\u1679\3\2\2")
        buf.write(u"\2\u16a5\u1682\3\2\2\2\u16a5\u168b\3\2\2\2\u16a5\u1694")
        buf.write(u"\3\2\2\2\u16a5\u169b\3\2\2\2\u16a6\u02f7\3\2\2\2\u16a7")
        buf.write(u"\u16aa\7L\2\2\u16a8\u16aa\3\2\2\2\u16a9\u16a7\3\2\2\2")
        buf.write(u"\u16a9\u16a8\3\2\2\2\u16aa\u02f9\3\2\2\2\u16ab\u16ac")
        buf.write(u"\7\u0147\2\2\u16ac\u16af\7h\2\2\u16ad\u16af\3\2\2\2\u16ae")
        buf.write(u"\u16ab\3\2\2\2\u16ae\u16ad\3\2\2\2\u16af\u02fb\3\2\2")
        buf.write(u"\2\u16b0\u16b1\7 \2\2\u16b1\u16b2\7\35\2\2\u16b2\u16b3")
        buf.write(u"\5\u04c4\u0263\2\u16b3\u16b4\5\u021e\u0110\2\u16b4\u16b5")
        buf.write(u"\7\u0147\2\2\u16b5\u16b6\7\u013b\2\2\u16b6\u16b7\5\u04b8")
        buf.write(u"\u025d\2\u16b7\u1765\3\2\2\2\u16b8\u16b9\7 \2\2\u16b9")
        buf.write(u"\u16ba\7K\2\2\u16ba\u16bb\5\u0250\u0129\2\u16bb\u16bc")
        buf.write(u"\7\u0147\2\2\u16bc\u16bd\7\u013b\2\2\u16bd\u16be\5\u04b8")
        buf.write(u"\u025d\2\u16be\u1765\3\2\2\2\u16bf\u16c0\7 \2\2\u16c0")
        buf.write(u"\u16c1\7X\2\2\u16c1\u16c2\5\u0250\u0129\2\u16c2\u16c3")
        buf.write(u"\7\u0147\2\2\u16c3\u16c4\7\u013b\2\2\u16c4\u16c5\5\u04b8")
        buf.write(u"\u025d\2\u16c5\u1765\3\2\2\2\u16c6\u16c7\7 \2\2\u16c7")
        buf.write(u"\u16c8\7~\2\2\u16c8\u16c9\5\u0250\u0129\2\u16c9\u16ca")
        buf.write(u"\7\u0147\2\2\u16ca\u16cb\7\u013b\2\2\u16cb\u16cc\5\u04b8")
        buf.write(u"\u025d\2\u16cc\u1765\3\2\2\2\u16cd\u16ce\7 \2\2\u16ce")
        buf.write(u"\u16cf\7\u0090\2\2\u16cf\u16d0\5\u0250\u0129\2\u16d0")
        buf.write(u"\u16d1\7\u0147\2\2\u16d1\u16d2\7\u013b\2\2\u16d2\u16d3")
        buf.write(u"\5\u04b8\u025d\2\u16d3\u1765\3\2\2\2\u16d4\u16d5\7 \2")
        buf.write(u"\2\u16d5\u16d6\7\u00a0\2\2\u16d6\u16d7\5\u0282\u0142")
        buf.write(u"\2\u16d7\u16d8\7\u0147\2\2\u16d8\u16d9\7\u013b\2\2\u16d9")
        buf.write(u"\u16da\5\u04b8\u025d\2\u16da\u1765\3\2\2\2\u16db\u16dc")
        buf.write(u"\7 \2\2\u16dc\u16dd\7\u0100\2\2\u16dd\u16de\5\u02e0\u0171")
        buf.write(u"\2\u16de\u16df\5\u02de\u0170\2\u16df\u16e0\7\u0147\2")
        buf.write(u"\2\u16e0\u16e1\7\u013b\2\2\u16e1\u16e2\5\u04b8\u025d")
        buf.write(u"\2\u16e2\u1765\3\2\2\2\u16e3\u16e4\7 \2\2\u16e4\u16e5")
        buf.write(u"\7\u0100\2\2\u16e5\u16e6\7F\2\2\u16e6\u16e7\5\u0250\u0129")
        buf.write(u"\2\u16e7\u16e8\7\u017e\2\2\u16e8\u16e9\5\u04bc\u025f")
        buf.write(u"\2\u16e9\u16ea\7\u0147\2\2\u16ea\u16eb\7\u013b\2\2\u16eb")
        buf.write(u"\u16ec\5\u04b8\u025d\2\u16ec\u1765\3\2\2\2\u16ed\u16ee")
        buf.write(u"\7 \2\2\u16ee\u16ef\7\u0100\2\2\u16ef\u16f0\7\u0094\2")
        buf.write(u"\2\u16f0\u16f1\5\u0250\u0129\2\u16f1\u16f2\7\u017e\2")
        buf.write(u"\2\u16f2\u16f3\5\u04bc\u025f\2\u16f3\u16f4\7\u0147\2")
        buf.write(u"\2\u16f4\u16f5\7\u013b\2\2\u16f5\u16f6\5\u04b8\u025d")
        buf.write(u"\2\u16f6\u1765\3\2\2\2\u16f7\u16f8\7 \2\2\u16f8\u16f9")
        buf.write(u"\7\u015e\2\2\u16f9\u16fa\5\u03f8\u01fd\2\u16fa\u16fb")
        buf.write(u"\7\u0147\2\2\u16fb\u16fc\7\u013b\2\2\u16fc\u16fd\5\u04b8")
        buf.write(u"\u025d\2\u16fd\u1765\3\2\2\2\u16fe\u16ff\7 \2\2\u16ff")
        buf.write(u"\u1700\7\u015e\2\2\u1700\u1701\7\u00ad\2\2\u1701\u1702")
        buf.write(u"\7\u008e\2\2\u1702\u1703\5\u03f8\u01fd\2\u1703\u1704")
        buf.write(u"\7\u0147\2\2\u1704\u1705\7\u013b\2\2\u1705\u1706\5\u04b8")
        buf.write(u"\u025d\2\u1706\u1765\3\2\2\2\u1707\u1708\7 \2\2\u1708")
        buf.write(u"\u1709\7\u0164\2\2\u1709\u170a\7\u013d\2\2\u170a\u170b")
        buf.write(u"\7\u010c\2\2\u170b\u170c\5\u0250\u0129\2\u170c\u170d")
        buf.write(u"\7\u0147\2\2\u170d\u170e\7\u013b\2\2\u170e\u170f\5\u04b8")
        buf.write(u"\u025d\2\u170f\u1765\3\2\2\2\u1710\u1711\7 \2\2\u1711")
        buf.write(u"\u1712\7\u0164\2\2\u1712\u1713\7\u013d\2\2\u1713\u1714")
        buf.write(u"\7x\2\2\u1714\u1715\5\u0250\u0129\2\u1715\u1716\7\u0147")
        buf.write(u"\2\2\u1716\u1717\7\u013b\2\2\u1717\u1718\5\u04b8\u025d")
        buf.write(u"\2\u1718\u1765\3\2\2\2\u1719\u171a\7 \2\2\u171a\u171b")
        buf.write(u"\7\u0164\2\2\u171b\u171c\7\u013d\2\2\u171c\u171d\7\u0162")
        buf.write(u"\2\2\u171d\u171e\5\u0250\u0129\2\u171e\u171f\7\u0147")
        buf.write(u"\2\2\u171f\u1720\7\u013b\2\2\u1720\u1721\5\u04b8\u025d")
        buf.write(u"\2\u1721\u1765\3\2\2\2\u1722\u1723\7 \2\2\u1723\u1724")
        buf.write(u"\7\u0164\2\2\u1724\u1725\7\u013d\2\2\u1725\u1726\7R\2")
        buf.write(u"\2\u1726\u1727\5\u0250\u0129\2\u1727\u1728\7\u0147\2")
        buf.write(u"\2\u1728\u1729\7\u013b\2\2\u1729\u172a\5\u04b8\u025d")
        buf.write(u"\2\u172a\u1765\3\2\2\2\u172b\u172c\7 \2\2\u172c\u172d")
        buf.write(u"\7\u0141\2\2\u172d\u172e\5\u04b4\u025b\2\u172e\u172f")
        buf.write(u"\7\u0147\2\2\u172f\u1730\7\u013b\2\2\u1730\u1731\5\u04b8")
        buf.write(u"\u025d\2\u1731\u1765\3\2\2\2\u1732\u1733\7 \2\2\u1733")
        buf.write(u"\u1734\7\u0141\2\2\u1734\u1735\7\u00ad\2\2\u1735\u1736")
        buf.write(u"\7\u008e\2\2\u1736\u1737\5\u04b4\u025b\2\u1737\u1738")
        buf.write(u"\7\u0147\2\2\u1738\u1739\7\u013b\2\2\u1739\u173a\5\u04b8")
        buf.write(u"\u025d\2\u173a\u1765\3\2\2\2\u173b\u173c\7 \2\2\u173c")
        buf.write(u"\u173d\7\u018a\2\2\u173d\u173e\5\u04b4\u025b\2\u173e")
        buf.write(u"\u173f\7\u0147\2\2\u173f\u1740\7\u013b\2\2\u1740\u1741")
        buf.write(u"\5\u04b8\u025d\2\u1741\u1765\3\2\2\2\u1742\u1743\7 \2")
        buf.write(u"\2\u1743\u1744\7\u018a\2\2\u1744\u1745\7\u00ad\2\2\u1745")
        buf.write(u"\u1746\7\u008e\2\2\u1746\u1747\5\u04b4\u025b\2\u1747")
        buf.write(u"\u1748\7\u0147\2\2\u1748\u1749\7\u013b\2\2\u1749\u174a")
        buf.write(u"\5\u04b8\u025d\2\u174a\u1765\3\2\2\2\u174b\u174c\7 \2")
        buf.write(u"\2\u174c\u174d\7\u009b\2\2\u174d\u174e\7\u015e\2\2\u174e")
        buf.write(u"\u174f\5\u03f8\u01fd\2\u174f\u1750\7\u0147\2\2\u1750")
        buf.write(u"\u1751\7\u013b\2\2\u1751\u1752\5\u04b8\u025d\2\u1752")
        buf.write(u"\u1765\3\2\2\2\u1753\u1754\7 \2\2\u1754\u1755\7\u009b")
        buf.write(u"\2\2\u1755\u1756\7\u015e\2\2\u1756\u1757\7\u00ad\2\2")
        buf.write(u"\u1757\u1758\7\u008e\2\2\u1758\u1759\5\u03f8\u01fd\2")
        buf.write(u"\u1759\u175a\7\u0147\2\2\u175a\u175b\7\u013b\2\2\u175b")
        buf.write(u"\u175c\5\u04b8\u025d\2\u175c\u1765\3\2\2\2\u175d\u175e")
        buf.write(u"\7 \2\2\u175e\u175f\7\u0171\2\2\u175f\u1760\5\u0250\u0129")
        buf.write(u"\2\u1760\u1761\7\u0147\2\2\u1761\u1762\7\u013b\2\2\u1762")
        buf.write(u"\u1763\5\u04b8\u025d\2\u1763\u1765\3\2\2\2\u1764\u16b0")
        buf.write(u"\3\2\2\2\u1764\u16b8\3\2\2\2\u1764\u16bf\3\2\2\2\u1764")
        buf.write(u"\u16c6\3\2\2\2\u1764\u16cd\3\2\2\2\u1764\u16d4\3\2\2")
        buf.write(u"\2\u1764\u16db\3\2\2\2\u1764\u16e3\3\2\2\2\u1764\u16ed")
        buf.write(u"\3\2\2\2\u1764\u16f7\3\2\2\2\u1764\u16fe\3\2\2\2\u1764")
        buf.write(u"\u1707\3\2\2\2\u1764\u1710\3\2\2\2\u1764\u1719\3\2\2")
        buf.write(u"\2\u1764\u1722\3\2\2\2\u1764\u172b\3\2\2\2\u1764\u1732")
        buf.write(u"\3\2\2\2\u1764\u173b\3\2\2\2\u1764\u1742\3\2\2\2\u1764")
        buf.write(u"\u174b\3\2\2\2\u1764\u1753\3\2\2\2\u1764\u175d\3\2\2")
        buf.write(u"\2\u1765\u02fd\3\2\2\2\u1766\u1767\7 \2\2\u1767\u1768")
        buf.write(u"\7\35\2\2\u1768\u1769\5\u04c4\u0263\2\u1769\u176a\5\u021e")
        buf.write(u"\u0110\2\u176a\u176b\7\u010b\2\2\u176b\u176c\7\u0168")
        buf.write(u"\2\2\u176c\u176d\5\u04cc\u0267\2\u176d\u17f5\3\2\2\2")
        buf.write(u"\u176e\u176f\7 \2\2\u176f\u1770\7K\2\2\u1770\u1771\5")
        buf.write(u"\u0250\u0129\2\u1771\u1772\7\u010b\2\2\u1772\u1773\7")
        buf.write(u"\u0168\2\2\u1773\u1774\5\u04cc\u0267\2\u1774\u17f5\3")
        buf.write(u"\2\2\2\u1775\u1776\7 \2\2\u1776\u1777\7X\2\2\u1777\u1778")
        buf.write(u"\5\u0250\u0129\2\u1778\u1779\7\u010b\2\2\u1779\u177a")
        buf.write(u"\7\u0168\2\2\u177a\u177b\5\u04cc\u0267\2\u177b\u17f5")
        buf.write(u"\3\2\2\2\u177c\u177d\7 \2\2\u177d\u177e\7i\2\2\u177e")
        buf.write(u"\u177f\5\u04ba\u025e\2\u177f\u1780\7\u010b\2\2\u1780")
        buf.write(u"\u1781\7\u0168\2\2\u1781\u1782\5\u04cc\u0267\2\u1782")
        buf.write(u"\u17f5\3\2\2\2\u1783\u1784\7 \2\2\u1784\u1785\7~\2\2")
        buf.write(u"\u1785\u1786\5\u0250\u0129\2\u1786\u1787\7\u010b\2\2")
        buf.write(u"\u1787\u1788\7\u0168\2\2\u1788\u1789\5\u04cc\u0267\2")
        buf.write(u"\u1789\u17f5\3\2\2\2\u178a\u178b\7 \2\2\u178b\u178c\7")
        buf.write(u"\u00a0\2\2\u178c\u178d\5\u0282\u0142\2\u178d\u178e\7")
        buf.write(u"\u010b\2\2\u178e\u178f\7\u0168\2\2\u178f\u1790\5\u04cc")
        buf.write(u"\u0267\2\u1790\u17f5\3\2\2\2\u1791\u1792\7 \2\2\u1792")
        buf.write(u"\u1793\5\u01a4\u00d3\2\u1793\u1794\7\u00cd\2\2\u1794")
        buf.write(u"\u1795\5\u04b8\u025d\2\u1795\u1796\7\u010b\2\2\u1796")
        buf.write(u"\u1797\7\u0168\2\2\u1797\u1798\5\u04cc\u0267\2\u1798")
        buf.write(u"\u17f5\3\2\2\2\u1799\u179a\7 \2\2\u179a\u179b\7\u00ce")
        buf.write(u"\2\2\u179b\u179c\7\u00f9\2\2\u179c\u179d\5\u0192\u00ca")
        buf.write(u"\2\u179d\u179e\7\u010b\2\2\u179e\u179f\7\u0168\2\2\u179f")
        buf.write(u"\u17a0\5\u04cc\u0267\2\u17a0\u17f5\3\2\2\2\u17a1\u17a2")
        buf.write(u"\7 \2\2\u17a2\u17a3\7\u0100\2\2\u17a3\u17a4\5\u02e0\u0171")
        buf.write(u"\2\u17a4\u17a5\5\u02de\u0170\2\u17a5\u17a6\7\u010b\2")
        buf.write(u"\2\u17a6\u17a7\7\u0168\2\2\u17a7\u17a8\5\u04cc\u0267")
        buf.write(u"\2\u17a8\u17f5\3\2\2\2\u17a9\u17aa\7 \2\2\u17aa\u17ab")
        buf.write(u"\7\u0100\2\2\u17ab\u17ac\7F\2\2\u17ac\u17ad\5\u0250\u0129")
        buf.write(u"\2\u17ad\u17ae\7\u017e\2\2\u17ae\u17af\5\u04bc\u025f")
        buf.write(u"\2\u17af\u17b0\7\u010b\2\2\u17b0\u17b1\7\u0168\2\2\u17b1")
        buf.write(u"\u17b2\5\u04cc\u0267\2\u17b2\u17f5\3\2\2\2\u17b3\u17b4")
        buf.write(u"\7 \2\2\u17b4\u17b5\7\u0100\2\2\u17b5\u17b6\7\u0094\2")
        buf.write(u"\2\u17b6\u17b7\5\u0250\u0129\2\u17b7\u17b8\7\u017e\2")
        buf.write(u"\2\u17b8\u17b9\5\u04bc\u025f\2\u17b9\u17ba\7\u010b\2")
        buf.write(u"\2\u17ba\u17bb\7\u0168\2\2\u17bb\u17bc\5\u04cc\u0267")
        buf.write(u"\2\u17bc\u17f5\3\2\2\2\u17bd\u17be\7 \2\2\u17be\u17bf")
        buf.write(u"\7\u013b\2\2\u17bf\u17c0\5\u04b8\u025d\2\u17c0\u17c1")
        buf.write(u"\7\u010b\2\2\u17c1\u17c2\7\u0168\2\2\u17c2\u17c3\5\u04cc")
        buf.write(u"\u0267\2\u17c3\u17f5\3\2\2\2\u17c4\u17c5\7 \2\2\u17c5")
        buf.write(u"\u17c6\7\u0171\2\2\u17c6\u17c7\5\u0250\u0129\2\u17c7")
        buf.write(u"\u17c8\7\u010b\2\2\u17c8\u17c9\7\u0168\2\2\u17c9\u17ca")
        buf.write(u"\5\u04cc\u0267\2\u17ca\u17f5\3\2\2\2\u17cb\u17cc\7 \2")
        buf.write(u"\2\u17cc\u17cd\7\u0160\2\2\u17cd\u17ce\5\u04b8\u025d")
        buf.write(u"\2\u17ce\u17cf\7\u010b\2\2\u17cf\u17d0\7\u0168\2\2\u17d0")
        buf.write(u"\u17d1\5\u04cc\u0267\2\u17d1\u17f5\3\2\2\2\u17d2\u17d3")
        buf.write(u"\7 \2\2\u17d3\u17d4\7\u0164\2\2\u17d4\u17d5\7\u013d\2")
        buf.write(u"\2\u17d5\u17d6\7x\2\2\u17d6\u17d7\5\u0250\u0129\2\u17d7")
        buf.write(u"\u17d8\7\u010b\2\2\u17d8\u17d9\7\u0168\2\2\u17d9\u17da")
        buf.write(u"\5\u04cc\u0267\2\u17da\u17f5\3\2\2\2\u17db\u17dc\7 \2")
        buf.write(u"\2\u17dc\u17dd\7\u0164\2\2\u17dd\u17de\7\u013d\2\2\u17de")
        buf.write(u"\u17df\7R\2\2\u17df\u17e0\5\u0250\u0129\2\u17e0\u17e1")
        buf.write(u"\7\u010b\2\2\u17e1\u17e2\7\u0168\2\2\u17e2\u17e3\5\u04cc")
        buf.write(u"\u0267\2\u17e3\u17f5\3\2\2\2\u17e4\u17e5\7 \2\2\u17e5")
        buf.write(u"\u17e6\7\u009b\2\2\u17e6\u17e7\7h\2\2\u17e7\u17e8\7\u0193")
        buf.write(u"\2\2\u17e8\u17e9\5\u04b8\u025d\2\u17e9\u17ea\7\u010b")
        buf.write(u"\2\2\u17ea\u17eb\7\u0168\2\2\u17eb\u17ec\5\u04cc\u0267")
        buf.write(u"\2\u17ec\u17f5\3\2\2\2\u17ed\u17ee\7 \2\2\u17ee\u17ef")
        buf.write(u"\7\u0144\2\2\u17ef\u17f0\5\u04b8\u025d\2\u17f0\u17f1")
        buf.write(u"\7\u010b\2\2\u17f1\u17f2\7\u0168\2\2\u17f2\u17f3\5\u04cc")
        buf.write(u"\u0267\2\u17f3\u17f5\3\2\2\2\u17f4\u1766\3\2\2\2\u17f4")
        buf.write(u"\u176e\3\2\2\2\u17f4\u1775\3\2\2\2\u17f4\u177c\3\2\2")
        buf.write(u"\2\u17f4\u1783\3\2\2\2\u17f4\u178a\3\2\2\2\u17f4\u1791")
        buf.write(u"\3\2\2\2\u17f4\u1799\3\2\2\2\u17f4\u17a1\3\2\2\2\u17f4")
        buf.write(u"\u17a9\3\2\2\2\u17f4\u17b3\3\2\2\2\u17f4\u17bd\3\2\2")
        buf.write(u"\2\u17f4\u17c4\3\2\2\2\u17f4\u17cb\3\2\2\2\u17f4\u17d2")
        buf.write(u"\3\2\2\2\u17f4\u17db\3\2\2\2\u17f4\u17e4\3\2\2\2\u17f4")
        buf.write(u"\u17ed\3\2\2\2\u17f5\u02ff\3\2\2\2\u17f6\u17f7\7[\2\2")
        buf.write(u"\u17f7\u17f8\5\u02ae\u0158\2\u17f8\u17f9\7\u0139\2\2")
        buf.write(u"\u17f9\u17fa\5\u04b8\u025d\2\u17fa\u17fb\7\'\2\2\u17fb")
        buf.write(u"\u17fc\7\u00fe\2\2\u17fc\u17fd\5\u030a\u0186\2\u17fd")
        buf.write(u"\u17fe\7\u0168\2\2\u17fe\u17ff\5\u04b4\u025b\2\u17ff")
        buf.write(u"\u1800\5\u0400\u0201\2\u1800\u1801\7|\2\2\u1801\u1802")
        buf.write(u"\5\u030c\u0187\2\u1802\u1803\5\u0302\u0182\2\u1803\u0301")
        buf.write(u"\3\2\2\2\u1804\u180b\7\u00f1\2\2\u1805\u180b\5\u0306")
        buf.write(u"\u0184\2\u1806\u1807\7\r\2\2\u1807\u1808\5\u0304\u0183")
        buf.write(u"\2\u1808\u1809\7\7\2\2\u1809\u180b\3\2\2\2\u180a\u1804")
        buf.write(u"\3\2\2\2\u180a\u1805\3\2\2\2\u180a\u1806\3\2\2\2\u180b")
        buf.write(u"\u0303\3\2\2\2\u180c\u180d\b\u0183\1\2\u180d\u180e\5")
        buf.write(u"\u0308\u0185\2\u180e\u1814\3\2\2\2\u180f\u1810\f\4\2")
        buf.write(u"\2\u1810\u1811\7\21\2\2\u1811\u1813\5\u0308\u0185\2\u1812")
        buf.write(u"\u180f\3\2\2\2\u1813\u1816\3\2\2\2\u1814\u1812\3\2\2")
        buf.write(u"\2\u1814\u1815\3\2\2\2\u1815\u0305\3\2\2\2\u1816\u1814")
        buf.write(u"\3\2\2\2\u1817\u181d\5\u03a0\u01d1\2\u1818\u181d\5\u0374")
        buf.write(u"\u01bb\2\u1819\u181d\5\u038a\u01c6\2\u181a\u181d\5\u037e")
        buf.write(u"\u01c0\2\u181b\u181d\5\u0310\u0189\2\u181c\u1817\3\2")
        buf.write(u"\2\2\u181c\u1818\3\2\2\2\u181c\u1819\3\2\2\2\u181c\u181a")
        buf.write(u"\3\2\2\2\u181c\u181b\3\2\2\2\u181d\u0307\3\2\2\2\u181e")
        buf.write(u"\u1821\5\u0306\u0184\2\u181f\u1821\3\2\2\2\u1820\u181e")
        buf.write(u"\3\2\2\2\u1820\u181f\3\2\2\2\u1821\u0309\3\2\2\2\u1822")
        buf.write(u"\u1823\t\22\2\2\u1823\u030b\3\2\2\2\u1824\u1828\7\u00c0")
        buf.write(u"\2\2\u1825\u1828\7\37\2\2\u1826\u1828\3\2\2\2\u1827\u1824")
        buf.write(u"\3\2\2\2\u1827\u1825\3\2\2\2\u1827\u1826\3\2\2\2\u1828")
        buf.write(u"\u030d\3\2\2\2\u1829\u182a\7\u0080\2\2\u182a\u182b\7")
        buf.write(u"\u0139\2\2\u182b\u182c\5\u04b8\u025d\2\u182c\u182d\7")
        buf.write(u"\u00fe\2\2\u182d\u182e\5\u0250\u0129\2\u182e\u182f\5")
        buf.write(u"\u0102\u0082\2\u182f\u183a\3\2\2\2\u1830\u1831\7\u0080")
        buf.write(u"\2\2\u1831\u1832\7\u0139\2\2\u1832\u1833\7\u00ad\2\2")
        buf.write(u"\u1833\u1834\7\u008e\2\2\u1834\u1835\5\u04b8\u025d\2")
        buf.write(u"\u1835\u1836\7\u00fe\2\2\u1836\u1837\5\u0250\u0129\2")
        buf.write(u"\u1837\u1838\5\u0102\u0082\2\u1838\u183a\3\2\2\2\u1839")
        buf.write(u"\u1829\3\2\2\2\u1839\u1830\3\2\2\2\u183a\u030f\3\2\2")
        buf.write(u"\2\u183b\u183c\7\u00f2\2\2\u183c\u183d\5\u04d0\u0269")
        buf.write(u"\2\u183d\u183e\5\u0312\u018a\2\u183e\u0311\3\2\2\2\u183f")
        buf.write(u"\u1840\7\b\2\2\u1840\u1843\5\u04ca\u0266\2\u1841\u1843")
        buf.write(u"\3\2\2\2\u1842\u183f\3\2\2\2\u1842\u1841\3\2\2\2\u1843")
        buf.write(u"\u0313\3\2\2\2\u1844\u1845\7\u00d9\2\2\u1845\u1846\5")
        buf.write(u"\u04d0\u0269\2\u1846\u0315\3\2\2\2\u1847\u1848\7\u0179")
        buf.write(u"\2\2\u1848\u184c\5\u04d0\u0269\2\u1849\u184a\7\u0179")
        buf.write(u"\2\2\u184a\u184c\7\13\2\2\u184b\u1847\3\2\2\2\u184b\u1849")
        buf.write(u"\3\2\2\2\u184c\u0317\3\2\2\2\u184d\u184e\7\26\2\2\u184e")
        buf.write(u"\u1878\5\u031a\u018e\2\u184f\u1850\7\61\2\2\u1850\u1851")
        buf.write(u"\5\u031a\u018e\2\u1851\u1852\5\u0320\u0191\2\u1852\u1878")
        buf.write(u"\3\2\2\2\u1853\u1854\7\u0152\2\2\u1854\u1855\7\u016a")
        buf.write(u"\2\2\u1855\u1878\5\u0320\u0191\2\u1856\u1857\7O\2\2\u1857")
        buf.write(u"\u1878\5\u031a\u018e\2\u1858\u1859\7\u0086\2\2\u1859")
        buf.write(u"\u1878\5\u031a\u018e\2\u185a\u185b\7\u0136\2\2\u185b")
        buf.write(u"\u1878\5\u031a\u018e\2\u185c\u185d\7\u013a\2\2\u185d")
        buf.write(u"\u1878\5\u04d0\u0269\2\u185e\u185f\7\u0129\2\2\u185f")
        buf.write(u"\u1860\7\u013a\2\2\u1860\u1878\5\u04d0\u0269\2\u1861")
        buf.write(u"\u1862\7\u0129\2\2\u1862\u1878\5\u04d0\u0269\2\u1863")
        buf.write(u"\u1864\7\u0136\2\2\u1864\u1865\5\u031a\u018e\2\u1865")
        buf.write(u"\u1866\7\u0168\2\2\u1866\u1867\7\u013a\2\2\u1867\u1868")
        buf.write(u"\5\u04d0\u0269\2\u1868\u1878\3\2\2\2\u1869\u186a\7\u0136")
        buf.write(u"\2\2\u186a\u186b\5\u031a\u018e\2\u186b\u186c\7\u0168")
        buf.write(u"\2\2\u186c\u186d\5\u04d0\u0269\2\u186d\u1878\3\2\2\2")
        buf.write(u"\u186e\u186f\7\u0116\2\2\u186f\u1870\7\u016a\2\2\u1870")
        buf.write(u"\u1878\5\u04ca\u0266\2\u1871\u1872\7O\2\2\u1872\u1873")
        buf.write(u"\7\u0117\2\2\u1873\u1878\5\u04ca\u0266\2\u1874\u1875")
        buf.write(u"\7\u0136\2\2\u1875\u1876\7\u0117\2\2\u1876\u1878\5\u04ca")
        buf.write(u"\u0266\2\u1877\u184d\3\2\2\2\u1877\u184f\3\2\2\2\u1877")
        buf.write(u"\u1853\3\2\2\2\u1877\u1856\3\2\2\2\u1877\u1858\3\2\2")
        buf.write(u"\2\u1877\u185a\3\2\2\2\u1877\u185c\3\2\2\2\u1877\u185e")
        buf.write(u"\3\2\2\2\u1877\u1861\3\2\2\2\u1877\u1863\3\2\2\2\u1877")
        buf.write(u"\u1869\3\2\2\2\u1877\u186e\3\2\2\2\u1877\u1871\3\2\2")
        buf.write(u"\2\u1877\u1874\3\2\2\2\u1878\u0319\3\2\2\2\u1879\u187d")
        buf.write(u"\7\u0192\2\2\u187a\u187d\7\u016a\2\2\u187b\u187d\3\2")
        buf.write(u"\2\2\u187c\u1879\3\2\2\2\u187c\u187a\3\2\2\2\u187c\u187b")
        buf.write(u"\3\2\2\2\u187d\u031b\3\2\2\2\u187e\u187f\7\u00c9\2\2")
        buf.write(u"\u187f\u1880\7\u00d6\2\2\u1880\u1889\5\u00dep\2\u1881")
        buf.write(u"\u1882\7\u0120\2\2\u1882\u1889\7\u00ff\2\2\u1883\u1884")
        buf.write(u"\7\u0120\2\2\u1884\u1889\7\u0194\2\2\u1885\u1889\7q\2")
        buf.write(u"\2\u1886\u1887\7\u00f0\2\2\u1887\u1889\7q\2\2\u1888\u187e")
        buf.write(u"\3\2\2\2\u1888\u1881\3\2\2\2\u1888\u1883\3\2\2\2\u1888")
        buf.write(u"\u1885\3\2\2\2\u1888\u1886\3\2\2\2\u1889\u031d\3\2\2")
        buf.write(u"\2\u188a\u188b\b\u0190\1\2\u188b\u188c\5\u031c\u018f")
        buf.write(u"\2\u188c\u1894\3\2\2\2\u188d\u188e\f\4\2\2\u188e\u188f")
        buf.write(u"\7\b\2\2\u188f\u1893\5\u031c\u018f\2\u1890\u1891\f\3")
        buf.write(u"\2\2\u1891\u1893\5\u031c\u018f\2\u1892\u188d\3\2\2\2")
        buf.write(u"\u1892\u1890\3\2\2\2\u1893\u1896\3\2\2\2\u1894\u1892")
        buf.write(u"\3\2\2\2\u1894\u1895\3\2\2\2\u1895\u031f\3\2\2\2\u1896")
        buf.write(u"\u1894\3\2\2\2\u1897\u189a\5\u031e\u0190\2\u1898\u189a")
        buf.write(u"\3\2\2\2\u1899\u1897\3\2\2\2\u1899\u1898\3\2\2\2\u189a")
        buf.write(u"\u0321\3\2\2\2\u189b\u189c\7[\2\2\u189c\u189d\5\u0138")
        buf.write(u"\u009d\2\u189d\u189e\7\u018a\2\2\u189e\u189f\5\u04b4")
        buf.write(u"\u025b\2\u189f\u18a0\5\u015e\u00b0\2\u18a0\u18a1\5\u010a")
        buf.write(u"\u0086\2\u18a1\u18a2\7\'\2\2\u18a2\u18a3\5\u03a0\u01d1")
        buf.write(u"\2\u18a3\u18a4\5\u0324\u0193\2\u18a4\u18b2\3\2\2\2\u18a5")
        buf.write(u"\u18a6\7[\2\2\u18a6\u18a7\7\u0103\2\2\u18a7\u18a8\7\u012c")
        buf.write(u"\2\2\u18a8\u18a9\5\u0138\u009d\2\u18a9\u18aa\7\u018a")
        buf.write(u"\2\2\u18aa\u18ab\5\u04b4\u025b\2\u18ab\u18ac\5\u015e")
        buf.write(u"\u00b0\2\u18ac\u18ad\5\u010a\u0086\2\u18ad\u18ae\7\'")
        buf.write(u"\2\2\u18ae\u18af\5\u03a0\u01d1\2\u18af\u18b0\5\u0324")
        buf.write(u"\u0193\2\u18b0\u18b2\3\2\2\2\u18b1\u189b\3\2\2\2\u18b1")
        buf.write(u"\u18a5\3\2\2\2\u18b2\u0323\3\2\2\2\u18b3\u18b4\7\u0190")
        buf.write(u"\2\2\u18b4\u18b5\7D\2\2\u18b5\u18c0\7\u0101\2\2\u18b6")
        buf.write(u"\u18b7\7\u0190\2\2\u18b7\u18b8\7<\2\2\u18b8\u18b9\7D")
        buf.write(u"\2\2\u18b9\u18c0\7\u0101\2\2\u18ba\u18bb\7\u0190\2\2")
        buf.write(u"\u18bb\u18bc\7\u00db\2\2\u18bc\u18bd\7D\2\2\u18bd\u18c0")
        buf.write(u"\7\u0101\2\2\u18be\u18c0\3\2\2\2\u18bf\u18b3\3\2\2\2")
        buf.write(u"\u18bf\u18b6\3\2\2\2\u18bf\u18ba\3\2\2\2\u18bf\u18be")
        buf.write(u"\3\2\2\2\u18c0\u0325\3\2\2\2\u18c1\u18c2\7\u00da\2\2")
        buf.write(u"\u18c2\u18c3\5\u04c2\u0262\2\u18c3\u0327\3\2\2\2\u18c4")
        buf.write(u"\u18c5\7[\2\2\u18c5\u18c6\7i\2\2\u18c6\u18c8\5\u04ba")
        buf.write(u"\u025e\2\u18c7\u18c9\7\u0190\2\2\u18c8\u18c7\3\2\2\2")
        buf.write(u"\u18c8\u18c9\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca\u18cb")
        buf.write(u"\5\u032a\u0196\2\u18cb\u0329\3\2\2\2\u18cc\u18d1\b\u0196")
        buf.write(u"\1\2\u18cd\u18ce\f\4\2\2\u18ce\u18d0\5\u032c\u0197\2")
        buf.write(u"\u18cf\u18cd\3\2\2\2\u18d0\u18d3\3\2\2\2\u18d1\u18cf")
        buf.write(u"\3\2\2\2\u18d1\u18d2\3\2\2\2\u18d2\u032b\3\2\2\2\u18d3")
        buf.write(u"\u18d1\3\2\2\2\u18d4\u18d5\7\u0160\2\2\u18d5\u18d6\5")
        buf.write(u"\u032e\u0198\2\u18d6\u18d7\5\u04b8\u025d\2\u18d7\u1916")
        buf.write(u"\3\2\2\2\u18d8\u18d9\7\u0160\2\2\u18d9\u18da\5\u032e")
        buf.write(u"\u0198\2\u18da\u18db\7o\2\2\u18db\u1916\3\2\2\2\u18dc")
        buf.write(u"\u18dd\7\u00de\2\2\u18dd\u18de\5\u032e\u0198\2\u18de")
        buf.write(u"\u18df\5\u04ca\u0266\2\u18df\u1916\3\2\2\2\u18e0\u18e1")
        buf.write(u"\7\u00de\2\2\u18e1\u18e2\5\u032e\u0198\2\u18e2\u18e3")
        buf.write(u"\7o\2\2\u18e3\u1916\3\2\2\2\u18e4\u18e5\7\u0162\2\2\u18e5")
        buf.write(u"\u18e6\5\u032e\u0198\2\u18e6\u18e7\5\u04b8\u025d\2\u18e7")
        buf.write(u"\u1916\3\2\2\2\u18e8\u18e9\7\u0162\2\2\u18e9\u18ea\5")
        buf.write(u"\u032e\u0198\2\u18ea\u18eb\7o\2\2\u18eb\u1916\3\2\2\2")
        buf.write(u"\u18ec\u18ed\7\u0084\2\2\u18ed\u18ee\5\u032e\u0198\2")
        buf.write(u"\u18ee\u18ef\5\u04ca\u0266\2\u18ef\u1916\3\2\2\2\u18f0")
        buf.write(u"\u18f1\7\u0084\2\2\u18f1\u18f2\5\u032e\u0198\2\u18f2")
        buf.write(u"\u18f3\5\u04c8\u0265\2\u18f3\u1916\3\2\2\2\u18f4\u18f5")
        buf.write(u"\7\u0084\2\2\u18f5\u18f6\5\u032e\u0198\2\u18f6\u18f7")
        buf.write(u"\7o\2\2\u18f7\u1916\3\2\2\2\u18f8\u18f9\7\u00d0\2\2\u18f9")
        buf.write(u"\u18fa\5\u032e\u0198\2\u18fa\u18fb\5\u04ca\u0266\2\u18fb")
        buf.write(u"\u1916\3\2\2\2\u18fc\u18fd\7\u00d0\2\2\u18fd\u18fe\5")
        buf.write(u"\u032e\u0198\2\u18fe\u18ff\7o\2\2\u18ff\u1916\3\2\2\2")
        buf.write(u"\u1900\u1901\7\u00d1\2\2\u1901\u1902\5\u032e\u0198\2")
        buf.write(u"\u1902\u1903\5\u04ca\u0266\2\u1903\u1916\3\2\2\2\u1904")
        buf.write(u"\u1905\7\u00d1\2\2\u1905\u1906\5\u032e\u0198\2\u1906")
        buf.write(u"\u1907\7o\2\2\u1907\u1916\3\2\2\2\u1908\u1909\7S\2\2")
        buf.write(u"\u1909\u190a\7\u00d8\2\2\u190a\u190b\5\u032e\u0198\2")
        buf.write(u"\u190b\u190c\5\u04ce\u0268\2\u190c\u1916\3\2\2\2\u190d")
        buf.write(u"\u190e\7\u010b\2\2\u190e\u190f\5\u032e\u0198\2\u190f")
        buf.write(u"\u1910\5\u04b8\u025d\2\u1910\u1916\3\2\2\2\u1911\u1912")
        buf.write(u"\7\u010b\2\2\u1912\u1913\5\u032e\u0198\2\u1913\u1914")
        buf.write(u"\7o\2\2\u1914\u1916\3\2\2\2\u1915\u18d4\3\2\2\2\u1915")
        buf.write(u"\u18d8\3\2\2\2\u1915\u18dc\3\2\2\2\u1915\u18e0\3\2\2")
        buf.write(u"\2\u1915\u18e4\3\2\2\2\u1915\u18e8\3\2\2\2\u1915\u18ec")
        buf.write(u"\3\2\2\2\u1915\u18f0\3\2\2\2\u1915\u18f4\3\2\2\2\u1915")
        buf.write(u"\u18f8\3\2\2\2\u1915\u18fc\3\2\2\2\u1915\u1900\3\2\2")
        buf.write(u"\2\u1915\u1904\3\2\2\2\u1915\u1908\3\2\2\2\u1915\u190d")
        buf.write(u"\3\2\2\2\u1915\u1911\3\2\2\2\u1916\u032d\3\2\2\2\u1917")
        buf.write(u"\u191a\7\20\2\2\u1918\u191a\3\2\2\2\u1919\u1917\3\2\2")
        buf.write(u"\2\u1919\u1918\3\2\2\2\u191a\u032f\3\2\2\2\u191b\u191c")
        buf.write(u"\7 \2\2\u191c\u191d\7i\2\2\u191d\u191f\5\u04ba\u025e")
        buf.write(u"\2\u191e\u1920\7\u0190\2\2\u191f\u191e\3\2\2\2\u191f")
        buf.write(u"\u1920\3\2\2\2\u1920\u1921\3\2\2\2\u1921\u1922\5\u0334")
        buf.write(u"\u019b\2\u1922\u192b\3\2\2\2\u1923\u1924\7 \2\2\u1924")
        buf.write(u"\u1925\7i\2\2\u1925\u1926\5\u04ba\u025e\2\u1926\u1927")
        buf.write(u"\7\u0147\2\2\u1927\u1928\7\u0160\2\2\u1928\u1929\5\u04b8")
        buf.write(u"\u025d\2\u1929\u192b\3\2\2\2\u192a\u191b\3\2\2\2\u192a")
        buf.write(u"\u1923\3\2\2\2\u192b\u0331\3\2\2\2\u192c\u192d\7 \2\2")
        buf.write(u"\u192d\u192e\7i\2\2\u192e\u192f\5\u04ba\u025e\2\u192f")
        buf.write(u"\u1930\5\u00eav\2\u1930\u0333\3\2\2\2\u1931\u1936\b\u019b")
        buf.write(u"\1\2\u1932\u1933\f\4\2\2\u1933\u1935\5\u0336\u019c\2")
        buf.write(u"\u1934\u1932\3\2\2\2\u1935\u1938\3\2\2\2\u1936\u1934")
        buf.write(u"\3\2\2\2\u1936\u1937\3\2\2\2\u1937\u0335\3\2\2\2\u1938")
        buf.write(u"\u1936\3\2\2\2\u1939\u193a\7S\2\2\u193a\u193b\7\u00d8")
        buf.write(u"\2\2\u193b\u193c\5\u032e\u0198\2\u193c\u193d\5\u04ce")
        buf.write(u"\u0268\2\u193d\u0337\3\2\2\2\u193e\u193f\7\u0080\2\2")
        buf.write(u"\u193f\u1940\7i\2\2\u1940\u1947\5\u04ba\u025e\2\u1941")
        buf.write(u"\u1942\7\u0080\2\2\u1942\u1943\7i\2\2\u1943\u1944\7\u00ad")
        buf.write(u"\2\2\u1944\u1945\7\u008e\2\2\u1945\u1947\5\u04ba\u025e")
        buf.write(u"\2\u1946\u193e\3\2\2\2\u1946\u1941\3\2\2\2\u1947\u0339")
        buf.write(u"\3\2\2\2\u1948\u1949\7[\2\2\u1949\u194a\7~\2\2\u194a")
        buf.write(u"\u194b\5\u0250\u0129\2\u194b\u194c\5\u033e\u01a0\2\u194c")
        buf.write(u"\u194d\5\u040a\u0206\2\u194d\u194e\5\u014a\u00a6\2\u194e")
        buf.write(u"\u033b\3\2\2\2\u194f\u1950\7 \2\2\u1950\u1951\7~\2\2")
        buf.write(u"\u1951\u1952\5\u0250\u0129\2\u1952\u1953\5\u0100\u0081")
        buf.write(u"\2\u1953\u1982\3\2\2\2\u1954\u1955\7 \2\2\u1955\u1956")
        buf.write(u"\7~\2\2\u1956\u1957\5\u0250\u0129\2\u1957\u1958\7\u0080")
        buf.write(u"\2\2\u1958\u1959\7\u00f0\2\2\u1959\u195a\7\u00f5\2\2")
        buf.write(u"\u195a\u1982\3\2\2\2\u195b\u195c\7 \2\2\u195c\u195d\7")
        buf.write(u"~\2\2\u195d\u195e\5\u0250\u0129\2\u195e\u195f\7\u0147")
        buf.write(u"\2\2\u195f\u1960\7\u00f0\2\2\u1960\u1961\7\u00f5\2\2")
        buf.write(u"\u1961\u1982\3\2\2\2\u1962\u1963\7 \2\2\u1963\u1964\7")
        buf.write(u"~\2\2\u1964\u1965\5\u0250\u0129\2\u1965\u1966\7\32\2")
        buf.write(u"\2\u1966\u1967\5\u0158\u00ad\2\u1967\u1982\3\2\2\2\u1968")
        buf.write(u"\u1969\7 \2\2\u1969\u196a\7~\2\2\u196a\u196b\5\u0250")
        buf.write(u"\u0129\2\u196b\u196c\7\u0080\2\2\u196c\u196d\7T\2\2\u196d")
        buf.write(u"\u196e\5\u04b8\u025d\2\u196e\u196f\5\u0102\u0082\2\u196f")
        buf.write(u"\u1982\3\2\2\2\u1970\u1971\7 \2\2\u1971\u1972\7~\2\2")
        buf.write(u"\u1972\u1973\5\u0250\u0129\2\u1973\u1974\7\u0080\2\2")
        buf.write(u"\u1974\u1975\7T\2\2\u1975\u1976\7\u00ad\2\2\u1976\u1977")
        buf.write(u"\7\u008e\2\2\u1977\u1978\5\u04b8\u025d\2\u1978\u1979")
        buf.write(u"\5\u0102\u0082\2\u1979\u1982\3\2\2\2\u197a\u197b\7 \2")
        buf.write(u"\2\u197b\u197c\7~\2\2\u197c\u197d\5\u0250\u0129\2\u197d")
        buf.write(u"\u197e\7\u0181\2\2\u197e\u197f\7T\2\2\u197f\u1980\5\u04b8")
        buf.write(u"\u025d\2\u1980\u1982\3\2\2\2\u1981\u194f\3\2\2\2\u1981")
        buf.write(u"\u1954\3\2\2\2\u1981\u195b\3\2\2\2\u1981\u1962\3\2\2")
        buf.write(u"\2\u1981\u1968\3\2\2\2\u1981\u1970\3\2\2\2\u1981\u197a")
        buf.write(u"\3\2\2\2\u1982\u033d\3\2\2\2\u1983\u1986\7\'\2\2\u1984")
        buf.write(u"\u1986\3\2\2\2\u1985\u1983\3\2\2\2\u1985\u1984\3\2\2")
        buf.write(u"\2\u1986\u033f\3\2\2\2\u1987\u1988\7 \2\2\u1988\u1989")
        buf.write(u"\7\u0164\2\2\u1989\u198a\7\u013d\2\2\u198a\u198b\7x\2")
        buf.write(u"\2\u198b\u198c\5\u0250\u0129\2\u198c\u198d\5\u0216\u010c")
        buf.write(u"\2\u198d\u0341\3\2\2\2\u198e\u198f\7 \2\2\u198f\u1990")
        buf.write(u"\7\u0164\2\2\u1990\u1991\7\u013d\2\2\u1991\u1992\7R\2")
        buf.write(u"\2\u1992\u1993\5\u0250\u0129\2\u1993\u1994\7\32\2\2\u1994")
        buf.write(u"\u1995\7\u00e0\2\2\u1995\u1996\7\u0099\2\2\u1996\u1997")
        buf.write(u"\5\u04b6\u025c\2\u1997\u1998\7\u0190\2\2\u1998\u1999")
        buf.write(u"\5\u024e\u0128\2\u1999\u19d7\3\2\2\2\u199a\u199b\7 \2")
        buf.write(u"\2\u199b\u199c\7\u0164\2\2\u199c\u199d\7\u013d\2\2\u199d")
        buf.write(u"\u199e\7R\2\2\u199e\u199f\5\u0250\u0129\2\u199f\u19a0")
        buf.write(u"\7 \2\2\u19a0\u19a1\7\u00e0\2\2\u19a1\u19a2\7\u0099\2")
        buf.write(u"\2\u19a2\u19a3\5\u04b6\u025c\2\u19a3\u19a4\7\u0190\2")
        buf.write(u"\2\u19a4\u19a5\5\u024e\u0128\2\u19a5\u19d7\3\2\2\2\u19a6")
        buf.write(u"\u19a7\7 \2\2\u19a7\u19a8\7\u0164\2\2\u19a8\u19a9\7\u013d")
        buf.write(u"\2\2\u19a9\u19aa\7R\2\2\u19aa\u19ab\5\u0250\u0129\2\u19ab")
        buf.write(u"\u19ac\7 \2\2\u19ac\u19ad\7\u00e0\2\2\u19ad\u19ae\7\u012c")
        buf.write(u"\2\2\u19ae\u19af\5\u0250\u0129\2\u19af\u19b0\7\u0190")
        buf.write(u"\2\2\u19b0\u19b1\5\u0250\u0129\2\u19b1\u19d7\3\2\2\2")
        buf.write(u"\u19b2\u19b3\7 \2\2\u19b3\u19b4\7\u0164\2\2\u19b4\u19b5")
        buf.write(u"\7\u013d\2\2\u19b5\u19b6\7R\2\2\u19b6\u19b7\5\u0250\u0129")
        buf.write(u"\2\u19b7\u19b8\7 \2\2\u19b8\u19b9\7\u00e0\2\2\u19b9\u19ba")
        buf.write(u"\7\u0099\2\2\u19ba\u19bb\5\u04b6\u025c\2\u19bb\u19bc")
        buf.write(u"\7\u012c\2\2\u19bc\u19bd\5\u0250\u0129\2\u19bd\u19be")
        buf.write(u"\7\u0190\2\2\u19be\u19bf\5\u0250\u0129\2\u19bf\u19d7")
        buf.write(u"\3\2\2\2\u19c0\u19c1\7 \2\2\u19c1\u19c2\7\u0164\2\2\u19c2")
        buf.write(u"\u19c3\7\u013d\2\2\u19c3\u19c4\7R\2\2\u19c4\u19c5\5\u0250")
        buf.write(u"\u0129\2\u19c5\u19c6\7\u0080\2\2\u19c6\u19c7\7\u00e0")
        buf.write(u"\2\2\u19c7\u19c8\7\u0099\2\2\u19c8\u19c9\5\u04b6\u025c")
        buf.write(u"\2\u19c9\u19d7\3\2\2\2\u19ca\u19cb\7 \2\2\u19cb\u19cc")
        buf.write(u"\7\u0164\2\2\u19cc\u19cd\7\u013d\2\2\u19cd\u19ce\7R\2")
        buf.write(u"\2\u19ce\u19cf\5\u0250\u0129\2\u19cf\u19d0\7\u0080\2")
        buf.write(u"\2\u19d0\u19d1\7\u00e0\2\2\u19d1\u19d2\7\u00ad\2\2\u19d2")
        buf.write(u"\u19d3\7\u008e\2\2\u19d3\u19d4\7\u0099\2\2\u19d4\u19d5")
        buf.write(u"\5\u04b6\u025c\2\u19d5\u19d7\3\2\2\2\u19d6\u198e\3\2")
        buf.write(u"\2\2\u19d6\u199a\3\2\2\2\u19d6\u19a6\3\2\2\2\u19d6\u19b2")
        buf.write(u"\3\2\2\2\u19d6\u19c0\3\2\2\2\u19d6\u19ca\3\2\2\2\u19d7")
        buf.write(u"\u0343\3\2\2\2\u19d8\u19d9\7[\2\2\u19d9\u19da\5\u0232")
        buf.write(u"\u011a\2\u19da\u19db\7X\2\2\u19db\u19dc\5\u0250\u0129")
        buf.write(u"\2\u19dc\u19dd\7\u0099\2\2\u19dd\u19de\5\u04ca\u0266")
        buf.write(u"\2\u19de\u19df\7\u0168\2\2\u19df\u19e0\5\u04ca\u0266")
        buf.write(u"\2\u19e0\u19e1\7\u009e\2\2\u19e1\u19e2\5\u0250\u0129")
        buf.write(u"\2\u19e2\u0345\3\2\2\2\u19e3\u19e4\7H\2\2\u19e4\u19e5")
        buf.write(u"\5\u0354\u01ab\2\u19e5\u19e6\5\u04b4\u025b\2\u19e6\u19e7")
        buf.write(u"\5\u0348\u01a5\2\u19e7\u19f1\3\2\2\2\u19e8\u19e9\7H\2")
        buf.write(u"\2\u19e9\u19f1\5\u0354\u01ab\2\u19ea\u19eb\7H\2\2\u19eb")
        buf.write(u"\u19ec\5\u0354\u01ab\2\u19ec\u19ed\5\u04c0\u0261\2\u19ed")
        buf.write(u"\u19ee\7\u00fe\2\2\u19ee\u19ef\5\u04b4\u025b\2\u19ef")
        buf.write(u"\u19f1\3\2\2\2\u19f0\u19e3\3\2\2\2\u19f0\u19e8\3\2\2")
        buf.write(u"\2\u19f0\u19ea\3\2\2\2\u19f1\u0347\3\2\2\2\u19f2\u19f3")
        buf.write(u"\7\u017e\2\2\u19f3\u19f6\5\u04c0\u0261\2\u19f4\u19f6")
        buf.write(u"\3\2\2\2\u19f5\u19f2\3\2\2\2\u19f5\u19f4\3\2\2\2\u19f6")
        buf.write(u"\u0349\3\2\2\2\u19f7\u19f8\7\u017f\2\2\u19f8\u19f9\5")
        buf.write(u"\u0356\u01ac\2\u19f9\u19fa\5\u0358\u01ad\2\u19fa\u19fb")
        buf.write(u"\5\u0354\u01ab\2\u19fb\u1a15\3\2\2\2\u19fc\u19fd\7\u017f")
        buf.write(u"\2\2\u19fd\u19fe\5\u0356\u01ac\2\u19fe\u19ff\5\u0358")
        buf.write(u"\u01ad\2\u19ff\u1a00\5\u0354\u01ab\2\u1a00\u1a01\5\u04b4")
        buf.write(u"\u025b\2\u1a01\u1a15\3\2\2\2\u1a02\u1a03\7\u017f\2\2")
        buf.write(u"\u1a03\u1a04\5\u0356\u01ac\2\u1a04\u1a05\5\u0358\u01ad")
        buf.write(u"\2\u1a05\u1a06\5\u0354\u01ab\2\u1a06\u1a07\5\u0350\u01a9")
        buf.write(u"\2\u1a07\u1a15\3\2\2\2\u1a08\u1a09\7\u017f\2\2\u1a09")
        buf.write(u"\u1a0a\7\r\2\2\u1a0a\u1a0b\5\u034c\u01a7\2\u1a0b\u1a0c")
        buf.write(u"\7\7\2\2\u1a0c\u1a15\3\2\2\2\u1a0d\u1a0e\7\u017f\2\2")
        buf.write(u"\u1a0e\u1a0f\7\r\2\2\u1a0f\u1a10\5\u034c\u01a7\2\u1a10")
        buf.write(u"\u1a11\7\7\2\2\u1a11\u1a12\5\u04b4\u025b\2\u1a12\u1a13")
        buf.write(u"\5\u035a\u01ae\2\u1a13\u1a15\3\2\2\2\u1a14\u19f7\3\2")
        buf.write(u"\2\2\u1a14\u19fc\3\2\2\2\u1a14\u1a02\3\2\2\2\u1a14\u1a08")
        buf.write(u"\3\2\2\2\u1a14\u1a0d\3\2\2\2\u1a15\u034b\3\2\2\2\u1a16")
        buf.write(u"\u1a17\b\u01a7\1\2\u1a17\u1a18\5\u034e\u01a8\2\u1a18")
        buf.write(u"\u1a1e\3\2\2\2\u1a19\u1a1a\f\3\2\2\u1a1a\u1a1b\7\b\2")
        buf.write(u"\2\u1a1b\u1a1d\5\u034e\u01a8\2\u1a1c\u1a19\3\2\2\2\u1a1d")
        buf.write(u"\u1a20\3\2\2\2\u1a1e\u1a1c\3\2\2\2\u1a1e\u1a1f\3\2\2")
        buf.write(u"\2\u1a1f\u034d\3\2\2\2\u1a20\u1a1e\3\2\2\2\u1a21\u1a26")
        buf.write(u"\5\u0352\u01aa\2\u1a22\u1a26\7\u0188\2\2\u1a23\u1a26")
        buf.write(u"\7\u009d\2\2\u1a24\u1a26\7\u009f\2\2\u1a25\u1a21\3\2")
        buf.write(u"\2\2\u1a25\u1a22\3\2\2\2\u1a25\u1a23\3\2\2\2\u1a25\u1a24")
        buf.write(u"\3\2\2\2\u1a26\u034f\3\2\2\2\u1a27\u1a28\5\u0352\u01aa")
        buf.write(u"\2\u1a28\u1a29\5\u0354\u01ab\2\u1a29\u1a30\3\2\2\2\u1a2a")
        buf.write(u"\u1a2b\5\u0352\u01aa\2\u1a2b\u1a2c\5\u0354\u01ab\2\u1a2c")
        buf.write(u"\u1a2d\5\u04b4\u025b\2\u1a2d\u1a2e\5\u035a\u01ae\2\u1a2e")
        buf.write(u"\u1a30\3\2\2\2\u1a2f\u1a27\3\2\2\2\u1a2f\u1a2a\3\2\2")
        buf.write(u"\2\u1a30\u0351\3\2\2\2\u1a31\u1a32\t\23\2\2\u1a32\u0353")
        buf.write(u"\3\2\2\2\u1a33\u1a36\7\u0188\2\2\u1a34\u1a36\3\2\2\2")
        buf.write(u"\u1a35\u1a33\3\2\2\2\u1a35\u1a34\3\2\2\2\u1a36\u0355")
        buf.write(u"\3\2\2\2\u1a37\u1a3a\7\u009f\2\2\u1a38\u1a3a\3\2\2\2")
        buf.write(u"\u1a39\u1a37\3\2\2\2\u1a39\u1a38\3\2\2\2\u1a3a\u0357")
        buf.write(u"\3\2\2\2\u1a3b\u1a3e\7\u009d\2\2\u1a3c\u1a3e\3\2\2\2")
        buf.write(u"\u1a3d\u1a3b\3\2\2\2\u1a3d\u1a3c\3\2\2\2\u1a3e\u0359")
        buf.write(u"\3\2\2\2\u1a3f\u1a40\7\r\2\2\u1a40\u1a41\5\u04b6\u025c")
        buf.write(u"\2\u1a41\u1a42\7\7\2\2\u1a42\u1a45\3\2\2\2\u1a43\u1a45")
        buf.write(u"\3\2\2\2\u1a44\u1a3f\3\2\2\2\u1a44\u1a43\3\2\2\2\u1a45")
        buf.write(u"\u035b\3\2\2\2\u1a46\u1a47\7\u008f\2\2\u1a47\u1a57\5")
        buf.write(u"\u035e\u01b0\2\u1a48\u1a49\7\u008f\2\2\u1a49\u1a4a\5")
        buf.write(u"\u0352\u01aa\2\u1a4a\u1a4b\5\u0354\u01ab\2\u1a4b\u1a4c")
        buf.write(u"\5\u035e\u01b0\2\u1a4c\u1a57\3\2\2\2\u1a4d\u1a4e\7\u008f")
        buf.write(u"\2\2\u1a4e\u1a4f\7\u0188\2\2\u1a4f\u1a57\5\u035e\u01b0")
        buf.write(u"\2\u1a50\u1a51\7\u008f\2\2\u1a51\u1a52\7\r\2\2\u1a52")
        buf.write(u"\u1a53\5\u0360\u01b1\2\u1a53\u1a54\7\7\2\2\u1a54\u1a55")
        buf.write(u"\5\u035e\u01b0\2\u1a55\u1a57\3\2\2\2\u1a56\u1a46\3\2")
        buf.write(u"\2\2\u1a56\u1a48\3\2\2\2\u1a56\u1a4d\3\2\2\2\u1a56\u1a50")
        buf.write(u"\3\2\2\2\u1a57\u035d\3\2\2\2\u1a58\u1a60\5\u03a0\u01d1")
        buf.write(u"\2\u1a59\u1a60\5\u0374\u01bb\2\u1a5a\u1a60\5\u038a\u01c6")
        buf.write(u"\2\u1a5b\u1a60\5\u037e\u01c0\2\u1a5c\u1a60\5\u0398\u01cd")
        buf.write(u"\2\u1a5d\u1a60\5\u0180\u00c1\2\u1a5e\u1a60\5\u036e\u01b8")
        buf.write(u"\2\u1a5f\u1a58\3\2\2\2\u1a5f\u1a59\3\2\2\2\u1a5f\u1a5a")
        buf.write(u"\3\2\2\2\u1a5f\u1a5b\3\2\2\2\u1a5f\u1a5c\3\2\2\2\u1a5f")
        buf.write(u"\u1a5d\3\2\2\2\u1a5f\u1a5e\3\2\2\2\u1a60\u035f\3\2\2")
        buf.write(u"\2\u1a61\u1a62\b\u01b1\1\2\u1a62\u1a63\5\u0362\u01b2")
        buf.write(u"\2\u1a63\u1a69\3\2\2\2\u1a64\u1a65\f\3\2\2\u1a65\u1a66")
        buf.write(u"\7\b\2\2\u1a66\u1a68\5\u0362\u01b2\2\u1a67\u1a64\3\2")
        buf.write(u"\2\2\u1a68\u1a6b\3\2\2\2\u1a69\u1a67\3\2\2\2\u1a69\u1a6a")
        buf.write(u"\3\2\2\2\u1a6a\u0361\3\2\2\2\u1a6b\u1a69\3\2\2\2\u1a6c")
        buf.write(u"\u1a6d\5\u0364\u01b3\2\u1a6d\u1a6e\5\u0366\u01b4\2\u1a6e")
        buf.write(u"\u0363\3\2\2\2\u1a6f\u1a73\5\u04d0\u0269\2\u1a70\u1a73")
        buf.write(u"\5\u0352\u01aa\2\u1a71\u1a73\7\u0188\2\2\u1a72\u1a6f")
        buf.write(u"\3\2\2\2\u1a72\u1a70\3\2\2\2\u1a72\u1a71\3\2\2\2\u1a73")
        buf.write(u"\u0365\3\2\2\2\u1a74\u1a78\5\u00e0q\2\u1a75\u1a78\5\u0192")
        buf.write(u"\u00ca\2\u1a76\u1a78\3\2\2\2\u1a77\u1a74\3\2\2\2\u1a77")
        buf.write(u"\u1a75\3\2\2\2\u1a77\u1a76\3\2\2\2\u1a78\u0367\3\2\2")
        buf.write(u"\2\u1a79\u1a7a\7\u0116\2\2\u1a7a\u1a7b\5\u04b8\u025d")
        buf.write(u"\2\u1a7b\u1a7c\5\u036a\u01b6\2\u1a7c\u1a7d\7\'\2\2\u1a7d")
        buf.write(u"\u1a7e\5\u036c\u01b7\2\u1a7e\u0369\3\2\2\2\u1a7f\u1a80")
        buf.write(u"\7\r\2\2\u1a80\u1a81\5\u047a\u023e\2\u1a81\u1a82\7\7")
        buf.write(u"\2\2\u1a82\u1a85\3\2\2\2\u1a83\u1a85\3\2\2\2\u1a84\u1a7f")
        buf.write(u"\3\2\2\2\u1a84\u1a83\3\2\2\2\u1a85\u036b\3\2\2\2\u1a86")
        buf.write(u"\u1a8b\5\u03a0\u01d1\2\u1a87\u1a8b\5\u0374\u01bb\2\u1a88")
        buf.write(u"\u1a8b\5\u038a\u01c6\2\u1a89\u1a8b\5\u037e\u01c0\2\u1a8a")
        buf.write(u"\u1a86\3\2\2\2\u1a8a\u1a87\3\2\2\2\u1a8a\u1a88\3\2\2")
        buf.write(u"\2\u1a8a\u1a89\3\2\2\2\u1a8b\u036d\3\2\2\2\u1a8c\u1a8d")
        buf.write(u"\7\u008d\2\2\u1a8d\u1a8e\5\u04b8\u025d\2\u1a8e\u1a8f")
        buf.write(u"\5\u0370\u01b9\2\u1a8f\u1a9b\3\2\2\2\u1a90\u1a91\7[\2")
        buf.write(u"\2\u1a91\u1a92\5\u0138\u009d\2\u1a92\u1a93\7\u015e\2")
        buf.write(u"\2\u1a93\u1a94\5\u0182\u00c2\2\u1a94\u1a95\7\'\2\2\u1a95")
        buf.write(u"\u1a96\7\u008d\2\2\u1a96\u1a97\5\u04b8\u025d\2\u1a97")
        buf.write(u"\u1a98\5\u0370\u01b9\2\u1a98\u1a99\5\u0184\u00c3\2\u1a99")
        buf.write(u"\u1a9b\3\2\2\2\u1a9a\u1a8c\3\2\2\2\u1a9a\u1a90\3\2\2")
        buf.write(u"\2\u1a9b\u036f\3\2\2\2\u1a9c\u1a9d\7\r\2\2\u1a9d\u1a9e")
        buf.write(u"\5\u0474\u023b\2\u1a9e\u1a9f\7\7\2\2\u1a9f\u1aa2\3\2")
        buf.write(u"\2\2\u1aa0\u1aa2\3\2\2\2\u1aa1\u1a9c\3\2\2\2\u1aa1\u1aa0")
        buf.write(u"\3\2\2\2\u1aa2\u0371\3\2\2\2\u1aa3\u1aa4\7k\2\2\u1aa4")
        buf.write(u"\u1aae\5\u04b8\u025d\2\u1aa5\u1aa6\7k\2\2\u1aa6\u1aa7")
        buf.write(u"\7\u0116\2\2\u1aa7\u1aae\5\u04b8\u025d\2\u1aa8\u1aa9")
        buf.write(u"\7k\2\2\u1aa9\u1aae\7\36\2\2\u1aaa\u1aab\7k\2\2\u1aab")
        buf.write(u"\u1aac\7\u0116\2\2\u1aac\u1aae\7\36\2\2\u1aad\u1aa3\3")
        buf.write(u"\2\2\2\u1aad\u1aa5\3\2\2\2\u1aad\u1aa8\3\2\2\2\u1aad")
        buf.write(u"\u1aaa\3\2\2\2\u1aae\u0373\3\2\2\2\u1aaf\u1ab0\5\u03b0")
        buf.write(u"\u01d9\2\u1ab0\u1ab1\7\u00bf\2\2\u1ab1\u1ab2\7\u00c5")
        buf.write(u"\2\2\u1ab2\u1ab3\5\u04b4\u025b\2\u1ab3\u1ab4\5\u0376")
        buf.write(u"\u01bc\2\u1ab4\u1ab5\5\u037c\u01bf\2\u1ab5\u0375\3\2")
        buf.write(u"\2\2\u1ab6\u1abf\5\u03a0\u01d1\2\u1ab7\u1ab8\7\r\2\2")
        buf.write(u"\u1ab8\u1ab9\5\u0378\u01bd\2\u1ab9\u1aba\7\7\2\2\u1aba")
        buf.write(u"\u1abb\5\u03a0\u01d1\2\u1abb\u1abf\3\2\2\2\u1abc\u1abd")
        buf.write(u"\7o\2\2\u1abd\u1abf\7\u0184\2\2\u1abe\u1ab6\3\2\2\2\u1abe")
        buf.write(u"\u1ab7\3\2\2\2\u1abe\u1abc\3\2\2\2\u1abf\u0377\3\2\2")
        buf.write(u"\2\u1ac0\u1ac1\b\u01bd\1\2\u1ac1\u1ac2\5\u037a\u01be")
        buf.write(u"\2\u1ac2\u1ac8\3\2\2\2\u1ac3\u1ac4\f\3\2\2\u1ac4\u1ac5")
        buf.write(u"\7\b\2\2\u1ac5\u1ac7\5\u037a\u01be\2\u1ac6\u1ac3\3\2")
        buf.write(u"\2\2\u1ac7\u1aca\3\2\2\2\u1ac8\u1ac6\3\2\2\2\u1ac8\u1ac9")
        buf.write(u"\3\2\2\2\u1ac9\u0379\3\2\2\2\u1aca\u1ac8\3\2\2\2\u1acb")
        buf.write(u"\u1acc\5\u04d0\u0269\2\u1acc\u1acd\5\u04a4\u0253\2\u1acd")
        buf.write(u"\u037b\3\2\2\2\u1ace\u1acf\7\u0131\2\2\u1acf\u1ad2\5")
        buf.write(u"\u04ae\u0258\2\u1ad0\u1ad2\3\2\2\2\u1ad1\u1ace\3\2\2")
        buf.write(u"\2\u1ad1\u1ad0\3\2\2\2\u1ad2\u037d\3\2\2\2\u1ad3\u1ad4")
        buf.write(u"\5\u03b0\u01d9\2\u1ad4\u1ad5\7t\2\2\u1ad5\u1ad6\7\u009e")
        buf.write(u"\2\2\u1ad6\u1ad7\5\u03fc\u01ff\2\u1ad7\u1ad8\5\u0380")
        buf.write(u"\u01c1\2\u1ad8\u1ad9\5\u0402\u0202\2\u1ad9\u1ada\5\u037c")
        buf.write(u"\u01bf\2\u1ada\u037f\3\2\2\2\u1adb\u1adc\7\u017e\2\2")
        buf.write(u"\u1adc\u1adf\5\u03ea\u01f6\2\u1add\u1adf\3\2\2\2\u1ade")
        buf.write(u"\u1adb\3\2\2\2\u1ade\u1add\3\2\2\2\u1adf\u0381\3\2\2")
        buf.write(u"\2\u1ae0\u1ae1\7\u00df\2\2\u1ae1\u1ae2\5\u03b6\u01dc")
        buf.write(u"\2\u1ae2\u1ae3\5\u03fa\u01fe\2\u1ae3\u1ae4\5\u0384\u01c3")
        buf.write(u"\2\u1ae4\u1ae5\5\u0388\u01c5\2\u1ae5\u0383\3\2\2\2\u1ae6")
        buf.write(u"\u1ae7\7\u00b2\2\2\u1ae7\u1ae8\5\u0386\u01c4\2\u1ae8")
        buf.write(u"\u1ae9\7\u00e5\2\2\u1ae9\u1aec\3\2\2\2\u1aea\u1aec\3")
        buf.write(u"\2\2\2\u1aeb\u1ae6\3\2\2\2\u1aeb\u1aea\3\2\2\2\u1aec")
        buf.write(u"\u0385\3\2\2\2\u1aed\u1aee\7\30\2\2\u1aee\u1afe\7\u0149")
        buf.write(u"\2\2\u1aef\u1af0\7\u0137\2\2\u1af0\u1afe\7\u0149\2\2")
        buf.write(u"\u1af1\u1af2\7\u0137\2\2\u1af2\u1afe\7\u008c\2\2\u1af3")
        buf.write(u"\u1af4\7\u0149\2\2\u1af4\u1af5\7\u017c\2\2\u1af5\u1afe")
        buf.write(u"\7\u008c\2\2\u1af6\u1afe\7\u0149\2\2\u1af7\u1af8\7\u0149")
        buf.write(u"\2\2\u1af8\u1af9\7\u0137\2\2\u1af9\u1afe\7\u008c\2\2")
        buf.write(u"\u1afa\u1afe\7\u008c\2\2\u1afb\u1afc\7\30\2\2\u1afc\u1afe")
        buf.write(u"\7\u008c\2\2\u1afd\u1aed\3\2\2\2\u1afd\u1aef\3\2\2\2")
        buf.write(u"\u1afd\u1af1\3\2\2\2\u1afd\u1af3\3\2\2\2\u1afd\u1af6")
        buf.write(u"\3\2\2\2\u1afd\u1af7\3\2\2\2\u1afd\u1afa\3\2\2\2\u1afd")
        buf.write(u"\u1afb\3\2\2\2\u1afe\u0387\3\2\2\2\u1aff\u1b02\7\u00f4")
        buf.write(u"\2\2\u1b00\u1b02\3\2\2\2\u1b01\u1aff\3\2\2\2\u1b01\u1b00")
        buf.write(u"\3\2\2\2\u1b02\u0389\3\2\2\2\u1b03\u1b04\5\u03b0\u01d9")
        buf.write(u"\2\u1b04\u1b05\7\u017c\2\2\u1b05\u1b06\5\u03fc\u01ff")
        buf.write(u"\2\u1b06\u1b07\7\u0147\2\2\u1b07\u1b08\5\u038c\u01c7")
        buf.write(u"\2\u1b08\u1b09\5\u03e8\u01f5\2\u1b09\u1b0a\5\u0402\u0202")
        buf.write(u"\2\u1b0a\u1b0b\5\u037c\u01bf\2\u1b0b\u038b\3\2\2\2\u1b0c")
        buf.write(u"\u1b0d\b\u01c7\1\2\u1b0d\u1b0e\5\u038e\u01c8\2\u1b0e")
        buf.write(u"\u1b14\3\2\2\2\u1b0f\u1b10\f\3\2\2\u1b10\u1b11\7\b\2")
        buf.write(u"\2\u1b11\u1b13\5\u038e\u01c8\2\u1b12\u1b0f\3\2\2\2\u1b13")
        buf.write(u"\u1b16\3\2\2\2\u1b14\u1b12\3\2\2\2\u1b14\u1b15\3\2\2")
        buf.write(u"\2\u1b15\u038d\3\2\2\2\u1b16\u1b14\3\2\2\2\u1b17\u1b1a")
        buf.write(u"\5\u0390\u01c9\2\u1b18\u1b1a\5\u0392\u01ca\2\u1b19\u1b17")
        buf.write(u"\3\2\2\2\u1b19\u1b18\3\2\2\2\u1b1a\u038f\3\2\2\2\u1b1b")
        buf.write(u"\u1b1c\5\u0394\u01cb\2\u1b1c\u1b1d\7\20\2\2\u1b1d\u1b1e")
        buf.write(u"\5\u04a8\u0255\2\u1b1e\u0391\3\2\2\2\u1b1f\u1b20\7\r")
        buf.write(u"\2\2\u1b20\u1b21\5\u0396\u01cc\2\u1b21\u1b22\7\7\2\2")
        buf.write(u"\u1b22\u1b23\7\20\2\2\u1b23\u1b24\5\u04ac\u0257\2\u1b24")
        buf.write(u"\u0393\3\2\2\2\u1b25\u1b26\5\u04d0\u0269\2\u1b26\u1b27")
        buf.write(u"\5\u04a4\u0253\2\u1b27\u0395\3\2\2\2\u1b28\u1b29\b\u01cc")
        buf.write(u"\1\2\u1b29\u1b2a\5\u0394\u01cb\2\u1b2a\u1b30\3\2\2\2")
        buf.write(u"\u1b2b\u1b2c\f\3\2\2\u1b2c\u1b2d\7\b\2\2\u1b2d\u1b2f")
        buf.write(u"\5\u0394\u01cb\2\u1b2e\u1b2b\3\2\2\2\u1b2f\u1b32\3\2")
        buf.write(u"\2\2\u1b30\u1b2e\3\2\2\2\u1b30\u1b31\3\2\2\2\u1b31\u0397")
        buf.write(u"\3\2\2\2\u1b32\u1b30\3\2\2\2\u1b33\u1b34\7n\2\2\u1b34")
        buf.write(u"\u1b35\5\u039a\u01ce\2\u1b35\u1b36\5\u039c\u01cf\2\u1b36")
        buf.write(u"\u1b37\7f\2\2\u1b37\u1b38\5\u039e\u01d0\2\u1b38\u1b39")
        buf.write(u"\7\u0099\2\2\u1b39\u1b3a\5\u03a0\u01d1\2\u1b3a\u0399")
        buf.write(u"\3\2\2\2\u1b3b\u1b3c\5\u04b8\u025d\2\u1b3c\u039b\3\2")
        buf.write(u"\2\2\u1b3d\u1b49\b\u01cf\1\2\u1b3e\u1b3f\f\6\2\2\u1b3f")
        buf.write(u"\u1b40\7\u00ee\2\2\u1b40\u1b48\7\u013c\2\2\u1b41\u1b42")
        buf.write(u"\f\5\2\2\u1b42\u1b48\7\u013c\2\2\u1b43\u1b44\f\4\2\2")
        buf.write(u"\u1b44\u1b48\7\64\2\2\u1b45\u1b46\f\3\2\2\u1b46\u1b48")
        buf.write(u"\7\u00be\2\2\u1b47\u1b3e\3\2\2\2\u1b47\u1b41\3\2\2\2")
        buf.write(u"\u1b47\u1b43\3\2\2\2\u1b47\u1b45\3\2\2\2\u1b48\u1b4b")
        buf.write(u"\3\2\2\2\u1b49\u1b47\3\2\2\2\u1b49\u1b4a\3\2\2\2\u1b4a")
        buf.write(u"\u039d\3\2\2\2\u1b4b\u1b49\3\2\2\2\u1b4c\u1b52\3\2\2")
        buf.write(u"\2\u1b4d\u1b4e\7\u0190\2\2\u1b4e\u1b52\7\u00aa\2\2\u1b4f")
        buf.write(u"\u1b50\7\u0191\2\2\u1b50\u1b52\7\u00aa\2\2\u1b51\u1b4c")
        buf.write(u"\3\2\2\2\u1b51\u1b4d\3\2\2\2\u1b51\u1b4f\3\2\2\2\u1b52")
        buf.write(u"\u039f\3\2\2\2\u1b53\u1b56\5\u03a4\u01d3\2\u1b54\u1b56")
        buf.write(u"\5\u03a2\u01d2\2\u1b55\u1b53\3\2\2\2\u1b55\u1b54\3\2")
        buf.write(u"\2\2\u1b56\u03a1\3\2\2\2\u1b57\u1b58\b\u01d2\1\2\u1b58")
        buf.write(u"\u1b59\7\r\2\2\u1b59\u1b5a\5\u03a4\u01d3\2\u1b5a\u1b5b")
        buf.write(u"\7\7\2\2\u1b5b\u1b61\3\2\2\2\u1b5c\u1b5d\7\r\2\2\u1b5d")
        buf.write(u"\u1b5e\5\u03a2\u01d2\2\u1b5e\u1b5f\7\7\2\2\u1b5f\u1b61")
        buf.write(u"\3\2\2\2\u1b60\u1b57\3\2\2\2\u1b60\u1b5c\3\2\2\2\u1b61")
        buf.write(u"\u1b79\3\2\2\2\u1b62\u1b63\f\5\2\2\u1b63\u1b64\7\u0176")
        buf.write(u"\2\2\u1b64\u1b67\5\u03b8\u01dd\2\u1b65\u1b68\5\u03a2")
        buf.write(u"\u01d2\2\u1b66\u1b68\5\u03a8\u01d5\2\u1b67\u1b65\3\2")
        buf.write(u"\2\2\u1b67\u1b66\3\2\2\2\u1b68\u1b78\3\2\2\2\u1b69\u1b6a")
        buf.write(u"\f\4\2\2\u1b6a\u1b6b\7\u00c3\2\2\u1b6b\u1b6e\5\u03b8")
        buf.write(u"\u01dd\2\u1b6c\u1b6f\5\u03a2\u01d2\2\u1b6d\u1b6f\5\u03a8")
        buf.write(u"\u01d5\2\u1b6e\u1b6c\3\2\2\2\u1b6e\u1b6d\3\2\2\2\u1b6f")
        buf.write(u"\u1b78\3\2\2\2\u1b70\u1b71\f\3\2\2\u1b71\u1b72\7\u0089")
        buf.write(u"\2\2\u1b72\u1b75\5\u03b8\u01dd\2\u1b73\u1b76\5\u03a2")
        buf.write(u"\u01d2\2\u1b74\u1b76\5\u03a8\u01d5\2\u1b75\u1b73\3\2")
        buf.write(u"\2\2\u1b75\u1b74\3\2\2\2\u1b76\u1b78\3\2\2\2\u1b77\u1b62")
        buf.write(u"\3\2\2\2\u1b77\u1b69\3\2\2\2\u1b77\u1b70\3\2\2\2\u1b78")
        buf.write(u"\u1b7b\3\2\2\2\u1b79\u1b77\3\2\2\2\u1b79\u1b7a\3\2\2")
        buf.write(u"\2\u1b7a\u03a3\3\2\2\2\u1b7b\u1b79\3\2\2\2\u1b7c\u1b9e")
        buf.write(u"\5\u03a8\u01d5\2\u1b7d\u1b7e\5\u03a6\u01d4\2\u1b7e\u1b7f")
        buf.write(u"\5\u03be\u01e0\2\u1b7f\u1b9e\3\2\2\2\u1b80\u1b81\5\u03a6")
        buf.write(u"\u01d4\2\u1b81\u1b82\5\u03bc\u01df\2\u1b82\u1b83\5\u03dc")
        buf.write(u"\u01ef\2\u1b83\u1b84\5\u03c6\u01e4\2\u1b84\u1b9e\3\2")
        buf.write(u"\2\2\u1b85\u1b86\5\u03a6\u01d4\2\u1b86\u1b87\5\u03bc")
        buf.write(u"\u01df\2\u1b87\u1b88\5\u03c4\u01e3\2\u1b88\u1b89\5\u03de")
        buf.write(u"\u01f0\2\u1b89\u1b9e\3\2\2\2\u1b8a\u1b8b\5\u03aa\u01d6")
        buf.write(u"\2\u1b8b\u1b8c\5\u03a6\u01d4\2\u1b8c\u1b9e\3\2\2\2\u1b8d")
        buf.write(u"\u1b8e\5\u03aa\u01d6\2\u1b8e\u1b8f\5\u03a6\u01d4\2\u1b8f")
        buf.write(u"\u1b90\5\u03be\u01e0\2\u1b90\u1b9e\3\2\2\2\u1b91\u1b92")
        buf.write(u"\5\u03aa\u01d6\2\u1b92\u1b93\5\u03a6\u01d4\2\u1b93\u1b94")
        buf.write(u"\5\u03bc\u01df\2\u1b94\u1b95\5\u03dc\u01ef\2\u1b95\u1b96")
        buf.write(u"\5\u03c6\u01e4\2\u1b96\u1b9e\3\2\2\2\u1b97\u1b98\5\u03aa")
        buf.write(u"\u01d6\2\u1b98\u1b99\5\u03a6\u01d4\2\u1b99\u1b9a\5\u03bc")
        buf.write(u"\u01df\2\u1b9a\u1b9b\5\u03c4\u01e3\2\u1b9b\u1b9c\5\u03de")
        buf.write(u"\u01f0\2\u1b9c\u1b9e\3\2\2\2\u1b9d\u1b7c\3\2\2\2\u1b9d")
        buf.write(u"\u1b7d\3\2\2\2\u1b9d\u1b80\3\2\2\2\u1b9d\u1b85\3\2\2")
        buf.write(u"\2\u1b9d\u1b8a\3\2\2\2\u1b9d\u1b8d\3\2\2\2\u1b9d\u1b91")
        buf.write(u"\3\2\2\2\u1b9d\u1b97\3\2\2\2\u1b9e\u03a5\3\2\2\2\u1b9f")
        buf.write(u"\u1ba2\5\u03a8\u01d5\2\u1ba0\u1ba2\5\u03a2\u01d2\2\u1ba1")
        buf.write(u"\u1b9f\3\2\2\2\u1ba1\u1ba0\3\2\2\2\u1ba2\u03a7\3\2\2")
        buf.write(u"\2\u1ba3\u1ba4\b\u01d5\1\2\u1ba4\u1ba5\7\u0140\2\2\u1ba5")
        buf.write(u"\u1ba6\5\u03ba\u01de\2\u1ba6\u1ba7\5\u04ae\u0258\2\u1ba7")
        buf.write(u"\u1ba8\5\u03b2\u01da\2\u1ba8\u1ba9\5\u03e8\u01f5\2\u1ba9")
        buf.write(u"\u1baa\5\u0400\u0201\2\u1baa\u1bab\5\u03d8\u01ed\2\u1bab")
        buf.write(u"\u1bac\5\u03da\u01ee\2\u1bac\u1bad\5\u0452\u022a\2\u1bad")
        buf.write(u"\u1bb2\3\2\2\2\u1bae\u1bb2\5\u03e6\u01f4\2\u1baf\u1bb0")
        buf.write(u"\7\u015e\2\2\u1bb0\u1bb2\5\u03f8\u01fd\2\u1bb1\u1ba3")
        buf.write(u"\3\2\2\2\u1bb1\u1bae\3\2\2\2\u1bb1\u1baf\3\2\2\2\u1bb2")
        buf.write(u"\u1bca\3\2\2\2\u1bb3\u1bb4\f\5\2\2\u1bb4\u1bb5\7\u0176")
        buf.write(u"\2\2\u1bb5\u1bb8\5\u03b8\u01dd\2\u1bb6\u1bb9\5\u03a2")
        buf.write(u"\u01d2\2\u1bb7\u1bb9\5\u03a8\u01d5\2\u1bb8\u1bb6\3\2")
        buf.write(u"\2\2\u1bb8\u1bb7\3\2\2\2\u1bb9\u1bc9\3\2\2\2\u1bba\u1bbb")
        buf.write(u"\f\4\2\2\u1bbb\u1bbc\7\u00c3\2\2\u1bbc\u1bbf\5\u03b8")
        buf.write(u"\u01dd\2\u1bbd\u1bc0\5\u03a2\u01d2\2\u1bbe\u1bc0\5\u03a8")
        buf.write(u"\u01d5\2\u1bbf\u1bbd\3\2\2\2\u1bbf\u1bbe\3\2\2\2\u1bc0")
        buf.write(u"\u1bc9\3\2\2\2\u1bc1\u1bc2\f\3\2\2\u1bc2\u1bc3\7\u0089")
        buf.write(u"\2\2\u1bc3\u1bc6\5\u03b8\u01dd\2\u1bc4\u1bc7\5\u03a2")
        buf.write(u"\u01d2\2\u1bc5\u1bc7\5\u03a8\u01d5\2\u1bc6\u1bc4\3\2")
        buf.write(u"\2\2\u1bc6\u1bc5\3\2\2\2\u1bc7\u1bc9\3\2\2\2\u1bc8\u1bb3")
        buf.write(u"\3\2\2\2\u1bc8\u1bba\3\2\2\2\u1bc8\u1bc1\3\2\2\2\u1bc9")
        buf.write(u"\u1bcc\3\2\2\2\u1bca\u1bc8\3\2\2\2\u1bca\u1bcb\3\2\2")
        buf.write(u"\2\u1bcb\u03a9\3\2\2\2\u1bcc\u1bca\3\2\2\2\u1bcd\u1bce")
        buf.write(u"\7\u0190\2\2\u1bce\u1bd3\5\u03ac\u01d7\2\u1bcf\u1bd0")
        buf.write(u"\7\u0190\2\2\u1bd0\u1bd1\7\u0124\2\2\u1bd1\u1bd3\5\u03ac")
        buf.write(u"\u01d7\2\u1bd2\u1bcd\3\2\2\2\u1bd2\u1bcf\3\2\2\2\u1bd3")
        buf.write(u"\u03ab\3\2\2\2\u1bd4\u1bd5\b\u01d7\1\2\u1bd5\u1bd6\5")
        buf.write(u"\u03ae\u01d8\2\u1bd6\u1bdc\3\2\2\2\u1bd7\u1bd8\f\3\2")
        buf.write(u"\2\u1bd8\u1bd9\7\b\2\2\u1bd9\u1bdb\5\u03ae\u01d8\2\u1bda")
        buf.write(u"\u1bd7\3\2\2\2\u1bdb\u1bde\3\2\2\2\u1bdc\u1bda\3\2\2")
        buf.write(u"\2\u1bdc\u1bdd\3\2\2\2\u1bdd\u03ad\3\2\2\2\u1bde\u1bdc")
        buf.write(u"\3\2\2\2\u1bdf\u1be0\5\u04b8\u025d\2\u1be0\u1be1\5\u035a")
        buf.write(u"\u01ae\2\u1be1\u1be2\7\'\2\2\u1be2\u1be3\7\r\2\2\u1be3")
        buf.write(u"\u1be4\5\u036c\u01b7\2\u1be4\u1be5\7\7\2\2\u1be5\u03af")
        buf.write(u"\3\2\2\2\u1be6\u1be9\5\u03aa\u01d6\2\u1be7\u1be9\3\2")
        buf.write(u"\2\2\u1be8\u1be6\3\2\2\2\u1be8\u1be7\3\2\2\2\u1be9\u03b1")
        buf.write(u"\3\2\2\2\u1bea\u1beb\7\u00c5\2\2\u1beb\u1bee\5\u03b4")
        buf.write(u"\u01db\2\u1bec\u1bee\3\2\2\2\u1bed\u1bea\3\2\2\2\u1bed")
        buf.write(u"\u1bec\3\2\2\2\u1bee\u03b3\3\2\2\2\u1bef\u1bf0\7\u0163")
        buf.write(u"\2\2\u1bf0\u1bf1\5\u03b6\u01dc\2\u1bf1\u1bf2\5\u04b4")
        buf.write(u"\u025b\2\u1bf2\u1c13\3\2\2\2\u1bf3\u1bf4\7\u0161\2\2")
        buf.write(u"\u1bf4\u1bf5\5\u03b6\u01dc\2\u1bf5\u1bf6\5\u04b4\u025b")
        buf.write(u"\2\u1bf6\u1c13\3\2\2\2\u1bf7\u1bf8\7\u00db\2\2\u1bf8")
        buf.write(u"\u1bf9\7\u0163\2\2\u1bf9\u1bfa\5\u03b6\u01dc\2\u1bfa")
        buf.write(u"\u1bfb\5\u04b4\u025b\2\u1bfb\u1c13\3\2\2\2\u1bfc\u1bfd")
        buf.write(u"\7\u00db\2\2\u1bfd\u1bfe\7\u0161\2\2\u1bfe\u1bff\5\u03b6")
        buf.write(u"\u01dc\2\u1bff\u1c00\5\u04b4\u025b\2\u1c00\u1c13\3\2")
        buf.write(u"\2\2\u1c01\u1c02\7\u00a2\2\2\u1c02\u1c03\7\u0163\2\2")
        buf.write(u"\u1c03\u1c04\5\u03b6\u01dc\2\u1c04\u1c05\5\u04b4\u025b")
        buf.write(u"\2\u1c05\u1c13\3\2\2\2\u1c06\u1c07\7\u00a2\2\2\u1c07")
        buf.write(u"\u1c08\7\u0161\2\2\u1c08\u1c09\5\u03b6\u01dc\2\u1c09")
        buf.write(u"\u1c0a\5\u04b4\u025b\2\u1c0a\u1c13\3\2\2\2\u1c0b\u1c0c")
        buf.write(u"\7\u017a\2\2\u1c0c\u1c0d\5\u03b6\u01dc\2\u1c0d\u1c0e")
        buf.write(u"\5\u04b4\u025b\2\u1c0e\u1c13\3\2\2\2\u1c0f\u1c10\7\u015e")
        buf.write(u"\2\2\u1c10\u1c13\5\u04b4\u025b\2\u1c11\u1c13\5\u04b4")
        buf.write(u"\u025b\2\u1c12\u1bef\3\2\2\2\u1c12\u1bf3\3\2\2\2\u1c12")
        buf.write(u"\u1bf7\3\2\2\2\u1c12\u1bfc\3\2\2\2\u1c12\u1c01\3\2\2")
        buf.write(u"\2\u1c12\u1c06\3\2\2\2\u1c12\u1c0b\3\2\2\2\u1c12\u1c0f")
        buf.write(u"\3\2\2\2\u1c12\u1c11\3\2\2\2\u1c13\u03b5\3\2\2\2\u1c14")
        buf.write(u"\u1c17\7\u015e\2\2\u1c15\u1c17\3\2\2\2\u1c16\u1c14\3")
        buf.write(u"\2\2\2\u1c16\u1c15\3\2\2\2\u1c17\u03b7\3\2\2\2\u1c18")
        buf.write(u"\u1c1c\7\36\2\2\u1c19\u1c1c\7{\2\2\u1c1a\u1c1c\3\2\2")
        buf.write(u"\2\u1c1b\u1c18\3\2\2\2\u1c1b\u1c19\3\2\2\2\u1c1b\u1c1a")
        buf.write(u"\3\2\2\2\u1c1c\u03b9\3\2\2\2\u1c1d\u1c27\7{\2\2\u1c1e")
        buf.write(u"\u1c1f\7{\2\2\u1c1f\u1c20\7\u00fe\2\2\u1c20\u1c21\7\r")
        buf.write(u"\2\2\u1c21\u1c22\5\u0474\u023b\2\u1c22\u1c23\7\7\2\2")
        buf.write(u"\u1c23\u1c27\3\2\2\2\u1c24\u1c27\7\36\2\2\u1c25\u1c27")
        buf.write(u"\3\2\2\2\u1c26\u1c1d\3\2\2\2\u1c26\u1c1e\3\2\2\2\u1c26")
        buf.write(u"\u1c24\3\2\2\2\u1c26\u1c25\3\2\2\2\u1c27\u03bb\3\2\2")
        buf.write(u"\2\u1c28\u1c2b\5\u03be\u01e0\2\u1c29\u1c2b\3\2\2\2\u1c2a")
        buf.write(u"\u1c28\3\2\2\2\u1c2a\u1c29\3\2\2\2\u1c2b\u03bd\3\2\2")
        buf.write(u"\2\u1c2c\u1c2d\7\u0104\2\2\u1c2d\u1c2e\78\2\2\u1c2e\u1c2f")
        buf.write(u"\5\u03c0\u01e1\2\u1c2f\u03bf\3\2\2\2\u1c30\u1c31\b\u01e1")
        buf.write(u"\1\2\u1c31\u1c32\5\u03c2\u01e2\2\u1c32\u1c38\3\2\2\2")
        buf.write(u"\u1c33\u1c34\f\3\2\2\u1c34\u1c35\7\b\2\2\u1c35\u1c37")
        buf.write(u"\5\u03c2\u01e2\2\u1c36\u1c33\3\2\2\2\u1c37\u1c3a\3\2")
        buf.write(u"\2\2\u1c38\u1c36\3\2\2\2\u1c38\u1c39\3\2\2\2\u1c39\u03c1")
        buf.write(u"\3\2\2\2\u1c3a\u1c38\3\2\2\2\u1c3b\u1c3c\5\u043a\u021e")
        buf.write(u"\2\u1c3c\u1c3d\7\u017e\2\2\u1c3d\u1c3e\5\u0470\u0239")
        buf.write(u"\2\u1c3e\u1c3f\5\u02aa\u0156\2\u1c3f\u1c45\3\2\2\2\u1c40")
        buf.write(u"\u1c41\5\u043a\u021e\2\u1c41\u1c42\5\u02a8\u0155\2\u1c42")
        buf.write(u"\u1c43\5\u02aa\u0156\2\u1c43\u1c45\3\2\2\2\u1c44\u1c3b")
        buf.write(u"\3\2\2\2\u1c44\u1c40\3\2\2\2\u1c45\u03c3\3\2\2\2\u1c46")
        buf.write(u"\u1c47\5\u03c8\u01e5\2\u1c47\u1c48\5\u03ca\u01e6\2\u1c48")
        buf.write(u"\u1c4f\3\2\2\2\u1c49\u1c4a\5\u03ca\u01e6\2\u1c4a\u1c4b")
        buf.write(u"\5\u03c8\u01e5\2\u1c4b\u1c4f\3\2\2\2\u1c4c\u1c4f\5\u03c8")
        buf.write(u"\u01e5\2\u1c4d\u1c4f\5\u03ca\u01e6\2\u1c4e\u1c46\3\2")
        buf.write(u"\2\2\u1c4e\u1c49\3\2\2\2\u1c4e\u1c4c\3\2\2\2\u1c4e\u1c4d")
        buf.write(u"\3\2\2\2\u1c4f\u03c5\3\2\2\2\u1c50\u1c53\5\u03c4\u01e3")
        buf.write(u"\2\u1c51\u1c53\3\2\2\2\u1c52\u1c50\3\2\2\2\u1c52\u1c51")
        buf.write(u"\3\2\2\2\u1c53\u03c7\3\2\2\2\u1c54\u1c55\7\u00d8\2\2")
        buf.write(u"\u1c55\u1c62\5\u03cc\u01e7\2\u1c56\u1c57\7\u00d8\2\2")
        buf.write(u"\u1c57\u1c58\5\u03cc\u01e7\2\u1c58\u1c59\7\b\2\2\u1c59")
        buf.write(u"\u1c5a\5\u03ce\u01e8\2\u1c5a\u1c62\3\2\2\2\u1c5b\u1c5c")
        buf.write(u"\7\u0095\2\2\u1c5c\u1c5d\5\u03d6\u01ec\2\u1c5d\u1c5e")
        buf.write(u"\5\u03d0\u01e9\2\u1c5e\u1c5f\5\u03d4\u01eb\2\u1c5f\u1c60")
        buf.write(u"\7\u00ff\2\2\u1c60\u1c62\3\2\2\2\u1c61\u1c54\3\2\2\2")
        buf.write(u"\u1c61\u1c56\3\2\2\2\u1c61\u1c5b\3\2\2\2\u1c62\u03c9")
        buf.write(u"\3\2\2\2\u1c63\u1c64\7\u00fc\2\2\u1c64\u1c6a\5\u03ce")
        buf.write(u"\u01e8\2\u1c65\u1c66\7\u00fc\2\2\u1c66\u1c67\5\u03d2")
        buf.write(u"\u01ea\2\u1c67\u1c68\5\u03d4\u01eb\2\u1c68\u1c6a\3\2")
        buf.write(u"\2\2\u1c69\u1c63\3\2\2\2\u1c69\u1c65\3\2\2\2\u1c6a\u03cb")
        buf.write(u"\3\2\2\2\u1c6b\u1c6e\5\u043a\u021e\2\u1c6c\u1c6e\7\36")
        buf.write(u"\2\2\u1c6d\u1c6b\3\2\2\2\u1c6d\u1c6c\3\2\2\2\u1c6e\u03cd")
        buf.write(u"\3\2\2\2\u1c6f\u1c70\5\u043a\u021e\2\u1c70\u03cf\3\2")
        buf.write(u"\2\2\u1c71\u1c78\5\u04ce\u0268\2\u1c72\u1c73\7\r\2\2")
        buf.write(u"\u1c73\u1c74\5\u043a\u021e\2\u1c74\u1c75\7\7\2\2\u1c75")
        buf.write(u"\u1c78\3\2\2\2\u1c76\u1c78\3\2\2\2\u1c77\u1c71\3\2\2")
        buf.write(u"\2\u1c77\u1c72\3\2\2\2\u1c77\u1c76\3\2\2\2\u1c78\u03d1")
        buf.write(u"\3\2\2\2\u1c79\u1c7a\5\u043e\u0220\2\u1c7a\u03d3\3\2")
        buf.write(u"\2\2\u1c7b\u1c7c\t\24\2\2\u1c7c\u03d5\3\2\2\2\u1c7d\u1c7e")
        buf.write(u"\t\25\2\2\u1c7e\u03d7\3\2\2\2\u1c7f\u1c80\7\u00a6\2\2")
        buf.write(u"\u1c80\u1c81\78\2\2\u1c81\u1c84\5\u0474\u023b\2\u1c82")
        buf.write(u"\u1c84\3\2\2\2\u1c83\u1c7f\3\2\2\2\u1c83\u1c82\3\2\2")
        buf.write(u"\2\u1c84\u03d9\3\2\2\2\u1c85\u1c86\7\u00a8\2\2\u1c86")
        buf.write(u"\u1c89\5\u043a\u021e\2\u1c87\u1c89\3\2\2\2\u1c88\u1c85")
        buf.write(u"\3\2\2\2\u1c88\u1c87\3\2\2\2\u1c89\u03db\3\2\2\2\u1c8a")
        buf.write(u"\u1c8f\5\u03e0\u01f1\2\u1c8b\u1c8c\7\u0099\2\2\u1c8c")
        buf.write(u"\u1c8d\7\u0120\2\2\u1c8d\u1c8f\7\u00ff\2\2\u1c8e\u1c8a")
        buf.write(u"\3\2\2\2\u1c8e\u1c8b\3\2\2\2\u1c8f\u03dd\3\2\2\2\u1c90")
        buf.write(u"\u1c93\5\u03dc\u01ef\2\u1c91\u1c93\3\2\2\2\u1c92\u1c90")
        buf.write(u"\3\2\2\2\u1c92\u1c91\3\2\2\2\u1c93\u03df\3\2\2\2\u1c94")
        buf.write(u"\u1c95\b\u01f1\1\2\u1c95\u1c96\5\u03e2\u01f2\2\u1c96")
        buf.write(u"\u1c9b\3\2\2\2\u1c97\u1c98\f\3\2\2\u1c98\u1c9a\5\u03e2")
        buf.write(u"\u01f2\2\u1c99\u1c97\3\2\2\2\u1c9a\u1c9d\3\2\2\2\u1c9b")
        buf.write(u"\u1c99\3\2\2\2\u1c9b\u1c9c\3\2\2\2\u1c9c\u03e1\3\2\2")
        buf.write(u"\2\u1c9d\u1c9b\3\2\2\2\u1c9e\u1c9f\7\u0099\2\2\u1c9f")
        buf.write(u"\u1ca0\7\u017c\2\2\u1ca0\u1ca1\5\u03e4\u01f3\2\u1ca1")
        buf.write(u"\u1ca2\5\u0388\u01c5\2\u1ca2\u1ca9\3\2\2\2\u1ca3\u1ca4")
        buf.write(u"\7\u0099\2\2\u1ca4\u1ca5\7\u0149\2\2\u1ca5\u1ca6\5\u03e4")
        buf.write(u"\u01f3\2\u1ca6\u1ca7\5\u0388\u01c5\2\u1ca7\u1ca9\3\2")
        buf.write(u"\2\2\u1ca8\u1c9e\3\2\2\2\u1ca8\u1ca3\3\2\2\2\u1ca9\u03e3")
        buf.write(u"\3\2\2\2\u1caa\u1cab\7\u00fa\2\2\u1cab\u1cae\5\u04b2")
        buf.write(u"\u025a\2\u1cac\u1cae\3\2\2\2\u1cad\u1caa\3\2\2\2\u1cad")
        buf.write(u"\u1cac\3\2\2\2\u1cae\u03e5\3\2\2\2\u1caf\u1cb0\b\u01f4")
        buf.write(u"\1\2\u1cb0\u1cb1\7\u0184\2\2\u1cb1\u1cb2\5\u04ac\u0257")
        buf.write(u"\2\u1cb2\u1cb8\3\2\2\2\u1cb3\u1cb4\f\3\2\2\u1cb4\u1cb5")
        buf.write(u"\7\b\2\2\u1cb5\u1cb7\5\u04ac\u0257\2\u1cb6\u1cb3\3\2")
        buf.write(u"\2\2\u1cb7\u1cba\3\2\2\2\u1cb8\u1cb6\3\2\2\2\u1cb8\u1cb9")
        buf.write(u"\3\2\2\2\u1cb9\u03e7\3\2\2\2\u1cba\u1cb8\3\2\2\2\u1cbb")
        buf.write(u"\u1cbc\7\u009e\2\2\u1cbc\u1cbf\5\u03ea\u01f6\2\u1cbd")
        buf.write(u"\u1cbf\3\2\2\2\u1cbe\u1cbb\3\2\2\2\u1cbe\u1cbd\3\2\2")
        buf.write(u"\2\u1cbf\u03e9\3\2\2\2\u1cc0\u1cc1\b\u01f6\1\2\u1cc1")
        buf.write(u"\u1cc2\5\u03ec\u01f7\2\u1cc2\u1cc8\3\2\2\2\u1cc3\u1cc4")
        buf.write(u"\f\3\2\2\u1cc4\u1cc5\7\b\2\2\u1cc5\u1cc7\5\u03ec\u01f7")
        buf.write(u"\2\u1cc6\u1cc3\3\2\2\2\u1cc7\u1cca\3\2\2\2\u1cc8\u1cc6")
        buf.write(u"\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u03eb\3\2\2\2\u1cca")
        buf.write(u"\u1cc8\3\2\2\2\u1ccb\u1cce\5\u03f0\u01f9\2\u1ccc\u1cce")
        buf.write(u"\5\u03ee\u01f8\2\u1ccd\u1ccb\3\2\2\2\u1ccd\u1ccc\3\2")
        buf.write(u"\2\2\u1cce\u03ed\3\2\2\2\u1ccf\u1cef\5\u03f8\u01fd\2")
        buf.write(u"\u1cd0\u1cd1\5\u03f8\u01fd\2\u1cd1\u1cd2\5\u03f2\u01fa")
        buf.write(u"\2\u1cd2\u1cef\3\2\2\2\u1cd3\u1cef\5\u03fe\u0200\2\u1cd4")
        buf.write(u"\u1cd5\5\u03fe\u0200\2\u1cd5\u1cd6\5\u03f2\u01fa\2\u1cd6")
        buf.write(u"\u1cef\3\2\2\2\u1cd7\u1cd8\5\u03fe\u0200\2\u1cd8\u1cd9")
        buf.write(u"\7\'\2\2\u1cd9\u1cda\7\r\2\2\u1cda\u1cdb\5\u0406\u0204")
        buf.write(u"\2\u1cdb\u1cdc\7\7\2\2\u1cdc\u1cef\3\2\2\2\u1cdd\u1cde")
        buf.write(u"\5\u03fe\u0200\2\u1cde\u1cdf\7\'\2\2\u1cdf\u1ce0\5\u04d0")
        buf.write(u"\u0269\2\u1ce0\u1ce1\7\r\2\2\u1ce1\u1ce2\5\u0406\u0204")
        buf.write(u"\2\u1ce2\u1ce3\7\7\2\2\u1ce3\u1cef\3\2\2\2\u1ce4\u1ce5")
        buf.write(u"\5\u03fe\u0200\2\u1ce5\u1ce6\5\u04d0\u0269\2\u1ce6\u1ce7")
        buf.write(u"\7\r\2\2\u1ce7\u1ce8\5\u0406\u0204\2\u1ce8\u1ce9\7\7")
        buf.write(u"\2\2\u1ce9\u1cef\3\2\2\2\u1cea\u1cef\5\u03a2\u01d2\2")
        buf.write(u"\u1ceb\u1cec\5\u03a2\u01d2\2\u1cec\u1ced\5\u03f2\u01fa")
        buf.write(u"\2\u1ced\u1cef\3\2\2\2\u1cee\u1ccf\3\2\2\2\u1cee\u1cd0")
        buf.write(u"\3\2\2\2\u1cee\u1cd3\3\2\2\2\u1cee\u1cd4\3\2\2\2\u1cee")
        buf.write(u"\u1cd7\3\2\2\2\u1cee\u1cdd\3\2\2\2\u1cee\u1ce4\3\2\2")
        buf.write(u"\2\u1cee\u1cea\3\2\2\2\u1cee\u1ceb\3\2\2\2\u1cef\u03ef")
        buf.write(u"\3\2\2\2\u1cf0\u1cf1\7\r\2\2\u1cf1\u1cf2\5\u03f0\u01f9")
        buf.write(u"\2\u1cf2\u1cf4\7\7\2\2\u1cf3\u1cf5\5\u03f2\u01fa\2\u1cf4")
        buf.write(u"\u1cf3\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1d12\3\2\2")
        buf.write(u"\2\u1cf6\u1cf7\5\u03ee\u01f8\2\u1cf7\u1cf8\7\\\2\2\u1cf8")
        buf.write(u"\u1cf9\7\u00ca\2\2\u1cf9\u1cfa\5\u03ee\u01f8\2\u1cfa")
        buf.write(u"\u1d12\3\2\2\2\u1cfb\u1cfc\5\u03ee\u01f8\2\u1cfc\u1cfd")
        buf.write(u"\5\u03f4\u01fb\2\u1cfd\u1cfe\7\u00ca\2\2\u1cfe\u1cff")
        buf.write(u"\5\u03ee\u01f8\2\u1cff\u1d00\5\u03f6\u01fc\2\u1d00\u1d12")
        buf.write(u"\3\2\2\2\u1d01\u1d02\5\u03ee\u01f8\2\u1d02\u1d03\7\u00ca")
        buf.write(u"\2\2\u1d03\u1d04\5\u03ee\u01f8\2\u1d04\u1d05\5\u03f6")
        buf.write(u"\u01fc\2\u1d05\u1d12\3\2\2\2\u1d06\u1d07\5\u03ee\u01f8")
        buf.write(u"\2\u1d07\u1d08\7\u00eb\2\2\u1d08\u1d09\5\u03f4\u01fb")
        buf.write(u"\2\u1d09\u1d0a\7\u00ca\2\2\u1d0a\u1d0b\5\u03ee\u01f8")
        buf.write(u"\2\u1d0b\u1d12\3\2\2\2\u1d0c\u1d0d\5\u03ee\u01f8\2\u1d0d")
        buf.write(u"\u1d0e\7\u00eb\2\2\u1d0e\u1d0f\7\u00ca\2\2\u1d0f\u1d10")
        buf.write(u"\5\u03ee\u01f8\2\u1d10\u1d12\3\2\2\2\u1d11\u1cf0\3\2")
        buf.write(u"\2\2\u1d11\u1cf6\3\2\2\2\u1d11\u1cfb\3\2\2\2\u1d11\u1d01")
        buf.write(u"\3\2\2\2\u1d11\u1d06\3\2\2\2\u1d11\u1d0c\3\2\2\2\u1d12")
        buf.write(u"\u03f1\3\2\2\2\u1d13\u1d14\7\'\2\2\u1d14\u1d15\5\u04d0")
        buf.write(u"\u0269\2\u1d15\u1d16\7\r\2\2\u1d16\u1d17\5\u04b6\u025c")
        buf.write(u"\2\u1d17\u1d18\7\7\2\2\u1d18\u1d22\3\2\2\2\u1d19\u1d1a")
        buf.write(u"\7\'\2\2\u1d1a\u1d22\5\u04d0\u0269\2\u1d1b\u1d1c\5\u04d0")
        buf.write(u"\u0269\2\u1d1c\u1d1d\7\r\2\2\u1d1d\u1d1e\5\u04b6\u025c")
        buf.write(u"\2\u1d1e\u1d1f\7\7\2\2\u1d1f\u1d22\3\2\2\2\u1d20\u1d22")
        buf.write(u"\5\u04d0\u0269\2\u1d21\u1d13\3\2\2\2\u1d21\u1d19\3\2")
        buf.write(u"\2\2\u1d21\u1d1b\3\2\2\2\u1d21\u1d20\3\2\2\2\u1d22\u03f3")
        buf.write(u"\3\2\2\2\u1d23\u1d25\7\u009f\2\2\u1d24\u1d26\7\u0106")
        buf.write(u"\2\2\u1d25\u1d24\3\2\2\2\u1d25\u1d26\3\2\2\2\u1d26\u1d31")
        buf.write(u"\3\2\2\2\u1d27\u1d29\7\u00d5\2\2\u1d28\u1d2a\7\u0106")
        buf.write(u"\2\2\u1d29\u1d28\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a\u1d31")
        buf.write(u"\3\2\2\2\u1d2b\u1d2d\7\u0134\2\2\u1d2c\u1d2e\7\u0106")
        buf.write(u"\2\2\u1d2d\u1d2c\3\2\2\2\u1d2d\u1d2e\3\2\2\2\u1d2e\u1d31")
        buf.write(u"\3\2\2\2\u1d2f\u1d31\7\u00bb\2\2\u1d30\u1d23\3\2\2\2")
        buf.write(u"\u1d30\u1d27\3\2\2\2\u1d30\u1d2b\3\2\2\2\u1d30\u1d2f")
        buf.write(u"\3\2\2\2\u1d31\u03f5\3\2\2\2\u1d32\u1d33\7\u017e\2\2")
        buf.write(u"\u1d33\u1d34\7\r\2\2\u1d34\u1d35\5\u04b6\u025c\2\u1d35")
        buf.write(u"\u1d36\7\7\2\2\u1d36\u1d3a\3\2\2\2\u1d37\u1d38\7\u00fe")
        buf.write(u"\2\2\u1d38\u1d3a\5\u043a\u021e\2\u1d39\u1d32\3\2\2\2")
        buf.write(u"\u1d39\u1d37\3\2\2\2\u1d3a\u03f7\3\2\2\2\u1d3b\u1d47")
        buf.write(u"\5\u04b4\u025b\2\u1d3c\u1d3d\5\u04b4\u025b\2\u1d3d\u1d3e")
        buf.write(u"\7\13\2\2\u1d3e\u1d47\3\2\2\2\u1d3f\u1d40\7\u00ff\2\2")
        buf.write(u"\u1d40\u1d47\5\u04b4\u025b\2\u1d41\u1d42\7\u00ff\2\2")
        buf.write(u"\u1d42\u1d43\7\r\2\2\u1d43\u1d44\5\u04b4\u025b\2\u1d44")
        buf.write(u"\u1d45\7\7\2\2\u1d45\u1d47\3\2\2\2\u1d46\u1d3b\3\2\2")
        buf.write(u"\2\u1d46\u1d3c\3\2\2\2\u1d46\u1d3f\3\2\2\2\u1d46\u1d41")
        buf.write(u"\3\2\2\2\u1d47\u03f9\3\2\2\2\u1d48\u1d49\b\u01fe\1\2")
        buf.write(u"\u1d49\u1d4a\5\u03f8\u01fd\2\u1d4a\u1d50\3\2\2\2\u1d4b")
        buf.write(u"\u1d4c\f\3\2\2\u1d4c\u1d4d\7\b\2\2\u1d4d\u1d4f\5\u03f8")
        buf.write(u"\u01fd\2\u1d4e\u1d4b\3\2\2\2\u1d4f\u1d52\3\2\2\2\u1d50")
        buf.write(u"\u1d4e\3\2\2\2\u1d50\u1d51\3\2\2\2\u1d51\u03fb\3\2\2")
        buf.write(u"\2\u1d52\u1d50\3\2\2\2\u1d53\u1d5c\5\u03f8\u01fd\2\u1d54")
        buf.write(u"\u1d55\5\u03f8\u01fd\2\u1d55\u1d56\5\u04d0\u0269\2\u1d56")
        buf.write(u"\u1d5c\3\2\2\2\u1d57\u1d58\5\u03f8\u01fd\2\u1d58\u1d59")
        buf.write(u"\7\'\2\2\u1d59\u1d5a\5\u04d0\u0269\2\u1d5a\u1d5c\3\2")
        buf.write(u"\2\2\u1d5b\u1d53\3\2\2\2\u1d5b\u1d54\3\2\2\2\u1d5b\u1d57")
        buf.write(u"\3\2\2\2\u1d5c\u03fd\3\2\2\2\u1d5d\u1d5e\5\u0440\u0221")
        buf.write(u"\2\u1d5e\u03ff\3\2\2\2\u1d5f\u1d60\7\u018d\2\2\u1d60")
        buf.write(u"\u1d63\5\u043a\u021e\2\u1d61\u1d63\3\2\2\2\u1d62\u1d5f")
        buf.write(u"\3\2\2\2\u1d62\u1d61\3\2\2\2\u1d63\u0401\3\2\2\2\u1d64")
        buf.write(u"\u1d65\7\u018d\2\2\u1d65\u1d6c\5\u043a\u021e\2\u1d66")
        buf.write(u"\u1d67\7\u018d\2\2\u1d67\u1d68\7^\2\2\u1d68\u1d69\7\u00fa")
        buf.write(u"\2\2\u1d69\u1d6c\5\u039a\u01ce\2\u1d6a\u1d6c\3\2\2\2")
        buf.write(u"\u1d6b\u1d64\3\2\2\2\u1d6b\u1d66\3\2\2\2\u1d6b\u1d6a")
        buf.write(u"\3\2\2\2\u1d6c\u0403\3\2\2\2\u1d6d\u1d70\5\u0406\u0204")
        buf.write(u"\2\u1d6e\u1d70\3\2\2\2\u1d6f\u1d6d\3\2\2\2\u1d6f\u1d6e")
        buf.write(u"\3\2\2\2\u1d70\u0405\3\2\2\2\u1d71\u1d72\b\u0204\1\2")
        buf.write(u"\u1d72\u1d73\5\u0408\u0205\2\u1d73\u1d79\3\2\2\2\u1d74")
        buf.write(u"\u1d75\f\3\2\2\u1d75\u1d76\7\b\2\2\u1d76\u1d78\5\u0408")
        buf.write(u"\u0205\2\u1d77\u1d74\3\2\2\2\u1d78\u1d7b\3\2\2\2\u1d79")
        buf.write(u"\u1d77\3\2\2\2\u1d79\u1d7a\3\2\2\2\u1d7a\u0407\3\2\2")
        buf.write(u"\2\u1d7b\u1d79\3\2\2\2\u1d7c\u1d7d\5\u04d0\u0269\2\u1d7d")
        buf.write(u"\u1d7e\5\u040a\u0206\2\u1d7e\u1d7f\5\u0104\u0083\2\u1d7f")
        buf.write(u"\u0409\3\2\2\2\u1d80\u1d81\5\u040e\u0208\2\u1d81\u1d82")
        buf.write(u"\5\u040c\u0207\2\u1d82\u1d9c\3\2\2\2\u1d83\u1d84\7\u0148")
        buf.write(u"\2\2\u1d84\u1d85\5\u040e\u0208\2\u1d85\u1d86\5\u040c")
        buf.write(u"\u0207\2\u1d86\u1d9c\3\2\2\2\u1d87\u1d88\5\u040e\u0208")
        buf.write(u"\2\u1d88\u1d89\7&\2\2\u1d89\u1d8a\7\f\2\2\u1d8a\u1d8b")
        buf.write(u"\5\u04c8\u0265\2\u1d8b\u1d8c\7\3\2\2\u1d8c\u1d9c\3\2")
        buf.write(u"\2\2\u1d8d\u1d8e\7\u0148\2\2\u1d8e\u1d8f\5\u040e\u0208")
        buf.write(u"\2\u1d8f\u1d90\7&\2\2\u1d90\u1d91\7\f\2\2\u1d91\u1d92")
        buf.write(u"\5\u04c8\u0265\2\u1d92\u1d93\7\3\2\2\u1d93\u1d9c\3\2")
        buf.write(u"\2\2\u1d94\u1d95\5\u040e\u0208\2\u1d95\u1d96\7&\2\2\u1d96")
        buf.write(u"\u1d9c\3\2\2\2\u1d97\u1d98\7\u0148\2\2\u1d98\u1d99\5")
        buf.write(u"\u040e\u0208\2\u1d99\u1d9a\7&\2\2\u1d9a\u1d9c\3\2\2\2")
        buf.write(u"\u1d9b\u1d80\3\2\2\2\u1d9b\u1d83\3\2\2\2\u1d9b\u1d87")
        buf.write(u"\3\2\2\2\u1d9b\u1d8d\3\2\2\2\u1d9b\u1d94\3\2\2\2\u1d9b")
        buf.write(u"\u1d97\3\2\2\2\u1d9c\u040b\3\2\2\2\u1d9d\u1da8\b\u0207")
        buf.write(u"\1\2\u1d9e\u1d9f\f\5\2\2\u1d9f\u1da0\7\f\2\2\u1da0\u1da7")
        buf.write(u"\7\3\2\2\u1da1\u1da2\f\4\2\2\u1da2\u1da3\7\f\2\2\u1da3")
        buf.write(u"\u1da4\5\u04c8\u0265\2\u1da4\u1da5\7\3\2\2\u1da5\u1da7")
        buf.write(u"\3\2\2\2\u1da6\u1d9e\3\2\2\2\u1da6\u1da1\3\2\2\2\u1da7")
        buf.write(u"\u1daa\3\2\2\2\u1da8\u1da6\3\2\2\2\u1da8\u1da9\3\2\2")
        buf.write(u"\2\u1da9\u040d\3\2\2\2\u1daa\u1da8\3\2\2\2\u1dab\u1dba")
        buf.write(u"\5\u0412\u020a\2\u1dac\u1dba\5\u0416\u020c\2\u1dad\u1dba")
        buf.write(u"\5\u041a\u020e\2\u1dae\u1dba\5\u0422\u0212\2\u1daf\u1dba")
        buf.write(u"\5\u0430\u0219\2\u1db0\u1db1\5\u0432\u021a\2\u1db1\u1db2")
        buf.write(u"\5\u0436\u021c\2\u1db2\u1dba\3\2\2\2\u1db3\u1db4\5\u0432")
        buf.write(u"\u021a\2\u1db4\u1db5\7\r\2\2\u1db5\u1db6\5\u04c8\u0265")
        buf.write(u"\2\u1db6\u1db7\7\7\2\2\u1db7\u1db8\5\u0436\u021c\2\u1db8")
        buf.write(u"\u1dba\3\2\2\2\u1db9\u1dab\3\2\2\2\u1db9\u1dac\3\2\2")
        buf.write(u"\2\u1db9\u1dad\3\2\2\2\u1db9\u1dae\3\2\2\2\u1db9\u1daf")
        buf.write(u"\3\2\2\2\u1db9\u1db0\3\2\2\2\u1db9\u1db3\3\2\2\2\u1dba")
        buf.write(u"\u040f\3\2\2\2\u1dbb\u1dc0\5\u0416\u020c\2\u1dbc\u1dc0")
        buf.write(u"\5\u041c\u020f\2\u1dbd\u1dc0\5\u0424\u0213\2\u1dbe\u1dc0")
        buf.write(u"\5\u0430\u0219\2\u1dbf\u1dbb\3\2\2\2\u1dbf\u1dbc\3\2")
        buf.write(u"\2\2\u1dbf\u1dbd\3\2\2\2\u1dbf\u1dbe\3\2\2\2\u1dc0\u0411")
        buf.write(u"\3\2\2\2\u1dc1\u1dc2\5\u04d2\u026a\2\u1dc2\u1dc3\5\u0414")
        buf.write(u"\u020b\2\u1dc3\u1dc9\3\2\2\2\u1dc4\u1dc5\5\u04d2\u026a")
        buf.write(u"\2\u1dc5\u1dc6\5\u0252\u012a\2\u1dc6\u1dc7\5\u0414\u020b")
        buf.write(u"\2\u1dc7\u1dc9\3\2\2\2\u1dc8\u1dc1\3\2\2\2\u1dc8\u1dc4")
        buf.write(u"\3\2\2\2\u1dc9\u0413\3\2\2\2\u1dca\u1dcb\7\r\2\2\u1dcb")
        buf.write(u"\u1dcc\5\u0474\u023b\2\u1dcc\u1dcd\7\7\2\2\u1dcd\u1dd0")
        buf.write(u"\3\2\2\2\u1dce\u1dd0\3\2\2\2\u1dcf\u1dca\3\2\2\2\u1dcf")
        buf.write(u"\u1dce\3\2\2\2\u1dd0\u0415\3\2\2\2\u1dd1\u1de2\7\u00c1")
        buf.write(u"\2\2\u1dd2\u1de2\7\u00c2\2\2\u1dd3\u1de2\7\u014d\2\2")
        buf.write(u"\u1dd4\u1de2\7\63\2\2\u1dd5\u1de2\7\u0121\2\2\u1dd6\u1dd7")
        buf.write(u"\7\u0097\2\2\u1dd7\u1de2\5\u0418\u020d\2\u1dd8\u1dd9")
        buf.write(u"\7\177\2\2\u1dd9\u1de2\7\u0115\2\2\u1dda\u1ddb\7m\2\2")
        buf.write(u"\u1ddb\u1de2\5\u0414\u020b\2\u1ddc\u1ddd\7l\2\2\u1ddd")
        buf.write(u"\u1de2\5\u0414\u020b\2\u1dde\u1ddf\7\u00f8\2\2\u1ddf")
        buf.write(u"\u1de2\5\u0414\u020b\2\u1de0\u1de2\7\66\2\2\u1de1\u1dd1")
        buf.write(u"\3\2\2\2\u1de1\u1dd2\3\2\2\2\u1de1\u1dd3\3\2\2\2\u1de1")
        buf.write(u"\u1dd4\3\2\2\2\u1de1\u1dd5\3\2\2\2\u1de1\u1dd6\3\2\2")
        buf.write(u"\2\u1de1\u1dd8\3\2\2\2\u1de1\u1dda\3\2\2\2\u1de1\u1ddc")
        buf.write(u"\3\2\2\2\u1de1\u1dde\3\2\2\2\u1de1\u1de0\3\2\2\2\u1de2")
        buf.write(u"\u0417\3\2\2\2\u1de3\u1de4\7\r\2\2\u1de4\u1de5\5\u04c8")
        buf.write(u"\u0265\2\u1de5\u1de6\7\7\2\2\u1de6\u1de9\3\2\2\2\u1de7")
        buf.write(u"\u1de9\3\2\2\2\u1de8\u1de3\3\2\2\2\u1de8\u1de7\3\2\2")
        buf.write(u"\2\u1de9\u0419\3\2\2\2\u1dea\u1ded\5\u041e\u0210\2\u1deb")
        buf.write(u"\u1ded\5\u0420\u0211\2\u1dec\u1dea\3\2\2\2\u1dec\u1deb")
        buf.write(u"\3\2\2\2\u1ded\u041b\3\2\2\2\u1dee\u1df1\5\u041e\u0210")
        buf.write(u"\2\u1def\u1df1\5\u0420\u0211\2\u1df0\u1dee\3\2\2\2\u1df0")
        buf.write(u"\u1def\3\2\2\2\u1df1\u041d\3\2\2\2\u1df2\u1df3\7\65\2")
        buf.write(u"\2\u1df3\u1df4\5\u042c\u0217\2\u1df4\u1df5\7\r\2\2\u1df5")
        buf.write(u"\u1df6\5\u0474\u023b\2\u1df6\u1df7\7\7\2\2\u1df7\u041f")
        buf.write(u"\3\2\2\2\u1df8\u1df9\7\65\2\2\u1df9\u1dfa\5\u042c\u0217")
        buf.write(u"\2\u1dfa\u0421\3\2\2\2\u1dfb\u1dfe\5\u0426\u0214\2\u1dfc")
        buf.write(u"\u1dfe\5\u0428\u0215\2\u1dfd\u1dfb\3\2\2\2\u1dfd\u1dfc")
        buf.write(u"\3\2\2\2\u1dfe\u0423\3\2\2\2\u1dff\u1e02\5\u0426\u0214")
        buf.write(u"\2\u1e00\u1e02\5\u0428\u0215\2\u1e01\u1dff\3\2\2\2\u1e01")
        buf.write(u"\u1e00\3\2\2\2\u1e02\u0425\3\2\2\2\u1e03\u1e04\5\u042a")
        buf.write(u"\u0216\2\u1e04\u1e05\7\r\2\2\u1e05\u1e06\5\u04c8\u0265")
        buf.write(u"\2\u1e06\u1e07\7\7\2\2\u1e07\u1e08\5\u042e\u0218\2\u1e08")
        buf.write(u"\u0427\3\2\2\2\u1e09\u1e0a\5\u042a\u0216\2\u1e0a\u1e0b")
        buf.write(u"\5\u042e\u0218\2\u1e0b\u0429\3\2\2\2\u1e0c\u1e0d\7B\2")
        buf.write(u"\2\u1e0d\u1e1a\5\u042c\u0217\2\u1e0e\u1e0f\7A\2\2\u1e0f")
        buf.write(u"\u1e1a\5\u042c\u0217\2\u1e10\u1e1a\7\u0185\2\2\u1e11")
        buf.write(u"\u1e12\7\u00ea\2\2\u1e12\u1e13\7B\2\2\u1e13\u1e1a\5\u042c")
        buf.write(u"\u0217\2\u1e14\u1e15\7\u00ea\2\2\u1e15\u1e16\7A\2\2\u1e16")
        buf.write(u"\u1e1a\5\u042c\u0217\2\u1e17\u1e18\7\u00ec\2\2\u1e18")
        buf.write(u"\u1e1a\5\u042c\u0217\2\u1e19\u1e0c\3\2\2\2\u1e19\u1e0e")
        buf.write(u"\3\2\2\2\u1e19\u1e10\3\2\2\2\u1e19\u1e11\3\2\2\2\u1e19")
        buf.write(u"\u1e14\3\2\2\2\u1e19\u1e17\3\2\2\2\u1e1a\u042b\3\2\2")
        buf.write(u"\2\u1e1b\u1e1e\7\u0187\2\2\u1e1c\u1e1e\3\2\2\2\u1e1d")
        buf.write(u"\u1e1b\3\2\2\2\u1e1d\u1e1c\3\2\2\2\u1e1e\u042d\3\2\2")
        buf.write(u"\2\u1e1f\u1e20\7B\2\2\u1e20\u1e21\7\u0147\2\2\u1e21\u1e24")
        buf.write(u"\5\u04d0\u0269\2\u1e22\u1e24\3\2\2\2\u1e23\u1e1f\3\2")
        buf.write(u"\2\2\u1e23\u1e22\3\2\2\2\u1e24\u042f\3\2\2\2\u1e25\u1e26")
        buf.write(u"\7\u0167\2\2\u1e26\u1e27\7\r\2\2\u1e27\u1e28\5\u04c8")
        buf.write(u"\u0265\2\u1e28\u1e29\7\7\2\2\u1e29\u1e2a\5\u0434\u021b")
        buf.write(u"\2\u1e2a\u1e36\3\2\2\2\u1e2b\u1e2c\7\u0167\2\2\u1e2c")
        buf.write(u"\u1e36\5\u0434\u021b\2\u1e2d\u1e2e\7\u0166\2\2\u1e2e")
        buf.write(u"\u1e2f\7\r\2\2\u1e2f\u1e30\5\u04c8\u0265\2\u1e30\u1e31")
        buf.write(u"\7\7\2\2\u1e31\u1e32\5\u0434\u021b\2\u1e32\u1e36\3\2")
        buf.write(u"\2\2\u1e33\u1e34\7\u0166\2\2\u1e34\u1e36\5\u0434\u021b")
        buf.write(u"\2\u1e35\u1e25\3\2\2\2\u1e35\u1e2b\3\2\2\2\u1e35\u1e2d")
        buf.write(u"\3\2\2\2\u1e35\u1e33\3\2\2\2\u1e36\u0431\3\2\2\2\u1e37")
        buf.write(u"\u1e38\7\u00c4\2\2\u1e38\u0433\3\2\2\2\u1e39\u1e3a\7")
        buf.write(u"\u01a5\2\2\u1e3a\u1e40\7\u01a1\2\2\u1e3b\u1e3c\7\u0191")
        buf.write(u"\2\2\u1e3c\u1e3d\7\u0166\2\2\u1e3d\u1e40\7\u01a1\2\2")
        buf.write(u"\u1e3e\u1e40\3\2\2\2\u1e3f\u1e39\3\2\2\2\u1e3f\u1e3b")
        buf.write(u"\3\2\2\2\u1e3f\u1e3e\3\2\2\2\u1e40\u0435\3\2\2\2\u1e41")
        buf.write(u"\u1e5e\7\u019f\2\2\u1e42\u1e5e\7\u00e6\2\2\u1e43\u1e5e")
        buf.write(u"\7j\2\2\u1e44\u1e5e\7\u00ab\2\2\u1e45\u1e5e\7\u00e3\2")
        buf.write(u"\2\u1e46\u1e5e\5\u0438\u021d\2\u1e47\u1e48\7\u019f\2")
        buf.write(u"\2\u1e48\u1e49\7\u0168\2\2\u1e49\u1e5e\7\u00e6\2\2\u1e4a")
        buf.write(u"\u1e4b\7j\2\2\u1e4b\u1e4c\7\u0168\2\2\u1e4c\u1e5e\7\u00ab")
        buf.write(u"\2\2\u1e4d\u1e4e\7j\2\2\u1e4e\u1e4f\7\u0168\2\2\u1e4f")
        buf.write(u"\u1e5e\7\u00e3\2\2\u1e50\u1e51\7j\2\2\u1e51\u1e52\7\u0168")
        buf.write(u"\2\2\u1e52\u1e5e\5\u0438\u021d\2\u1e53\u1e54\7\u00ab")
        buf.write(u"\2\2\u1e54\u1e55\7\u0168\2\2\u1e55\u1e5e\7\u00e3\2\2")
        buf.write(u"\u1e56\u1e57\7\u00ab\2\2\u1e57\u1e58\7\u0168\2\2\u1e58")
        buf.write(u"\u1e5e\5\u0438\u021d\2\u1e59\u1e5a\7\u00e3\2\2\u1e5a")
        buf.write(u"\u1e5b\7\u0168\2\2\u1e5b\u1e5e\5\u0438\u021d\2\u1e5c")
        buf.write(u"\u1e5e\3\2\2\2\u1e5d\u1e41\3\2\2\2\u1e5d\u1e42\3\2\2")
        buf.write(u"\2\u1e5d\u1e43\3\2\2\2\u1e5d\u1e44\3\2\2\2\u1e5d\u1e45")
        buf.write(u"\3\2\2\2\u1e5d\u1e46\3\2\2\2\u1e5d\u1e47\3\2\2\2\u1e5d")
        buf.write(u"\u1e4a\3\2\2\2\u1e5d\u1e4d\3\2\2\2\u1e5d\u1e50\3\2\2")
        buf.write(u"\2\u1e5d\u1e53\3\2\2\2\u1e5d\u1e56\3\2\2\2\u1e5d\u1e59")
        buf.write(u"\3\2\2\2\u1e5d\u1e5c\3\2\2\2\u1e5e\u0437\3\2\2\2\u1e5f")
        buf.write(u"\u1e66\7\u013e\2\2\u1e60\u1e61\7\u013e\2\2\u1e61\u1e62")
        buf.write(u"\7\r\2\2\u1e62\u1e63\5\u04c8\u0265\2\u1e63\u1e64\7\7")
        buf.write(u"\2\2\u1e64\u1e66\3\2\2\2\u1e65\u1e5f\3\2\2\2\u1e65\u1e60")
        buf.write(u"\3\2\2\2\u1e66\u0439\3\2\2\2\u1e67\u1e68\b\u021e\1\2")
        buf.write(u"\u1e68\u1e69\7\t\2\2\u1e69\u1e79\5\u043a\u021e9\u1e6a")
        buf.write(u"\u1e6b\7\n\2\2\u1e6b\u1e79\5\u043a\u021e8\u1e6c\u1e6d")
        buf.write(u"\5\u046e\u0238\2\u1e6d\u1e6e\5\u043a\u021e-\u1e6e\u1e79")
        buf.write(u"\3\2\2\2\u1e6f\u1e70\7\u00f0\2\2\u1e70\u1e79\5\u043a")
        buf.write(u"\u021e)\u1e71\u1e79\5\u043e\u0220\2\u1e72\u1e73\5\u0466")
        buf.write(u"\u0234\2\u1e73\u1e74\7\u0108\2\2\u1e74\u1e75\5\u0466")
        buf.write(u"\u0234\2\u1e75\u1e79\3\2\2\2\u1e76\u1e77\7\u0177\2\2")
        buf.write(u"\u1e77\u1e79\5\u03a2\u01d2\2\u1e78\u1e67\3\2\2\2\u1e78")
        buf.write(u"\u1e6a\3\2\2\2\u1e78\u1e6c\3\2\2\2\u1e78\u1e6f\3\2\2")
        buf.write(u"\2\u1e78\u1e71\3\2\2\2\u1e78\u1e72\3\2\2\2\u1e78\u1e76")
        buf.write(u"\3\2\2\2\u1e79\u1f60\3\2\2\2\u1e7a\u1e7b\f:\2\2\u1e7b")
        buf.write(u"\u1e7c\7,\2\2\u1e7c\u1e7d\7\u0166\2\2\u1e7d\u1e7e\7\u01a1")
        buf.write(u"\2\2\u1e7e\u1f5f\5\u043a\u021e;\u1e7f\u1e80\f\67\2\2")
        buf.write(u"\u1e80\u1e81\7\t\2\2\u1e81\u1f5f\5\u043a\u021e8\u1e82")
        buf.write(u"\u1e83\f\66\2\2\u1e83\u1e84\7\n\2\2\u1e84\u1f5f\5\u043a")
        buf.write(u"\u021e\67\u1e85\u1e86\f\65\2\2\u1e86\u1e87\7\13\2\2\u1e87")
        buf.write(u"\u1f5f\5\u043a\u021e\66\u1e88\u1e89\f\64\2\2\u1e89\u1e8a")
        buf.write(u"\7\23\2\2\u1e8a\u1f5f\5\u043a\u021e\65\u1e8b\u1e8c\f")
        buf.write(u"\63\2\2\u1e8c\u1e8d\7\4\2\2\u1e8d\u1f5f\5\u043a\u021e")
        buf.write(u"\64\u1e8e\u1e8f\f\62\2\2\u1e8f\u1e90\7\5\2\2\u1e90\u1f5f")
        buf.write(u"\5\u043a\u021e\63\u1e91\u1e92\f\61\2\2\u1e92\u1e93\7")
        buf.write(u"\17\2\2\u1e93\u1f5f\5\u043a\u021e\62\u1e94\u1e95\f\60")
        buf.write(u"\2\2\u1e95\u1e96\7\22\2\2\u1e96\u1f5f\5\u043a\u021e\61")
        buf.write(u"\u1e97\u1e98\f/\2\2\u1e98\u1e99\7\20\2\2\u1e99\u1f5f")
        buf.write(u"\5\u043a\u021e\60\u1e9a\u1e9b\f.\2\2\u1e9b\u1e9c\5\u046e")
        buf.write(u"\u0238\2\u1e9c\u1e9d\5\u043a\u021e/\u1e9d\u1f5f\3\2\2")
        buf.write(u"\2\u1e9e\u1e9f\f+\2\2\u1e9f\u1ea0\7$\2\2\u1ea0\u1f5f")
        buf.write(u"\5\u043a\u021e,\u1ea1\u1ea2\f*\2\2\u1ea2\u1ea3\7\u0103")
        buf.write(u"\2\2\u1ea3\u1f5f\5\u043a\u021e+\u1ea4\u1ea5\f(\2\2\u1ea5")
        buf.write(u"\u1ea6\7\u00d7\2\2\u1ea6\u1f5f\5\u043a\u021e)\u1ea7\u1ea8")
        buf.write(u"\f\'\2\2\u1ea8\u1ea9\7\u00d7\2\2\u1ea9\u1eaa\5\u043a")
        buf.write(u"\u021e\2\u1eaa\u1eab\7\u0088\2\2\u1eab\u1eac\5\u043a")
        buf.write(u"\u021e(\u1eac\u1f5f\3\2\2\2\u1ead\u1eae\f&\2\2\u1eae")
        buf.write(u"\u1eaf\7\u00f0\2\2\u1eaf\u1eb0\7\u00d7\2\2\u1eb0\u1f5f")
        buf.write(u"\5\u043a\u021e\'\u1eb1\u1eb2\f%\2\2\u1eb2\u1eb3\7\u00f0")
        buf.write(u"\2\2\u1eb3\u1eb4\7\u00d7\2\2\u1eb4\u1eb5\5\u043a\u021e")
        buf.write(u"\2\u1eb5\u1eb6\7\u0088\2\2\u1eb6\u1eb7\5\u043a\u021e")
        buf.write(u"&\u1eb7\u1f5f\3\2\2\2\u1eb8\u1eb9\f$\2\2\u1eb9\u1eba")
        buf.write(u"\7\u00ae\2\2\u1eba\u1f5f\5\u043a\u021e%\u1ebb\u1ebc\f")
        buf.write(u"#\2\2\u1ebc\u1ebd\7\u00ae\2\2\u1ebd\u1ebe\5\u043a\u021e")
        buf.write(u"\2\u1ebe\u1ebf\7\u0088\2\2\u1ebf\u1ec0\5\u043a\u021e")
        buf.write(u"$\u1ec0\u1f5f\3\2\2\2\u1ec1\u1ec2\f\"\2\2\u1ec2\u1ec3")
        buf.write(u"\7\u00f0\2\2\u1ec3\u1ec4\7\u00ae\2\2\u1ec4\u1f5f\5\u043a")
        buf.write(u"\u021e#\u1ec5\u1ec6\f!\2\2\u1ec6\u1ec7\7\u00f0\2\2\u1ec7")
        buf.write(u"\u1ec8\7\u00ae\2\2\u1ec8\u1ec9\5\u043a\u021e\2\u1ec9")
        buf.write(u"\u1eca\7\u0088\2\2\u1eca\u1ecb\5\u043a\u021e\"\u1ecb")
        buf.write(u"\u1f5f\3\2\2\2\u1ecc\u1ecd\f \2\2\u1ecd\u1ece\7\u014b")
        buf.write(u"\2\2\u1ece\u1ecf\7\u0168\2\2\u1ecf\u1f5f\5\u043a\u021e")
        buf.write(u"!\u1ed0\u1ed1\f\37\2\2\u1ed1\u1ed2\7\u014b\2\2\u1ed2")
        buf.write(u"\u1ed3\7\u0168\2\2\u1ed3\u1ed4\5\u043a\u021e\2\u1ed4")
        buf.write(u"\u1ed5\7\u0088\2\2\u1ed5\u1ed6\5\u043a\u021e \u1ed6\u1f5f")
        buf.write(u"\3\2\2\2\u1ed7\u1ed8\f\36\2\2\u1ed8\u1ed9\7\u00f0\2\2")
        buf.write(u"\u1ed9\u1eda\7\u014b\2\2\u1eda\u1edb\7\u0168\2\2\u1edb")
        buf.write(u"\u1f5f\5\u043a\u021e\37\u1edc\u1edd\f\35\2\2\u1edd\u1ede")
        buf.write(u"\7\u00f0\2\2\u1ede\u1edf\7\u014b\2\2\u1edf\u1ee0\7\u0168")
        buf.write(u"\2\2\u1ee0\u1ee1\5\u043a\u021e\2\u1ee1\u1ee2\7\u0088")
        buf.write(u"\2\2\u1ee2\u1ee3\5\u043a\u021e\36\u1ee3\u1f5f\3\2\2\2")
        buf.write(u"\u1ee4\u1ee5\f\21\2\2\u1ee5\u1ee6\7\u00c7\2\2\u1ee6\u1ee7")
        buf.write(u"\7{\2\2\u1ee7\u1ee8\7\u009e\2\2\u1ee8\u1f5f\5\u043a\u021e")
        buf.write(u"\22\u1ee9\u1eea\f\20\2\2\u1eea\u1eeb\7\u00c7\2\2\u1eeb")
        buf.write(u"\u1eec\7\u00f0\2\2\u1eec\u1eed\7{\2\2\u1eed\u1eee\7\u009e")
        buf.write(u"\2\2\u1eee\u1f5f\5\u043a\u021e\21\u1eef\u1ef0\f<\2\2")
        buf.write(u"\u1ef0\u1ef1\7\u01a6\2\2\u1ef1\u1f5f\5\u040a\u0206\2")
        buf.write(u"\u1ef2\u1ef3\f;\2\2\u1ef3\u1ef4\7J\2\2\u1ef4\u1f5f\5")
        buf.write(u"\u0250\u0129\2\u1ef5\u1ef6\f,\2\2\u1ef6\u1f5f\5\u046e")
        buf.write(u"\u0238\2\u1ef7\u1ef8\f\34\2\2\u1ef8\u1ef9\7\u00c7\2\2")
        buf.write(u"\u1ef9\u1f5f\7\u00f5\2\2\u1efa\u1efb\f\33\2\2\u1efb\u1f5f")
        buf.write(u"\7\u00c8\2\2\u1efc\u1efd\f\32\2\2\u1efd\u1efe\7\u00c7")
        buf.write(u"\2\2\u1efe\u1eff\7\u00f0\2\2\u1eff\u1f5f\7\u00f5\2\2")
        buf.write(u"\u1f00\u1f01\f\31\2\2\u1f01\u1f5f\7\u00f3\2\2\u1f02\u1f03")
        buf.write(u"\f\27\2\2\u1f03\u1f04\7\u00c7\2\2\u1f04\u1f5f\7\u016e")
        buf.write(u"\2\2\u1f05\u1f06\f\26\2\2\u1f06\u1f07\7\u00c7\2\2\u1f07")
        buf.write(u"\u1f08\7\u00f0\2\2\u1f08\u1f5f\7\u016e\2\2\u1f09\u1f0a")
        buf.write(u"\f\25\2\2\u1f0a\u1f0b\7\u00c7\2\2\u1f0b\u1f5f\7\u0093")
        buf.write(u"\2\2\u1f0c\u1f0d\f\24\2\2\u1f0d\u1f0e\7\u00c7\2\2\u1f0e")
        buf.write(u"\u1f0f\7\u00f0\2\2\u1f0f\u1f5f\7\u0093\2\2\u1f10\u1f11")
        buf.write(u"\f\23\2\2\u1f11\u1f12\7\u00c7\2\2\u1f12\u1f5f\7\u0178")
        buf.write(u"\2\2\u1f13\u1f14\f\22\2\2\u1f14\u1f15\7\u00c7\2\2\u1f15")
        buf.write(u"\u1f16\7\u00f0\2\2\u1f16\u1f5f\7\u0178\2\2\u1f17\u1f18")
        buf.write(u"\f\17\2\2\u1f18\u1f19\7\u00c7\2\2\u1f19\u1f1a\7\u00fa")
        buf.write(u"\2\2\u1f1a\u1f1b\7\r\2\2\u1f1b\u1f1c\5\u047a\u023e\2")
        buf.write(u"\u1f1c\u1f1d\7\7\2\2\u1f1d\u1f5f\3\2\2\2\u1f1e\u1f1f")
        buf.write(u"\f\16\2\2\u1f1f\u1f20\7\u00c7\2\2\u1f20\u1f21\7\u00f0")
        buf.write(u"\2\2\u1f21\u1f22\7\u00fa\2\2\u1f22\u1f23\7\r\2\2\u1f23")
        buf.write(u"\u1f24\5\u047a\u023e\2\u1f24\u1f25\7\7\2\2\u1f25\u1f5f")
        buf.write(u"\3\2\2\2\u1f26\u1f27\f\r\2\2\u1f27\u1f28\7\62\2\2\u1f28")
        buf.write(u"\u1f29\5\u04a6\u0254\2\u1f29\u1f2a\5\u043c\u021f\2\u1f2a")
        buf.write(u"\u1f2b\7$\2\2\u1f2b\u1f2c\5\u043c\u021f\2\u1f2c\u1f5f")
        buf.write(u"\3\2\2\2\u1f2d\u1f2e\f\f\2\2\u1f2e\u1f2f\7\u00f0\2\2")
        buf.write(u"\u1f2f\u1f30\7\62\2\2\u1f30\u1f31\5\u04a6\u0254\2\u1f31")
        buf.write(u"\u1f32\5\u043c\u021f\2\u1f32\u1f33\7$\2\2\u1f33\u1f34")
        buf.write(u"\5\u043c\u021f\2\u1f34\u1f5f\3\2\2\2\u1f35\u1f36\f\13")
        buf.write(u"\2\2\u1f36\u1f37\7\62\2\2\u1f37\u1f38\7\u015b\2\2\u1f38")
        buf.write(u"\u1f39\5\u043c\u021f\2\u1f39\u1f3a\7$\2\2\u1f3a\u1f3b")
        buf.write(u"\5\u043c\u021f\2\u1f3b\u1f5f\3\2\2\2\u1f3c\u1f3d\f\n")
        buf.write(u"\2\2\u1f3d\u1f3e\7\u00f0\2\2\u1f3e\u1f3f\7\62\2\2\u1f3f")
        buf.write(u"\u1f40\7\u015b\2\2\u1f40\u1f41\5\u043c\u021f\2\u1f41")
        buf.write(u"\u1f42\7$\2\2\u1f42\u1f43\5\u043c\u021f\2\u1f43\u1f5f")
        buf.write(u"\3\2\2\2\u1f44\u1f45\f\t\2\2\u1f45\u1f46\7\u00b2\2\2")
        buf.write(u"\u1f46\u1f5f\5\u0492\u024a\2\u1f47\u1f48\f\b\2\2\u1f48")
        buf.write(u"\u1f49\7\u00f0\2\2\u1f49\u1f4a\7\u00b2\2\2\u1f4a\u1f5f")
        buf.write(u"\5\u0492\u024a\2\u1f4b\u1f4c\f\7\2\2\u1f4c\u1f4d\5\u0472")
        buf.write(u"\u023a\2\u1f4d\u1f4e\5\u0468\u0235\2\u1f4e\u1f4f\5\u03a2")
        buf.write(u"\u01d2\2\u1f4f\u1f5f\3\2\2\2\u1f50\u1f51\f\6\2\2\u1f51")
        buf.write(u"\u1f52\5\u0472\u023a\2\u1f52\u1f53\5\u0468\u0235\2\u1f53")
        buf.write(u"\u1f54\7\r\2\2\u1f54\u1f55\5\u043a\u021e\2\u1f55\u1f56")
        buf.write(u"\7\7\2\2\u1f56\u1f5f\3\2\2\2\u1f57\u1f58\f\4\2\2\u1f58")
        buf.write(u"\u1f59\7\u00c7\2\2\u1f59\u1f5f\7}\2\2\u1f5a\u1f5b\f\3")
        buf.write(u"\2\2\u1f5b\u1f5c\7\u00c7\2\2\u1f5c\u1f5d\7\u00f0\2\2")
        buf.write(u"\u1f5d\u1f5f\7}\2\2\u1f5e\u1e7a\3\2\2\2\u1f5e\u1e7f\3")
        buf.write(u"\2\2\2\u1f5e\u1e82\3\2\2\2\u1f5e\u1e85\3\2\2\2\u1f5e")
        buf.write(u"\u1e88\3\2\2\2\u1f5e\u1e8b\3\2\2\2\u1f5e\u1e8e\3\2\2")
        buf.write(u"\2\u1f5e\u1e91\3\2\2\2\u1f5e\u1e94\3\2\2\2\u1f5e\u1e97")
        buf.write(u"\3\2\2\2\u1f5e\u1e9a\3\2\2\2\u1f5e\u1e9e\3\2\2\2\u1f5e")
        buf.write(u"\u1ea1\3\2\2\2\u1f5e\u1ea4\3\2\2\2\u1f5e\u1ea7\3\2\2")
        buf.write(u"\2\u1f5e\u1ead\3\2\2\2\u1f5e\u1eb1\3\2\2\2\u1f5e\u1eb8")
        buf.write(u"\3\2\2\2\u1f5e\u1ebb\3\2\2\2\u1f5e\u1ec1\3\2\2\2\u1f5e")
        buf.write(u"\u1ec5\3\2\2\2\u1f5e\u1ecc\3\2\2\2\u1f5e\u1ed0\3\2\2")
        buf.write(u"\2\u1f5e\u1ed7\3\2\2\2\u1f5e\u1edc\3\2\2\2\u1f5e\u1ee4")
        buf.write(u"\3\2\2\2\u1f5e\u1ee9\3\2\2\2\u1f5e\u1eef\3\2\2\2\u1f5e")
        buf.write(u"\u1ef2\3\2\2\2\u1f5e\u1ef5\3\2\2\2\u1f5e\u1ef7\3\2\2")
        buf.write(u"\2\u1f5e\u1efa\3\2\2\2\u1f5e\u1efc\3\2\2\2\u1f5e\u1f00")
        buf.write(u"\3\2\2\2\u1f5e\u1f02\3\2\2\2\u1f5e\u1f05\3\2\2\2\u1f5e")
        buf.write(u"\u1f09\3\2\2\2\u1f5e\u1f0c\3\2\2\2\u1f5e\u1f10\3\2\2")
        buf.write(u"\2\u1f5e\u1f13\3\2\2\2\u1f5e\u1f17\3\2\2\2\u1f5e\u1f1e")
        buf.write(u"\3\2\2\2\u1f5e\u1f26\3\2\2\2\u1f5e\u1f2d\3\2\2\2\u1f5e")
        buf.write(u"\u1f35\3\2\2\2\u1f5e\u1f3c\3\2\2\2\u1f5e\u1f44\3\2\2")
        buf.write(u"\2\u1f5e\u1f47\3\2\2\2\u1f5e\u1f4b\3\2\2\2\u1f5e\u1f50")
        buf.write(u"\3\2\2\2\u1f5e\u1f57\3\2\2\2\u1f5e\u1f5a\3\2\2\2\u1f5f")
        buf.write(u"\u1f62\3\2\2\2\u1f60\u1f5e\3\2\2\2\u1f60\u1f61\3\2\2")
        buf.write(u"\2\u1f61\u043b\3\2\2\2\u1f62\u1f60\3\2\2\2\u1f63\u1f64")
        buf.write(u"\b\u021f\1\2\u1f64\u1f65\7\t\2\2\u1f65\u1f6d\5\u043c")
        buf.write(u"\u021f\26\u1f66\u1f67\7\n\2\2\u1f67\u1f6d\5\u043c\u021f")
        buf.write(u"\25\u1f68\u1f69\5\u046e\u0238\2\u1f69\u1f6a\5\u043c\u021f")
        buf.write(u"\n\u1f6a\u1f6d\3\2\2\2\u1f6b\u1f6d\5\u043e\u0220\2\u1f6c")
        buf.write(u"\u1f63\3\2\2\2\u1f6c\u1f66\3\2\2\2\u1f6c\u1f68\3\2\2")
        buf.write(u"\2\u1f6c\u1f6b\3\2\2\2\u1f6d\u1fb5\3\2\2\2\u1f6e\u1f6f")
        buf.write(u"\f\24\2\2\u1f6f\u1f70\7\t\2\2\u1f70\u1fb4\5\u043c\u021f")
        buf.write(u"\25\u1f71\u1f72\f\23\2\2\u1f72\u1f73\7\n\2\2\u1f73\u1fb4")
        buf.write(u"\5\u043c\u021f\24\u1f74\u1f75\f\22\2\2\u1f75\u1f76\7")
        buf.write(u"\13\2\2\u1f76\u1fb4\5\u043c\u021f\23\u1f77\u1f78\f\21")
        buf.write(u"\2\2\u1f78\u1f79\7\23\2\2\u1f79\u1fb4\5\u043c\u021f\22")
        buf.write(u"\u1f7a\u1f7b\f\20\2\2\u1f7b\u1f7c\7\4\2\2\u1f7c\u1fb4")
        buf.write(u"\5\u043c\u021f\21\u1f7d\u1f7e\f\17\2\2\u1f7e\u1f7f\7")
        buf.write(u"\5\2\2\u1f7f\u1fb4\5\u043c\u021f\20\u1f80\u1f81\f\16")
        buf.write(u"\2\2\u1f81\u1f82\7\17\2\2\u1f82\u1fb4\5\u043c\u021f\17")
        buf.write(u"\u1f83\u1f84\f\r\2\2\u1f84\u1f85\7\22\2\2\u1f85\u1fb4")
        buf.write(u"\5\u043c\u021f\16\u1f86\u1f87\f\f\2\2\u1f87\u1f88\7\20")
        buf.write(u"\2\2\u1f88\u1fb4\5\u043c\u021f\r\u1f89\u1f8a\f\13\2\2")
        buf.write(u"\u1f8a\u1f8b\5\u046e\u0238\2\u1f8b\u1f8c\5\u043c\u021f")
        buf.write(u"\f\u1f8c\u1fb4\3\2\2\2\u1f8d\u1f8e\f\b\2\2\u1f8e\u1f8f")
        buf.write(u"\7\u00c7\2\2\u1f8f\u1f90\7{\2\2\u1f90\u1f91\7\u009e\2")
        buf.write(u"\2\u1f91\u1fb4\5\u043c\u021f\t\u1f92\u1f93\f\7\2\2\u1f93")
        buf.write(u"\u1f94\7\u00c7\2\2\u1f94\u1f95\7\u00f0\2\2\u1f95\u1f96")
        buf.write(u"\7{\2\2\u1f96\u1f97\7\u009e\2\2\u1f97\u1fb4\5\u043c\u021f")
        buf.write(u"\b\u1f98\u1f99\f\27\2\2\u1f99\u1f9a\7\u01a6\2\2\u1f9a")
        buf.write(u"\u1fb4\5\u040a\u0206\2\u1f9b\u1f9c\f\t\2\2\u1f9c\u1fb4")
        buf.write(u"\5\u046e\u0238\2\u1f9d\u1f9e\f\6\2\2\u1f9e\u1f9f\7\u00c7")
        buf.write(u"\2\2\u1f9f\u1fa0\7\u00fa\2\2\u1fa0\u1fa1\7\r\2\2\u1fa1")
        buf.write(u"\u1fa2\5\u047a\u023e\2\u1fa2\u1fa3\7\7\2\2\u1fa3\u1fb4")
        buf.write(u"\3\2\2\2\u1fa4\u1fa5\f\5\2\2\u1fa5\u1fa6\7\u00c7\2\2")
        buf.write(u"\u1fa6\u1fa7\7\u00f0\2\2\u1fa7\u1fa8\7\u00fa\2\2\u1fa8")
        buf.write(u"\u1fa9\7\r\2\2\u1fa9\u1faa\5\u047a\u023e\2\u1faa\u1fab")
        buf.write(u"\7\7\2\2\u1fab\u1fb4\3\2\2\2\u1fac\u1fad\f\4\2\2\u1fad")
        buf.write(u"\u1fae\7\u00c7\2\2\u1fae\u1fb4\7}\2\2\u1faf\u1fb0\f\3")
        buf.write(u"\2\2\u1fb0\u1fb1\7\u00c7\2\2\u1fb1\u1fb2\7\u00f0\2\2")
        buf.write(u"\u1fb2\u1fb4\7}\2\2\u1fb3\u1f6e\3\2\2\2\u1fb3\u1f71\3")
        buf.write(u"\2\2\2\u1fb3\u1f74\3\2\2\2\u1fb3\u1f77\3\2\2\2\u1fb3")
        buf.write(u"\u1f7a\3\2\2\2\u1fb3\u1f7d\3\2\2\2\u1fb3\u1f80\3\2\2")
        buf.write(u"\2\u1fb3\u1f83\3\2\2\2\u1fb3\u1f86\3\2\2\2\u1fb3\u1f89")
        buf.write(u"\3\2\2\2\u1fb3\u1f8d\3\2\2\2\u1fb3\u1f92\3\2\2\2\u1fb3")
        buf.write(u"\u1f98\3\2\2\2\u1fb3\u1f9b\3\2\2\2\u1fb3\u1f9d\3\2\2")
        buf.write(u"\2\u1fb3\u1fa4\3\2\2\2\u1fb3\u1fac\3\2\2\2\u1fb3\u1faf")
        buf.write(u"\3\2\2\2\u1fb4\u1fb7\3\2\2\2\u1fb5\u1fb3\3\2\2\2\u1fb5")
        buf.write(u"\u1fb6\3\2\2\2\u1fb6\u043d\3\2\2\2\u1fb7\u1fb5\3\2\2")
        buf.write(u"\2\u1fb8\u1fcc\5\u049e\u0250\2\u1fb9\u1fcc\5\u04c6\u0264")
        buf.write(u"\2\u1fba\u1fbb\7\u01b3\2\2\u1fbb\u1fcc\5\u04a4\u0253")
        buf.write(u"\2\u1fbc\u1fbd\7\r\2\2\u1fbd\u1fbe\5\u043a\u021e\2\u1fbe")
        buf.write(u"\u1fbf\7\7\2\2\u1fbf\u1fc0\5\u04a4\u0253\2\u1fc0\u1fcc")
        buf.write(u"\3\2\2\2\u1fc1\u1fcc\5\u0494\u024b\2\u1fc2\u1fcc\5\u0440")
        buf.write(u"\u0221\2\u1fc3\u1fcc\5\u03a2\u01d2\2\u1fc4\u1fc5\7\u008e")
        buf.write(u"\2\2\u1fc5\u1fcc\5\u03a2\u01d2\2\u1fc6\u1fc7\7&\2\2\u1fc7")
        buf.write(u"\u1fcc\5\u03a2\u01d2\2\u1fc8\u1fc9\7&\2\2\u1fc9\u1fcc")
        buf.write(u"\5\u047c\u023f\2\u1fca\u1fcc\5\u0466\u0234\2\u1fcb\u1fb8")
        buf.write(u"\3\2\2\2\u1fcb\u1fb9\3\2\2\2\u1fcb\u1fba\3\2\2\2\u1fcb")
        buf.write(u"\u1fbc\3\2\2\2\u1fcb\u1fc1\3\2\2\2\u1fcb\u1fc2\3\2\2")
        buf.write(u"\2\u1fcb\u1fc3\3\2\2\2\u1fcb\u1fc4\3\2\2\2\u1fcb\u1fc6")
        buf.write(u"\3\2\2\2\u1fcb\u1fc8\3\2\2\2\u1fcb\u1fca\3\2\2\2\u1fcc")
        buf.write(u"\u043f\3\2\2\2\u1fcd\u1fce\5\u04c4\u0263\2\u1fce\u1fcf")
        buf.write(u"\7\r\2\2\u1fcf\u1fd0\7\7\2\2\u1fd0\u1fd1\5\u0458\u022d")
        buf.write(u"\2\u1fd1\u20cf\3\2\2\2\u1fd2\u1fd3\5\u04c4\u0263\2\u1fd3")
        buf.write(u"\u1fd4\7\r\2\2\u1fd4\u1fd5\5\u0476\u023c\2\u1fd5\u1fd6")
        buf.write(u"\7\7\2\2\u1fd6\u1fd7\5\u0458\u022d\2\u1fd7\u20cf\3\2")
        buf.write(u"\2\2\u1fd8\u1fd9\5\u04c4\u0263\2\u1fd9\u1fda\7\r\2\2")
        buf.write(u"\u1fda\u1fdb\7\u0186\2\2\u1fdb\u1fdc\5\u0478\u023d\2")
        buf.write(u"\u1fdc\u1fdd\7\7\2\2\u1fdd\u1fde\5\u0458\u022d\2\u1fde")
        buf.write(u"\u20cf\3\2\2\2\u1fdf\u1fe0\5\u04c4\u0263\2\u1fe0\u1fe1")
        buf.write(u"\7\r\2\2\u1fe1\u1fe2\5\u0476\u023c\2\u1fe2\u1fe3\7\b")
        buf.write(u"\2\2\u1fe3\u1fe4\7\u0186\2\2\u1fe4\u1fe5\5\u0478\u023d")
        buf.write(u"\2\u1fe5\u1fe6\7\7\2\2\u1fe6\u1fe7\5\u0458\u022d\2\u1fe7")
        buf.write(u"\u20cf\3\2\2\2\u1fe8\u1fe9\5\u04c4\u0263\2\u1fe9\u1fea")
        buf.write(u"\7\r\2\2\u1fea\u1feb\5\u0476\u023c\2\u1feb\u1fec\5\u03be")
        buf.write(u"\u01e0\2\u1fec\u1fed\7\7\2\2\u1fed\u1fee\5\u0458\u022d")
        buf.write(u"\2\u1fee\u20cf\3\2\2\2\u1fef\u1ff0\5\u04c4\u0263\2\u1ff0")
        buf.write(u"\u1ff1\7\r\2\2\u1ff1\u1ff2\7\36\2\2\u1ff2\u1ff3\5\u0476")
        buf.write(u"\u023c\2\u1ff3\u1ff4\5\u03bc\u01df\2\u1ff4\u1ff5\7\7")
        buf.write(u"\2\2\u1ff5\u1ff6\5\u0458\u022d\2\u1ff6\u20cf\3\2\2\2")
        buf.write(u"\u1ff7\u1ff8\5\u04c4\u0263\2\u1ff8\u1ff9\7\r\2\2\u1ff9")
        buf.write(u"\u1ffa\7{\2\2\u1ffa\u1ffb\5\u0476\u023c\2\u1ffb\u1ffc")
        buf.write(u"\5\u03bc\u01df\2\u1ffc\u1ffd\7\7\2\2\u1ffd\u1ffe\5\u0458")
        buf.write(u"\u022d\2\u1ffe\u20cf\3\2\2\2\u1fff\u2000\5\u04c4\u0263")
        buf.write(u"\2\u2000\u2001\7\r\2\2\u2001\u2002\7\13\2\2\u2002\u2003")
        buf.write(u"\7\7\2\2\u2003\u2004\5\u0458\u022d\2\u2004\u20cf\3\2")
        buf.write(u"\2\2\u2005\u2006\7K\2\2\u2006\u2007\7\u0099\2\2\u2007")
        buf.write(u"\u2008\7\r\2\2\u2008\u2009\5\u043a\u021e\2\u2009\u200a")
        buf.write(u"\7\7\2\2\u200a\u20cf\3\2\2\2\u200b\u20cf\7`\2\2\u200c")
        buf.write(u"\u20cf\7c\2\2\u200d\u200e\7c\2\2\u200e\u200f\7\r\2\2")
        buf.write(u"\u200f\u2010\5\u04c8\u0265\2\u2010\u2011\7\7\2\2\u2011")
        buf.write(u"\u20cf\3\2\2\2\u2012\u20cf\7d\2\2\u2013\u2014\7d\2\2")
        buf.write(u"\u2014\u2015\7\r\2\2\u2015\u2016\5\u04c8\u0265\2\u2016")
        buf.write(u"\u2017\7\7\2\2\u2017\u20cf\3\2\2\2\u2018\u20cf\7\u00dc")
        buf.write(u"\2\2\u2019\u201a\7\u00dc\2\2\u201a\u201b\7\r\2\2\u201b")
        buf.write(u"\u201c\5\u04c8\u0265\2\u201c\u201d\7\7\2\2\u201d\u20cf")
        buf.write(u"\3\2\2\2\u201e\u20cf\7\u00dd\2\2\u201f\u2020\7\u00dd")
        buf.write(u"\2\2\u2020\u2021\7\r\2\2\u2021\u2022\5\u04c8\u0265\2")
        buf.write(u"\u2022\u2023\7\7\2\2\u2023\u20cf\3\2\2\2\u2024\u20cf")
        buf.write(u"\7a\2\2\u2025\u20cf\7e\2\2\u2026\u20cf\7\u0146\2\2\u2027")
        buf.write(u"\u20cf\7\u017d\2\2\u2028\u20cf\7_\2\2\u2029\u20cf\7b")
        buf.write(u"\2\2\u202a\u202b\7>\2\2\u202b\u202c\7\r\2\2\u202c\u202d")
        buf.write(u"\5\u043a\u021e\2\u202d\u202e\7\'\2\2\u202e\u202f\5\u040a")
        buf.write(u"\u0206\2\u202f\u2030\7\7\2\2\u2030\u20cf\3\2\2\2\u2031")
        buf.write(u"\u2032\7\u0092\2\2\u2032\u2033\7\r\2\2\u2033\u2034\5")
        buf.write(u"\u0480\u0241\2\u2034\u2035\7\7\2\2\u2035\u20cf\3\2\2")
        buf.write(u"\2\u2036\u2037\7\u0109\2\2\u2037\u2038\7\r\2\2\u2038")
        buf.write(u"\u2039\5\u0484\u0243\2\u2039\u203a\7\7\2\2\u203a\u20cf")
        buf.write(u"\3\2\2\2\u203b\u203c\7\u0113\2\2\u203c\u203d\7\r\2\2")
        buf.write(u"\u203d\u203e\5\u0488\u0245\2\u203e\u203f\7\7\2\2\u203f")
        buf.write(u"\u20cf\3\2\2\2\u2040\u2041\7\u015a\2\2\u2041\u2042\7")
        buf.write(u"\r\2\2\u2042\u2043\5\u048a\u0246\2\u2043\u2044\7\7\2")
        buf.write(u"\2\u2044\u20cf\3\2\2\2\u2045\u2046\7\u016b\2\2\u2046")
        buf.write(u"\u2047\7\r\2\2\u2047\u2048\5\u043a\u021e\2\u2048\u2049")
        buf.write(u"\7\'\2\2\u2049\u204a\5\u040a\u0206\2\u204a\u204b\7\7")
        buf.write(u"\2\2\u204b\u20cf\3\2\2\2\u204c\u204d\7\u016d\2\2\u204d")
        buf.write(u"\u204e\7\r\2\2\u204e\u204f\7\67\2\2\u204f\u2050\5\u0490")
        buf.write(u"\u0249\2\u2050\u2051\7\7\2\2\u2051\u20cf\3\2\2\2\u2052")
        buf.write(u"\u2053\7\u016d\2\2\u2053\u2054\7\r\2\2\u2054\u2055\7")
        buf.write(u"\u00d2\2\2\u2055\u2056\5\u0490\u0249\2\u2056\u2057\7")
        buf.write(u"\7\2\2\u2057\u20cf\3\2\2\2\u2058\u2059\7\u016d\2\2\u2059")
        buf.write(u"\u205a\7\r\2\2\u205a\u205b\7\u0169\2\2\u205b\u205c\5")
        buf.write(u"\u0490\u0249\2\u205c\u205d\7\7\2\2\u205d\u20cf\3\2\2")
        buf.write(u"\2\u205e\u205f\7\u016d\2\2\u205f\u2060\7\r\2\2\u2060")
        buf.write(u"\u2061\5\u0490\u0249\2\u2061\u2062\7\7\2\2\u2062\u20cf")
        buf.write(u"\3\2\2\2\u2063\u2064\7\u00f6\2\2\u2064\u2065\7\r\2\2")
        buf.write(u"\u2065\u2066\5\u043a\u021e\2\u2066\u2067\7\b\2\2\u2067")
        buf.write(u"\u2068\5\u043a\u021e\2\u2068\u2069\7\7\2\2\u2069\u20cf")
        buf.write(u"\3\2\2\2\u206a\u206b\7I\2\2\u206b\u206c\7\r\2\2\u206c")
        buf.write(u"\u206d\5\u0474\u023b\2\u206d\u206e\7\7\2\2\u206e\u20cf")
        buf.write(u"\3\2\2\2\u206f\u2070\7\u00a5\2\2\u2070\u2071\7\r\2\2")
        buf.write(u"\u2071\u2072\5\u0474\u023b\2\u2072\u2073\7\7\2\2\u2073")
        buf.write(u"\u20cf\3\2\2\2\u2074\u2075\7\u00d4\2\2\u2075\u2076\7")
        buf.write(u"\r\2\2\u2076\u2077\5\u0474\u023b\2\u2077\u2078\7\7\2")
        buf.write(u"\2\u2078\u20cf\3\2\2\2\u2079\u207a\7\u0197\2\2\u207a")
        buf.write(u"\u207b\7\r\2\2\u207b\u207c\5\u0474\u023b\2\u207c\u207d")
        buf.write(u"\7\7\2\2\u207d\u20cf\3\2\2\2\u207e\u207f\7\u0198\2\2")
        buf.write(u"\u207f\u2080\7\r\2\2\u2080\u2081\7\u00e8\2\2\u2081\u2082")
        buf.write(u"\5\u04d4\u026b\2\u2082\u2083\7\7\2\2\u2083\u20cf\3\2")
        buf.write(u"\2\2\u2084\u2085\7\u0198\2\2\u2085\u2086\7\r\2\2\u2086")
        buf.write(u"\u2087\7\u00e8\2\2\u2087\u2088\5\u04d4\u026b\2\u2088")
        buf.write(u"\u2089\7\b\2\2\u2089\u208a\5\u0446\u0224\2\u208a\u208b")
        buf.write(u"\7\7\2\2\u208b\u20cf\3\2\2\2\u208c\u208d\7\u0198\2\2")
        buf.write(u"\u208d\u208e\7\r\2\2\u208e\u208f\7\u00e8\2\2\u208f\u2090")
        buf.write(u"\5\u04d4\u026b\2\u2090\u2091\7\b\2\2\u2091\u2092\5\u0474")
        buf.write(u"\u023b\2\u2092\u2093\7\7\2\2\u2093\u20cf\3\2\2\2\u2094")
        buf.write(u"\u2095\7\u0198\2\2\u2095\u2096\7\r\2\2\u2096\u2097\7")
        buf.write(u"\u00e8\2\2\u2097\u2098\5\u04d4\u026b\2\u2098\u2099\7")
        buf.write(u"\b\2\2\u2099\u209a\5\u0446\u0224\2\u209a\u209b\7\b\2")
        buf.write(u"\2\u209b\u209c\5\u0474\u023b\2\u209c\u209d\7\7\2\2\u209d")
        buf.write(u"\u20cf\3\2\2\2\u209e\u209f\7\u0199\2\2\u209f\u20a0\7")
        buf.write(u"\r\2\2\u20a0\u20a1\5\u043e\u0220\2\u20a1\u20a2\5\u0450")
        buf.write(u"\u0229\2\u20a2\u20a3\7\7\2\2\u20a3\u20cf\3\2\2\2\u20a4")
        buf.write(u"\u20a5\7\u019a\2\2\u20a5\u20a6\7\r\2\2\u20a6\u20a7\5")
        buf.write(u"\u0448\u0225\2\u20a7\u20a8\7\7\2\2\u20a8\u20cf\3\2\2")
        buf.write(u"\2\u20a9\u20aa\7\u019b\2\2\u20aa\u20ab\7\r\2\2\u20ab")
        buf.write(u"\u20ac\5\u044c\u0227\2\u20ac\u20ad\5\u043a\u021e\2\u20ad")
        buf.write(u"\u20ae\5\u044e\u0228\2\u20ae\u20af\7\7\2\2\u20af\u20cf")
        buf.write(u"\3\2\2\2\u20b0\u20b1\7\u019c\2\2\u20b1\u20b2\7\r\2\2")
        buf.write(u"\u20b2\u20b3\7\u00e8\2\2\u20b3\u20b4\5\u04d4\u026b\2")
        buf.write(u"\u20b4\u20b5\7\7\2\2\u20b5\u20cf\3\2\2\2\u20b6\u20b7")
        buf.write(u"\7\u019c\2\2\u20b7\u20b8\7\r\2\2\u20b8\u20b9\7\u00e8")
        buf.write(u"\2\2\u20b9\u20ba\5\u04d4\u026b\2\u20ba\u20bb\7\b\2\2")
        buf.write(u"\u20bb\u20bc\5\u043a\u021e\2\u20bc\u20bd\7\7\2\2\u20bd")
        buf.write(u"\u20cf\3\2\2\2\u20be\u20bf\7\u019d\2\2\u20bf\u20c0\7")
        buf.write(u"\r\2\2\u20c0\u20c1\5\u043a\u021e\2\u20c1\u20c2\7\b\2")
        buf.write(u"\2\u20c2\u20c3\5\u0442\u0222\2\u20c3\u20c4\5\u0444\u0223")
        buf.write(u"\2\u20c4\u20c5\7\7\2\2\u20c5\u20cf\3\2\2\2\u20c6\u20c7")
        buf.write(u"\7\u019e\2\2\u20c7\u20c8\7\r\2\2\u20c8\u20c9\5\u044c")
        buf.write(u"\u0227\2\u20c9\u20ca\5\u043a\u021e\2\u20ca\u20cb\7\'")
        buf.write(u"\2\2\u20cb\u20cc\5\u040e\u0208\2\u20cc\u20cd\7\7\2\2")
        buf.write(u"\u20cd\u20cf\3\2\2\2\u20ce\u1fcd\3\2\2\2\u20ce\u1fd2")
        buf.write(u"\3\2\2\2\u20ce\u1fd8\3\2\2\2\u20ce\u1fdf\3\2\2\2\u20ce")
        buf.write(u"\u1fe8\3\2\2\2\u20ce\u1fef\3\2\2\2\u20ce\u1ff7\3\2\2")
        buf.write(u"\2\u20ce\u1fff\3\2\2\2\u20ce\u2005\3\2\2\2\u20ce\u200b")
        buf.write(u"\3\2\2\2\u20ce\u200c\3\2\2\2\u20ce\u200d\3\2\2\2\u20ce")
        buf.write(u"\u2012\3\2\2\2\u20ce\u2013\3\2\2\2\u20ce\u2018\3\2\2")
        buf.write(u"\2\u20ce\u2019\3\2\2\2\u20ce\u201e\3\2\2\2\u20ce\u201f")
        buf.write(u"\3\2\2\2\u20ce\u2024\3\2\2\2\u20ce\u2025\3\2\2\2\u20ce")
        buf.write(u"\u2026\3\2\2\2\u20ce\u2027\3\2\2\2\u20ce\u2028\3\2\2")
        buf.write(u"\2\u20ce\u2029\3\2\2\2\u20ce\u202a\3\2\2\2\u20ce\u2031")
        buf.write(u"\3\2\2\2\u20ce\u2036\3\2\2\2\u20ce\u203b\3\2\2\2\u20ce")
        buf.write(u"\u2040\3\2\2\2\u20ce\u2045\3\2\2\2\u20ce\u204c\3\2\2")
        buf.write(u"\2\u20ce\u2052\3\2\2\2\u20ce\u2058\3\2\2\2\u20ce\u205e")
        buf.write(u"\3\2\2\2\u20ce\u2063\3\2\2\2\u20ce\u206a\3\2\2\2\u20ce")
        buf.write(u"\u206f\3\2\2\2\u20ce\u2074\3\2\2\2\u20ce\u2079\3\2\2")
        buf.write(u"\2\u20ce\u207e\3\2\2\2\u20ce\u2084\3\2\2\2\u20ce\u208c")
        buf.write(u"\3\2\2\2\u20ce\u2094\3\2\2\2\u20ce\u209e\3\2\2\2\u20ce")
        buf.write(u"\u20a4\3\2\2\2\u20ce\u20a9\3\2\2\2\u20ce\u20b0\3\2\2")
        buf.write(u"\2\u20ce\u20b6\3\2\2\2\u20ce\u20be\3\2\2\2\u20ce\u20c6")
        buf.write(u"\3\2\2\2\u20cf\u0441\3\2\2\2\u20d0\u20d1\7\u0189\2\2")
        buf.write(u"\u20d1\u20d6\5\u043a\u021e\2\u20d2\u20d3\7\u0189\2\2")
        buf.write(u"\u20d3\u20d4\7\u00ee\2\2\u20d4\u20d6\7\u0183\2\2\u20d5")
        buf.write(u"\u20d0\3\2\2\2\u20d5\u20d2\3\2\2\2\u20d6\u0443\3\2\2")
        buf.write(u"\2\u20d7\u20d8\7\b\2\2\u20d8\u20d9\7\u0151\2\2\u20d9")
        buf.write(u"\u20e3\7\u01a0\2\2\u20da\u20db\7\b\2\2\u20db\u20dc\7")
        buf.write(u"\u0151\2\2\u20dc\u20e3\7\u00ee\2\2\u20dd\u20de\7\b\2")
        buf.write(u"\2\u20de\u20df\7\u0151\2\2\u20df\u20e0\7\u00ee\2\2\u20e0")
        buf.write(u"\u20e3\7\u0183\2\2\u20e1\u20e3\3\2\2\2\u20e2\u20d7\3")
        buf.write(u"\2\2\2\u20e2\u20da\3\2\2\2\u20e2\u20dd\3\2\2\2\u20e2")
        buf.write(u"\u20e1\3\2\2\2\u20e3\u0445\3\2\2\2\u20e4\u20e5\7\u0196")
        buf.write(u"\2\2\u20e5\u20e6\7\r\2\2\u20e6\u20e7\5\u0448\u0225\2")
        buf.write(u"\u20e7\u20e8\7\7\2\2\u20e8\u0447\3\2\2\2\u20e9\u20ea")
        buf.write(u"\b\u0225\1\2\u20ea\u20eb\5\u044a\u0226\2\u20eb\u20f1")
        buf.write(u"\3\2\2\2\u20ec\u20ed\f\3\2\2\u20ed\u20ee\7\b\2\2\u20ee")
        buf.write(u"\u20f0\5\u044a\u0226\2\u20ef\u20ec\3\2\2\2\u20f0\u20f3")
        buf.write(u"\3\2\2\2\u20f1\u20ef\3\2\2\2\u20f1\u20f2\3\2\2\2\u20f2")
        buf.write(u"\u0449\3\2\2\2\u20f3\u20f1\3\2\2\2\u20f4\u20f5\5\u043a")
        buf.write(u"\u021e\2\u20f5\u20f6\7\'\2\2\u20f6\u20f7\5\u04d4\u026b")
        buf.write(u"\2\u20f7\u20fa\3\2\2\2\u20f8\u20fa\5\u043a\u021e\2\u20f9")
        buf.write(u"\u20f4\3\2\2\2\u20f9\u20f8\3\2\2\2\u20fa\u044b\3\2\2")
        buf.write(u"\2\u20fb\u20fc\t\26\2\2\u20fc\u044d\3\2\2\2\u20fd\u20fe")
        buf.write(u"\7\u0118\2\2\u20fe\u2103\7\u018e\2\2\u20ff\u2100\7\u0159")
        buf.write(u"\2\2\u2100\u2103\7\u018e\2\2\u2101\u2103\3\2\2\2\u2102")
        buf.write(u"\u20fd\3\2\2\2\u2102\u20ff\3\2\2\2\u2102\u2101\3\2\2")
        buf.write(u"\2\u2103\u044f\3\2\2\2\u2104\u2105\7\u010f\2\2\u2105")
        buf.write(u"\u2117\5\u043e\u0220\2\u2106\u2107\7\u010f\2\2\u2107")
        buf.write(u"\u2108\5\u043e\u0220\2\u2108\u2109\78\2\2\u2109\u210a")
        buf.write(u"\7\u0125\2\2\u210a\u2117\3\2\2\2\u210b\u210c\7\u010f")
        buf.write(u"\2\2\u210c\u210d\78\2\2\u210d\u210e\7\u0125\2\2\u210e")
        buf.write(u"\u2117\5\u043e\u0220\2\u210f\u2110\7\u010f\2\2\u2110")
        buf.write(u"\u2111\78\2\2\u2111\u2112\7\u0125\2\2\u2112\u2113\5\u043e")
        buf.write(u"\u0220\2\u2113\u2114\78\2\2\u2114\u2115\7\u0125\2\2\u2115")
        buf.write(u"\u2117\3\2\2\2\u2116\u2104\3\2\2\2\u2116\u2106\3\2\2")
        buf.write(u"\2\u2116\u210b\3\2\2\2\u2116\u210f\3\2\2\2\u2117\u0451")
        buf.write(u"\3\2\2\2\u2118\u2119\7\u018f\2\2\u2119\u211c\5\u0454")
        buf.write(u"\u022b\2\u211a\u211c\3\2\2\2\u211b\u2118\3\2\2\2\u211b")
        buf.write(u"\u211a\3\2\2\2\u211c\u0453\3\2\2\2\u211d\u211e\b\u022b")
        buf.write(u"\1\2\u211e\u211f\5\u0456\u022c\2\u211f\u2125\3\2\2\2")
        buf.write(u"\u2120\u2121\f\3\2\2\u2121\u2122\7\b\2\2\u2122\u2124")
        buf.write(u"\5\u0456\u022c\2\u2123\u2120\3\2\2\2\u2124\u2127\3\2")
        buf.write(u"\2\2\u2125\u2123\3\2\2\2\u2125\u2126\3\2\2\2\u2126\u0455")
        buf.write(u"\3\2\2\2\u2127\u2125\3\2\2\2\u2128\u2129\5\u04d0\u0269")
        buf.write(u"\2\u2129\u212a\7\'\2\2\u212a\u212b\5\u045a\u022e\2\u212b")
        buf.write(u"\u0457\3\2\2\2\u212c\u212d\7\u0107\2\2\u212d\u2132\5")
        buf.write(u"\u045a\u022e\2\u212e\u212f\7\u0107\2\2\u212f\u2132\5")
        buf.write(u"\u04d0\u0269\2\u2130\u2132\3\2\2\2\u2131\u212c\3\2\2")
        buf.write(u"\2\u2131\u212e\3\2\2\2\u2131\u2130\3\2\2\2\u2132\u0459")
        buf.write(u"\3\2\2\2\u2133\u2134\7\r\2\2\u2134\u2135\5\u045c\u022f")
        buf.write(u"\2\u2135\u2136\5\u045e\u0230\2\u2136\u2137\5\u03bc\u01df")
        buf.write(u"\2\u2137\u2138\5\u0460\u0231\2\u2138\u2139\7\7\2\2\u2139")
        buf.write(u"\u045b\3\2\2\2\u213a\u213d\5\u04d0\u0269\2\u213b\u213d")
        buf.write(u"\3\2\2\2\u213c\u213a\3\2\2\2\u213c\u213b\3\2\2\2\u213d")
        buf.write(u"\u045d\3\2\2\2\u213e\u213f\7\u010e\2\2\u213f\u2140\7")
        buf.write(u"8\2\2\u2140\u2143\5\u0474\u023b\2\u2141\u2143\3\2\2\2")
        buf.write(u"\u2142\u213e\3\2\2\2\u2142\u2141\3\2\2\2\u2143\u045f")
        buf.write(u"\3\2\2\2\u2144\u2145\7\u011f\2\2\u2145\u214a\5\u0462")
        buf.write(u"\u0232\2\u2146\u2147\7\u0138\2\2\u2147\u214a\5\u0462")
        buf.write(u"\u0232\2\u2148\u214a\3\2\2\2\u2149\u2144\3\2\2\2\u2149")
        buf.write(u"\u2146\3\2\2\2\u2149\u2148\3\2\2\2\u214a\u0461\3\2\2")
        buf.write(u"\2\u214b\u2152\5\u0464\u0233\2\u214c\u214d\7\62\2\2\u214d")
        buf.write(u"\u214e\5\u0464\u0233\2\u214e\u214f\7$\2\2\u214f\u2150")
        buf.write(u"\5\u0464\u0233\2\u2150\u2152\3\2\2\2\u2151\u214b\3\2")
        buf.write(u"\2\2\u2151\u214c\3\2\2\2\u2152\u0463\3\2\2\2\u2153\u2154")
        buf.write(u"\7\u0173\2\2\u2154\u2160\7\u0114\2\2\u2155\u2156\7\u0173")
        buf.write(u"\2\2\u2156\u2160\7\u0098\2\2\u2157\u2158\7^\2\2\u2158")
        buf.write(u"\u2160\7\u0137\2\2\u2159\u215a\5\u043a\u021e\2\u215a")
        buf.write(u"\u215b\7\u0114\2\2\u215b\u2160\3\2\2\2\u215c\u215d\5")
        buf.write(u"\u043a\u021e\2\u215d\u215e\7\u0098\2\2\u215e\u2160\3")
        buf.write(u"\2\2\2\u215f\u2153\3\2\2\2\u215f\u2155\3\2\2\2\u215f")
        buf.write(u"\u2157\3\2\2\2\u215f\u2159\3\2\2\2\u215f\u215c\3\2\2")
        buf.write(u"\2\u2160\u0465\3\2\2\2\u2161\u2162\7\u0137\2\2\u2162")
        buf.write(u"\u2163\7\r\2\2\u2163\u2164\5\u0474\u023b\2\u2164\u2165")
        buf.write(u"\7\7\2\2\u2165\u2170\3\2\2\2\u2166\u2167\7\u0137\2\2")
        buf.write(u"\u2167\u2168\7\r\2\2\u2168\u2170\7\7\2\2\u2169\u216a")
        buf.write(u"\7\r\2\2\u216a\u216b\5\u0474\u023b\2\u216b\u216c\7\b")
        buf.write(u"\2\2\u216c\u216d\5\u043a\u021e\2\u216d\u216e\7\7\2\2")
        buf.write(u"\u216e\u2170\3\2\2\2\u216f\u2161\3\2\2\2\u216f\u2166")
        buf.write(u"\3\2\2\2\u216f\u2169\3\2\2\2\u2170\u0467\3\2\2\2\u2171")
        buf.write(u"\u2172\t\27\2\2\u2172\u0469\3\2\2\2\u2173\u2176\7\25")
        buf.write(u"\2\2\u2174\u2176\5\u046c\u0237\2\u2175\u2173\3\2\2\2")
        buf.write(u"\u2175\u2174\3\2\2\2\u2176\u046b\3\2\2\2\u2177\u2178")
        buf.write(u"\t\30\2\2\u2178\u046d\3\2\2\2\u2179\u2180\7\25\2\2\u217a")
        buf.write(u"\u217b\7\u0100\2\2\u217b\u217c\7\r\2\2\u217c\u217d\5")
        buf.write(u"\u02e0\u0171\2\u217d\u217e\7\7\2\2\u217e\u2180\3\2\2")
        buf.write(u"\2\u217f\u2179\3\2\2\2\u217f\u217a\3\2\2\2\u2180\u046f")
        buf.write(u"\3\2\2\2\u2181\u2188\5\u046a\u0236\2\u2182\u2183\7\u0100")
        buf.write(u"\2\2\u2183\u2184\7\r\2\2\u2184\u2185\5\u02e0\u0171\2")
        buf.write(u"\u2185\u2186\7\7\2\2\u2186\u2188\3\2\2\2\u2187\u2181")
        buf.write(u"\3\2\2\2\u2187\u2182\3\2\2\2\u2188\u0471\3\2\2\2\u2189")
        buf.write(u"\u2196\5\u046a\u0236\2\u218a\u218b\7\u0100\2\2\u218b")
        buf.write(u"\u218c\7\r\2\2\u218c\u218d\5\u02e0\u0171\2\u218d\u218e")
        buf.write(u"\7\7\2\2\u218e\u2196\3\2\2\2\u218f\u2196\7\u00d7\2\2")
        buf.write(u"\u2190\u2191\7\u00f0\2\2\u2191\u2196\7\u00d7\2\2\u2192")
        buf.write(u"\u2196\7\u00ae\2\2\u2193\u2194\7\u00f0\2\2\u2194\u2196")
        buf.write(u"\7\u00ae\2\2\u2195\u2189\3\2\2\2\u2195\u218a\3\2\2\2")
        buf.write(u"\u2195\u218f\3\2\2\2\u2195\u2190\3\2\2\2\u2195\u2192")
        buf.write(u"\3\2\2\2\u2195\u2193\3\2\2\2\u2196\u0473\3\2\2\2\u2197")
        buf.write(u"\u2198\b\u023b\1\2\u2198\u2199\5\u043a\u021e\2\u2199")
        buf.write(u"\u219f\3\2\2\2\u219a\u219b\f\3\2\2\u219b\u219c\7\b\2")
        buf.write(u"\2\u219c\u219e\5\u043a\u021e\2\u219d\u219a\3\2\2\2\u219e")
        buf.write(u"\u21a1\3\2\2\2\u219f\u219d\3\2\2\2\u219f\u21a0\3\2\2")
        buf.write(u"\2\u21a0\u0475\3\2\2\2\u21a1\u219f\3\2\2\2\u21a2\u21a3")
        buf.write(u"\b\u023c\1\2\u21a3\u21a4\5\u0478\u023d\2\u21a4\u21aa")
        buf.write(u"\3\2\2\2\u21a5\u21a6\f\3\2\2\u21a6\u21a7\7\b\2\2\u21a7")
        buf.write(u"\u21a9\5\u0478\u023d\2\u21a8\u21a5\3\2\2\2\u21a9\u21ac")
        buf.write(u"\3\2\2\2\u21aa\u21a8\3\2\2\2\u21aa\u21ab\3\2\2\2\u21ab")
        buf.write(u"\u0477\3\2\2\2\u21ac\u21aa\3\2\2\2\u21ad\u21b3\5\u043a")
        buf.write(u"\u021e\2\u21ae\u21af\5\u02bc\u015f\2\u21af\u21b0\7\u01ac")
        buf.write(u"\2\2\u21b0\u21b1\5\u043a\u021e\2\u21b1\u21b3\3\2\2\2")
        buf.write(u"\u21b2\u21ad\3\2\2\2\u21b2\u21ae\3\2\2\2\u21b3\u0479")
        buf.write(u"\3\2\2\2\u21b4\u21b5\b\u023e\1\2\u21b5\u21b6\5\u040a")
        buf.write(u"\u0206\2\u21b6\u21bc\3\2\2\2\u21b7\u21b8\f\3\2\2\u21b8")
        buf.write(u"\u21b9\7\b\2\2\u21b9\u21bb\5\u040a\u0206\2\u21ba\u21b7")
        buf.write(u"\3\2\2\2\u21bb\u21be\3\2\2\2\u21bc\u21ba\3\2\2\2\u21bc")
        buf.write(u"\u21bd\3\2\2\2\u21bd\u047b\3\2\2\2\u21be\u21bc\3\2\2")
        buf.write(u"\2\u21bf\u21c0\7\f\2\2\u21c0\u21c1\5\u0474\u023b\2\u21c1")
        buf.write(u"\u21c2\7\3\2\2\u21c2\u21ca\3\2\2\2\u21c3\u21c4\7\f\2")
        buf.write(u"\2\u21c4\u21c5\5\u047e\u0240\2\u21c5\u21c6\7\3\2\2\u21c6")
        buf.write(u"\u21ca\3\2\2\2\u21c7\u21c8\7\f\2\2\u21c8\u21ca\7\3\2")
        buf.write(u"\2\u21c9\u21bf\3\2\2\2\u21c9\u21c3\3\2\2\2\u21c9\u21c7")
        buf.write(u"\3\2\2\2\u21ca\u047d\3\2\2\2\u21cb\u21cc\b\u0240\1\2")
        buf.write(u"\u21cc\u21cd\5\u047c\u023f\2\u21cd\u21d3\3\2\2\2\u21ce")
        buf.write(u"\u21cf\f\3\2\2\u21cf\u21d0\7\b\2\2\u21d0\u21d2\5\u047c")
        buf.write(u"\u023f\2\u21d1\u21ce\3\2\2\2\u21d2\u21d5\3\2\2\2\u21d3")
        buf.write(u"\u21d1\3\2\2\2\u21d3\u21d4\3\2\2\2\u21d4\u047f\3\2\2")
        buf.write(u"\2\u21d5\u21d3\3\2\2\2\u21d6\u21d7\5\u0482\u0242\2\u21d7")
        buf.write(u"\u21d8\7\u009e\2\2\u21d8\u21d9\5\u043a\u021e\2\u21d9")
        buf.write(u"\u21dc\3\2\2\2\u21da\u21dc\3\2\2\2\u21db\u21d6\3\2\2")
        buf.write(u"\2\u21db\u21da\3\2\2\2\u21dc\u0481\3\2\2\2\u21dd\u21e6")
        buf.write(u"\7\u01ae\2\2\u21de\u21e6\7\u019f\2\2\u21df\u21e6\7\u00e6")
        buf.write(u"\2\2\u21e0\u21e6\7j\2\2\u21e1\u21e6\7\u00ab\2\2\u21e2")
        buf.write(u"\u21e6\7\u00e3\2\2\u21e3\u21e6\7\u013e\2\2\u21e4\u21e6")
        buf.write(u"\5\u04ca\u0266\2\u21e5\u21dd\3\2\2\2\u21e5\u21de\3\2")
        buf.write(u"\2\2\u21e5\u21df\3\2\2\2\u21e5\u21e0\3\2\2\2\u21e5\u21e1")
        buf.write(u"\3\2\2\2\u21e5\u21e2\3\2\2\2\u21e5\u21e3\3\2\2\2\u21e5")
        buf.write(u"\u21e4\3\2\2\2\u21e6\u0483\3\2\2\2\u21e7\u21e8\5\u043a")
        buf.write(u"\u021e\2\u21e8\u21e9\5\u0486\u0244\2\u21e9\u21ea\5\u048c")
        buf.write(u"\u0247\2\u21ea\u21eb\5\u048e\u0248\2\u21eb\u21f1\3\2")
        buf.write(u"\2\2\u21ec\u21ed\5\u043a\u021e\2\u21ed\u21ee\5\u0486")
        buf.write(u"\u0244\2\u21ee\u21ef\5\u048c\u0247\2\u21ef\u21f1\3\2")
        buf.write(u"\2\2\u21f0\u21e7\3\2\2\2\u21f0\u21ec\3\2\2\2\u21f1\u0485")
        buf.write(u"\3\2\2\2\u21f2\u21f3\7\u0111\2\2\u21f3\u21f4\5\u043a")
        buf.write(u"\u021e\2\u21f4\u0487\3\2\2\2\u21f5\u21f6\5\u043c\u021f")
        buf.write(u"\2\u21f6\u21f7\7\u00b2\2\2\u21f7\u21f8\5\u043c\u021f")
        buf.write(u"\2\u21f8\u21fb\3\2\2\2\u21f9\u21fb\3\2\2\2\u21fa\u21f5")
        buf.write(u"\3\2\2\2\u21fa\u21f9\3\2\2\2\u21fb\u0489\3\2\2\2\u21fc")
        buf.write(u"\u21fd\5\u043a\u021e\2\u21fd\u21fe\5\u048c\u0247\2\u21fe")
        buf.write(u"\u21ff\5\u048e\u0248\2\u21ff\u220d\3\2\2\2\u2200\u2201")
        buf.write(u"\5\u043a\u021e\2\u2201\u2202\5\u048e\u0248\2\u2202\u2203")
        buf.write(u"\5\u048c\u0247\2\u2203\u220d\3\2\2\2\u2204\u2205\5\u043a")
        buf.write(u"\u021e\2\u2205\u2206\5\u048c\u0247\2\u2206\u220d\3\2")
        buf.write(u"\2\2\u2207\u2208\5\u043a\u021e\2\u2208\u2209\5\u048e")
        buf.write(u"\u0248\2\u2209\u220d\3\2\2\2\u220a\u220d\5\u0474\u023b")
        buf.write(u"\2\u220b\u220d\3\2\2\2\u220c\u21fc\3\2\2\2\u220c\u2200")
        buf.write(u"\3\2\2\2\u220c\u2204\3\2\2\2\u220c\u2207\3\2\2\2\u220c")
        buf.write(u"\u220a\3\2\2\2\u220c\u220b\3\2\2\2\u220d\u048b\3\2\2")
        buf.write(u"\2\u220e\u220f\7\u009e\2\2\u220f\u2210\5\u043a\u021e")
        buf.write(u"\2\u2210\u048d\3\2\2\2\u2211\u2212\7\u0099\2\2\u2212")
        buf.write(u"\u2213\5\u043a\u021e\2\u2213\u048f\3\2\2\2\u2214\u2215")
        buf.write(u"\5\u043a\u021e\2\u2215\u2216\7\u009e\2\2\u2216\u2217")
        buf.write(u"\5\u0474\u023b\2\u2217\u221c\3\2\2\2\u2218\u2219\7\u009e")
        buf.write(u"\2\2\u2219\u221c\5\u0474\u023b\2\u221a\u221c\5\u0474")
        buf.write(u"\u023b\2\u221b\u2214\3\2\2\2\u221b\u2218\3\2\2\2\u221b")
        buf.write(u"\u221a\3\2\2\2\u221c\u0491\3\2\2\2\u221d\u2223\5\u03a2")
        buf.write(u"\u01d2\2\u221e\u221f\7\r\2\2\u221f\u2220\5\u0474\u023b")
        buf.write(u"\2\u2220\u2221\7\7\2\2\u2221\u2223\3\2\2\2\u2222\u221d")
        buf.write(u"\3\2\2\2\u2222\u221e\3\2\2\2\u2223\u0493\3\2\2\2\u2224")
        buf.write(u"\u2225\7=\2\2\u2225\u2226\5\u049c\u024f\2\u2226\u2227")
        buf.write(u"\5\u0496\u024c\2\u2227\u2228\5\u049a\u024e\2\u2228\u2229")
        buf.write(u"\7\u0086\2\2\u2229\u0495\3\2\2\2\u222a\u222b\b\u024c")
        buf.write(u"\1\2\u222b\u222c\5\u0498\u024d\2\u222c\u2231\3\2\2\2")
        buf.write(u"\u222d\u222e\f\3\2\2\u222e\u2230\5\u0498\u024d\2\u222f")
        buf.write(u"\u222d\3\2\2\2\u2230\u2233\3\2\2\2\u2231\u222f\3\2\2")
        buf.write(u"\2\u2231\u2232\3\2\2\2\u2232\u0497\3\2\2\2\u2233\u2231")
        buf.write(u"\3\2\2\2\u2234\u2235\7\u018c\2\2\u2235\u2236\5\u043a")
        buf.write(u"\u021e\2\u2236\u2237\7\u0165\2\2\u2237\u2238\5\u043a")
        buf.write(u"\u021e\2\u2238\u0499\3\2\2\2\u2239\u223a\7\u0082\2\2")
        buf.write(u"\u223a\u223d\5\u043a\u021e\2\u223b\u223d\3\2\2\2\u223c")
        buf.write(u"\u2239\3\2\2\2\u223c\u223b\3\2\2\2\u223d\u049b\3\2\2")
        buf.write(u"\2\u223e\u2241\5\u043a\u021e\2\u223f\u2241\3\2\2\2\u2240")
        buf.write(u"\u223e\3\2\2\2\u2240\u223f\3\2\2\2\u2241\u049d\3\2\2")
        buf.write(u"\2\u2242\u2247\5\u04d0\u0269\2\u2243\u2244\5\u04d0\u0269")
        buf.write(u"\2\u2244\u2245\5\u04a2\u0252\2\u2245\u2247\3\2\2\2\u2246")
        buf.write(u"\u2242\3\2\2\2\u2246\u2243\3\2\2\2\u2247\u049f\3\2\2")
        buf.write(u"\2\u2248\u2249\7\6\2\2\u2249\u2257\5\u04be\u0260\2\u224a")
        buf.write(u"\u224b\7\6\2\2\u224b\u2257\7\13\2\2\u224c\u224d\7\f\2")
        buf.write(u"\2\u224d\u224e\5\u043a\u021e\2\u224e\u224f\7\3\2\2\u224f")
        buf.write(u"\u2257\3\2\2\2\u2250\u2251\7\f\2\2\u2251\u2252\5\u043a")
        buf.write(u"\u021e\2\u2252\u2253\7\16\2\2\u2253\u2254\5\u043a\u021e")
        buf.write(u"\2\u2254\u2255\7\3\2\2\u2255\u2257\3\2\2\2\u2256\u2248")
        buf.write(u"\3\2\2\2\u2256\u224a\3\2\2\2\u2256\u224c\3\2\2\2\u2256")
        buf.write(u"\u2250\3\2\2\2\u2257\u04a1\3\2\2\2\u2258\u2259\b\u0252")
        buf.write(u"\1\2\u2259\u225a\5\u04a0\u0251\2\u225a\u225f\3\2\2\2")
        buf.write(u"\u225b\u225c\f\3\2\2\u225c\u225e\5\u04a0\u0251\2\u225d")
        buf.write(u"\u225b\3\2\2\2\u225e\u2261\3\2\2\2\u225f\u225d\3\2\2")
        buf.write(u"\2\u225f\u2260\3\2\2\2\u2260\u04a3\3\2\2\2\u2261\u225f")
        buf.write(u"\3\2\2\2\u2262\u2267\b\u0253\1\2\u2263\u2264\f\3\2\2")
        buf.write(u"\u2264\u2266\5\u04a0\u0251\2\u2265\u2263\3\2\2\2\u2266")
        buf.write(u"\u2269\3\2\2\2\u2267\u2265\3\2\2\2\u2267\u2268\3\2\2")
        buf.write(u"\2\u2268\u04a5\3\2\2\2\u2269\u2267\3\2\2\2\u226a\u226d")
        buf.write(u"\7+\2\2\u226b\u226d\3\2\2\2\u226c\u226a\3\2\2\2\u226c")
        buf.write(u"\u226b\3\2\2\2\u226d\u04a7\3\2\2\2\u226e\u2271\5\u043a")
        buf.write(u"\u021e\2\u226f\u2271\7o\2\2\u2270\u226e\3\2\2\2\u2270")
        buf.write(u"\u226f\3\2\2\2\u2271\u04a9\3\2\2\2\u2272\u2273\b\u0256")
        buf.write(u"\1\2\u2273\u2274\5\u04a8\u0255\2\u2274\u227a\3\2\2\2")
        buf.write(u"\u2275\u2276\f\3\2\2\u2276\u2277\7\b\2\2\u2277\u2279")
        buf.write(u"\5\u04a8\u0255\2\u2278\u2275\3\2\2\2\u2279\u227c\3\2")
        buf.write(u"\2\2\u227a\u2278\3\2\2\2\u227a\u227b\3\2\2\2\u227b\u04ab")
        buf.write(u"\3\2\2\2\u227c\u227a\3\2\2\2\u227d\u227e\7\r\2\2\u227e")
        buf.write(u"\u227f\5\u04aa\u0256\2\u227f\u2280\7\7\2\2\u2280\u04ad")
        buf.write(u"\3\2\2\2\u2281\u2282\b\u0258\1\2\u2282\u2283\5\u04b0")
        buf.write(u"\u0259\2\u2283\u2289\3\2\2\2\u2284\u2285\f\3\2\2\u2285")
        buf.write(u"\u2286\7\b\2\2\u2286\u2288\5\u04b0\u0259\2\u2287\u2284")
        buf.write(u"\3\2\2\2\u2288\u228b\3\2\2\2\u2289\u2287\3\2\2\2\u2289")
        buf.write(u"\u228a\3\2\2\2\u228a\u04af\3\2\2\2\u228b\u2289\3\2\2")
        buf.write(u"\2\u228c\u228d\5\u043a\u021e\2\u228d\u228e\7\'\2\2\u228e")
        buf.write(u"\u228f\5\u04d4\u026b\2\u228f\u2296\3\2\2\2\u2290\u2291")
        buf.write(u"\5\u043a\u021e\2\u2291\u2292\7\u01ae\2\2\u2292\u2296")
        buf.write(u"\3\2\2\2\u2293\u2296\5\u043a\u021e\2\u2294\u2296\7\13")
        buf.write(u"\2\2\u2295\u228c\3\2\2\2\u2295\u2290\3\2\2\2\u2295\u2293")
        buf.write(u"\3\2\2\2\u2295\u2294\3\2\2\2\u2296\u04b1\3\2\2\2\u2297")
        buf.write(u"\u2298\b\u025a\1\2\u2298\u2299\5\u04b4\u025b\2\u2299")
        buf.write(u"\u229f\3\2\2\2\u229a\u229b\f\3\2\2\u229b\u229c\7\b\2")
        buf.write(u"\2\u229c\u229e\5\u04b4\u025b\2\u229d\u229a\3\2\2\2\u229e")
        buf.write(u"\u22a1\3\2\2\2\u229f\u229d\3\2\2\2\u229f\u22a0\3\2\2")
        buf.write(u"\2\u22a0\u04b3\3\2\2\2\u22a1\u229f\3\2\2\2\u22a2\u22a7")
        buf.write(u"\5\u04d0\u0269\2\u22a3\u22a4\5\u04d0\u0269\2\u22a4\u22a5")
        buf.write(u"\5\u04a2\u0252\2\u22a5\u22a7\3\2\2\2\u22a6\u22a2\3\2")
        buf.write(u"\2\2\u22a6\u22a3\3\2\2\2\u22a7\u04b5\3\2\2\2\u22a8\u22a9")
        buf.write(u"\b\u025c\1\2\u22a9\u22aa\5\u04b8\u025d\2\u22aa\u22b0")
        buf.write(u"\3\2\2\2\u22ab\u22ac\f\3\2\2\u22ac\u22ad\7\b\2\2\u22ad")
        buf.write(u"\u22af\5\u04b8\u025d\2\u22ae\u22ab\3\2\2\2\u22af\u22b2")
        buf.write(u"\3\2\2\2\u22b0\u22ae\3\2\2\2\u22b0\u22b1\3\2\2\2\u22b1")
        buf.write(u"\u04b7\3\2\2\2\u22b2\u22b0\3\2\2\2\u22b3\u22b4\5\u04d0")
        buf.write(u"\u0269\2\u22b4\u04b9\3\2\2\2\u22b5\u22b6\5\u04d0\u0269")
        buf.write(u"\2\u22b6\u04bb\3\2\2\2\u22b7\u22b8\5\u04d0\u0269\2\u22b8")
        buf.write(u"\u04bd\3\2\2\2\u22b9\u22ba\5\u04d4\u026b\2\u22ba\u04bf")
        buf.write(u"\3\2\2\2\u22bb\u22bc\5\u04d0\u0269\2\u22bc\u04c1\3\2")
        buf.write(u"\2\2\u22bd\u22be\5\u04ca\u0266\2\u22be\u04c3\3\2\2\2")
        buf.write(u"\u22bf\u22c4\5\u04d2\u026a\2\u22c0\u22c1\5\u04d0\u0269")
        buf.write(u"\2\u22c1\u22c2\5\u04a2\u0252\2\u22c2\u22c4\3\2\2\2\u22c3")
        buf.write(u"\u22bf\3\2\2\2\u22c3\u22c0\3\2\2\2\u22c4\u04c5\3\2\2")
        buf.write(u"\2\u22c5\u22e5\5\u04c8\u0265\2\u22c6\u22e5\7\u01b0\2")
        buf.write(u"\2\u22c7\u22e5\5\u04ca\u0266\2\u22c8\u22e5\7\u01b1\2")
        buf.write(u"\2\u22c9\u22e5\7\u01b2\2\2\u22ca\u22cb\5\u04c4\u0263")
        buf.write(u"\2\u22cb\u22cc\5\u04ca\u0266\2\u22cc\u22e5\3\2\2\2\u22cd")
        buf.write(u"\u22ce\5\u04c4\u0263\2\u22ce\u22cf\7\r\2\2\u22cf\u22d0")
        buf.write(u"\5\u0476\u023c\2\u22d0\u22d1\7\7\2\2\u22d1\u22d2\5\u04ca")
        buf.write(u"\u0266\2\u22d2\u22e5\3\2\2\2\u22d3\u22d4\5\u0410\u0209")
        buf.write(u"\2\u22d4\u22d5\5\u04ca\u0266\2\u22d5\u22e5\3\2\2\2\u22d6")
        buf.write(u"\u22d7\5\u0432\u021a\2\u22d7\u22d8\5\u04ca\u0266\2\u22d8")
        buf.write(u"\u22d9\5\u0436\u021c\2\u22d9\u22e5\3\2\2\2\u22da\u22db")
        buf.write(u"\5\u0432\u021a\2\u22db\u22dc\7\r\2\2\u22dc\u22dd\5\u04c8")
        buf.write(u"\u0265\2\u22dd\u22de\7\7\2\2\u22de\u22df\5\u04ca\u0266")
        buf.write(u"\2\u22df\u22e0\5\u0436\u021c\2\u22e0\u22e5\3\2\2\2\u22e1")
        buf.write(u"\u22e5\7\u016e\2\2\u22e2\u22e5\7\u0093\2\2\u22e3\u22e5")
        buf.write(u"\7\u00f5\2\2\u22e4\u22c5\3\2\2\2\u22e4\u22c6\3\2\2\2")
        buf.write(u"\u22e4\u22c7\3\2\2\2\u22e4\u22c8\3\2\2\2\u22e4\u22c9")
        buf.write(u"\3\2\2\2\u22e4\u22ca\3\2\2\2\u22e4\u22cd\3\2\2\2\u22e4")
        buf.write(u"\u22d3\3\2\2\2\u22e4\u22d6\3\2\2\2\u22e4\u22da\3\2\2")
        buf.write(u"\2\u22e4\u22e1\3\2\2\2\u22e4\u22e2\3\2\2\2\u22e4\u22e3")
        buf.write(u"\3\2\2\2\u22e5\u04c7\3\2\2\2\u22e6\u22e7\7\u01ad\2\2")
        buf.write(u"\u22e7\u04c9\3\2\2\2\u22e8\u22e9\7\u01af\2\2\u22e9\u04cb")
        buf.write(u"\3\2\2\2\u22ea\u22eb\5\u04d0\u0269\2\u22eb\u04cd\3\2")
        buf.write(u"\2\2\u22ec\u22f2\5\u04c8\u0265\2\u22ed\u22ee\7\t\2\2")
        buf.write(u"\u22ee\u22f2\5\u04c8\u0265\2\u22ef\u22f0\7\n\2\2\u22f0")
        buf.write(u"\u22f2\5\u04c8\u0265\2\u22f1\u22ec\3\2\2\2\u22f1\u22ed")
        buf.write(u"\3\2\2\2\u22f1\u22ef\3\2\2\2\u22f2\u04cf\3\2\2\2\u22f3")
        buf.write(u"\u22f7\7\u01ae\2\2\u22f4\u22f7\5\u00a0Q\2\u22f5\u22f7")
        buf.write(u"\5\u04d6\u026c\2\u22f6\u22f3\3\2\2\2\u22f6\u22f4\3\2")
        buf.write(u"\2\2\u22f6\u22f5\3\2\2\2\u22f7\u04d1\3\2\2\2\u22f8\u22fc")
        buf.write(u"\7\u01ae\2\2\u22f9\u22fc\5\u00a0Q\2\u22fa\u22fc\5\u04d8")
        buf.write(u"\u026d\2\u22fb\u22f8\3\2\2\2\u22fb\u22f9\3\2\2\2\u22fb")
        buf.write(u"\u22fa\3\2\2\2\u22fc\u04d3\3\2\2\2\u22fd\u2303\7\u01ae")
        buf.write(u"\2\2\u22fe\u2303\5\u00a0Q\2\u22ff\u2303\5\u04d6\u026c")
        buf.write(u"\2\u2300\u2303\5\u04d8\u026d\2\u2301\u2303\5\u04da\u026e")
        buf.write(u"\2\u2302\u22fd\3\2\2\2\u2302\u22fe\3\2\2\2\u2302\u22ff")
        buf.write(u"\3\2\2\2\u2302\u2300\3\2\2\2\u2302\u2301\3\2\2\2\u2303")
        buf.write(u"\u04d5\3\2\2\2\u2304\u2305\t\31\2\2\u2305\u04d7\3\2\2")
        buf.write(u"\2\u2306\u2307\t\32\2\2\u2307\u04d9\3\2\2\2\u2308\u2309")
        buf.write(u"\t\33\2\2\u2309\u04db\3\2\2\2\u01e5\u04e5\u04f4\u04f8")
        buf.write(u"\u0509\u0514\u051d\u0533\u0539\u0542\u054c\u0558\u055c")
        buf.write(u"\u0565\u056a\u056e\u0572\u0578\u0581\u059a\u05ac\u05b6")
        buf.write(u"\u05c9\u05dd\u05e3\u05f6\u0600\u0621\u0652\u065b\u066b")
        buf.write(u"\u067d\u0681\u0686\u0696\u0708\u070e\u0717\u071f\u0736")
        buf.write(u"\u0745\u074b\u0753\u075b\u0767\u0778\u0782\u0788\u079d")
        buf.write(u"\u07ab\u07af\u07b6\u07bf\u07c9\u07d3\u0800\u080a\u0815")
        buf.write(u"\u081a\u0823\u0829\u083b\u0840\u0844\u0854\u0859\u085e")
        buf.write(u"\u086e\u0877\u0885\u08b7\u08c1\u0969\u0970\u0975\u097a")
        buf.write(u"\u097f\u0988\u0992\u09a4\u09b3\u09d0\u09d6\u09e1\u09ea")
        buf.write(u"\u09ee\u09f5\u09fc\u0a03\u0a26\u0a2a\u0a2f\u0a36\u0a3a")
        buf.write(u"\u0a44\u0a52\u0a5c\u0a95\u0aa3\u0aa7\u0aae\u0ab8\u0ac3")
        buf.write(u"\u0ac9\u0acd\u0ade\u0ae9\u0b05\u0b0e\u0b1b\u0b1d\u0b27")
        buf.write(u"\u0b5f\u0b64\u0b6b\u0b75\u0b81\u0b8b\u0b99\u0ba1\u0bac")
        buf.write(u"\u0bbe\u0bc6\u0bcf\u0bdd\u0be2\u0be9\u0c03\u0c17\u0c1b")
        buf.write(u"\u0c24\u0c3d\u0c43\u0c46\u0c4a\u0c50\u0c5a\u0c6f\u0c73")
        buf.write(u"\u0c79\u0c7e\u0c84\u0c88\u0c98\u0c9c\u0ca8\u0cb2\u0cb8")
        buf.write(u"\u0cc3\u0cc7\u0cce\u0cd7\u0ce4\u0d9c\u0dae\u0db7\u0dbc")
        buf.write(u"\u0dce\u0ddf\u0de7\u0df1\u0e01\u0e0b\u0e22\u0e28\u0e2c")
        buf.write(u"\u0e3a\u0e4c\u0e63\u0e6b\u0e75\u0e88\u0e96\u0eaa\u0eda")
        buf.write(u"\u0ee0\u0eea\u0ef4\u0efb\u0eff\u0f09\u0f0e\u0f15\u0f1c")
        buf.write(u"\u0f21\u0f28\u0f36\u0f48\u0faf\u0fbd\u0fc5\u0fcc\u0fd5")
        buf.write(u"\u0fe3\u0fec\u0ff6\u1012\u102a\u1049\u104d\u1052\u105b")
        buf.write(u"\u105f\u107a\u1084\u1093\u10a7\u10bb\u10e4\u10fe\u1108")
        buf.write(u"\u110f\u111a\u1128\u11be\u11d4\u11d8\u120b\u1210\u121e")
        buf.write(u"\u1222\u1228\u126c\u1272\u128f\u12a0\u12aa\u12b6\u12e4")
        buf.write(u"\u12ee\u12f4\u12fa\u1304\u1322\u1328\u132e\u133b\u1347")
        buf.write(u"\u1364\u1379\u137d\u1381\u1386\u1390\u13a7\u13ac\u13b2")
        buf.write(u"\u13b7\u13bc\u13dd\u13e2\u13ea\u13f4\u13fd\u1407\u1419")
        buf.write(u"\u1421\u1433\u143e\u1447\u1469\u1471\u1478\u147d\u148a")
        buf.write(u"\u149a\u149f\u14af\u14bf\u14cf\u14e7\u14ee\u14fa\u1500")
        buf.write(u"\u1524\u152b\u153a\u154b\u1551\u16a5\u16a9\u16ae\u1764")
        buf.write(u"\u17f4\u180a\u1814\u181c\u1820\u1827\u1839\u1842\u184b")
        buf.write(u"\u1877\u187c\u1888\u1892\u1894\u1899\u18b1\u18bf\u18c8")
        buf.write(u"\u18d1\u1915\u1919\u191f\u192a\u1936\u1946\u1981\u1985")
        buf.write(u"\u19d6\u19f0\u19f5\u1a14\u1a1e\u1a25\u1a2f\u1a35\u1a39")
        buf.write(u"\u1a3d\u1a44\u1a56\u1a5f\u1a69\u1a72\u1a77\u1a84\u1a8a")
        buf.write(u"\u1a9a\u1aa1\u1aad\u1abe\u1ac8\u1ad1\u1ade\u1aeb\u1afd")
        buf.write(u"\u1b01\u1b14\u1b19\u1b30\u1b47\u1b49\u1b51\u1b55\u1b60")
        buf.write(u"\u1b67\u1b6e\u1b75\u1b77\u1b79\u1b9d\u1ba1\u1bb1\u1bb8")
        buf.write(u"\u1bbf\u1bc6\u1bc8\u1bca\u1bd2\u1bdc\u1be8\u1bed\u1c12")
        buf.write(u"\u1c16\u1c1b\u1c26\u1c2a\u1c38\u1c44\u1c4e\u1c52\u1c61")
        buf.write(u"\u1c69\u1c6d\u1c77\u1c83\u1c88\u1c8e\u1c92\u1c9b\u1ca8")
        buf.write(u"\u1cad\u1cb8\u1cbe\u1cc8\u1ccd\u1cee\u1cf4\u1d11\u1d21")
        buf.write(u"\u1d25\u1d29\u1d2d\u1d30\u1d39\u1d46\u1d50\u1d5b\u1d62")
        buf.write(u"\u1d6b\u1d6f\u1d79\u1d9b\u1da6\u1da8\u1db9\u1dbf\u1dc8")
        buf.write(u"\u1dcf\u1de1\u1de8\u1dec\u1df0\u1dfd\u1e01\u1e19\u1e1d")
        buf.write(u"\u1e23\u1e35\u1e3f\u1e5d\u1e65\u1e78\u1f5e\u1f60\u1f6c")
        buf.write(u"\u1fb3\u1fb5\u1fcb\u20ce\u20d5\u20e2\u20f1\u20f9\u2102")
        buf.write(u"\u2116\u211b\u2125\u2131\u213c\u2142\u2149\u2151\u215f")
        buf.write(u"\u216f\u2175\u217f\u2187\u2195\u219f\u21aa\u21b2\u21bc")
        buf.write(u"\u21c9\u21d3\u21db\u21e5\u21f0\u21fa\u220c\u221b\u2222")
        buf.write(u"\u2231\u223c\u2240\u2246\u2256\u225f\u2267\u226c\u2270")
        buf.write(u"\u227a\u2289\u2295\u229f\u22a6\u22b0\u22c3\u22e4\u22f1")
        buf.write(u"\u22f6\u22fb\u2302")
        return buf.getvalue()
		

class PlPgSqlParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    EOF = Token.EOF
    T__17=1
    T__16=2
    T__15=3
    T__14=4
    T__13=5
    T__12=6
    T__11=7
    T__10=8
    T__9=9
    T__8=10
    T__7=11
    T__6=12
    T__5=13
    T__4=14
    T__3=15
    T__2=16
    T__1=17
    T__0=18
    Op=19
    ABORT_P=20
    ABSOLUTE_P=21
    ACCESS=22
    ACTION=23
    ADD_P=24
    ADMIN=25
    AFTER=26
    AGGREGATE=27
    ALL=28
    ALSO=29
    ALTER=30
    ALWAYS=31
    ANALYSE=32
    ANALYZE=33
    AND=34
    ANY=35
    ARRAY=36
    AS=37
    ASC=38
    ASSERTION=39
    ASSIGNMENT=40
    ASYMMETRIC=41
    AT=42
    ATTRIBUTE=43
    AUTHORIZATION=44
    BACKWARD=45
    BEFORE=46
    BEGIN_P=47
    BETWEEN=48
    BIGINT=49
    BINARY=50
    BIT=51
    BOOLEAN_P=52
    BOTH=53
    BY=54
    CACHE=55
    CALLED=56
    CASCADE=57
    CASCADED=58
    CASE=59
    CAST=60
    CATALOG_P=61
    CHAIN=62
    CHAR_P=63
    CHARACTER=64
    CHARACTERISTICS=65
    CHECK=66
    CHECKPOINT=67
    CLASS=68
    CLOSE=69
    CLUSTER=70
    COALESCE=71
    COLLATE=72
    COLLATION=73
    COLUMN=74
    COMMENT=75
    COMMENTS=76
    COMMIT=77
    COMMITTED=78
    CONCURRENTLY=79
    CONFIGURATION=80
    CONNECTION=81
    CONSTRAINT=82
    CONSTRAINTS=83
    CONTENT_P=84
    CONTINUE_P=85
    CONVERSION_P=86
    COPY=87
    COST=88
    CREATE=89
    CROSS=90
    CSV=91
    CURRENT_P=92
    CURRENT_CATALOG=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_SCHEMA=96
    CURRENT_TIME=97
    CURRENT_TIMESTAMP=98
    CURRENT_USER=99
    CURSOR=100
    CYCLE=101
    DATA_P=102
    DATABASE=103
    DAY_P=104
    DEALLOCATE=105
    DEC=106
    DECIMAL_P=107
    DECLARE=108
    DEFAULT=109
    DEFAULTS=110
    DEFERRABLE=111
    DEFERRED=112
    DEFINER=113
    DELETE_P=114
    DELIMITER=115
    DELIMITERS=116
    DESC=117
    DICTIONARY=118
    DISABLE_P=119
    DISCARD=120
    DISTINCT=121
    DO=122
    DOCUMENT_P=123
    DOMAIN_P=124
    DOUBLE_P=125
    DROP=126
    EACH=127
    ELSE=128
    ENABLE_P=129
    ENCODING=130
    ENCRYPTED=131
    END_P=132
    ENUM_P=133
    ESCAPE=134
    EXCEPT=135
    EXCLUDE=136
    EXCLUDING=137
    EXCLUSIVE=138
    EXECUTE=139
    EXISTS=140
    EXPLAIN=141
    EXTENSION=142
    EXTERNAL=143
    EXTRACT=144
    FALSE_P=145
    FAMILY=146
    FETCH=147
    FIRST_P=148
    FLOAT_P=149
    FOLLOWING=150
    FOR=151
    FORCE=152
    FOREIGN=153
    FORWARD=154
    FREEZE=155
    FROM=156
    FULL=157
    FUNCTION=158
    FUNCTIONS=159
    GLOBAL=160
    GRANT=161
    GRANTED=162
    GREATEST=163
    GROUP_P=164
    HANDLER=165
    HAVING=166
    HEADER_P=167
    HOLD=168
    HOUR_P=169
    IDENTITY_P=170
    IF_P=171
    ILIKE=172
    IMMEDIATE=173
    IMMUTABLE=174
    IMPLICIT_P=175
    IN_P=176
    INCLUDING=177
    INCREMENT=178
    INDEX=179
    INDEXES=180
    INHERIT=181
    INHERITS=182
    INITIALLY=183
    INLINE_P=184
    INNER_P=185
    INOUT=186
    INPUT_P=187
    INSENSITIVE=188
    INSERT=189
    INSTEAD=190
    INT_P=191
    INTEGER=192
    INTERSECT=193
    INTERVAL=194
    INTO=195
    INVOKER=196
    IS=197
    ISNULL=198
    ISOLATION=199
    JOIN=200
    KEY=201
    LABEL=202
    LANGUAGE=203
    LARGE_P=204
    LAST_P=205
    LC_COLLATE_P=206
    LC_CTYPE_P=207
    LEADING=208
    LEAKPROOF=209
    LEAST=210
    LEFT=211
    LEVEL=212
    LIKE=213
    LIMIT=214
    LISTEN=215
    LOAD=216
    LOCAL=217
    LOCALTIME=218
    LOCALTIMESTAMP=219
    LOCATION=220
    LOCK_P=221
    MAPPING=222
    MATCH=223
    MAXVALUE=224
    MINUTE_P=225
    MINVALUE=226
    MODE=227
    MONTH_P=228
    MOVE=229
    NAME_P=230
    NAMES=231
    NATIONAL=232
    NATURAL=233
    NCHAR=234
    NEXT=235
    NO=236
    NONE=237
    NOT=238
    NOTHING=239
    NOTIFY=240
    NOTNULL=241
    NOWAIT=242
    NULL_P=243
    NULLIF=244
    NULLS_P=245
    NUMERIC=246
    OBJECT_P=247
    OF=248
    OFF=249
    OFFSET=250
    OIDS=251
    ON=252
    ONLY=253
    OPERATOR=254
    OPTION=255
    OPTIONS=256
    OR=257
    ORDER=258
    OUT_P=259
    OUTER_P=260
    OVER=261
    OVERLAPS=262
    OVERLAY=263
    OWNED=264
    OWNER=265
    PARSER=266
    PARTIAL=267
    PARTITION=268
    PASSING=269
    PASSWORD=270
    PLACING=271
    PLANS=272
    POSITION=273
    PRECEDING=274
    PRECISION=275
    PREPARE=276
    PREPARED=277
    PRESERVE=278
    PRIMARY=279
    PRIOR=280
    PRIVILEGES=281
    PROCEDURAL=282
    PROCEDURE=283
    QUOTE=284
    RANGE=285
    READ=286
    REAL=287
    REASSIGN=288
    RECHECK=289
    RECURSIVE=290
    REF=291
    REFERENCES=292
    REINDEX=293
    RELATIVE_P=294
    RELEASE=295
    RENAME=296
    REPEATABLE=297
    REPLACE=298
    REPLICA=299
    RESET=300
    RESTART=301
    RESTRICT=302
    RETURNING=303
    RETURNS=304
    REVOKE=305
    RIGHT=306
    ROLE=307
    ROLLBACK=308
    ROW=309
    ROWS=310
    RULE=311
    SAVEPOINT=312
    SCHEMA=313
    SCROLL=314
    SEARCH=315
    SECOND_P=316
    SECURITY=317
    SELECT=318
    SEQUENCE=319
    SEQUENCES=320
    SERIALIZABLE=321
    SERVER=322
    SESSION=323
    SESSION_USER=324
    SET=325
    SETOF=326
    SHARE=327
    SHOW=328
    SIMILAR=329
    SIMPLE=330
    SMALLINT=331
    SNAPSHOT=332
    SOME=333
    STABLE=334
    STANDALONE_P=335
    START=336
    STATEMENT=337
    STATISTICS=338
    STDIN=339
    STDOUT=340
    STORAGE=341
    STRICT_P=342
    STRIP_P=343
    SUBSTRING=344
    SYMMETRIC=345
    SYSID=346
    SYSTEM_P=347
    TABLE=348
    TABLES=349
    TABLESPACE=350
    TEMP=351
    TEMPLATE=352
    TEMPORARY=353
    TEXT_P=354
    THEN=355
    TIME=356
    TIMESTAMP=357
    TO=358
    TRAILING=359
    TRANSACTION=360
    TREAT=361
    TRIGGER=362
    TRIM=363
    TRUE_P=364
    TRUNCATE=365
    TRUSTED=366
    TYPE_P=367
    TYPES_P=368
    UNBOUNDED=369
    UNCOMMITTED=370
    UNENCRYPTED=371
    UNION=372
    UNIQUE=373
    UNKNOWN=374
    UNLISTEN=375
    UNLOGGED=376
    UNTIL=377
    UPDATE=378
    USER=379
    USING=380
    VACUUM=381
    VALID=382
    VALIDATE=383
    VALIDATOR=384
    VALUE_P=385
    VALUES=386
    VARCHAR=387
    VARIADIC=388
    VARYING=389
    VERBOSE=390
    VERSION_P=391
    VIEW=392
    VOLATILE=393
    WHEN=394
    WHERE=395
    WHITESPACE_P=396
    WINDOW=397
    WITH=398
    WITHOUT=399
    WORK=400
    WRAPPER=401
    WRITE=402
    XML_P=403
    XMLATTRIBUTES=404
    XMLCONCAT=405
    XMLELEMENT=406
    XMLEXISTS=407
    XMLFOREST=408
    XMLPARSE=409
    XMLPI=410
    XMLROOT=411
    XMLSERIALIZE=412
    YEAR_P=413
    YES_P=414
    ZONE=415
    WS=416
    SL_COMMENT=417
    ML_COMMENT=418
    WITH_TIME=419
    TYPECAST=420
    DOT_DOT=421
    NULLS_FIRST=422
    NULLS_LAST=423
    LESS_LESS=424
    GREATER_GREATER=425
    COLON_EQUALS=426
    ICONST=427
    IDENT=428
    SCONST=429
    FCONST=430
    BCONST=431
    XCONST=432
    PARAM=433
    K_OPTION=434
    K_DUMP=435
    K_VARIABLE_CONFLICT=436
    K_ERROR=437
    K_USE_VARIABLE=438
    K_USE_COLUMN=439
    K_BEGIN=440
    K_END=441
    K_DECLARE=442
    K_ALIAS=443
    K_FOR=444
    K_CURSOR=445
    K_NO=446
    K_SCROLL=447
    K_IS=448
    T_WORD=449
    T_CWORD=450
    K_CONSTANT=451
    K_COLLATE=452
    K_NOT=453
    K_NULL=454
    K_DEFAULT=455
    K_PERFORM=456
    K_GET=457
    K_DIAGNOSTICS=458
    K_CURRENT=459
    K_STACKED=460
    T_DATUM=461
    K_IF=462
    K_ELSIF=463
    K_ELSE=464
    K_CASE=465
    K_WHEN=466
    K_LOOP=467
    K_WHILE=468
    K_IN=469
    K_FOREACH=470
    K_ARRAY=471
    K_SLICE=472
    K_EXIT=473
    K_CONTINUE=474
    K_RETURN=475
    K_RAISE=476
    K_INSERT=477
    K_EXECUTE=478
    K_OPEN=479
    K_FETCH=480
    K_INTO=481
    K_MOVE=482
    K_CLOSE=483
    K_EXCEPTION=484
    K_THEN=485
    K_OR=486
    K_ABSOLUTE=487
    K_BACKWARD=488
    K_DEBUG=489
    K_DETAIL=490
    K_ERRCODE=491
    K_FIRST=492
    K_FORWARD=493
    K_HINT=494
    K_INFO=495
    K_LAST=496
    K_LOG=497
    K_MESSAGE=498
    K_MESSAGE_TEXT=499
    K_NEXT=500
    K_NOTICE=501
    K_PG_EXCEPTION_CONTEXT=502
    K_PG_EXCEPTION_DETAIL=503
    K_PG_EXCEPTION_HINT=504
    K_PRIOR=505
    K_QUERY=506
    K_RELATIVE=507
    K_RESULT_OID=508
    K_RETURNED_SQLSTATE=509
    K_REVERSE=510
    K_ROW_COUNT=511
    K_ROWTYPE=512
    K_SQLSTATE=513
    K_TYPE=514
    K_WARNING=515

    tokenNames = [ u"<INVALID>", u"']'", u"'%'", u"'^'", u"'.'", u"')'", 
                   u"','", u"'+'", u"'-'", u"'*'", u"'['", u"'('", u"':'", 
                   u"'<'", u"'='", u"';'", u"'>'", u"'/'", u"'#'", u"'TODO'", 
                   u"ABORT_P", u"ABSOLUTE_P", u"ACCESS", u"ACTION", u"ADD_P", 
                   u"ADMIN", u"AFTER", u"AGGREGATE", u"ALL", u"ALSO", u"ALTER", 
                   u"ALWAYS", u"ANALYSE", u"ANALYZE", u"AND", u"ANY", u"ARRAY", 
                   u"AS", u"ASC", u"ASSERTION", u"ASSIGNMENT", u"ASYMMETRIC", 
                   u"AT", u"ATTRIBUTE", u"AUTHORIZATION", u"BACKWARD", u"BEFORE", 
                   u"BEGIN_P", u"BETWEEN", u"BIGINT", u"BINARY", u"BIT", 
                   u"BOOLEAN_P", u"BOTH", u"BY", u"CACHE", u"CALLED", u"CASCADE", 
                   u"CASCADED", u"CASE", u"CAST", u"CATALOG_P", u"CHAIN", 
                   u"CHAR_P", u"CHARACTER", u"CHARACTERISTICS", u"CHECK", 
                   u"CHECKPOINT", u"CLASS", u"CLOSE", u"CLUSTER", u"COALESCE", 
                   u"COLLATE", u"COLLATION", u"COLUMN", u"COMMENT", u"COMMENTS", 
                   u"COMMIT", u"COMMITTED", u"CONCURRENTLY", u"CONFIGURATION", 
                   u"CONNECTION", u"CONSTRAINT", u"CONSTRAINTS", u"CONTENT_P", 
                   u"CONTINUE_P", u"CONVERSION_P", u"COPY", u"COST", u"CREATE", 
                   u"CROSS", u"CSV", u"CURRENT_P", u"CURRENT_CATALOG", u"CURRENT_DATE", 
                   u"CURRENT_ROLE", u"CURRENT_SCHEMA", u"CURRENT_TIME", 
                   u"CURRENT_TIMESTAMP", u"CURRENT_USER", u"CURSOR", u"CYCLE", 
                   u"DATA_P", u"DATABASE", u"DAY_P", u"DEALLOCATE", u"DEC", 
                   u"DECIMAL_P", u"DECLARE", u"DEFAULT", u"DEFAULTS", u"DEFERRABLE", 
                   u"DEFERRED", u"DEFINER", u"DELETE_P", u"DELIMITER", u"DELIMITERS", 
                   u"DESC", u"DICTIONARY", u"DISABLE_P", u"DISCARD", u"DISTINCT", 
                   u"DO", u"DOCUMENT_P", u"DOMAIN_P", u"DOUBLE_P", u"DROP", 
                   u"EACH", u"ELSE", u"ENABLE_P", u"ENCODING", u"ENCRYPTED", 
                   u"END_P", u"ENUM_P", u"ESCAPE", u"EXCEPT", u"EXCLUDE", 
                   u"EXCLUDING", u"EXCLUSIVE", u"EXECUTE", u"EXISTS", u"EXPLAIN", 
                   u"EXTENSION", u"EXTERNAL", u"EXTRACT", u"FALSE_P", u"FAMILY", 
                   u"FETCH", u"FIRST_P", u"FLOAT_P", u"FOLLOWING", u"FOR", 
                   u"FORCE", u"FOREIGN", u"FORWARD", u"FREEZE", u"FROM", 
                   u"FULL", u"FUNCTION", u"FUNCTIONS", u"GLOBAL", u"GRANT", 
                   u"GRANTED", u"GREATEST", u"GROUP_P", u"HANDLER", u"HAVING", 
                   u"HEADER_P", u"HOLD", u"HOUR_P", u"IDENTITY_P", u"IF_P", 
                   u"ILIKE", u"IMMEDIATE", u"IMMUTABLE", u"IMPLICIT_P", 
                   u"IN_P", u"INCLUDING", u"INCREMENT", u"INDEX", u"INDEXES", 
                   u"INHERIT", u"INHERITS", u"INITIALLY", u"INLINE_P", u"INNER_P", 
                   u"INOUT", u"INPUT_P", u"INSENSITIVE", u"INSERT", u"INSTEAD", 
                   u"INT_P", u"INTEGER", u"INTERSECT", u"INTERVAL", u"INTO", 
                   u"INVOKER", u"IS", u"ISNULL", u"ISOLATION", u"JOIN", 
                   u"KEY", u"LABEL", u"LANGUAGE", u"LARGE_P", u"LAST_P", 
                   u"LC_COLLATE_P", u"LC_CTYPE_P", u"LEADING", u"LEAKPROOF", 
                   u"LEAST", u"LEFT", u"LEVEL", u"LIKE", u"LIMIT", u"LISTEN", 
                   u"LOAD", u"LOCAL", u"LOCALTIME", u"LOCALTIMESTAMP", u"LOCATION", 
                   u"LOCK_P", u"MAPPING", u"MATCH", u"MAXVALUE", u"MINUTE_P", 
                   u"MINVALUE", u"MODE", u"MONTH_P", u"MOVE", u"NAME_P", 
                   u"NAMES", u"NATIONAL", u"NATURAL", u"NCHAR", u"NEXT", 
                   u"NO", u"NONE", u"NOT", u"NOTHING", u"NOTIFY", u"NOTNULL", 
                   u"NOWAIT", u"NULL_P", u"NULLIF", u"NULLS_P", u"NUMERIC", 
                   u"OBJECT_P", u"OF", u"OFF", u"OFFSET", u"OIDS", u"ON", 
                   u"ONLY", u"OPERATOR", u"OPTION", u"OPTIONS", u"OR", u"ORDER", 
                   u"OUT_P", u"OUTER_P", u"OVER", u"OVERLAPS", u"OVERLAY", 
                   u"OWNED", u"OWNER", u"PARSER", u"PARTIAL", u"PARTITION", 
                   u"PASSING", u"PASSWORD", u"PLACING", u"PLANS", u"POSITION", 
                   u"PRECEDING", u"PRECISION", u"PREPARE", u"PREPARED", 
                   u"PRESERVE", u"PRIMARY", u"PRIOR", u"PRIVILEGES", u"PROCEDURAL", 
                   u"PROCEDURE", u"QUOTE", u"RANGE", u"READ", u"REAL", u"REASSIGN", 
                   u"RECHECK", u"RECURSIVE", u"REF", u"REFERENCES", u"REINDEX", 
                   u"RELATIVE_P", u"RELEASE", u"RENAME", u"REPEATABLE", 
                   u"REPLACE", u"REPLICA", u"RESET", u"RESTART", u"RESTRICT", 
                   u"RETURNING", u"RETURNS", u"REVOKE", u"RIGHT", u"ROLE", 
                   u"ROLLBACK", u"ROW", u"ROWS", u"RULE", u"SAVEPOINT", 
                   u"SCHEMA", u"SCROLL", u"SEARCH", u"SECOND_P", u"SECURITY", 
                   u"SELECT", u"SEQUENCE", u"SEQUENCES", u"SERIALIZABLE", 
                   u"SERVER", u"SESSION", u"SESSION_USER", u"SET", u"SETOF", 
                   u"SHARE", u"SHOW", u"SIMILAR", u"SIMPLE", u"SMALLINT", 
                   u"SNAPSHOT", u"SOME", u"STABLE", u"STANDALONE_P", u"START", 
                   u"STATEMENT", u"STATISTICS", u"STDIN", u"STDOUT", u"STORAGE", 
                   u"STRICT_P", u"STRIP_P", u"SUBSTRING", u"SYMMETRIC", 
                   u"SYSID", u"SYSTEM_P", u"TABLE", u"TABLES", u"TABLESPACE", 
                   u"TEMP", u"TEMPLATE", u"TEMPORARY", u"TEXT_P", u"THEN", 
                   u"TIME", u"TIMESTAMP", u"TO", u"TRAILING", u"TRANSACTION", 
                   u"TREAT", u"TRIGGER", u"TRIM", u"TRUE_P", u"TRUNCATE", 
                   u"TRUSTED", u"TYPE_P", u"TYPES_P", u"UNBOUNDED", u"UNCOMMITTED", 
                   u"UNENCRYPTED", u"UNION", u"UNIQUE", u"UNKNOWN", u"UNLISTEN", 
                   u"UNLOGGED", u"UNTIL", u"UPDATE", u"USER", u"USING", 
                   u"VACUUM", u"VALID", u"VALIDATE", u"VALIDATOR", u"VALUE_P", 
                   u"VALUES", u"VARCHAR", u"VARIADIC", u"VARYING", u"VERBOSE", 
                   u"VERSION_P", u"VIEW", u"VOLATILE", u"WHEN", u"WHERE", 
                   u"WHITESPACE_P", u"WINDOW", u"WITH", u"WITHOUT", u"WORK", 
                   u"WRAPPER", u"WRITE", u"XML_P", u"XMLATTRIBUTES", u"XMLCONCAT", 
                   u"XMLELEMENT", u"XMLEXISTS", u"XMLFOREST", u"XMLPARSE", 
                   u"XMLPI", u"XMLROOT", u"XMLSERIALIZE", u"YEAR_P", u"YES_P", 
                   u"ZONE", u"WS", u"SL_COMMENT", u"ML_COMMENT", u"WITH_TIME", 
                   u"'::'", u"'..'", u"NULLS_FIRST", u"NULLS_LAST", u"'<<'", 
                   u"'>>'", u"':='", u"ICONST", u"IDENT", u"SCONST", u"FCONST", 
                   u"BCONST", u"XCONST", u"PARAM", u"K_OPTION", u"K_DUMP", 
                   u"K_VARIABLE_CONFLICT", u"K_ERROR", u"K_USE_VARIABLE", 
                   u"K_USE_COLUMN", u"K_BEGIN", u"K_END", u"K_DECLARE", 
                   u"K_ALIAS", u"K_FOR", u"K_CURSOR", u"K_NO", u"K_SCROLL", 
                   u"K_IS", u"T_WORD", u"T_CWORD", u"K_CONSTANT", u"K_COLLATE", 
                   u"K_NOT", u"K_NULL", u"K_DEFAULT", u"K_PERFORM", u"K_GET", 
                   u"K_DIAGNOSTICS", u"K_CURRENT", u"K_STACKED", u"T_DATUM", 
                   u"K_IF", u"K_ELSIF", u"K_ELSE", u"K_CASE", u"K_WHEN", 
                   u"K_LOOP", u"K_WHILE", u"K_IN", u"K_FOREACH", u"K_ARRAY", 
                   u"K_SLICE", u"K_EXIT", u"K_CONTINUE", u"K_RETURN", u"K_RAISE", 
                   u"K_INSERT", u"K_EXECUTE", u"K_OPEN", u"K_FETCH", u"K_INTO", 
                   u"K_MOVE", u"K_CLOSE", u"K_EXCEPTION", u"K_THEN", u"K_OR", 
                   u"K_ABSOLUTE", u"K_BACKWARD", u"K_DEBUG", u"K_DETAIL", 
                   u"K_ERRCODE", u"K_FIRST", u"K_FORWARD", u"K_HINT", u"K_INFO", 
                   u"K_LAST", u"K_LOG", u"K_MESSAGE", u"K_MESSAGE_TEXT", 
                   u"K_NEXT", u"K_NOTICE", u"K_PG_EXCEPTION_CONTEXT", u"K_PG_EXCEPTION_DETAIL", 
                   u"K_PG_EXCEPTION_HINT", u"K_PRIOR", u"K_QUERY", u"K_RELATIVE", 
                   u"K_RESULT_OID", u"K_RETURNED_SQLSTATE", u"K_REVERSE", 
                   u"K_ROW_COUNT", u"K_ROWTYPE", u"K_SQLSTATE", u"K_TYPE", 
                   u"K_WARNING" ]

    RULE_pl_function = 0
    RULE_comp_options = 1
    RULE_comp_option = 2
    RULE_opt_semi = 3
    RULE_pl_block = 4
    RULE_decl_sect = 5
    RULE_decl_start = 6
    RULE_decl_stmts = 7
    RULE_decl_stmt = 8
    RULE_decl_statement = 9
    RULE_opt_scrollable = 10
    RULE_decl_cursor_query = 11
    RULE_decl_cursor_args = 12
    RULE_decl_cursor_arglist = 13
    RULE_decl_cursor_arg = 14
    RULE_decl_is_for = 15
    RULE_decl_aliasitem = 16
    RULE_decl_varname = 17
    RULE_decl_const = 18
    RULE_decl_datatype = 19
    RULE_decl_collate = 20
    RULE_decl_notnull = 21
    RULE_decl_defval = 22
    RULE_decl_defkey = 23
    RULE_assign_operator = 24
    RULE_proc_sect = 25
    RULE_proc_stmts = 26
    RULE_proc_stmt = 27
    RULE_stmt_perform = 28
    RULE_stmt_assign = 29
    RULE_stmt_getdiag = 30
    RULE_getdiag_area_opt = 31
    RULE_getdiag_list = 32
    RULE_getdiag_list_item = 33
    RULE_getdiag_item = 34
    RULE_getdiag_target = 35
    RULE_assign_var = 36
    RULE_stmt_if = 37
    RULE_stmt_elsifs = 38
    RULE_stmt_else = 39
    RULE_stmt_case = 40
    RULE_opt_expr_until_when = 41
    RULE_case_when_list = 42
    RULE_case_when = 43
    RULE_opt_case_else = 44
    RULE_stmt_loop = 45
    RULE_stmt_while = 46
    RULE_stmt_for = 47
    RULE_for_control = 48
    RULE_for_variable = 49
    RULE_stmt_foreach_a = 50
    RULE_foreach_slice = 51
    RULE_stmt_exit = 52
    RULE_exit_type = 53
    RULE_stmt_return = 54
    RULE_stmt_raise = 55
    RULE_loop_body = 56
    RULE_stmt_execsql = 57
    RULE_stmt_dynexecute = 58
    RULE_stmt_open = 59
    RULE_stmt_fetch = 60
    RULE_stmt_move = 61
    RULE_opt_fetch_direction = 62
    RULE_stmt_close = 63
    RULE_stmt_null = 64
    RULE_cursor_variable = 65
    RULE_exception_sect = 66
    RULE_proc_exceptions = 67
    RULE_proc_exception = 68
    RULE_proc_conditions = 69
    RULE_proc_condition = 70
    RULE_expr_until_semi = 71
    RULE_expr_until_rightbracket = 72
    RULE_expr_until_then = 73
    RULE_expr_until_loop = 74
    RULE_opt_block_label = 75
    RULE_opt_label = 76
    RULE_opt_exitcond = 77
    RULE_any_identifier = 78
    RULE_unreserved_keyword = 79
    RULE_stmtblock = 80
    RULE_stmtmulti = 81
    RULE_stmt = 82
    RULE_createRoleStmt = 83
    RULE_optRoleList = 84
    RULE_alteroptRoleList = 85
    RULE_alterOptRoleElem = 86
    RULE_createOptRoleElem = 87
    RULE_createUserStmt = 88
    RULE_alterRoleStmt = 89
    RULE_opt_in_database = 90
    RULE_alterRoleSetStmt = 91
    RULE_alterUserStmt = 92
    RULE_alterUserSetStmt = 93
    RULE_dropRoleStmt = 94
    RULE_dropUserStmt = 95
    RULE_createGroupStmt = 96
    RULE_alterGroupStmt = 97
    RULE_add_drop = 98
    RULE_dropGroupStmt = 99
    RULE_createSchemaStmt = 100
    RULE_optSchemaName = 101
    RULE_optSchemaEltList = 102
    RULE_schema_stmt = 103
    RULE_variableSetStmt = 104
    RULE_set_rest = 105
    RULE_set_rest_more = 106
    RULE_var_name = 107
    RULE_var_list = 108
    RULE_var_value = 109
    RULE_iso_level = 110
    RULE_opt_boolean_or_string = 111
    RULE_zone_value = 112
    RULE_opt_encoding = 113
    RULE_colId_or_Sconst = 114
    RULE_variableResetStmt = 115
    RULE_setResetClause = 116
    RULE_functionsetResetClause = 117
    RULE_variableShowStmt = 118
    RULE_constraintsSetStmt = 119
    RULE_constraints_set_list = 120
    RULE_constraints_set_mode = 121
    RULE_checkPointStmt = 122
    RULE_discardStmt = 123
    RULE_alterTableStmt = 124
    RULE_alter_table_cmds = 125
    RULE_alter_table_cmd = 126
    RULE_alter_column_default = 127
    RULE_opt_drop_behavior = 128
    RULE_opt_collate_clause = 129
    RULE_alter_using = 130
    RULE_reloptions = 131
    RULE_opt_reloptions = 132
    RULE_reloption_list = 133
    RULE_reloption_elem = 134
    RULE_alterCompositeTypeStmt = 135
    RULE_alter_type_cmds = 136
    RULE_alter_type_cmd = 137
    RULE_closePortalStmt = 138
    RULE_copyStmt = 139
    RULE_copy_from = 140
    RULE_copy_file_name = 141
    RULE_copy_options = 142
    RULE_copy_opt_list = 143
    RULE_copy_opt_item = 144
    RULE_opt_binary = 145
    RULE_opt_oids = 146
    RULE_copy_delimiter = 147
    RULE_opt_using = 148
    RULE_copy_generic_opt_list = 149
    RULE_copy_generic_opt_elem = 150
    RULE_copy_generic_opt_arg = 151
    RULE_copy_generic_opt_arg_list = 152
    RULE_copy_generic_opt_arg_list_item = 153
    RULE_createStmt = 154
    RULE_optTemp = 155
    RULE_opttableElementList = 156
    RULE_opttypedtableElementList = 157
    RULE_tableElementList = 158
    RULE_typedtableElementList = 159
    RULE_tableElement = 160
    RULE_typedtableElement = 161
    RULE_columnDef = 162
    RULE_columnOptions = 163
    RULE_colQualList = 164
    RULE_colConstraint = 165
    RULE_colconstraintElem = 166
    RULE_constraintAttr = 167
    RULE_tableLikeClause = 168
    RULE_tableLikeOptionList = 169
    RULE_tableLikeOption = 170
    RULE_tableConstraint = 171
    RULE_constraintElem = 172
    RULE_opt_no_inherit = 173
    RULE_opt_column_list = 174
    RULE_columnList = 175
    RULE_columnElem = 176
    RULE_key_match = 177
    RULE_exclusionConstraintList = 178
    RULE_exclusionconstraintElem = 179
    RULE_exclusionWhereClause = 180
    RULE_key_actions = 181
    RULE_key_update = 182
    RULE_key_delete = 183
    RULE_key_action = 184
    RULE_optInherit = 185
    RULE_optWith = 186
    RULE_onCommitOption = 187
    RULE_optTableSpace = 188
    RULE_optConsTableSpace = 189
    RULE_existingIndex = 190
    RULE_createAsStmt = 191
    RULE_create_as_target = 192
    RULE_opt_with_data = 193
    RULE_createSeqStmt = 194
    RULE_alterSeqStmt = 195
    RULE_optseqOptList = 196
    RULE_seqOptList = 197
    RULE_seqOptElem = 198
    RULE_opt_by = 199
    RULE_numericOnly = 200
    RULE_numericOnly_list = 201
    RULE_createPLangStmt = 202
    RULE_opt_trusted = 203
    RULE_handler_name = 204
    RULE_opt_inline_handler = 205
    RULE_validator_clause = 206
    RULE_opt_validator = 207
    RULE_dropPLangStmt = 208
    RULE_opt_procedural = 209
    RULE_createTableSpaceStmt = 210
    RULE_optTableSpaceOwner = 211
    RULE_dropTableSpaceStmt = 212
    RULE_createExtensionStmt = 213
    RULE_create_extension_opt_list = 214
    RULE_create_extension_opt_item = 215
    RULE_alterExtensionStmt = 216
    RULE_alter_extension_opt_list = 217
    RULE_alter_extension_opt_item = 218
    RULE_alterExtensionContentsStmt = 219
    RULE_createFdwStmt = 220
    RULE_fdw_option = 221
    RULE_fdw_options = 222
    RULE_opt_fdw_options = 223
    RULE_dropFdwStmt = 224
    RULE_alterFdwStmt = 225
    RULE_create_generic_options = 226
    RULE_generic_option_list = 227
    RULE_alter_generic_options = 228
    RULE_alter_generic_option_list = 229
    RULE_alter_generic_option_elem = 230
    RULE_generic_option_elem = 231
    RULE_generic_option_name = 232
    RULE_generic_option_arg = 233
    RULE_createForeignServerStmt = 234
    RULE_opt_type = 235
    RULE_foreign_server_version = 236
    RULE_opt_foreign_server_version = 237
    RULE_dropForeignServerStmt = 238
    RULE_alterForeignServerStmt = 239
    RULE_createForeignTableStmt = 240
    RULE_optforeigntableElementList = 241
    RULE_foreigntableElementList = 242
    RULE_foreigntableElement = 243
    RULE_alterForeignTableStmt = 244
    RULE_createUserMappingStmt = 245
    RULE_auth_ident = 246
    RULE_dropUserMappingStmt = 247
    RULE_alterUserMappingStmt = 248
    RULE_createTrigStmt = 249
    RULE_triggerActionTime = 250
    RULE_triggerEvents = 251
    RULE_triggerOneEvent = 252
    RULE_triggerForSpec = 253
    RULE_triggerForOptEach = 254
    RULE_triggerForType = 255
    RULE_triggerWhen = 256
    RULE_triggerFuncArgs = 257
    RULE_triggerFuncArg = 258
    RULE_optConstrFromTable = 259
    RULE_constraintAttributeSpec = 260
    RULE_constraintAttributeElem = 261
    RULE_dropTrigStmt = 262
    RULE_createAssertStmt = 263
    RULE_dropAssertStmt = 264
    RULE_defineStmt = 265
    RULE_definition = 266
    RULE_def_list = 267
    RULE_def_elem = 268
    RULE_def_arg = 269
    RULE_aggr_args = 270
    RULE_old_aggr_definition = 271
    RULE_old_aggr_list = 272
    RULE_old_aggr_elem = 273
    RULE_opt_enum_val_list = 274
    RULE_enum_val_list = 275
    RULE_alterEnumStmt = 276
    RULE_createOpClassStmt = 277
    RULE_opclass_item_list = 278
    RULE_opclass_item = 279
    RULE_opt_default = 280
    RULE_opt_opfamily = 281
    RULE_opclass_purpose = 282
    RULE_opt_recheck = 283
    RULE_createOpFamilyStmt = 284
    RULE_alterOpFamilyStmt = 285
    RULE_opclass_drop_list = 286
    RULE_opclass_drop = 287
    RULE_dropOpClassStmt = 288
    RULE_dropOpFamilyStmt = 289
    RULE_dropOwnedStmt = 290
    RULE_reassignOwnedStmt = 291
    RULE_dropStmt = 292
    RULE_drop_type = 293
    RULE_any_name_list = 294
    RULE_any_name = 295
    RULE_attrs = 296
    RULE_truncateStmt = 297
    RULE_opt_restart_seqs = 298
    RULE_commentStmt = 299
    RULE_comment_type = 300
    RULE_comment_text = 301
    RULE_secLabelStmt = 302
    RULE_opt_provider = 303
    RULE_security_label_type = 304
    RULE_security_label = 305
    RULE_fetchStmt = 306
    RULE_fetch_args = 307
    RULE_from_in = 308
    RULE_opt_from_in = 309
    RULE_grantStmt = 310
    RULE_revokeStmt = 311
    RULE_privileges = 312
    RULE_privilege_list = 313
    RULE_privilege = 314
    RULE_privilege_target = 315
    RULE_grantee_list = 316
    RULE_grantee = 317
    RULE_opt_grant_grant_option = 318
    RULE_function_with_argtypes_list = 319
    RULE_function_with_argtypes = 320
    RULE_grantRoleStmt = 321
    RULE_revokeRoleStmt = 322
    RULE_opt_grant_admin_option = 323
    RULE_opt_granted_by = 324
    RULE_alterDefaultPrivilegesStmt = 325
    RULE_defACLOptionList = 326
    RULE_defACLOption = 327
    RULE_defACLAction = 328
    RULE_defacl_privilege_target = 329
    RULE_indexStmt = 330
    RULE_opt_unique = 331
    RULE_opt_concurrently = 332
    RULE_opt_index_name = 333
    RULE_access_method_clause = 334
    RULE_index_params = 335
    RULE_index_elem = 336
    RULE_opt_collate = 337
    RULE_opt_class = 338
    RULE_opt_asc_desc = 339
    RULE_opt_nulls_order = 340
    RULE_createFunctionStmt = 341
    RULE_opt_or_replace = 342
    RULE_func_args = 343
    RULE_func_args_list = 344
    RULE_func_args_with_defaults = 345
    RULE_func_args_with_defaults_list = 346
    RULE_func_arg = 347
    RULE_arg_class = 348
    RULE_param_name = 349
    RULE_func_return = 350
    RULE_func_type = 351
    RULE_func_arg_with_default = 352
    RULE_createfunc_opt_list = 353
    RULE_common_func_opt_item = 354
    RULE_createfunc_opt_item = 355
    RULE_func_as = 356
    RULE_opt_definition = 357
    RULE_table_func_column = 358
    RULE_table_func_column_list = 359
    RULE_alterFunctionStmt = 360
    RULE_alterfunc_opt_list = 361
    RULE_opt_restrict = 362
    RULE_removeFuncStmt = 363
    RULE_removeAggrStmt = 364
    RULE_removeOperStmt = 365
    RULE_oper_argtypes = 366
    RULE_any_operator = 367
    RULE_doStmt = 368
    RULE_dostmt_opt_list = 369
    RULE_dostmt_opt_item = 370
    RULE_createCastStmt = 371
    RULE_cast_context = 372
    RULE_dropCastStmt = 373
    RULE_opt_if_exists = 374
    RULE_reindexStmt = 375
    RULE_reindex_type = 376
    RULE_opt_force = 377
    RULE_renameStmt = 378
    RULE_opt_column = 379
    RULE_opt_set_data = 380
    RULE_alterObjectSchemaStmt = 381
    RULE_alterOwnerStmt = 382
    RULE_ruleStmt = 383
    RULE_ruleActionList = 384
    RULE_ruleActionMulti = 385
    RULE_ruleActionStmt = 386
    RULE_ruleActionStmtOrEmpty = 387
    RULE_event = 388
    RULE_opt_instead = 389
    RULE_dropruleStmt = 390
    RULE_notifyStmt = 391
    RULE_notify_payload = 392
    RULE_listenStmt = 393
    RULE_unlistenStmt = 394
    RULE_transactionStmt = 395
    RULE_opt_transaction = 396
    RULE_transaction_mode_item = 397
    RULE_transaction_mode_list = 398
    RULE_transaction_mode_list_or_empty = 399
    RULE_viewStmt = 400
    RULE_opt_check_option = 401
    RULE_loadStmt = 402
    RULE_createdbStmt = 403
    RULE_createdb_opt_list = 404
    RULE_createdb_opt_item = 405
    RULE_opt_equal = 406
    RULE_alterDatabaseStmt = 407
    RULE_alterDatabaseSetStmt = 408
    RULE_alterdb_opt_list = 409
    RULE_alterdb_opt_item = 410
    RULE_dropdbStmt = 411
    RULE_createDomainStmt = 412
    RULE_alterDomainStmt = 413
    RULE_opt_as = 414
    RULE_alterTSDictionaryStmt = 415
    RULE_alterTSConfigurationStmt = 416
    RULE_createConversionStmt = 417
    RULE_clusterStmt = 418
    RULE_cluster_index_specification = 419
    RULE_vacuumStmt = 420
    RULE_vacuum_option_list = 421
    RULE_vacuum_option_elem = 422
    RULE_analyzeStmt = 423
    RULE_analyze_keyword = 424
    RULE_opt_verbose = 425
    RULE_opt_full = 426
    RULE_opt_freeze = 427
    RULE_opt_name_list = 428
    RULE_explainStmt = 429
    RULE_explainableStmt = 430
    RULE_explain_option_list = 431
    RULE_explain_option_elem = 432
    RULE_explain_option_name = 433
    RULE_explain_option_arg = 434
    RULE_prepareStmt = 435
    RULE_prep_type_clause = 436
    RULE_preparableStmt = 437
    RULE_executeStmt = 438
    RULE_execute_param_clause = 439
    RULE_deallocateStmt = 440
    RULE_insertStmt = 441
    RULE_insert_rest = 442
    RULE_insert_column_list = 443
    RULE_insert_column_item = 444
    RULE_returning_clause = 445
    RULE_deleteStmt = 446
    RULE_using_clause = 447
    RULE_lockStmt = 448
    RULE_opt_lock = 449
    RULE_lock_type = 450
    RULE_opt_nowait = 451
    RULE_updateStmt = 452
    RULE_set_clause_list = 453
    RULE_set_clause = 454
    RULE_single_set_clause = 455
    RULE_multiple_set_clause = 456
    RULE_set_target = 457
    RULE_set_target_list = 458
    RULE_declareCursorStmt = 459
    RULE_cursor_name = 460
    RULE_cursor_options = 461
    RULE_opt_hold = 462
    RULE_selectStmt = 463
    RULE_select_with_parens = 464
    RULE_select_no_parens = 465
    RULE_select_clause = 466
    RULE_simple_select = 467
    RULE_with_clause = 468
    RULE_cte_list = 469
    RULE_common_table_expr = 470
    RULE_opt_with_clause = 471
    RULE_into_clause = 472
    RULE_optTempTableName = 473
    RULE_opt_table = 474
    RULE_opt_all = 475
    RULE_opt_distinct = 476
    RULE_opt_sort_clause = 477
    RULE_sort_clause = 478
    RULE_sortby_list = 479
    RULE_sortby = 480
    RULE_select_limit = 481
    RULE_opt_select_limit = 482
    RULE_limit_clause = 483
    RULE_offset_clause = 484
    RULE_select_limit_value = 485
    RULE_select_offset_value = 486
    RULE_opt_select_fetch_first_value = 487
    RULE_select_offset_value2 = 488
    RULE_row_or_rows = 489
    RULE_first_or_next = 490
    RULE_group_clause = 491
    RULE_having_clause = 492
    RULE_for_locking_clause = 493
    RULE_opt_for_locking_clause = 494
    RULE_for_locking_items = 495
    RULE_for_locking_item = 496
    RULE_locked_rels_list = 497
    RULE_values_clause = 498
    RULE_from_clause = 499
    RULE_from_list = 500
    RULE_table_ref = 501
    RULE_table_ref2 = 502
    RULE_joined_table = 503
    RULE_alias_clause = 504
    RULE_join_type = 505
    RULE_join_qual = 506
    RULE_relation_expr = 507
    RULE_relation_expr_list = 508
    RULE_relation_expr_opt_alias = 509
    RULE_func_table = 510
    RULE_where_clause = 511
    RULE_where_or_current_clause = 512
    RULE_opttableFuncElementList = 513
    RULE_tableFuncElementList = 514
    RULE_tableFuncElement = 515
    RULE_typename = 516
    RULE_opt_array_bounds = 517
    RULE_simpletypename = 518
    RULE_consttypename = 519
    RULE_genericType = 520
    RULE_opt_type_modifiers = 521
    RULE_numeric = 522
    RULE_opt_float = 523
    RULE_bit = 524
    RULE_constbit = 525
    RULE_bitWithLength = 526
    RULE_bitWithoutLength = 527
    RULE_character = 528
    RULE_constcharacter = 529
    RULE_characterWithLength = 530
    RULE_characterWithoutLength = 531
    RULE_character_def = 532
    RULE_opt_varying = 533
    RULE_opt_charset = 534
    RULE_constDatetime = 535
    RULE_constInterval = 536
    RULE_opt_timezone = 537
    RULE_opt_interval = 538
    RULE_interval_second = 539
    RULE_a_expr = 540
    RULE_b_expr = 541
    RULE_c_expr = 542
    RULE_func_expr = 543
    RULE_xml_root_version = 544
    RULE_opt_xml_root_standalone = 545
    RULE_xml_attributes = 546
    RULE_xml_attribute_list = 547
    RULE_xml_attribute_el = 548
    RULE_document_or_content = 549
    RULE_xml_whitespace_option = 550
    RULE_xmlexists_argument = 551
    RULE_window_clause = 552
    RULE_window_definition_list = 553
    RULE_window_definition = 554
    RULE_over_clause = 555
    RULE_window_specification = 556
    RULE_opt_existing_window_name = 557
    RULE_opt_partition_clause = 558
    RULE_opt_frame_clause = 559
    RULE_frame_extent = 560
    RULE_frame_bound = 561
    RULE_row = 562
    RULE_sub_type = 563
    RULE_all_Op = 564
    RULE_mathOp = 565
    RULE_qual_Op = 566
    RULE_qual_all_Op = 567
    RULE_subquery_Op = 568
    RULE_expr_list = 569
    RULE_func_arg_list = 570
    RULE_func_arg_expr = 571
    RULE_type_list = 572
    RULE_array_expr = 573
    RULE_array_expr_list = 574
    RULE_extract_list = 575
    RULE_extract_arg = 576
    RULE_overlay_list = 577
    RULE_overlay_placing = 578
    RULE_position_list = 579
    RULE_substr_list = 580
    RULE_substr_from = 581
    RULE_substr_for = 582
    RULE_trim_list = 583
    RULE_in_expr = 584
    RULE_case_expr = 585
    RULE_when_clause_list = 586
    RULE_when_clause = 587
    RULE_case_default = 588
    RULE_case_arg = 589
    RULE_columnref = 590
    RULE_indirection_el = 591
    RULE_indirection = 592
    RULE_opt_indirection = 593
    RULE_opt_asymmetric = 594
    RULE_ctext_expr = 595
    RULE_ctext_expr_list = 596
    RULE_ctext_row = 597
    RULE_target_list = 598
    RULE_target_el = 599
    RULE_qualified_name_list = 600
    RULE_qualified_name = 601
    RULE_name_list = 602
    RULE_name = 603
    RULE_database_name = 604
    RULE_access_method = 605
    RULE_attr_name = 606
    RULE_index_name = 607
    RULE_file_name = 608
    RULE_func_name = 609
    RULE_aexprConst = 610
    RULE_iConst = 611
    RULE_sConst = 612
    RULE_roleId = 613
    RULE_signedIconst = 614
    RULE_colId = 615
    RULE_type_function_name = 616
    RULE_colLabel = 617
    RULE_col_name_keyword = 618
    RULE_type_func_name_keyword = 619
    RULE_reserved_keyword = 620

    ruleNames =  [ u"pl_function", u"comp_options", u"comp_option", u"opt_semi", 
                   u"pl_block", u"decl_sect", u"decl_start", u"decl_stmts", 
                   u"decl_stmt", u"decl_statement", u"opt_scrollable", u"decl_cursor_query", 
                   u"decl_cursor_args", u"decl_cursor_arglist", u"decl_cursor_arg", 
                   u"decl_is_for", u"decl_aliasitem", u"decl_varname", u"decl_const", 
                   u"decl_datatype", u"decl_collate", u"decl_notnull", u"decl_defval", 
                   u"decl_defkey", u"assign_operator", u"proc_sect", u"proc_stmts", 
                   u"proc_stmt", u"stmt_perform", u"stmt_assign", u"stmt_getdiag", 
                   u"getdiag_area_opt", u"getdiag_list", u"getdiag_list_item", 
                   u"getdiag_item", u"getdiag_target", u"assign_var", u"stmt_if", 
                   u"stmt_elsifs", u"stmt_else", u"stmt_case", u"opt_expr_until_when", 
                   u"case_when_list", u"case_when", u"opt_case_else", u"stmt_loop", 
                   u"stmt_while", u"stmt_for", u"for_control", u"for_variable", 
                   u"stmt_foreach_a", u"foreach_slice", u"stmt_exit", u"exit_type", 
                   u"stmt_return", u"stmt_raise", u"loop_body", u"stmt_execsql", 
                   u"stmt_dynexecute", u"stmt_open", u"stmt_fetch", u"stmt_move", 
                   u"opt_fetch_direction", u"stmt_close", u"stmt_null", 
                   u"cursor_variable", u"exception_sect", u"proc_exceptions", 
                   u"proc_exception", u"proc_conditions", u"proc_condition", 
                   u"expr_until_semi", u"expr_until_rightbracket", u"expr_until_then", 
                   u"expr_until_loop", u"opt_block_label", u"opt_label", 
                   u"opt_exitcond", u"any_identifier", u"unreserved_keyword", 
                   u"stmtblock", u"stmtmulti", u"stmt", u"createRoleStmt", 
                   u"optRoleList", u"alteroptRoleList", u"alterOptRoleElem", 
                   u"createOptRoleElem", u"createUserStmt", u"alterRoleStmt", 
                   u"opt_in_database", u"alterRoleSetStmt", u"alterUserStmt", 
                   u"alterUserSetStmt", u"dropRoleStmt", u"dropUserStmt", 
                   u"createGroupStmt", u"alterGroupStmt", u"add_drop", u"dropGroupStmt", 
                   u"createSchemaStmt", u"optSchemaName", u"optSchemaEltList", 
                   u"schema_stmt", u"variableSetStmt", u"set_rest", u"set_rest_more", 
                   u"var_name", u"var_list", u"var_value", u"iso_level", 
                   u"opt_boolean_or_string", u"zone_value", u"opt_encoding", 
                   u"colId_or_Sconst", u"variableResetStmt", u"setResetClause", 
                   u"functionsetResetClause", u"variableShowStmt", u"constraintsSetStmt", 
                   u"constraints_set_list", u"constraints_set_mode", u"checkPointStmt", 
                   u"discardStmt", u"alterTableStmt", u"alter_table_cmds", 
                   u"alter_table_cmd", u"alter_column_default", u"opt_drop_behavior", 
                   u"opt_collate_clause", u"alter_using", u"reloptions", 
                   u"opt_reloptions", u"reloption_list", u"reloption_elem", 
                   u"alterCompositeTypeStmt", u"alter_type_cmds", u"alter_type_cmd", 
                   u"closePortalStmt", u"copyStmt", u"copy_from", u"copy_file_name", 
                   u"copy_options", u"copy_opt_list", u"copy_opt_item", 
                   u"opt_binary", u"opt_oids", u"copy_delimiter", u"opt_using", 
                   u"copy_generic_opt_list", u"copy_generic_opt_elem", u"copy_generic_opt_arg", 
                   u"copy_generic_opt_arg_list", u"copy_generic_opt_arg_list_item", 
                   u"createStmt", u"optTemp", u"opttableElementList", u"opttypedtableElementList", 
                   u"tableElementList", u"typedtableElementList", u"tableElement", 
                   u"typedtableElement", u"columnDef", u"columnOptions", 
                   u"colQualList", u"colConstraint", u"colconstraintElem", 
                   u"constraintAttr", u"tableLikeClause", u"tableLikeOptionList", 
                   u"tableLikeOption", u"tableConstraint", u"constraintElem", 
                   u"opt_no_inherit", u"opt_column_list", u"columnList", 
                   u"columnElem", u"key_match", u"exclusionConstraintList", 
                   u"exclusionconstraintElem", u"exclusionWhereClause", 
                   u"key_actions", u"key_update", u"key_delete", u"key_action", 
                   u"optInherit", u"optWith", u"onCommitOption", u"optTableSpace", 
                   u"optConsTableSpace", u"existingIndex", u"createAsStmt", 
                   u"create_as_target", u"opt_with_data", u"createSeqStmt", 
                   u"alterSeqStmt", u"optseqOptList", u"seqOptList", u"seqOptElem", 
                   u"opt_by", u"numericOnly", u"numericOnly_list", u"createPLangStmt", 
                   u"opt_trusted", u"handler_name", u"opt_inline_handler", 
                   u"validator_clause", u"opt_validator", u"dropPLangStmt", 
                   u"opt_procedural", u"createTableSpaceStmt", u"optTableSpaceOwner", 
                   u"dropTableSpaceStmt", u"createExtensionStmt", u"create_extension_opt_list", 
                   u"create_extension_opt_item", u"alterExtensionStmt", 
                   u"alter_extension_opt_list", u"alter_extension_opt_item", 
                   u"alterExtensionContentsStmt", u"createFdwStmt", u"fdw_option", 
                   u"fdw_options", u"opt_fdw_options", u"dropFdwStmt", u"alterFdwStmt", 
                   u"create_generic_options", u"generic_option_list", u"alter_generic_options", 
                   u"alter_generic_option_list", u"alter_generic_option_elem", 
                   u"generic_option_elem", u"generic_option_name", u"generic_option_arg", 
                   u"createForeignServerStmt", u"opt_type", u"foreign_server_version", 
                   u"opt_foreign_server_version", u"dropForeignServerStmt", 
                   u"alterForeignServerStmt", u"createForeignTableStmt", 
                   u"optforeigntableElementList", u"foreigntableElementList", 
                   u"foreigntableElement", u"alterForeignTableStmt", u"createUserMappingStmt", 
                   u"auth_ident", u"dropUserMappingStmt", u"alterUserMappingStmt", 
                   u"createTrigStmt", u"triggerActionTime", u"triggerEvents", 
                   u"triggerOneEvent", u"triggerForSpec", u"triggerForOptEach", 
                   u"triggerForType", u"triggerWhen", u"triggerFuncArgs", 
                   u"triggerFuncArg", u"optConstrFromTable", u"constraintAttributeSpec", 
                   u"constraintAttributeElem", u"dropTrigStmt", u"createAssertStmt", 
                   u"dropAssertStmt", u"defineStmt", u"definition", u"def_list", 
                   u"def_elem", u"def_arg", u"aggr_args", u"old_aggr_definition", 
                   u"old_aggr_list", u"old_aggr_elem", u"opt_enum_val_list", 
                   u"enum_val_list", u"alterEnumStmt", u"createOpClassStmt", 
                   u"opclass_item_list", u"opclass_item", u"opt_default", 
                   u"opt_opfamily", u"opclass_purpose", u"opt_recheck", 
                   u"createOpFamilyStmt", u"alterOpFamilyStmt", u"opclass_drop_list", 
                   u"opclass_drop", u"dropOpClassStmt", u"dropOpFamilyStmt", 
                   u"dropOwnedStmt", u"reassignOwnedStmt", u"dropStmt", 
                   u"drop_type", u"any_name_list", u"any_name", u"attrs", 
                   u"truncateStmt", u"opt_restart_seqs", u"commentStmt", 
                   u"comment_type", u"comment_text", u"secLabelStmt", u"opt_provider", 
                   u"security_label_type", u"security_label", u"fetchStmt", 
                   u"fetch_args", u"from_in", u"opt_from_in", u"grantStmt", 
                   u"revokeStmt", u"privileges", u"privilege_list", u"privilege", 
                   u"privilege_target", u"grantee_list", u"grantee", u"opt_grant_grant_option", 
                   u"function_with_argtypes_list", u"function_with_argtypes", 
                   u"grantRoleStmt", u"revokeRoleStmt", u"opt_grant_admin_option", 
                   u"opt_granted_by", u"alterDefaultPrivilegesStmt", u"defACLOptionList", 
                   u"defACLOption", u"defACLAction", u"defacl_privilege_target", 
                   u"indexStmt", u"opt_unique", u"opt_concurrently", u"opt_index_name", 
                   u"access_method_clause", u"index_params", u"index_elem", 
                   u"opt_collate", u"opt_class", u"opt_asc_desc", u"opt_nulls_order", 
                   u"createFunctionStmt", u"opt_or_replace", u"func_args", 
                   u"func_args_list", u"func_args_with_defaults", u"func_args_with_defaults_list", 
                   u"func_arg", u"arg_class", u"param_name", u"func_return", 
                   u"func_type", u"func_arg_with_default", u"createfunc_opt_list", 
                   u"common_func_opt_item", u"createfunc_opt_item", u"func_as", 
                   u"opt_definition", u"table_func_column", u"table_func_column_list", 
                   u"alterFunctionStmt", u"alterfunc_opt_list", u"opt_restrict", 
                   u"removeFuncStmt", u"removeAggrStmt", u"removeOperStmt", 
                   u"oper_argtypes", u"any_operator", u"doStmt", u"dostmt_opt_list", 
                   u"dostmt_opt_item", u"createCastStmt", u"cast_context", 
                   u"dropCastStmt", u"opt_if_exists", u"reindexStmt", u"reindex_type", 
                   u"opt_force", u"renameStmt", u"opt_column", u"opt_set_data", 
                   u"alterObjectSchemaStmt", u"alterOwnerStmt", u"ruleStmt", 
                   u"ruleActionList", u"ruleActionMulti", u"ruleActionStmt", 
                   u"ruleActionStmtOrEmpty", u"event", u"opt_instead", u"dropruleStmt", 
                   u"notifyStmt", u"notify_payload", u"listenStmt", u"unlistenStmt", 
                   u"transactionStmt", u"opt_transaction", u"transaction_mode_item", 
                   u"transaction_mode_list", u"transaction_mode_list_or_empty", 
                   u"viewStmt", u"opt_check_option", u"loadStmt", u"createdbStmt", 
                   u"createdb_opt_list", u"createdb_opt_item", u"opt_equal", 
                   u"alterDatabaseStmt", u"alterDatabaseSetStmt", u"alterdb_opt_list", 
                   u"alterdb_opt_item", u"dropdbStmt", u"createDomainStmt", 
                   u"alterDomainStmt", u"opt_as", u"alterTSDictionaryStmt", 
                   u"alterTSConfigurationStmt", u"createConversionStmt", 
                   u"clusterStmt", u"cluster_index_specification", u"vacuumStmt", 
                   u"vacuum_option_list", u"vacuum_option_elem", u"analyzeStmt", 
                   u"analyze_keyword", u"opt_verbose", u"opt_full", u"opt_freeze", 
                   u"opt_name_list", u"explainStmt", u"explainableStmt", 
                   u"explain_option_list", u"explain_option_elem", u"explain_option_name", 
                   u"explain_option_arg", u"prepareStmt", u"prep_type_clause", 
                   u"preparableStmt", u"executeStmt", u"execute_param_clause", 
                   u"deallocateStmt", u"insertStmt", u"insert_rest", u"insert_column_list", 
                   u"insert_column_item", u"returning_clause", u"deleteStmt", 
                   u"using_clause", u"lockStmt", u"opt_lock", u"lock_type", 
                   u"opt_nowait", u"updateStmt", u"set_clause_list", u"set_clause", 
                   u"single_set_clause", u"multiple_set_clause", u"set_target", 
                   u"set_target_list", u"declareCursorStmt", u"cursor_name", 
                   u"cursor_options", u"opt_hold", u"selectStmt", u"select_with_parens", 
                   u"select_no_parens", u"select_clause", u"simple_select", 
                   u"with_clause", u"cte_list", u"common_table_expr", u"opt_with_clause", 
                   u"into_clause", u"optTempTableName", u"opt_table", u"opt_all", 
                   u"opt_distinct", u"opt_sort_clause", u"sort_clause", 
                   u"sortby_list", u"sortby", u"select_limit", u"opt_select_limit", 
                   u"limit_clause", u"offset_clause", u"select_limit_value", 
                   u"select_offset_value", u"opt_select_fetch_first_value", 
                   u"select_offset_value2", u"row_or_rows", u"first_or_next", 
                   u"group_clause", u"having_clause", u"for_locking_clause", 
                   u"opt_for_locking_clause", u"for_locking_items", u"for_locking_item", 
                   u"locked_rels_list", u"values_clause", u"from_clause", 
                   u"from_list", u"table_ref", u"table_ref2", u"joined_table", 
                   u"alias_clause", u"join_type", u"join_qual", u"relation_expr", 
                   u"relation_expr_list", u"relation_expr_opt_alias", u"func_table", 
                   u"where_clause", u"where_or_current_clause", u"opttableFuncElementList", 
                   u"tableFuncElementList", u"tableFuncElement", u"typename", 
                   u"opt_array_bounds", u"simpletypename", u"consttypename", 
                   u"genericType", u"opt_type_modifiers", u"numeric", u"opt_float", 
                   u"bit", u"constbit", u"bitWithLength", u"bitWithoutLength", 
                   u"character", u"constcharacter", u"characterWithLength", 
                   u"characterWithoutLength", u"character_def", u"opt_varying", 
                   u"opt_charset", u"constDatetime", u"constInterval", u"opt_timezone", 
                   u"opt_interval", u"interval_second", u"a_expr", u"b_expr", 
                   u"c_expr", u"func_expr", u"xml_root_version", u"opt_xml_root_standalone", 
                   u"xml_attributes", u"xml_attribute_list", u"xml_attribute_el", 
                   u"document_or_content", u"xml_whitespace_option", u"xmlexists_argument", 
                   u"window_clause", u"window_definition_list", u"window_definition", 
                   u"over_clause", u"window_specification", u"opt_existing_window_name", 
                   u"opt_partition_clause", u"opt_frame_clause", u"frame_extent", 
                   u"frame_bound", u"row", u"sub_type", u"all_Op", u"mathOp", 
                   u"qual_Op", u"qual_all_Op", u"subquery_Op", u"expr_list", 
                   u"func_arg_list", u"func_arg_expr", u"type_list", u"array_expr", 
                   u"array_expr_list", u"extract_list", u"extract_arg", 
                   u"overlay_list", u"overlay_placing", u"position_list", 
                   u"substr_list", u"substr_from", u"substr_for", u"trim_list", 
                   u"in_expr", u"case_expr", u"when_clause_list", u"when_clause", 
                   u"case_default", u"case_arg", u"columnref", u"indirection_el", 
                   u"indirection", u"opt_indirection", u"opt_asymmetric", 
                   u"ctext_expr", u"ctext_expr_list", u"ctext_row", u"target_list", 
                   u"target_el", u"qualified_name_list", u"qualified_name", 
                   u"name_list", u"name", u"database_name", u"access_method", 
                   u"attr_name", u"index_name", u"file_name", u"func_name", 
                   u"aexprConst", u"iConst", u"sConst", u"roleId", u"signedIconst", 
                   u"colId", u"type_function_name", u"colLabel", u"col_name_keyword", 
                   u"type_func_name_keyword", u"reserved_keyword" ]

    def __init__(self, input):
        super(PlPgSqlParser, self).__init__(input)
        self.checkVersion("4.2.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Pl_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Pl_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_semi(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_semiContext,0)


        def comp_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Comp_optionsContext,0)


        def pl_block(self):
            return self.getTypedRuleContext(PlPgSqlParser.Pl_blockContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_pl_function

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPl_function(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPl_function(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPl_function(self)
            else:
                return visitor.visitChildren(self)




    def pl_function(self):

        localctx = PlPgSqlParser.Pl_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pl_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242 
            self.comp_options(0)
            self.state = 1243 
            self.pl_block()
            self.state = 1244 
            self.opt_semi()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Comp_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def comp_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Comp_optionContext,0)


        def comp_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Comp_optionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_comp_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterComp_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitComp_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitComp_options(self)
            else:
                return visitor.visitChildren(self)



    def comp_options(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Comp_optionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_comp_options, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Comp_optionsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comp_options)
                    self.state = 1247
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1248 
                    self.comp_option() 
                self.state = 1253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Comp_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Comp_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_USE_VARIABLE(self):
            return self.getToken(PlPgSqlParser.K_USE_VARIABLE, 0)

        def K_VARIABLE_CONFLICT(self):
            return self.getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0)

        def K_DUMP(self):
            return self.getToken(PlPgSqlParser.K_DUMP, 0)

        def K_OPTION(self):
            return self.getToken(PlPgSqlParser.K_OPTION, 0)

        def K_ERROR(self):
            return self.getToken(PlPgSqlParser.K_ERROR, 0)

        def K_USE_COLUMN(self):
            return self.getToken(PlPgSqlParser.K_USE_COLUMN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_comp_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterComp_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitComp_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitComp_option(self)
            else:
                return visitor.visitChildren(self)




    def comp_option(self):

        localctx = PlPgSqlParser.Comp_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_comp_option)
        try:
            self.state = 1266
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1254
                self.match(self.T__0)
                self.state = 1255
                self.match(self.K_OPTION)
                self.state = 1256
                self.match(self.K_DUMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                self.match(self.T__0)
                self.state = 1258
                self.match(self.K_VARIABLE_CONFLICT)
                self.state = 1259
                self.match(self.K_ERROR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1260
                self.match(self.T__0)
                self.state = 1261
                self.match(self.K_VARIABLE_CONFLICT)
                self.state = 1262
                self.match(self.K_USE_VARIABLE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1263
                self.match(self.T__0)
                self.state = 1264
                self.match(self.K_VARIABLE_CONFLICT)
                self.state = 1265
                self.match(self.K_USE_COLUMN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_semiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_semiContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_semi

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_semi(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_semi(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_semi(self)
            else:
                return visitor.visitChildren(self)




    def opt_semi(self):

        localctx = PlPgSqlParser.Opt_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_opt_semi)
        try:
            self.state = 1270
            token = self._input.LA(1)
            if token in [self.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.T__3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(self.T__3)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pl_blockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Pl_blockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_sectContext,0)


        def exception_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Exception_sectContext,0)


        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def K_BEGIN(self):
            return self.getToken(PlPgSqlParser.K_BEGIN, 0)

        def opt_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_labelContext,0)


        def K_END(self):
            return self.getToken(PlPgSqlParser.K_END, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_pl_block

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPl_block(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPl_block(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPl_block(self)
            else:
                return visitor.visitChildren(self)




    def pl_block(self):

        localctx = PlPgSqlParser.Pl_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_pl_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272 
            self.decl_sect()
            self.state = 1273
            self.match(self.K_BEGIN)
            self.state = 1274 
            self.proc_sect()
            self.state = 1275 
            self.exception_sect()
            self.state = 1276
            self.match(self.K_END)
            self.state = 1277 
            self.opt_label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_sectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_sectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_block_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_block_labelContext,0)


        def decl_stmts(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_stmtsContext,0)


        def decl_start(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_startContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_sect

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_sect(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_sect(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_sect(self)
            else:
                return visitor.visitChildren(self)




    def decl_sect(self):

        localctx = PlPgSqlParser.Decl_sectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decl_sect)
        try:
            self.state = 1287
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279 
                self.opt_block_label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280 
                self.opt_block_label()
                self.state = 1281 
                self.decl_start()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1283 
                self.opt_block_label()
                self.state = 1284 
                self.decl_start()
                self.state = 1285 
                self.decl_stmts(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_startContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_startContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DECLARE(self):
            return self.getToken(PlPgSqlParser.K_DECLARE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_start

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_start(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_start(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_start(self)
            else:
                return visitor.visitChildren(self)




    def decl_start(self):

        localctx = PlPgSqlParser.Decl_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_decl_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(self.K_DECLARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_stmtsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_stmtsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_stmts(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_stmtsContext,0)


        def decl_stmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_stmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_stmts

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_stmts(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_stmts(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_stmts(self)
            else:
                return visitor.visitChildren(self)



    def decl_stmts(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Decl_stmtsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_decl_stmts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292 
            self.decl_stmt()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Decl_stmtsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_stmts)
                    self.state = 1294
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1295 
                    self.decl_stmt() 
                self.state = 1300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Decl_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LESS_LESS(self):
            return self.getToken(PlPgSqlParser.LESS_LESS, 0)

        def K_DECLARE(self):
            return self.getToken(PlPgSqlParser.K_DECLARE, 0)

        def any_identifier(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_identifierContext,0)


        def GREATER_GREATER(self):
            return self.getToken(PlPgSqlParser.GREATER_GREATER, 0)

        def decl_statement(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_statementContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_stmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_stmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_stmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_stmt(self)
            else:
                return visitor.visitChildren(self)




    def decl_stmt(self):

        localctx = PlPgSqlParser.Decl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_decl_stmt)
        try:
            self.state = 1307
            token = self._input.LA(1)
            if token in [self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.T_WORD, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301 
                self.decl_statement()

            elif token in [self.K_DECLARE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.match(self.K_DECLARE)

            elif token in [self.LESS_LESS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self.match(self.LESS_LESS)
                self.state = 1304 
                self.any_identifier()
                self.state = 1305
                self.match(self.GREATER_GREATER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_cursor_query(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_cursor_queryContext,0)


        def K_FOR(self):
            return self.getToken(PlPgSqlParser.K_FOR, 0)

        def decl_cursor_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_cursor_argsContext,0)


        def decl_notnull(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_notnullContext,0)


        def K_ALIAS(self):
            return self.getToken(PlPgSqlParser.K_ALIAS, 0)

        def K_CURSOR(self):
            return self.getToken(PlPgSqlParser.K_CURSOR, 0)

        def decl_datatype(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_datatypeContext,0)


        def decl_defval(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_defvalContext,0)


        def decl_varname(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_varnameContext,0)


        def opt_scrollable(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_scrollableContext,0)


        def decl_is_for(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_is_forContext,0)


        def decl_const(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_constContext,0)


        def decl_collate(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_collateContext,0)


        def decl_aliasitem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_aliasitemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_statement

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_statement(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_statement(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_statement(self)
            else:
                return visitor.visitChildren(self)




    def decl_statement(self):

        localctx = PlPgSqlParser.Decl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_decl_statement)
        try:
            self.state = 1329
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309 
                self.decl_varname()
                self.state = 1310 
                self.decl_const()
                self.state = 1311 
                self.decl_datatype()
                self.state = 1312 
                self.decl_collate()
                self.state = 1313 
                self.decl_notnull()
                self.state = 1314 
                self.decl_defval()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316 
                self.decl_varname()
                self.state = 1317
                self.match(self.K_ALIAS)
                self.state = 1318
                self.match(self.K_FOR)
                self.state = 1319 
                self.decl_aliasitem()
                self.state = 1320
                self.match(self.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322 
                self.decl_varname()
                self.state = 1323 
                self.opt_scrollable()
                self.state = 1324
                self.match(self.K_CURSOR)
                self.state = 1325 
                self.decl_cursor_args()
                self.state = 1326 
                self.decl_is_for()
                self.state = 1327 
                self.decl_cursor_query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_scrollableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_scrollableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SCROLL(self):
            return self.getToken(PlPgSqlParser.K_SCROLL, 0)

        def K_NO(self):
            return self.getToken(PlPgSqlParser.K_NO, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_scrollable

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_scrollable(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_scrollable(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_scrollable(self)
            else:
                return visitor.visitChildren(self)




    def opt_scrollable(self):

        localctx = PlPgSqlParser.Opt_scrollableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_opt_scrollable)
        try:
            self.state = 1335
            token = self._input.LA(1)
            if token in [self.K_CURSOR]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1332
                self.match(self.K_NO)
                self.state = 1333
                self.match(self.K_SCROLL)

            elif token in [self.K_SCROLL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1334
                self.match(self.K_SCROLL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_cursor_queryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_cursor_queryContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_cursor_query

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_cursor_query(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_cursor_query(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_cursor_query(self)
            else:
                return visitor.visitChildren(self)




    def decl_cursor_query(self):

        localctx = PlPgSqlParser.Decl_cursor_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_decl_cursor_query)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_cursor_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_cursor_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_cursor_arglist(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_cursor_arglistContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_cursor_args

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_cursor_args(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_cursor_args(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_cursor_args(self)
            else:
                return visitor.visitChildren(self)




    def decl_cursor_args(self):

        localctx = PlPgSqlParser.Decl_cursor_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_decl_cursor_args)
        try:
            self.state = 1344
            token = self._input.LA(1)
            if token in [self.K_FOR, self.K_IS]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.match(self.T__7)
                self.state = 1341 
                self.decl_cursor_arglist(0)
                self.state = 1342
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_cursor_arglistContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_cursor_arglistContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_cursor_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_cursor_argContext,0)


        def decl_cursor_arglist(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_cursor_arglistContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_cursor_arglist

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_cursor_arglist(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_cursor_arglist(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_cursor_arglist(self)
            else:
                return visitor.visitChildren(self)



    def decl_cursor_arglist(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Decl_cursor_arglistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_decl_cursor_arglist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347 
            self.decl_cursor_arg()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Decl_cursor_arglistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_cursor_arglist)
                    self.state = 1349
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1350
                    self.match(self.T__12)
                    self.state = 1351 
                    self.decl_cursor_arg() 
                self.state = 1356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Decl_cursor_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_cursor_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_datatype(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_datatypeContext,0)


        def decl_varname(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_varnameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_cursor_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_cursor_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_cursor_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_cursor_arg(self)
            else:
                return visitor.visitChildren(self)




    def decl_cursor_arg(self):

        localctx = PlPgSqlParser.Decl_cursor_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_decl_cursor_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357 
            self.decl_varname()
            self.state = 1358 
            self.decl_datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_is_forContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_is_forContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_FOR(self):
            return self.getToken(PlPgSqlParser.K_FOR, 0)

        def K_IS(self):
            return self.getToken(PlPgSqlParser.K_IS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_is_for

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_is_for(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_is_for(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_is_for(self)
            else:
                return visitor.visitChildren(self)




    def decl_is_for(self):

        localctx = PlPgSqlParser.Decl_is_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_decl_is_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.K_FOR or _la==PlPgSqlParser.K_IS):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_aliasitemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_aliasitemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_aliasitem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_aliasitem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_aliasitem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_aliasitem(self)
            else:
                return visitor.visitChildren(self)




    def decl_aliasitem(self):

        localctx = PlPgSqlParser.Decl_aliasitemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_decl_aliasitem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.T_WORD or _la==PlPgSqlParser.T_CWORD):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_varnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_varnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Unreserved_keywordContext,0)


        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_varname

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_varname(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_varname(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_varname(self)
            else:
                return visitor.visitChildren(self)




    def decl_varname(self):

        localctx = PlPgSqlParser.Decl_varnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_decl_varname)
        try:
            self.state = 1366
            token = self._input.LA(1)
            if token in [self.T_WORD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.match(self.T_WORD)

            elif token in [self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1365 
                self.unreserved_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_constContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_constContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CONSTANT(self):
            return self.getToken(PlPgSqlParser.K_CONSTANT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_const

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_const(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_const(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_const(self)
            else:
                return visitor.visitChildren(self)




    def decl_const(self):

        localctx = PlPgSqlParser.Decl_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_decl_const)
        try:
            self.state = 1370
            token = self._input.LA(1)
            if token in [self.T__4, self.T__3, self.COLON_EQUALS, self.K_COLLATE, self.K_NOT, self.K_DEFAULT]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_CONSTANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1369
                self.match(self.K_CONSTANT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_datatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_datatypeContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_datatype

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_datatype(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_datatype(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_datatype(self)
            else:
                return visitor.visitChildren(self)




    def decl_datatype(self):

        localctx = PlPgSqlParser.Decl_datatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_decl_datatype)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_collateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_collateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def K_COLLATE(self):
            return self.getToken(PlPgSqlParser.K_COLLATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_collate

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_collate(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_collate(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_collate(self)
            else:
                return visitor.visitChildren(self)




    def decl_collate(self):

        localctx = PlPgSqlParser.Decl_collateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_decl_collate)
        try:
            self.state = 1379
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1375
                self.match(self.K_COLLATE)
                self.state = 1376
                self.match(self.T_WORD)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1377
                self.match(self.K_COLLATE)
                self.state = 1378
                self.match(self.T_CWORD)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_notnullContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(PlPgSqlParser.K_NULL, 0)

        def K_NOT(self):
            return self.getToken(PlPgSqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_notnull

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_notnull(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_notnull(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_notnull(self)
            else:
                return visitor.visitChildren(self)




    def decl_notnull(self):

        localctx = PlPgSqlParser.Decl_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_decl_notnull)
        try:
            self.state = 1384
            token = self._input.LA(1)
            if token in [self.T__4, self.T__3, self.COLON_EQUALS, self.K_DEFAULT]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.match(self.K_NOT)
                self.state = 1383
                self.match(self.K_NULL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_defvalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_defvalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decl_defkey(self):
            return self.getTypedRuleContext(PlPgSqlParser.Decl_defkeyContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_defval

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_defval(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_defval(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_defval(self)
            else:
                return visitor.visitChildren(self)




    def decl_defval(self):

        localctx = PlPgSqlParser.Decl_defvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_decl_defval)
        try:
            self.state = 1388
            token = self._input.LA(1)
            if token in [self.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(self.T__3)

            elif token in [self.T__4, self.COLON_EQUALS, self.K_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387 
                self.decl_defkey()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Decl_defkeyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Decl_defkeyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DEFAULT(self):
            return self.getToken(PlPgSqlParser.K_DEFAULT, 0)

        def assign_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Assign_operatorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_decl_defkey

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDecl_defkey(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDecl_defkey(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDecl_defkey(self)
            else:
                return visitor.visitChildren(self)




    def decl_defkey(self):

        localctx = PlPgSqlParser.Decl_defkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_decl_defkey)
        try:
            self.state = 1392
            token = self._input.LA(1)
            if token in [self.T__4, self.COLON_EQUALS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390 
                self.assign_operator()

            elif token in [self.K_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.match(self.K_DEFAULT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Assign_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON_EQUALS(self):
            return self.getToken(PlPgSqlParser.COLON_EQUALS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_assign_operator

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAssign_operator(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAssign_operator(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAssign_operator(self)
            else:
                return visitor.visitChildren(self)




    def assign_operator(self):

        localctx = PlPgSqlParser.Assign_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assign_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.T__4 or _la==PlPgSqlParser.COLON_EQUALS):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_sectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_sectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_stmts(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_stmtsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_sect

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_sect(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_sect(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_sect(self)
            else:
                return visitor.visitChildren(self)




    def proc_sect(self):

        localctx = PlPgSqlParser.Proc_sectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_proc_sect)
        try:
            self.state = 1398
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397 
                self.proc_stmts(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_stmtsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_stmtsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_stmts(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_stmtsContext,0)


        def proc_stmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_stmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_stmts

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_stmts(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_stmts(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_stmts(self)
            else:
                return visitor.visitChildren(self)



    def proc_stmts(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Proc_stmtsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_proc_stmts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401 
            self.proc_stmt()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Proc_stmtsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_proc_stmts)
                    self.state = 1403
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1404 
                    self.proc_stmt() 
                self.state = 1409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Proc_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmt_if(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_ifContext,0)


        def stmt_loop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_loopContext,0)


        def stmt_dynexecute(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_dynexecuteContext,0)


        def stmt_null(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_nullContext,0)


        def stmt_execsql(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_execsqlContext,0)


        def stmt_for(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_forContext,0)


        def stmt_case(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_caseContext,0)


        def stmt_raise(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_raiseContext,0)


        def stmt_open(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_openContext,0)


        def stmt_close(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_closeContext,0)


        def stmt_foreach_a(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_foreach_aContext,0)


        def stmt_exit(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_exitContext,0)


        def stmt_perform(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_performContext,0)


        def stmt_while(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_whileContext,0)


        def stmt_return(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_returnContext,0)


        def stmt_fetch(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_fetchContext,0)


        def stmt_getdiag(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_getdiagContext,0)


        def stmt_assign(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_assignContext,0)


        def stmt_move(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_moveContext,0)


        def pl_block(self):
            return self.getTypedRuleContext(PlPgSqlParser.Pl_blockContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_stmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_stmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_stmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_stmt(self)
            else:
                return visitor.visitChildren(self)




    def proc_stmt(self):

        localctx = PlPgSqlParser.Proc_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_proc_stmt)
        try:
            self.state = 1432
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410 
                self.pl_block()
                self.state = 1411
                self.match(self.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1413 
                self.stmt_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1414 
                self.stmt_if()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1415 
                self.stmt_case()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1416 
                self.stmt_loop()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1417 
                self.stmt_while()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1418 
                self.stmt_for()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1419 
                self.stmt_foreach_a()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1420 
                self.stmt_exit()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1421 
                self.stmt_return()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1422 
                self.stmt_raise()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1423 
                self.stmt_execsql()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1424 
                self.stmt_dynexecute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1425 
                self.stmt_perform()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1426 
                self.stmt_getdiag()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1427 
                self.stmt_open()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1428 
                self.stmt_fetch()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1429 
                self.stmt_move()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1430 
                self.stmt_close()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1431 
                self.stmt_null()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_performContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_performContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PERFORM(self):
            return self.getToken(PlPgSqlParser.K_PERFORM, 0)

        def expr_until_semi(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_semiContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_perform

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_perform(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_perform(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_perform(self)
            else:
                return visitor.visitChildren(self)




    def stmt_perform(self):

        localctx = PlPgSqlParser.Stmt_performContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_stmt_perform)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(self.K_PERFORM)
            self.state = 1435 
            self.expr_until_semi()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_assignContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_assignContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assign_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Assign_operatorContext,0)


        def assign_var(self):
            return self.getTypedRuleContext(PlPgSqlParser.Assign_varContext,0)


        def expr_until_semi(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_semiContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_assign

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_assign(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_assign(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_assign(self)
            else:
                return visitor.visitChildren(self)




    def stmt_assign(self):

        localctx = PlPgSqlParser.Stmt_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_stmt_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437 
            self.assign_var(0)
            self.state = 1438 
            self.assign_operator()
            self.state = 1439 
            self.expr_until_semi()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_getdiagContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_getdiagContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DIAGNOSTICS(self):
            return self.getToken(PlPgSqlParser.K_DIAGNOSTICS, 0)

        def K_GET(self):
            return self.getToken(PlPgSqlParser.K_GET, 0)

        def getdiag_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_listContext,0)


        def getdiag_area_opt(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_area_optContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_getdiag

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_getdiag(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_getdiag(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_getdiag(self)
            else:
                return visitor.visitChildren(self)




    def stmt_getdiag(self):

        localctx = PlPgSqlParser.Stmt_getdiagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_stmt_getdiag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(self.K_GET)
            self.state = 1442 
            self.getdiag_area_opt()
            self.state = 1443
            self.match(self.K_DIAGNOSTICS)
            self.state = 1444 
            self.getdiag_list(0)
            self.state = 1445
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getdiag_area_optContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Getdiag_area_optContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_STACKED(self):
            return self.getToken(PlPgSqlParser.K_STACKED, 0)

        def K_CURRENT(self):
            return self.getToken(PlPgSqlParser.K_CURRENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_getdiag_area_opt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGetdiag_area_opt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGetdiag_area_opt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGetdiag_area_opt(self)
            else:
                return visitor.visitChildren(self)




    def getdiag_area_opt(self):

        localctx = PlPgSqlParser.Getdiag_area_optContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_getdiag_area_opt)
        try:
            self.state = 1450
            token = self._input.LA(1)
            if token in [self.K_DIAGNOSTICS]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_CURRENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.match(self.K_CURRENT)

            elif token in [self.K_STACKED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1449
                self.match(self.K_STACKED)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getdiag_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Getdiag_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def getdiag_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_listContext,0)


        def getdiag_list_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_list_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_getdiag_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGetdiag_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGetdiag_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGetdiag_list(self)
            else:
                return visitor.visitChildren(self)



    def getdiag_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Getdiag_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_getdiag_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453 
            self.getdiag_list_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1460
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Getdiag_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_getdiag_list)
                    self.state = 1455
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1456
                    self.match(self.T__12)
                    self.state = 1457 
                    self.getdiag_list_item() 
                self.state = 1462
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Getdiag_list_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Getdiag_list_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assign_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Assign_operatorContext,0)


        def getdiag_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_itemContext,0)


        def getdiag_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Getdiag_targetContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_getdiag_list_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGetdiag_list_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGetdiag_list_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGetdiag_list_item(self)
            else:
                return visitor.visitChildren(self)




    def getdiag_list_item(self):

        localctx = PlPgSqlParser.Getdiag_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_getdiag_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463 
            self.getdiag_target()
            self.state = 1464 
            self.assign_operator()
            self.state = 1465 
            self.getdiag_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getdiag_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Getdiag_itemContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_getdiag_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGetdiag_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGetdiag_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGetdiag_item(self)
            else:
                return visitor.visitChildren(self)




    def getdiag_item(self):

        localctx = PlPgSqlParser.Getdiag_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_getdiag_item)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getdiag_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Getdiag_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def T_DATUM(self):
            return self.getToken(PlPgSqlParser.T_DATUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_getdiag_target

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGetdiag_target(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGetdiag_target(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGetdiag_target(self)
            else:
                return visitor.visitChildren(self)




    def getdiag_target(self):

        localctx = PlPgSqlParser.Getdiag_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_getdiag_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            _la = self._input.LA(1)
            if not(((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (self.T_WORD - 449)) | (1 << (self.T_CWORD - 449)) | (1 << (self.T_DATUM - 449)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_varContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Assign_varContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assign_var(self):
            return self.getTypedRuleContext(PlPgSqlParser.Assign_varContext,0)


        def expr_until_rightbracket(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_rightbracketContext,0)


        def T_DATUM(self):
            return self.getToken(PlPgSqlParser.T_DATUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_assign_var

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAssign_var(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAssign_var(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAssign_var(self)
            else:
                return visitor.visitChildren(self)



    def assign_var(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Assign_varContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_assign_var, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(self.T_DATUM)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Assign_varContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assign_var)
                    self.state = 1474
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1475
                    self.match(self.T__8)
                    self.state = 1476 
                    self.expr_until_rightbracket() 
                self.state = 1481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Stmt_ifContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_ifContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmt_elsifs(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_elsifsContext,0)


        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def expr_until_then(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_thenContext,0)


        def K_END(self):
            return self.getToken(PlPgSqlParser.K_END, 0)

        def stmt_else(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_elseContext,0)


        def K_IF(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.K_IF)
            else:
                return self.getToken(PlPgSqlParser.K_IF, i)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_if

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_if(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_if(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_if(self)
            else:
                return visitor.visitChildren(self)




    def stmt_if(self):

        localctx = PlPgSqlParser.Stmt_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stmt_if)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(self.K_IF)
            self.state = 1483 
            self.expr_until_then()
            self.state = 1484 
            self.proc_sect()
            self.state = 1485 
            self.stmt_elsifs(0)
            self.state = 1486 
            self.stmt_else()
            self.state = 1487
            self.match(self.K_END)
            self.state = 1488
            self.match(self.K_IF)
            self.state = 1489
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_elsifsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_elsifsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ELSIF(self):
            return self.getToken(PlPgSqlParser.K_ELSIF, 0)

        def stmt_elsifs(self):
            return self.getTypedRuleContext(PlPgSqlParser.Stmt_elsifsContext,0)


        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def expr_until_then(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_thenContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_elsifs

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_elsifs(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_elsifs(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_elsifs(self)
            else:
                return visitor.visitChildren(self)



    def stmt_elsifs(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Stmt_elsifsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_stmt_elsifs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Stmt_elsifsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_elsifs)
                    self.state = 1492
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1493
                    self.match(self.K_ELSIF)
                    self.state = 1494 
                    self.expr_until_then()
                    self.state = 1495 
                    self.proc_sect() 
                self.state = 1501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Stmt_elseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_elseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def K_ELSE(self):
            return self.getToken(PlPgSqlParser.K_ELSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_else

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_else(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_else(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_else(self)
            else:
                return visitor.visitChildren(self)




    def stmt_else(self):

        localctx = PlPgSqlParser.Stmt_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_stmt_else)
        try:
            self.state = 1505
            token = self._input.LA(1)
            if token in [self.K_END]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1503
                self.match(self.K_ELSE)
                self.state = 1504 
                self.proc_sect()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_caseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_caseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def case_when_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_when_listContext,0)


        def opt_case_else(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_case_elseContext,0)


        def opt_expr_until_when(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_expr_until_whenContext,0)


        def K_END(self):
            return self.getToken(PlPgSqlParser.K_END, 0)

        def K_CASE(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.K_CASE)
            else:
                return self.getToken(PlPgSqlParser.K_CASE, i)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_case

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_case(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_case(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_case(self)
            else:
                return visitor.visitChildren(self)




    def stmt_case(self):

        localctx = PlPgSqlParser.Stmt_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stmt_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(self.K_CASE)
            self.state = 1508 
            self.opt_expr_until_when()
            self.state = 1509 
            self.case_when_list(0)
            self.state = 1510 
            self.opt_case_else()
            self.state = 1511
            self.match(self.K_END)
            self.state = 1512
            self.match(self.K_CASE)
            self.state = 1513
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_expr_until_whenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_expr_until_whenContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_expr_until_when

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_expr_until_when(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_expr_until_when(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_expr_until_when(self)
            else:
                return visitor.visitChildren(self)




    def opt_expr_until_when(self):

        localctx = PlPgSqlParser.Opt_expr_until_whenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_opt_expr_until_when)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Case_when_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def case_when(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_whenContext,0)


        def case_when_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_when_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_case_when_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCase_when_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCase_when_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCase_when_list(self)
            else:
                return visitor.visitChildren(self)



    def case_when_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Case_when_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_case_when_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518 
            self.case_when()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Case_when_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_case_when_list)
                    self.state = 1520
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1521 
                    self.case_when() 
                self.state = 1526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Case_whenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Case_whenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WHEN(self):
            return self.getToken(PlPgSqlParser.K_WHEN, 0)

        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def expr_until_then(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_thenContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_case_when

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCase_when(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCase_when(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCase_when(self)
            else:
                return visitor.visitChildren(self)




    def case_when(self):

        localctx = PlPgSqlParser.Case_whenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_case_when)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(self.K_WHEN)
            self.state = 1528 
            self.expr_until_then()
            self.state = 1529 
            self.proc_sect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_case_elseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_case_elseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def K_ELSE(self):
            return self.getToken(PlPgSqlParser.K_ELSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_case_else

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_case_else(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_case_else(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_case_else(self)
            else:
                return visitor.visitChildren(self)




    def opt_case_else(self):

        localctx = PlPgSqlParser.Opt_case_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_opt_case_else)
        try:
            self.state = 1534
            token = self._input.LA(1)
            if token in [self.K_END]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1532
                self.match(self.K_ELSE)
                self.state = 1533 
                self.proc_sect()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_loopContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_loopContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_block_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_block_labelContext,0)


        def loop_body(self):
            return self.getTypedRuleContext(PlPgSqlParser.Loop_bodyContext,0)


        def K_LOOP(self):
            return self.getToken(PlPgSqlParser.K_LOOP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_loop

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_loop(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_loop(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_loop(self)
            else:
                return visitor.visitChildren(self)




    def stmt_loop(self):

        localctx = PlPgSqlParser.Stmt_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_stmt_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536 
            self.opt_block_label()
            self.state = 1537
            self.match(self.K_LOOP)
            self.state = 1538 
            self.loop_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_whileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_whileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_until_loop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_loopContext,0)


        def K_WHILE(self):
            return self.getToken(PlPgSqlParser.K_WHILE, 0)

        def opt_block_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_block_labelContext,0)


        def loop_body(self):
            return self.getTypedRuleContext(PlPgSqlParser.Loop_bodyContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_while

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_while(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_while(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_while(self)
            else:
                return visitor.visitChildren(self)




    def stmt_while(self):

        localctx = PlPgSqlParser.Stmt_whileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stmt_while)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540 
            self.opt_block_label()
            self.state = 1541
            self.match(self.K_WHILE)
            self.state = 1542 
            self.expr_until_loop()
            self.state = 1543 
            self.loop_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_forContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_forContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_block_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_block_labelContext,0)


        def K_FOR(self):
            return self.getToken(PlPgSqlParser.K_FOR, 0)

        def loop_body(self):
            return self.getTypedRuleContext(PlPgSqlParser.Loop_bodyContext,0)


        def for_control(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_controlContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_for

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_for(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_for(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_for(self)
            else:
                return visitor.visitChildren(self)




    def stmt_for(self):

        localctx = PlPgSqlParser.Stmt_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_stmt_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545 
            self.opt_block_label()
            self.state = 1546
            self.match(self.K_FOR)
            self.state = 1547 
            self.for_control()
            self.state = 1548 
            self.loop_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_controlContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.For_controlContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_variableContext,0)


        def K_IN(self):
            return self.getToken(PlPgSqlParser.K_IN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_for_control

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFor_control(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFor_control(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFor_control(self)
            else:
                return visitor.visitChildren(self)




    def for_control(self):

        localctx = PlPgSqlParser.For_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_for_control)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550 
            self.for_variable()
            self.state = 1551
            self.match(self.K_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_variableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.For_variableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def T_DATUM(self):
            return self.getToken(PlPgSqlParser.T_DATUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_for_variable

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFor_variable(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFor_variable(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFor_variable(self)
            else:
                return visitor.visitChildren(self)




    def for_variable(self):

        localctx = PlPgSqlParser.For_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_for_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            _la = self._input.LA(1)
            if not(((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (self.T_WORD - 449)) | (1 << (self.T_CWORD - 449)) | (1 << (self.T_DATUM - 449)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_foreach_aContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_foreach_aContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_variableContext,0)


        def expr_until_loop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_loopContext,0)


        def opt_block_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_block_labelContext,0)


        def K_ARRAY(self):
            return self.getToken(PlPgSqlParser.K_ARRAY, 0)

        def loop_body(self):
            return self.getTypedRuleContext(PlPgSqlParser.Loop_bodyContext,0)


        def foreach_slice(self):
            return self.getTypedRuleContext(PlPgSqlParser.Foreach_sliceContext,0)


        def K_FOREACH(self):
            return self.getToken(PlPgSqlParser.K_FOREACH, 0)

        def K_IN(self):
            return self.getToken(PlPgSqlParser.K_IN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_foreach_a

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_foreach_a(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_foreach_a(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_foreach_a(self)
            else:
                return visitor.visitChildren(self)




    def stmt_foreach_a(self):

        localctx = PlPgSqlParser.Stmt_foreach_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_stmt_foreach_a)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555 
            self.opt_block_label()
            self.state = 1556
            self.match(self.K_FOREACH)
            self.state = 1557 
            self.for_variable()
            self.state = 1558 
            self.foreach_slice()
            self.state = 1559
            self.match(self.K_IN)
            self.state = 1560
            self.match(self.K_ARRAY)
            self.state = 1561 
            self.expr_until_loop()
            self.state = 1562 
            self.loop_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreach_sliceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Foreach_sliceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ICONST(self):
            return self.getToken(PlPgSqlParser.ICONST, 0)

        def K_SLICE(self):
            return self.getToken(PlPgSqlParser.K_SLICE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_foreach_slice

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterForeach_slice(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitForeach_slice(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitForeach_slice(self)
            else:
                return visitor.visitChildren(self)




    def foreach_slice(self):

        localctx = PlPgSqlParser.Foreach_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_foreach_slice)
        try:
            self.state = 1567
            token = self._input.LA(1)
            if token in [self.K_IN]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_SLICE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.match(self.K_SLICE)
                self.state = 1566
                self.match(self.ICONST)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_exitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_exitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_labelContext,0)


        def exit_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Exit_typeContext,0)


        def opt_exitcond(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_exitcondContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_exit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_exit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_exit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_exit(self)
            else:
                return visitor.visitChildren(self)




    def stmt_exit(self):

        localctx = PlPgSqlParser.Stmt_exitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_stmt_exit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569 
            self.exit_type()
            self.state = 1570 
            self.opt_label()
            self.state = 1571 
            self.opt_exitcond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Exit_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_EXIT(self):
            return self.getToken(PlPgSqlParser.K_EXIT, 0)

        def K_CONTINUE(self):
            return self.getToken(PlPgSqlParser.K_CONTINUE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_exit_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExit_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExit_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExit_type(self)
            else:
                return visitor.visitChildren(self)




    def exit_type(self):

        localctx = PlPgSqlParser.Exit_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_exit_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.K_EXIT or _la==PlPgSqlParser.K_CONTINUE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_returnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_returnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RETURN(self):
            return self.getToken(PlPgSqlParser.K_RETURN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_return

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_return(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_return(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_return(self)
            else:
                return visitor.visitChildren(self)




    def stmt_return(self):

        localctx = PlPgSqlParser.Stmt_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_stmt_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.match(self.K_RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_raiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_raiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(PlPgSqlParser.K_RAISE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_raise

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_raise(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_raise(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_raise(self)
            else:
                return visitor.visitChildren(self)




    def stmt_raise(self):

        localctx = PlPgSqlParser.Stmt_raiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_stmt_raise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(self.K_RAISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Loop_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def opt_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_labelContext,0)


        def K_END(self):
            return self.getToken(PlPgSqlParser.K_END, 0)

        def K_LOOP(self):
            return self.getToken(PlPgSqlParser.K_LOOP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_loop_body

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLoop_body(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLoop_body(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLoop_body(self)
            else:
                return visitor.visitChildren(self)




    def loop_body(self):

        localctx = PlPgSqlParser.Loop_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_loop_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579 
            self.proc_sect()
            self.state = 1580
            self.match(self.K_END)
            self.state = 1581
            self.match(self.K_LOOP)
            self.state = 1582 
            self.opt_label()
            self.state = 1583
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_execsqlContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_execsqlContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def K_INSERT(self):
            return self.getToken(PlPgSqlParser.K_INSERT, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_execsql

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_execsql(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_execsql(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_execsql(self)
            else:
                return visitor.visitChildren(self)




    def stmt_execsql(self):

        localctx = PlPgSqlParser.Stmt_execsqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_stmt_execsql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            _la = self._input.LA(1)
            if not(((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (self.T_WORD - 449)) | (1 << (self.T_CWORD - 449)) | (1 << (self.K_INSERT - 449)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_dynexecuteContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_dynexecuteContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_EXECUTE(self):
            return self.getToken(PlPgSqlParser.K_EXECUTE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_dynexecute

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_dynexecute(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_dynexecute(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_dynexecute(self)
            else:
                return visitor.visitChildren(self)




    def stmt_dynexecute(self):

        localctx = PlPgSqlParser.Stmt_dynexecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_stmt_dynexecute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(self.K_EXECUTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_openContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_openContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_OPEN(self):
            return self.getToken(PlPgSqlParser.K_OPEN, 0)

        def cursor_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_variableContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_open

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_open(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_open(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_open(self)
            else:
                return visitor.visitChildren(self)




    def stmt_open(self):

        localctx = PlPgSqlParser.Stmt_openContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_stmt_open)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(self.K_OPEN)
            self.state = 1590 
            self.cursor_variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_fetchContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_fetchContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_FETCH(self):
            return self.getToken(PlPgSqlParser.K_FETCH, 0)

        def opt_fetch_direction(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_fetch_directionContext,0)


        def K_INTO(self):
            return self.getToken(PlPgSqlParser.K_INTO, 0)

        def cursor_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_variableContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_fetch

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_fetch(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_fetch(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_fetch(self)
            else:
                return visitor.visitChildren(self)




    def stmt_fetch(self):

        localctx = PlPgSqlParser.Stmt_fetchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_stmt_fetch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(self.K_FETCH)
            self.state = 1593 
            self.opt_fetch_direction()
            self.state = 1594 
            self.cursor_variable()
            self.state = 1595
            self.match(self.K_INTO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_moveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_moveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_fetch_direction(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_fetch_directionContext,0)


        def K_MOVE(self):
            return self.getToken(PlPgSqlParser.K_MOVE, 0)

        def cursor_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_variableContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_move

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_move(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_move(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_move(self)
            else:
                return visitor.visitChildren(self)




    def stmt_move(self):

        localctx = PlPgSqlParser.Stmt_moveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_stmt_move)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.match(self.K_MOVE)
            self.state = 1598 
            self.opt_fetch_direction()
            self.state = 1599 
            self.cursor_variable()
            self.state = 1600
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_fetch_directionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_fetch_directionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_fetch_direction

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_fetch_direction(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_fetch_direction(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_fetch_direction(self)
            else:
                return visitor.visitChildren(self)




    def opt_fetch_direction(self):

        localctx = PlPgSqlParser.Opt_fetch_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_opt_fetch_direction)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_closeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_closeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CLOSE(self):
            return self.getToken(PlPgSqlParser.K_CLOSE, 0)

        def cursor_variable(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_variableContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_close

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_close(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_close(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_close(self)
            else:
                return visitor.visitChildren(self)




    def stmt_close(self):

        localctx = PlPgSqlParser.Stmt_closeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_stmt_close)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(self.K_CLOSE)
            self.state = 1605 
            self.cursor_variable()
            self.state = 1606
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_nullContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Stmt_nullContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(PlPgSqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt_null

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt_null(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt_null(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt_null(self)
            else:
                return visitor.visitChildren(self)




    def stmt_null(self):

        localctx = PlPgSqlParser.Stmt_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_stmt_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(self.K_NULL)
            self.state = 1609
            self.match(self.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_variableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cursor_variableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_CWORD(self):
            return self.getToken(PlPgSqlParser.T_CWORD, 0)

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def T_DATUM(self):
            return self.getToken(PlPgSqlParser.T_DATUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cursor_variable

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCursor_variable(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCursor_variable(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCursor_variable(self)
            else:
                return visitor.visitChildren(self)




    def cursor_variable(self):

        localctx = PlPgSqlParser.Cursor_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cursor_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            _la = self._input.LA(1)
            if not(((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (self.T_WORD - 449)) | (1 << (self.T_CWORD - 449)) | (1 << (self.T_DATUM - 449)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_sectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Exception_sectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_exceptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_exceptionsContext,0)


        def K_EXCEPTION(self):
            return self.getToken(PlPgSqlParser.K_EXCEPTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_exception_sect

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterException_sect(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitException_sect(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitException_sect(self)
            else:
                return visitor.visitChildren(self)




    def exception_sect(self):

        localctx = PlPgSqlParser.Exception_sectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_exception_sect)
        try:
            self.state = 1616
            token = self._input.LA(1)
            if token in [self.K_END]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.K_EXCEPTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1614
                self.match(self.K_EXCEPTION)
                self.state = 1615 
                self.proc_exceptions(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_exceptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_exceptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def proc_exceptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_exceptionsContext,0)


        def proc_exception(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_exceptionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_exceptions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_exceptions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_exceptions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_exceptions(self)
            else:
                return visitor.visitChildren(self)



    def proc_exceptions(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Proc_exceptionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_proc_exceptions, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619 
            self.proc_exception()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Proc_exceptionsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_proc_exceptions)
                    self.state = 1621
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1622 
                    self.proc_exception() 
                self.state = 1627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Proc_exceptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_exceptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WHEN(self):
            return self.getToken(PlPgSqlParser.K_WHEN, 0)

        def proc_sect(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_sectContext,0)


        def K_THEN(self):
            return self.getToken(PlPgSqlParser.K_THEN, 0)

        def proc_conditions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_conditionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_exception

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_exception(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_exception(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_exception(self)
            else:
                return visitor.visitChildren(self)




    def proc_exception(self):

        localctx = PlPgSqlParser.Proc_exceptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_proc_exception)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(self.K_WHEN)
            self.state = 1629 
            self.proc_conditions(0)
            self.state = 1630
            self.match(self.K_THEN)
            self.state = 1631 
            self.proc_sect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_conditionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_conditionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_OR(self):
            return self.getToken(PlPgSqlParser.K_OR, 0)

        def proc_conditions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_conditionsContext,0)


        def proc_condition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Proc_conditionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_conditions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_conditions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_conditions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_conditions(self)
            else:
                return visitor.visitChildren(self)



    def proc_conditions(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Proc_conditionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_proc_conditions, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634 
            self.proc_condition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Proc_conditionsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_proc_conditions)
                    self.state = 1636
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1637
                    self.match(self.K_OR)
                    self.state = 1638 
                    self.proc_condition() 
                self.state = 1643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Proc_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Proc_conditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_identifier(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_identifierContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_proc_condition

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterProc_condition(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitProc_condition(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitProc_condition(self)
            else:
                return visitor.visitChildren(self)




    def proc_condition(self):

        localctx = PlPgSqlParser.Proc_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_proc_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644 
            self.any_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_until_semiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Expr_until_semiContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_expr_until_semi

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExpr_until_semi(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExpr_until_semi(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExpr_until_semi(self)
            else:
                return visitor.visitChildren(self)




    def expr_until_semi(self):

        localctx = PlPgSqlParser.Expr_until_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expr_until_semi)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_until_rightbracketContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Expr_until_rightbracketContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_expr_until_rightbracket

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExpr_until_rightbracket(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExpr_until_rightbracket(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExpr_until_rightbracket(self)
            else:
                return visitor.visitChildren(self)




    def expr_until_rightbracket(self):

        localctx = PlPgSqlParser.Expr_until_rightbracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expr_until_rightbracket)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_until_thenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Expr_until_thenContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_expr_until_then

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExpr_until_then(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExpr_until_then(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExpr_until_then(self)
            else:
                return visitor.visitChildren(self)




    def expr_until_then(self):

        localctx = PlPgSqlParser.Expr_until_thenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expr_until_then)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_until_loopContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Expr_until_loopContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_expr_until_loop

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExpr_until_loop(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExpr_until_loop(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExpr_until_loop(self)
            else:
                return visitor.visitChildren(self)




    def expr_until_loop(self):

        localctx = PlPgSqlParser.Expr_until_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_expr_until_loop)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_block_labelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_block_labelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LESS_LESS(self):
            return self.getToken(PlPgSqlParser.LESS_LESS, 0)

        def any_identifier(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_identifierContext,0)


        def GREATER_GREATER(self):
            return self.getToken(PlPgSqlParser.GREATER_GREATER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_block_label

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_block_label(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_block_label(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_block_label(self)
            else:
                return visitor.visitChildren(self)




    def opt_block_label(self):

        localctx = PlPgSqlParser.Opt_block_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_opt_block_label)
        try:
            self.state = 1659
            token = self._input.LA(1)
            if token in [self.K_BEGIN, self.K_DECLARE, self.K_FOR, self.K_LOOP, self.K_WHILE, self.K_FOREACH]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.LESS_LESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.match(self.LESS_LESS)
                self.state = 1656 
                self.any_identifier()
                self.state = 1657
                self.match(self.GREATER_GREATER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_labelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_labelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_identifier(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_identifierContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_label

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_label(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_label(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_label(self)
            else:
                return visitor.visitChildren(self)




    def opt_label(self):

        localctx = PlPgSqlParser.Opt_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_opt_label)
        try:
            self.state = 1663
            token = self._input.LA(1)
            if token in [self.EOF, self.T__3, self.K_WHEN]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.T_WORD, self.T_DATUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662 
                self.any_identifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_exitcondContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_exitcondContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WHEN(self):
            return self.getToken(PlPgSqlParser.K_WHEN, 0)

        def expr_until_semi(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_until_semiContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_exitcond

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_exitcond(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_exitcond(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_exitcond(self)
            else:
                return visitor.visitChildren(self)




    def opt_exitcond(self):

        localctx = PlPgSqlParser.Opt_exitcondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_opt_exitcond)
        try:
            self.state = 1668
            token = self._input.LA(1)
            if token in [self.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1665
                self.match(self.T__3)

            elif token in [self.K_WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1666
                self.match(self.K_WHEN)
                self.state = 1667 
                self.expr_until_semi()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Any_identifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def T_WORD(self):
            return self.getToken(PlPgSqlParser.T_WORD, 0)

        def T_DATUM(self):
            return self.getToken(PlPgSqlParser.T_DATUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_any_identifier

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAny_identifier(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAny_identifier(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAny_identifier(self)
            else:
                return visitor.visitChildren(self)




    def any_identifier(self):

        localctx = PlPgSqlParser.Any_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_any_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.T_WORD or _la==PlPgSqlParser.T_DATUM):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unreserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Unreserved_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_BACKWARD(self):
            return self.getToken(PlPgSqlParser.K_BACKWARD, 0)

        def K_ABSOLUTE(self):
            return self.getToken(PlPgSqlParser.K_ABSOLUTE, 0)

        def K_TYPE(self):
            return self.getToken(PlPgSqlParser.K_TYPE, 0)

        def K_SLICE(self):
            return self.getToken(PlPgSqlParser.K_SLICE, 0)

        def K_MESSAGE(self):
            return self.getToken(PlPgSqlParser.K_MESSAGE, 0)

        def K_NEXT(self):
            return self.getToken(PlPgSqlParser.K_NEXT, 0)

        def K_VARIABLE_CONFLICT(self):
            return self.getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0)

        def K_DUMP(self):
            return self.getToken(PlPgSqlParser.K_DUMP, 0)

        def K_CURRENT(self):
            return self.getToken(PlPgSqlParser.K_CURRENT, 0)

        def K_DETAIL(self):
            return self.getToken(PlPgSqlParser.K_DETAIL, 0)

        def K_NOTICE(self):
            return self.getToken(PlPgSqlParser.K_NOTICE, 0)

        def K_INFO(self):
            return self.getToken(PlPgSqlParser.K_INFO, 0)

        def K_SQLSTATE(self):
            return self.getToken(PlPgSqlParser.K_SQLSTATE, 0)

        def K_MESSAGE_TEXT(self):
            return self.getToken(PlPgSqlParser.K_MESSAGE_TEXT, 0)

        def K_ERRCODE(self):
            return self.getToken(PlPgSqlParser.K_ERRCODE, 0)

        def K_LOG(self):
            return self.getToken(PlPgSqlParser.K_LOG, 0)

        def K_FORWARD(self):
            return self.getToken(PlPgSqlParser.K_FORWARD, 0)

        def K_PRIOR(self):
            return self.getToken(PlPgSqlParser.K_PRIOR, 0)

        def K_ARRAY(self):
            return self.getToken(PlPgSqlParser.K_ARRAY, 0)

        def K_RESULT_OID(self):
            return self.getToken(PlPgSqlParser.K_RESULT_OID, 0)

        def K_PG_EXCEPTION_HINT(self):
            return self.getToken(PlPgSqlParser.K_PG_EXCEPTION_HINT, 0)

        def K_OPTION(self):
            return self.getToken(PlPgSqlParser.K_OPTION, 0)

        def K_NO(self):
            return self.getToken(PlPgSqlParser.K_NO, 0)

        def K_REVERSE(self):
            return self.getToken(PlPgSqlParser.K_REVERSE, 0)

        def K_RETURNED_SQLSTATE(self):
            return self.getToken(PlPgSqlParser.K_RETURNED_SQLSTATE, 0)

        def K_STACKED(self):
            return self.getToken(PlPgSqlParser.K_STACKED, 0)

        def K_USE_VARIABLE(self):
            return self.getToken(PlPgSqlParser.K_USE_VARIABLE, 0)

        def K_LAST(self):
            return self.getToken(PlPgSqlParser.K_LAST, 0)

        def K_SCROLL(self):
            return self.getToken(PlPgSqlParser.K_SCROLL, 0)

        def K_CONSTANT(self):
            return self.getToken(PlPgSqlParser.K_CONSTANT, 0)

        def K_ALIAS(self):
            return self.getToken(PlPgSqlParser.K_ALIAS, 0)

        def K_QUERY(self):
            return self.getToken(PlPgSqlParser.K_QUERY, 0)

        def K_ROWTYPE(self):
            return self.getToken(PlPgSqlParser.K_ROWTYPE, 0)

        def K_DEBUG(self):
            return self.getToken(PlPgSqlParser.K_DEBUG, 0)

        def K_WARNING(self):
            return self.getToken(PlPgSqlParser.K_WARNING, 0)

        def K_PG_EXCEPTION_DETAIL(self):
            return self.getToken(PlPgSqlParser.K_PG_EXCEPTION_DETAIL, 0)

        def K_FIRST(self):
            return self.getToken(PlPgSqlParser.K_FIRST, 0)

        def K_ERROR(self):
            return self.getToken(PlPgSqlParser.K_ERROR, 0)

        def K_CURSOR(self):
            return self.getToken(PlPgSqlParser.K_CURSOR, 0)

        def K_IS(self):
            return self.getToken(PlPgSqlParser.K_IS, 0)

        def K_HINT(self):
            return self.getToken(PlPgSqlParser.K_HINT, 0)

        def K_PG_EXCEPTION_CONTEXT(self):
            return self.getToken(PlPgSqlParser.K_PG_EXCEPTION_CONTEXT, 0)

        def K_ROW_COUNT(self):
            return self.getToken(PlPgSqlParser.K_ROW_COUNT, 0)

        def K_RELATIVE(self):
            return self.getToken(PlPgSqlParser.K_RELATIVE, 0)

        def K_USE_COLUMN(self):
            return self.getToken(PlPgSqlParser.K_USE_COLUMN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_unreserved_keyword

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterUnreserved_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitUnreserved_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitUnreserved_keyword(self)
            else:
                return visitor.visitChildren(self)




    def unreserved_keyword(self):

        localctx = PlPgSqlParser.Unreserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_unreserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            _la = self._input.LA(1)
            if not(((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (self.K_OPTION - 434)) | (1 << (self.K_DUMP - 434)) | (1 << (self.K_VARIABLE_CONFLICT - 434)) | (1 << (self.K_ERROR - 434)) | (1 << (self.K_USE_VARIABLE - 434)) | (1 << (self.K_USE_COLUMN - 434)) | (1 << (self.K_ALIAS - 434)) | (1 << (self.K_CURSOR - 434)) | (1 << (self.K_NO - 434)) | (1 << (self.K_SCROLL - 434)) | (1 << (self.K_IS - 434)) | (1 << (self.K_CONSTANT - 434)) | (1 << (self.K_CURRENT - 434)) | (1 << (self.K_STACKED - 434)) | (1 << (self.K_ARRAY - 434)) | (1 << (self.K_SLICE - 434)) | (1 << (self.K_ABSOLUTE - 434)) | (1 << (self.K_BACKWARD - 434)) | (1 << (self.K_DEBUG - 434)) | (1 << (self.K_DETAIL - 434)) | (1 << (self.K_ERRCODE - 434)) | (1 << (self.K_FIRST - 434)) | (1 << (self.K_FORWARD - 434)) | (1 << (self.K_HINT - 434)) | (1 << (self.K_INFO - 434)) | (1 << (self.K_LAST - 434)) | (1 << (self.K_LOG - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (self.K_MESSAGE - 498)) | (1 << (self.K_MESSAGE_TEXT - 498)) | (1 << (self.K_NEXT - 498)) | (1 << (self.K_NOTICE - 498)) | (1 << (self.K_PG_EXCEPTION_CONTEXT - 498)) | (1 << (self.K_PG_EXCEPTION_DETAIL - 498)) | (1 << (self.K_PG_EXCEPTION_HINT - 498)) | (1 << (self.K_PRIOR - 498)) | (1 << (self.K_QUERY - 498)) | (1 << (self.K_RELATIVE - 498)) | (1 << (self.K_RESULT_OID - 498)) | (1 << (self.K_RETURNED_SQLSTATE - 498)) | (1 << (self.K_REVERSE - 498)) | (1 << (self.K_ROW_COUNT - 498)) | (1 << (self.K_ROWTYPE - 498)) | (1 << (self.K_SQLSTATE - 498)) | (1 << (self.K_TYPE - 498)) | (1 << (self.K_WARNING - 498)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtblockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.StmtblockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(PlPgSqlParser.StmtmultiContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmtblock

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmtblock(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmtblock(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmtblock(self)
            else:
                return visitor.visitChildren(self)




    def stmtblock(self):

        localctx = PlPgSqlParser.StmtblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_stmtblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674 
            self.stmtmulti(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtmultiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.StmtmultiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(PlPgSqlParser.StmtmultiContext,0)


        def stmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.StmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmtmulti

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmtmulti(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmtmulti(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmtmulti(self)
            else:
                return visitor.visitChildren(self)



    def stmtmulti(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.StmtmultiContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 162
        self.enterRecursionRule(localctx, 162, self.RULE_stmtmulti, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677 
            self.stmt()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.StmtmultiContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_stmtmulti)
                    self.state = 1679
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1680
                    self.match(self.T__3)
                    self.state = 1681 
                    self.stmt() 
                self.state = 1686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.StmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def prepareStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.PrepareStmtContext,0)


        def removeOperStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RemoveOperStmtContext,0)


        def truncateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.TruncateStmtContext,0)


        def alterTableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterTableStmtContext,0)


        def createRoleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateRoleStmtContext,0)


        def alterOpFamilyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterOpFamilyStmtContext,0)


        def executeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExecuteStmtContext,0)


        def createOpFamilyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateOpFamilyStmtContext,0)


        def dropFdwStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropFdwStmtContext,0)


        def dropRoleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropRoleStmtContext,0)


        def variableShowStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VariableShowStmtContext,0)


        def dropTableSpaceStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropTableSpaceStmtContext,0)


        def dropUserMappingStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropUserMappingStmtContext,0)


        def reassignOwnedStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReassignOwnedStmtContext,0)


        def alterUserStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterUserStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.LockStmtContext,0)


        def listenStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ListenStmtContext,0)


        def createAssertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateAssertStmtContext,0)


        def checkPointStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CheckPointStmtContext,0)


        def ruleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleStmtContext,0)


        def alterSeqStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterSeqStmtContext,0)


        def dropPLangStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropPLangStmtContext,0)


        def removeAggrStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RemoveAggrStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DiscardStmtContext,0)


        def createConversionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateConversionStmtContext,0)


        def alterDefaultPrivilegesStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterDefaultPrivilegesStmtContext,0)


        def createGroupStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateGroupStmtContext,0)


        def alterForeignServerStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterForeignServerStmtContext,0)


        def revokeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RevokeStmtContext,0)


        def fetchStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.FetchStmtContext,0)


        def createUserStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateUserStmtContext,0)


        def deallocateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeallocateStmtContext,0)


        def alterDatabaseStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterDatabaseStmtContext,0)


        def dropOwnedStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropOwnedStmtContext,0)


        def dropOpFamilyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropOpFamilyStmtContext,0)


        def analyzeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AnalyzeStmtContext,0)


        def closePortalStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ClosePortalStmtContext,0)


        def alterTSConfigurationStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterTSConfigurationStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeleteStmtContext,0)


        def createFdwStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateFdwStmtContext,0)


        def variableSetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VariableSetStmtContext,0)


        def createForeignServerStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateForeignServerStmtContext,0)


        def dropUserStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropUserStmtContext,0)


        def constraintsSetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintsSetStmtContext,0)


        def doStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DoStmtContext,0)


        def renameStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RenameStmtContext,0)


        def createAsStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateAsStmtContext,0)


        def alterEnumStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterEnumStmtContext,0)


        def viewStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ViewStmtContext,0)


        def createSeqStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateSeqStmtContext,0)


        def alterFdwStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterFdwStmtContext,0)


        def createdbStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreatedbStmtContext,0)


        def indexStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndexStmtContext,0)


        def createExtensionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateExtensionStmtContext,0)


        def createDomainStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateDomainStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.InsertStmtContext,0)


        def alterExtensionContentsStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterExtensionContentsStmtContext,0)


        def alterDatabaseSetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterDatabaseSetStmtContext,0)


        def alterCompositeTypeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterCompositeTypeStmtContext,0)


        def notifyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.NotifyStmtContext,0)


        def dropdbStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropdbStmtContext,0)


        def dropCastStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropCastStmtContext,0)


        def alterDomainStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterDomainStmtContext,0)


        def clusterStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ClusterStmtContext,0)


        def grantRoleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.GrantRoleStmtContext,0)


        def explainStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExplainStmtContext,0)


        def dropStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropStmtContext,0)


        def dropOpClassStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropOpClassStmtContext,0)


        def revokeRoleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RevokeRoleStmtContext,0)


        def alterObjectSchemaStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterObjectSchemaStmtContext,0)


        def variableResetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VariableResetStmtContext,0)


        def unlistenStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.UnlistenStmtContext,0)


        def alterGroupStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterGroupStmtContext,0)


        def declareCursorStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeclareCursorStmtContext,0)


        def createFunctionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateFunctionStmtContext,0)


        def createCastStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateCastStmtContext,0)


        def alterRoleSetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterRoleSetStmtContext,0)


        def createTableSpaceStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateTableSpaceStmtContext,0)


        def alterRoleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterRoleStmtContext,0)


        def removeFuncStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RemoveFuncStmtContext,0)


        def alterUserSetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterUserSetStmtContext,0)


        def alterFunctionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterFunctionStmtContext,0)


        def reindexStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReindexStmtContext,0)


        def vacuumStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VacuumStmtContext,0)


        def createSchemaStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateSchemaStmtContext,0)


        def dropAssertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropAssertStmtContext,0)


        def copyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CopyStmtContext,0)


        def createOpClassStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateOpClassStmtContext,0)


        def dropForeignServerStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropForeignServerStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.UpdateStmtContext,0)


        def createPLangStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreatePLangStmtContext,0)


        def secLabelStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SecLabelStmtContext,0)


        def alterOwnerStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterOwnerStmtContext,0)


        def dropGroupStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropGroupStmtContext,0)


        def dropruleStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropruleStmtContext,0)


        def alterTSDictionaryStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterTSDictionaryStmtContext,0)


        def dropTrigStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DropTrigStmtContext,0)


        def grantStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.GrantStmtContext,0)


        def createForeignTableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateForeignTableStmtContext,0)


        def transactionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.TransactionStmtContext,0)


        def alterUserMappingStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterUserMappingStmtContext,0)


        def defineStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefineStmtContext,0)


        def alterExtensionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterExtensionStmtContext,0)


        def createTrigStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateTrigStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CommentStmtContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.LoadStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateStmtContext,0)


        def createUserMappingStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateUserMappingStmtContext,0)


        def alterForeignTableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterForeignTableStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_stmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = PlPgSqlParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_stmt)
        try:
            self.state = 1798
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1687 
                self.alterDatabaseStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1688 
                self.alterDatabaseSetStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1689 
                self.alterDefaultPrivilegesStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1690 
                self.alterDomainStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1691 
                self.alterEnumStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1692 
                self.alterExtensionStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1693 
                self.alterExtensionContentsStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1694 
                self.alterFdwStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1695 
                self.alterForeignServerStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1696 
                self.alterForeignTableStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1697 
                self.alterFunctionStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1698 
                self.alterGroupStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1699 
                self.alterObjectSchemaStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1700 
                self.alterOwnerStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1701 
                self.alterSeqStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1702 
                self.alterTableStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1703 
                self.alterCompositeTypeStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1704 
                self.alterRoleSetStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1705 
                self.alterRoleStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1706 
                self.alterTSConfigurationStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1707 
                self.alterTSDictionaryStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1708 
                self.alterUserMappingStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1709 
                self.alterUserSetStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1710 
                self.alterUserStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1711 
                self.analyzeStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1712 
                self.checkPointStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1713 
                self.closePortalStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1714 
                self.clusterStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1715 
                self.commentStmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1716 
                self.constraintsSetStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1717 
                self.copyStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1718 
                self.createAsStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1719 
                self.createAssertStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1720 
                self.createCastStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1721 
                self.createConversionStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1722 
                self.createDomainStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1723 
                self.createExtensionStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1724 
                self.createFdwStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1725 
                self.createForeignServerStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1726 
                self.createForeignTableStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1727 
                self.createFunctionStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1728 
                self.createGroupStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1729 
                self.createOpClassStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1730 
                self.createOpFamilyStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1731 
                self.alterOpFamilyStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1732 
                self.createPLangStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1733 
                self.createSchemaStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1734 
                self.createSeqStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1735 
                self.createStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1736 
                self.createTableSpaceStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1737 
                self.createTrigStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1738 
                self.createRoleStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1739 
                self.createUserStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1740 
                self.createUserMappingStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1741 
                self.createdbStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1742 
                self.deallocateStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1743 
                self.declareCursorStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1744 
                self.defineStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1745 
                self.deleteStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1746 
                self.discardStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1747 
                self.doStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1748 
                self.dropAssertStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1749 
                self.dropCastStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1750 
                self.dropFdwStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1751 
                self.dropForeignServerStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1752 
                self.dropGroupStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1753 
                self.dropOpClassStmt()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1754 
                self.dropOpFamilyStmt()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1755 
                self.dropOwnedStmt()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1756 
                self.dropPLangStmt()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1757 
                self.dropruleStmt()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1758 
                self.dropStmt()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1759 
                self.dropTableSpaceStmt()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1760 
                self.dropTrigStmt()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1761 
                self.dropRoleStmt()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1762 
                self.dropUserStmt()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1763 
                self.dropUserMappingStmt()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1764 
                self.dropdbStmt()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1765 
                self.executeStmt()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1766 
                self.explainStmt()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1767 
                self.fetchStmt()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1768 
                self.grantStmt()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1769 
                self.grantRoleStmt()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1770 
                self.indexStmt()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1771 
                self.insertStmt()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1772 
                self.listenStmt()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1773 
                self.loadStmt()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1774 
                self.lockStmt()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1775 
                self.notifyStmt()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1776 
                self.prepareStmt()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1777 
                self.reassignOwnedStmt()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1778 
                self.reindexStmt()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1779 
                self.removeAggrStmt()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1780 
                self.removeFuncStmt()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1781 
                self.removeOperStmt()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1782 
                self.renameStmt()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1783 
                self.revokeStmt()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1784 
                self.revokeRoleStmt()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1785 
                self.ruleStmt()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1786 
                self.secLabelStmt()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1787 
                self.selectStmt()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1788 
                self.transactionStmt()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1789 
                self.truncateStmt()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1790 
                self.unlistenStmt()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1791 
                self.updateStmt()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1792 
                self.vacuumStmt()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1793 
                self.variableResetStmt()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1794 
                self.variableSetStmt()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1795 
                self.variableShowStmt()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1796 
                self.viewStmt()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptRoleListContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def createRoleStmt(self):

        localctx = PlPgSqlParser.CreateRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_createRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.match(self.CREATE)
            self.state = 1801
            self.match(self.ROLE)
            self.state = 1802 
            self.roleId()
            self.state = 1804
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1803
                self.match(self.WITH)


            self.state = 1806 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptRoleListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptRoleListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptRoleListContext,0)


        def createOptRoleElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateOptRoleElemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optRoleList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptRoleList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptRoleList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptRoleList(self)
            else:
                return visitor.visitChildren(self)



    def optRoleList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.OptRoleListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_optRoleList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.OptRoleListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_optRoleList)
                    self.state = 1809
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1810 
                    self.createOptRoleElem() 
                self.state = 1815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlteroptRoleListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlteroptRoleListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alterOptRoleElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterOptRoleElemContext,0)


        def alteroptRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlteroptRoleListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alteroptRoleList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlteroptRoleList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlteroptRoleList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlteroptRoleList(self)
            else:
                return visitor.visitChildren(self)



    def alteroptRoleList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.AlteroptRoleListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_alteroptRoleList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.AlteroptRoleListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alteroptRoleList)
                    self.state = 1817
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1818 
                    self.alterOptRoleElem() 
                self.state = 1823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterOptRoleElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterOptRoleElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PlPgSqlParser.LIMIT, 0)

        def UNENCRYPTED(self):
            return self.getToken(PlPgSqlParser.UNENCRYPTED, 0)

        def ENCRYPTED(self):
            return self.getToken(PlPgSqlParser.ENCRYPTED, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(PlPgSqlParser.PASSWORD, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def VALID(self):
            return self.getToken(PlPgSqlParser.VALID, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def UNTIL(self):
            return self.getToken(PlPgSqlParser.UNTIL, 0)

        def INHERIT(self):
            return self.getToken(PlPgSqlParser.INHERIT, 0)

        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def CONNECTION(self):
            return self.getToken(PlPgSqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterOptRoleElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterOptRoleElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterOptRoleElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterOptRoleElem(self)
            else:
                return visitor.visitChildren(self)




    def alterOptRoleElem(self):

        localctx = PlPgSqlParser.AlterOptRoleElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_alterOptRoleElem)
        try:
            self.state = 1844
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1824
                self.match(self.PASSWORD)
                self.state = 1825 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1826
                self.match(self.PASSWORD)
                self.state = 1827
                self.match(self.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1828
                self.match(self.ENCRYPTED)
                self.state = 1829
                self.match(self.PASSWORD)
                self.state = 1830 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1831
                self.match(self.UNENCRYPTED)
                self.state = 1832
                self.match(self.PASSWORD)
                self.state = 1833 
                self.sConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1834
                self.match(self.INHERIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1835
                self.match(self.CONNECTION)
                self.state = 1836
                self.match(self.LIMIT)
                self.state = 1837 
                self.signedIconst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1838
                self.match(self.VALID)
                self.state = 1839
                self.match(self.UNTIL)
                self.state = 1840 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1841
                self.match(self.USER)
                self.state = 1842 
                self.name_list(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1843
                self.match(self.IDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOptRoleElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateOptRoleElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def ADMIN(self):
            return self.getToken(PlPgSqlParser.ADMIN, 0)

        def SYSID(self):
            return self.getToken(PlPgSqlParser.SYSID, 0)

        def alterOptRoleElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlterOptRoleElemContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createOptRoleElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateOptRoleElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateOptRoleElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateOptRoleElem(self)
            else:
                return visitor.visitChildren(self)




    def createOptRoleElem(self):

        localctx = PlPgSqlParser.CreateOptRoleElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_createOptRoleElem)
        try:
            self.state = 1859
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846 
                self.alterOptRoleElem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1847
                self.match(self.SYSID)
                self.state = 1848 
                self.iConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1849
                self.match(self.ADMIN)
                self.state = 1850 
                self.name_list(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1851
                self.match(self.ROLE)
                self.state = 1852 
                self.name_list(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1853
                self.match(self.IN_P)
                self.state = 1854
                self.match(self.ROLE)
                self.state = 1855 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1856
                self.match(self.IN_P)
                self.state = 1857
                self.match(self.GROUP_P)
                self.state = 1858 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptRoleListContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createUserStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def createUserStmt(self):

        localctx = PlPgSqlParser.CreateUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_createUserStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(self.CREATE)
            self.state = 1862
            self.match(self.USER)
            self.state = 1863 
            self.roleId()
            self.state = 1865
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 1864
                self.match(self.WITH)


            self.state = 1867 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def alteroptRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlteroptRoleListContext,0)


        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterRoleStmt(self):

        localctx = PlPgSqlParser.AlterRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_alterRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(self.ALTER)
            self.state = 1870
            self.match(self.ROLE)
            self.state = 1871 
            self.roleId()
            self.state = 1873
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 1872
                self.match(self.WITH)


            self.state = 1875 
            self.alteroptRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_in_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_in_databaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_in_database

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_in_database(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_in_database(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_in_database(self)
            else:
                return visitor.visitChildren(self)




    def opt_in_database(self):

        localctx = PlPgSqlParser.Opt_in_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_opt_in_database)
        try:
            self.state = 1881
            token = self._input.LA(1)
            if token in [self.RESET, self.SET]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.IN_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.match(self.IN_P)
                self.state = 1879
                self.match(self.DATABASE)
                self.state = 1880 
                self.database_name()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterRoleSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterRoleSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def opt_in_database(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_in_databaseContext,0)


        def setResetClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.SetResetClauseContext,0)


        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterRoleSetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterRoleSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterRoleSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterRoleSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterRoleSetStmt(self):

        localctx = PlPgSqlParser.AlterRoleSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_alterRoleSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.match(self.ALTER)
            self.state = 1884
            self.match(self.ROLE)
            self.state = 1885 
            self.roleId()
            self.state = 1886 
            self.opt_in_database()
            self.state = 1887 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def alteroptRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.AlteroptRoleListContext,0)


        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterUserStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserStmt(self):

        localctx = PlPgSqlParser.AlterUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_alterUserStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.match(self.ALTER)
            self.state = 1890
            self.match(self.USER)
            self.state = 1891 
            self.roleId()
            self.state = 1893
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 1892
                self.match(self.WITH)


            self.state = 1895 
            self.alteroptRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterUserSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def setResetClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.SetResetClauseContext,0)


        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterUserSetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterUserSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterUserSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterUserSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserSetStmt(self):

        localctx = PlPgSqlParser.AlterUserSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_alterUserSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(self.ALTER)
            self.state = 1898
            self.match(self.USER)
            self.state = 1899 
            self.roleId()
            self.state = 1900 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropRoleStmt(self):

        localctx = PlPgSqlParser.DropRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dropRoleStmt)
        try:
            self.state = 1910
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1902
                self.match(self.DROP)
                self.state = 1903
                self.match(self.ROLE)
                self.state = 1904 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.match(self.DROP)
                self.state = 1906
                self.match(self.ROLE)
                self.state = 1907
                self.match(self.IF_P)
                self.state = 1908
                self.match(self.EXISTS)
                self.state = 1909 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropUserStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropUserStmt(self):

        localctx = PlPgSqlParser.DropUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dropUserStmt)
        try:
            self.state = 1920
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1912
                self.match(self.DROP)
                self.state = 1913
                self.match(self.USER)
                self.state = 1914 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1915
                self.match(self.DROP)
                self.state = 1916
                self.match(self.USER)
                self.state = 1917
                self.match(self.IF_P)
                self.state = 1918
                self.match(self.EXISTS)
                self.state = 1919 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptRoleListContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def createGroupStmt(self):

        localctx = PlPgSqlParser.CreateGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_createGroupStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.match(self.CREATE)
            self.state = 1923
            self.match(self.GROUP_P)
            self.state = 1924 
            self.roleId()
            self.state = 1926
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 1925
                self.match(self.WITH)


            self.state = 1928 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def add_drop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Add_dropContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterGroupStmt(self):

        localctx = PlPgSqlParser.AlterGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_alterGroupStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(self.ALTER)
            self.state = 1931
            self.match(self.GROUP_P)
            self.state = 1932 
            self.roleId()
            self.state = 1933 
            self.add_drop()
            self.state = 1934
            self.match(self.USER)
            self.state = 1935 
            self.name_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_dropContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Add_dropContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_add_drop

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAdd_drop(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAdd_drop(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAdd_drop(self)
            else:
                return visitor.visitChildren(self)




    def add_drop(self):

        localctx = PlPgSqlParser.Add_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_add_drop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ADD_P or _la==PlPgSqlParser.DROP):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropGroupStmt(self):

        localctx = PlPgSqlParser.DropGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dropGroupStmt)
        try:
            self.state = 1947
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.match(self.DROP)
                self.state = 1940
                self.match(self.GROUP_P)
                self.state = 1941 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(self.DROP)
                self.state = 1943
                self.match(self.GROUP_P)
                self.state = 1944
                self.match(self.IF_P)
                self.state = 1945
                self.match(self.EXISTS)
                self.state = 1946 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateSchemaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateSchemaStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optSchemaEltList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptSchemaEltListContext,0)


        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def optSchemaName(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptSchemaNameContext,0)


        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def AUTHORIZATION(self):
            return self.getToken(PlPgSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createSchemaStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateSchemaStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateSchemaStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateSchemaStmt(self)
            else:
                return visitor.visitChildren(self)




    def createSchemaStmt(self):

        localctx = PlPgSqlParser.CreateSchemaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_createSchemaStmt)
        try:
            self.state = 1961
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1949
                self.match(self.CREATE)
                self.state = 1950
                self.match(self.SCHEMA)
                self.state = 1951 
                self.optSchemaName()
                self.state = 1952
                self.match(self.AUTHORIZATION)
                self.state = 1953 
                self.roleId()
                self.state = 1954 
                self.optSchemaEltList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1956
                self.match(self.CREATE)
                self.state = 1957
                self.match(self.SCHEMA)
                self.state = 1958 
                self.colId()
                self.state = 1959 
                self.optSchemaEltList(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptSchemaNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptSchemaNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optSchemaName

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptSchemaName(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptSchemaName(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptSchemaName(self)
            else:
                return visitor.visitChildren(self)




    def optSchemaName(self):

        localctx = PlPgSqlParser.OptSchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_optSchemaName)
        try:
            self.state = 1965
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1963 
                self.colId()

            elif token in [self.AUTHORIZATION]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptSchemaEltListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptSchemaEltListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optSchemaEltList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptSchemaEltListContext,0)


        def schema_stmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.Schema_stmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optSchemaEltList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptSchemaEltList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptSchemaEltList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptSchemaEltList(self)
            else:
                return visitor.visitChildren(self)



    def optSchemaEltList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.OptSchemaEltListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 204
        self.enterRecursionRule(localctx, 204, self.RULE_optSchemaEltList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.OptSchemaEltListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_optSchemaEltList)
                    self.state = 1968
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1969 
                    self.schema_stmt() 
                self.state = 1974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Schema_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Schema_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def grantStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.GrantStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateStmtContext,0)


        def viewStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ViewStmtContext,0)


        def createSeqStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateSeqStmtContext,0)


        def createTrigStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateTrigStmtContext,0)


        def indexStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndexStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_schema_stmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSchema_stmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSchema_stmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSchema_stmt(self)
            else:
                return visitor.visitChildren(self)




    def schema_stmt(self):

        localctx = PlPgSqlParser.Schema_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_schema_stmt)
        try:
            self.state = 1981
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975 
                self.createStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976 
                self.indexStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1977 
                self.createSeqStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1978 
                self.createTrigStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1979 
                self.grantStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1980 
                self.viewStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.VariableSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def SESSION(self):
            return self.getToken(PlPgSqlParser.SESSION, 0)

        def set_rest(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_restContext,0)


        def LOCAL(self):
            return self.getToken(PlPgSqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_variableSetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVariableSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVariableSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVariableSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableSetStmt(self):

        localctx = PlPgSqlParser.VariableSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_variableSetStmt)
        try:
            self.state = 1991
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.match(self.SET)
                self.state = 1984 
                self.set_rest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.match(self.SET)
                self.state = 1986
                self.match(self.LOCAL)
                self.state = 1987 
                self.set_rest()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1988
                self.match(self.SET)
                self.state = 1989
                self.match(self.SESSION)
                self.state = 1990 
                self.set_rest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_restContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_restContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_rest_moreContext,0)


        def SESSION(self):
            return self.getToken(PlPgSqlParser.SESSION, 0)

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Transaction_mode_listContext,0)


        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PlPgSqlParser.CHARACTERISTICS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_rest

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_rest(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_rest(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_rest(self)
            else:
                return visitor.visitChildren(self)




    def set_rest(self):

        localctx = PlPgSqlParser.Set_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_set_rest)
        try:
            self.state = 2001
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1993
                self.match(self.TRANSACTION)
                self.state = 1994 
                self.transaction_mode_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.match(self.SESSION)
                self.state = 1996
                self.match(self.CHARACTERISTICS)
                self.state = 1997
                self.match(self.AS)
                self.state = 1998
                self.match(self.TRANSACTION)
                self.state = 1999 
                self.transaction_mode_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2000 
                self.set_rest_more()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_rest_moreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_rest_moreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def var_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_nameContext,0)


        def SESSION(self):
            return self.getToken(PlPgSqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def zone_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Zone_valueContext,0)


        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def var_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_listContext,0)


        def XML_P(self):
            return self.getToken(PlPgSqlParser.XML_P, 0)

        def AUTHORIZATION(self):
            return self.getToken(PlPgSqlParser.AUTHORIZATION, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def NAMES(self):
            return self.getToken(PlPgSqlParser.NAMES, 0)

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def CATALOG_P(self):
            return self.getToken(PlPgSqlParser.CATALOG_P, 0)

        def opt_encoding(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_encodingContext,0)


        def CURRENT_P(self):
            return self.getToken(PlPgSqlParser.CURRENT_P, 0)

        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def ZONE(self):
            return self.getToken(PlPgSqlParser.ZONE, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PlPgSqlParser.Document_or_contentContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def SNAPSHOT(self):
            return self.getToken(PlPgSqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_rest_more

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_rest_more(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_rest_more(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_rest_more(self)
            else:
                return visitor.visitChildren(self)




    def set_rest_more(self):

        localctx = PlPgSqlParser.Set_rest_moreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_set_rest_more)
        try:
            self.state = 2046
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2003 
                self.var_name(0)
                self.state = 2004
                self.match(self.TO)
                self.state = 2005 
                self.var_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007 
                self.var_name(0)
                self.state = 2008
                self.match(self.T__4)
                self.state = 2009 
                self.var_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2011 
                self.var_name(0)
                self.state = 2012
                self.match(self.TO)
                self.state = 2013
                self.match(self.DEFAULT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2015 
                self.var_name(0)
                self.state = 2016
                self.match(self.T__4)
                self.state = 2017
                self.match(self.DEFAULT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2019 
                self.var_name(0)
                self.state = 2020
                self.match(self.FROM)
                self.state = 2021
                self.match(self.CURRENT_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2023
                self.match(self.TIME)
                self.state = 2024
                self.match(self.ZONE)
                self.state = 2025 
                self.zone_value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2026
                self.match(self.CATALOG_P)
                self.state = 2027 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2028
                self.match(self.SCHEMA)
                self.state = 2029 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2030
                self.match(self.NAMES)
                self.state = 2031 
                self.opt_encoding()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2032
                self.match(self.ROLE)
                self.state = 2033 
                self.colId_or_Sconst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2034
                self.match(self.SESSION)
                self.state = 2035
                self.match(self.AUTHORIZATION)
                self.state = 2036 
                self.colId_or_Sconst()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2037
                self.match(self.SESSION)
                self.state = 2038
                self.match(self.AUTHORIZATION)
                self.state = 2039
                self.match(self.DEFAULT)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2040
                self.match(self.XML_P)
                self.state = 2041
                self.match(self.OPTION)
                self.state = 2042 
                self.document_or_content()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2043
                self.match(self.TRANSACTION)
                self.state = 2044
                self.match(self.SNAPSHOT)
                self.state = 2045 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Var_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_nameContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_var_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVar_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVar_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVar_name(self)
            else:
                return visitor.visitChildren(self)



    def var_name(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Var_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 214
        self.enterRecursionRule(localctx, 214, self.RULE_var_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049 
            self.colId()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2056
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Var_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_var_name)
                    self.state = 2051
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2052
                    self.match(self.T__14)
                    self.state = 2053 
                    self.colId() 
                self.state = 2058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Var_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Var_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_valueContext,0)


        def var_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_var_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVar_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVar_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVar_list(self)
            else:
                return visitor.visitChildren(self)



    def var_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Var_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 216
        self.enterRecursionRule(localctx, 216, self.RULE_var_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060 
            self.var_value()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2067
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Var_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_var_list)
                    self.state = 2062
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2063
                    self.match(self.T__12)
                    self.state = 2064 
                    self.var_value() 
                self.state = 2069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Var_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Var_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_var_value

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVar_value(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVar_value(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVar_value(self)
            else:
                return visitor.visitChildren(self)




    def var_value(self):

        localctx = PlPgSqlParser.Var_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_var_value)
        try:
            self.state = 2072
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.ON, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.SCONST, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2070 
                self.opt_boolean_or_string()

            elif token in [self.T__11, self.T__10, self.ICONST, self.FCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2071 
                self.numericOnly()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iso_levelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Iso_levelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(PlPgSqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(PlPgSqlParser.COMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(PlPgSqlParser.SERIALIZABLE, 0)

        def READ(self):
            return self.getToken(PlPgSqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(PlPgSqlParser.UNCOMMITTED, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_iso_level

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIso_level(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIso_level(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIso_level(self)
            else:
                return visitor.visitChildren(self)




    def iso_level(self):

        localctx = PlPgSqlParser.Iso_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_iso_level)
        try:
            self.state = 2081
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2074
                self.match(self.READ)
                self.state = 2075
                self.match(self.UNCOMMITTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.match(self.READ)
                self.state = 2077
                self.match(self.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2078
                self.match(self.REPEATABLE)
                self.state = 2079
                self.match(self.READ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2080
                self.match(self.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_boolean_or_stringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_boolean_or_stringContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def TRUE_P(self):
            return self.getToken(PlPgSqlParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PlPgSqlParser.FALSE_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_boolean_or_string

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_boolean_or_string(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_boolean_or_string(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_boolean_or_string(self)
            else:
                return visitor.visitChildren(self)




    def opt_boolean_or_string(self):

        localctx = PlPgSqlParser.Opt_boolean_or_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_opt_boolean_or_string)
        try:
            self.state = 2087
            token = self._input.LA(1)
            if token in [self.TRUE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2083
                self.match(self.TRUE_P)

            elif token in [self.FALSE_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.match(self.FALSE_P)

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2085
                self.match(self.ON)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.SCONST, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2086 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Zone_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Zone_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_interval(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_intervalContext,0)


        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstIntervalContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def LOCAL(self):
            return self.getToken(PlPgSqlParser.LOCAL, 0)

        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_zone_value

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterZone_value(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitZone_value(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitZone_value(self)
            else:
                return visitor.visitChildren(self)




    def zone_value(self):

        localctx = PlPgSqlParser.Zone_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_zone_value)
        try:
            self.state = 2105
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2089 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2090
                self.match(self.IDENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2091 
                self.constInterval()
                self.state = 2092 
                self.sConst()
                self.state = 2093 
                self.opt_interval()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2095 
                self.constInterval()
                self.state = 2096
                self.match(self.T__7)
                self.state = 2097 
                self.iConst()
                self.state = 2098
                self.match(self.T__13)
                self.state = 2099 
                self.sConst()
                self.state = 2100 
                self.opt_interval()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2102 
                self.numericOnly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2103
                self.match(self.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2104
                self.match(self.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_encodingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_encodingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_encoding

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_encoding(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_encoding(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_encoding(self)
            else:
                return visitor.visitChildren(self)




    def opt_encoding(self):

        localctx = PlPgSqlParser.Opt_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_opt_encoding)
        try:
            self.state = 2110
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2107 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2108
                self.match(self.DEFAULT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColId_or_SconstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColId_or_SconstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colId_or_Sconst

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColId_or_Sconst(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColId_or_Sconst(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColId_or_Sconst(self)
            else:
                return visitor.visitChildren(self)




    def colId_or_Sconst(self):

        localctx = PlPgSqlParser.ColId_or_SconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_colId_or_Sconst)
        try:
            self.state = 2114
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2112 
                self.colId()

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2113 
                self.sConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableResetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.VariableResetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(PlPgSqlParser.RESET, 0)

        def var_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def SESSION(self):
            return self.getToken(PlPgSqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def LEVEL(self):
            return self.getToken(PlPgSqlParser.LEVEL, 0)

        def ISOLATION(self):
            return self.getToken(PlPgSqlParser.ISOLATION, 0)

        def ZONE(self):
            return self.getToken(PlPgSqlParser.ZONE, 0)

        def AUTHORIZATION(self):
            return self.getToken(PlPgSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_variableResetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVariableResetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVariableResetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVariableResetStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableResetStmt(self):

        localctx = PlPgSqlParser.VariableResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_variableResetStmt)
        try:
            self.state = 2130
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2116
                self.match(self.RESET)
                self.state = 2117 
                self.var_name(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2118
                self.match(self.RESET)
                self.state = 2119
                self.match(self.TIME)
                self.state = 2120
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2121
                self.match(self.RESET)
                self.state = 2122
                self.match(self.TRANSACTION)
                self.state = 2123
                self.match(self.ISOLATION)
                self.state = 2124
                self.match(self.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2125
                self.match(self.RESET)
                self.state = 2126
                self.match(self.SESSION)
                self.state = 2127
                self.match(self.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2128
                self.match(self.RESET)
                self.state = 2129
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetResetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SetResetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def variableResetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VariableResetStmtContext,0)


        def set_rest(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_restContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_setResetClause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSetResetClause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSetResetClause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSetResetClause(self)
            else:
                return visitor.visitChildren(self)




    def setResetClause(self):

        localctx = PlPgSqlParser.SetResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_setResetClause)
        try:
            self.state = 2135
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.match(self.SET)
                self.state = 2133 
                self.set_rest()

            elif token in [self.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2134 
                self.variableResetStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsetResetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.FunctionsetResetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_rest_moreContext,0)


        def variableResetStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.VariableResetStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_functionsetResetClause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunctionsetResetClause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunctionsetResetClause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunctionsetResetClause(self)
            else:
                return visitor.visitChildren(self)




    def functionsetResetClause(self):

        localctx = PlPgSqlParser.FunctionsetResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_functionsetResetClause)
        try:
            self.state = 2140
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(self.SET)
                self.state = 2138 
                self.set_rest_more()

            elif token in [self.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2139 
                self.variableResetStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableShowStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.VariableShowStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def SESSION(self):
            return self.getToken(PlPgSqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def LEVEL(self):
            return self.getToken(PlPgSqlParser.LEVEL, 0)

        def ISOLATION(self):
            return self.getToken(PlPgSqlParser.ISOLATION, 0)

        def ZONE(self):
            return self.getToken(PlPgSqlParser.ZONE, 0)

        def SHOW(self):
            return self.getToken(PlPgSqlParser.SHOW, 0)

        def AUTHORIZATION(self):
            return self.getToken(PlPgSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_variableShowStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVariableShowStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVariableShowStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVariableShowStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableShowStmt(self):

        localctx = PlPgSqlParser.VariableShowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_variableShowStmt)
        try:
            self.state = 2156
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2142
                self.match(self.SHOW)
                self.state = 2143 
                self.var_name(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2144
                self.match(self.SHOW)
                self.state = 2145
                self.match(self.TIME)
                self.state = 2146
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2147
                self.match(self.SHOW)
                self.state = 2148
                self.match(self.TRANSACTION)
                self.state = 2149
                self.match(self.ISOLATION)
                self.state = 2150
                self.match(self.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2151
                self.match(self.SHOW)
                self.state = 2152
                self.match(self.SESSION)
                self.state = 2153
                self.match(self.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2154
                self.match(self.SHOW)
                self.state = 2155
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintsSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstraintsSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def constraints_set_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Constraints_set_listContext,0)


        def CONSTRAINTS(self):
            return self.getToken(PlPgSqlParser.CONSTRAINTS, 0)

        def constraints_set_mode(self):
            return self.getTypedRuleContext(PlPgSqlParser.Constraints_set_modeContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraintsSetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraintsSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraintsSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraintsSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def constraintsSetStmt(self):

        localctx = PlPgSqlParser.ConstraintsSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_constraintsSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.match(self.SET)
            self.state = 2159
            self.match(self.CONSTRAINTS)
            self.state = 2160 
            self.constraints_set_list()
            self.state = 2161 
            self.constraints_set_mode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraints_set_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Constraints_set_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraints_set_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraints_set_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraints_set_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraints_set_list(self)
            else:
                return visitor.visitChildren(self)




    def constraints_set_list(self):

        localctx = PlPgSqlParser.Constraints_set_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_constraints_set_list)
        try:
            self.state = 2165
            token = self._input.LA(1)
            if token in [self.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.match(self.ALL)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164 
                self.qualified_name_list(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraints_set_modeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Constraints_set_modeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(PlPgSqlParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(PlPgSqlParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraints_set_mode

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraints_set_mode(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraints_set_mode(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraints_set_mode(self)
            else:
                return visitor.visitChildren(self)




    def constraints_set_mode(self):

        localctx = PlPgSqlParser.Constraints_set_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_constraints_set_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.DEFERRED or _la==PlPgSqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CheckPointStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CheckPointStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECKPOINT(self):
            return self.getToken(PlPgSqlParser.CHECKPOINT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_checkPointStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCheckPointStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCheckPointStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCheckPointStmt(self)
            else:
                return visitor.visitChildren(self)




    def checkPointStmt(self):

        localctx = PlPgSqlParser.CheckPointStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_checkPointStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            self.match(self.CHECKPOINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DiscardStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(PlPgSqlParser.DISCARD, 0)

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def PLANS(self):
            return self.getToken(PlPgSqlParser.PLANS, 0)

        def TEMPORARY(self):
            return self.getToken(PlPgSqlParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(PlPgSqlParser.TEMP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_discardStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDiscardStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDiscardStmt(self)
            else:
                return visitor.visitChildren(self)




    def discardStmt(self):

        localctx = PlPgSqlParser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_discardStmt)
        try:
            self.state = 2179
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2171
                self.match(self.DISCARD)
                self.state = 2172
                self.match(self.ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2173
                self.match(self.DISCARD)
                self.state = 2174
                self.match(self.TEMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2175
                self.match(self.DISCARD)
                self.state = 2176
                self.match(self.TEMPORARY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2177
                self.match(self.DISCARD)
                self.state = 2178
                self.match(self.PLANS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def alter_table_cmds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_table_cmdsContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterTableStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTableStmt(self):

        localctx = PlPgSqlParser.AlterTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_alterTableStmt)
        try:
            self.state = 2229
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2181
                self.match(self.ALTER)
                self.state = 2182
                self.match(self.TABLE)
                self.state = 2183 
                self.relation_expr()
                self.state = 2184 
                self.alter_table_cmds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2186
                self.match(self.ALTER)
                self.state = 2187
                self.match(self.TABLE)
                self.state = 2188
                self.match(self.IF_P)
                self.state = 2189
                self.match(self.EXISTS)
                self.state = 2190 
                self.relation_expr()
                self.state = 2191 
                self.alter_table_cmds(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2193
                self.match(self.ALTER)
                self.state = 2194
                self.match(self.INDEX)
                self.state = 2195 
                self.qualified_name()
                self.state = 2196 
                self.alter_table_cmds(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2198
                self.match(self.ALTER)
                self.state = 2199
                self.match(self.INDEX)
                self.state = 2200
                self.match(self.IF_P)
                self.state = 2201
                self.match(self.EXISTS)
                self.state = 2202 
                self.qualified_name()
                self.state = 2203 
                self.alter_table_cmds(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2205
                self.match(self.ALTER)
                self.state = 2206
                self.match(self.SEQUENCE)
                self.state = 2207 
                self.qualified_name()
                self.state = 2208 
                self.alter_table_cmds(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2210
                self.match(self.ALTER)
                self.state = 2211
                self.match(self.SEQUENCE)
                self.state = 2212
                self.match(self.IF_P)
                self.state = 2213
                self.match(self.EXISTS)
                self.state = 2214 
                self.qualified_name()
                self.state = 2215 
                self.alter_table_cmds(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2217
                self.match(self.ALTER)
                self.state = 2218
                self.match(self.VIEW)
                self.state = 2219 
                self.qualified_name()
                self.state = 2220 
                self.alter_table_cmds(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2222
                self.match(self.ALTER)
                self.state = 2223
                self.match(self.VIEW)
                self.state = 2224
                self.match(self.IF_P)
                self.state = 2225
                self.match(self.EXISTS)
                self.state = 2226 
                self.qualified_name()
                self.state = 2227 
                self.alter_table_cmds(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_cmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_table_cmdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_cmd(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_table_cmdContext,0)


        def alter_table_cmds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_table_cmdsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_table_cmds

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_table_cmds(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_table_cmds(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_table_cmds(self)
            else:
                return visitor.visitChildren(self)



    def alter_table_cmds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alter_table_cmdsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 250
        self.enterRecursionRule(localctx, 250, self.RULE_alter_table_cmds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232 
            self.alter_table_cmd()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alter_table_cmdsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_table_cmds)
                    self.state = 2234
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2235
                    self.match(self.T__12)
                    self.state = 2236 
                    self.alter_table_cmd() 
                self.state = 2241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_table_cmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_table_cmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(PlPgSqlParser.RESET, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def colId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.ColIdContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,i)


        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def tableConstraint(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableConstraintContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def opt_collate_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_collate_clauseContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def columnDef(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnDefContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_optionsContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(PlPgSqlParser.STATISTICS, 0)

        def OWNER(self):
            return self.getToken(PlPgSqlParser.OWNER, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def COLUMN(self):
            return self.getToken(PlPgSqlParser.COLUMN, 0)

        def TRIGGER(self):
            return self.getToken(PlPgSqlParser.TRIGGER, 0)

        def RULE(self):
            return self.getToken(PlPgSqlParser.RULE, 0)

        def VALIDATE(self):
            return self.getToken(PlPgSqlParser.VALIDATE, 0)

        def alter_column_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_column_defaultContext,0)


        def opt_column(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_columnContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def INHERIT(self):
            return self.getToken(PlPgSqlParser.INHERIT, 0)

        def CLUSTER(self):
            return self.getToken(PlPgSqlParser.CLUSTER, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def alter_using(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_usingContext,0)


        def opt_set_data(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_set_dataContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def WITHOUT(self):
            return self.getToken(PlPgSqlParser.WITHOUT, 0)

        def ENABLE_P(self):
            return self.getToken(PlPgSqlParser.ENABLE_P, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def STORAGE(self):
            return self.getToken(PlPgSqlParser.STORAGE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def ALWAYS(self):
            return self.getToken(PlPgSqlParser.ALWAYS, 0)

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReloptionsContext,0)


        def DISABLE_P(self):
            return self.getToken(PlPgSqlParser.DISABLE_P, 0)

        def OIDS(self):
            return self.getToken(PlPgSqlParser.OIDS, 0)

        def REPLICA(self):
            return self.getToken(PlPgSqlParser.REPLICA, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_table_cmd

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_table_cmd(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_table_cmd(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_table_cmd(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_cmd(self):

        localctx = PlPgSqlParser.Alter_table_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_alter_table_cmd)
        try:
            self.state = 2407
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2242
                self.match(self.ADD_P)
                self.state = 2243 
                self.columnDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                self.match(self.ADD_P)
                self.state = 2245
                self.match(self.COLUMN)
                self.state = 2246 
                self.columnDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                self.match(self.ALTER)
                self.state = 2248 
                self.opt_column()
                self.state = 2249 
                self.colId()
                self.state = 2250 
                self.alter_column_default()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2252
                self.match(self.ALTER)
                self.state = 2253 
                self.opt_column()
                self.state = 2254 
                self.colId()
                self.state = 2255
                self.match(self.DROP)
                self.state = 2256
                self.match(self.NOT)
                self.state = 2257
                self.match(self.NULL_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2259
                self.match(self.ALTER)
                self.state = 2260 
                self.opt_column()
                self.state = 2261 
                self.colId()
                self.state = 2262
                self.match(self.SET)
                self.state = 2263
                self.match(self.NOT)
                self.state = 2264
                self.match(self.NULL_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2266
                self.match(self.ALTER)
                self.state = 2267 
                self.opt_column()
                self.state = 2268 
                self.colId()
                self.state = 2269
                self.match(self.SET)
                self.state = 2270
                self.match(self.STATISTICS)
                self.state = 2271 
                self.signedIconst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2273
                self.match(self.ALTER)
                self.state = 2274 
                self.opt_column()
                self.state = 2275 
                self.colId()
                self.state = 2276
                self.match(self.SET)
                self.state = 2277 
                self.reloptions()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2279
                self.match(self.ALTER)
                self.state = 2280 
                self.opt_column()
                self.state = 2281 
                self.colId()
                self.state = 2282
                self.match(self.RESET)
                self.state = 2283 
                self.reloptions()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2285
                self.match(self.ALTER)
                self.state = 2286 
                self.opt_column()
                self.state = 2287 
                self.colId()
                self.state = 2288
                self.match(self.SET)
                self.state = 2289
                self.match(self.STORAGE)
                self.state = 2290 
                self.colId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2292
                self.match(self.DROP)
                self.state = 2293 
                self.opt_column()
                self.state = 2294
                self.match(self.IF_P)
                self.state = 2295
                self.match(self.EXISTS)
                self.state = 2296 
                self.colId()
                self.state = 2297 
                self.opt_drop_behavior()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2299
                self.match(self.DROP)
                self.state = 2300 
                self.opt_column()
                self.state = 2301 
                self.colId()
                self.state = 2302 
                self.opt_drop_behavior()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2304
                self.match(self.ALTER)
                self.state = 2305 
                self.opt_column()
                self.state = 2306 
                self.colId()
                self.state = 2307 
                self.opt_set_data()
                self.state = 2308
                self.match(self.TYPE_P)
                self.state = 2309 
                self.typename()
                self.state = 2310 
                self.opt_collate_clause()
                self.state = 2311 
                self.alter_using()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2313
                self.match(self.ALTER)
                self.state = 2314 
                self.opt_column()
                self.state = 2315 
                self.colId()
                self.state = 2316 
                self.alter_generic_options()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2318
                self.match(self.ADD_P)
                self.state = 2319 
                self.tableConstraint()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2320
                self.match(self.VALIDATE)
                self.state = 2321
                self.match(self.CONSTRAINT)
                self.state = 2322 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2323
                self.match(self.DROP)
                self.state = 2324
                self.match(self.CONSTRAINT)
                self.state = 2325
                self.match(self.IF_P)
                self.state = 2326
                self.match(self.EXISTS)
                self.state = 2327 
                self.name()
                self.state = 2328 
                self.opt_drop_behavior()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2330
                self.match(self.DROP)
                self.state = 2331
                self.match(self.CONSTRAINT)
                self.state = 2332 
                self.name()
                self.state = 2333 
                self.opt_drop_behavior()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2335
                self.match(self.SET)
                self.state = 2336
                self.match(self.WITH)
                self.state = 2337
                self.match(self.OIDS)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2338
                self.match(self.SET)
                self.state = 2339
                self.match(self.WITHOUT)
                self.state = 2340
                self.match(self.OIDS)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2341
                self.match(self.CLUSTER)
                self.state = 2342
                self.match(self.ON)
                self.state = 2343 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2344
                self.match(self.SET)
                self.state = 2345
                self.match(self.WITHOUT)
                self.state = 2346
                self.match(self.CLUSTER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2347
                self.match(self.ENABLE_P)
                self.state = 2348
                self.match(self.TRIGGER)
                self.state = 2349 
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2350
                self.match(self.ENABLE_P)
                self.state = 2351
                self.match(self.ALWAYS)
                self.state = 2352
                self.match(self.TRIGGER)
                self.state = 2353 
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2354
                self.match(self.ENABLE_P)
                self.state = 2355
                self.match(self.REPLICA)
                self.state = 2356
                self.match(self.TRIGGER)
                self.state = 2357 
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2358
                self.match(self.ENABLE_P)
                self.state = 2359
                self.match(self.TRIGGER)
                self.state = 2360
                self.match(self.ALL)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2361
                self.match(self.ENABLE_P)
                self.state = 2362
                self.match(self.TRIGGER)
                self.state = 2363
                self.match(self.USER)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2364
                self.match(self.DISABLE_P)
                self.state = 2365
                self.match(self.TRIGGER)
                self.state = 2366 
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2367
                self.match(self.DISABLE_P)
                self.state = 2368
                self.match(self.TRIGGER)
                self.state = 2369
                self.match(self.ALL)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2370
                self.match(self.DISABLE_P)
                self.state = 2371
                self.match(self.TRIGGER)
                self.state = 2372
                self.match(self.USER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2373
                self.match(self.ENABLE_P)
                self.state = 2374
                self.match(self.RULE)
                self.state = 2375 
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2376
                self.match(self.ENABLE_P)
                self.state = 2377
                self.match(self.ALWAYS)
                self.state = 2378
                self.match(self.RULE)
                self.state = 2379 
                self.name()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2380
                self.match(self.ENABLE_P)
                self.state = 2381
                self.match(self.REPLICA)
                self.state = 2382
                self.match(self.RULE)
                self.state = 2383 
                self.name()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2384
                self.match(self.DISABLE_P)
                self.state = 2385
                self.match(self.RULE)
                self.state = 2386 
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2387
                self.match(self.INHERIT)
                self.state = 2388 
                self.qualified_name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2389
                self.match(self.NO)
                self.state = 2390
                self.match(self.INHERIT)
                self.state = 2391 
                self.qualified_name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2392
                self.match(self.OF)
                self.state = 2393 
                self.any_name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2394
                self.match(self.NOT)
                self.state = 2395
                self.match(self.OF)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2396
                self.match(self.OWNER)
                self.state = 2397
                self.match(self.TO)
                self.state = 2398 
                self.roleId()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2399
                self.match(self.SET)
                self.state = 2400
                self.match(self.TABLESPACE)
                self.state = 2401 
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2402
                self.match(self.SET)
                self.state = 2403 
                self.reloptions()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2404
                self.match(self.RESET)
                self.state = 2405 
                self.reloptions()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2406 
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_column_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_column_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_column_default

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_column_default(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_column_default(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_column_default(self)
            else:
                return visitor.visitChildren(self)




    def alter_column_default(self):

        localctx = PlPgSqlParser.Alter_column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_alter_column_default)
        try:
            self.state = 2414
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2409
                self.match(self.SET)
                self.state = 2410
                self.match(self.DEFAULT)
                self.state = 2411 
                self.a_expr(0)

            elif token in [self.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2412
                self.match(self.DROP)
                self.state = 2413
                self.match(self.DEFAULT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_drop_behaviorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_drop_behaviorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(PlPgSqlParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(PlPgSqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_drop_behavior

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_drop_behavior(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_drop_behavior(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_drop_behavior(self)
            else:
                return visitor.visitChildren(self)




    def opt_drop_behavior(self):

        localctx = PlPgSqlParser.Opt_drop_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_opt_drop_behavior)
        try:
            self.state = 2419
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2416
                self.match(self.CASCADE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2417
                self.match(self.RESTRICT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_collate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_collate_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def COLLATE(self):
            return self.getToken(PlPgSqlParser.COLLATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_collate_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_collate_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_collate_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_collate_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_collate_clause(self):

        localctx = PlPgSqlParser.Opt_collate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_opt_collate_clause)
        try:
            self.state = 2424
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2421
                self.match(self.COLLATE)
                self.state = 2422 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_usingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_usingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_using

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_using(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_using(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_using(self)
            else:
                return visitor.visitChildren(self)




    def alter_using(self):

        localctx = PlPgSqlParser.Alter_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_alter_using)
        try:
            self.state = 2429
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2426
                self.match(self.USING)
                self.state = 2427 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReloptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ReloptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloption_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reloption_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reloptions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReloptions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReloptions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReloptions(self)
            else:
                return visitor.visitChildren(self)




    def reloptions(self):

        localctx = PlPgSqlParser.ReloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reloptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(self.T__7)
            self.state = 2432 
            self.reloption_list(0)
            self.state = 2433
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_reloptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_reloptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReloptionsContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_reloptions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_reloptions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_reloptions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_reloptions(self)
            else:
                return visitor.visitChildren(self)




    def opt_reloptions(self):

        localctx = PlPgSqlParser.Opt_reloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_opt_reloptions)
        try:
            self.state = 2438
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2435
                self.match(self.WITH)
                self.state = 2436 
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reloption_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Reloption_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloption_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reloption_listContext,0)


        def reloption_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reloption_elemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reloption_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReloption_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReloption_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReloption_list(self)
            else:
                return visitor.visitChildren(self)



    def reloption_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Reloption_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 266
        self.enterRecursionRule(localctx, 266, self.RULE_reloption_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441 
            self.reloption_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Reloption_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_reloption_list)
                    self.state = 2443
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2444
                    self.match(self.T__12)
                    self.state = 2445 
                    self.reloption_elem() 
                self.state = 2450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Reloption_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Reloption_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.ColLabelContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,i)


        def def_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reloption_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReloption_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReloption_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReloption_elem(self)
            else:
                return visitor.visitChildren(self)




    def reloption_elem(self):

        localctx = PlPgSqlParser.Reloption_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_reloption_elem)
        try:
            self.state = 2466
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2451 
                self.colLabel()
                self.state = 2452
                self.match(self.T__4)
                self.state = 2453 
                self.def_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455 
                self.colLabel()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2456 
                self.colLabel()
                self.state = 2457
                self.match(self.T__14)
                self.state = 2458 
                self.colLabel()
                self.state = 2459
                self.match(self.T__4)
                self.state = 2460 
                self.def_arg()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2462 
                self.colLabel()
                self.state = 2463
                self.match(self.T__14)
                self.state = 2464 
                self.colLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterCompositeTypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterCompositeTypeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def alter_type_cmds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_type_cmdsContext,0)


        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterCompositeTypeStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterCompositeTypeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterCompositeTypeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterCompositeTypeStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterCompositeTypeStmt(self):

        localctx = PlPgSqlParser.AlterCompositeTypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_alterCompositeTypeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(self.ALTER)
            self.state = 2469
            self.match(self.TYPE_P)
            self.state = 2470 
            self.any_name()
            self.state = 2471 
            self.alter_type_cmds(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_type_cmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_type_cmdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_type_cmd(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_type_cmdContext,0)


        def alter_type_cmds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_type_cmdsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_type_cmds

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_type_cmds(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_type_cmds(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_type_cmds(self)
            else:
                return visitor.visitChildren(self)



    def alter_type_cmds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alter_type_cmdsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_alter_type_cmds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474 
            self.alter_type_cmd()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alter_type_cmdsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_type_cmds)
                    self.state = 2476
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2477
                    self.match(self.T__12)
                    self.state = 2478 
                    self.alter_type_cmd() 
                self.state = 2483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_type_cmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_type_cmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElement(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableFuncElementContext,0)


        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def opt_collate_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_collate_clauseContext,0)


        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(PlPgSqlParser.ATTRIBUTE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def opt_set_data(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_set_dataContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_type_cmd

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_type_cmd(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_type_cmd(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_type_cmd(self)
            else:
                return visitor.visitChildren(self)




    def alter_type_cmd(self):

        localctx = PlPgSqlParser.Alter_type_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_alter_type_cmd)
        try:
            self.state = 2510
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2484
                self.match(self.ADD_P)
                self.state = 2485
                self.match(self.ATTRIBUTE)
                self.state = 2486 
                self.tableFuncElement()
                self.state = 2487 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2489
                self.match(self.DROP)
                self.state = 2490
                self.match(self.ATTRIBUTE)
                self.state = 2491
                self.match(self.IF_P)
                self.state = 2492
                self.match(self.EXISTS)
                self.state = 2493 
                self.colId()
                self.state = 2494 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2496
                self.match(self.DROP)
                self.state = 2497
                self.match(self.ATTRIBUTE)
                self.state = 2498 
                self.colId()
                self.state = 2499 
                self.opt_drop_behavior()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2501
                self.match(self.ALTER)
                self.state = 2502
                self.match(self.ATTRIBUTE)
                self.state = 2503 
                self.colId()
                self.state = 2504 
                self.opt_set_data()
                self.state = 2505
                self.match(self.TYPE_P)
                self.state = 2506 
                self.typename()
                self.state = 2507 
                self.opt_collate_clause()
                self.state = 2508 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortalStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ClosePortalStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def CLOSE(self):
            return self.getToken(PlPgSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_closePortalStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterClosePortalStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitClosePortalStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitClosePortalStmt(self)
            else:
                return visitor.visitChildren(self)




    def closePortalStmt(self):

        localctx = PlPgSqlParser.ClosePortalStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_closePortalStmt)
        try:
            self.state = 2516
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2512
                self.match(self.CLOSE)
                self.state = 2513 
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2514
                self.match(self.CLOSE)
                self.state = 2515
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CopyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CopyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_optionsContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def COPY(self):
            return self.getToken(PlPgSqlParser.COPY, 0)

        def opt_oids(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_oidsContext,0)


        def opt_binary(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_binaryContext,0)


        def copy_delimiter(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_delimiterContext,0)


        def copy_file_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_file_nameContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def copy_from(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_fromContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copyStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopyStmt(self)
            else:
                return visitor.visitChildren(self)




    def copyStmt(self):

        localctx = PlPgSqlParser.CopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_copyStmt)
        try:
            self.state = 2540
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2518
                self.match(self.COPY)
                self.state = 2519 
                self.opt_binary()
                self.state = 2520 
                self.qualified_name()
                self.state = 2521 
                self.opt_column_list()
                self.state = 2522 
                self.opt_oids()
                self.state = 2523 
                self.copy_from()
                self.state = 2524 
                self.copy_file_name()
                self.state = 2525 
                self.copy_delimiter()
                self.state = 2527
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 2526
                    self.match(self.WITH)


                self.state = 2529 
                self.copy_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2531
                self.match(self.COPY)
                self.state = 2532 
                self.select_with_parens(0)
                self.state = 2533
                self.match(self.TO)
                self.state = 2534 
                self.copy_file_name()
                self.state = 2536
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 2535
                    self.match(self.WITH)


                self.state = 2538 
                self.copy_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_fromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_fromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_from

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_from(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_from(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_from(self)
            else:
                return visitor.visitChildren(self)




    def copy_from(self):

        localctx = PlPgSqlParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_copy_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.FROM or _la==PlPgSqlParser.TO):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_file_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STDOUT(self):
            return self.getToken(PlPgSqlParser.STDOUT, 0)

        def STDIN(self):
            return self.getToken(PlPgSqlParser.STDIN, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_file_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_file_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_file_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_file_name(self)
            else:
                return visitor.visitChildren(self)




    def copy_file_name(self):

        localctx = PlPgSqlParser.Copy_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_copy_file_name)
        try:
            self.state = 2547
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2544 
                self.sConst()

            elif token in [self.STDIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2545
                self.match(self.STDIN)

            elif token in [self.STDOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2546
                self.match(self.STDOUT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_listContext,0)


        def copy_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_options(self)
            else:
                return visitor.visitChildren(self)




    def copy_options(self):

        localctx = PlPgSqlParser.Copy_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_copy_options)
        try:
            self.state = 2554
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2549 
                self.copy_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2550
                self.match(self.T__7)
                self.state = 2551 
                self.copy_generic_opt_list(0)
                self.state = 2552
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_opt_listContext,0)


        def copy_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_opt_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Copy_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_copy_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Copy_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_opt_list)
                    self.state = 2557
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2558 
                    self.copy_opt_item() 
                self.state = 2563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def ESCAPE(self):
            return self.getToken(PlPgSqlParser.ESCAPE, 0)

        def OIDS(self):
            return self.getToken(PlPgSqlParser.OIDS, 0)

        def FORCE(self):
            return self.getToken(PlPgSqlParser.FORCE, 0)

        def QUOTE(self):
            return self.getToken(PlPgSqlParser.QUOTE, 0)

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def opt_as(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_asContext,0)


        def HEADER_P(self):
            return self.getToken(PlPgSqlParser.HEADER_P, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def CSV(self):
            return self.getToken(PlPgSqlParser.CSV, 0)

        def DELIMITER(self):
            return self.getToken(PlPgSqlParser.DELIMITER, 0)

        def BINARY(self):
            return self.getToken(PlPgSqlParser.BINARY, 0)

        def ENCODING(self):
            return self.getToken(PlPgSqlParser.ENCODING, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def copy_opt_item(self):

        localctx = PlPgSqlParser.Copy_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_copy_opt_item)
        try:
            self.state = 2596
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2564
                self.match(self.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2565
                self.match(self.OIDS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2566
                self.match(self.DELIMITER)
                self.state = 2567 
                self.opt_as()
                self.state = 2568 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2570
                self.match(self.NULL_P)
                self.state = 2571 
                self.opt_as()
                self.state = 2572 
                self.sConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2574
                self.match(self.CSV)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2575
                self.match(self.HEADER_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2576
                self.match(self.QUOTE)
                self.state = 2577 
                self.opt_as()
                self.state = 2578 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2580
                self.match(self.ESCAPE)
                self.state = 2581 
                self.opt_as()
                self.state = 2582 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2584
                self.match(self.FORCE)
                self.state = 2585
                self.match(self.QUOTE)
                self.state = 2586 
                self.columnList(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2587
                self.match(self.FORCE)
                self.state = 2588
                self.match(self.QUOTE)
                self.state = 2589
                self.match(self.T__9)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2590
                self.match(self.FORCE)
                self.state = 2591
                self.match(self.NOT)
                self.state = 2592
                self.match(self.NULL_P)
                self.state = 2593 
                self.columnList(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2594
                self.match(self.ENCODING)
                self.state = 2595 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_binaryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_binaryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PlPgSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_binary

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_binary(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_binary(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_binary(self)
            else:
                return visitor.visitChildren(self)




    def opt_binary(self):

        localctx = PlPgSqlParser.Opt_binaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_opt_binary)
        try:
            self.state = 2600
            token = self._input.LA(1)
            if token in [self.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2598
                self.match(self.BINARY)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_oidsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_oidsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OIDS(self):
            return self.getToken(PlPgSqlParser.OIDS, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_oids

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_oids(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_oids(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_oids(self)
            else:
                return visitor.visitChildren(self)




    def opt_oids(self):

        localctx = PlPgSqlParser.Opt_oidsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_opt_oids)
        try:
            self.state = 2605
            token = self._input.LA(1)
            if token in [self.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2602
                self.match(self.WITH)
                self.state = 2603
                self.match(self.OIDS)

            elif token in [self.FROM, self.TO]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_delimiterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_delimiterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELIMITERS(self):
            return self.getToken(PlPgSqlParser.DELIMITERS, 0)

        def opt_using(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_usingContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_delimiter

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_delimiter(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_delimiter(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_delimiter(self)
            else:
                return visitor.visitChildren(self)




    def copy_delimiter(self):

        localctx = PlPgSqlParser.Copy_delimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_copy_delimiter)
        try:
            self.state = 2612
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2607 
                self.opt_using()
                self.state = 2608
                self.match(self.DELIMITERS)
                self.state = 2609 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_usingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_usingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_using

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_using(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_using(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_using(self)
            else:
                return visitor.visitChildren(self)




    def opt_using(self):

        localctx = PlPgSqlParser.Opt_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_opt_using)
        try:
            self.state = 2616
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2614
                self.match(self.USING)

            elif token in [self.DELIMITERS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_generic_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_listContext,0)


        def copy_generic_opt_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_elemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_generic_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_generic_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_generic_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_generic_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_generic_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Copy_generic_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 298
        self.enterRecursionRule(localctx, 298, self.RULE_copy_generic_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619 
            self.copy_generic_opt_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Copy_generic_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_generic_opt_list)
                    self.state = 2621
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2622
                    self.match(self.T__12)
                    self.state = 2623 
                    self.copy_generic_opt_elem() 
                self.state = 2628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_generic_opt_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_generic_opt_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def copy_generic_opt_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_generic_opt_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_generic_opt_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_generic_opt_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_generic_opt_elem(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_elem(self):

        localctx = PlPgSqlParser.Copy_generic_opt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_copy_generic_opt_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629 
            self.colLabel()
            self.state = 2630 
            self.copy_generic_opt_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_generic_opt_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_boolean_or_stringContext,0)


        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_arg_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_generic_opt_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_generic_opt_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_generic_opt_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_generic_opt_arg(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_arg(self):

        localctx = PlPgSqlParser.Copy_generic_opt_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_copy_generic_opt_arg)
        try:
            self.state = 2640
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2632 
                self.opt_boolean_or_string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2633 
                self.numericOnly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2634
                self.match(self.T__9)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2635
                self.match(self.T__7)
                self.state = 2636 
                self.copy_generic_opt_arg_list(0)
                self.state = 2637
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_arg_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_generic_opt_arg_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_arg_list_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_arg_list_itemContext,0)


        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Copy_generic_opt_arg_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_generic_opt_arg_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_generic_opt_arg_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_generic_opt_arg_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_generic_opt_arg_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_generic_opt_arg_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Copy_generic_opt_arg_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 304
        self.enterRecursionRule(localctx, 304, self.RULE_copy_generic_opt_arg_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2643 
            self.copy_generic_opt_arg_list_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Copy_generic_opt_arg_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_generic_opt_arg_list)
                    self.state = 2645
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2646
                    self.match(self.T__12)
                    self.state = 2647 
                    self.copy_generic_opt_arg_list_item() 
                self.state = 2652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_generic_opt_arg_list_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Copy_generic_opt_arg_list_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_copy_generic_opt_arg_list_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCopy_generic_opt_arg_list_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCopy_generic_opt_arg_list_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCopy_generic_opt_arg_list_item(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_arg_list_item(self):

        localctx = PlPgSqlParser.Copy_generic_opt_arg_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_copy_generic_opt_arg_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2653 
            self.opt_boolean_or_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def onCommitOption(self):
            return self.getTypedRuleContext(PlPgSqlParser.OnCommitOptionContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def optTableSpace(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTableSpaceContext,0)


        def optInherit(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptInheritContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def opttypedtableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OpttypedtableElementListContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempContext,0)


        def opttableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OpttableElementListContext,0)


        def optWith(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptWithContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateStmt(self)
            else:
                return visitor.visitChildren(self)




    def createStmt(self):

        localctx = PlPgSqlParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_createStmt)
        try:
            self.state = 2707
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2655
                self.match(self.CREATE)
                self.state = 2656 
                self.optTemp()
                self.state = 2657
                self.match(self.TABLE)
                self.state = 2658 
                self.qualified_name()
                self.state = 2659
                self.match(self.T__7)
                self.state = 2660 
                self.opttableElementList()
                self.state = 2661
                self.match(self.T__13)
                self.state = 2662 
                self.optInherit()
                self.state = 2663 
                self.optWith()
                self.state = 2664 
                self.onCommitOption()
                self.state = 2665 
                self.optTableSpace()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2667
                self.match(self.CREATE)
                self.state = 2668 
                self.optTemp()
                self.state = 2669
                self.match(self.TABLE)
                self.state = 2670
                self.match(self.IF_P)
                self.state = 2671
                self.match(self.NOT)
                self.state = 2672
                self.match(self.EXISTS)
                self.state = 2673 
                self.qualified_name()
                self.state = 2674
                self.match(self.T__7)
                self.state = 2675 
                self.opttableElementList()
                self.state = 2676
                self.match(self.T__13)
                self.state = 2677 
                self.optInherit()
                self.state = 2678 
                self.optWith()
                self.state = 2679 
                self.onCommitOption()
                self.state = 2680 
                self.optTableSpace()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2682
                self.match(self.CREATE)
                self.state = 2683 
                self.optTemp()
                self.state = 2684
                self.match(self.TABLE)
                self.state = 2685 
                self.qualified_name()
                self.state = 2686
                self.match(self.OF)
                self.state = 2687 
                self.any_name()
                self.state = 2688 
                self.opttypedtableElementList()
                self.state = 2689 
                self.optWith()
                self.state = 2690 
                self.onCommitOption()
                self.state = 2691 
                self.optTableSpace()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2693
                self.match(self.CREATE)
                self.state = 2694 
                self.optTemp()
                self.state = 2695
                self.match(self.TABLE)
                self.state = 2696
                self.match(self.IF_P)
                self.state = 2697
                self.match(self.NOT)
                self.state = 2698
                self.match(self.EXISTS)
                self.state = 2699 
                self.qualified_name()
                self.state = 2700
                self.match(self.OF)
                self.state = 2701 
                self.any_name()
                self.state = 2702 
                self.opttypedtableElementList()
                self.state = 2703 
                self.optWith()
                self.state = 2704 
                self.onCommitOption()
                self.state = 2705 
                self.optTableSpace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTempContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptTempContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNLOGGED(self):
            return self.getToken(PlPgSqlParser.UNLOGGED, 0)

        def GLOBAL(self):
            return self.getToken(PlPgSqlParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(PlPgSqlParser.TEMPORARY, 0)

        def LOCAL(self):
            return self.getToken(PlPgSqlParser.LOCAL, 0)

        def TEMP(self):
            return self.getToken(PlPgSqlParser.TEMP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optTemp

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptTemp(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptTemp(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptTemp(self)
            else:
                return visitor.visitChildren(self)




    def optTemp(self):

        localctx = PlPgSqlParser.OptTempContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_optTemp)
        try:
            self.state = 2721
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2709
                self.match(self.TEMPORARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2710
                self.match(self.TEMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2711
                self.match(self.LOCAL)
                self.state = 2712
                self.match(self.TEMPORARY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2713
                self.match(self.LOCAL)
                self.state = 2714
                self.match(self.TEMP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2715
                self.match(self.GLOBAL)
                self.state = 2716
                self.match(self.TEMPORARY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2717
                self.match(self.GLOBAL)
                self.state = 2718
                self.match(self.TEMP)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2719
                self.match(self.UNLOGGED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OpttableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opttableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpttableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpttableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpttableElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttableElementList(self):

        localctx = PlPgSqlParser.OpttableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_opttableElementList)
        try:
            self.state = 2725
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.CHECK, self.COALESCE, self.CONSTRAINT, self.DEC, self.DECIMAL_P, self.EXCLUDE, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.FOREIGN, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.LIKE, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.PRIMARY, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.UNIQUE, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2723 
                self.tableElementList(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttypedtableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OpttypedtableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typedtableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypedtableElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opttypedtableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpttypedtableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpttypedtableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpttypedtableElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttypedtableElementList(self):

        localctx = PlPgSqlParser.OpttypedtableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_opttypedtableElementList)
        try:
            self.state = 2732
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2727
                self.match(self.T__7)
                self.state = 2728 
                self.typedtableElementList(0)
                self.state = 2729
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableElementListContext,0)


        def tableElement(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableElementContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableElementList(self)
            else:
                return visitor.visitChildren(self)



    def tableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_tableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2735 
            self.tableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.TableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableElementList)
                    self.state = 2737
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2738
                    self.match(self.T__12)
                    self.state = 2739 
                    self.tableElement() 
                self.state = 2744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedtableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TypedtableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typedtableElement(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypedtableElementContext,0)


        def typedtableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypedtableElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_typedtableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTypedtableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTypedtableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTypedtableElementList(self)
            else:
                return visitor.visitChildren(self)



    def typedtableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TypedtableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_typedtableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2746 
            self.typedtableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.TypedtableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typedtableElementList)
                    self.state = 2748
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2749
                    self.match(self.T__12)
                    self.state = 2750 
                    self.typedtableElement() 
                self.state = 2755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableLikeClauseContext,0)


        def tableConstraint(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableConstraintContext,0)


        def columnDef(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableElement

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = PlPgSqlParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_tableElement)
        try:
            self.state = 2759
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2756 
                self.columnDef()

            elif token in [self.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2757 
                self.tableLikeClause()

            elif token in [self.CHECK, self.CONSTRAINT, self.EXCLUDE, self.FOREIGN, self.PRIMARY, self.UNIQUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2758 
                self.tableConstraint()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedtableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TypedtableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableConstraint(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableConstraintContext,0)


        def columnOptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnOptionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_typedtableElement

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTypedtableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTypedtableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTypedtableElement(self)
            else:
                return visitor.visitChildren(self)




    def typedtableElement(self):

        localctx = PlPgSqlParser.TypedtableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_typedtableElement)
        try:
            self.state = 2763
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2761 
                self.columnOptions()

            elif token in [self.CHECK, self.CONSTRAINT, self.EXCLUDE, self.FOREIGN, self.PRIMARY, self.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2762 
                self.tableConstraint()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColumnDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_generic_optionsContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_columnDef

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColumnDef(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColumnDef(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColumnDef(self)
            else:
                return visitor.visitChildren(self)




    def columnDef(self):

        localctx = PlPgSqlParser.ColumnDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_columnDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765 
            self.colId()
            self.state = 2766 
            self.typename()
            self.state = 2767 
            self.create_generic_options()
            self.state = 2768 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColumnOptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def colQualList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColQualListContext,0)


        def OPTIONS(self):
            return self.getToken(PlPgSqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_columnOptions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColumnOptions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColumnOptions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColumnOptions(self)
            else:
                return visitor.visitChildren(self)




    def columnOptions(self):

        localctx = PlPgSqlParser.ColumnOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_columnOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2770 
            self.colId()
            self.state = 2771
            self.match(self.WITH)
            self.state = 2772
            self.match(self.OPTIONS)
            self.state = 2773 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColQualListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColQualListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colConstraint(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColConstraintContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colQualList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColQualList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColQualList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColQualList(self)
            else:
                return visitor.visitChildren(self)



    def colQualList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.ColQualListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 328
        self.enterRecursionRule(localctx, 328, self.RULE_colQualList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.ColQualListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_colQualList)
                    self.state = 2776
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2777 
                    self.colConstraint() 
                self.state = 2782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ColConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def constraintAttr(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttrContext,0)


        def colconstraintElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColconstraintElemContext,0)


        def COLLATE(self):
            return self.getToken(PlPgSqlParser.COLLATE, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colConstraint

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColConstraint(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColConstraint(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColConstraint(self)
            else:
                return visitor.visitChildren(self)




    def colConstraint(self):

        localctx = PlPgSqlParser.ColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_colConstraint)
        try:
            self.state = 2791
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2783
                self.match(self.CONSTRAINT)
                self.state = 2784 
                self.name()
                self.state = 2785 
                self.colconstraintElem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2787 
                self.colconstraintElem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2788 
                self.constraintAttr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2789
                self.match(self.COLLATE)
                self.state = 2790 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColconstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColconstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def CHECK(self):
            return self.getToken(PlPgSqlParser.CHECK, 0)

        def opt_no_inherit(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_no_inheritContext,0)


        def b_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.B_exprContext,0)


        def key_match(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_matchContext,0)


        def optConsTableSpace(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptConsTableSpaceContext,0)


        def KEY(self):
            return self.getToken(PlPgSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(PlPgSqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(PlPgSqlParser.REFERENCES, 0)

        def opt_definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_definitionContext,0)


        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_actionsContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(PlPgSqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colconstraintElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColconstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColconstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColconstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def colconstraintElem(self):

        localctx = PlPgSqlParser.ColconstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_colconstraintElem)
        try:
            self.state = 2819
            token = self._input.LA(1)
            if token in [self.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2793
                self.match(self.NOT)
                self.state = 2794
                self.match(self.NULL_P)

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2795
                self.match(self.NULL_P)

            elif token in [self.UNIQUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2796
                self.match(self.UNIQUE)
                self.state = 2797 
                self.opt_definition()
                self.state = 2798 
                self.optConsTableSpace()

            elif token in [self.PRIMARY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2800
                self.match(self.PRIMARY)
                self.state = 2801
                self.match(self.KEY)
                self.state = 2802 
                self.opt_definition()
                self.state = 2803 
                self.optConsTableSpace()

            elif token in [self.CHECK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2805
                self.match(self.CHECK)
                self.state = 2806
                self.match(self.T__7)
                self.state = 2807 
                self.a_expr(0)
                self.state = 2808
                self.match(self.T__13)
                self.state = 2809 
                self.opt_no_inherit()

            elif token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2811
                self.match(self.DEFAULT)
                self.state = 2812 
                self.b_expr(0)

            elif token in [self.REFERENCES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2813
                self.match(self.REFERENCES)
                self.state = 2814 
                self.qualified_name()
                self.state = 2815 
                self.opt_column_list()
                self.state = 2816 
                self.key_match()
                self.state = 2817 
                self.key_actions()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstraintAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(PlPgSqlParser.DEFERRED, 0)

        def DEFERRABLE(self):
            return self.getToken(PlPgSqlParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def IMMEDIATE(self):
            return self.getToken(PlPgSqlParser.IMMEDIATE, 0)

        def INITIALLY(self):
            return self.getToken(PlPgSqlParser.INITIALLY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraintAttr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraintAttr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraintAttr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraintAttr(self)
            else:
                return visitor.visitChildren(self)




    def constraintAttr(self):

        localctx = PlPgSqlParser.ConstraintAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_constraintAttr)
        try:
            self.state = 2828
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2821
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2822
                self.match(self.NOT)
                self.state = 2823
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2824
                self.match(self.INITIALLY)
                self.state = 2825
                self.match(self.DEFERRED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2826
                self.match(self.INITIALLY)
                self.state = 2827
                self.match(self.IMMEDIATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableLikeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableLikeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeOptionList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableLikeOptionListContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def LIKE(self):
            return self.getToken(PlPgSqlParser.LIKE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableLikeClause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableLikeClause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableLikeClause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def tableLikeClause(self):

        localctx = PlPgSqlParser.TableLikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tableLikeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2830
            self.match(self.LIKE)
            self.state = 2831 
            self.qualified_name()
            self.state = 2832 
            self.tableLikeOptionList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableLikeOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableLikeOptionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeOptionList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableLikeOptionListContext,0)


        def tableLikeOption(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableLikeOptionContext,0)


        def EXCLUDING(self):
            return self.getToken(PlPgSqlParser.EXCLUDING, 0)

        def INCLUDING(self):
            return self.getToken(PlPgSqlParser.INCLUDING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableLikeOptionList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableLikeOptionList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableLikeOptionList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableLikeOptionList(self)
            else:
                return visitor.visitChildren(self)



    def tableLikeOptionList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TableLikeOptionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 338
        self.enterRecursionRule(localctx, 338, self.RULE_tableLikeOptionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2841
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.TableLikeOptionListContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableLikeOptionList)
                        self.state = 2835
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2836
                        self.match(self.INCLUDING)
                        self.state = 2837 
                        self.tableLikeOption()
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.TableLikeOptionListContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableLikeOptionList)
                        self.state = 2838
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2839
                        self.match(self.EXCLUDING)
                        self.state = 2840 
                        self.tableLikeOption()
                        pass

             
                self.state = 2845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableLikeOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableLikeOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def INDEXES(self):
            return self.getToken(PlPgSqlParser.INDEXES, 0)

        def CONSTRAINTS(self):
            return self.getToken(PlPgSqlParser.CONSTRAINTS, 0)

        def DEFAULTS(self):
            return self.getToken(PlPgSqlParser.DEFAULTS, 0)

        def COMMENTS(self):
            return self.getToken(PlPgSqlParser.COMMENTS, 0)

        def STORAGE(self):
            return self.getToken(PlPgSqlParser.STORAGE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableLikeOption

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableLikeOption(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableLikeOption(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableLikeOption(self)
            else:
                return visitor.visitChildren(self)




    def tableLikeOption(self):

        localctx = PlPgSqlParser.TableLikeOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_tableLikeOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2846
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ALL or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (self.COMMENTS - 76)) | (1 << (self.CONSTRAINTS - 76)) | (1 << (self.DEFAULTS - 76)))) != 0) or _la==PlPgSqlParser.INDEXES or _la==PlPgSqlParser.STORAGE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constraintElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintElemContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableConstraint

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableConstraint(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableConstraint(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableConstraint(self)
            else:
                return visitor.visitChildren(self)




    def tableConstraint(self):

        localctx = PlPgSqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_tableConstraint)
        try:
            self.state = 2853
            token = self._input.LA(1)
            if token in [self.CONSTRAINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2848
                self.match(self.CONSTRAINT)
                self.state = 2849 
                self.name()
                self.state = 2850 
                self.constraintElem()

            elif token in [self.CHECK, self.EXCLUDE, self.FOREIGN, self.PRIMARY, self.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2852 
                self.constraintElem()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def CHECK(self):
            return self.getToken(PlPgSqlParser.CHECK, 0)

        def EXCLUDE(self):
            return self.getToken(PlPgSqlParser.EXCLUDE, 0)

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def key_match(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_matchContext,0)


        def optConsTableSpace(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptConsTableSpaceContext,0)


        def KEY(self):
            return self.getToken(PlPgSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(PlPgSqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(PlPgSqlParser.REFERENCES, 0)

        def opt_definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_definitionContext,0)


        def exclusionWhereClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExclusionWhereClauseContext,0)


        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttributeSpecContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_actionsContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_method_clauseContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(PlPgSqlParser.PRIMARY, 0)

        def exclusionConstraintList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExclusionConstraintListContext,0)


        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def existingIndex(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExistingIndexContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraintElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def constraintElem(self):

        localctx = PlPgSqlParser.ConstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_constraintElem)
        try:
            self.state = 2909
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2855
                self.match(self.CHECK)
                self.state = 2856
                self.match(self.T__7)
                self.state = 2857 
                self.a_expr(0)
                self.state = 2858
                self.match(self.T__13)
                self.state = 2859 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2861
                self.match(self.UNIQUE)
                self.state = 2862
                self.match(self.T__7)
                self.state = 2863 
                self.columnList(0)
                self.state = 2864
                self.match(self.T__13)
                self.state = 2865 
                self.opt_definition()
                self.state = 2866 
                self.optConsTableSpace()
                self.state = 2867 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2869
                self.match(self.UNIQUE)
                self.state = 2870 
                self.existingIndex()
                self.state = 2871 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2873
                self.match(self.PRIMARY)
                self.state = 2874
                self.match(self.KEY)
                self.state = 2875
                self.match(self.T__7)
                self.state = 2876 
                self.columnList(0)
                self.state = 2877
                self.match(self.T__13)
                self.state = 2878 
                self.opt_definition()
                self.state = 2879 
                self.optConsTableSpace()
                self.state = 2880 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2882
                self.match(self.PRIMARY)
                self.state = 2883
                self.match(self.KEY)
                self.state = 2884 
                self.existingIndex()
                self.state = 2885 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2887
                self.match(self.EXCLUDE)
                self.state = 2888 
                self.access_method_clause()
                self.state = 2889
                self.match(self.T__7)
                self.state = 2890 
                self.exclusionConstraintList(0)
                self.state = 2891
                self.match(self.T__13)
                self.state = 2892 
                self.opt_definition()
                self.state = 2893 
                self.optConsTableSpace()
                self.state = 2894 
                self.exclusionWhereClause()
                self.state = 2895 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2897
                self.match(self.FOREIGN)
                self.state = 2898
                self.match(self.KEY)
                self.state = 2899
                self.match(self.T__7)
                self.state = 2900 
                self.columnList(0)
                self.state = 2901
                self.match(self.T__13)
                self.state = 2902
                self.match(self.REFERENCES)
                self.state = 2903 
                self.qualified_name()
                self.state = 2904 
                self.opt_column_list()
                self.state = 2905 
                self.key_match()
                self.state = 2906 
                self.key_actions()
                self.state = 2907 
                self.constraintAttributeSpec(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_no_inheritContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_no_inheritContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def INHERIT(self):
            return self.getToken(PlPgSqlParser.INHERIT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_no_inherit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_no_inherit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_no_inherit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_no_inherit(self)
            else:
                return visitor.visitChildren(self)




    def opt_no_inherit(self):

        localctx = PlPgSqlParser.Opt_no_inheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_opt_no_inherit)
        try:
            self.state = 2914
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2911
                self.match(self.NO)
                self.state = 2912
                self.match(self.INHERIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_column_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_column_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_column_list(self):

        localctx = PlPgSqlParser.Opt_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_opt_column_list)
        try:
            self.state = 2921
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2916
                self.match(self.T__7)
                self.state = 2917 
                self.columnList(0)
                self.state = 2918
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColumnListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def columnElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnElemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_columnList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColumnList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColumnList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColumnList(self)
            else:
                return visitor.visitChildren(self)



    def columnList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.ColumnListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 350
        self.enterRecursionRule(localctx, 350, self.RULE_columnList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924 
            self.columnElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.ColumnListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_columnList)
                    self.state = 2926
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2927
                    self.match(self.T__12)
                    self.state = 2928 
                    self.columnElem() 
                self.state = 2933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ColumnElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColumnElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_columnElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColumnElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColumnElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColumnElem(self)
            else:
                return visitor.visitChildren(self)




    def columnElem(self):

        localctx = PlPgSqlParser.ColumnElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_columnElem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_matchContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Key_matchContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PlPgSqlParser.MATCH, 0)

        def FULL(self):
            return self.getToken(PlPgSqlParser.FULL, 0)

        def SIMPLE(self):
            return self.getToken(PlPgSqlParser.SIMPLE, 0)

        def PARTIAL(self):
            return self.getToken(PlPgSqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_key_match

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterKey_match(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitKey_match(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitKey_match(self)
            else:
                return visitor.visitChildren(self)




    def key_match(self):

        localctx = PlPgSqlParser.Key_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_key_match)
        try:
            self.state = 2943
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2936
                self.match(self.MATCH)
                self.state = 2937
                self.match(self.FULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2938
                self.match(self.MATCH)
                self.state = 2939
                self.match(self.PARTIAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2940
                self.match(self.MATCH)
                self.state = 2941
                self.match(self.SIMPLE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionConstraintListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExclusionConstraintListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exclusionconstraintElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExclusionconstraintElemContext,0)


        def exclusionConstraintList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExclusionConstraintListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_exclusionConstraintList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExclusionConstraintList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExclusionConstraintList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExclusionConstraintList(self)
            else:
                return visitor.visitChildren(self)



    def exclusionConstraintList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.ExclusionConstraintListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 356
        self.enterRecursionRule(localctx, 356, self.RULE_exclusionConstraintList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946 
            self.exclusionconstraintElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2953
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.ExclusionConstraintListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusionConstraintList)
                    self.state = 2948
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2949
                    self.match(self.T__12)
                    self.state = 2950 
                    self.exclusionconstraintElem() 
                self.state = 2955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusionconstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExclusionconstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def index_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_elemContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_exclusionconstraintElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExclusionconstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExclusionconstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExclusionconstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def exclusionconstraintElem(self):

        localctx = PlPgSqlParser.ExclusionconstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_exclusionconstraintElem)
        try:
            self.state = 2967
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2956 
                self.index_elem()
                self.state = 2957
                self.match(self.WITH)
                self.state = 2958 
                self.any_operator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2960 
                self.index_elem()
                self.state = 2961
                self.match(self.WITH)
                self.state = 2962
                self.match(self.OPERATOR)
                self.state = 2963
                self.match(self.T__7)
                self.state = 2964 
                self.any_operator()
                self.state = 2965
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionWhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExclusionWhereClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PlPgSqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_exclusionWhereClause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExclusionWhereClause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExclusionWhereClause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExclusionWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def exclusionWhereClause(self):

        localctx = PlPgSqlParser.ExclusionWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_exclusionWhereClause)
        try:
            self.state = 2975
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2969
                self.match(self.WHERE)
                self.state = 2970
                self.match(self.T__7)
                self.state = 2971 
                self.a_expr(0)
                self.state = 2972
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_actionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Key_actionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def key_update(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_updateContext,0)


        def key_delete(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_deleteContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_key_actions

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterKey_actions(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitKey_actions(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitKey_actions(self)
            else:
                return visitor.visitChildren(self)




    def key_actions(self):

        localctx = PlPgSqlParser.Key_actionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_key_actions)
        try:
            self.state = 2986
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2977 
                self.key_update()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2978 
                self.key_delete()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2979 
                self.key_update()
                self.state = 2980 
                self.key_delete()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2982 
                self.key_delete()
                self.state = 2983 
                self.key_update()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_updateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Key_updateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def key_action(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_actionContext,0)


        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_key_update

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterKey_update(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitKey_update(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitKey_update(self)
            else:
                return visitor.visitChildren(self)




    def key_update(self):

        localctx = PlPgSqlParser.Key_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_key_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            self.match(self.ON)
            self.state = 2989
            self.match(self.UPDATE)
            self.state = 2990 
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Key_deleteContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def key_action(self):
            return self.getTypedRuleContext(PlPgSqlParser.Key_actionContext,0)


        def DELETE_P(self):
            return self.getToken(PlPgSqlParser.DELETE_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_key_delete

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterKey_delete(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitKey_delete(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitKey_delete(self)
            else:
                return visitor.visitChildren(self)




    def key_delete(self):

        localctx = PlPgSqlParser.Key_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_key_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(self.ON)
            self.state = 2993
            self.match(self.DELETE_P)
            self.state = 2994 
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_actionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Key_actionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def CASCADE(self):
            return self.getToken(PlPgSqlParser.CASCADE, 0)

        def ACTION(self):
            return self.getToken(PlPgSqlParser.ACTION, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def RESTRICT(self):
            return self.getToken(PlPgSqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_key_action

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterKey_action(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitKey_action(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitKey_action(self)
            else:
                return visitor.visitChildren(self)




    def key_action(self):

        localctx = PlPgSqlParser.Key_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_key_action)
        try:
            self.state = 3004
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2996
                self.match(self.NO)
                self.state = 2997
                self.match(self.ACTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2998
                self.match(self.RESTRICT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2999
                self.match(self.CASCADE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3000
                self.match(self.SET)
                self.state = 3001
                self.match(self.NULL_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3002
                self.match(self.SET)
                self.state = 3003
                self.match(self.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptInheritContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptInheritContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INHERITS(self):
            return self.getToken(PlPgSqlParser.INHERITS, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optInherit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptInherit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptInherit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptInherit(self)
            else:
                return visitor.visitChildren(self)




    def optInherit(self):

        localctx = PlPgSqlParser.OptInheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_optInherit)
        try:
            self.state = 3012
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3006
                self.match(self.INHERITS)
                self.state = 3007
                self.match(self.T__7)
                self.state = 3008 
                self.qualified_name_list(0)
                self.state = 3009
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptWithContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptWithContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReloptionsContext,0)


        def OIDS(self):
            return self.getToken(PlPgSqlParser.OIDS, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(PlPgSqlParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optWith

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptWith(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptWith(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptWith(self)
            else:
                return visitor.visitChildren(self)




    def optWith(self):

        localctx = PlPgSqlParser.OptWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_optWith)
        try:
            self.state = 3021
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3014
                self.match(self.WITH)
                self.state = 3015 
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3016
                self.match(self.WITH)
                self.state = 3017
                self.match(self.OIDS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3018
                self.match(self.WITHOUT)
                self.state = 3019
                self.match(self.OIDS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnCommitOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OnCommitOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def DELETE_P(self):
            return self.getToken(PlPgSqlParser.DELETE_P, 0)

        def ROWS(self):
            return self.getToken(PlPgSqlParser.ROWS, 0)

        def PRESERVE(self):
            return self.getToken(PlPgSqlParser.PRESERVE, 0)

        def COMMIT(self):
            return self.getToken(PlPgSqlParser.COMMIT, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_onCommitOption

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOnCommitOption(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOnCommitOption(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOnCommitOption(self)
            else:
                return visitor.visitChildren(self)




    def onCommitOption(self):

        localctx = PlPgSqlParser.OnCommitOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_onCommitOption)
        try:
            self.state = 3035
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3023
                self.match(self.ON)
                self.state = 3024
                self.match(self.COMMIT)
                self.state = 3025
                self.match(self.DROP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3026
                self.match(self.ON)
                self.state = 3027
                self.match(self.COMMIT)
                self.state = 3028
                self.match(self.DELETE_P)
                self.state = 3029
                self.match(self.ROWS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3030
                self.match(self.ON)
                self.state = 3031
                self.match(self.COMMIT)
                self.state = 3032
                self.match(self.PRESERVE)
                self.state = 3033
                self.match(self.ROWS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTableSpaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptTableSpaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optTableSpace

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptTableSpace(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptTableSpace(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptTableSpace(self)
            else:
                return visitor.visitChildren(self)




    def optTableSpace(self):

        localctx = PlPgSqlParser.OptTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_optTableSpace)
        try:
            self.state = 3040
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3037
                self.match(self.TABLESPACE)
                self.state = 3038 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptConsTableSpaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptConsTableSpaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optConsTableSpace

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptConsTableSpace(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptConsTableSpace(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptConsTableSpace(self)
            else:
                return visitor.visitChildren(self)




    def optConsTableSpace(self):

        localctx = PlPgSqlParser.OptConsTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_optConsTableSpace)
        try:
            self.state = 3047
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3042
                self.match(self.USING)
                self.state = 3043
                self.match(self.INDEX)
                self.state = 3044
                self.match(self.TABLESPACE)
                self.state = 3045 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistingIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExistingIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_nameContext,0)


        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_existingIndex

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExistingIndex(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExistingIndex(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExistingIndex(self)
            else:
                return visitor.visitChildren(self)




    def existingIndex(self):

        localctx = PlPgSqlParser.ExistingIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_existingIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.match(self.USING)
            self.state = 3050
            self.match(self.INDEX)
            self.state = 3051 
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateAsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateAsStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def create_as_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_as_targetContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempContext,0)


        def opt_with_data(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_with_dataContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createAsStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateAsStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateAsStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateAsStmt(self)
            else:
                return visitor.visitChildren(self)




    def createAsStmt(self):

        localctx = PlPgSqlParser.CreateAsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_createAsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(self.CREATE)
            self.state = 3054 
            self.optTemp()
            self.state = 3055
            self.match(self.TABLE)
            self.state = 3056 
            self.create_as_target()
            self.state = 3057
            self.match(self.AS)
            self.state = 3058 
            self.selectStmt()
            self.state = 3059 
            self.opt_with_data()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_as_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Create_as_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def onCommitOption(self):
            return self.getTypedRuleContext(PlPgSqlParser.OnCommitOptionContext,0)


        def optTableSpace(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTableSpaceContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def optWith(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptWithContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_create_as_target

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreate_as_target(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreate_as_target(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreate_as_target(self)
            else:
                return visitor.visitChildren(self)




    def create_as_target(self):

        localctx = PlPgSqlParser.Create_as_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_create_as_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061 
            self.qualified_name()
            self.state = 3062 
            self.opt_column_list()
            self.state = 3063 
            self.optWith()
            self.state = 3064 
            self.onCommitOption()
            self.state = 3065 
            self.optTableSpace()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_with_dataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_with_dataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_with_data

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_with_data(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_with_data(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_with_data(self)
            else:
                return visitor.visitChildren(self)




    def opt_with_data(self):

        localctx = PlPgSqlParser.Opt_with_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_opt_with_data)
        try:
            self.state = 3073
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3067
                self.match(self.WITH)
                self.state = 3068
                self.match(self.DATA_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3069
                self.match(self.WITH)
                self.state = 3070
                self.match(self.NO)
                self.state = 3071
                self.match(self.DATA_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateSeqStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateSeqStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optseqOptList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptseqOptListContext,0)


        def optTemp(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createSeqStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateSeqStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateSeqStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateSeqStmt(self)
            else:
                return visitor.visitChildren(self)




    def createSeqStmt(self):

        localctx = PlPgSqlParser.CreateSeqStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_createSeqStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3075
            self.match(self.CREATE)
            self.state = 3076 
            self.optTemp()
            self.state = 3077
            self.match(self.SEQUENCE)
            self.state = 3078 
            self.qualified_name()
            self.state = 3079 
            self.optseqOptList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterSeqStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterSeqStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def seqOptList(self):
            return self.getTypedRuleContext(PlPgSqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterSeqStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterSeqStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterSeqStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterSeqStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterSeqStmt(self):

        localctx = PlPgSqlParser.AlterSeqStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_alterSeqStmt)
        try:
            self.state = 3093
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3081
                self.match(self.ALTER)
                self.state = 3082
                self.match(self.SEQUENCE)
                self.state = 3083 
                self.qualified_name()
                self.state = 3084 
                self.seqOptList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3086
                self.match(self.ALTER)
                self.state = 3087
                self.match(self.SEQUENCE)
                self.state = 3088
                self.match(self.IF_P)
                self.state = 3089
                self.match(self.EXISTS)
                self.state = 3090 
                self.qualified_name()
                self.state = 3091 
                self.seqOptList(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptseqOptListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptseqOptListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def seqOptList(self):
            return self.getTypedRuleContext(PlPgSqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optseqOptList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptseqOptList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptseqOptList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptseqOptList(self)
            else:
                return visitor.visitChildren(self)




    def optseqOptList(self):

        localctx = PlPgSqlParser.OptseqOptListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_optseqOptList)
        try:
            self.state = 3097
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3095 
                self.seqOptList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeqOptListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SeqOptListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def seqOptElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.SeqOptElemContext,0)


        def seqOptList(self):
            return self.getTypedRuleContext(PlPgSqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_seqOptList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSeqOptList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSeqOptList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSeqOptList(self)
            else:
                return visitor.visitChildren(self)



    def seqOptList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.SeqOptListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 394
        self.enterRecursionRule(localctx, 394, self.RULE_seqOptList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3100 
            self.seqOptElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.SeqOptListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_seqOptList)
                    self.state = 3102
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3103 
                    self.seqOptElem() 
                self.state = 3108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SeqOptElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SeqOptElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def OWNED(self):
            return self.getToken(PlPgSqlParser.OWNED, 0)

        def RESTART(self):
            return self.getToken(PlPgSqlParser.RESTART, 0)

        def MAXVALUE(self):
            return self.getToken(PlPgSqlParser.MAXVALUE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def INCREMENT(self):
            return self.getToken(PlPgSqlParser.INCREMENT, 0)

        def START(self):
            return self.getToken(PlPgSqlParser.START, 0)

        def MINVALUE(self):
            return self.getToken(PlPgSqlParser.MINVALUE, 0)

        def opt_by(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_byContext,0)


        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def CYCLE(self):
            return self.getToken(PlPgSqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(PlPgSqlParser.CACHE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_seqOptElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSeqOptElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSeqOptElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSeqOptElem(self)
            else:
                return visitor.visitChildren(self)




    def seqOptElem(self):

        localctx = PlPgSqlParser.SeqOptElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_seqOptElem)
        self._la = 0 # Token type
        try:
            self.state = 3140
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3109
                self.match(self.CACHE)
                self.state = 3110 
                self.numericOnly()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3111
                self.match(self.CYCLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3112
                self.match(self.NO)
                self.state = 3113
                self.match(self.CYCLE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3114
                self.match(self.INCREMENT)
                self.state = 3115 
                self.opt_by()
                self.state = 3116 
                self.numericOnly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3118
                self.match(self.MAXVALUE)
                self.state = 3119 
                self.numericOnly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3120
                self.match(self.MINVALUE)
                self.state = 3121 
                self.numericOnly()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3122
                self.match(self.NO)
                self.state = 3123
                self.match(self.MAXVALUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3124
                self.match(self.NO)
                self.state = 3125
                self.match(self.MINVALUE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3126
                self.match(self.OWNED)
                self.state = 3127
                self.match(self.BY)
                self.state = 3128 
                self.any_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3129
                self.match(self.START)
                self.state = 3131
                _la = self._input.LA(1)
                if _la==PlPgSqlParser.WITH:
                    self.state = 3130
                    self.match(self.WITH)


                self.state = 3133 
                self.numericOnly()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3134
                self.match(self.RESTART)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3135
                self.match(self.RESTART)
                self.state = 3137
                _la = self._input.LA(1)
                if _la==PlPgSqlParser.WITH:
                    self.state = 3136
                    self.match(self.WITH)


                self.state = 3139 
                self.numericOnly()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_byContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_byContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_by

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_by(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_by(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_by(self)
            else:
                return visitor.visitChildren(self)




    def opt_by(self):

        localctx = PlPgSqlParser.Opt_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_opt_by)
        try:
            self.state = 3144
            token = self._input.LA(1)
            if token in [self.BY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3142
                self.match(self.BY)

            elif token in [self.T__11, self.T__10, self.ICONST, self.FCONST]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOnlyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.NumericOnlyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def FCONST(self):
            return self.getToken(PlPgSqlParser.FCONST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_numericOnly

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterNumericOnly(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitNumericOnly(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitNumericOnly(self)
            else:
                return visitor.visitChildren(self)




    def numericOnly(self):

        localctx = PlPgSqlParser.NumericOnlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_numericOnly)
        try:
            self.state = 3150
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3146
                self.match(self.FCONST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3147
                self.match(self.T__10)
                self.state = 3148
                self.match(self.FCONST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3149 
                self.signedIconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOnly_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.NumericOnly_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def numericOnly_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnly_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_numericOnly_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterNumericOnly_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitNumericOnly_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitNumericOnly_list(self)
            else:
                return visitor.visitChildren(self)



    def numericOnly_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.NumericOnly_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 402
        self.enterRecursionRule(localctx, 402, self.RULE_numericOnly_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3153 
            self.numericOnly()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.NumericOnly_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_numericOnly_list)
                    self.state = 3155
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3156
                    self.match(self.T__12)
                    self.state = 3157 
                    self.numericOnly() 
                self.state = 3162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CreatePLangStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreatePLangStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_inline_handler(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_inline_handlerContext,0)


        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def opt_trusted(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_trustedContext,0)


        def opt_validator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_validatorContext,0)


        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def opt_or_replace(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_or_replaceContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Handler_nameContext,0)


        def HANDLER(self):
            return self.getToken(PlPgSqlParser.HANDLER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createPLangStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatePLangStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatePLangStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatePLangStmt(self)
            else:
                return visitor.visitChildren(self)




    def createPLangStmt(self):

        localctx = PlPgSqlParser.CreatePLangStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_createPLangStmt)
        try:
            self.state = 3181
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3163
                self.match(self.CREATE)
                self.state = 3164 
                self.opt_or_replace()
                self.state = 3165 
                self.opt_trusted()
                self.state = 3166 
                self.opt_procedural()
                self.state = 3167
                self.match(self.LANGUAGE)
                self.state = 3168 
                self.colId_or_Sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self.match(self.CREATE)
                self.state = 3171 
                self.opt_or_replace()
                self.state = 3172 
                self.opt_trusted()
                self.state = 3173 
                self.opt_procedural()
                self.state = 3174
                self.match(self.LANGUAGE)
                self.state = 3175 
                self.colId_or_Sconst()
                self.state = 3176
                self.match(self.HANDLER)
                self.state = 3177 
                self.handler_name()
                self.state = 3178 
                self.opt_inline_handler()
                self.state = 3179 
                self.opt_validator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_trustedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_trustedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUSTED(self):
            return self.getToken(PlPgSqlParser.TRUSTED, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_trusted

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_trusted(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_trusted(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_trusted(self)
            else:
                return visitor.visitChildren(self)




    def opt_trusted(self):

        localctx = PlPgSqlParser.Opt_trustedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_opt_trusted)
        try:
            self.state = 3185
            token = self._input.LA(1)
            if token in [self.TRUSTED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3183
                self.match(self.TRUSTED)

            elif token in [self.LANGUAGE, self.PROCEDURAL]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Handler_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Handler_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attrs(self):
            return self.getTypedRuleContext(PlPgSqlParser.AttrsContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_handler_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterHandler_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitHandler_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitHandler_name(self)
            else:
                return visitor.visitChildren(self)




    def handler_name(self):

        localctx = PlPgSqlParser.Handler_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_handler_name)
        try:
            self.state = 3191
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3187 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3188 
                self.name()
                self.state = 3189 
                self.attrs(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_inline_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_inline_handlerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INLINE_P(self):
            return self.getToken(PlPgSqlParser.INLINE_P, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_inline_handler

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_inline_handler(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_inline_handler(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_inline_handler(self)
            else:
                return visitor.visitChildren(self)




    def opt_inline_handler(self):

        localctx = PlPgSqlParser.Opt_inline_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_opt_inline_handler)
        try:
            self.state = 3196
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3193
                self.match(self.INLINE_P)
                self.state = 3194 
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Validator_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Validator_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(PlPgSqlParser.VALIDATOR, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_validator_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterValidator_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitValidator_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitValidator_clause(self)
            else:
                return visitor.visitChildren(self)




    def validator_clause(self):

        localctx = PlPgSqlParser.Validator_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_validator_clause)
        try:
            self.state = 3202
            token = self._input.LA(1)
            if token in [self.VALIDATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3198
                self.match(self.VALIDATOR)
                self.state = 3199 
                self.handler_name()

            elif token in [self.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3200
                self.match(self.NO)
                self.state = 3201
                self.match(self.VALIDATOR)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_validatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_validatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def validator_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Validator_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_validator

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_validator(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_validator(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_validator(self)
            else:
                return visitor.visitChildren(self)




    def opt_validator(self):

        localctx = PlPgSqlParser.Opt_validatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_opt_validator)
        try:
            self.state = 3206
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3204 
                self.validator_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropPLangStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropPLangStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropPLangStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropPLangStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropPLangStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropPLangStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropPLangStmt(self):

        localctx = PlPgSqlParser.DropPLangStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_dropPLangStmt)
        try:
            self.state = 3222
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3208
                self.match(self.DROP)
                self.state = 3209 
                self.opt_procedural()
                self.state = 3210
                self.match(self.LANGUAGE)
                self.state = 3211 
                self.colId_or_Sconst()
                self.state = 3212 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3214
                self.match(self.DROP)
                self.state = 3215 
                self.opt_procedural()
                self.state = 3216
                self.match(self.LANGUAGE)
                self.state = 3217
                self.match(self.IF_P)
                self.state = 3218
                self.match(self.EXISTS)
                self.state = 3219 
                self.colId_or_Sconst()
                self.state = 3220 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_proceduralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_proceduralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURAL(self):
            return self.getToken(PlPgSqlParser.PROCEDURAL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_procedural

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_procedural(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_procedural(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_procedural(self)
            else:
                return visitor.visitChildren(self)




    def opt_procedural(self):

        localctx = PlPgSqlParser.Opt_proceduralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_opt_procedural)
        try:
            self.state = 3226
            token = self._input.LA(1)
            if token in [self.PROCEDURAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3224
                self.match(self.PROCEDURAL)

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableSpaceStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateTableSpaceStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def optTableSpaceOwner(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTableSpaceOwnerContext,0)


        def LOCATION(self):
            return self.getToken(PlPgSqlParser.LOCATION, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createTableSpaceStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateTableSpaceStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateTableSpaceStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateTableSpaceStmt(self)
            else:
                return visitor.visitChildren(self)




    def createTableSpaceStmt(self):

        localctx = PlPgSqlParser.CreateTableSpaceStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_createTableSpaceStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3228
            self.match(self.CREATE)
            self.state = 3229
            self.match(self.TABLESPACE)
            self.state = 3230 
            self.name()
            self.state = 3231 
            self.optTableSpaceOwner()
            self.state = 3232
            self.match(self.LOCATION)
            self.state = 3233 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTableSpaceOwnerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptTableSpaceOwnerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OWNER(self):
            return self.getToken(PlPgSqlParser.OWNER, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optTableSpaceOwner

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptTableSpaceOwner(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptTableSpaceOwner(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptTableSpaceOwner(self)
            else:
                return visitor.visitChildren(self)




    def optTableSpaceOwner(self):

        localctx = PlPgSqlParser.OptTableSpaceOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_optTableSpaceOwner)
        try:
            self.state = 3238
            token = self._input.LA(1)
            if token in [self.OWNER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3235
                self.match(self.OWNER)
                self.state = 3236 
                self.name()

            elif token in [self.LOCATION]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTableSpaceStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropTableSpaceStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropTableSpaceStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropTableSpaceStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropTableSpaceStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropTableSpaceStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropTableSpaceStmt(self):

        localctx = PlPgSqlParser.DropTableSpaceStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_dropTableSpaceStmt)
        try:
            self.state = 3248
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3240
                self.match(self.DROP)
                self.state = 3241
                self.match(self.TABLESPACE)
                self.state = 3242 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3243
                self.match(self.DROP)
                self.state = 3244
                self.match(self.TABLESPACE)
                self.state = 3245
                self.match(self.IF_P)
                self.state = 3246
                self.match(self.EXISTS)
                self.state = 3247 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateExtensionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateExtensionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def create_extension_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_extension_opt_listContext,0)


        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createExtensionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateExtensionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateExtensionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateExtensionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createExtensionStmt(self):

        localctx = PlPgSqlParser.CreateExtensionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_createExtensionStmt)
        try:
            self.state = 3269
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3250
                self.match(self.CREATE)
                self.state = 3251
                self.match(self.EXTENSION)
                self.state = 3252 
                self.name()
                self.state = 3254
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 3253
                    self.match(self.WITH)


                self.state = 3256 
                self.create_extension_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3258
                self.match(self.CREATE)
                self.state = 3259
                self.match(self.EXTENSION)
                self.state = 3260
                self.match(self.IF_P)
                self.state = 3261
                self.match(self.NOT)
                self.state = 3262
                self.match(self.EXISTS)
                self.state = 3263 
                self.name()
                self.state = 3265
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 3264
                    self.match(self.WITH)


                self.state = 3267 
                self.create_extension_opt_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_extension_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Create_extension_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def create_extension_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_extension_opt_itemContext,0)


        def create_extension_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_extension_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_create_extension_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreate_extension_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreate_extension_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreate_extension_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def create_extension_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Create_extension_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 428
        self.enterRecursionRule(localctx, 428, self.RULE_create_extension_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 3276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Create_extension_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_create_extension_opt_list)
                    self.state = 3272
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 3273 
                    self.create_extension_opt_item() 
                self.state = 3278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Create_extension_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Create_extension_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def VERSION_P(self):
            return self.getToken(PlPgSqlParser.VERSION_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_create_extension_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreate_extension_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreate_extension_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreate_extension_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def create_extension_opt_item(self):

        localctx = PlPgSqlParser.Create_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_create_extension_opt_item)
        try:
            self.state = 3285
            token = self._input.LA(1)
            if token in [self.SCHEMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3279
                self.match(self.SCHEMA)
                self.state = 3280 
                self.name()

            elif token in [self.VERSION_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3281
                self.match(self.VERSION_P)
                self.state = 3282 
                self.colId_or_Sconst()

            elif token in [self.FROM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3283
                self.match(self.FROM)
                self.state = 3284 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterExtensionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterExtensionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_extension_opt_listContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterExtensionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterExtensionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterExtensionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterExtensionStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterExtensionStmt(self):

        localctx = PlPgSqlParser.AlterExtensionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_alterExtensionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3287
            self.match(self.ALTER)
            self.state = 3288
            self.match(self.EXTENSION)
            self.state = 3289 
            self.name()
            self.state = 3290
            self.match(self.UPDATE)
            self.state = 3291 
            self.alter_extension_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_extension_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_extension_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_extension_opt_itemContext,0)


        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_extension_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_extension_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_extension_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_extension_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_extension_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alter_extension_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alter_extension_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 434
        self.enterRecursionRule(localctx, 434, self.RULE_alter_extension_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 3298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alter_extension_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_extension_opt_list)
                    self.state = 3294
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 3295 
                    self.alter_extension_opt_item() 
                self.state = 3300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_extension_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_extension_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_extension_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_extension_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_extension_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_extension_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def alter_extension_opt_item(self):

        localctx = PlPgSqlParser.Alter_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_alter_extension_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3301
            self.match(self.TO)
            self.state = 3302 
            self.colId_or_Sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterExtensionContentsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterExtensionContentsStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.NameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.NameContext,i)


        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def add_drop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Add_dropContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterExtensionContentsStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterExtensionContentsStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterExtensionContentsStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterExtensionContentsStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterExtensionContentsStmt(self):

        localctx = PlPgSqlParser.AlterExtensionContentsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_alterExtensionContentsStmt)
        try:
            self.state = 3482
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3304
                self.match(self.ALTER)
                self.state = 3305
                self.match(self.EXTENSION)
                self.state = 3306 
                self.name()
                self.state = 3307 
                self.add_drop()
                self.state = 3308
                self.match(self.AGGREGATE)
                self.state = 3309 
                self.func_name()
                self.state = 3310 
                self.aggr_args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3312
                self.match(self.ALTER)
                self.state = 3313
                self.match(self.EXTENSION)
                self.state = 3314 
                self.name()
                self.state = 3315 
                self.add_drop()
                self.state = 3316
                self.match(self.CAST)
                self.state = 3317
                self.match(self.T__7)
                self.state = 3318 
                self.typename()
                self.state = 3319
                self.match(self.AS)
                self.state = 3320 
                self.typename()
                self.state = 3321
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3323
                self.match(self.ALTER)
                self.state = 3324
                self.match(self.EXTENSION)
                self.state = 3325 
                self.name()
                self.state = 3326 
                self.add_drop()
                self.state = 3327
                self.match(self.COLLATION)
                self.state = 3328 
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3330
                self.match(self.ALTER)
                self.state = 3331
                self.match(self.EXTENSION)
                self.state = 3332 
                self.name()
                self.state = 3333 
                self.add_drop()
                self.state = 3334
                self.match(self.CONVERSION_P)
                self.state = 3335 
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3337
                self.match(self.ALTER)
                self.state = 3338
                self.match(self.EXTENSION)
                self.state = 3339 
                self.name()
                self.state = 3340 
                self.add_drop()
                self.state = 3341
                self.match(self.DOMAIN_P)
                self.state = 3342 
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3344
                self.match(self.ALTER)
                self.state = 3345
                self.match(self.EXTENSION)
                self.state = 3346 
                self.name()
                self.state = 3347 
                self.add_drop()
                self.state = 3348
                self.match(self.FUNCTION)
                self.state = 3349 
                self.function_with_argtypes()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3351
                self.match(self.ALTER)
                self.state = 3352
                self.match(self.EXTENSION)
                self.state = 3353 
                self.name()
                self.state = 3354 
                self.add_drop()
                self.state = 3355 
                self.opt_procedural()
                self.state = 3356
                self.match(self.LANGUAGE)
                self.state = 3357 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3359
                self.match(self.ALTER)
                self.state = 3360
                self.match(self.EXTENSION)
                self.state = 3361 
                self.name()
                self.state = 3362 
                self.add_drop()
                self.state = 3363
                self.match(self.OPERATOR)
                self.state = 3364 
                self.any_operator()
                self.state = 3365 
                self.oper_argtypes()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3367
                self.match(self.ALTER)
                self.state = 3368
                self.match(self.EXTENSION)
                self.state = 3369 
                self.name()
                self.state = 3370 
                self.add_drop()
                self.state = 3371
                self.match(self.OPERATOR)
                self.state = 3372
                self.match(self.CLASS)
                self.state = 3373 
                self.any_name()
                self.state = 3374
                self.match(self.USING)
                self.state = 3375 
                self.access_method()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3377
                self.match(self.ALTER)
                self.state = 3378
                self.match(self.EXTENSION)
                self.state = 3379 
                self.name()
                self.state = 3380 
                self.add_drop()
                self.state = 3381
                self.match(self.OPERATOR)
                self.state = 3382
                self.match(self.FAMILY)
                self.state = 3383 
                self.any_name()
                self.state = 3384
                self.match(self.USING)
                self.state = 3385 
                self.access_method()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3387
                self.match(self.ALTER)
                self.state = 3388
                self.match(self.EXTENSION)
                self.state = 3389 
                self.name()
                self.state = 3390 
                self.add_drop()
                self.state = 3391
                self.match(self.SCHEMA)
                self.state = 3392 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3394
                self.match(self.ALTER)
                self.state = 3395
                self.match(self.EXTENSION)
                self.state = 3396 
                self.name()
                self.state = 3397 
                self.add_drop()
                self.state = 3398
                self.match(self.TABLE)
                self.state = 3399 
                self.any_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3401
                self.match(self.ALTER)
                self.state = 3402
                self.match(self.EXTENSION)
                self.state = 3403 
                self.name()
                self.state = 3404 
                self.add_drop()
                self.state = 3405
                self.match(self.TEXT_P)
                self.state = 3406
                self.match(self.SEARCH)
                self.state = 3407
                self.match(self.PARSER)
                self.state = 3408 
                self.any_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3410
                self.match(self.ALTER)
                self.state = 3411
                self.match(self.EXTENSION)
                self.state = 3412 
                self.name()
                self.state = 3413 
                self.add_drop()
                self.state = 3414
                self.match(self.TEXT_P)
                self.state = 3415
                self.match(self.SEARCH)
                self.state = 3416
                self.match(self.DICTIONARY)
                self.state = 3417 
                self.any_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3419
                self.match(self.ALTER)
                self.state = 3420
                self.match(self.EXTENSION)
                self.state = 3421 
                self.name()
                self.state = 3422 
                self.add_drop()
                self.state = 3423
                self.match(self.TEXT_P)
                self.state = 3424
                self.match(self.SEARCH)
                self.state = 3425
                self.match(self.TEMPLATE)
                self.state = 3426 
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3428
                self.match(self.ALTER)
                self.state = 3429
                self.match(self.EXTENSION)
                self.state = 3430 
                self.name()
                self.state = 3431 
                self.add_drop()
                self.state = 3432
                self.match(self.TEXT_P)
                self.state = 3433
                self.match(self.SEARCH)
                self.state = 3434
                self.match(self.CONFIGURATION)
                self.state = 3435 
                self.any_name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3437
                self.match(self.ALTER)
                self.state = 3438
                self.match(self.EXTENSION)
                self.state = 3439 
                self.name()
                self.state = 3440 
                self.add_drop()
                self.state = 3441
                self.match(self.SEQUENCE)
                self.state = 3442 
                self.any_name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3444
                self.match(self.ALTER)
                self.state = 3445
                self.match(self.EXTENSION)
                self.state = 3446 
                self.name()
                self.state = 3447 
                self.add_drop()
                self.state = 3448
                self.match(self.VIEW)
                self.state = 3449 
                self.any_name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3451
                self.match(self.ALTER)
                self.state = 3452
                self.match(self.EXTENSION)
                self.state = 3453 
                self.name()
                self.state = 3454 
                self.add_drop()
                self.state = 3455
                self.match(self.FOREIGN)
                self.state = 3456
                self.match(self.TABLE)
                self.state = 3457 
                self.any_name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3459
                self.match(self.ALTER)
                self.state = 3460
                self.match(self.EXTENSION)
                self.state = 3461 
                self.name()
                self.state = 3462 
                self.add_drop()
                self.state = 3463
                self.match(self.FOREIGN)
                self.state = 3464
                self.match(self.DATA_P)
                self.state = 3465
                self.match(self.WRAPPER)
                self.state = 3466 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3468
                self.match(self.ALTER)
                self.state = 3469
                self.match(self.EXTENSION)
                self.state = 3470 
                self.name()
                self.state = 3471 
                self.add_drop()
                self.state = 3472
                self.match(self.SERVER)
                self.state = 3473 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3475
                self.match(self.ALTER)
                self.state = 3476
                self.match(self.EXTENSION)
                self.state = 3477 
                self.name()
                self.state = 3478 
                self.add_drop()
                self.state = 3479
                self.match(self.TYPE_P)
                self.state = 3480 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def opt_fdw_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_fdw_optionsContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_generic_optionsContext,0)


        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def createFdwStmt(self):

        localctx = PlPgSqlParser.CreateFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_createFdwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3484
            self.match(self.CREATE)
            self.state = 3485
            self.match(self.FOREIGN)
            self.state = 3486
            self.match(self.DATA_P)
            self.state = 3487
            self.match(self.WRAPPER)
            self.state = 3488 
            self.name()
            self.state = 3489 
            self.opt_fdw_options()
            self.state = 3490 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fdw_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Fdw_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(PlPgSqlParser.VALIDATOR, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Handler_nameContext,0)


        def HANDLER(self):
            return self.getToken(PlPgSqlParser.HANDLER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_fdw_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFdw_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFdw_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFdw_option(self)
            else:
                return visitor.visitChildren(self)




    def fdw_option(self):

        localctx = PlPgSqlParser.Fdw_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_fdw_option)
        try:
            self.state = 3500
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3492
                self.match(self.HANDLER)
                self.state = 3493 
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3494
                self.match(self.NO)
                self.state = 3495
                self.match(self.HANDLER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3496
                self.match(self.VALIDATOR)
                self.state = 3497 
                self.handler_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3498
                self.match(self.NO)
                self.state = 3499
                self.match(self.VALIDATOR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fdw_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Fdw_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fdw_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Fdw_optionContext,0)


        def fdw_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_fdw_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFdw_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFdw_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFdw_options(self)
            else:
                return visitor.visitChildren(self)



    def fdw_options(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Fdw_optionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 444
        self.enterRecursionRule(localctx, 444, self.RULE_fdw_options, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3503 
            self.fdw_option()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Fdw_optionsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fdw_options)
                    self.state = 3505
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3506 
                    self.fdw_option() 
                self.state = 3511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_fdw_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_fdw_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fdw_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_fdw_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_fdw_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_fdw_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_fdw_options(self)
            else:
                return visitor.visitChildren(self)




    def opt_fdw_options(self):

        localctx = PlPgSqlParser.Opt_fdw_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_opt_fdw_options)
        try:
            self.state = 3514
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3512 
                self.fdw_options(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropFdwStmt(self):

        localctx = PlPgSqlParser.DropFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_dropFdwStmt)
        try:
            self.state = 3532
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3516
                self.match(self.DROP)
                self.state = 3517
                self.match(self.FOREIGN)
                self.state = 3518
                self.match(self.DATA_P)
                self.state = 3519
                self.match(self.WRAPPER)
                self.state = 3520 
                self.name()
                self.state = 3521 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3523
                self.match(self.DROP)
                self.state = 3524
                self.match(self.FOREIGN)
                self.state = 3525
                self.match(self.DATA_P)
                self.state = 3526
                self.match(self.WRAPPER)
                self.state = 3527
                self.match(self.IF_P)
                self.state = 3528
                self.match(self.EXISTS)
                self.state = 3529 
                self.name()
                self.state = 3530 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_fdw_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_fdw_optionsContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_optionsContext,0)


        def fdw_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Fdw_optionsContext,0)


        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterFdwStmt(self):

        localctx = PlPgSqlParser.AlterFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_alterFdwStmt)
        try:
            self.state = 3549
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3534
                self.match(self.ALTER)
                self.state = 3535
                self.match(self.FOREIGN)
                self.state = 3536
                self.match(self.DATA_P)
                self.state = 3537
                self.match(self.WRAPPER)
                self.state = 3538 
                self.name()
                self.state = 3539 
                self.opt_fdw_options()
                self.state = 3540 
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3542
                self.match(self.ALTER)
                self.state = 3543
                self.match(self.FOREIGN)
                self.state = 3544
                self.match(self.DATA_P)
                self.state = 3545
                self.match(self.WRAPPER)
                self.state = 3546 
                self.name()
                self.state = 3547 
                self.fdw_options(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_generic_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Create_generic_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_listContext,0)


        def OPTIONS(self):
            return self.getToken(PlPgSqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_create_generic_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreate_generic_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreate_generic_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreate_generic_options(self)
            else:
                return visitor.visitChildren(self)




    def create_generic_options(self):

        localctx = PlPgSqlParser.Create_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_create_generic_options)
        try:
            self.state = 3557
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3551
                self.match(self.OPTIONS)
                self.state = 3552
                self.match(self.T__7)
                self.state = 3553 
                self.generic_option_list(0)
                self.state = 3554
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Generic_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_elemContext,0)


        def generic_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_generic_option_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGeneric_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGeneric_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGeneric_option_list(self)
            else:
                return visitor.visitChildren(self)



    def generic_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Generic_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 454
        self.enterRecursionRule(localctx, 454, self.RULE_generic_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3560 
            self.generic_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Generic_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_generic_option_list)
                    self.state = 3562
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3563
                    self.match(self.T__12)
                    self.state = 3564 
                    self.generic_option_elem() 
                self.state = 3569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_generic_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_generic_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_option_listContext,0)


        def OPTIONS(self):
            return self.getToken(PlPgSqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_generic_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_generic_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_generic_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_generic_options(self)
            else:
                return visitor.visitChildren(self)




    def alter_generic_options(self):

        localctx = PlPgSqlParser.Alter_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_alter_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.match(self.OPTIONS)
            self.state = 3571
            self.match(self.T__7)
            self.state = 3572 
            self.alter_generic_option_list(0)
            self.state = 3573
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_generic_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_generic_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_option_listContext,0)


        def alter_generic_option_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_option_elemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_generic_option_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_generic_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_generic_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_generic_option_list(self)
            else:
                return visitor.visitChildren(self)



    def alter_generic_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alter_generic_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 458
        self.enterRecursionRule(localctx, 458, self.RULE_alter_generic_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576 
            self.alter_generic_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alter_generic_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_generic_option_list)
                    self.state = 3578
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3579
                    self.match(self.T__12)
                    self.state = 3580 
                    self.alter_generic_option_elem() 
                self.state = 3585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_generic_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alter_generic_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def generic_option_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_elemContext,0)


        def generic_option_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_nameContext,0)


        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alter_generic_option_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlter_generic_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlter_generic_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlter_generic_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def alter_generic_option_elem(self):

        localctx = PlPgSqlParser.Alter_generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_alter_generic_option_elem)
        try:
            self.state = 3593
            token = self._input.LA(1)
            if token in [self.ALL, self.ANALYSE, self.ANALYZE, self.AND, self.ANY, self.ARRAY, self.AS, self.ASC, self.ASYMMETRIC, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BOTH, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.CHECK, self.COALESCE, self.COLLATE, self.COLLATION, self.COLUMN, self.CONCURRENTLY, self.CONSTRAINT, self.CREATE, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DEFAULT, self.DEFERRABLE, self.DESC, self.DISTINCT, self.DO, self.ELSE, self.END_P, self.EXCEPT, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FETCH, self.FLOAT_P, self.FOR, self.FOREIGN, self.FREEZE, self.FROM, self.FULL, self.GRANT, self.GREATEST, self.GROUP_P, self.HAVING, self.ILIKE, self.IN_P, self.INITIALLY, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERSECT, self.INTERVAL, self.INTO, self.IS, self.ISNULL, self.JOIN, self.LEADING, self.LEAST, self.LEFT, self.LIKE, self.LIMIT, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOT, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OFFSET, self.ON, self.ONLY, self.OR, self.ORDER, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.PLACING, self.POSITION, self.PRECISION, self.PRIMARY, self.REAL, self.REFERENCES, self.RETURNING, self.RIGHT, self.ROW, self.SELECT, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SOME, self.SUBSTRING, self.SYMMETRIC, self.TABLE, self.THEN, self.TIME, self.TIMESTAMP, self.TO, self.TRAILING, self.TREAT, self.TRIM, self.TRUE_P, self.UNION, self.UNIQUE, self.USER, self.USING, self.VALUES, self.VARCHAR, self.VARIADIC, self.VERBOSE, self.WHEN, self.WHERE, self.WINDOW, self.WITH, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3586 
                self.generic_option_elem()

            elif token in [self.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3587
                self.match(self.SET)
                self.state = 3588 
                self.generic_option_elem()

            elif token in [self.ADD_P]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3589
                self.match(self.ADD_P)
                self.state = 3590 
                self.generic_option_elem()

            elif token in [self.DROP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3591
                self.match(self.DROP)
                self.state = 3592 
                self.generic_option_name()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Generic_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_nameContext,0)


        def generic_option_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Generic_option_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_generic_option_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGeneric_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGeneric_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGeneric_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_elem(self):

        localctx = PlPgSqlParser.Generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_generic_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3595 
            self.generic_option_name()
            self.state = 3596 
            self.generic_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Generic_option_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_generic_option_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGeneric_option_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGeneric_option_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGeneric_option_name(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_name(self):

        localctx = PlPgSqlParser.Generic_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_generic_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3598 
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Generic_option_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_generic_option_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGeneric_option_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGeneric_option_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGeneric_option_arg(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_arg(self):

        localctx = PlPgSqlParser.Generic_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_generic_option_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3600 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def create_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_generic_optionsContext,0)


        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.NameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.NameContext,i)


        def opt_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_typeContext,0)


        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def opt_foreign_server_version(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def createForeignServerStmt(self):

        localctx = PlPgSqlParser.CreateForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_createForeignServerStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3602
            self.match(self.CREATE)
            self.state = 3603
            self.match(self.SERVER)
            self.state = 3604 
            self.name()
            self.state = 3605 
            self.opt_type()
            self.state = 3606 
            self.opt_foreign_server_version()
            self.state = 3607
            self.match(self.FOREIGN)
            self.state = 3608
            self.match(self.DATA_P)
            self.state = 3609
            self.match(self.WRAPPER)
            self.state = 3610 
            self.name()
            self.state = 3611 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_type(self)
            else:
                return visitor.visitChildren(self)




    def opt_type(self):

        localctx = PlPgSqlParser.Opt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_opt_type)
        try:
            self.state = 3616
            token = self._input.LA(1)
            if token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3613
                self.match(self.TYPE_P)
                self.state = 3614 
                self.sConst()

            elif token in [self.FOREIGN, self.VERSION_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_server_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Foreign_server_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def VERSION_P(self):
            return self.getToken(PlPgSqlParser.VERSION_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_foreign_server_version

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterForeign_server_version(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitForeign_server_version(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitForeign_server_version(self)
            else:
                return visitor.visitChildren(self)




    def foreign_server_version(self):

        localctx = PlPgSqlParser.Foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_foreign_server_version)
        try:
            self.state = 3622
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3618
                self.match(self.VERSION_P)
                self.state = 3619 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3620
                self.match(self.VERSION_P)
                self.state = 3621
                self.match(self.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_foreign_server_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_foreign_server_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(PlPgSqlParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_foreign_server_version

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_foreign_server_version(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_foreign_server_version(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_foreign_server_version(self)
            else:
                return visitor.visitChildren(self)




    def opt_foreign_server_version(self):

        localctx = PlPgSqlParser.Opt_foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_opt_foreign_server_version)
        try:
            self.state = 3626
            token = self._input.LA(1)
            if token in [self.VERSION_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3624 
                self.foreign_server_version()

            elif token in [self.FOREIGN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropForeignServerStmt(self):

        localctx = PlPgSqlParser.DropForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_dropForeignServerStmt)
        try:
            self.state = 3640
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3628
                self.match(self.DROP)
                self.state = 3629
                self.match(self.SERVER)
                self.state = 3630 
                self.name()
                self.state = 3631 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3633
                self.match(self.DROP)
                self.state = 3634
                self.match(self.SERVER)
                self.state = 3635
                self.match(self.IF_P)
                self.state = 3636
                self.match(self.EXISTS)
                self.state = 3637 
                self.name()
                self.state = 3638 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(PlPgSqlParser.Foreign_server_versionContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_optionsContext,0)


        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignServerStmt(self):

        localctx = PlPgSqlParser.AlterForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_alterForeignServerStmt)
        try:
            self.state = 3658
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3642
                self.match(self.ALTER)
                self.state = 3643
                self.match(self.SERVER)
                self.state = 3644 
                self.name()
                self.state = 3645 
                self.foreign_server_version()
                self.state = 3646 
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3648
                self.match(self.ALTER)
                self.state = 3649
                self.match(self.SERVER)
                self.state = 3650 
                self.name()
                self.state = 3651 
                self.foreign_server_version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3653
                self.match(self.ALTER)
                self.state = 3654
                self.match(self.SERVER)
                self.state = 3655 
                self.name()
                self.state = 3656 
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateForeignTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateForeignTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def create_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_generic_optionsContext,0)


        def optforeigntableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptforeigntableElementListContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createForeignTableStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateForeignTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateForeignTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateForeignTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def createForeignTableStmt(self):

        localctx = PlPgSqlParser.CreateForeignTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_createForeignTableStmt)
        try:
            self.state = 3681
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3660
                self.match(self.CREATE)
                self.state = 3661
                self.match(self.FOREIGN)
                self.state = 3662
                self.match(self.TABLE)
                self.state = 3663 
                self.qualified_name()
                self.state = 3664 
                self.optforeigntableElementList()
                self.state = 3665
                self.match(self.SERVER)
                self.state = 3666 
                self.name()
                self.state = 3667 
                self.create_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3669
                self.match(self.CREATE)
                self.state = 3670
                self.match(self.FOREIGN)
                self.state = 3671
                self.match(self.TABLE)
                self.state = 3672
                self.match(self.IF_P)
                self.state = 3673
                self.match(self.NOT)
                self.state = 3674
                self.match(self.EXISTS)
                self.state = 3675 
                self.qualified_name()
                self.state = 3676 
                self.optforeigntableElementList()
                self.state = 3677
                self.match(self.SERVER)
                self.state = 3678 
                self.name()
                self.state = 3679 
                self.create_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptforeigntableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptforeigntableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreigntableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ForeigntableElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optforeigntableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptforeigntableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptforeigntableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptforeigntableElementList(self)
            else:
                return visitor.visitChildren(self)




    def optforeigntableElementList(self):

        localctx = PlPgSqlParser.OptforeigntableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_optforeigntableElementList)
        try:
            self.state = 3689
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3683
                self.match(self.T__7)
                self.state = 3684 
                self.foreigntableElementList(0)
                self.state = 3685
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3687
                self.match(self.T__7)
                self.state = 3688
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForeigntableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ForeigntableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreigntableElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ForeigntableElementListContext,0)


        def foreigntableElement(self):
            return self.getTypedRuleContext(PlPgSqlParser.ForeigntableElementContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_foreigntableElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterForeigntableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitForeigntableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitForeigntableElementList(self)
            else:
                return visitor.visitChildren(self)



    def foreigntableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.ForeigntableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 484
        self.enterRecursionRule(localctx, 484, self.RULE_foreigntableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3692 
            self.foreigntableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.ForeigntableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_foreigntableElementList)
                    self.state = 3694
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3695
                    self.match(self.T__12)
                    self.state = 3696 
                    self.foreigntableElement() 
                self.state = 3701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ForeigntableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ForeigntableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnDef(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_foreigntableElement

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterForeigntableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitForeigntableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitForeigntableElement(self)
            else:
                return visitor.visitChildren(self)




    def foreigntableElement(self):

        localctx = PlPgSqlParser.ForeigntableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_foreigntableElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3702 
            self.columnDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterForeignTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterForeignTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def alter_table_cmds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_table_cmdsContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterForeignTableStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterForeignTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterForeignTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterForeignTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignTableStmt(self):

        localctx = PlPgSqlParser.AlterForeignTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_alterForeignTableStmt)
        try:
            self.state = 3718
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3704
                self.match(self.ALTER)
                self.state = 3705
                self.match(self.FOREIGN)
                self.state = 3706
                self.match(self.TABLE)
                self.state = 3707 
                self.relation_expr()
                self.state = 3708 
                self.alter_table_cmds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3710
                self.match(self.ALTER)
                self.state = 3711
                self.match(self.FOREIGN)
                self.state = 3712
                self.match(self.TABLE)
                self.state = 3713
                self.match(self.IF_P)
                self.state = 3714
                self.match(self.EXISTS)
                self.state = 3715 
                self.relation_expr()
                self.state = 3716 
                self.alter_table_cmds(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def MAPPING(self):
            return self.getToken(PlPgSqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PlPgSqlParser.Auth_identContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_generic_optionsContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def createUserMappingStmt(self):

        localctx = PlPgSqlParser.CreateUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_createUserMappingStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(self.CREATE)
            self.state = 3721
            self.match(self.USER)
            self.state = 3722
            self.match(self.MAPPING)
            self.state = 3723
            self.match(self.FOR)
            self.state = 3724 
            self.auth_ident()
            self.state = 3725
            self.match(self.SERVER)
            self.state = 3726 
            self.name()
            self.state = 3727 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auth_identContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Auth_identContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def CURRENT_USER(self):
            return self.getToken(PlPgSqlParser.CURRENT_USER, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_auth_ident

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAuth_ident(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAuth_ident(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAuth_ident(self)
            else:
                return visitor.visitChildren(self)




    def auth_ident(self):

        localctx = PlPgSqlParser.Auth_identContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_auth_ident)
        try:
            self.state = 3732
            token = self._input.LA(1)
            if token in [self.CURRENT_USER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3729
                self.match(self.CURRENT_USER)

            elif token in [self.USER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3730
                self.match(self.USER)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3731 
                self.roleId()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def MAPPING(self):
            return self.getToken(PlPgSqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PlPgSqlParser.Auth_identContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropUserMappingStmt(self):

        localctx = PlPgSqlParser.DropUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_dropUserMappingStmt)
        try:
            self.state = 3752
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3734
                self.match(self.DROP)
                self.state = 3735
                self.match(self.USER)
                self.state = 3736
                self.match(self.MAPPING)
                self.state = 3737
                self.match(self.FOR)
                self.state = 3738 
                self.auth_ident()
                self.state = 3739
                self.match(self.SERVER)
                self.state = 3740 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3742
                self.match(self.DROP)
                self.state = 3743
                self.match(self.USER)
                self.state = 3744
                self.match(self.MAPPING)
                self.state = 3745
                self.match(self.IF_P)
                self.state = 3746
                self.match(self.EXISTS)
                self.state = 3747
                self.match(self.FOR)
                self.state = 3748 
                self.auth_ident()
                self.state = 3749
                self.match(self.SERVER)
                self.state = 3750 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(PlPgSqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PlPgSqlParser.Auth_identContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_generic_optionsContext,0)


        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserMappingStmt(self):

        localctx = PlPgSqlParser.AlterUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_alterUserMappingStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3754
            self.match(self.ALTER)
            self.state = 3755
            self.match(self.USER)
            self.state = 3756
            self.match(self.MAPPING)
            self.state = 3757
            self.match(self.FOR)
            self.state = 3758 
            self.auth_ident()
            self.state = 3759
            self.match(self.SERVER)
            self.state = 3760 
            self.name()
            self.state = 3761 
            self.alter_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTrigStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateTrigStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def triggerForSpec(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerForSpecContext,0)


        def triggerFuncArgs(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerFuncArgsContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def EXECUTE(self):
            return self.getToken(PlPgSqlParser.EXECUTE, 0)

        def optConstrFromTable(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptConstrFromTableContext,0)


        def PROCEDURE(self):
            return self.getToken(PlPgSqlParser.PROCEDURE, 0)

        def triggerEvents(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerEventsContext,0)


        def EACH(self):
            return self.getToken(PlPgSqlParser.EACH, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def TRIGGER(self):
            return self.getToken(PlPgSqlParser.TRIGGER, 0)

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttributeSpecContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def triggerActionTime(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerActionTimeContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def triggerWhen(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerWhenContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def AFTER(self):
            return self.getToken(PlPgSqlParser.AFTER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createTrigStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateTrigStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateTrigStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateTrigStmt(self)
            else:
                return visitor.visitChildren(self)




    def createTrigStmt(self):

        localctx = PlPgSqlParser.CreateTrigStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_createTrigStmt)
        try:
            self.state = 3800
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3763
                self.match(self.CREATE)
                self.state = 3764
                self.match(self.TRIGGER)
                self.state = 3765 
                self.name()
                self.state = 3766 
                self.triggerActionTime()
                self.state = 3767 
                self.triggerEvents(0)
                self.state = 3768
                self.match(self.ON)
                self.state = 3769 
                self.qualified_name()
                self.state = 3770 
                self.triggerForSpec()
                self.state = 3771 
                self.triggerWhen()
                self.state = 3772
                self.match(self.EXECUTE)
                self.state = 3773
                self.match(self.PROCEDURE)
                self.state = 3774 
                self.func_name()
                self.state = 3775
                self.match(self.T__7)
                self.state = 3776 
                self.triggerFuncArgs(0)
                self.state = 3777
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3779
                self.match(self.CREATE)
                self.state = 3780
                self.match(self.CONSTRAINT)
                self.state = 3781
                self.match(self.TRIGGER)
                self.state = 3782 
                self.name()
                self.state = 3783
                self.match(self.AFTER)
                self.state = 3784 
                self.triggerEvents(0)
                self.state = 3785
                self.match(self.ON)
                self.state = 3786 
                self.qualified_name()
                self.state = 3787 
                self.optConstrFromTable()
                self.state = 3788 
                self.constraintAttributeSpec(0)
                self.state = 3789
                self.match(self.FOR)
                self.state = 3790
                self.match(self.EACH)
                self.state = 3791
                self.match(self.ROW)
                self.state = 3792 
                self.triggerWhen()
                self.state = 3793
                self.match(self.EXECUTE)
                self.state = 3794
                self.match(self.PROCEDURE)
                self.state = 3795 
                self.func_name()
                self.state = 3796
                self.match(self.T__7)
                self.state = 3797 
                self.triggerFuncArgs(0)
                self.state = 3798
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerActionTimeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerActionTimeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSTEAD(self):
            return self.getToken(PlPgSqlParser.INSTEAD, 0)

        def BEFORE(self):
            return self.getToken(PlPgSqlParser.BEFORE, 0)

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def AFTER(self):
            return self.getToken(PlPgSqlParser.AFTER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerActionTime

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerActionTime(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerActionTime(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerActionTime(self)
            else:
                return visitor.visitChildren(self)




    def triggerActionTime(self):

        localctx = PlPgSqlParser.TriggerActionTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_triggerActionTime)
        try:
            self.state = 3806
            token = self._input.LA(1)
            if token in [self.BEFORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3802
                self.match(self.BEFORE)

            elif token in [self.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3803
                self.match(self.AFTER)

            elif token in [self.INSTEAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3804
                self.match(self.INSTEAD)
                self.state = 3805
                self.match(self.OF)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerEventsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerEventsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(PlPgSqlParser.OR, 0)

        def triggerOneEvent(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerOneEventContext,0)


        def triggerEvents(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerEventsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerEvents

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerEvents(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerEvents(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerEvents(self)
            else:
                return visitor.visitChildren(self)



    def triggerEvents(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TriggerEventsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 502
        self.enterRecursionRule(localctx, 502, self.RULE_triggerEvents, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3809 
            self.triggerOneEvent()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.TriggerEventsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_triggerEvents)
                    self.state = 3811
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3812
                    self.match(self.OR)
                    self.state = 3813 
                    self.triggerOneEvent() 
                self.state = 3818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TriggerOneEventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerOneEventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def DELETE_P(self):
            return self.getToken(PlPgSqlParser.DELETE_P, 0)

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def INSERT(self):
            return self.getToken(PlPgSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def TRUNCATE(self):
            return self.getToken(PlPgSqlParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerOneEvent

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerOneEvent(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerOneEvent(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerOneEvent(self)
            else:
                return visitor.visitChildren(self)




    def triggerOneEvent(self):

        localctx = PlPgSqlParser.TriggerOneEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_triggerOneEvent)
        try:
            self.state = 3826
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3819
                self.match(self.INSERT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3820
                self.match(self.DELETE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3821
                self.match(self.UPDATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3822
                self.match(self.UPDATE)
                self.state = 3823
                self.match(self.OF)
                self.state = 3824 
                self.columnList(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3825
                self.match(self.TRUNCATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerForSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def triggerForType(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerForTypeContext,0)


        def triggerForOptEach(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerForOptEachContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerForSpec

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerForSpec(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerForSpec(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerForSpec(self)
            else:
                return visitor.visitChildren(self)




    def triggerForSpec(self):

        localctx = PlPgSqlParser.TriggerForSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_triggerForSpec)
        try:
            self.state = 3833
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3828
                self.match(self.FOR)
                self.state = 3829 
                self.triggerForOptEach()
                self.state = 3830 
                self.triggerForType()

            elif token in [self.EXECUTE, self.WHEN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForOptEachContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerForOptEachContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EACH(self):
            return self.getToken(PlPgSqlParser.EACH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerForOptEach

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerForOptEach(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerForOptEach(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerForOptEach(self)
            else:
                return visitor.visitChildren(self)




    def triggerForOptEach(self):

        localctx = PlPgSqlParser.TriggerForOptEachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_triggerForOptEach)
        try:
            self.state = 3837
            token = self._input.LA(1)
            if token in [self.EACH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3835
                self.match(self.EACH)

            elif token in [self.ROW, self.STATEMENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerForTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATEMENT(self):
            return self.getToken(PlPgSqlParser.STATEMENT, 0)

        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerForType

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerForType(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerForType(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerForType(self)
            else:
                return visitor.visitChildren(self)




    def triggerForType(self):

        localctx = PlPgSqlParser.TriggerForTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_triggerForType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3839
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ROW or _la==PlPgSqlParser.STATEMENT):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerWhenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerWhenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def WHEN(self):
            return self.getToken(PlPgSqlParser.WHEN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerWhen

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerWhen(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerWhen(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerWhen(self)
            else:
                return visitor.visitChildren(self)




    def triggerWhen(self):

        localctx = PlPgSqlParser.TriggerWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_triggerWhen)
        try:
            self.state = 3847
            token = self._input.LA(1)
            if token in [self.WHEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3841
                self.match(self.WHEN)
                self.state = 3842
                self.match(self.T__7)
                self.state = 3843 
                self.a_expr(0)
                self.state = 3844
                self.match(self.T__13)

            elif token in [self.EXECUTE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerFuncArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerFuncArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def triggerFuncArg(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerFuncArgContext,0)


        def triggerFuncArgs(self):
            return self.getTypedRuleContext(PlPgSqlParser.TriggerFuncArgsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerFuncArgs

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerFuncArgs(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerFuncArgs(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerFuncArgs(self)
            else:
                return visitor.visitChildren(self)



    def triggerFuncArgs(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TriggerFuncArgsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 514
        self.enterRecursionRule(localctx, 514, self.RULE_triggerFuncArgs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3852
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 3850 
                self.triggerFuncArg()
                pass

            elif la_ == 2:
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.TriggerFuncArgsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_triggerFuncArgs)
                    self.state = 3854
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 3855
                    self.match(self.T__12)
                    self.state = 3856 
                    self.triggerFuncArg() 
                self.state = 3861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TriggerFuncArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TriggerFuncArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def FCONST(self):
            return self.getToken(PlPgSqlParser.FCONST, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_triggerFuncArg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTriggerFuncArg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTriggerFuncArg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTriggerFuncArg(self)
            else:
                return visitor.visitChildren(self)




    def triggerFuncArg(self):

        localctx = PlPgSqlParser.TriggerFuncArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_triggerFuncArg)
        try:
            self.state = 3866
            token = self._input.LA(1)
            if token in [self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3862 
                self.iConst()

            elif token in [self.FCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3863
                self.match(self.FCONST)

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3864 
                self.sConst()

            elif token in [self.ALL, self.ANALYSE, self.ANALYZE, self.AND, self.ANY, self.ARRAY, self.AS, self.ASC, self.ASYMMETRIC, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BOTH, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.CHECK, self.COALESCE, self.COLLATE, self.COLLATION, self.COLUMN, self.CONCURRENTLY, self.CONSTRAINT, self.CREATE, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DEFAULT, self.DEFERRABLE, self.DESC, self.DISTINCT, self.DO, self.ELSE, self.END_P, self.EXCEPT, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FETCH, self.FLOAT_P, self.FOR, self.FOREIGN, self.FREEZE, self.FROM, self.FULL, self.GRANT, self.GREATEST, self.GROUP_P, self.HAVING, self.ILIKE, self.IN_P, self.INITIALLY, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERSECT, self.INTERVAL, self.INTO, self.IS, self.ISNULL, self.JOIN, self.LEADING, self.LEAST, self.LEFT, self.LIKE, self.LIMIT, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOT, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OFFSET, self.ON, self.ONLY, self.OR, self.ORDER, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.PLACING, self.POSITION, self.PRECISION, self.PRIMARY, self.REAL, self.REFERENCES, self.RETURNING, self.RIGHT, self.ROW, self.SELECT, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SOME, self.SUBSTRING, self.SYMMETRIC, self.TABLE, self.THEN, self.TIME, self.TIMESTAMP, self.TO, self.TRAILING, self.TREAT, self.TRIM, self.TRUE_P, self.UNION, self.UNIQUE, self.USER, self.USING, self.VALUES, self.VARCHAR, self.VARIADIC, self.VERBOSE, self.WHEN, self.WHERE, self.WINDOW, self.WITH, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3865 
                self.colLabel()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptConstrFromTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptConstrFromTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optConstrFromTable

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptConstrFromTable(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptConstrFromTable(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptConstrFromTable(self)
            else:
                return visitor.visitChildren(self)




    def optConstrFromTable(self):

        localctx = PlPgSqlParser.OptConstrFromTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_optConstrFromTable)
        try:
            self.state = 3871
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3868
                self.match(self.FROM)
                self.state = 3869 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintAttributeSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstraintAttributeSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttributeSpecContext,0)


        def constraintAttributeElem(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttributeElemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraintAttributeSpec

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraintAttributeSpec(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraintAttributeSpec(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraintAttributeSpec(self)
            else:
                return visitor.visitChildren(self)



    def constraintAttributeSpec(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.ConstraintAttributeSpecContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 520
        self.enterRecursionRule(localctx, 520, self.RULE_constraintAttributeSpec, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 3878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.ConstraintAttributeSpecContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_constraintAttributeSpec)
                    self.state = 3874
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3875 
                    self.constraintAttributeElem() 
                self.state = 3880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstraintAttributeElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstraintAttributeElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(PlPgSqlParser.DEFERRED, 0)

        def VALID(self):
            return self.getToken(PlPgSqlParser.VALID, 0)

        def DEFERRABLE(self):
            return self.getToken(PlPgSqlParser.DEFERRABLE, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def INHERIT(self):
            return self.getToken(PlPgSqlParser.INHERIT, 0)

        def IMMEDIATE(self):
            return self.getToken(PlPgSqlParser.IMMEDIATE, 0)

        def INITIALLY(self):
            return self.getToken(PlPgSqlParser.INITIALLY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constraintAttributeElem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstraintAttributeElem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstraintAttributeElem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstraintAttributeElem(self)
            else:
                return visitor.visitChildren(self)




    def constraintAttributeElem(self):

        localctx = PlPgSqlParser.ConstraintAttributeElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_constraintAttributeElem)
        try:
            self.state = 3892
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3881
                self.match(self.NOT)
                self.state = 3882
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3883
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3884
                self.match(self.INITIALLY)
                self.state = 3885
                self.match(self.IMMEDIATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3886
                self.match(self.INITIALLY)
                self.state = 3887
                self.match(self.DEFERRED)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3888
                self.match(self.NOT)
                self.state = 3889
                self.match(self.VALID)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3890
                self.match(self.NO)
                self.state = 3891
                self.match(self.INHERIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTrigStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropTrigStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def TRIGGER(self):
            return self.getToken(PlPgSqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropTrigStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropTrigStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropTrigStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropTrigStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropTrigStmt(self):

        localctx = PlPgSqlParser.DropTrigStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_dropTrigStmt)
        try:
            self.state = 3910
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3894
                self.match(self.DROP)
                self.state = 3895
                self.match(self.TRIGGER)
                self.state = 3896 
                self.name()
                self.state = 3897
                self.match(self.ON)
                self.state = 3898 
                self.any_name()
                self.state = 3899 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3901
                self.match(self.DROP)
                self.state = 3902
                self.match(self.TRIGGER)
                self.state = 3903
                self.match(self.IF_P)
                self.state = 3904
                self.match(self.EXISTS)
                self.state = 3905 
                self.name()
                self.state = 3906
                self.match(self.ON)
                self.state = 3907 
                self.any_name()
                self.state = 3908 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateAssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateAssertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(PlPgSqlParser.CHECK, 0)

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstraintAttributeSpecContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def ASSERTION(self):
            return self.getToken(PlPgSqlParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createAssertStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateAssertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateAssertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateAssertStmt(self)
            else:
                return visitor.visitChildren(self)




    def createAssertStmt(self):

        localctx = PlPgSqlParser.CreateAssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_createAssertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3912
            self.match(self.CREATE)
            self.state = 3913
            self.match(self.ASSERTION)
            self.state = 3914 
            self.name()
            self.state = 3915
            self.match(self.CHECK)
            self.state = 3916
            self.match(self.T__7)
            self.state = 3917 
            self.a_expr(0)
            self.state = 3918
            self.match(self.T__13)
            self.state = 3919 
            self.constraintAttributeSpec(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropAssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropAssertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(PlPgSqlParser.ASSERTION, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropAssertStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropAssertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropAssertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropAssertStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropAssertStmt(self):

        localctx = PlPgSqlParser.DropAssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_dropAssertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3921
            self.match(self.DROP)
            self.state = 3922
            self.match(self.ASSERTION)
            self.state = 3923 
            self.name()
            self.state = 3924 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefineStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DefineStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def old_aggr_definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Old_aggr_definitionContext,0)


        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,i)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def RANGE(self):
            return self.getToken(PlPgSqlParser.RANGE, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def opttableFuncElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.OpttableFuncElementListContext,0)


        def ENUM_P(self):
            return self.getToken(PlPgSqlParser.ENUM_P, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def opt_enum_val_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_enum_val_listContext,0)


        def definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefinitionContext,0)


        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_defineStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefineStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefineStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefineStmt(self)
            else:
                return visitor.visitChildren(self)




    def defineStmt(self):

        localctx = PlPgSqlParser.DefineStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_defineStmt)
        try:
            self.state = 4013
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3926
                self.match(self.CREATE)
                self.state = 3927
                self.match(self.AGGREGATE)
                self.state = 3928 
                self.func_name()
                self.state = 3929 
                self.aggr_args()
                self.state = 3930 
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3932
                self.match(self.CREATE)
                self.state = 3933
                self.match(self.AGGREGATE)
                self.state = 3934 
                self.func_name()
                self.state = 3935 
                self.old_aggr_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3937
                self.match(self.CREATE)
                self.state = 3938
                self.match(self.OPERATOR)
                self.state = 3939 
                self.any_operator()
                self.state = 3940 
                self.definition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3942
                self.match(self.CREATE)
                self.state = 3943
                self.match(self.TYPE_P)
                self.state = 3944 
                self.any_name()
                self.state = 3945 
                self.definition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3947
                self.match(self.CREATE)
                self.state = 3948
                self.match(self.TYPE_P)
                self.state = 3949 
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3950
                self.match(self.CREATE)
                self.state = 3951
                self.match(self.TYPE_P)
                self.state = 3952 
                self.any_name()
                self.state = 3953
                self.match(self.AS)
                self.state = 3954
                self.match(self.T__7)
                self.state = 3955 
                self.opttableFuncElementList()
                self.state = 3956
                self.match(self.T__13)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3958
                self.match(self.CREATE)
                self.state = 3959
                self.match(self.TYPE_P)
                self.state = 3960 
                self.any_name()
                self.state = 3961
                self.match(self.AS)
                self.state = 3962
                self.match(self.ENUM_P)
                self.state = 3963
                self.match(self.T__7)
                self.state = 3964 
                self.opt_enum_val_list()
                self.state = 3965
                self.match(self.T__13)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3967
                self.match(self.CREATE)
                self.state = 3968
                self.match(self.TYPE_P)
                self.state = 3969 
                self.any_name()
                self.state = 3970
                self.match(self.AS)
                self.state = 3971
                self.match(self.RANGE)
                self.state = 3972 
                self.definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3974
                self.match(self.CREATE)
                self.state = 3975
                self.match(self.TEXT_P)
                self.state = 3976
                self.match(self.SEARCH)
                self.state = 3977
                self.match(self.PARSER)
                self.state = 3978 
                self.any_name()
                self.state = 3979 
                self.definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3981
                self.match(self.CREATE)
                self.state = 3982
                self.match(self.TEXT_P)
                self.state = 3983
                self.match(self.SEARCH)
                self.state = 3984
                self.match(self.DICTIONARY)
                self.state = 3985 
                self.any_name()
                self.state = 3986 
                self.definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3988
                self.match(self.CREATE)
                self.state = 3989
                self.match(self.TEXT_P)
                self.state = 3990
                self.match(self.SEARCH)
                self.state = 3991
                self.match(self.TEMPLATE)
                self.state = 3992 
                self.any_name()
                self.state = 3993 
                self.definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3995
                self.match(self.CREATE)
                self.state = 3996
                self.match(self.TEXT_P)
                self.state = 3997
                self.match(self.SEARCH)
                self.state = 3998
                self.match(self.CONFIGURATION)
                self.state = 3999 
                self.any_name()
                self.state = 4000 
                self.definition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4002
                self.match(self.CREATE)
                self.state = 4003
                self.match(self.COLLATION)
                self.state = 4004 
                self.any_name()
                self.state = 4005 
                self.definition()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4007
                self.match(self.CREATE)
                self.state = 4008
                self.match(self.COLLATION)
                self.state = 4009 
                self.any_name()
                self.state = 4010
                self.match(self.FROM)
                self.state = 4011 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_definition

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefinition(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefinition(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefinition(self)
            else:
                return visitor.visitChildren(self)




    def definition(self):

        localctx = PlPgSqlParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4015
            self.match(self.T__7)
            self.state = 4016 
            self.def_list(0)
            self.state = 4017
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Def_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Def_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_elemContext,0)


        def def_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_def_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDef_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDef_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDef_list(self)
            else:
                return visitor.visitChildren(self)



    def def_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Def_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 534
        self.enterRecursionRule(localctx, 534, self.RULE_def_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4020 
            self.def_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Def_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_def_list)
                    self.state = 4022
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4023
                    self.match(self.T__12)
                    self.state = 4024 
                    self.def_elem() 
                self.state = 4029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Def_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Def_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def def_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_def_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDef_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDef_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDef_elem(self)
            else:
                return visitor.visitChildren(self)




    def def_elem(self):

        localctx = PlPgSqlParser.Def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_def_elem)
        try:
            self.state = 4035
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4030 
                self.colLabel()
                self.state = 4031
                self.match(self.T__4)
                self.state = 4032 
                self.def_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4034 
                self.colLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Def_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Def_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qual_all_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qual_all_OpContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_typeContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reserved_keywordContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_def_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDef_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDef_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDef_arg(self)
            else:
                return visitor.visitChildren(self)




    def def_arg(self):

        localctx = PlPgSqlParser.Def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_def_arg)
        try:
            self.state = 4042
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4037 
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4038 
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4039 
                self.qual_all_Op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4040 
                self.numericOnly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4041 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggr_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Aggr_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_aggr_args

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAggr_args(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAggr_args(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAggr_args(self)
            else:
                return visitor.visitChildren(self)




    def aggr_args(self):

        localctx = PlPgSqlParser.Aggr_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_aggr_args)
        try:
            self.state = 4051
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4044
                self.match(self.T__7)
                self.state = 4045 
                self.type_list(0)
                self.state = 4046
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4048
                self.match(self.T__7)
                self.state = 4049
                self.match(self.T__9)
                self.state = 4050
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_aggr_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Old_aggr_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Old_aggr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_old_aggr_definition

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOld_aggr_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOld_aggr_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOld_aggr_definition(self)
            else:
                return visitor.visitChildren(self)




    def old_aggr_definition(self):

        localctx = PlPgSqlParser.Old_aggr_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_old_aggr_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            self.match(self.T__7)
            self.state = 4054 
            self.old_aggr_list(0)
            self.state = 4055
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_aggr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Old_aggr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Old_aggr_listContext,0)


        def old_aggr_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Old_aggr_elemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_old_aggr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOld_aggr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOld_aggr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOld_aggr_list(self)
            else:
                return visitor.visitChildren(self)



    def old_aggr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Old_aggr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 544
        self.enterRecursionRule(localctx, 544, self.RULE_old_aggr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4058 
            self.old_aggr_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Old_aggr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_old_aggr_list)
                    self.state = 4060
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4061
                    self.match(self.T__12)
                    self.state = 4062 
                    self.old_aggr_elem() 
                self.state = 4067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Old_aggr_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Old_aggr_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Def_argContext,0)


        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_old_aggr_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOld_aggr_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOld_aggr_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOld_aggr_elem(self)
            else:
                return visitor.visitChildren(self)




    def old_aggr_elem(self):

        localctx = PlPgSqlParser.Old_aggr_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_old_aggr_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4068
            self.match(self.IDENT)
            self.state = 4069
            self.match(self.T__4)
            self.state = 4070 
            self.def_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_enum_val_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_enum_val_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Enum_val_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_enum_val_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_enum_val_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_enum_val_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_enum_val_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_enum_val_list(self):

        localctx = PlPgSqlParser.Opt_enum_val_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_opt_enum_val_list)
        try:
            self.state = 4074
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4072 
                self.enum_val_list(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_val_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Enum_val_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Enum_val_listContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_enum_val_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterEnum_val_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitEnum_val_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitEnum_val_list(self)
            else:
                return visitor.visitChildren(self)



    def enum_val_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Enum_val_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 550
        self.enterRecursionRule(localctx, 550, self.RULE_enum_val_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4077 
            self.sConst()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4084
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Enum_val_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enum_val_list)
                    self.state = 4079
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4080
                    self.match(self.T__12)
                    self.state = 4081 
                    self.sConst() 
                self.state = 4086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterEnumStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterEnumStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def BEFORE(self):
            return self.getToken(PlPgSqlParser.BEFORE, 0)

        def VALUE_P(self):
            return self.getToken(PlPgSqlParser.VALUE_P, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def AFTER(self):
            return self.getToken(PlPgSqlParser.AFTER, 0)

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.SConstContext,i)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterEnumStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterEnumStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterEnumStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterEnumStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterEnumStmt(self):

        localctx = PlPgSqlParser.AlterEnumStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_alterEnumStmt)
        try:
            self.state = 4112
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4087
                self.match(self.ALTER)
                self.state = 4088
                self.match(self.TYPE_P)
                self.state = 4089 
                self.any_name()
                self.state = 4090
                self.match(self.ADD_P)
                self.state = 4091
                self.match(self.VALUE_P)
                self.state = 4092 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4094
                self.match(self.ALTER)
                self.state = 4095
                self.match(self.TYPE_P)
                self.state = 4096 
                self.any_name()
                self.state = 4097
                self.match(self.ADD_P)
                self.state = 4098
                self.match(self.VALUE_P)
                self.state = 4099 
                self.sConst()
                self.state = 4100
                self.match(self.BEFORE)
                self.state = 4101 
                self.sConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4103
                self.match(self.ALTER)
                self.state = 4104
                self.match(self.TYPE_P)
                self.state = 4105 
                self.any_name()
                self.state = 4106
                self.match(self.ADD_P)
                self.state = 4107
                self.match(self.VALUE_P)
                self.state = 4108 
                self.sConst()
                self.state = 4109
                self.match(self.AFTER)
                self.state = 4110 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOpClassStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateOpClassStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def opt_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_defaultContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_item_listContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def opt_opfamily(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_opfamilyContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createOpClassStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateOpClassStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateOpClassStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateOpClassStmt(self)
            else:
                return visitor.visitChildren(self)




    def createOpClassStmt(self):

        localctx = PlPgSqlParser.CreateOpClassStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_createOpClassStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4114
            self.match(self.CREATE)
            self.state = 4115
            self.match(self.OPERATOR)
            self.state = 4116
            self.match(self.CLASS)
            self.state = 4117 
            self.any_name()
            self.state = 4118 
            self.opt_default()
            self.state = 4119
            self.match(self.FOR)
            self.state = 4120
            self.match(self.TYPE_P)
            self.state = 4121 
            self.typename()
            self.state = 4122
            self.match(self.USING)
            self.state = 4123 
            self.access_method()
            self.state = 4124 
            self.opt_opfamily()
            self.state = 4125
            self.match(self.AS)
            self.state = 4126 
            self.opclass_item_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_item_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opclass_item_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_item_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_item_listContext,0)


        def opclass_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opclass_item_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpclass_item_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpclass_item_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpclass_item_list(self)
            else:
                return visitor.visitChildren(self)



    def opclass_item_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Opclass_item_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 556
        self.enterRecursionRule(localctx, 556, self.RULE_opclass_item_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4129 
            self.opclass_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4136
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Opclass_item_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opclass_item_list)
                    self.state = 4131
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4132
                    self.match(self.T__12)
                    self.state = 4133 
                    self.opclass_item() 
                self.state = 4138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opclass_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opclass_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def STORAGE(self):
            return self.getToken(PlPgSqlParser.STORAGE, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def func_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argsContext,0)


        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def opt_recheck(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_recheckContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def opclass_purpose(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_purposeContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opclass_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpclass_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpclass_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpclass_item(self)
            else:
                return visitor.visitChildren(self)




    def opclass_item(self):

        localctx = PlPgSqlParser.Opclass_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_opclass_item)
        try:
            self.state = 4167
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4139
                self.match(self.OPERATOR)
                self.state = 4140 
                self.iConst()
                self.state = 4141 
                self.any_operator()
                self.state = 4142 
                self.opclass_purpose()
                self.state = 4143 
                self.opt_recheck()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4145
                self.match(self.OPERATOR)
                self.state = 4146 
                self.iConst()
                self.state = 4147 
                self.any_operator()
                self.state = 4148 
                self.oper_argtypes()
                self.state = 4149 
                self.opclass_purpose()
                self.state = 4150 
                self.opt_recheck()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4152
                self.match(self.FUNCTION)
                self.state = 4153 
                self.iConst()
                self.state = 4154 
                self.func_name()
                self.state = 4155 
                self.func_args()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4157
                self.match(self.FUNCTION)
                self.state = 4158 
                self.iConst()
                self.state = 4159
                self.match(self.T__7)
                self.state = 4160 
                self.type_list(0)
                self.state = 4161
                self.match(self.T__13)
                self.state = 4162 
                self.func_name()
                self.state = 4163 
                self.func_args()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4165
                self.match(self.STORAGE)
                self.state = 4166 
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_default

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_default(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_default(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_default(self)
            else:
                return visitor.visitChildren(self)




    def opt_default(self):

        localctx = PlPgSqlParser.Opt_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_opt_default)
        try:
            self.state = 4171
            token = self._input.LA(1)
            if token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4169
                self.match(self.DEFAULT)

            elif token in [self.CONVERSION_P, self.FOR]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_opfamilyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_opfamilyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_opfamily

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_opfamily(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_opfamily(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_opfamily(self)
            else:
                return visitor.visitChildren(self)




    def opt_opfamily(self):

        localctx = PlPgSqlParser.Opt_opfamilyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_opt_opfamily)
        try:
            self.state = 4176
            token = self._input.LA(1)
            if token in [self.FAMILY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4173
                self.match(self.FAMILY)
                self.state = 4174 
                self.any_name()

            elif token in [self.AS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_purposeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opclass_purposeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ORDER(self):
            return self.getToken(PlPgSqlParser.ORDER, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opclass_purpose

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpclass_purpose(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpclass_purpose(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpclass_purpose(self)
            else:
                return visitor.visitChildren(self)




    def opclass_purpose(self):

        localctx = PlPgSqlParser.Opclass_purposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_opclass_purpose)
        try:
            self.state = 4185
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4178
                self.match(self.FOR)
                self.state = 4179
                self.match(self.SEARCH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4180
                self.match(self.FOR)
                self.state = 4181
                self.match(self.ORDER)
                self.state = 4182
                self.match(self.BY)
                self.state = 4183 
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_recheckContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_recheckContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECHECK(self):
            return self.getToken(PlPgSqlParser.RECHECK, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_recheck

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_recheck(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_recheck(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_recheck(self)
            else:
                return visitor.visitChildren(self)




    def opt_recheck(self):

        localctx = PlPgSqlParser.Opt_recheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_opt_recheck)
        try:
            self.state = 4189
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4187
                self.match(self.RECHECK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def createOpFamilyStmt(self):

        localctx = PlPgSqlParser.CreateOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_createOpFamilyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4191
            self.match(self.CREATE)
            self.state = 4192
            self.match(self.OPERATOR)
            self.state = 4193
            self.match(self.FAMILY)
            self.state = 4194 
            self.any_name()
            self.state = 4195
            self.match(self.USING)
            self.state = 4196 
            self.access_method()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_item_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_item_listContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def opclass_drop_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_drop_listContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterOpFamilyStmt(self):

        localctx = PlPgSqlParser.AlterOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_alterOpFamilyStmt)
        try:
            self.state = 4216
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4198
                self.match(self.ALTER)
                self.state = 4199
                self.match(self.OPERATOR)
                self.state = 4200
                self.match(self.FAMILY)
                self.state = 4201 
                self.any_name()
                self.state = 4202
                self.match(self.USING)
                self.state = 4203 
                self.access_method()
                self.state = 4204
                self.match(self.ADD_P)
                self.state = 4205 
                self.opclass_item_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4207
                self.match(self.ALTER)
                self.state = 4208
                self.match(self.OPERATOR)
                self.state = 4209
                self.match(self.FAMILY)
                self.state = 4210 
                self.any_name()
                self.state = 4211
                self.match(self.USING)
                self.state = 4212 
                self.access_method()
                self.state = 4213
                self.match(self.DROP)
                self.state = 4214 
                self.opclass_drop_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_drop_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opclass_drop_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_drop(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_dropContext,0)


        def opclass_drop_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opclass_drop_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opclass_drop_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpclass_drop_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpclass_drop_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpclass_drop_list(self)
            else:
                return visitor.visitChildren(self)



    def opclass_drop_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Opclass_drop_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 572
        self.enterRecursionRule(localctx, 572, self.RULE_opclass_drop_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4219 
            self.opclass_drop()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Opclass_drop_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opclass_drop_list)
                    self.state = 4221
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4222
                    self.match(self.T__12)
                    self.state = 4223 
                    self.opclass_drop() 
                self.state = 4228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opclass_dropContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opclass_dropContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opclass_drop

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpclass_drop(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpclass_drop(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpclass_drop(self)
            else:
                return visitor.visitChildren(self)




    def opclass_drop(self):

        localctx = PlPgSqlParser.Opclass_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_opclass_drop)
        try:
            self.state = 4241
            token = self._input.LA(1)
            if token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4229
                self.match(self.OPERATOR)
                self.state = 4230 
                self.iConst()
                self.state = 4231
                self.match(self.T__7)
                self.state = 4232 
                self.type_list(0)
                self.state = 4233
                self.match(self.T__13)

            elif token in [self.FUNCTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4235
                self.match(self.FUNCTION)
                self.state = 4236 
                self.iConst()
                self.state = 4237
                self.match(self.T__7)
                self.state = 4238 
                self.type_list(0)
                self.state = 4239
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOpClassStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropOpClassStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropOpClassStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropOpClassStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropOpClassStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropOpClassStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOpClassStmt(self):

        localctx = PlPgSqlParser.DropOpClassStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_dropOpClassStmt)
        try:
            self.state = 4261
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4243
                self.match(self.DROP)
                self.state = 4244
                self.match(self.OPERATOR)
                self.state = 4245
                self.match(self.CLASS)
                self.state = 4246 
                self.any_name()
                self.state = 4247
                self.match(self.USING)
                self.state = 4248 
                self.access_method()
                self.state = 4249 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4251
                self.match(self.DROP)
                self.state = 4252
                self.match(self.OPERATOR)
                self.state = 4253
                self.match(self.CLASS)
                self.state = 4254
                self.match(self.IF_P)
                self.state = 4255
                self.match(self.EXISTS)
                self.state = 4256 
                self.any_name()
                self.state = 4257
                self.match(self.USING)
                self.state = 4258 
                self.access_method()
                self.state = 4259 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOpFamilyStmt(self):

        localctx = PlPgSqlParser.DropOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_dropOpFamilyStmt)
        try:
            self.state = 4281
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4263
                self.match(self.DROP)
                self.state = 4264
                self.match(self.OPERATOR)
                self.state = 4265
                self.match(self.FAMILY)
                self.state = 4266 
                self.any_name()
                self.state = 4267
                self.match(self.USING)
                self.state = 4268 
                self.access_method()
                self.state = 4269 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4271
                self.match(self.DROP)
                self.state = 4272
                self.match(self.OPERATOR)
                self.state = 4273
                self.match(self.FAMILY)
                self.state = 4274
                self.match(self.IF_P)
                self.state = 4275
                self.match(self.EXISTS)
                self.state = 4276 
                self.any_name()
                self.state = 4277
                self.match(self.USING)
                self.state = 4278 
                self.access_method()
                self.state = 4279 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOwnedStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropOwnedStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def OWNED(self):
            return self.getToken(PlPgSqlParser.OWNED, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropOwnedStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropOwnedStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropOwnedStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropOwnedStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOwnedStmt(self):

        localctx = PlPgSqlParser.DropOwnedStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_dropOwnedStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4283
            self.match(self.DROP)
            self.state = 4284
            self.match(self.OWNED)
            self.state = 4285
            self.match(self.BY)
            self.state = 4286 
            self.name_list(0)
            self.state = 4287 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReassignOwnedStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ReassignOwnedStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def OWNED(self):
            return self.getToken(PlPgSqlParser.OWNED, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def REASSIGN(self):
            return self.getToken(PlPgSqlParser.REASSIGN, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reassignOwnedStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReassignOwnedStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReassignOwnedStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReassignOwnedStmt(self)
            else:
                return visitor.visitChildren(self)




    def reassignOwnedStmt(self):

        localctx = PlPgSqlParser.ReassignOwnedStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_reassignOwnedStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4289
            self.match(self.REASSIGN)
            self.state = 4290
            self.match(self.OWNED)
            self.state = 4291
            self.match(self.BY)
            self.state = 4292 
            self.name_list(0)
            self.state = 4293
            self.match(self.TO)
            self.state = 4294 
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(PlPgSqlParser.CONCURRENTLY, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def drop_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Drop_typeContext,0)


        def any_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_name_listContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropStmt(self):

        localctx = PlPgSqlParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_dropStmt)
        try:
            self.state = 4322
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4296
                self.match(self.DROP)
                self.state = 4297 
                self.drop_type()
                self.state = 4298
                self.match(self.IF_P)
                self.state = 4299
                self.match(self.EXISTS)
                self.state = 4300 
                self.any_name_list(0)
                self.state = 4301 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4303
                self.match(self.DROP)
                self.state = 4304 
                self.drop_type()
                self.state = 4305 
                self.any_name_list(0)
                self.state = 4306 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4308
                self.match(self.DROP)
                self.state = 4309
                self.match(self.INDEX)
                self.state = 4310
                self.match(self.CONCURRENTLY)
                self.state = 4311 
                self.any_name_list(0)
                self.state = 4312 
                self.opt_drop_behavior()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4314
                self.match(self.DROP)
                self.state = 4315
                self.match(self.INDEX)
                self.state = 4316
                self.match(self.CONCURRENTLY)
                self.state = 4317
                self.match(self.IF_P)
                self.state = 4318
                self.match(self.EXISTS)
                self.state = 4319 
                self.any_name_list(0)
                self.state = 4320 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Drop_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_drop_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDrop_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDrop_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = PlPgSqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_drop_type)
        try:
            self.state = 4348
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4324
                self.match(self.TABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4325
                self.match(self.SEQUENCE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4326
                self.match(self.VIEW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4327
                self.match(self.INDEX)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4328
                self.match(self.FOREIGN)
                self.state = 4329
                self.match(self.TABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4330
                self.match(self.TYPE_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4331
                self.match(self.DOMAIN_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4332
                self.match(self.COLLATION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4333
                self.match(self.CONVERSION_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4334
                self.match(self.SCHEMA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4335
                self.match(self.EXTENSION)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4336
                self.match(self.TEXT_P)
                self.state = 4337
                self.match(self.SEARCH)
                self.state = 4338
                self.match(self.PARSER)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4339
                self.match(self.TEXT_P)
                self.state = 4340
                self.match(self.SEARCH)
                self.state = 4341
                self.match(self.DICTIONARY)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4342
                self.match(self.TEXT_P)
                self.state = 4343
                self.match(self.SEARCH)
                self.state = 4344
                self.match(self.TEMPLATE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4345
                self.match(self.TEXT_P)
                self.state = 4346
                self.match(self.SEARCH)
                self.state = 4347
                self.match(self.CONFIGURATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Any_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def any_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_any_name_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAny_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAny_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAny_name_list(self)
            else:
                return visitor.visitChildren(self)



    def any_name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Any_name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 588
        self.enterRecursionRule(localctx, 588, self.RULE_any_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4351 
            self.any_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Any_name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_any_name_list)
                    self.state = 4353
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4354
                    self.match(self.T__12)
                    self.state = 4355 
                    self.any_name() 
                self.state = 4360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PlPgSqlParser.AttrsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_any_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAny_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = PlPgSqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_any_name)
        try:
            self.state = 4365
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4361 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4362 
                self.colId()
                self.state = 4363 
                self.attrs(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AttrsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attrs(self):
            return self.getTypedRuleContext(PlPgSqlParser.AttrsContext,0)


        def attr_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Attr_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_attrs

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAttrs(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAttrs(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAttrs(self)
            else:
                return visitor.visitChildren(self)



    def attrs(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.AttrsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 592
        self.enterRecursionRule(localctx, 592, self.RULE_attrs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4368
            self.match(self.T__14)
            self.state = 4369 
            self.attr_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.AttrsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attrs)
                    self.state = 4371
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4372
                    self.match(self.T__14)
                    self.state = 4373 
                    self.attr_name() 
                self.state = 4378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TruncateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TruncateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_restart_seqs(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_restart_seqsContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_expr_listContext,0)


        def opt_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_tableContext,0)


        def TRUNCATE(self):
            return self.getToken(PlPgSqlParser.TRUNCATE, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_truncateStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTruncateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTruncateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTruncateStmt(self)
            else:
                return visitor.visitChildren(self)




    def truncateStmt(self):

        localctx = PlPgSqlParser.TruncateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_truncateStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4379
            self.match(self.TRUNCATE)
            self.state = 4380 
            self.opt_table()
            self.state = 4381 
            self.relation_expr_list(0)
            self.state = 4382 
            self.opt_restart_seqs()
            self.state = 4383 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_restart_seqsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_restart_seqsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTITY_P(self):
            return self.getToken(PlPgSqlParser.IDENTITY_P, 0)

        def RESTART(self):
            return self.getToken(PlPgSqlParser.RESTART, 0)

        def CONTINUE_P(self):
            return self.getToken(PlPgSqlParser.CONTINUE_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_restart_seqs

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_restart_seqs(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_restart_seqs(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_restart_seqs(self)
            else:
                return visitor.visitChildren(self)




    def opt_restart_seqs(self):

        localctx = PlPgSqlParser.Opt_restart_seqsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_opt_restart_seqs)
        try:
            self.state = 4390
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4385
                self.match(self.CONTINUE_P)
                self.state = 4386
                self.match(self.IDENTITY_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4387
                self.match(self.RESTART)
                self.state = 4388
                self.match(self.IDENTITY_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CommentStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def IS(self):
            return self.getToken(PlPgSqlParser.IS, 0)

        def OBJECT_P(self):
            return self.getToken(PlPgSqlParser.OBJECT_P, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def comment_text(self):
            return self.getTypedRuleContext(PlPgSqlParser.Comment_textContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def comment_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Comment_typeContext,0)


        def LARGE_P(self):
            return self.getToken(PlPgSqlParser.LARGE_P, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def COMMENT(self):
            return self.getToken(PlPgSqlParser.COMMENT, 0)

        def func_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argsContext,0)


        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def ON(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.ON)
            else:
                return self.getToken(PlPgSqlParser.ON, i)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def RULE(self):
            return self.getToken(PlPgSqlParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(PlPgSqlParser.TRIGGER, 0)

        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_commentStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCommentStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCommentStmt(self)
            else:
                return visitor.visitChildren(self)




    def commentStmt(self):

        localctx = PlPgSqlParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_commentStmt)
        try:
            self.state = 4540
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4392
                self.match(self.COMMENT)
                self.state = 4393
                self.match(self.ON)
                self.state = 4394 
                self.comment_type()
                self.state = 4395 
                self.any_name()
                self.state = 4396
                self.match(self.IS)
                self.state = 4397 
                self.comment_text()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4399
                self.match(self.COMMENT)
                self.state = 4400
                self.match(self.ON)
                self.state = 4401
                self.match(self.AGGREGATE)
                self.state = 4402 
                self.func_name()
                self.state = 4403 
                self.aggr_args()
                self.state = 4404
                self.match(self.IS)
                self.state = 4405 
                self.comment_text()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4407
                self.match(self.COMMENT)
                self.state = 4408
                self.match(self.ON)
                self.state = 4409
                self.match(self.FUNCTION)
                self.state = 4410 
                self.func_name()
                self.state = 4411 
                self.func_args()
                self.state = 4412
                self.match(self.IS)
                self.state = 4413 
                self.comment_text()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4415
                self.match(self.COMMENT)
                self.state = 4416
                self.match(self.ON)
                self.state = 4417
                self.match(self.OPERATOR)
                self.state = 4418 
                self.any_operator()
                self.state = 4419 
                self.oper_argtypes()
                self.state = 4420
                self.match(self.IS)
                self.state = 4421 
                self.comment_text()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4423
                self.match(self.COMMENT)
                self.state = 4424
                self.match(self.ON)
                self.state = 4425
                self.match(self.CONSTRAINT)
                self.state = 4426 
                self.name()
                self.state = 4427
                self.match(self.ON)
                self.state = 4428 
                self.any_name()
                self.state = 4429
                self.match(self.IS)
                self.state = 4430 
                self.comment_text()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4432
                self.match(self.COMMENT)
                self.state = 4433
                self.match(self.ON)
                self.state = 4434
                self.match(self.RULE)
                self.state = 4435 
                self.name()
                self.state = 4436
                self.match(self.ON)
                self.state = 4437 
                self.any_name()
                self.state = 4438
                self.match(self.IS)
                self.state = 4439 
                self.comment_text()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4441
                self.match(self.COMMENT)
                self.state = 4442
                self.match(self.ON)
                self.state = 4443
                self.match(self.RULE)
                self.state = 4444 
                self.name()
                self.state = 4445
                self.match(self.IS)
                self.state = 4446 
                self.comment_text()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4448
                self.match(self.COMMENT)
                self.state = 4449
                self.match(self.ON)
                self.state = 4450
                self.match(self.TRIGGER)
                self.state = 4451 
                self.name()
                self.state = 4452
                self.match(self.ON)
                self.state = 4453 
                self.any_name()
                self.state = 4454
                self.match(self.IS)
                self.state = 4455 
                self.comment_text()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4457
                self.match(self.COMMENT)
                self.state = 4458
                self.match(self.ON)
                self.state = 4459
                self.match(self.OPERATOR)
                self.state = 4460
                self.match(self.CLASS)
                self.state = 4461 
                self.any_name()
                self.state = 4462
                self.match(self.USING)
                self.state = 4463 
                self.access_method()
                self.state = 4464
                self.match(self.IS)
                self.state = 4465 
                self.comment_text()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4467
                self.match(self.COMMENT)
                self.state = 4468
                self.match(self.ON)
                self.state = 4469
                self.match(self.OPERATOR)
                self.state = 4470
                self.match(self.FAMILY)
                self.state = 4471 
                self.any_name()
                self.state = 4472
                self.match(self.USING)
                self.state = 4473 
                self.access_method()
                self.state = 4474
                self.match(self.IS)
                self.state = 4475 
                self.comment_text()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4477
                self.match(self.COMMENT)
                self.state = 4478
                self.match(self.ON)
                self.state = 4479
                self.match(self.LARGE_P)
                self.state = 4480
                self.match(self.OBJECT_P)
                self.state = 4481 
                self.numericOnly()
                self.state = 4482
                self.match(self.IS)
                self.state = 4483 
                self.comment_text()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4485
                self.match(self.COMMENT)
                self.state = 4486
                self.match(self.ON)
                self.state = 4487
                self.match(self.CAST)
                self.state = 4488
                self.match(self.T__7)
                self.state = 4489 
                self.typename()
                self.state = 4490
                self.match(self.AS)
                self.state = 4491 
                self.typename()
                self.state = 4492
                self.match(self.T__13)
                self.state = 4493
                self.match(self.IS)
                self.state = 4494 
                self.comment_text()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4496
                self.match(self.COMMENT)
                self.state = 4497
                self.match(self.ON)
                self.state = 4498 
                self.opt_procedural()
                self.state = 4499
                self.match(self.LANGUAGE)
                self.state = 4500 
                self.any_name()
                self.state = 4501
                self.match(self.IS)
                self.state = 4502 
                self.comment_text()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4504
                self.match(self.COMMENT)
                self.state = 4505
                self.match(self.ON)
                self.state = 4506
                self.match(self.TEXT_P)
                self.state = 4507
                self.match(self.SEARCH)
                self.state = 4508
                self.match(self.PARSER)
                self.state = 4509 
                self.any_name()
                self.state = 4510
                self.match(self.IS)
                self.state = 4511 
                self.comment_text()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4513
                self.match(self.COMMENT)
                self.state = 4514
                self.match(self.ON)
                self.state = 4515
                self.match(self.TEXT_P)
                self.state = 4516
                self.match(self.SEARCH)
                self.state = 4517
                self.match(self.DICTIONARY)
                self.state = 4518 
                self.any_name()
                self.state = 4519
                self.match(self.IS)
                self.state = 4520 
                self.comment_text()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4522
                self.match(self.COMMENT)
                self.state = 4523
                self.match(self.ON)
                self.state = 4524
                self.match(self.TEXT_P)
                self.state = 4525
                self.match(self.SEARCH)
                self.state = 4526
                self.match(self.TEMPLATE)
                self.state = 4527 
                self.any_name()
                self.state = 4528
                self.match(self.IS)
                self.state = 4529 
                self.comment_text()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4531
                self.match(self.COMMENT)
                self.state = 4532
                self.match(self.ON)
                self.state = 4533
                self.match(self.TEXT_P)
                self.state = 4534
                self.match(self.SEARCH)
                self.state = 4535
                self.match(self.CONFIGURATION)
                self.state = 4536 
                self.any_name()
                self.state = 4537
                self.match(self.IS)
                self.state = 4538 
                self.comment_text()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Comment_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def COLUMN(self):
            return self.getToken(PlPgSqlParser.COLUMN, 0)

        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_comment_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterComment_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitComment_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitComment_type(self)
            else:
                return visitor.visitChildren(self)




    def comment_type(self):

        localctx = PlPgSqlParser.Comment_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_comment_type)
        try:
            self.state = 4562
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4542
                self.match(self.COLUMN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4543
                self.match(self.DATABASE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4544
                self.match(self.SCHEMA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4545
                self.match(self.INDEX)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4546
                self.match(self.SEQUENCE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4547
                self.match(self.TABLE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4548
                self.match(self.DOMAIN_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4549
                self.match(self.TYPE_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4550
                self.match(self.VIEW)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4551
                self.match(self.COLLATION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4552
                self.match(self.CONVERSION_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4553
                self.match(self.TABLESPACE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4554
                self.match(self.EXTENSION)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4555
                self.match(self.ROLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4556
                self.match(self.FOREIGN)
                self.state = 4557
                self.match(self.TABLE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4558
                self.match(self.SERVER)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4559
                self.match(self.FOREIGN)
                self.state = 4560
                self.match(self.DATA_P)
                self.state = 4561
                self.match(self.WRAPPER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Comment_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_comment_text

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterComment_text(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitComment_text(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitComment_text(self)
            else:
                return visitor.visitChildren(self)




    def comment_text(self):

        localctx = PlPgSqlParser.Comment_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_comment_text)
        try:
            self.state = 4566
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4564 
                self.sConst()

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4565
                self.match(self.NULL_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecLabelStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SecLabelStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def security_label_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Security_label_typeContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def LABEL(self):
            return self.getToken(PlPgSqlParser.LABEL, 0)

        def OBJECT_P(self):
            return self.getToken(PlPgSqlParser.OBJECT_P, 0)

        def IS(self):
            return self.getToken(PlPgSqlParser.IS, 0)

        def opt_provider(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_providerContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def SECURITY(self):
            return self.getToken(PlPgSqlParser.SECURITY, 0)

        def security_label(self):
            return self.getTypedRuleContext(PlPgSqlParser.Security_labelContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def LARGE_P(self):
            return self.getToken(PlPgSqlParser.LARGE_P, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def func_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_secLabelStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSecLabelStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSecLabelStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSecLabelStmt(self)
            else:
                return visitor.visitChildren(self)




    def secLabelStmt(self):

        localctx = PlPgSqlParser.SecLabelStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_secLabelStmt)
        try:
            self.state = 4617
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4568
                self.match(self.SECURITY)
                self.state = 4569
                self.match(self.LABEL)
                self.state = 4570 
                self.opt_provider()
                self.state = 4571
                self.match(self.ON)
                self.state = 4572 
                self.security_label_type()
                self.state = 4573 
                self.any_name()
                self.state = 4574
                self.match(self.IS)
                self.state = 4575 
                self.security_label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4577
                self.match(self.SECURITY)
                self.state = 4578
                self.match(self.LABEL)
                self.state = 4579 
                self.opt_provider()
                self.state = 4580
                self.match(self.ON)
                self.state = 4581
                self.match(self.AGGREGATE)
                self.state = 4582 
                self.func_name()
                self.state = 4583 
                self.aggr_args()
                self.state = 4584
                self.match(self.IS)
                self.state = 4585 
                self.security_label()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4587
                self.match(self.SECURITY)
                self.state = 4588
                self.match(self.LABEL)
                self.state = 4589 
                self.opt_provider()
                self.state = 4590
                self.match(self.ON)
                self.state = 4591
                self.match(self.FUNCTION)
                self.state = 4592 
                self.func_name()
                self.state = 4593 
                self.func_args()
                self.state = 4594
                self.match(self.IS)
                self.state = 4595 
                self.security_label()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4597
                self.match(self.SECURITY)
                self.state = 4598
                self.match(self.LABEL)
                self.state = 4599 
                self.opt_provider()
                self.state = 4600
                self.match(self.ON)
                self.state = 4601
                self.match(self.LARGE_P)
                self.state = 4602
                self.match(self.OBJECT_P)
                self.state = 4603 
                self.numericOnly()
                self.state = 4604
                self.match(self.IS)
                self.state = 4605 
                self.security_label()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4607
                self.match(self.SECURITY)
                self.state = 4608
                self.match(self.LABEL)
                self.state = 4609 
                self.opt_provider()
                self.state = 4610
                self.match(self.ON)
                self.state = 4611 
                self.opt_procedural()
                self.state = 4612
                self.match(self.LANGUAGE)
                self.state = 4613 
                self.any_name()
                self.state = 4614
                self.match(self.IS)
                self.state = 4615 
                self.security_label()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_providerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_providerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_provider

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_provider(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_provider(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_provider(self)
            else:
                return visitor.visitChildren(self)




    def opt_provider(self):

        localctx = PlPgSqlParser.Opt_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_opt_provider)
        try:
            self.state = 4622
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4619
                self.match(self.FOR)
                self.state = 4620 
                self.colId_or_Sconst()

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_label_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Security_label_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def COLUMN(self):
            return self.getToken(PlPgSqlParser.COLUMN, 0)

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_security_label_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSecurity_label_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSecurity_label_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSecurity_label_type(self)
            else:
                return visitor.visitChildren(self)




    def security_label_type(self):

        localctx = PlPgSqlParser.Security_label_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_security_label_type)
        try:
            self.state = 4636
            token = self._input.LA(1)
            if token in [self.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4624
                self.match(self.COLUMN)

            elif token in [self.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4625
                self.match(self.DATABASE)

            elif token in [self.FOREIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4626
                self.match(self.FOREIGN)
                self.state = 4627
                self.match(self.TABLE)

            elif token in [self.SCHEMA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4628
                self.match(self.SCHEMA)

            elif token in [self.SEQUENCE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4629
                self.match(self.SEQUENCE)

            elif token in [self.TABLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4630
                self.match(self.TABLE)

            elif token in [self.DOMAIN_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4631
                self.match(self.DOMAIN_P)

            elif token in [self.ROLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4632
                self.match(self.ROLE)

            elif token in [self.TABLESPACE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4633
                self.match(self.TABLESPACE)

            elif token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4634
                self.match(self.TYPE_P)

            elif token in [self.VIEW]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4635
                self.match(self.VIEW)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_labelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Security_labelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_security_label

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSecurity_label(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSecurity_label(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSecurity_label(self)
            else:
                return visitor.visitChildren(self)




    def security_label(self):

        localctx = PlPgSqlParser.Security_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_security_label)
        try:
            self.state = 4640
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4638 
                self.sConst()

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4639
                self.match(self.NULL_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FetchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.FetchStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(PlPgSqlParser.MOVE, 0)

        def FETCH(self):
            return self.getToken(PlPgSqlParser.FETCH, 0)

        def fetch_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Fetch_argsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_fetchStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFetchStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFetchStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFetchStmt(self)
            else:
                return visitor.visitChildren(self)




    def fetchStmt(self):

        localctx = PlPgSqlParser.FetchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_fetchStmt)
        try:
            self.state = 4646
            token = self._input.LA(1)
            if token in [self.FETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4642
                self.match(self.FETCH)
                self.state = 4643 
                self.fetch_args()

            elif token in [self.MOVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4644
                self.match(self.MOVE)
                self.state = 4645 
                self.fetch_args()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Fetch_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(PlPgSqlParser.NEXT, 0)

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(PlPgSqlParser.FORWARD, 0)

        def PRIOR(self):
            return self.getToken(PlPgSqlParser.PRIOR, 0)

        def opt_from_in(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_from_inContext,0)


        def RELATIVE_P(self):
            return self.getToken(PlPgSqlParser.RELATIVE_P, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def FIRST_P(self):
            return self.getToken(PlPgSqlParser.FIRST_P, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_nameContext,0)


        def BACKWARD(self):
            return self.getToken(PlPgSqlParser.BACKWARD, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PlPgSqlParser.ABSOLUTE_P, 0)

        def from_in(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_inContext,0)


        def LAST_P(self):
            return self.getToken(PlPgSqlParser.LAST_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_fetch_args

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFetch_args(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFetch_args(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFetch_args(self)
            else:
                return visitor.visitChildren(self)




    def fetch_args(self):

        localctx = PlPgSqlParser.Fetch_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_fetch_args)
        try:
            self.state = 4714
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4648 
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4649 
                self.from_in()
                self.state = 4650 
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4652
                self.match(self.NEXT)
                self.state = 4653 
                self.opt_from_in()
                self.state = 4654 
                self.cursor_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4656
                self.match(self.PRIOR)
                self.state = 4657 
                self.opt_from_in()
                self.state = 4658 
                self.cursor_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4660
                self.match(self.FIRST_P)
                self.state = 4661 
                self.opt_from_in()
                self.state = 4662 
                self.cursor_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4664
                self.match(self.LAST_P)
                self.state = 4665 
                self.opt_from_in()
                self.state = 4666 
                self.cursor_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4668
                self.match(self.ABSOLUTE_P)
                self.state = 4669 
                self.signedIconst()
                self.state = 4670 
                self.opt_from_in()
                self.state = 4671 
                self.cursor_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4673
                self.match(self.RELATIVE_P)
                self.state = 4674 
                self.signedIconst()
                self.state = 4675 
                self.opt_from_in()
                self.state = 4676 
                self.cursor_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4678 
                self.signedIconst()
                self.state = 4679 
                self.opt_from_in()
                self.state = 4680 
                self.cursor_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4682
                self.match(self.ALL)
                self.state = 4683 
                self.opt_from_in()
                self.state = 4684 
                self.cursor_name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4686
                self.match(self.FORWARD)
                self.state = 4687 
                self.opt_from_in()
                self.state = 4688 
                self.cursor_name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4690
                self.match(self.FORWARD)
                self.state = 4691 
                self.signedIconst()
                self.state = 4692 
                self.opt_from_in()
                self.state = 4693 
                self.cursor_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4695
                self.match(self.FORWARD)
                self.state = 4696
                self.match(self.ALL)
                self.state = 4697 
                self.opt_from_in()
                self.state = 4698 
                self.cursor_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4700
                self.match(self.BACKWARD)
                self.state = 4701 
                self.opt_from_in()
                self.state = 4702 
                self.cursor_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4704
                self.match(self.BACKWARD)
                self.state = 4705 
                self.signedIconst()
                self.state = 4706 
                self.opt_from_in()
                self.state = 4707 
                self.cursor_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4709
                self.match(self.BACKWARD)
                self.state = 4710
                self.match(self.ALL)
                self.state = 4711 
                self.opt_from_in()
                self.state = 4712 
                self.cursor_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_inContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.From_inContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_from_in

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFrom_in(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFrom_in(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFrom_in(self)
            else:
                return visitor.visitChildren(self)




    def from_in(self):

        localctx = PlPgSqlParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4716
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.FROM or _la==PlPgSqlParser.IN_P):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_from_inContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_from_inContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_in(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_inContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_from_in

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_from_in(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_from_in(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_from_in(self)
            else:
                return visitor.visitChildren(self)




    def opt_from_in(self):

        localctx = PlPgSqlParser.Opt_from_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_opt_from_in)
        try:
            self.state = 4720
            token = self._input.LA(1)
            if token in [self.FROM, self.IN_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4718 
                self.from_in()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.GrantStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def opt_grant_grant_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_grant_grant_optionContext,0)


        def privileges(self):
            return self.getTypedRuleContext(PlPgSqlParser.PrivilegesContext,0)


        def privilege_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Grantee_listContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_grantStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGrantStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGrantStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGrantStmt(self)
            else:
                return visitor.visitChildren(self)




    def grantStmt(self):

        localctx = PlPgSqlParser.GrantStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_grantStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4722
            self.match(self.GRANT)
            self.state = 4723 
            self.privileges()
            self.state = 4724
            self.match(self.ON)
            self.state = 4725 
            self.privilege_target()
            self.state = 4726
            self.match(self.TO)
            self.state = 4727 
            self.grantee_list(0)
            self.state = 4728 
            self.opt_grant_grant_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RevokeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def privileges(self):
            return self.getTypedRuleContext(PlPgSqlParser.PrivilegesContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Grantee_listContext,0)


        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(PlPgSqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_revokeStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRevokeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRevokeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRevokeStmt(self)
            else:
                return visitor.visitChildren(self)




    def revokeStmt(self):

        localctx = PlPgSqlParser.RevokeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_revokeStmt)
        try:
            self.state = 4749
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4730
                self.match(self.REVOKE)
                self.state = 4731 
                self.privileges()
                self.state = 4732
                self.match(self.ON)
                self.state = 4733 
                self.privilege_target()
                self.state = 4734
                self.match(self.FROM)
                self.state = 4735 
                self.grantee_list(0)
                self.state = 4736 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4738
                self.match(self.REVOKE)
                self.state = 4739
                self.match(self.GRANT)
                self.state = 4740
                self.match(self.OPTION)
                self.state = 4741
                self.match(self.FOR)
                self.state = 4742 
                self.privileges()
                self.state = 4743
                self.match(self.ON)
                self.state = 4744 
                self.privilege_target()
                self.state = 4745
                self.match(self.FROM)
                self.state = 4746 
                self.grantee_list(0)
                self.state = 4747 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.PrivilegesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def columnList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnListContext,0)


        def PRIVILEGES(self):
            return self.getToken(PlPgSqlParser.PRIVILEGES, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_privileges

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrivileges(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrivileges(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def privileges(self):

        localctx = PlPgSqlParser.PrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_privileges)
        try:
            self.state = 4766
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4751 
                self.privilege_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4752
                self.match(self.ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4753
                self.match(self.ALL)
                self.state = 4754
                self.match(self.PRIVILEGES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4755
                self.match(self.ALL)
                self.state = 4756
                self.match(self.T__7)
                self.state = 4757 
                self.columnList(0)
                self.state = 4758
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4760
                self.match(self.ALL)
                self.state = 4761
                self.match(self.PRIVILEGES)
                self.state = 4762
                self.match(self.T__7)
                self.state = 4763 
                self.columnList(0)
                self.state = 4764
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Privilege_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Privilege_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(PlPgSqlParser.PrivilegeContext,0)


        def privilege_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_privilege_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrivilege_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrivilege_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrivilege_list(self)
            else:
                return visitor.visitChildren(self)



    def privilege_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Privilege_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 626
        self.enterRecursionRule(localctx, 626, self.RULE_privilege_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4769 
            self.privilege()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Privilege_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_privilege_list)
                    self.state = 4771
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4772
                    self.match(self.T__12)
                    self.state = 4773 
                    self.privilege() 
                self.state = 4778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.PrivilegeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def SELECT(self):
            return self.getToken(PlPgSqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(PlPgSqlParser.REFERENCES, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_privilege

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrivilege(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrivilege(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = PlPgSqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_privilege)
        try:
            self.state = 4788
            token = self._input.LA(1)
            if token in [self.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4779
                self.match(self.SELECT)
                self.state = 4780 
                self.opt_column_list()

            elif token in [self.REFERENCES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4781
                self.match(self.REFERENCES)
                self.state = 4782 
                self.opt_column_list()

            elif token in [self.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4783
                self.match(self.CREATE)
                self.state = 4784 
                self.opt_column_list()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4785 
                self.colId()
                self.state = 4786 
                self.opt_column_list()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Privilege_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Privilege_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypes_listContext,0)


        def TABLES(self):
            return self.getToken(PlPgSqlParser.TABLES, 0)

        def OBJECT_P(self):
            return self.getToken(PlPgSqlParser.OBJECT_P, 0)

        def FUNCTIONS(self):
            return self.getToken(PlPgSqlParser.FUNCTIONS, 0)

        def numericOnly_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnly_listContext,0)


        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def LARGE_P(self):
            return self.getToken(PlPgSqlParser.LARGE_P, 0)

        def any_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_name_listContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_name_listContext,0)


        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def SEQUENCES(self):
            return self.getToken(PlPgSqlParser.SEQUENCES, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_privilege_target

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrivilege_target(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrivilege_target(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrivilege_target(self)
            else:
                return visitor.visitChildren(self)




    def privilege_target(self):

        localctx = PlPgSqlParser.Privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_privilege_target)
        try:
            self.state = 4834
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4790 
                self.qualified_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4791
                self.match(self.TABLE)
                self.state = 4792 
                self.qualified_name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4793
                self.match(self.SEQUENCE)
                self.state = 4794 
                self.qualified_name_list(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4795
                self.match(self.FOREIGN)
                self.state = 4796
                self.match(self.DATA_P)
                self.state = 4797
                self.match(self.WRAPPER)
                self.state = 4798 
                self.name_list(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4799
                self.match(self.FOREIGN)
                self.state = 4800
                self.match(self.SERVER)
                self.state = 4801 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4802
                self.match(self.FUNCTION)
                self.state = 4803 
                self.function_with_argtypes_list(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4804
                self.match(self.DATABASE)
                self.state = 4805 
                self.name_list(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4806
                self.match(self.DOMAIN_P)
                self.state = 4807 
                self.any_name_list(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4808
                self.match(self.LANGUAGE)
                self.state = 4809 
                self.name_list(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4810
                self.match(self.LARGE_P)
                self.state = 4811
                self.match(self.OBJECT_P)
                self.state = 4812 
                self.numericOnly_list(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4813
                self.match(self.SCHEMA)
                self.state = 4814 
                self.name_list(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4815
                self.match(self.TABLESPACE)
                self.state = 4816 
                self.name_list(0)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4817
                self.match(self.TYPE_P)
                self.state = 4818 
                self.any_name_list(0)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4819
                self.match(self.ALL)
                self.state = 4820
                self.match(self.TABLES)
                self.state = 4821
                self.match(self.IN_P)
                self.state = 4822
                self.match(self.SCHEMA)
                self.state = 4823 
                self.name_list(0)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4824
                self.match(self.ALL)
                self.state = 4825
                self.match(self.SEQUENCES)
                self.state = 4826
                self.match(self.IN_P)
                self.state = 4827
                self.match(self.SCHEMA)
                self.state = 4828 
                self.name_list(0)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4829
                self.match(self.ALL)
                self.state = 4830
                self.match(self.FUNCTIONS)
                self.state = 4831
                self.match(self.IN_P)
                self.state = 4832
                self.match(self.SCHEMA)
                self.state = 4833 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grantee_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Grantee_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def grantee_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Grantee_listContext,0)


        def grantee(self):
            return self.getTypedRuleContext(PlPgSqlParser.GranteeContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_grantee_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGrantee_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGrantee_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGrantee_list(self)
            else:
                return visitor.visitChildren(self)



    def grantee_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Grantee_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 632
        self.enterRecursionRule(localctx, 632, self.RULE_grantee_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4837 
            self.grantee()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Grantee_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_grantee_list)
                    self.state = 4839
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4840
                    self.match(self.T__12)
                    self.state = 4841 
                    self.grantee() 
                self.state = 4846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GranteeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.GranteeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_grantee

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGrantee(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGrantee(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGrantee(self)
            else:
                return visitor.visitChildren(self)




    def grantee(self):

        localctx = PlPgSqlParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_grantee)
        try:
            self.state = 4850
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4847 
                self.roleId()

            elif token in [self.GROUP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4848
                self.match(self.GROUP_P)
                self.state = 4849 
                self.roleId()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_grant_grant_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_grant_grant_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_grant_grant_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_grant_grant_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_grant_grant_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_grant_grant_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_grant_grant_option(self):

        localctx = PlPgSqlParser.Opt_grant_grant_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_opt_grant_grant_option)
        try:
            self.state = 4856
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4852
                self.match(self.WITH)
                self.state = 4853
                self.match(self.GRANT)
                self.state = 4854
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_with_argtypes_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Function_with_argtypes_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypes_listContext,0)


        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_function_with_argtypes_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunction_with_argtypes_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunction_with_argtypes_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunction_with_argtypes_list(self)
            else:
                return visitor.visitChildren(self)



    def function_with_argtypes_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Function_with_argtypes_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 638
        self.enterRecursionRule(localctx, 638, self.RULE_function_with_argtypes_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4859 
            self.function_with_argtypes()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Function_with_argtypes_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_function_with_argtypes_list)
                    self.state = 4861
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4862
                    self.match(self.T__12)
                    self.state = 4863 
                    self.function_with_argtypes() 
                self.state = 4868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Function_with_argtypesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Function_with_argtypesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def func_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_function_with_argtypes

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunction_with_argtypes(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunction_with_argtypes(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunction_with_argtypes(self)
            else:
                return visitor.visitChildren(self)




    def function_with_argtypes(self):

        localctx = PlPgSqlParser.Function_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_function_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4869 
            self.func_name()
            self.state = 4870 
            self.func_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.GrantRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_grant_admin_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_grant_admin_optionContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def opt_granted_by(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_granted_byContext,0)


        def privilege_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_grantRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGrantRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGrantRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGrantRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def grantRoleStmt(self):

        localctx = PlPgSqlParser.GrantRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_grantRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4872
            self.match(self.GRANT)
            self.state = 4873 
            self.privilege_list(0)
            self.state = 4874
            self.match(self.TO)
            self.state = 4875 
            self.name_list(0)
            self.state = 4876 
            self.opt_grant_admin_option()
            self.state = 4877 
            self.opt_granted_by()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RevokeRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(PlPgSqlParser.ADMIN, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def opt_granted_by(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_granted_byContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Privilege_listContext,0)


        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(PlPgSqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_revokeRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRevokeRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRevokeRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRevokeRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def revokeRoleStmt(self):

        localctx = PlPgSqlParser.RevokeRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_revokeRoleStmt)
        try:
            self.state = 4896
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4879
                self.match(self.REVOKE)
                self.state = 4880 
                self.privilege_list(0)
                self.state = 4881
                self.match(self.FROM)
                self.state = 4882 
                self.name_list(0)
                self.state = 4883 
                self.opt_granted_by()
                self.state = 4884 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4886
                self.match(self.REVOKE)
                self.state = 4887
                self.match(self.ADMIN)
                self.state = 4888
                self.match(self.OPTION)
                self.state = 4889
                self.match(self.FOR)
                self.state = 4890 
                self.privilege_list(0)
                self.state = 4891
                self.match(self.FROM)
                self.state = 4892 
                self.name_list(0)
                self.state = 4893 
                self.opt_granted_by()
                self.state = 4894 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_grant_admin_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_grant_admin_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(PlPgSqlParser.ADMIN, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_grant_admin_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_grant_admin_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_grant_admin_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_grant_admin_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_grant_admin_option(self):

        localctx = PlPgSqlParser.Opt_grant_admin_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_opt_grant_admin_option)
        try:
            self.state = 4902
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4898
                self.match(self.WITH)
                self.state = 4899
                self.match(self.ADMIN)
                self.state = 4900
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_granted_byContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_granted_byContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GRANTED(self):
            return self.getToken(PlPgSqlParser.GRANTED, 0)

        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_granted_by

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_granted_by(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_granted_by(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_granted_by(self)
            else:
                return visitor.visitChildren(self)




    def opt_granted_by(self):

        localctx = PlPgSqlParser.Opt_granted_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_opt_granted_by)
        try:
            self.state = 4908
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4904
                self.match(self.GRANTED)
                self.state = 4905
                self.match(self.BY)
                self.state = 4906 
                self.roleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDefaultPrivilegesStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterDefaultPrivilegesStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def defACLAction(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefACLActionContext,0)


        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def PRIVILEGES(self):
            return self.getToken(PlPgSqlParser.PRIVILEGES, 0)

        def defACLOptionList(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefACLOptionListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterDefaultPrivilegesStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterDefaultPrivilegesStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterDefaultPrivilegesStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterDefaultPrivilegesStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDefaultPrivilegesStmt(self):

        localctx = PlPgSqlParser.AlterDefaultPrivilegesStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_alterDefaultPrivilegesStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4910
            self.match(self.ALTER)
            self.state = 4911
            self.match(self.DEFAULT)
            self.state = 4912
            self.match(self.PRIVILEGES)
            self.state = 4913 
            self.defACLOptionList(0)
            self.state = 4914 
            self.defACLAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefACLOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DefACLOptionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def defACLOptionList(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefACLOptionListContext,0)


        def defACLOption(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefACLOptionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_defACLOptionList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefACLOptionList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefACLOptionList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefACLOptionList(self)
            else:
                return visitor.visitChildren(self)



    def defACLOptionList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.DefACLOptionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 652
        self.enterRecursionRule(localctx, 652, self.RULE_defACLOptionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 4921
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.DefACLOptionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_defACLOptionList)
                    self.state = 4917
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 4918 
                    self.defACLOption() 
                self.state = 4923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DefACLOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DefACLOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_defACLOption

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefACLOption(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefACLOption(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefACLOption(self)
            else:
                return visitor.visitChildren(self)




    def defACLOption(self):

        localctx = PlPgSqlParser.DefACLOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_defACLOption)
        try:
            self.state = 4933
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4924
                self.match(self.IN_P)
                self.state = 4925
                self.match(self.SCHEMA)
                self.state = 4926 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4927
                self.match(self.FOR)
                self.state = 4928
                self.match(self.ROLE)
                self.state = 4929 
                self.name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4930
                self.match(self.FOR)
                self.state = 4931
                self.match(self.USER)
                self.state = 4932 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefACLActionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DefACLActionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def opt_grant_grant_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_grant_grant_optionContext,0)


        def privileges(self):
            return self.getTypedRuleContext(PlPgSqlParser.PrivilegesContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def defacl_privilege_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Defacl_privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Grantee_listContext,0)


        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(PlPgSqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_defACLAction

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefACLAction(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefACLAction(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefACLAction(self)
            else:
                return visitor.visitChildren(self)




    def defACLAction(self):

        localctx = PlPgSqlParser.DefACLActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_defACLAction)
        try:
            self.state = 4962
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4935
                self.match(self.GRANT)
                self.state = 4936 
                self.privileges()
                self.state = 4937
                self.match(self.ON)
                self.state = 4938 
                self.defacl_privilege_target()
                self.state = 4939
                self.match(self.TO)
                self.state = 4940 
                self.grantee_list(0)
                self.state = 4941 
                self.opt_grant_grant_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4943
                self.match(self.REVOKE)
                self.state = 4944 
                self.privileges()
                self.state = 4945
                self.match(self.ON)
                self.state = 4946 
                self.defacl_privilege_target()
                self.state = 4947
                self.match(self.FROM)
                self.state = 4948 
                self.grantee_list(0)
                self.state = 4949 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4951
                self.match(self.REVOKE)
                self.state = 4952
                self.match(self.GRANT)
                self.state = 4953
                self.match(self.OPTION)
                self.state = 4954
                self.match(self.FOR)
                self.state = 4955 
                self.privileges()
                self.state = 4956
                self.match(self.ON)
                self.state = 4957 
                self.defacl_privilege_target()
                self.state = 4958
                self.match(self.FROM)
                self.state = 4959 
                self.grantee_list(0)
                self.state = 4960 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Defacl_privilege_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Defacl_privilege_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(PlPgSqlParser.TABLES, 0)

        def TYPES_P(self):
            return self.getToken(PlPgSqlParser.TYPES_P, 0)

        def FUNCTIONS(self):
            return self.getToken(PlPgSqlParser.FUNCTIONS, 0)

        def SEQUENCES(self):
            return self.getToken(PlPgSqlParser.SEQUENCES, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_defacl_privilege_target

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDefacl_privilege_target(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDefacl_privilege_target(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDefacl_privilege_target(self)
            else:
                return visitor.visitChildren(self)




    def defacl_privilege_target(self):

        localctx = PlPgSqlParser.Defacl_privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_defacl_privilege_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4964
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.FUNCTIONS or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (self.SEQUENCES - 320)) | (1 << (self.TABLES - 320)) | (1 << (self.TYPES_P - 320)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.IndexStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Where_clauseContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def index_params(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_paramsContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def optTableSpace(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTableSpaceContext,0)


        def opt_unique(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_uniqueContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_method_clauseContext,0)


        def opt_reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_reloptionsContext,0)


        def opt_concurrently(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_concurrentlyContext,0)


        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def opt_index_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_index_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_indexStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndexStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndexStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndexStmt(self)
            else:
                return visitor.visitChildren(self)




    def indexStmt(self):

        localctx = PlPgSqlParser.IndexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_indexStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4966
            self.match(self.CREATE)
            self.state = 4967 
            self.opt_unique()
            self.state = 4968
            self.match(self.INDEX)
            self.state = 4969 
            self.opt_concurrently()
            self.state = 4970 
            self.opt_index_name()
            self.state = 4971
            self.match(self.ON)
            self.state = 4972 
            self.qualified_name()
            self.state = 4973 
            self.access_method_clause()
            self.state = 4974
            self.match(self.T__7)
            self.state = 4975 
            self.index_params(0)
            self.state = 4976
            self.match(self.T__13)
            self.state = 4977 
            self.opt_reloptions()
            self.state = 4978 
            self.optTableSpace()
            self.state = 4979 
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_uniqueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_uniqueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(PlPgSqlParser.UNIQUE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_unique

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_unique(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_unique(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_unique(self)
            else:
                return visitor.visitChildren(self)




    def opt_unique(self):

        localctx = PlPgSqlParser.Opt_uniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_opt_unique)
        try:
            self.state = 4983
            token = self._input.LA(1)
            if token in [self.UNIQUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4981
                self.match(self.UNIQUE)

            elif token in [self.INDEX]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_concurrentlyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_concurrentlyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(PlPgSqlParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_concurrently

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_concurrently(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_concurrently(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_concurrently(self)
            else:
                return visitor.visitChildren(self)




    def opt_concurrently(self):

        localctx = PlPgSqlParser.Opt_concurrentlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_opt_concurrently)
        try:
            self.state = 4987
            token = self._input.LA(1)
            if token in [self.CONCURRENTLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4985
                self.match(self.CONCURRENTLY)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.ON, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_index_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_index_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_index_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_index_name(self)
            else:
                return visitor.visitChildren(self)




    def opt_index_name(self):

        localctx = PlPgSqlParser.Opt_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_opt_index_name)
        try:
            self.state = 4991
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4989 
                self.index_name()

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Access_method_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Access_method_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_access_method_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAccess_method_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAccess_method_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAccess_method_clause(self)
            else:
                return visitor.visitChildren(self)




    def access_method_clause(self):

        localctx = PlPgSqlParser.Access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_access_method_clause)
        try:
            self.state = 4996
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4993
                self.match(self.USING)
                self.state = 4994 
                self.access_method()

            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_paramsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Index_paramsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_params(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_paramsContext,0)


        def index_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_elemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_index_params

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndex_params(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndex_params(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndex_params(self)
            else:
                return visitor.visitChildren(self)



    def index_params(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Index_paramsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 670
        self.enterRecursionRule(localctx, 670, self.RULE_index_params, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4999 
            self.index_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Index_paramsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_index_params)
                    self.state = 5001
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5002
                    self.match(self.T__12)
                    self.state = 5003 
                    self.index_elem() 
                self.state = 5008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Index_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Index_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_exprContext,0)


        def opt_asc_desc(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_asc_descContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def opt_class(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_classContext,0)


        def opt_nulls_order(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_nulls_orderContext,0)


        def opt_collate(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_collateContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_index_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndex_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndex_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndex_elem(self)
            else:
                return visitor.visitChildren(self)




    def index_elem(self):

        localctx = PlPgSqlParser.Index_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_index_elem)
        try:
            self.state = 5029
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5009 
                self.colId()
                self.state = 5010 
                self.opt_collate()
                self.state = 5011 
                self.opt_class()
                self.state = 5012 
                self.opt_asc_desc()
                self.state = 5013 
                self.opt_nulls_order()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5015 
                self.func_expr()
                self.state = 5016 
                self.opt_collate()
                self.state = 5017 
                self.opt_class()
                self.state = 5018 
                self.opt_asc_desc()
                self.state = 5019 
                self.opt_nulls_order()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5021
                self.match(self.T__7)
                self.state = 5022 
                self.a_expr(0)
                self.state = 5023
                self.match(self.T__13)
                self.state = 5024 
                self.opt_collate()
                self.state = 5025 
                self.opt_class()
                self.state = 5026 
                self.opt_asc_desc()
                self.state = 5027 
                self.opt_nulls_order()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_collateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_collateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def COLLATE(self):
            return self.getToken(PlPgSqlParser.COLLATE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_collate

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_collate(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_collate(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_collate(self)
            else:
                return visitor.visitChildren(self)




    def opt_collate(self):

        localctx = PlPgSqlParser.Opt_collateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_opt_collate)
        try:
            self.state = 5034
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5031
                self.match(self.COLLATE)
                self.state = 5032 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_classContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_classContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_class

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_class(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_class(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_class(self)
            else:
                return visitor.visitChildren(self)




    def opt_class(self):

        localctx = PlPgSqlParser.Opt_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_opt_class)
        try:
            self.state = 5040
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5036 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5037
                self.match(self.USING)
                self.state = 5038 
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_asc_descContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_asc_descContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESC(self):
            return self.getToken(PlPgSqlParser.DESC, 0)

        def ASC(self):
            return self.getToken(PlPgSqlParser.ASC, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_asc_desc

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_asc_desc(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_asc_desc(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_asc_desc(self)
            else:
                return visitor.visitChildren(self)




    def opt_asc_desc(self):

        localctx = PlPgSqlParser.Opt_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_opt_asc_desc)
        try:
            self.state = 5045
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5042
                self.match(self.ASC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5043
                self.match(self.DESC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_nulls_orderContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_nulls_orderContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULLS_LAST(self):
            return self.getToken(PlPgSqlParser.NULLS_LAST, 0)

        def NULLS_FIRST(self):
            return self.getToken(PlPgSqlParser.NULLS_FIRST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_nulls_order

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_nulls_order(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_nulls_order(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_nulls_order(self)
            else:
                return visitor.visitChildren(self)




    def opt_nulls_order(self):

        localctx = PlPgSqlParser.Opt_nulls_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_opt_nulls_order)
        try:
            self.state = 5050
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5047
                self.match(self.NULLS_FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5048
                self.match(self.NULLS_LAST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateFunctionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_or_replace(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_or_replaceContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def func_args_with_defaults(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_args_with_defaultsContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def RETURNS(self):
            return self.getToken(PlPgSqlParser.RETURNS, 0)

        def func_return(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_returnContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createfunc_opt_listContext,0)


        def table_func_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Table_func_column_listContext,0)


        def opt_definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_definitionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createFunctionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateFunctionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateFunctionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateFunctionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createFunctionStmt(self):

        localctx = PlPgSqlParser.CreateFunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_createFunctionStmt)
        try:
            self.state = 5083
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5052
                self.match(self.CREATE)
                self.state = 5053 
                self.opt_or_replace()
                self.state = 5054
                self.match(self.FUNCTION)
                self.state = 5055 
                self.func_name()
                self.state = 5056 
                self.func_args_with_defaults()
                self.state = 5057
                self.match(self.RETURNS)
                self.state = 5058 
                self.func_return()
                self.state = 5059 
                self.createfunc_opt_list(0)
                self.state = 5060 
                self.opt_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5062
                self.match(self.CREATE)
                self.state = 5063 
                self.opt_or_replace()
                self.state = 5064
                self.match(self.FUNCTION)
                self.state = 5065 
                self.func_name()
                self.state = 5066 
                self.func_args_with_defaults()
                self.state = 5067
                self.match(self.RETURNS)
                self.state = 5068
                self.match(self.TABLE)
                self.state = 5069
                self.match(self.T__7)
                self.state = 5070 
                self.table_func_column_list(0)
                self.state = 5071
                self.match(self.T__13)
                self.state = 5072 
                self.createfunc_opt_list(0)
                self.state = 5073 
                self.opt_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5075
                self.match(self.CREATE)
                self.state = 5076 
                self.opt_or_replace()
                self.state = 5077
                self.match(self.FUNCTION)
                self.state = 5078 
                self.func_name()
                self.state = 5079 
                self.func_args_with_defaults()
                self.state = 5080 
                self.createfunc_opt_list(0)
                self.state = 5081 
                self.opt_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_or_replaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_or_replaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(PlPgSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlPgSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_or_replace

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_or_replace(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_or_replace(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_or_replace(self)
            else:
                return visitor.visitChildren(self)




    def opt_or_replace(self):

        localctx = PlPgSqlParser.Opt_or_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_opt_or_replace)
        try:
            self.state = 5088
            token = self._input.LA(1)
            if token in [self.OR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5085
                self.match(self.OR)
                self.state = 5086
                self.match(self.REPLACE)

            elif token in [self.FUNCTION, self.LANGUAGE, self.PROCEDURAL, self.RULE, self.TRUSTED]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_args_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_args

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_args(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_args(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_args(self)
            else:
                return visitor.visitChildren(self)




    def func_args(self):

        localctx = PlPgSqlParser.Func_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_func_args)
        try:
            self.state = 5096
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5090
                self.match(self.T__7)
                self.state = 5091 
                self.func_args_list(0)
                self.state = 5092
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5094
                self.match(self.T__7)
                self.state = 5095
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_args_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_args_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_args_listContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_args_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_args_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_args_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_args_list(self)
            else:
                return visitor.visitChildren(self)



    def func_args_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Func_args_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 688
        self.enterRecursionRule(localctx, 688, self.RULE_func_args_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5099 
            self.func_arg()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Func_args_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_args_list)
                    self.state = 5101
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5102
                    self.match(self.T__12)
                    self.state = 5103 
                    self.func_arg() 
                self.state = 5108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_args_with_defaultsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_args_with_defaultsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_args_with_defaults

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_args_with_defaults(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_args_with_defaults(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_args_with_defaults(self)
            else:
                return visitor.visitChildren(self)




    def func_args_with_defaults(self):

        localctx = PlPgSqlParser.Func_args_with_defaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_func_args_with_defaults)
        try:
            self.state = 5115
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5109
                self.match(self.T__7)
                self.state = 5110 
                self.func_args_with_defaults_list(0)
                self.state = 5111
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5113
                self.match(self.T__7)
                self.state = 5114
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_args_with_defaults_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_args_with_defaults_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_arg_with_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_with_defaultContext,0)


        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_args_with_defaults_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_args_with_defaults_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_args_with_defaults_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_args_with_defaults_list(self)
            else:
                return visitor.visitChildren(self)



    def func_args_with_defaults_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Func_args_with_defaults_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 692
        self.enterRecursionRule(localctx, 692, self.RULE_func_args_with_defaults_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5118 
            self.func_arg_with_default()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Func_args_with_defaults_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_args_with_defaults_list)
                    self.state = 5120
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5121
                    self.match(self.T__12)
                    self.state = 5122 
                    self.func_arg_with_default() 
                self.state = 5127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arg_class(self):
            return self.getTypedRuleContext(PlPgSqlParser.Arg_classContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Param_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = PlPgSqlParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_func_arg)
        try:
            self.state = 5143
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5128 
                self.arg_class()
                self.state = 5129 
                self.param_name()
                self.state = 5130 
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5132 
                self.param_name()
                self.state = 5133 
                self.arg_class()
                self.state = 5134 
                self.func_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5136 
                self.param_name()
                self.state = 5137 
                self.func_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5139 
                self.arg_class()
                self.state = 5140 
                self.func_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5142 
                self.func_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arg_classContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Arg_classContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUT_P(self):
            return self.getToken(PlPgSqlParser.OUT_P, 0)

        def VARIADIC(self):
            return self.getToken(PlPgSqlParser.VARIADIC, 0)

        def INOUT(self):
            return self.getToken(PlPgSqlParser.INOUT, 0)

        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_arg_class

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterArg_class(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitArg_class(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitArg_class(self)
            else:
                return visitor.visitChildren(self)




    def arg_class(self):

        localctx = PlPgSqlParser.Arg_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_arg_class)
        try:
            self.state = 5151
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5145
                self.match(self.IN_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5146
                self.match(self.OUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5147
                self.match(self.INOUT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5148
                self.match(self.IN_P)
                self.state = 5149
                self.match(self.OUT_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5150
                self.match(self.VARIADIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Param_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_function_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_param_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterParam_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitParam_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitParam_name(self)
            else:
                return visitor.visitChildren(self)




    def param_name(self):

        localctx = PlPgSqlParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5153 
            self.type_function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_returnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_returnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_typeContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_return

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_return(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_return(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_return(self)
            else:
                return visitor.visitChildren(self)




    def func_return(self):

        localctx = PlPgSqlParser.Func_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_func_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5155 
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_function_nameContext,0)


        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PlPgSqlParser.AttrsContext,0)


        def SETOF(self):
            return self.getToken(PlPgSqlParser.SETOF, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)




    def func_type(self):

        localctx = PlPgSqlParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_func_type)
        try:
            self.state = 5169
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5157 
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5158 
                self.type_function_name()
                self.state = 5159 
                self.attrs(0)
                self.state = 5160
                self.match(self.T__16)
                self.state = 5161
                self.match(self.TYPE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5163
                self.match(self.SETOF)
                self.state = 5164 
                self.type_function_name()
                self.state = 5165 
                self.attrs(0)
                self.state = 5166
                self.match(self.T__16)
                self.state = 5167
                self.match(self.TYPE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_arg_with_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_arg_with_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_arg_with_default

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_arg_with_default(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_arg_with_default(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_arg_with_default(self)
            else:
                return visitor.visitChildren(self)




    def func_arg_with_default(self):

        localctx = PlPgSqlParser.Func_arg_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_func_arg_with_default)
        try:
            self.state = 5180
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5171 
                self.func_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5172 
                self.func_arg()
                self.state = 5173
                self.match(self.DEFAULT)
                self.state = 5174 
                self.a_expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5176 
                self.func_arg()
                self.state = 5177
                self.match(self.T__4)
                self.state = 5178 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createfunc_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Createfunc_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createfunc_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createfunc_opt_itemContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createfunc_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createfunc_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatefunc_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatefunc_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatefunc_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def createfunc_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Createfunc_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 706
        self.enterRecursionRule(localctx, 706, self.RULE_createfunc_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5183 
            self.createfunc_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5189
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Createfunc_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_createfunc_opt_list)
                    self.state = 5185
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5186 
                    self.createfunc_opt_item() 
                self.state = 5191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Common_func_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Common_func_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INVOKER(self):
            return self.getToken(PlPgSqlParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(PlPgSqlParser.DEFINER, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def VOLATILE(self):
            return self.getToken(PlPgSqlParser.VOLATILE, 0)

        def STRICT_P(self):
            return self.getToken(PlPgSqlParser.STRICT_P, 0)

        def EXTERNAL(self):
            return self.getToken(PlPgSqlParser.EXTERNAL, 0)

        def NULL_P(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.NULL_P)
            else:
                return self.getToken(PlPgSqlParser.NULL_P, i)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def LEAKPROOF(self):
            return self.getToken(PlPgSqlParser.LEAKPROOF, 0)

        def ROWS(self):
            return self.getToken(PlPgSqlParser.ROWS, 0)

        def STABLE(self):
            return self.getToken(PlPgSqlParser.STABLE, 0)

        def SECURITY(self):
            return self.getToken(PlPgSqlParser.SECURITY, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def COST(self):
            return self.getToken(PlPgSqlParser.COST, 0)

        def CALLED(self):
            return self.getToken(PlPgSqlParser.CALLED, 0)

        def INPUT_P(self):
            return self.getToken(PlPgSqlParser.INPUT_P, 0)

        def RETURNS(self):
            return self.getToken(PlPgSqlParser.RETURNS, 0)

        def IMMUTABLE(self):
            return self.getToken(PlPgSqlParser.IMMUTABLE, 0)

        def functionsetResetClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.FunctionsetResetClauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_common_func_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCommon_func_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCommon_func_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCommon_func_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def common_func_opt_item(self):

        localctx = PlPgSqlParser.Common_func_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_common_func_opt_item)
        try:
            self.state = 5223
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5192
                self.match(self.CALLED)
                self.state = 5193
                self.match(self.ON)
                self.state = 5194
                self.match(self.NULL_P)
                self.state = 5195
                self.match(self.INPUT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5196
                self.match(self.RETURNS)
                self.state = 5197
                self.match(self.NULL_P)
                self.state = 5198
                self.match(self.ON)
                self.state = 5199
                self.match(self.NULL_P)
                self.state = 5200
                self.match(self.INPUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5201
                self.match(self.STRICT_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5202
                self.match(self.IMMUTABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5203
                self.match(self.STABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5204
                self.match(self.VOLATILE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5205
                self.match(self.EXTERNAL)
                self.state = 5206
                self.match(self.SECURITY)
                self.state = 5207
                self.match(self.DEFINER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5208
                self.match(self.EXTERNAL)
                self.state = 5209
                self.match(self.SECURITY)
                self.state = 5210
                self.match(self.INVOKER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5211
                self.match(self.SECURITY)
                self.state = 5212
                self.match(self.DEFINER)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5213
                self.match(self.SECURITY)
                self.state = 5214
                self.match(self.INVOKER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5215
                self.match(self.LEAKPROOF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5216
                self.match(self.NOT)
                self.state = 5217
                self.match(self.LEAKPROOF)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5218
                self.match(self.COST)
                self.state = 5219 
                self.numericOnly()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5220
                self.match(self.ROWS)
                self.state = 5221 
                self.numericOnly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5222 
                self.functionsetResetClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createfunc_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Createfunc_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def func_as(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_asContext,0)


        def common_func_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Common_func_opt_itemContext,0)


        def WINDOW(self):
            return self.getToken(PlPgSqlParser.WINDOW, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createfunc_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatefunc_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatefunc_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatefunc_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def createfunc_opt_item(self):

        localctx = PlPgSqlParser.Createfunc_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_createfunc_opt_item)
        try:
            self.state = 5231
            token = self._input.LA(1)
            if token in [self.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5225
                self.match(self.AS)
                self.state = 5226 
                self.func_as()

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5227
                self.match(self.LANGUAGE)
                self.state = 5228 
                self.colId_or_Sconst()

            elif token in [self.WINDOW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5229
                self.match(self.WINDOW)

            elif token in [self.CALLED, self.COST, self.EXTERNAL, self.IMMUTABLE, self.LEAKPROOF, self.NOT, self.RESET, self.RETURNS, self.ROWS, self.SECURITY, self.SET, self.STABLE, self.STRICT_P, self.VOLATILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5230 
                self.common_func_opt_item()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_asContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_asContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.SConstContext,i)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_as

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_as(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_as(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_as(self)
            else:
                return visitor.visitChildren(self)




    def func_as(self):

        localctx = PlPgSqlParser.Func_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_func_as)
        try:
            self.state = 5238
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5233 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5234 
                self.sConst()
                self.state = 5235
                self.match(self.T__12)
                self.state = 5236 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefinitionContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_definition

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_definition(self)
            else:
                return visitor.visitChildren(self)




    def opt_definition(self):

        localctx = PlPgSqlParser.Opt_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_opt_definition)
        try:
            self.state = 5243
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5240
                self.match(self.WITH)
                self.state = 5241 
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_func_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Table_func_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Param_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_table_func_column

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTable_func_column(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTable_func_column(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTable_func_column(self)
            else:
                return visitor.visitChildren(self)




    def table_func_column(self):

        localctx = PlPgSqlParser.Table_func_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_table_func_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5245 
            self.param_name()
            self.state = 5246 
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_func_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Table_func_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_func_column(self):
            return self.getTypedRuleContext(PlPgSqlParser.Table_func_columnContext,0)


        def table_func_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Table_func_column_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_table_func_column_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTable_func_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTable_func_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTable_func_column_list(self)
            else:
                return visitor.visitChildren(self)



    def table_func_column_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Table_func_column_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 718
        self.enterRecursionRule(localctx, 718, self.RULE_table_func_column_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249 
            self.table_func_column()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Table_func_column_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_func_column_list)
                    self.state = 5251
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5252
                    self.match(self.T__12)
                    self.state = 5253 
                    self.table_func_column() 
                self.state = 5258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterFunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterFunctionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alterfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def opt_restrict(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_restrictContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterFunctionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterFunctionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterFunctionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterFunctionStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterFunctionStmt(self):

        localctx = PlPgSqlParser.AlterFunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_alterFunctionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5259
            self.match(self.ALTER)
            self.state = 5260
            self.match(self.FUNCTION)
            self.state = 5261 
            self.function_with_argtypes()
            self.state = 5262 
            self.alterfunc_opt_list(0)
            self.state = 5263 
            self.opt_restrict()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alterfunc_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alterfunc_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_func_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Common_func_opt_itemContext,0)


        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alterfunc_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterfunc_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterfunc_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterfunc_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterfunc_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alterfunc_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alterfunc_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 722
        self.enterRecursionRule(localctx, 722, self.RULE_alterfunc_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5266 
            self.common_func_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alterfunc_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alterfunc_opt_list)
                    self.state = 5268
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5269 
                    self.common_func_opt_item() 
                self.state = 5274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_restrictContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_restrictContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(PlPgSqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_restrict

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_restrict(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_restrict(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_restrict(self)
            else:
                return visitor.visitChildren(self)




    def opt_restrict(self):

        localctx = PlPgSqlParser.Opt_restrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_opt_restrict)
        try:
            self.state = 5277
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5275
                self.match(self.RESTRICT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveFuncStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RemoveFuncStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def func_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_argsContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_removeFuncStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRemoveFuncStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRemoveFuncStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRemoveFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeFuncStmt(self):

        localctx = PlPgSqlParser.RemoveFuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_removeFuncStmt)
        try:
            self.state = 5293
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5279
                self.match(self.DROP)
                self.state = 5280
                self.match(self.FUNCTION)
                self.state = 5281 
                self.func_name()
                self.state = 5282 
                self.func_args()
                self.state = 5283 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5285
                self.match(self.DROP)
                self.state = 5286
                self.match(self.FUNCTION)
                self.state = 5287
                self.match(self.IF_P)
                self.state = 5288
                self.match(self.EXISTS)
                self.state = 5289 
                self.func_name()
                self.state = 5290 
                self.func_args()
                self.state = 5291 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveAggrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RemoveAggrStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_removeAggrStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRemoveAggrStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRemoveAggrStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRemoveAggrStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeAggrStmt(self):

        localctx = PlPgSqlParser.RemoveAggrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_removeAggrStmt)
        try:
            self.state = 5309
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5295
                self.match(self.DROP)
                self.state = 5296
                self.match(self.AGGREGATE)
                self.state = 5297 
                self.func_name()
                self.state = 5298 
                self.aggr_args()
                self.state = 5299 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5301
                self.match(self.DROP)
                self.state = 5302
                self.match(self.AGGREGATE)
                self.state = 5303
                self.match(self.IF_P)
                self.state = 5304
                self.match(self.EXISTS)
                self.state = 5305 
                self.func_name()
                self.state = 5306 
                self.aggr_args()
                self.state = 5307 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveOperStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RemoveOperStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_removeOperStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRemoveOperStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRemoveOperStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRemoveOperStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeOperStmt(self):

        localctx = PlPgSqlParser.RemoveOperStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_removeOperStmt)
        try:
            self.state = 5325
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5311
                self.match(self.DROP)
                self.state = 5312
                self.match(self.OPERATOR)
                self.state = 5313 
                self.any_operator()
                self.state = 5314 
                self.oper_argtypes()
                self.state = 5315 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5317
                self.match(self.DROP)
                self.state = 5318
                self.match(self.OPERATOR)
                self.state = 5319
                self.match(self.IF_P)
                self.state = 5320
                self.match(self.EXISTS)
                self.state = 5321 
                self.any_operator()
                self.state = 5322 
                self.oper_argtypes()
                self.state = 5323 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Oper_argtypesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Oper_argtypesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,i)


        def NONE(self):
            return self.getToken(PlPgSqlParser.NONE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_oper_argtypes

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOper_argtypes(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOper_argtypes(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOper_argtypes(self)
            else:
                return visitor.visitChildren(self)




    def oper_argtypes(self):

        localctx = PlPgSqlParser.Oper_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_oper_argtypes)
        try:
            self.state = 5349
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5327
                self.match(self.T__7)
                self.state = 5328 
                self.typename()
                self.state = 5329
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5331
                self.match(self.T__7)
                self.state = 5332 
                self.typename()
                self.state = 5333
                self.match(self.T__12)
                self.state = 5334 
                self.typename()
                self.state = 5335
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5337
                self.match(self.T__7)
                self.state = 5338
                self.match(self.NONE)
                self.state = 5339
                self.match(self.T__12)
                self.state = 5340 
                self.typename()
                self.state = 5341
                self.match(self.T__13)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5343
                self.match(self.T__7)
                self.state = 5344 
                self.typename()
                self.state = 5345
                self.match(self.T__12)
                self.state = 5346
                self.match(self.NONE)
                self.state = 5347
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Any_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def all_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.All_OpContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_any_operator

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAny_operator(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAny_operator(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAny_operator(self)
            else:
                return visitor.visitChildren(self)




    def any_operator(self):

        localctx = PlPgSqlParser.Any_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_any_operator)
        try:
            self.state = 5356
            token = self._input.LA(1)
            if token in [self.T__16, self.T__15, self.T__11, self.T__10, self.T__9, self.T__5, self.T__4, self.T__2, self.T__1, self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5351 
                self.all_Op()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5352 
                self.colId()
                self.state = 5353
                self.match(self.T__14)
                self.state = 5354 
                self.any_operator()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DoStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(PlPgSqlParser.DO, 0)

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Dostmt_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_doStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDoStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDoStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDoStmt(self)
            else:
                return visitor.visitChildren(self)




    def doStmt(self):

        localctx = PlPgSqlParser.DoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_doStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5358
            self.match(self.DO)
            self.state = 5359 
            self.dostmt_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dostmt_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Dostmt_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Dostmt_opt_listContext,0)


        def dostmt_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Dostmt_opt_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dostmt_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDostmt_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDostmt_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDostmt_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def dostmt_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Dostmt_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 738
        self.enterRecursionRule(localctx, 738, self.RULE_dostmt_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5362 
            self.dostmt_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Dostmt_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dostmt_opt_list)
                    self.state = 5364
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 5365 
                    self.dostmt_opt_item() 
                self.state = 5370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Dostmt_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Dostmt_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColId_or_SconstContext,0)


        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dostmt_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDostmt_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDostmt_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDostmt_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def dostmt_opt_item(self):

        localctx = PlPgSqlParser.Dostmt_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_dostmt_opt_item)
        try:
            self.state = 5374
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5371 
                self.sConst()

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5372
                self.match(self.LANGUAGE)
                self.state = 5373 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateCastStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateCastStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def cast_context(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cast_contextContext,0)


        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def INOUT(self):
            return self.getToken(PlPgSqlParser.INOUT, 0)

        def WITHOUT(self):
            return self.getToken(PlPgSqlParser.WITHOUT, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createCastStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateCastStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateCastStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateCastStmt(self)
            else:
                return visitor.visitChildren(self)




    def createCastStmt(self):

        localctx = PlPgSqlParser.CreateCastStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_createCastStmt)
        try:
            self.state = 5410
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5376
                self.match(self.CREATE)
                self.state = 5377
                self.match(self.CAST)
                self.state = 5378
                self.match(self.T__7)
                self.state = 5379 
                self.typename()
                self.state = 5380
                self.match(self.AS)
                self.state = 5381 
                self.typename()
                self.state = 5382
                self.match(self.T__13)
                self.state = 5383
                self.match(self.WITH)
                self.state = 5384
                self.match(self.FUNCTION)
                self.state = 5385 
                self.function_with_argtypes()
                self.state = 5386 
                self.cast_context()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5388
                self.match(self.CREATE)
                self.state = 5389
                self.match(self.CAST)
                self.state = 5390
                self.match(self.T__7)
                self.state = 5391 
                self.typename()
                self.state = 5392
                self.match(self.AS)
                self.state = 5393 
                self.typename()
                self.state = 5394
                self.match(self.T__13)
                self.state = 5395
                self.match(self.WITHOUT)
                self.state = 5396
                self.match(self.FUNCTION)
                self.state = 5397 
                self.cast_context()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5399
                self.match(self.CREATE)
                self.state = 5400
                self.match(self.CAST)
                self.state = 5401
                self.match(self.T__7)
                self.state = 5402 
                self.typename()
                self.state = 5403
                self.match(self.AS)
                self.state = 5404 
                self.typename()
                self.state = 5405
                self.match(self.T__13)
                self.state = 5406
                self.match(self.WITH)
                self.state = 5407
                self.match(self.INOUT)
                self.state = 5408 
                self.cast_context()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_contextContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cast_contextContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def IMPLICIT_P(self):
            return self.getToken(PlPgSqlParser.IMPLICIT_P, 0)

        def ASSIGNMENT(self):
            return self.getToken(PlPgSqlParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cast_context

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCast_context(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCast_context(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCast_context(self)
            else:
                return visitor.visitChildren(self)




    def cast_context(self):

        localctx = PlPgSqlParser.Cast_contextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_cast_context)
        try:
            self.state = 5417
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5412
                self.match(self.AS)
                self.state = 5413
                self.match(self.IMPLICIT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5414
                self.match(self.AS)
                self.state = 5415
                self.match(self.ASSIGNMENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropCastStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropCastStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,i)


        def opt_if_exists(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_if_existsContext,0)


        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropCastStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropCastStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropCastStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropCastStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropCastStmt(self):

        localctx = PlPgSqlParser.DropCastStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_dropCastStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5419
            self.match(self.DROP)
            self.state = 5420
            self.match(self.CAST)
            self.state = 5421 
            self.opt_if_exists()
            self.state = 5422
            self.match(self.T__7)
            self.state = 5423 
            self.typename()
            self.state = 5424
            self.match(self.AS)
            self.state = 5425 
            self.typename()
            self.state = 5426
            self.match(self.T__13)
            self.state = 5427 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_if_existsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_if_existsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_if_exists

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_if_exists(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_if_exists(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_if_exists(self)
            else:
                return visitor.visitChildren(self)




    def opt_if_exists(self):

        localctx = PlPgSqlParser.Opt_if_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_opt_if_exists)
        try:
            self.state = 5432
            token = self._input.LA(1)
            if token in [self.IF_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5429
                self.match(self.IF_P)
                self.state = 5430
                self.match(self.EXISTS)

            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReindexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ReindexStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def SYSTEM_P(self):
            return self.getToken(PlPgSqlParser.SYSTEM_P, 0)

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def opt_force(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_forceContext,0)


        def reindex_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reindex_typeContext,0)


        def REINDEX(self):
            return self.getToken(PlPgSqlParser.REINDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reindexStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReindexStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReindexStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReindexStmt(self)
            else:
                return visitor.visitChildren(self)




    def reindexStmt(self):

        localctx = PlPgSqlParser.ReindexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_reindexStmt)
        try:
            self.state = 5449
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5434
                self.match(self.REINDEX)
                self.state = 5435 
                self.reindex_type()
                self.state = 5436 
                self.qualified_name()
                self.state = 5437 
                self.opt_force()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5439
                self.match(self.REINDEX)
                self.state = 5440
                self.match(self.SYSTEM_P)
                self.state = 5441 
                self.name()
                self.state = 5442 
                self.opt_force()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5444
                self.match(self.REINDEX)
                self.state = 5445
                self.match(self.DATABASE)
                self.state = 5446 
                self.name()
                self.state = 5447 
                self.opt_force()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Reindex_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reindex_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReindex_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReindex_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReindex_type(self)
            else:
                return visitor.visitChildren(self)




    def reindex_type(self):

        localctx = PlPgSqlParser.Reindex_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_reindex_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5451
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.INDEX or _la==PlPgSqlParser.TABLE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_forceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_forceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FORCE(self):
            return self.getToken(PlPgSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_force

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_force(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_force(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_force(self)
            else:
                return visitor.visitChildren(self)




    def opt_force(self):

        localctx = PlPgSqlParser.Opt_forceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_opt_force)
        try:
            self.state = 5455
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5453
                self.match(self.FORCE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RenameStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(PlPgSqlParser.RESET, 0)

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.NameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.NameContext,i)


        def RENAME(self):
            return self.getToken(PlPgSqlParser.RENAME, 0)

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def TRIGGER(self):
            return self.getToken(PlPgSqlParser.TRIGGER, 0)

        def opt_column(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_columnContext,0)


        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(PlPgSqlParser.ROLE, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def ATTRIBUTE(self):
            return self.getToken(PlPgSqlParser.ATTRIBUTE, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def roleId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.RoleIdContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,i)


        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def database_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,i)


        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.ReloptionsContext,0)


        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def INDEX(self):
            return self.getToken(PlPgSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_renameStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRenameStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRenameStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRenameStmt(self)
            else:
                return visitor.visitChildren(self)




    def renameStmt(self):

        localctx = PlPgSqlParser.RenameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_renameStmt)
        try:
            self.state = 5795
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5457
                self.match(self.ALTER)
                self.state = 5458
                self.match(self.AGGREGATE)
                self.state = 5459 
                self.func_name()
                self.state = 5460 
                self.aggr_args()
                self.state = 5461
                self.match(self.RENAME)
                self.state = 5462
                self.match(self.TO)
                self.state = 5463 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5465
                self.match(self.ALTER)
                self.state = 5466
                self.match(self.COLLATION)
                self.state = 5467 
                self.any_name()
                self.state = 5468
                self.match(self.RENAME)
                self.state = 5469
                self.match(self.TO)
                self.state = 5470 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5472
                self.match(self.ALTER)
                self.state = 5473
                self.match(self.CONVERSION_P)
                self.state = 5474 
                self.any_name()
                self.state = 5475
                self.match(self.RENAME)
                self.state = 5476
                self.match(self.TO)
                self.state = 5477 
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5479
                self.match(self.ALTER)
                self.state = 5480
                self.match(self.DATABASE)
                self.state = 5481 
                self.database_name()
                self.state = 5482
                self.match(self.RENAME)
                self.state = 5483
                self.match(self.TO)
                self.state = 5484 
                self.database_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5486
                self.match(self.ALTER)
                self.state = 5487
                self.match(self.DOMAIN_P)
                self.state = 5488 
                self.any_name()
                self.state = 5489
                self.match(self.RENAME)
                self.state = 5490
                self.match(self.TO)
                self.state = 5491 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5493
                self.match(self.ALTER)
                self.state = 5494
                self.match(self.DOMAIN_P)
                self.state = 5495 
                self.any_name()
                self.state = 5496
                self.match(self.RENAME)
                self.state = 5497
                self.match(self.CONSTRAINT)
                self.state = 5498 
                self.name()
                self.state = 5499
                self.match(self.TO)
                self.state = 5500 
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5502
                self.match(self.ALTER)
                self.state = 5503
                self.match(self.FOREIGN)
                self.state = 5504
                self.match(self.DATA_P)
                self.state = 5505
                self.match(self.WRAPPER)
                self.state = 5506 
                self.name()
                self.state = 5507
                self.match(self.RENAME)
                self.state = 5508
                self.match(self.TO)
                self.state = 5509 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5511
                self.match(self.ALTER)
                self.state = 5512
                self.match(self.FUNCTION)
                self.state = 5513 
                self.function_with_argtypes()
                self.state = 5514
                self.match(self.RENAME)
                self.state = 5515
                self.match(self.TO)
                self.state = 5516 
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5518
                self.match(self.ALTER)
                self.state = 5519
                self.match(self.GROUP_P)
                self.state = 5520 
                self.roleId()
                self.state = 5521
                self.match(self.RENAME)
                self.state = 5522
                self.match(self.TO)
                self.state = 5523 
                self.roleId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5525
                self.match(self.ALTER)
                self.state = 5526 
                self.opt_procedural()
                self.state = 5527
                self.match(self.LANGUAGE)
                self.state = 5528 
                self.name()
                self.state = 5529
                self.match(self.RENAME)
                self.state = 5530
                self.match(self.TO)
                self.state = 5531 
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5533
                self.match(self.ALTER)
                self.state = 5534
                self.match(self.OPERATOR)
                self.state = 5535
                self.match(self.CLASS)
                self.state = 5536 
                self.any_name()
                self.state = 5537
                self.match(self.USING)
                self.state = 5538 
                self.access_method()
                self.state = 5539
                self.match(self.RENAME)
                self.state = 5540
                self.match(self.TO)
                self.state = 5541 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5543
                self.match(self.ALTER)
                self.state = 5544
                self.match(self.OPERATOR)
                self.state = 5545
                self.match(self.FAMILY)
                self.state = 5546 
                self.any_name()
                self.state = 5547
                self.match(self.USING)
                self.state = 5548 
                self.access_method()
                self.state = 5549
                self.match(self.RENAME)
                self.state = 5550
                self.match(self.TO)
                self.state = 5551 
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5553
                self.match(self.ALTER)
                self.state = 5554
                self.match(self.SCHEMA)
                self.state = 5555 
                self.name()
                self.state = 5556
                self.match(self.RENAME)
                self.state = 5557
                self.match(self.TO)
                self.state = 5558 
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5560
                self.match(self.ALTER)
                self.state = 5561
                self.match(self.SERVER)
                self.state = 5562 
                self.name()
                self.state = 5563
                self.match(self.RENAME)
                self.state = 5564
                self.match(self.TO)
                self.state = 5565 
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5567
                self.match(self.ALTER)
                self.state = 5568
                self.match(self.TABLE)
                self.state = 5569 
                self.relation_expr()
                self.state = 5570
                self.match(self.RENAME)
                self.state = 5571
                self.match(self.TO)
                self.state = 5572 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5574
                self.match(self.ALTER)
                self.state = 5575
                self.match(self.TABLE)
                self.state = 5576
                self.match(self.IF_P)
                self.state = 5577
                self.match(self.EXISTS)
                self.state = 5578 
                self.relation_expr()
                self.state = 5579
                self.match(self.RENAME)
                self.state = 5580
                self.match(self.TO)
                self.state = 5581 
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5583
                self.match(self.ALTER)
                self.state = 5584
                self.match(self.SEQUENCE)
                self.state = 5585 
                self.qualified_name()
                self.state = 5586
                self.match(self.RENAME)
                self.state = 5587
                self.match(self.TO)
                self.state = 5588 
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5590
                self.match(self.ALTER)
                self.state = 5591
                self.match(self.SEQUENCE)
                self.state = 5592
                self.match(self.IF_P)
                self.state = 5593
                self.match(self.EXISTS)
                self.state = 5594 
                self.qualified_name()
                self.state = 5595
                self.match(self.RENAME)
                self.state = 5596
                self.match(self.TO)
                self.state = 5597 
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5599
                self.match(self.ALTER)
                self.state = 5600
                self.match(self.VIEW)
                self.state = 5601 
                self.qualified_name()
                self.state = 5602
                self.match(self.RENAME)
                self.state = 5603
                self.match(self.TO)
                self.state = 5604 
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5606
                self.match(self.ALTER)
                self.state = 5607
                self.match(self.VIEW)
                self.state = 5608
                self.match(self.IF_P)
                self.state = 5609
                self.match(self.EXISTS)
                self.state = 5610 
                self.qualified_name()
                self.state = 5611
                self.match(self.RENAME)
                self.state = 5612
                self.match(self.TO)
                self.state = 5613 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5615
                self.match(self.ALTER)
                self.state = 5616
                self.match(self.INDEX)
                self.state = 5617 
                self.qualified_name()
                self.state = 5618
                self.match(self.RENAME)
                self.state = 5619
                self.match(self.TO)
                self.state = 5620 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5622
                self.match(self.ALTER)
                self.state = 5623
                self.match(self.INDEX)
                self.state = 5624
                self.match(self.IF_P)
                self.state = 5625
                self.match(self.EXISTS)
                self.state = 5626 
                self.qualified_name()
                self.state = 5627
                self.match(self.RENAME)
                self.state = 5628
                self.match(self.TO)
                self.state = 5629 
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 5631
                self.match(self.ALTER)
                self.state = 5632
                self.match(self.FOREIGN)
                self.state = 5633
                self.match(self.TABLE)
                self.state = 5634 
                self.relation_expr()
                self.state = 5635
                self.match(self.RENAME)
                self.state = 5636
                self.match(self.TO)
                self.state = 5637 
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 5639
                self.match(self.ALTER)
                self.state = 5640
                self.match(self.FOREIGN)
                self.state = 5641
                self.match(self.TABLE)
                self.state = 5642
                self.match(self.IF_P)
                self.state = 5643
                self.match(self.EXISTS)
                self.state = 5644 
                self.relation_expr()
                self.state = 5645
                self.match(self.RENAME)
                self.state = 5646
                self.match(self.TO)
                self.state = 5647 
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 5649
                self.match(self.ALTER)
                self.state = 5650
                self.match(self.TABLE)
                self.state = 5651 
                self.relation_expr()
                self.state = 5652
                self.match(self.RENAME)
                self.state = 5653 
                self.opt_column()
                self.state = 5654 
                self.name()
                self.state = 5655
                self.match(self.TO)
                self.state = 5656 
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 5658
                self.match(self.ALTER)
                self.state = 5659
                self.match(self.TABLE)
                self.state = 5660
                self.match(self.IF_P)
                self.state = 5661
                self.match(self.EXISTS)
                self.state = 5662 
                self.relation_expr()
                self.state = 5663
                self.match(self.RENAME)
                self.state = 5664 
                self.opt_column()
                self.state = 5665 
                self.name()
                self.state = 5666
                self.match(self.TO)
                self.state = 5667 
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 5669
                self.match(self.ALTER)
                self.state = 5670
                self.match(self.TABLE)
                self.state = 5671 
                self.relation_expr()
                self.state = 5672
                self.match(self.RENAME)
                self.state = 5673
                self.match(self.CONSTRAINT)
                self.state = 5674 
                self.name()
                self.state = 5675
                self.match(self.TO)
                self.state = 5676 
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 5678
                self.match(self.ALTER)
                self.state = 5679
                self.match(self.FOREIGN)
                self.state = 5680
                self.match(self.TABLE)
                self.state = 5681 
                self.relation_expr()
                self.state = 5682
                self.match(self.RENAME)
                self.state = 5683 
                self.opt_column()
                self.state = 5684 
                self.name()
                self.state = 5685
                self.match(self.TO)
                self.state = 5686 
                self.name()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 5688
                self.match(self.ALTER)
                self.state = 5689
                self.match(self.FOREIGN)
                self.state = 5690
                self.match(self.TABLE)
                self.state = 5691
                self.match(self.IF_P)
                self.state = 5692
                self.match(self.EXISTS)
                self.state = 5693 
                self.relation_expr()
                self.state = 5694
                self.match(self.RENAME)
                self.state = 5695 
                self.opt_column()
                self.state = 5696 
                self.name()
                self.state = 5697
                self.match(self.TO)
                self.state = 5698 
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 5700
                self.match(self.ALTER)
                self.state = 5701
                self.match(self.TRIGGER)
                self.state = 5702 
                self.name()
                self.state = 5703
                self.match(self.ON)
                self.state = 5704 
                self.qualified_name()
                self.state = 5705
                self.match(self.RENAME)
                self.state = 5706
                self.match(self.TO)
                self.state = 5707 
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 5709
                self.match(self.ALTER)
                self.state = 5710
                self.match(self.ROLE)
                self.state = 5711 
                self.roleId()
                self.state = 5712
                self.match(self.RENAME)
                self.state = 5713
                self.match(self.TO)
                self.state = 5714 
                self.roleId()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 5716
                self.match(self.ALTER)
                self.state = 5717
                self.match(self.USER)
                self.state = 5718 
                self.roleId()
                self.state = 5719
                self.match(self.RENAME)
                self.state = 5720
                self.match(self.TO)
                self.state = 5721 
                self.roleId()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 5723
                self.match(self.ALTER)
                self.state = 5724
                self.match(self.TABLESPACE)
                self.state = 5725 
                self.name()
                self.state = 5726
                self.match(self.RENAME)
                self.state = 5727
                self.match(self.TO)
                self.state = 5728 
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 5730
                self.match(self.ALTER)
                self.state = 5731
                self.match(self.TABLESPACE)
                self.state = 5732 
                self.name()
                self.state = 5733
                self.match(self.SET)
                self.state = 5734 
                self.reloptions()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 5736
                self.match(self.ALTER)
                self.state = 5737
                self.match(self.TABLESPACE)
                self.state = 5738 
                self.name()
                self.state = 5739
                self.match(self.RESET)
                self.state = 5740 
                self.reloptions()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 5742
                self.match(self.ALTER)
                self.state = 5743
                self.match(self.TEXT_P)
                self.state = 5744
                self.match(self.SEARCH)
                self.state = 5745
                self.match(self.PARSER)
                self.state = 5746 
                self.any_name()
                self.state = 5747
                self.match(self.RENAME)
                self.state = 5748
                self.match(self.TO)
                self.state = 5749 
                self.name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 5751
                self.match(self.ALTER)
                self.state = 5752
                self.match(self.TEXT_P)
                self.state = 5753
                self.match(self.SEARCH)
                self.state = 5754
                self.match(self.DICTIONARY)
                self.state = 5755 
                self.any_name()
                self.state = 5756
                self.match(self.RENAME)
                self.state = 5757
                self.match(self.TO)
                self.state = 5758 
                self.name()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 5760
                self.match(self.ALTER)
                self.state = 5761
                self.match(self.TEXT_P)
                self.state = 5762
                self.match(self.SEARCH)
                self.state = 5763
                self.match(self.TEMPLATE)
                self.state = 5764 
                self.any_name()
                self.state = 5765
                self.match(self.RENAME)
                self.state = 5766
                self.match(self.TO)
                self.state = 5767 
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 5769
                self.match(self.ALTER)
                self.state = 5770
                self.match(self.TEXT_P)
                self.state = 5771
                self.match(self.SEARCH)
                self.state = 5772
                self.match(self.CONFIGURATION)
                self.state = 5773 
                self.any_name()
                self.state = 5774
                self.match(self.RENAME)
                self.state = 5775
                self.match(self.TO)
                self.state = 5776 
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 5778
                self.match(self.ALTER)
                self.state = 5779
                self.match(self.TYPE_P)
                self.state = 5780 
                self.any_name()
                self.state = 5781
                self.match(self.RENAME)
                self.state = 5782
                self.match(self.TO)
                self.state = 5783 
                self.name()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 5785
                self.match(self.ALTER)
                self.state = 5786
                self.match(self.TYPE_P)
                self.state = 5787 
                self.any_name()
                self.state = 5788
                self.match(self.RENAME)
                self.state = 5789
                self.match(self.ATTRIBUTE)
                self.state = 5790 
                self.name()
                self.state = 5791
                self.match(self.TO)
                self.state = 5792 
                self.name()
                self.state = 5793 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(PlPgSqlParser.COLUMN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_column

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_column(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_column(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_column(self)
            else:
                return visitor.visitChildren(self)




    def opt_column(self):

        localctx = PlPgSqlParser.Opt_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_opt_column)
        try:
            self.state = 5799
            token = self._input.LA(1)
            if token in [self.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5797
                self.match(self.COLUMN)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.IF_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_set_dataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_set_dataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_set_data

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_set_data(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_set_data(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_set_data(self)
            else:
                return visitor.visitChildren(self)




    def opt_set_data(self):

        localctx = PlPgSqlParser.Opt_set_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_opt_set_data)
        try:
            self.state = 5804
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5801
                self.match(self.SET)
                self.state = 5802
                self.match(self.DATA_P)

            elif token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterObjectSchemaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterObjectSchemaStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def EXTENSION(self):
            return self.getToken(PlPgSqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(PlPgSqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(PlPgSqlParser.PARSER, 0)

        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterObjectSchemaStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterObjectSchemaStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterObjectSchemaStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterObjectSchemaStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterObjectSchemaStmt(self):

        localctx = PlPgSqlParser.AlterObjectSchemaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_alterObjectSchemaStmt)
        try:
            self.state = 5986
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5806
                self.match(self.ALTER)
                self.state = 5807
                self.match(self.AGGREGATE)
                self.state = 5808 
                self.func_name()
                self.state = 5809 
                self.aggr_args()
                self.state = 5810
                self.match(self.SET)
                self.state = 5811
                self.match(self.SCHEMA)
                self.state = 5812 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5814
                self.match(self.ALTER)
                self.state = 5815
                self.match(self.COLLATION)
                self.state = 5816 
                self.any_name()
                self.state = 5817
                self.match(self.SET)
                self.state = 5818
                self.match(self.SCHEMA)
                self.state = 5819 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5821
                self.match(self.ALTER)
                self.state = 5822
                self.match(self.CONVERSION_P)
                self.state = 5823 
                self.any_name()
                self.state = 5824
                self.match(self.SET)
                self.state = 5825
                self.match(self.SCHEMA)
                self.state = 5826 
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5828
                self.match(self.ALTER)
                self.state = 5829
                self.match(self.DOMAIN_P)
                self.state = 5830 
                self.any_name()
                self.state = 5831
                self.match(self.SET)
                self.state = 5832
                self.match(self.SCHEMA)
                self.state = 5833 
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5835
                self.match(self.ALTER)
                self.state = 5836
                self.match(self.EXTENSION)
                self.state = 5837 
                self.any_name()
                self.state = 5838
                self.match(self.SET)
                self.state = 5839
                self.match(self.SCHEMA)
                self.state = 5840 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5842
                self.match(self.ALTER)
                self.state = 5843
                self.match(self.FUNCTION)
                self.state = 5844 
                self.function_with_argtypes()
                self.state = 5845
                self.match(self.SET)
                self.state = 5846
                self.match(self.SCHEMA)
                self.state = 5847 
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5849
                self.match(self.ALTER)
                self.state = 5850
                self.match(self.OPERATOR)
                self.state = 5851 
                self.any_operator()
                self.state = 5852 
                self.oper_argtypes()
                self.state = 5853
                self.match(self.SET)
                self.state = 5854
                self.match(self.SCHEMA)
                self.state = 5855 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5857
                self.match(self.ALTER)
                self.state = 5858
                self.match(self.OPERATOR)
                self.state = 5859
                self.match(self.CLASS)
                self.state = 5860 
                self.any_name()
                self.state = 5861
                self.match(self.USING)
                self.state = 5862 
                self.access_method()
                self.state = 5863
                self.match(self.SET)
                self.state = 5864
                self.match(self.SCHEMA)
                self.state = 5865 
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5867
                self.match(self.ALTER)
                self.state = 5868
                self.match(self.OPERATOR)
                self.state = 5869
                self.match(self.FAMILY)
                self.state = 5870 
                self.any_name()
                self.state = 5871
                self.match(self.USING)
                self.state = 5872 
                self.access_method()
                self.state = 5873
                self.match(self.SET)
                self.state = 5874
                self.match(self.SCHEMA)
                self.state = 5875 
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5877
                self.match(self.ALTER)
                self.state = 5878
                self.match(self.TABLE)
                self.state = 5879 
                self.relation_expr()
                self.state = 5880
                self.match(self.SET)
                self.state = 5881
                self.match(self.SCHEMA)
                self.state = 5882 
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5884
                self.match(self.ALTER)
                self.state = 5885
                self.match(self.TABLE)
                self.state = 5886
                self.match(self.IF_P)
                self.state = 5887
                self.match(self.EXISTS)
                self.state = 5888 
                self.relation_expr()
                self.state = 5889
                self.match(self.SET)
                self.state = 5890
                self.match(self.SCHEMA)
                self.state = 5891 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5893
                self.match(self.ALTER)
                self.state = 5894
                self.match(self.TEXT_P)
                self.state = 5895
                self.match(self.SEARCH)
                self.state = 5896
                self.match(self.PARSER)
                self.state = 5897 
                self.any_name()
                self.state = 5898
                self.match(self.SET)
                self.state = 5899
                self.match(self.SCHEMA)
                self.state = 5900 
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5902
                self.match(self.ALTER)
                self.state = 5903
                self.match(self.TEXT_P)
                self.state = 5904
                self.match(self.SEARCH)
                self.state = 5905
                self.match(self.DICTIONARY)
                self.state = 5906 
                self.any_name()
                self.state = 5907
                self.match(self.SET)
                self.state = 5908
                self.match(self.SCHEMA)
                self.state = 5909 
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5911
                self.match(self.ALTER)
                self.state = 5912
                self.match(self.TEXT_P)
                self.state = 5913
                self.match(self.SEARCH)
                self.state = 5914
                self.match(self.TEMPLATE)
                self.state = 5915 
                self.any_name()
                self.state = 5916
                self.match(self.SET)
                self.state = 5917
                self.match(self.SCHEMA)
                self.state = 5918 
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5920
                self.match(self.ALTER)
                self.state = 5921
                self.match(self.TEXT_P)
                self.state = 5922
                self.match(self.SEARCH)
                self.state = 5923
                self.match(self.CONFIGURATION)
                self.state = 5924 
                self.any_name()
                self.state = 5925
                self.match(self.SET)
                self.state = 5926
                self.match(self.SCHEMA)
                self.state = 5927 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5929
                self.match(self.ALTER)
                self.state = 5930
                self.match(self.SEQUENCE)
                self.state = 5931 
                self.qualified_name()
                self.state = 5932
                self.match(self.SET)
                self.state = 5933
                self.match(self.SCHEMA)
                self.state = 5934 
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5936
                self.match(self.ALTER)
                self.state = 5937
                self.match(self.SEQUENCE)
                self.state = 5938
                self.match(self.IF_P)
                self.state = 5939
                self.match(self.EXISTS)
                self.state = 5940 
                self.qualified_name()
                self.state = 5941
                self.match(self.SET)
                self.state = 5942
                self.match(self.SCHEMA)
                self.state = 5943 
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5945
                self.match(self.ALTER)
                self.state = 5946
                self.match(self.VIEW)
                self.state = 5947 
                self.qualified_name()
                self.state = 5948
                self.match(self.SET)
                self.state = 5949
                self.match(self.SCHEMA)
                self.state = 5950 
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5952
                self.match(self.ALTER)
                self.state = 5953
                self.match(self.VIEW)
                self.state = 5954
                self.match(self.IF_P)
                self.state = 5955
                self.match(self.EXISTS)
                self.state = 5956 
                self.qualified_name()
                self.state = 5957
                self.match(self.SET)
                self.state = 5958
                self.match(self.SCHEMA)
                self.state = 5959 
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5961
                self.match(self.ALTER)
                self.state = 5962
                self.match(self.FOREIGN)
                self.state = 5963
                self.match(self.TABLE)
                self.state = 5964 
                self.relation_expr()
                self.state = 5965
                self.match(self.SET)
                self.state = 5966
                self.match(self.SCHEMA)
                self.state = 5967 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5969
                self.match(self.ALTER)
                self.state = 5970
                self.match(self.FOREIGN)
                self.state = 5971
                self.match(self.TABLE)
                self.state = 5972
                self.match(self.IF_P)
                self.state = 5973
                self.match(self.EXISTS)
                self.state = 5974 
                self.relation_expr()
                self.state = 5975
                self.match(self.SET)
                self.state = 5976
                self.match(self.SCHEMA)
                self.state = 5977 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5979
                self.match(self.ALTER)
                self.state = 5980
                self.match(self.TYPE_P)
                self.state = 5981 
                self.any_name()
                self.state = 5982
                self.match(self.SET)
                self.state = 5983
                self.match(self.SCHEMA)
                self.state = 5984 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterOwnerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterOwnerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(PlPgSqlParser.SCHEMA, 0)

        def OBJECT_P(self):
            return self.getToken(PlPgSqlParser.OBJECT_P, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(PlPgSqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(PlPgSqlParser.CLASS, 0)

        def roleId(self):
            return self.getTypedRuleContext(PlPgSqlParser.RoleIdContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def WRAPPER(self):
            return self.getToken(PlPgSqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def LARGE_P(self):
            return self.getToken(PlPgSqlParser.LARGE_P, 0)

        def SERVER(self):
            return self.getToken(PlPgSqlParser.SERVER, 0)

        def LANGUAGE(self):
            return self.getToken(PlPgSqlParser.LANGUAGE, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def DATA_P(self):
            return self.getToken(PlPgSqlParser.DATA_P, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_proceduralContext,0)


        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def access_method(self):
            return self.getTypedRuleContext(PlPgSqlParser.Access_methodContext,0)


        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def OWNER(self):
            return self.getToken(PlPgSqlParser.OWNER, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(PlPgSqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(PlPgSqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(PlPgSqlParser.TYPE_P, 0)

        def FAMILY(self):
            return self.getToken(PlPgSqlParser.FAMILY, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Function_with_argtypesContext,0)


        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterOwnerStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterOwnerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterOwnerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterOwnerStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterOwnerStmt(self):

        localctx = PlPgSqlParser.AlterOwnerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_alterOwnerStmt)
        try:
            self.state = 6130
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5988
                self.match(self.ALTER)
                self.state = 5989
                self.match(self.AGGREGATE)
                self.state = 5990 
                self.func_name()
                self.state = 5991 
                self.aggr_args()
                self.state = 5992
                self.match(self.OWNER)
                self.state = 5993
                self.match(self.TO)
                self.state = 5994 
                self.roleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5996
                self.match(self.ALTER)
                self.state = 5997
                self.match(self.COLLATION)
                self.state = 5998 
                self.any_name()
                self.state = 5999
                self.match(self.OWNER)
                self.state = 6000
                self.match(self.TO)
                self.state = 6001 
                self.roleId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6003
                self.match(self.ALTER)
                self.state = 6004
                self.match(self.CONVERSION_P)
                self.state = 6005 
                self.any_name()
                self.state = 6006
                self.match(self.OWNER)
                self.state = 6007
                self.match(self.TO)
                self.state = 6008 
                self.roleId()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6010
                self.match(self.ALTER)
                self.state = 6011
                self.match(self.DATABASE)
                self.state = 6012 
                self.database_name()
                self.state = 6013
                self.match(self.OWNER)
                self.state = 6014
                self.match(self.TO)
                self.state = 6015 
                self.roleId()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6017
                self.match(self.ALTER)
                self.state = 6018
                self.match(self.DOMAIN_P)
                self.state = 6019 
                self.any_name()
                self.state = 6020
                self.match(self.OWNER)
                self.state = 6021
                self.match(self.TO)
                self.state = 6022 
                self.roleId()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6024
                self.match(self.ALTER)
                self.state = 6025
                self.match(self.FUNCTION)
                self.state = 6026 
                self.function_with_argtypes()
                self.state = 6027
                self.match(self.OWNER)
                self.state = 6028
                self.match(self.TO)
                self.state = 6029 
                self.roleId()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6031
                self.match(self.ALTER)
                self.state = 6032 
                self.opt_procedural()
                self.state = 6033
                self.match(self.LANGUAGE)
                self.state = 6034 
                self.name()
                self.state = 6035
                self.match(self.OWNER)
                self.state = 6036
                self.match(self.TO)
                self.state = 6037 
                self.roleId()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6039
                self.match(self.ALTER)
                self.state = 6040
                self.match(self.LARGE_P)
                self.state = 6041
                self.match(self.OBJECT_P)
                self.state = 6042 
                self.numericOnly()
                self.state = 6043
                self.match(self.OWNER)
                self.state = 6044
                self.match(self.TO)
                self.state = 6045 
                self.roleId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6047
                self.match(self.ALTER)
                self.state = 6048
                self.match(self.OPERATOR)
                self.state = 6049 
                self.any_operator()
                self.state = 6050 
                self.oper_argtypes()
                self.state = 6051
                self.match(self.OWNER)
                self.state = 6052
                self.match(self.TO)
                self.state = 6053 
                self.roleId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6055
                self.match(self.ALTER)
                self.state = 6056
                self.match(self.OPERATOR)
                self.state = 6057
                self.match(self.CLASS)
                self.state = 6058 
                self.any_name()
                self.state = 6059
                self.match(self.USING)
                self.state = 6060 
                self.access_method()
                self.state = 6061
                self.match(self.OWNER)
                self.state = 6062
                self.match(self.TO)
                self.state = 6063 
                self.roleId()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6065
                self.match(self.ALTER)
                self.state = 6066
                self.match(self.OPERATOR)
                self.state = 6067
                self.match(self.FAMILY)
                self.state = 6068 
                self.any_name()
                self.state = 6069
                self.match(self.USING)
                self.state = 6070 
                self.access_method()
                self.state = 6071
                self.match(self.OWNER)
                self.state = 6072
                self.match(self.TO)
                self.state = 6073 
                self.roleId()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6075
                self.match(self.ALTER)
                self.state = 6076
                self.match(self.SCHEMA)
                self.state = 6077 
                self.name()
                self.state = 6078
                self.match(self.OWNER)
                self.state = 6079
                self.match(self.TO)
                self.state = 6080 
                self.roleId()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6082
                self.match(self.ALTER)
                self.state = 6083
                self.match(self.TYPE_P)
                self.state = 6084 
                self.any_name()
                self.state = 6085
                self.match(self.OWNER)
                self.state = 6086
                self.match(self.TO)
                self.state = 6087 
                self.roleId()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6089
                self.match(self.ALTER)
                self.state = 6090
                self.match(self.TABLESPACE)
                self.state = 6091 
                self.name()
                self.state = 6092
                self.match(self.OWNER)
                self.state = 6093
                self.match(self.TO)
                self.state = 6094 
                self.roleId()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6096
                self.match(self.ALTER)
                self.state = 6097
                self.match(self.TEXT_P)
                self.state = 6098
                self.match(self.SEARCH)
                self.state = 6099
                self.match(self.DICTIONARY)
                self.state = 6100 
                self.any_name()
                self.state = 6101
                self.match(self.OWNER)
                self.state = 6102
                self.match(self.TO)
                self.state = 6103 
                self.roleId()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6105
                self.match(self.ALTER)
                self.state = 6106
                self.match(self.TEXT_P)
                self.state = 6107
                self.match(self.SEARCH)
                self.state = 6108
                self.match(self.CONFIGURATION)
                self.state = 6109 
                self.any_name()
                self.state = 6110
                self.match(self.OWNER)
                self.state = 6111
                self.match(self.TO)
                self.state = 6112 
                self.roleId()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6114
                self.match(self.ALTER)
                self.state = 6115
                self.match(self.FOREIGN)
                self.state = 6116
                self.match(self.DATA_P)
                self.state = 6117
                self.match(self.WRAPPER)
                self.state = 6118 
                self.name()
                self.state = 6119
                self.match(self.OWNER)
                self.state = 6120
                self.match(self.TO)
                self.state = 6121 
                self.roleId()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6123
                self.match(self.ALTER)
                self.state = 6124
                self.match(self.SERVER)
                self.state = 6125 
                self.name()
                self.state = 6126
                self.match(self.OWNER)
                self.state = 6127
                self.match(self.TO)
                self.state = 6128 
                self.roleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RuleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Where_clauseContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def opt_or_replace(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_or_replaceContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def RULE(self):
            return self.getToken(PlPgSqlParser.RULE, 0)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def DO(self):
            return self.getToken(PlPgSqlParser.DO, 0)

        def opt_instead(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_insteadContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def ruleActionList(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionListContext,0)


        def event(self):
            return self.getTypedRuleContext(PlPgSqlParser.EventContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ruleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRuleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRuleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRuleStmt(self)
            else:
                return visitor.visitChildren(self)




    def ruleStmt(self):

        localctx = PlPgSqlParser.RuleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_ruleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6132
            self.match(self.CREATE)
            self.state = 6133 
            self.opt_or_replace()
            self.state = 6134
            self.match(self.RULE)
            self.state = 6135 
            self.name()
            self.state = 6136
            self.match(self.AS)
            self.state = 6137
            self.match(self.ON)
            self.state = 6138 
            self.event()
            self.state = 6139
            self.match(self.TO)
            self.state = 6140 
            self.qualified_name()
            self.state = 6141 
            self.where_clause()
            self.state = 6142
            self.match(self.DO)
            self.state = 6143 
            self.opt_instead()
            self.state = 6144 
            self.ruleActionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RuleActionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionMulti(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionMultiContext,0)


        def ruleActionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionStmtContext,0)


        def NOTHING(self):
            return self.getToken(PlPgSqlParser.NOTHING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ruleActionList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRuleActionList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRuleActionList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRuleActionList(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionList(self):

        localctx = PlPgSqlParser.RuleActionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_ruleActionList)
        try:
            self.state = 6152
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6146
                self.match(self.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6147 
                self.ruleActionStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6148
                self.match(self.T__7)
                self.state = 6149 
                self.ruleActionMulti(0)
                self.state = 6150
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionMultiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RuleActionMultiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionMulti(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionMultiContext,0)


        def ruleActionStmtOrEmpty(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionStmtOrEmptyContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ruleActionMulti

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRuleActionMulti(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRuleActionMulti(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRuleActionMulti(self)
            else:
                return visitor.visitChildren(self)



    def ruleActionMulti(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.RuleActionMultiContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 770
        self.enterRecursionRule(localctx, 770, self.RULE_ruleActionMulti, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6155 
            self.ruleActionStmtOrEmpty()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6162
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.RuleActionMultiContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ruleActionMulti)
                    self.state = 6157
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 6158
                    self.match(self.T__3)
                    self.state = 6159 
                    self.ruleActionStmtOrEmpty() 
                self.state = 6164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RuleActionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RuleActionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def notifyStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.NotifyStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.InsertStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeleteStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ruleActionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRuleActionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRuleActionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRuleActionStmt(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionStmt(self):

        localctx = PlPgSqlParser.RuleActionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_ruleActionStmt)
        try:
            self.state = 6170
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6165 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6166 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6167 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6168 
                self.deleteStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6169 
                self.notifyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionStmtOrEmptyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RuleActionStmtOrEmptyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.RuleActionStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ruleActionStmtOrEmpty

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRuleActionStmtOrEmpty(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRuleActionStmtOrEmpty(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRuleActionStmtOrEmpty(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionStmtOrEmpty(self):

        localctx = PlPgSqlParser.RuleActionStmtOrEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_ruleActionStmtOrEmpty)
        try:
            self.state = 6174
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6172 
                self.ruleActionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.EventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELETE_P(self):
            return self.getToken(PlPgSqlParser.DELETE_P, 0)

        def INSERT(self):
            return self.getToken(PlPgSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def SELECT(self):
            return self.getToken(PlPgSqlParser.SELECT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_event

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterEvent(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitEvent(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitEvent(self)
            else:
                return visitor.visitChildren(self)




    def event(self):

        localctx = PlPgSqlParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_event)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6176
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.DELETE_P or _la==PlPgSqlParser.INSERT or _la==PlPgSqlParser.SELECT or _la==PlPgSqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_insteadContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_insteadContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(PlPgSqlParser.ALSO, 0)

        def INSTEAD(self):
            return self.getToken(PlPgSqlParser.INSTEAD, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_instead

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_instead(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_instead(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_instead(self)
            else:
                return visitor.visitChildren(self)




    def opt_instead(self):

        localctx = PlPgSqlParser.Opt_insteadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_opt_instead)
        try:
            self.state = 6181
            token = self._input.LA(1)
            if token in [self.INSTEAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6178
                self.match(self.INSTEAD)

            elif token in [self.ALSO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6179
                self.match(self.ALSO)

            elif token in [self.T__7, self.DELETE_P, self.INSERT, self.NOTHING, self.NOTIFY, self.SELECT, self.TABLE, self.UPDATE, self.VALUES, self.WITH]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropruleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropruleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def RULE(self):
            return self.getToken(PlPgSqlParser.RULE, 0)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropruleStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropruleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropruleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropruleStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropruleStmt(self):

        localctx = PlPgSqlParser.DropruleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_dropruleStmt)
        try:
            self.state = 6199
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6183
                self.match(self.DROP)
                self.state = 6184
                self.match(self.RULE)
                self.state = 6185 
                self.name()
                self.state = 6186
                self.match(self.ON)
                self.state = 6187 
                self.any_name()
                self.state = 6188 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6190
                self.match(self.DROP)
                self.state = 6191
                self.match(self.RULE)
                self.state = 6192
                self.match(self.IF_P)
                self.state = 6193
                self.match(self.EXISTS)
                self.state = 6194 
                self.name()
                self.state = 6195
                self.match(self.ON)
                self.state = 6196 
                self.any_name()
                self.state = 6197 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotifyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.NotifyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def NOTIFY(self):
            return self.getToken(PlPgSqlParser.NOTIFY, 0)

        def notify_payload(self):
            return self.getTypedRuleContext(PlPgSqlParser.Notify_payloadContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_notifyStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterNotifyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitNotifyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitNotifyStmt(self)
            else:
                return visitor.visitChildren(self)




    def notifyStmt(self):

        localctx = PlPgSqlParser.NotifyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_notifyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6201
            self.match(self.NOTIFY)
            self.state = 6202 
            self.colId()
            self.state = 6203 
            self.notify_payload()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notify_payloadContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Notify_payloadContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_notify_payload

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterNotify_payload(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitNotify_payload(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitNotify_payload(self)
            else:
                return visitor.visitChildren(self)




    def notify_payload(self):

        localctx = PlPgSqlParser.Notify_payloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_notify_payload)
        try:
            self.state = 6208
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6205
                self.match(self.T__12)
                self.state = 6206 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ListenStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def LISTEN(self):
            return self.getToken(PlPgSqlParser.LISTEN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_listenStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterListenStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitListenStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitListenStmt(self)
            else:
                return visitor.visitChildren(self)




    def listenStmt(self):

        localctx = PlPgSqlParser.ListenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_listenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6210
            self.match(self.LISTEN)
            self.state = 6211 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnlistenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.UnlistenStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def UNLISTEN(self):
            return self.getToken(PlPgSqlParser.UNLISTEN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_unlistenStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterUnlistenStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitUnlistenStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitUnlistenStmt(self)
            else:
                return visitor.visitChildren(self)




    def unlistenStmt(self):

        localctx = PlPgSqlParser.UnlistenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_unlistenStmt)
        try:
            self.state = 6217
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6213
                self.match(self.UNLISTEN)
                self.state = 6214 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6215
                self.match(self.UNLISTEN)
                self.state = 6216
                self.match(self.T__9)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TransactionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_transaction(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_transactionContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def ABORT_P(self):
            return self.getToken(PlPgSqlParser.ABORT_P, 0)

        def PREPARED(self):
            return self.getToken(PlPgSqlParser.PREPARED, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def PREPARE(self):
            return self.getToken(PlPgSqlParser.PREPARE, 0)

        def BEGIN_P(self):
            return self.getToken(PlPgSqlParser.BEGIN_P, 0)

        def START(self):
            return self.getToken(PlPgSqlParser.START, 0)

        def RELEASE(self):
            return self.getToken(PlPgSqlParser.RELEASE, 0)

        def transaction_mode_list_or_empty(self):
            return self.getTypedRuleContext(PlPgSqlParser.Transaction_mode_list_or_emptyContext,0)


        def COMMIT(self):
            return self.getToken(PlPgSqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(PlPgSqlParser.ROLLBACK, 0)

        def SAVEPOINT(self):
            return self.getToken(PlPgSqlParser.SAVEPOINT, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def END_P(self):
            return self.getToken(PlPgSqlParser.END_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_transactionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTransactionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTransactionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTransactionStmt(self)
            else:
                return visitor.visitChildren(self)




    def transactionStmt(self):

        localctx = PlPgSqlParser.TransactionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_transactionStmt)
        try:
            self.state = 6261
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6219
                self.match(self.ABORT_P)
                self.state = 6220 
                self.opt_transaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6221
                self.match(self.BEGIN_P)
                self.state = 6222 
                self.opt_transaction()
                self.state = 6223 
                self.transaction_mode_list_or_empty()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6225
                self.match(self.START)
                self.state = 6226
                self.match(self.TRANSACTION)
                self.state = 6227 
                self.transaction_mode_list_or_empty()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6228
                self.match(self.COMMIT)
                self.state = 6229 
                self.opt_transaction()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6230
                self.match(self.END_P)
                self.state = 6231 
                self.opt_transaction()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6232
                self.match(self.ROLLBACK)
                self.state = 6233 
                self.opt_transaction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6234
                self.match(self.SAVEPOINT)
                self.state = 6235 
                self.colId()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6236
                self.match(self.RELEASE)
                self.state = 6237
                self.match(self.SAVEPOINT)
                self.state = 6238 
                self.colId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6239
                self.match(self.RELEASE)
                self.state = 6240 
                self.colId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6241
                self.match(self.ROLLBACK)
                self.state = 6242 
                self.opt_transaction()
                self.state = 6243
                self.match(self.TO)
                self.state = 6244
                self.match(self.SAVEPOINT)
                self.state = 6245 
                self.colId()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6247
                self.match(self.ROLLBACK)
                self.state = 6248 
                self.opt_transaction()
                self.state = 6249
                self.match(self.TO)
                self.state = 6250 
                self.colId()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6252
                self.match(self.PREPARE)
                self.state = 6253
                self.match(self.TRANSACTION)
                self.state = 6254 
                self.sConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6255
                self.match(self.COMMIT)
                self.state = 6256
                self.match(self.PREPARED)
                self.state = 6257 
                self.sConst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6258
                self.match(self.ROLLBACK)
                self.state = 6259
                self.match(self.PREPARED)
                self.state = 6260 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_transactionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_transactionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(PlPgSqlParser.TRANSACTION, 0)

        def WORK(self):
            return self.getToken(PlPgSqlParser.WORK, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_transaction

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_transaction(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_transaction(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_transaction(self)
            else:
                return visitor.visitChildren(self)




    def opt_transaction(self):

        localctx = PlPgSqlParser.Opt_transactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_opt_transaction)
        try:
            self.state = 6266
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6263
                self.match(self.WORK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6264
                self.match(self.TRANSACTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_mode_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Transaction_mode_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iso_level(self):
            return self.getTypedRuleContext(PlPgSqlParser.Iso_levelContext,0)


        def LEVEL(self):
            return self.getToken(PlPgSqlParser.LEVEL, 0)

        def DEFERRABLE(self):
            return self.getToken(PlPgSqlParser.DEFERRABLE, 0)

        def READ(self):
            return self.getToken(PlPgSqlParser.READ, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def ONLY(self):
            return self.getToken(PlPgSqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PlPgSqlParser.WRITE, 0)

        def ISOLATION(self):
            return self.getToken(PlPgSqlParser.ISOLATION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_transaction_mode_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTransaction_mode_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTransaction_mode_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTransaction_mode_item(self)
            else:
                return visitor.visitChildren(self)




    def transaction_mode_item(self):

        localctx = PlPgSqlParser.Transaction_mode_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_transaction_mode_item)
        try:
            self.state = 6278
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6268
                self.match(self.ISOLATION)
                self.state = 6269
                self.match(self.LEVEL)
                self.state = 6270 
                self.iso_level()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6271
                self.match(self.READ)
                self.state = 6272
                self.match(self.ONLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6273
                self.match(self.READ)
                self.state = 6274
                self.match(self.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6275
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6276
                self.match(self.NOT)
                self.state = 6277
                self.match(self.DEFERRABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_mode_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Transaction_mode_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Transaction_mode_listContext,0)


        def transaction_mode_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Transaction_mode_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_transaction_mode_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTransaction_mode_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTransaction_mode_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTransaction_mode_list(self)
            else:
                return visitor.visitChildren(self)



    def transaction_mode_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Transaction_mode_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 796
        self.enterRecursionRule(localctx, 796, self.RULE_transaction_mode_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6281 
            self.transaction_mode_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6288
                    la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.Transaction_mode_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_transaction_mode_list)
                        self.state = 6283
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6284
                        self.match(self.T__12)
                        self.state = 6285 
                        self.transaction_mode_item()
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.Transaction_mode_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_transaction_mode_list)
                        self.state = 6286
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6287 
                        self.transaction_mode_item()
                        pass

             
                self.state = 6292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Transaction_mode_list_or_emptyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Transaction_mode_list_or_emptyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Transaction_mode_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_transaction_mode_list_or_empty

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTransaction_mode_list_or_empty(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTransaction_mode_list_or_empty(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTransaction_mode_list_or_empty(self)
            else:
                return visitor.visitChildren(self)




    def transaction_mode_list_or_empty(self):

        localctx = PlPgSqlParser.Transaction_mode_list_or_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_transaction_mode_list_or_empty)
        try:
            self.state = 6295
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6293 
                self.transaction_mode_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ViewStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ViewStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(PlPgSqlParser.VIEW, 0)

        def opt_check_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_check_optionContext,0)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def OR(self):
            return self.getToken(PlPgSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlPgSqlParser.REPLACE, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_column_listContext,0)


        def opt_reloptions(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_reloptionsContext,0)


        def optTemp(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_viewStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterViewStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitViewStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitViewStmt(self)
            else:
                return visitor.visitChildren(self)




    def viewStmt(self):

        localctx = PlPgSqlParser.ViewStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_viewStmt)
        try:
            self.state = 6319
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6297
                self.match(self.CREATE)
                self.state = 6298 
                self.optTemp()
                self.state = 6299
                self.match(self.VIEW)
                self.state = 6300 
                self.qualified_name()
                self.state = 6301 
                self.opt_column_list()
                self.state = 6302 
                self.opt_reloptions()
                self.state = 6303
                self.match(self.AS)
                self.state = 6304 
                self.selectStmt()
                self.state = 6305 
                self.opt_check_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6307
                self.match(self.CREATE)
                self.state = 6308
                self.match(self.OR)
                self.state = 6309
                self.match(self.REPLACE)
                self.state = 6310 
                self.optTemp()
                self.state = 6311
                self.match(self.VIEW)
                self.state = 6312 
                self.qualified_name()
                self.state = 6313 
                self.opt_column_list()
                self.state = 6314 
                self.opt_reloptions()
                self.state = 6315
                self.match(self.AS)
                self.state = 6316 
                self.selectStmt()
                self.state = 6317 
                self.opt_check_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_check_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_check_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(PlPgSqlParser.CHECK, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def LOCAL(self):
            return self.getToken(PlPgSqlParser.LOCAL, 0)

        def CASCADED(self):
            return self.getToken(PlPgSqlParser.CASCADED, 0)

        def OPTION(self):
            return self.getToken(PlPgSqlParser.OPTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_check_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_check_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_check_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_check_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_check_option(self):

        localctx = PlPgSqlParser.Opt_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_opt_check_option)
        try:
            self.state = 6333
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6321
                self.match(self.WITH)
                self.state = 6322
                self.match(self.CHECK)
                self.state = 6323
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6324
                self.match(self.WITH)
                self.state = 6325
                self.match(self.CASCADED)
                self.state = 6326
                self.match(self.CHECK)
                self.state = 6327
                self.match(self.OPTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6328
                self.match(self.WITH)
                self.state = 6329
                self.match(self.LOCAL)
                self.state = 6330
                self.match(self.CHECK)
                self.state = 6331
                self.match(self.OPTION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.LoadStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def file_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.File_nameContext,0)


        def LOAD(self):
            return self.getToken(PlPgSqlParser.LOAD, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_loadStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLoadStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLoadStmt(self)
            else:
                return visitor.visitChildren(self)




    def loadStmt(self):

        localctx = PlPgSqlParser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6335
            self.match(self.LOAD)
            self.state = 6336 
            self.file_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedbStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreatedbStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createdb_opt_listContext,0)


        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createdbStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatedbStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatedbStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatedbStmt(self)
            else:
                return visitor.visitChildren(self)




    def createdbStmt(self):

        localctx = PlPgSqlParser.CreatedbStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_createdbStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6338
            self.match(self.CREATE)
            self.state = 6339
            self.match(self.DATABASE)
            self.state = 6340 
            self.database_name()
            self.state = 6342
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 6341
                self.match(self.WITH)


            self.state = 6344 
            self.createdb_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createdb_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Createdb_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createdb_opt_listContext,0)


        def createdb_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Createdb_opt_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createdb_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatedb_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatedb_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatedb_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def createdb_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Createdb_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 808
        self.enterRecursionRule(localctx, 808, self.RULE_createdb_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Createdb_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_createdb_opt_list)
                    self.state = 6347
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 6348 
                    self.createdb_opt_item() 
                self.state = 6353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Createdb_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Createdb_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PlPgSqlParser.LIMIT, 0)

        def opt_equal(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_equalContext,0)


        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def LOCATION(self):
            return self.getToken(PlPgSqlParser.LOCATION, 0)

        def TEMPLATE(self):
            return self.getToken(PlPgSqlParser.TEMPLATE, 0)

        def OWNER(self):
            return self.getToken(PlPgSqlParser.OWNER, 0)

        def ENCODING(self):
            return self.getToken(PlPgSqlParser.ENCODING, 0)

        def LC_CTYPE_P(self):
            return self.getToken(PlPgSqlParser.LC_CTYPE_P, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def LC_COLLATE_P(self):
            return self.getToken(PlPgSqlParser.LC_COLLATE_P, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def CONNECTION(self):
            return self.getToken(PlPgSqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createdb_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreatedb_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreatedb_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreatedb_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def createdb_opt_item(self):

        localctx = PlPgSqlParser.Createdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_createdb_opt_item)
        try:
            self.state = 6419
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6354
                self.match(self.TABLESPACE)
                self.state = 6355 
                self.opt_equal()
                self.state = 6356 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6358
                self.match(self.TABLESPACE)
                self.state = 6359 
                self.opt_equal()
                self.state = 6360
                self.match(self.DEFAULT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6362
                self.match(self.LOCATION)
                self.state = 6363 
                self.opt_equal()
                self.state = 6364 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6366
                self.match(self.LOCATION)
                self.state = 6367 
                self.opt_equal()
                self.state = 6368
                self.match(self.DEFAULT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6370
                self.match(self.TEMPLATE)
                self.state = 6371 
                self.opt_equal()
                self.state = 6372 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6374
                self.match(self.TEMPLATE)
                self.state = 6375 
                self.opt_equal()
                self.state = 6376
                self.match(self.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6378
                self.match(self.ENCODING)
                self.state = 6379 
                self.opt_equal()
                self.state = 6380 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6382
                self.match(self.ENCODING)
                self.state = 6383 
                self.opt_equal()
                self.state = 6384 
                self.iConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6386
                self.match(self.ENCODING)
                self.state = 6387 
                self.opt_equal()
                self.state = 6388
                self.match(self.DEFAULT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6390
                self.match(self.LC_COLLATE_P)
                self.state = 6391 
                self.opt_equal()
                self.state = 6392 
                self.sConst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6394
                self.match(self.LC_COLLATE_P)
                self.state = 6395 
                self.opt_equal()
                self.state = 6396
                self.match(self.DEFAULT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6398
                self.match(self.LC_CTYPE_P)
                self.state = 6399 
                self.opt_equal()
                self.state = 6400 
                self.sConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6402
                self.match(self.LC_CTYPE_P)
                self.state = 6403 
                self.opt_equal()
                self.state = 6404
                self.match(self.DEFAULT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6406
                self.match(self.CONNECTION)
                self.state = 6407
                self.match(self.LIMIT)
                self.state = 6408 
                self.opt_equal()
                self.state = 6409 
                self.signedIconst()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6411
                self.match(self.OWNER)
                self.state = 6412 
                self.opt_equal()
                self.state = 6413 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6415
                self.match(self.OWNER)
                self.state = 6416 
                self.opt_equal()
                self.state = 6417
                self.match(self.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_equalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_equalContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_equal

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_equal(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_equal(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_equal(self)
            else:
                return visitor.visitChildren(self)




    def opt_equal(self):

        localctx = PlPgSqlParser.Opt_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_opt_equal)
        try:
            self.state = 6423
            token = self._input.LA(1)
            if token in [self.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6421
                self.match(self.T__4)

            elif token in [self.T__11, self.T__10, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.DEFAULT, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterDatabaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(PlPgSqlParser.TABLESPACE, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def alterdb_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alterdb_opt_listContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterDatabaseStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterDatabaseStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterDatabaseStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseStmt(self):

        localctx = PlPgSqlParser.AlterDatabaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_alterDatabaseStmt)
        try:
            self.state = 6440
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6425
                self.match(self.ALTER)
                self.state = 6426
                self.match(self.DATABASE)
                self.state = 6427 
                self.database_name()
                self.state = 6429
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 6428
                    self.match(self.WITH)


                self.state = 6431 
                self.alterdb_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6433
                self.match(self.ALTER)
                self.state = 6434
                self.match(self.DATABASE)
                self.state = 6435 
                self.database_name()
                self.state = 6436
                self.match(self.SET)
                self.state = 6437
                self.match(self.TABLESPACE)
                self.state = 6438 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterDatabaseSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def setResetClause(self):
            return self.getTypedRuleContext(PlPgSqlParser.SetResetClauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterDatabaseSetStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterDatabaseSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterDatabaseSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterDatabaseSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseSetStmt(self):

        localctx = PlPgSqlParser.AlterDatabaseSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_alterDatabaseSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6442
            self.match(self.ALTER)
            self.state = 6443
            self.match(self.DATABASE)
            self.state = 6444 
            self.database_name()
            self.state = 6445 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alterdb_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alterdb_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alterdb_opt_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alterdb_opt_itemContext,0)


        def alterdb_opt_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alterdb_opt_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterdb_opt_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterdb_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterdb_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterdb_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alterdb_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Alterdb_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 818
        self.enterRecursionRule(localctx, 818, self.RULE_alterdb_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Alterdb_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alterdb_opt_list)
                    self.state = 6448
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 6449 
                    self.alterdb_opt_item() 
                self.state = 6454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alterdb_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alterdb_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PlPgSqlParser.LIMIT, 0)

        def opt_equal(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_equalContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def CONNECTION(self):
            return self.getToken(PlPgSqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterdb_opt_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterdb_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterdb_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterdb_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def alterdb_opt_item(self):

        localctx = PlPgSqlParser.Alterdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_alterdb_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6455
            self.match(self.CONNECTION)
            self.state = 6456
            self.match(self.LIMIT)
            self.state = 6457 
            self.opt_equal()
            self.state = 6458 
            self.signedIconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropdbStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DropdbStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(PlPgSqlParser.DATABASE, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Database_nameContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_dropdbStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDropdbStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDropdbStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDropdbStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropdbStmt(self):

        localctx = PlPgSqlParser.DropdbStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_dropdbStmt)
        try:
            self.state = 6468
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6460
                self.match(self.DROP)
                self.state = 6461
                self.match(self.DATABASE)
                self.state = 6462 
                self.database_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6463
                self.match(self.DROP)
                self.state = 6464
                self.match(self.DATABASE)
                self.state = 6465
                self.match(self.IF_P)
                self.state = 6466
                self.match(self.EXISTS)
                self.state = 6467 
                self.database_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDomainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateDomainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def opt_as(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_asContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createDomainStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateDomainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateDomainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateDomainStmt(self)
            else:
                return visitor.visitChildren(self)




    def createDomainStmt(self):

        localctx = PlPgSqlParser.CreateDomainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_createDomainStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6470
            self.match(self.CREATE)
            self.state = 6471
            self.match(self.DOMAIN_P)
            self.state = 6472 
            self.any_name()
            self.state = 6473 
            self.opt_as()
            self.state = 6474 
            self.typename()
            self.state = 6475 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDomainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterDomainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PlPgSqlParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def VALIDATE(self):
            return self.getToken(PlPgSqlParser.VALIDATE, 0)

        def tableConstraint(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableConstraintContext,0)


        def alter_column_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alter_column_defaultContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterDomainStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterDomainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterDomainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterDomainStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDomainStmt(self):

        localctx = PlPgSqlParser.AlterDomainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_alterDomainStmt)
        try:
            self.state = 6527
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6477
                self.match(self.ALTER)
                self.state = 6478
                self.match(self.DOMAIN_P)
                self.state = 6479 
                self.any_name()
                self.state = 6480 
                self.alter_column_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6482
                self.match(self.ALTER)
                self.state = 6483
                self.match(self.DOMAIN_P)
                self.state = 6484 
                self.any_name()
                self.state = 6485
                self.match(self.DROP)
                self.state = 6486
                self.match(self.NOT)
                self.state = 6487
                self.match(self.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6489
                self.match(self.ALTER)
                self.state = 6490
                self.match(self.DOMAIN_P)
                self.state = 6491 
                self.any_name()
                self.state = 6492
                self.match(self.SET)
                self.state = 6493
                self.match(self.NOT)
                self.state = 6494
                self.match(self.NULL_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6496
                self.match(self.ALTER)
                self.state = 6497
                self.match(self.DOMAIN_P)
                self.state = 6498 
                self.any_name()
                self.state = 6499
                self.match(self.ADD_P)
                self.state = 6500 
                self.tableConstraint()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6502
                self.match(self.ALTER)
                self.state = 6503
                self.match(self.DOMAIN_P)
                self.state = 6504 
                self.any_name()
                self.state = 6505
                self.match(self.DROP)
                self.state = 6506
                self.match(self.CONSTRAINT)
                self.state = 6507 
                self.name()
                self.state = 6508 
                self.opt_drop_behavior()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6510
                self.match(self.ALTER)
                self.state = 6511
                self.match(self.DOMAIN_P)
                self.state = 6512 
                self.any_name()
                self.state = 6513
                self.match(self.DROP)
                self.state = 6514
                self.match(self.CONSTRAINT)
                self.state = 6515
                self.match(self.IF_P)
                self.state = 6516
                self.match(self.EXISTS)
                self.state = 6517 
                self.name()
                self.state = 6518 
                self.opt_drop_behavior()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6520
                self.match(self.ALTER)
                self.state = 6521
                self.match(self.DOMAIN_P)
                self.state = 6522 
                self.any_name()
                self.state = 6523
                self.match(self.VALIDATE)
                self.state = 6524
                self.match(self.CONSTRAINT)
                self.state = 6525 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_asContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_asContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_as

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_as(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_as(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_as(self)
            else:
                return visitor.visitChildren(self)




    def opt_as(self):

        localctx = PlPgSqlParser.Opt_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_opt_as)
        try:
            self.state = 6531
            token = self._input.LA(1)
            if token in [self.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6529
                self.match(self.AS)

            elif token in [self.AUTHORIZATION, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_SCHEMA, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.ILIKE, self.INNER_P, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEFT, self.LIKE, self.NATIONAL, self.NATURAL, self.NCHAR, self.NOTNULL, self.NUMERIC, self.OUTER_P, self.OVER, self.OVERLAPS, self.REAL, self.RIGHT, self.SETOF, self.SIMILAR, self.SMALLINT, self.TIME, self.TIMESTAMP, self.VARCHAR, self.VERBOSE, self.IDENT, self.SCONST, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTSDictionaryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterTSDictionaryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.DefinitionContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def ALTER(self):
            return self.getToken(PlPgSqlParser.ALTER, 0)

        def DICTIONARY(self):
            return self.getToken(PlPgSqlParser.DICTIONARY, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterTSDictionaryStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterTSDictionaryStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterTSDictionaryStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterTSDictionaryStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTSDictionaryStmt(self):

        localctx = PlPgSqlParser.AlterTSDictionaryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_alterTSDictionaryStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6533
            self.match(self.ALTER)
            self.state = 6534
            self.match(self.TEXT_P)
            self.state = 6535
            self.match(self.SEARCH)
            self.state = 6536
            self.match(self.DICTIONARY)
            self.state = 6537 
            self.any_name()
            self.state = 6538 
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTSConfigurationStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AlterTSConfigurationStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(PlPgSqlParser.TEXT_P, 0)

        def ALTER(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.ALTER)
            else:
                return self.getToken(PlPgSqlParser.ALTER, i)

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,i)


        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def MAPPING(self):
            return self.getToken(PlPgSqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def ADD_P(self):
            return self.getToken(PlPgSqlParser.ADD_P, 0)

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def REPLACE(self):
            return self.getToken(PlPgSqlParser.REPLACE, 0)

        def any_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_name_listContext,0)


        def IF_P(self):
            return self.getToken(PlPgSqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(PlPgSqlParser.DROP, 0)

        def CONFIGURATION(self):
            return self.getToken(PlPgSqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(PlPgSqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alterTSConfigurationStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlterTSConfigurationStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlterTSConfigurationStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlterTSConfigurationStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTSConfigurationStmt(self):

        localctx = PlPgSqlParser.AlterTSConfigurationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_alterTSConfigurationStmt)
        try:
            self.state = 6612
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6540
                self.match(self.ALTER)
                self.state = 6541
                self.match(self.TEXT_P)
                self.state = 6542
                self.match(self.SEARCH)
                self.state = 6543
                self.match(self.CONFIGURATION)
                self.state = 6544 
                self.any_name()
                self.state = 6545
                self.match(self.ADD_P)
                self.state = 6546
                self.match(self.MAPPING)
                self.state = 6547
                self.match(self.FOR)
                self.state = 6548 
                self.name_list(0)
                self.state = 6549
                self.match(self.WITH)
                self.state = 6550 
                self.any_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6552
                self.match(self.ALTER)
                self.state = 6553
                self.match(self.TEXT_P)
                self.state = 6554
                self.match(self.SEARCH)
                self.state = 6555
                self.match(self.CONFIGURATION)
                self.state = 6556 
                self.any_name()
                self.state = 6557
                self.match(self.ALTER)
                self.state = 6558
                self.match(self.MAPPING)
                self.state = 6559
                self.match(self.FOR)
                self.state = 6560 
                self.name_list(0)
                self.state = 6561
                self.match(self.WITH)
                self.state = 6562 
                self.any_name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6564
                self.match(self.ALTER)
                self.state = 6565
                self.match(self.TEXT_P)
                self.state = 6566
                self.match(self.SEARCH)
                self.state = 6567
                self.match(self.CONFIGURATION)
                self.state = 6568 
                self.any_name()
                self.state = 6569
                self.match(self.ALTER)
                self.state = 6570
                self.match(self.MAPPING)
                self.state = 6571
                self.match(self.REPLACE)
                self.state = 6572 
                self.any_name()
                self.state = 6573
                self.match(self.WITH)
                self.state = 6574 
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6576
                self.match(self.ALTER)
                self.state = 6577
                self.match(self.TEXT_P)
                self.state = 6578
                self.match(self.SEARCH)
                self.state = 6579
                self.match(self.CONFIGURATION)
                self.state = 6580 
                self.any_name()
                self.state = 6581
                self.match(self.ALTER)
                self.state = 6582
                self.match(self.MAPPING)
                self.state = 6583
                self.match(self.FOR)
                self.state = 6584 
                self.name_list(0)
                self.state = 6585
                self.match(self.REPLACE)
                self.state = 6586 
                self.any_name()
                self.state = 6587
                self.match(self.WITH)
                self.state = 6588 
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6590
                self.match(self.ALTER)
                self.state = 6591
                self.match(self.TEXT_P)
                self.state = 6592
                self.match(self.SEARCH)
                self.state = 6593
                self.match(self.CONFIGURATION)
                self.state = 6594 
                self.any_name()
                self.state = 6595
                self.match(self.DROP)
                self.state = 6596
                self.match(self.MAPPING)
                self.state = 6597
                self.match(self.FOR)
                self.state = 6598 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6600
                self.match(self.ALTER)
                self.state = 6601
                self.match(self.TEXT_P)
                self.state = 6602
                self.match(self.SEARCH)
                self.state = 6603
                self.match(self.CONFIGURATION)
                self.state = 6604 
                self.any_name()
                self.state = 6605
                self.match(self.DROP)
                self.state = 6606
                self.match(self.MAPPING)
                self.state = 6607
                self.match(self.IF_P)
                self.state = 6608
                self.match(self.EXISTS)
                self.state = 6609
                self.match(self.FOR)
                self.state = 6610 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateConversionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CreateConversionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,i)


        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def opt_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_defaultContext,0)


        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def CONVERSION_P(self):
            return self.getToken(PlPgSqlParser.CONVERSION_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.SConstContext,i)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_createConversionStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCreateConversionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCreateConversionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCreateConversionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createConversionStmt(self):

        localctx = PlPgSqlParser.CreateConversionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_createConversionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6614
            self.match(self.CREATE)
            self.state = 6615 
            self.opt_default()
            self.state = 6616
            self.match(self.CONVERSION_P)
            self.state = 6617 
            self.any_name()
            self.state = 6618
            self.match(self.FOR)
            self.state = 6619 
            self.sConst()
            self.state = 6620
            self.match(self.TO)
            self.state = 6621 
            self.sConst()
            self.state = 6622
            self.match(self.FROM)
            self.state = 6623 
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusterStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ClusterStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def cluster_index_specification(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cluster_index_specificationContext,0)


        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_nameContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_verboseContext,0)


        def CLUSTER(self):
            return self.getToken(PlPgSqlParser.CLUSTER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_clusterStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterClusterStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitClusterStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitClusterStmt(self)
            else:
                return visitor.visitChildren(self)




    def clusterStmt(self):

        localctx = PlPgSqlParser.ClusterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_clusterStmt)
        try:
            self.state = 6638
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6625
                self.match(self.CLUSTER)
                self.state = 6626 
                self.opt_verbose()
                self.state = 6627 
                self.qualified_name()
                self.state = 6628 
                self.cluster_index_specification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6630
                self.match(self.CLUSTER)
                self.state = 6631 
                self.opt_verbose()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6632
                self.match(self.CLUSTER)
                self.state = 6633 
                self.opt_verbose()
                self.state = 6634 
                self.index_name()
                self.state = 6635
                self.match(self.ON)
                self.state = 6636 
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cluster_index_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cluster_index_specificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cluster_index_specification

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCluster_index_specification(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCluster_index_specification(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCluster_index_specification(self)
            else:
                return visitor.visitChildren(self)




    def cluster_index_specification(self):

        localctx = PlPgSqlParser.Cluster_index_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_cluster_index_specification)
        try:
            self.state = 6643
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6640
                self.match(self.USING)
                self.state = 6641 
                self.index_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VacuumStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.VacuumStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def opt_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_name_listContext,0)


        def opt_full(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_fullContext,0)


        def opt_freeze(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_freezeContext,0)


        def vacuum_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Vacuum_option_listContext,0)


        def analyzeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.AnalyzeStmtContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_verboseContext,0)


        def VACUUM(self):
            return self.getToken(PlPgSqlParser.VACUUM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_vacuumStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVacuumStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVacuumStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVacuumStmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuumStmt(self):

        localctx = PlPgSqlParser.VacuumStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_vacuumStmt)
        try:
            self.state = 6674
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6645
                self.match(self.VACUUM)
                self.state = 6646 
                self.opt_full()
                self.state = 6647 
                self.opt_freeze()
                self.state = 6648 
                self.opt_verbose()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6650
                self.match(self.VACUUM)
                self.state = 6651 
                self.opt_full()
                self.state = 6652 
                self.opt_freeze()
                self.state = 6653 
                self.opt_verbose()
                self.state = 6654 
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6656
                self.match(self.VACUUM)
                self.state = 6657 
                self.opt_full()
                self.state = 6658 
                self.opt_freeze()
                self.state = 6659 
                self.opt_verbose()
                self.state = 6660 
                self.analyzeStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6662
                self.match(self.VACUUM)
                self.state = 6663
                self.match(self.T__7)
                self.state = 6664 
                self.vacuum_option_list(0)
                self.state = 6665
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6667
                self.match(self.VACUUM)
                self.state = 6668
                self.match(self.T__7)
                self.state = 6669 
                self.vacuum_option_list(0)
                self.state = 6670
                self.match(self.T__13)
                self.state = 6671 
                self.qualified_name()
                self.state = 6672 
                self.opt_name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Vacuum_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def vacuum_option_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Vacuum_option_elemContext,0)


        def vacuum_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Vacuum_option_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_vacuum_option_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVacuum_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVacuum_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVacuum_option_list(self)
            else:
                return visitor.visitChildren(self)



    def vacuum_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Vacuum_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 842
        self.enterRecursionRule(localctx, 842, self.RULE_vacuum_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6677 
            self.vacuum_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Vacuum_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_vacuum_option_list)
                    self.state = 6679
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6680
                    self.match(self.T__12)
                    self.state = 6681 
                    self.vacuum_option_elem() 
                self.state = 6686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Vacuum_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Vacuum_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Analyze_keywordContext,0)


        def FULL(self):
            return self.getToken(PlPgSqlParser.FULL, 0)

        def VERBOSE(self):
            return self.getToken(PlPgSqlParser.VERBOSE, 0)

        def FREEZE(self):
            return self.getToken(PlPgSqlParser.FREEZE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_vacuum_option_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterVacuum_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitVacuum_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitVacuum_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_option_elem(self):

        localctx = PlPgSqlParser.Vacuum_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_vacuum_option_elem)
        try:
            self.state = 6691
            token = self._input.LA(1)
            if token in [self.ANALYSE, self.ANALYZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6687 
                self.analyze_keyword()

            elif token in [self.VERBOSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6688
                self.match(self.VERBOSE)

            elif token in [self.FREEZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6689
                self.match(self.FREEZE)

            elif token in [self.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6690
                self.match(self.FULL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnalyzeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AnalyzeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def opt_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_name_listContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Analyze_keywordContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_verboseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_analyzeStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAnalyzeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAnalyzeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAnalyzeStmt(self)
            else:
                return visitor.visitChildren(self)




    def analyzeStmt(self):

        localctx = PlPgSqlParser.AnalyzeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_analyzeStmt)
        try:
            self.state = 6701
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6693 
                self.analyze_keyword()
                self.state = 6694 
                self.opt_verbose()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6696 
                self.analyze_keyword()
                self.state = 6697 
                self.opt_verbose()
                self.state = 6698 
                self.qualified_name()
                self.state = 6699 
                self.opt_name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Analyze_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(PlPgSqlParser.ANALYZE, 0)

        def ANALYSE(self):
            return self.getToken(PlPgSqlParser.ANALYSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_analyze_keyword

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAnalyze_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAnalyze_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAnalyze_keyword(self)
            else:
                return visitor.visitChildren(self)




    def analyze_keyword(self):

        localctx = PlPgSqlParser.Analyze_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_analyze_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6703
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ANALYSE or _la==PlPgSqlParser.ANALYZE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_verboseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_verboseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VERBOSE(self):
            return self.getToken(PlPgSqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_verbose

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_verbose(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_verbose(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_verbose(self)
            else:
                return visitor.visitChildren(self)




    def opt_verbose(self):

        localctx = PlPgSqlParser.Opt_verboseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_opt_verbose)
        try:
            self.state = 6707
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6705
                self.match(self.VERBOSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_fullContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_fullContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PlPgSqlParser.FULL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_full

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_full(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_full(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_full(self)
            else:
                return visitor.visitChildren(self)




    def opt_full(self):

        localctx = PlPgSqlParser.Opt_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_opt_full)
        try:
            self.state = 6711
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6709
                self.match(self.FULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_freezeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_freezeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FREEZE(self):
            return self.getToken(PlPgSqlParser.FREEZE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_freeze

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_freeze(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_freeze(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_freeze(self)
            else:
                return visitor.visitChildren(self)




    def opt_freeze(self):

        localctx = PlPgSqlParser.Opt_freezeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_opt_freeze)
        try:
            self.state = 6715
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6713
                self.match(self.FREEZE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_name_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_name_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_name_list(self):

        localctx = PlPgSqlParser.Opt_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_opt_name_list)
        try:
            self.state = 6722
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6717
                self.match(self.T__7)
                self.state = 6718 
                self.name_list(0)
                self.state = 6719
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExplainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Analyze_keywordContext,0)


        def explainableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExplainableStmtContext,0)


        def VERBOSE(self):
            return self.getToken(PlPgSqlParser.VERBOSE, 0)

        def EXPLAIN(self):
            return self.getToken(PlPgSqlParser.EXPLAIN, 0)

        def explain_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Explain_option_listContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_verboseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explainStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplainStmt(self)
            else:
                return visitor.visitChildren(self)




    def explainStmt(self):

        localctx = PlPgSqlParser.ExplainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_explainStmt)
        try:
            self.state = 6740
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6724
                self.match(self.EXPLAIN)
                self.state = 6725 
                self.explainableStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6726
                self.match(self.EXPLAIN)
                self.state = 6727 
                self.analyze_keyword()
                self.state = 6728 
                self.opt_verbose()
                self.state = 6729 
                self.explainableStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6731
                self.match(self.EXPLAIN)
                self.state = 6732
                self.match(self.VERBOSE)
                self.state = 6733 
                self.explainableStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6734
                self.match(self.EXPLAIN)
                self.state = 6735
                self.match(self.T__7)
                self.state = 6736 
                self.explain_option_list(0)
                self.state = 6737
                self.match(self.T__13)
                self.state = 6738 
                self.explainableStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplainableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExplainableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def declareCursorStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeclareCursorStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.InsertStmtContext,0)


        def createAsStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.CreateAsStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeleteStmtContext,0)


        def executeStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.ExecuteStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explainableStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplainableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplainableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplainableStmt(self)
            else:
                return visitor.visitChildren(self)




    def explainableStmt(self):

        localctx = PlPgSqlParser.ExplainableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_explainableStmt)
        try:
            self.state = 6749
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6742 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6743 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6744 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6745 
                self.deleteStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6746 
                self.declareCursorStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6747 
                self.createAsStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6748 
                self.executeStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Explain_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explain_option_elem(self):
            return self.getTypedRuleContext(PlPgSqlParser.Explain_option_elemContext,0)


        def explain_option_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Explain_option_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explain_option_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplain_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplain_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplain_option_list(self)
            else:
                return visitor.visitChildren(self)



    def explain_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Explain_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 862
        self.enterRecursionRule(localctx, 862, self.RULE_explain_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6752 
            self.explain_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Explain_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_explain_option_list)
                    self.state = 6754
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6755
                    self.match(self.T__12)
                    self.state = 6756 
                    self.explain_option_elem() 
                self.state = 6761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Explain_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Explain_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explain_option_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Explain_option_nameContext,0)


        def explain_option_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Explain_option_argContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explain_option_elem

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplain_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplain_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplain_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_elem(self):

        localctx = PlPgSqlParser.Explain_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_explain_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6762 
            self.explain_option_name()
            self.state = 6763 
            self.explain_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Explain_option_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Analyze_keywordContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def VERBOSE(self):
            return self.getToken(PlPgSqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explain_option_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplain_option_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplain_option_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplain_option_name(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_name(self):

        localctx = PlPgSqlParser.Explain_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_explain_option_name)
        try:
            self.state = 6768
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6765 
                self.colId()

            elif token in [self.ANALYSE, self.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6766 
                self.analyze_keyword()

            elif token in [self.VERBOSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6767
                self.match(self.VERBOSE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Explain_option_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_explain_option_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExplain_option_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExplain_option_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExplain_option_arg(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_arg(self):

        localctx = PlPgSqlParser.Explain_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_explain_option_arg)
        try:
            self.state = 6773
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6770 
                self.opt_boolean_or_string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6771 
                self.numericOnly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrepareStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.PrepareStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def preparableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.PreparableStmtContext,0)


        def prep_type_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Prep_type_clauseContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def PREPARE(self):
            return self.getToken(PlPgSqlParser.PREPARE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_prepareStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrepareStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrepareStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrepareStmt(self)
            else:
                return visitor.visitChildren(self)




    def prepareStmt(self):

        localctx = PlPgSqlParser.PrepareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_prepareStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6775
            self.match(self.PREPARE)
            self.state = 6776 
            self.name()
            self.state = 6777 
            self.prep_type_clause()
            self.state = 6778
            self.match(self.AS)
            self.state = 6779 
            self.preparableStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prep_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Prep_type_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_prep_type_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPrep_type_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPrep_type_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPrep_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def prep_type_clause(self):

        localctx = PlPgSqlParser.Prep_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_prep_type_clause)
        try:
            self.state = 6786
            token = self._input.LA(1)
            if token in [self.T__7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6781
                self.match(self.T__7)
                self.state = 6782 
                self.type_list(0)
                self.state = 6783
                self.match(self.T__13)

            elif token in [self.AS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreparableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.PreparableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.InsertStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.DeleteStmtContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_preparableStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPreparableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPreparableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPreparableStmt(self)
            else:
                return visitor.visitChildren(self)




    def preparableStmt(self):

        localctx = PlPgSqlParser.PreparableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_preparableStmt)
        try:
            self.state = 6792
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6788 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6789 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6790 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6791 
                self.deleteStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecuteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ExecuteStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def execute_param_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Execute_param_clauseContext,0)


        def EXECUTE(self):
            return self.getToken(PlPgSqlParser.EXECUTE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Create_as_targetContext,0)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempContext,0)


        def opt_with_data(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_with_dataContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_executeStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExecuteStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExecuteStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExecuteStmt(self)
            else:
                return visitor.visitChildren(self)




    def executeStmt(self):

        localctx = PlPgSqlParser.ExecuteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_executeStmt)
        try:
            self.state = 6808
            token = self._input.LA(1)
            if token in [self.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6794
                self.match(self.EXECUTE)
                self.state = 6795 
                self.name()
                self.state = 6796 
                self.execute_param_clause()

            elif token in [self.CREATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6798
                self.match(self.CREATE)
                self.state = 6799 
                self.optTemp()
                self.state = 6800
                self.match(self.TABLE)
                self.state = 6801 
                self.create_as_target()
                self.state = 6802
                self.match(self.AS)
                self.state = 6803
                self.match(self.EXECUTE)
                self.state = 6804 
                self.name()
                self.state = 6805 
                self.execute_param_clause()
                self.state = 6806 
                self.opt_with_data()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_param_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Execute_param_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_execute_param_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExecute_param_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExecute_param_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExecute_param_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_param_clause(self):

        localctx = PlPgSqlParser.Execute_param_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_execute_param_clause)
        try:
            self.state = 6815
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6810
                self.match(self.T__7)
                self.state = 6811 
                self.expr_list(0)
                self.state = 6812
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeallocateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DeallocateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def DEALLOCATE(self):
            return self.getToken(PlPgSqlParser.DEALLOCATE, 0)

        def PREPARE(self):
            return self.getToken(PlPgSqlParser.PREPARE, 0)

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_deallocateStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDeallocateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDeallocateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDeallocateStmt(self)
            else:
                return visitor.visitChildren(self)




    def deallocateStmt(self):

        localctx = PlPgSqlParser.DeallocateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_deallocateStmt)
        try:
            self.state = 6827
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6817
                self.match(self.DEALLOCATE)
                self.state = 6818 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6819
                self.match(self.DEALLOCATE)
                self.state = 6820
                self.match(self.PREPARE)
                self.state = 6821 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6822
                self.match(self.DEALLOCATE)
                self.state = 6823
                self.match(self.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6824
                self.match(self.DEALLOCATE)
                self.state = 6825
                self.match(self.PREPARE)
                self.state = 6826
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.InsertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def insert_rest(self):
            return self.getTypedRuleContext(PlPgSqlParser.Insert_restContext,0)


        def INTO(self):
            return self.getToken(PlPgSqlParser.INTO, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Returning_clauseContext,0)


        def INSERT(self):
            return self.getToken(PlPgSqlParser.INSERT, 0)

        def opt_with_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_with_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_insertStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInsertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInsertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInsertStmt(self)
            else:
                return visitor.visitChildren(self)




    def insertStmt(self):

        localctx = PlPgSqlParser.InsertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_insertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6829 
            self.opt_with_clause()
            self.state = 6830
            self.match(self.INSERT)
            self.state = 6831
            self.match(self.INTO)
            self.state = 6832 
            self.qualified_name()
            self.state = 6833 
            self.insert_rest()
            self.state = 6834 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_restContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Insert_restContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def VALUES(self):
            return self.getToken(PlPgSqlParser.VALUES, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Insert_column_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_insert_rest

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInsert_rest(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInsert_rest(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInsert_rest(self)
            else:
                return visitor.visitChildren(self)




    def insert_rest(self):

        localctx = PlPgSqlParser.Insert_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_insert_rest)
        try:
            self.state = 6844
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6836 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6837
                self.match(self.T__7)
                self.state = 6838 
                self.insert_column_list(0)
                self.state = 6839
                self.match(self.T__13)
                self.state = 6840 
                self.selectStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6842
                self.match(self.DEFAULT)
                self.state = 6843
                self.match(self.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Insert_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def insert_column_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.Insert_column_itemContext,0)


        def insert_column_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Insert_column_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_insert_column_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInsert_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInsert_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInsert_column_list(self)
            else:
                return visitor.visitChildren(self)



    def insert_column_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Insert_column_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 886
        self.enterRecursionRule(localctx, 886, self.RULE_insert_column_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6847 
            self.insert_column_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Insert_column_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_column_list)
                    self.state = 6849
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6850
                    self.match(self.T__12)
                    self.state = 6851 
                    self.insert_column_item() 
                self.state = 6856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Insert_column_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Insert_column_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_insert_column_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInsert_column_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInsert_column_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInsert_column_item(self)
            else:
                return visitor.visitChildren(self)




    def insert_column_item(self):

        localctx = PlPgSqlParser.Insert_column_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_insert_column_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6857 
            self.colId()
            self.state = 6858 
            self.opt_indirection(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Returning_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def target_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Target_listContext,0)


        def RETURNING(self):
            return self.getToken(PlPgSqlParser.RETURNING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_returning_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReturning_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReturning_clause(self)
            else:
                return visitor.visitChildren(self)




    def returning_clause(self):

        localctx = PlPgSqlParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_returning_clause)
        try:
            self.state = 6863
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6860
                self.match(self.RETURNING)
                self.state = 6861 
                self.target_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DeleteStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_or_current_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Where_or_current_clauseContext,0)


        def DELETE_P(self):
            return self.getToken(PlPgSqlParser.DELETE_P, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_expr_opt_aliasContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Returning_clauseContext,0)


        def opt_with_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_with_clauseContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def using_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_deleteStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDeleteStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDeleteStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDeleteStmt(self)
            else:
                return visitor.visitChildren(self)




    def deleteStmt(self):

        localctx = PlPgSqlParser.DeleteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_deleteStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6865 
            self.opt_with_clause()
            self.state = 6866
            self.match(self.DELETE_P)
            self.state = 6867
            self.match(self.FROM)
            self.state = 6868 
            self.relation_expr_opt_alias()
            self.state = 6869 
            self.using_clause()
            self.state = 6870 
            self.where_or_current_clause()
            self.state = 6871 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Using_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_listContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_using_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitUsing_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = PlPgSqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_using_clause)
        try:
            self.state = 6876
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6873
                self.match(self.USING)
                self.state = 6874 
                self.from_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.LockStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_nowait(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_nowaitContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_expr_listContext,0)


        def opt_lock(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_lockContext,0)


        def opt_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_tableContext,0)


        def LOCK_P(self):
            return self.getToken(PlPgSqlParser.LOCK_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_lockStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLockStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLockStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLockStmt(self)
            else:
                return visitor.visitChildren(self)




    def lockStmt(self):

        localctx = PlPgSqlParser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_lockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6878
            self.match(self.LOCK_P)
            self.state = 6879 
            self.opt_table()
            self.state = 6880 
            self.relation_expr_list(0)
            self.state = 6881 
            self.opt_lock()
            self.state = 6882 
            self.opt_nowait()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_lockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_lockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MODE(self):
            return self.getToken(PlPgSqlParser.MODE, 0)

        def lock_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Lock_typeContext,0)


        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_lock

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_lock(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_lock(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_lock(self)
            else:
                return visitor.visitChildren(self)




    def opt_lock(self):

        localctx = PlPgSqlParser.Opt_lockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_opt_lock)
        try:
            self.state = 6889
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6884
                self.match(self.IN_P)
                self.state = 6885 
                self.lock_type()
                self.state = 6886
                self.match(self.MODE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Lock_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCLUSIVE(self):
            return self.getToken(PlPgSqlParser.EXCLUSIVE, 0)

        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(PlPgSqlParser.ACCESS, 0)

        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(PlPgSqlParser.SHARE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_lock_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLock_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLock_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLock_type(self)
            else:
                return visitor.visitChildren(self)




    def lock_type(self):

        localctx = PlPgSqlParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_lock_type)
        try:
            self.state = 6907
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6891
                self.match(self.ACCESS)
                self.state = 6892
                self.match(self.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6893
                self.match(self.ROW)
                self.state = 6894
                self.match(self.SHARE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6895
                self.match(self.ROW)
                self.state = 6896
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6897
                self.match(self.SHARE)
                self.state = 6898
                self.match(self.UPDATE)
                self.state = 6899
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6900
                self.match(self.SHARE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6901
                self.match(self.SHARE)
                self.state = 6902
                self.match(self.ROW)
                self.state = 6903
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6904
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6905
                self.match(self.ACCESS)
                self.state = 6906
                self.match(self.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_nowaitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_nowaitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(PlPgSqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_nowait

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_nowait(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_nowait(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_nowait(self)
            else:
                return visitor.visitChildren(self)




    def opt_nowait(self):

        localctx = PlPgSqlParser.Opt_nowaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_opt_nowait)
        try:
            self.state = 6911
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6909
                self.match(self.NOWAIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.UpdateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def from_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Where_or_current_clauseContext,0)


        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_expr_opt_aliasContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Returning_clauseContext,0)


        def set_clause_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_clause_listContext,0)


        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def opt_with_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_with_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_updateStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterUpdateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitUpdateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitUpdateStmt(self)
            else:
                return visitor.visitChildren(self)




    def updateStmt(self):

        localctx = PlPgSqlParser.UpdateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_updateStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6913 
            self.opt_with_clause()
            self.state = 6914
            self.match(self.UPDATE)
            self.state = 6915 
            self.relation_expr_opt_alias()
            self.state = 6916
            self.match(self.SET)
            self.state = 6917 
            self.set_clause_list(0)
            self.state = 6918 
            self.from_clause()
            self.state = 6919 
            self.where_or_current_clause()
            self.state = 6920 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_clause_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_clause_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_clauseContext,0)


        def set_clause_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_clause_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_clause_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_clause_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_clause_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_clause_list(self)
            else:
                return visitor.visitChildren(self)



    def set_clause_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Set_clause_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 906
        self.enterRecursionRule(localctx, 906, self.RULE_set_clause_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6923 
            self.set_clause()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,337,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Set_clause_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_clause_list)
                    self.state = 6925
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6926
                    self.match(self.T__12)
                    self.state = 6927 
                    self.set_clause() 
                self.state = 6932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiple_set_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Multiple_set_clauseContext,0)


        def single_set_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Single_set_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_clause(self)
            else:
                return visitor.visitChildren(self)




    def set_clause(self):

        localctx = PlPgSqlParser.Set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_set_clause)
        try:
            self.state = 6935
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6933 
                self.single_set_clause()

            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6934 
                self.multiple_set_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Single_set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_targetContext,0)


        def ctext_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_single_set_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSingle_set_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSingle_set_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSingle_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def single_set_clause(self):

        localctx = PlPgSqlParser.Single_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_single_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6937 
            self.set_target()
            self.state = 6938
            self.match(self.T__4)
            self.state = 6939 
            self.ctext_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Multiple_set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_row(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_rowContext,0)


        def set_target_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_target_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_multiple_set_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterMultiple_set_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitMultiple_set_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitMultiple_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def multiple_set_clause(self):

        localctx = PlPgSqlParser.Multiple_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_multiple_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6941
            self.match(self.T__7)
            self.state = 6942 
            self.set_target_list(0)
            self.state = 6943
            self.match(self.T__13)
            self.state = 6944
            self.match(self.T__4)
            self.state = 6945 
            self.ctext_row()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_target

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_target(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_target(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_target(self)
            else:
                return visitor.visitChildren(self)




    def set_target(self):

        localctx = PlPgSqlParser.Set_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_set_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6947 
            self.colId()
            self.state = 6948 
            self.opt_indirection(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_target_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Set_target_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_targetContext,0)


        def set_target_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Set_target_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_set_target_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSet_target_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSet_target_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSet_target_list(self)
            else:
                return visitor.visitChildren(self)



    def set_target_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Set_target_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 916
        self.enterRecursionRule(localctx, 916, self.RULE_set_target_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6951 
            self.set_target()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Set_target_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_target_list)
                    self.state = 6953
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6954
                    self.match(self.T__12)
                    self.state = 6955 
                    self.set_target() 
                self.state = 6960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclareCursorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.DeclareCursorStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_hold(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_holdContext,0)


        def CURSOR(self):
            return self.getToken(PlPgSqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def DECLARE(self):
            return self.getToken(PlPgSqlParser.DECLARE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.SelectStmtContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_nameContext,0)


        def cursor_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_optionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_declareCursorStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDeclareCursorStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDeclareCursorStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDeclareCursorStmt(self)
            else:
                return visitor.visitChildren(self)




    def declareCursorStmt(self):

        localctx = PlPgSqlParser.DeclareCursorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_declareCursorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6961
            self.match(self.DECLARE)
            self.state = 6962 
            self.cursor_name()
            self.state = 6963 
            self.cursor_options(0)
            self.state = 6964
            self.match(self.CURSOR)
            self.state = 6965 
            self.opt_hold()
            self.state = 6966
            self.match(self.FOR)
            self.state = 6967 
            self.selectStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cursor_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cursor_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCursor_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCursor_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = PlPgSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_cursor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6969 
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cursor_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSENSITIVE(self):
            return self.getToken(PlPgSqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(PlPgSqlParser.SCROLL, 0)

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def BINARY(self):
            return self.getToken(PlPgSqlParser.BINARY, 0)

        def cursor_options(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_optionsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cursor_options

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCursor_options(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCursor_options(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCursor_options(self)
            else:
                return visitor.visitChildren(self)



    def cursor_options(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Cursor_optionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 922
        self.enterRecursionRule(localctx, 922, self.RULE_cursor_options, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6981
                    la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6972
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6973
                        self.match(self.NO)
                        self.state = 6974
                        self.match(self.SCROLL)
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6975
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6976
                        self.match(self.SCROLL)
                        pass

                    elif la_ == 3:
                        localctx = PlPgSqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6977
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6978
                        self.match(self.BINARY)
                        pass

                    elif la_ == 4:
                        localctx = PlPgSqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6979
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6980
                        self.match(self.INSENSITIVE)
                        pass

             
                self.state = 6985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_holdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_holdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HOLD(self):
            return self.getToken(PlPgSqlParser.HOLD, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(PlPgSqlParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_hold

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_hold(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_hold(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_hold(self)
            else:
                return visitor.visitChildren(self)




    def opt_hold(self):

        localctx = PlPgSqlParser.Opt_holdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_opt_hold)
        try:
            self.state = 6991
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6987
                self.match(self.WITH)
                self.state = 6988
                self.match(self.HOLD)

            elif token in [self.WITHOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6989
                self.match(self.WITHOUT)
                self.state = 6990
                self.match(self.HOLD)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SelectStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_no_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_no_parensContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_selectStmt

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelectStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = PlPgSqlParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_selectStmt)
        try:
            self.state = 6995
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6993 
                self.select_no_parens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6994 
                self.select_with_parens(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_with_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_with_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PlPgSqlParser.EXCEPT, 0)

        def simple_select(self):
            return self.getTypedRuleContext(PlPgSqlParser.Simple_selectContext,0)


        def UNION(self):
            return self.getToken(PlPgSqlParser.UNION, 0)

        def opt_all(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_allContext,0)


        def INTERSECT(self):
            return self.getToken(PlPgSqlParser.INTERSECT, 0)

        def select_no_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_no_parensContext,0)


        def select_with_parens(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Select_with_parensContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,i)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_with_parens

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_with_parens(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_with_parens(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_with_parens(self)
            else:
                return visitor.visitChildren(self)



    def select_with_parens(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Select_with_parensContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 928
        self.enterRecursionRule(localctx, 928, self.RULE_select_with_parens, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7006
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 6998
                self.match(self.T__7)
                self.state = 6999 
                self.select_no_parens()
                self.state = 7000
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.state = 7002
                self.match(self.T__7)
                self.state = 7003 
                self.select_with_parens(0)
                self.state = 7004
                self.match(self.T__13)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7029
                    la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 7008
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7009
                        self.match(self.UNION)
                        self.state = 7010 
                        self.opt_all()
                        self.state = 7013
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7011 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7012 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 7015
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7016
                        self.match(self.INTERSECT)
                        self.state = 7017 
                        self.opt_all()
                        self.state = 7020
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7018 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7019 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        localctx = PlPgSqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 7022
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7023
                        self.match(self.EXCEPT)
                        self.state = 7024 
                        self.opt_all()
                        self.state = 7027
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7025 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7026 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 7033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Select_no_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_no_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_for_locking_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_for_locking_clauseContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.With_clauseContext,0)


        def select_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_clauseContext,0)


        def simple_select(self):
            return self.getTypedRuleContext(PlPgSqlParser.Simple_selectContext,0)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_sort_clauseContext,0)


        def select_limit(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_limitContext,0)


        def sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sort_clauseContext,0)


        def opt_select_limit(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_select_limitContext,0)


        def for_locking_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_no_parens

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_no_parens(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_no_parens(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_no_parens(self)
            else:
                return visitor.visitChildren(self)




    def select_no_parens(self):

        localctx = PlPgSqlParser.Select_no_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_select_no_parens)
        try:
            self.state = 7067
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7034 
                self.simple_select(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7035 
                self.select_clause()
                self.state = 7036 
                self.sort_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7038 
                self.select_clause()
                self.state = 7039 
                self.opt_sort_clause()
                self.state = 7040 
                self.for_locking_clause()
                self.state = 7041 
                self.opt_select_limit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7043 
                self.select_clause()
                self.state = 7044 
                self.opt_sort_clause()
                self.state = 7045 
                self.select_limit()
                self.state = 7046 
                self.opt_for_locking_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7048 
                self.with_clause()
                self.state = 7049 
                self.select_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7051 
                self.with_clause()
                self.state = 7052 
                self.select_clause()
                self.state = 7053 
                self.sort_clause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7055 
                self.with_clause()
                self.state = 7056 
                self.select_clause()
                self.state = 7057 
                self.opt_sort_clause()
                self.state = 7058 
                self.for_locking_clause()
                self.state = 7059 
                self.opt_select_limit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7061 
                self.with_clause()
                self.state = 7062 
                self.select_clause()
                self.state = 7063 
                self.opt_sort_clause()
                self.state = 7064 
                self.select_limit()
                self.state = 7065 
                self.opt_for_locking_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_select(self):
            return self.getTypedRuleContext(PlPgSqlParser.Simple_selectContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_clause(self)
            else:
                return visitor.visitChildren(self)




    def select_clause(self):

        localctx = PlPgSqlParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_select_clause)
        try:
            self.state = 7071
            token = self._input.LA(1)
            if token in [self.SELECT, self.TABLE, self.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7069 
                self.simple_select(0)

            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7070 
                self.select_with_parens(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_selectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Simple_selectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PlPgSqlParser.EXCEPT, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Where_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Values_clauseContext,0)


        def opt_distinct(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_distinctContext,0)


        def INTERSECT(self):
            return self.getToken(PlPgSqlParser.INTERSECT, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def SELECT(self):
            return self.getToken(PlPgSqlParser.SELECT, 0)

        def target_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Target_listContext,0)


        def UNION(self):
            return self.getToken(PlPgSqlParser.UNION, 0)

        def from_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_clauseContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Into_clauseContext,0)


        def opt_all(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_allContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Group_clauseContext,0)


        def simple_select(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Simple_selectContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Simple_selectContext,i)


        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def having_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_simple_select

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSimple_select(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSimple_select(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSimple_select(self)
            else:
                return visitor.visitChildren(self)



    def simple_select(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Simple_selectContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 934
        self.enterRecursionRule(localctx, 934, self.RULE_simple_select, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7087
            token = self._input.LA(1)
            if token in [self.SELECT]:
                self.state = 7074
                self.match(self.SELECT)
                self.state = 7075 
                self.opt_distinct()
                self.state = 7076 
                self.target_list(0)
                self.state = 7077 
                self.into_clause()
                self.state = 7078 
                self.from_clause()
                self.state = 7079 
                self.where_clause()
                self.state = 7080 
                self.group_clause()
                self.state = 7081 
                self.having_clause()
                self.state = 7082 
                self.window_clause()

            elif token in [self.VALUES]:
                self.state = 7084 
                self.values_clause(0)

            elif token in [self.TABLE]:
                self.state = 7085
                self.match(self.TABLE)
                self.state = 7086 
                self.relation_expr()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 7112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7110
                    la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 7089
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7090
                        self.match(self.UNION)
                        self.state = 7091 
                        self.opt_all()
                        self.state = 7094
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7092 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7093 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 7096
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7097
                        self.match(self.INTERSECT)
                        self.state = 7098 
                        self.opt_all()
                        self.state = 7101
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7099 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7100 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        localctx = PlPgSqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 7103
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7104
                        self.match(self.EXCEPT)
                        self.state = 7105 
                        self.opt_all()
                        self.state = 7108
                        token = self._input.LA(1)
                        if token in [self.T__7]:
                            self.state = 7106 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 7107 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 7114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cte_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cte_listContext,0)


        def RECURSIVE(self):
            return self.getToken(PlPgSqlParser.RECURSIVE, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_with_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWith_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = PlPgSqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_with_clause)
        try:
            self.state = 7120
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7115
                self.match(self.WITH)
                self.state = 7116 
                self.cte_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7117
                self.match(self.WITH)
                self.state = 7118
                self.match(self.RECURSIVE)
                self.state = 7119 
                self.cte_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Cte_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_table_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Common_table_exprContext,0)


        def cte_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cte_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_cte_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCte_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCte_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCte_list(self)
            else:
                return visitor.visitChildren(self)



    def cte_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Cte_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 938
        self.enterRecursionRule(localctx, 938, self.RULE_cte_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7123 
            self.common_table_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Cte_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_cte_list)
                    self.state = 7125
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7126
                    self.match(self.T__12)
                    self.state = 7127 
                    self.common_table_expr() 
                self.state = 7132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Common_table_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Common_table_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def opt_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_name_listContext,0)


        def preparableStmt(self):
            return self.getTypedRuleContext(PlPgSqlParser.PreparableStmtContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_common_table_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCommon_table_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCommon_table_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCommon_table_expr(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expr(self):

        localctx = PlPgSqlParser.Common_table_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_common_table_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7133 
            self.name()
            self.state = 7134 
            self.opt_name_list()
            self.state = 7135
            self.match(self.AS)
            self.state = 7136
            self.match(self.T__7)
            self.state = 7137 
            self.preparableStmt()
            self.state = 7138
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_with_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_with_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def with_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.With_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_with_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_with_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_with_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_with_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_with_clause(self):

        localctx = PlPgSqlParser.Opt_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_opt_with_clause)
        try:
            self.state = 7142
            token = self._input.LA(1)
            if token in [self.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7140 
                self.with_clause()

            elif token in [self.DELETE_P, self.INSERT, self.UPDATE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Into_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optTempTableName(self):
            return self.getTypedRuleContext(PlPgSqlParser.OptTempTableNameContext,0)


        def INTO(self):
            return self.getToken(PlPgSqlParser.INTO, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_into_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInto_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInto_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = PlPgSqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_into_clause)
        try:
            self.state = 7147
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7144
                self.match(self.INTO)
                self.state = 7145 
                self.optTempTableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTempTableNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OptTempTableNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def UNLOGGED(self):
            return self.getToken(PlPgSqlParser.UNLOGGED, 0)

        def GLOBAL(self):
            return self.getToken(PlPgSqlParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(PlPgSqlParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def LOCAL(self):
            return self.getToken(PlPgSqlParser.LOCAL, 0)

        def TEMP(self):
            return self.getToken(PlPgSqlParser.TEMP, 0)

        def opt_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_tableContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_optTempTableName

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOptTempTableName(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOptTempTableName(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOptTempTableName(self)
            else:
                return visitor.visitChildren(self)




    def optTempTableName(self):

        localctx = PlPgSqlParser.OptTempTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_optTempTableName)
        try:
            self.state = 7184
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7149
                self.match(self.TEMPORARY)
                self.state = 7150 
                self.opt_table()
                self.state = 7151 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7153
                self.match(self.TEMP)
                self.state = 7154 
                self.opt_table()
                self.state = 7155 
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7157
                self.match(self.LOCAL)
                self.state = 7158
                self.match(self.TEMPORARY)
                self.state = 7159 
                self.opt_table()
                self.state = 7160 
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7162
                self.match(self.LOCAL)
                self.state = 7163
                self.match(self.TEMP)
                self.state = 7164 
                self.opt_table()
                self.state = 7165 
                self.qualified_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7167
                self.match(self.GLOBAL)
                self.state = 7168
                self.match(self.TEMPORARY)
                self.state = 7169 
                self.opt_table()
                self.state = 7170 
                self.qualified_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7172
                self.match(self.GLOBAL)
                self.state = 7173
                self.match(self.TEMP)
                self.state = 7174 
                self.opt_table()
                self.state = 7175 
                self.qualified_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7177
                self.match(self.UNLOGGED)
                self.state = 7178 
                self.opt_table()
                self.state = 7179 
                self.qualified_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7181
                self.match(self.TABLE)
                self.state = 7182 
                self.qualified_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7183 
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_table

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_table(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_table(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_table(self)
            else:
                return visitor.visitChildren(self)




    def opt_table(self):

        localctx = PlPgSqlParser.Opt_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_opt_table)
        try:
            self.state = 7188
            token = self._input.LA(1)
            if token in [self.TABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7186
                self.match(self.TABLE)

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.ONLY, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_allContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_allContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_all

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_all(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_all(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_all(self)
            else:
                return visitor.visitChildren(self)




    def opt_all(self):

        localctx = PlPgSqlParser.Opt_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_opt_all)
        try:
            self.state = 7193
            token = self._input.LA(1)
            if token in [self.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7190
                self.match(self.ALL)

            elif token in [self.DISTINCT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7191
                self.match(self.DISTINCT)

            elif token in [self.T__7, self.SELECT, self.TABLE, self.VALUES]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_distinctContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_distinctContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_distinct

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_distinct(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_distinct(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_distinct(self)
            else:
                return visitor.visitChildren(self)




    def opt_distinct(self):

        localctx = PlPgSqlParser.Opt_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_opt_distinct)
        try:
            self.state = 7204
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7195
                self.match(self.DISTINCT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7196
                self.match(self.DISTINCT)
                self.state = 7197
                self.match(self.ON)
                self.state = 7198
                self.match(self.T__7)
                self.state = 7199 
                self.expr_list(0)
                self.state = 7200
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7202
                self.match(self.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_sort_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_sort_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sort_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_sort_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_sort_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_sort_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_sort_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_sort_clause(self):

        localctx = PlPgSqlParser.Opt_sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_opt_sort_clause)
        try:
            self.state = 7208
            token = self._input.LA(1)
            if token in [self.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7206 
                self.sort_clause()

            elif token in [self.T__13, self.FETCH, self.FOR, self.LIMIT, self.OFFSET, self.RANGE, self.ROWS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sort_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Sort_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sortby_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sortby_listContext,0)


        def ORDER(self):
            return self.getToken(PlPgSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_sort_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSort_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSort_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSort_clause(self)
            else:
                return visitor.visitChildren(self)




    def sort_clause(self):

        localctx = PlPgSqlParser.Sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_sort_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7210
            self.match(self.ORDER)
            self.state = 7211
            self.match(self.BY)
            self.state = 7212 
            self.sortby_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sortby_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Sortby_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sortby_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sortby_listContext,0)


        def sortby(self):
            return self.getTypedRuleContext(PlPgSqlParser.SortbyContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_sortby_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSortby_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSortby_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSortby_list(self)
            else:
                return visitor.visitChildren(self)



    def sortby_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Sortby_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 958
        self.enterRecursionRule(localctx, 958, self.RULE_sortby_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7215 
            self.sortby()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7222
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Sortby_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sortby_list)
                    self.state = 7217
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7218
                    self.match(self.T__12)
                    self.state = 7219 
                    self.sortby() 
                self.state = 7224
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SortbyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SortbyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qual_all_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qual_all_OpContext,0)


        def opt_asc_desc(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_asc_descContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def opt_nulls_order(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_nulls_orderContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_sortby

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSortby(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSortby(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSortby(self)
            else:
                return visitor.visitChildren(self)




    def sortby(self):

        localctx = PlPgSqlParser.SortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_sortby)
        try:
            self.state = 7234
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7225 
                self.a_expr(0)
                self.state = 7226
                self.match(self.USING)
                self.state = 7227 
                self.qual_all_Op()
                self.state = 7228 
                self.opt_nulls_order()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7230 
                self.a_expr(0)
                self.state = 7231 
                self.opt_asc_desc()
                self.state = 7232 
                self.opt_nulls_order()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_limitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_limitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def offset_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Offset_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_limit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_limit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_limit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_limit(self)
            else:
                return visitor.visitChildren(self)




    def select_limit(self):

        localctx = PlPgSqlParser.Select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_select_limit)
        try:
            self.state = 7244
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7236 
                self.limit_clause()
                self.state = 7237 
                self.offset_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7239 
                self.offset_clause()
                self.state = 7240 
                self.limit_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7242 
                self.limit_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7243 
                self.offset_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_select_limitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_select_limitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_limit(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_limitContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_select_limit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_select_limit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_select_limit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_select_limit(self)
            else:
                return visitor.visitChildren(self)




    def opt_select_limit(self):

        localctx = PlPgSqlParser.Opt_select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_opt_select_limit)
        try:
            self.state = 7248
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7246 
                self.select_limit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Limit_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def first_or_next(self):
            return self.getTypedRuleContext(PlPgSqlParser.First_or_nextContext,0)


        def LIMIT(self):
            return self.getToken(PlPgSqlParser.LIMIT, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_offset_valueContext,0)


        def select_limit_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_limit_valueContext,0)


        def ONLY(self):
            return self.getToken(PlPgSqlParser.ONLY, 0)

        def opt_select_fetch_first_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(PlPgSqlParser.Row_or_rowsContext,0)


        def FETCH(self):
            return self.getToken(PlPgSqlParser.FETCH, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_limit_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLimit_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = PlPgSqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_limit_clause)
        try:
            self.state = 7263
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7250
                self.match(self.LIMIT)
                self.state = 7251 
                self.select_limit_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7252
                self.match(self.LIMIT)
                self.state = 7253 
                self.select_limit_value()
                self.state = 7254
                self.match(self.T__12)
                self.state = 7255 
                self.select_offset_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7257
                self.match(self.FETCH)
                self.state = 7258 
                self.first_or_next()
                self.state = 7259 
                self.opt_select_fetch_first_value()
                self.state = 7260 
                self.row_or_rows()
                self.state = 7261
                self.match(self.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Offset_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Offset_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_offset_value(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_offset_valueContext,0)


        def OFFSET(self):
            return self.getToken(PlPgSqlParser.OFFSET, 0)

        def row_or_rows(self):
            return self.getTypedRuleContext(PlPgSqlParser.Row_or_rowsContext,0)


        def select_offset_value2(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_offset_value2Context,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_offset_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOffset_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOffset_clause(self)
            else:
                return visitor.visitChildren(self)




    def offset_clause(self):

        localctx = PlPgSqlParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_offset_clause)
        try:
            self.state = 7271
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7265
                self.match(self.OFFSET)
                self.state = 7266 
                self.select_offset_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7267
                self.match(self.OFFSET)
                self.state = 7268 
                self.select_offset_value2()
                self.state = 7269 
                self.row_or_rows()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_limit_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_limit_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_limit_value

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_limit_value(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_limit_value(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_limit_value(self)
            else:
                return visitor.visitChildren(self)




    def select_limit_value(self):

        localctx = PlPgSqlParser.Select_limit_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_select_limit_value)
        try:
            self.state = 7275
            token = self._input.LA(1)
            if token in [self.T__11, self.T__10, self.T__7, self.Op, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOT, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OPERATOR, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.UNIQUE, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7273 
                self.a_expr(0)

            elif token in [self.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7274
                self.match(self.ALL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_offset_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_offset_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_offset_value

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_offset_value(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_offset_value(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_offset_value(self)
            else:
                return visitor.visitChildren(self)




    def select_offset_value(self):

        localctx = PlPgSqlParser.Select_offset_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_select_offset_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7277 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_select_fetch_first_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_select_fetch_first_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SignedIconstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_select_fetch_first_value

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_select_fetch_first_value(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_select_fetch_first_value(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_select_fetch_first_value(self)
            else:
                return visitor.visitChildren(self)




    def opt_select_fetch_first_value(self):

        localctx = PlPgSqlParser.Opt_select_fetch_first_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_opt_select_fetch_first_value)
        try:
            self.state = 7285
            token = self._input.LA(1)
            if token in [self.T__11, self.T__10, self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7279 
                self.signedIconst()

            elif token in [self.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7280
                self.match(self.T__7)
                self.state = 7281 
                self.a_expr(0)
                self.state = 7282
                self.match(self.T__13)

            elif token in [self.ROW, self.ROWS]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_offset_value2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Select_offset_value2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.C_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_select_offset_value2

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSelect_offset_value2(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSelect_offset_value2(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSelect_offset_value2(self)
            else:
                return visitor.visitChildren(self)




    def select_offset_value2(self):

        localctx = PlPgSqlParser.Select_offset_value2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_select_offset_value2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7287 
            self.c_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_rowsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Row_or_rowsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PlPgSqlParser.ROWS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_row_or_rows

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRow_or_rows(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRow_or_rows(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRow_or_rows(self)
            else:
                return visitor.visitChildren(self)




    def row_or_rows(self):

        localctx = PlPgSqlParser.Row_or_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_row_or_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7289
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ROW or _la==PlPgSqlParser.ROWS):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class First_or_nextContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.First_or_nextContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(PlPgSqlParser.NEXT, 0)

        def FIRST_P(self):
            return self.getToken(PlPgSqlParser.FIRST_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_first_or_next

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFirst_or_next(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFirst_or_next(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFirst_or_next(self)
            else:
                return visitor.visitChildren(self)




    def first_or_next(self):

        localctx = PlPgSqlParser.First_or_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_first_or_next)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7291
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.FIRST_P or _la==PlPgSqlParser.NEXT):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Group_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_group_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGroup_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGroup_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_clause(self):

        localctx = PlPgSqlParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_group_clause)
        try:
            self.state = 7297
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7293
                self.match(self.GROUP_P)
                self.state = 7294
                self.match(self.BY)
                self.state = 7295 
                self.expr_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Having_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def HAVING(self):
            return self.getToken(PlPgSqlParser.HAVING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_having_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitHaving_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = PlPgSqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_having_clause)
        try:
            self.state = 7302
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7299
                self.match(self.HAVING)
                self.state = 7300 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.For_locking_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def for_locking_items(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_locking_itemsContext,0)


        def READ(self):
            return self.getToken(PlPgSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(PlPgSqlParser.ONLY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_for_locking_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFor_locking_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFor_locking_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFor_locking_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_locking_clause(self):

        localctx = PlPgSqlParser.For_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_for_locking_clause)
        try:
            self.state = 7308
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7304 
                self.for_locking_items(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7305
                self.match(self.FOR)
                self.state = 7306
                self.match(self.READ)
                self.state = 7307
                self.match(self.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_for_locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_for_locking_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_locking_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_for_locking_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_for_locking_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_for_locking_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_for_locking_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_for_locking_clause(self):

        localctx = PlPgSqlParser.Opt_for_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_opt_for_locking_clause)
        try:
            self.state = 7312
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7310 
                self.for_locking_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_locking_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.For_locking_itemsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_locking_items(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_locking_itemsContext,0)


        def for_locking_item(self):
            return self.getTypedRuleContext(PlPgSqlParser.For_locking_itemContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_for_locking_items

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFor_locking_items(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFor_locking_items(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFor_locking_items(self)
            else:
                return visitor.visitChildren(self)



    def for_locking_items(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.For_locking_itemsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 990
        self.enterRecursionRule(localctx, 990, self.RULE_for_locking_items, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7315 
            self.for_locking_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,379,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.For_locking_itemsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_for_locking_items)
                    self.state = 7317
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7318 
                    self.for_locking_item() 
                self.state = 7323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class For_locking_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.For_locking_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_nowait(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_nowaitContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def locked_rels_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Locked_rels_listContext,0)


        def UPDATE(self):
            return self.getToken(PlPgSqlParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(PlPgSqlParser.SHARE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_for_locking_item

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFor_locking_item(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFor_locking_item(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFor_locking_item(self)
            else:
                return visitor.visitChildren(self)




    def for_locking_item(self):

        localctx = PlPgSqlParser.For_locking_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_for_locking_item)
        try:
            self.state = 7334
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7324
                self.match(self.FOR)
                self.state = 7325
                self.match(self.UPDATE)
                self.state = 7326 
                self.locked_rels_list()
                self.state = 7327 
                self.opt_nowait()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7329
                self.match(self.FOR)
                self.state = 7330
                self.match(self.SHARE)
                self.state = 7331 
                self.locked_rels_list()
                self.state = 7332 
                self.opt_nowait()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Locked_rels_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Locked_rels_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_locked_rels_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterLocked_rels_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitLocked_rels_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitLocked_rels_list(self)
            else:
                return visitor.visitChildren(self)




    def locked_rels_list(self):

        localctx = PlPgSqlParser.Locked_rels_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_locked_rels_list)
        try:
            self.state = 7339
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7336
                self.match(self.OF)
                self.state = 7337 
                self.qualified_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Values_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def values_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Values_clauseContext,0)


        def ctext_row(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_rowContext,0)


        def VALUES(self):
            return self.getToken(PlPgSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_values_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterValues_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitValues_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)



    def values_clause(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Values_clauseContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 996
        self.enterRecursionRule(localctx, 996, self.RULE_values_clause, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7342
            self.match(self.VALUES)
            self.state = 7343 
            self.ctext_row()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,382,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Values_clauseContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_values_clause)
                    self.state = 7345
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7346
                    self.match(self.T__12)
                    self.state = 7347 
                    self.ctext_row() 
                self.state = 7352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,382,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.From_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_listContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_from_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFrom_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = PlPgSqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_from_clause)
        try:
            self.state = 7356
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7353
                self.match(self.FROM)
                self.state = 7354 
                self.from_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.From_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.From_listContext,0)


        def table_ref(self):
            return self.getTypedRuleContext(PlPgSqlParser.Table_refContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_from_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFrom_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFrom_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFrom_list(self)
            else:
                return visitor.visitChildren(self)



    def from_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.From_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1000
        self.enterRecursionRule(localctx, 1000, self.RULE_from_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7359 
            self.table_ref()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,384,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.From_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_from_list)
                    self.state = 7361
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7362
                    self.match(self.T__12)
                    self.state = 7363 
                    self.table_ref() 
                self.state = 7368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,384,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Table_refContext, self).__init__(parent, invokingState)
            self.parser = parser

        def joined_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Joined_tableContext,0)


        def table_ref2(self):
            return self.getTypedRuleContext(PlPgSqlParser.Table_ref2Context,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_table_ref

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTable_ref(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTable_ref(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTable_ref(self)
            else:
                return visitor.visitChildren(self)




    def table_ref(self):

        localctx = PlPgSqlParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_table_ref)
        try:
            self.state = 7371
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7369 
                self.joined_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7370 
                self.table_ref2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Table_ref2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def alias_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alias_clauseContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def func_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_tableContext,0)


        def tableFuncElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_table_ref2

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTable_ref2(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTable_ref2(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTable_ref2(self)
            else:
                return visitor.visitChildren(self)




    def table_ref2(self):

        localctx = PlPgSqlParser.Table_ref2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_table_ref2)
        try:
            self.state = 7404
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7373 
                self.relation_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7374 
                self.relation_expr()
                self.state = 7375 
                self.alias_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7377 
                self.func_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7378 
                self.func_table()
                self.state = 7379 
                self.alias_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7381 
                self.func_table()
                self.state = 7382
                self.match(self.AS)
                self.state = 7383
                self.match(self.T__7)
                self.state = 7384 
                self.tableFuncElementList(0)
                self.state = 7385
                self.match(self.T__13)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7387 
                self.func_table()
                self.state = 7388
                self.match(self.AS)
                self.state = 7389 
                self.colId()
                self.state = 7390
                self.match(self.T__7)
                self.state = 7391 
                self.tableFuncElementList(0)
                self.state = 7392
                self.match(self.T__13)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7394 
                self.func_table()
                self.state = 7395 
                self.colId()
                self.state = 7396
                self.match(self.T__7)
                self.state = 7397 
                self.tableFuncElementList(0)
                self.state = 7398
                self.match(self.T__13)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7400 
                self.select_with_parens(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7401 
                self.select_with_parens(0)
                self.state = 7402 
                self.alias_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Joined_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Joined_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(PlPgSqlParser.JOIN, 0)

        def join_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Join_typeContext,0)


        def NATURAL(self):
            return self.getToken(PlPgSqlParser.NATURAL, 0)

        def joined_table(self):
            return self.getTypedRuleContext(PlPgSqlParser.Joined_tableContext,0)


        def CROSS(self):
            return self.getToken(PlPgSqlParser.CROSS, 0)

        def table_ref2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Table_ref2Context)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Table_ref2Context,i)


        def alias_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Alias_clauseContext,0)


        def join_qual(self):
            return self.getTypedRuleContext(PlPgSqlParser.Join_qualContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_joined_table

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterJoined_table(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitJoined_table(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitJoined_table(self)
            else:
                return visitor.visitChildren(self)




    def joined_table(self):

        localctx = PlPgSqlParser.Joined_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_joined_table)
        try:
            self.state = 7439
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7406
                self.match(self.T__7)
                self.state = 7407 
                self.joined_table()
                self.state = 7408
                self.match(self.T__13)
                self.state = 7410
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 7409 
                    self.alias_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7412 
                self.table_ref2()
                self.state = 7413
                self.match(self.CROSS)
                self.state = 7414
                self.match(self.JOIN)
                self.state = 7415 
                self.table_ref2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7417 
                self.table_ref2()
                self.state = 7418 
                self.join_type()
                self.state = 7419
                self.match(self.JOIN)
                self.state = 7420 
                self.table_ref2()
                self.state = 7421 
                self.join_qual()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7423 
                self.table_ref2()
                self.state = 7424
                self.match(self.JOIN)
                self.state = 7425 
                self.table_ref2()
                self.state = 7426 
                self.join_qual()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7428 
                self.table_ref2()
                self.state = 7429
                self.match(self.NATURAL)
                self.state = 7430 
                self.join_type()
                self.state = 7431
                self.match(self.JOIN)
                self.state = 7432 
                self.table_ref2()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7434 
                self.table_ref2()
                self.state = 7435
                self.match(self.NATURAL)
                self.state = 7436
                self.match(self.JOIN)
                self.state = 7437 
                self.table_ref2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Alias_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_alias_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAlias_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAlias_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAlias_clause(self)
            else:
                return visitor.visitChildren(self)




    def alias_clause(self):

        localctx = PlPgSqlParser.Alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_alias_clause)
        try:
            self.state = 7455
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7441
                self.match(self.AS)
                self.state = 7442 
                self.colId()
                self.state = 7443
                self.match(self.T__7)
                self.state = 7444 
                self.name_list(0)
                self.state = 7445
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7447
                self.match(self.AS)
                self.state = 7448 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7449 
                self.colId()
                self.state = 7450
                self.match(self.T__7)
                self.state = 7451 
                self.name_list(0)
                self.state = 7452
                self.match(self.T__13)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7454 
                self.colId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Join_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUTER_P(self):
            return self.getToken(PlPgSqlParser.OUTER_P, 0)

        def FULL(self):
            return self.getToken(PlPgSqlParser.FULL, 0)

        def INNER_P(self):
            return self.getToken(PlPgSqlParser.INNER_P, 0)

        def LEFT(self):
            return self.getToken(PlPgSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PlPgSqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_join_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterJoin_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitJoin_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = PlPgSqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 7470
            token = self._input.LA(1)
            if token in [self.FULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7457
                self.match(self.FULL)
                self.state = 7459
                _la = self._input.LA(1)
                if _la==PlPgSqlParser.OUTER_P:
                    self.state = 7458
                    self.match(self.OUTER_P)



            elif token in [self.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7461
                self.match(self.LEFT)
                self.state = 7463
                _la = self._input.LA(1)
                if _la==PlPgSqlParser.OUTER_P:
                    self.state = 7462
                    self.match(self.OUTER_P)



            elif token in [self.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7465
                self.match(self.RIGHT)
                self.state = 7467
                _la = self._input.LA(1)
                if _la==PlPgSqlParser.OUTER_P:
                    self.state = 7466
                    self.match(self.OUTER_P)



            elif token in [self.INNER_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7469
                self.match(self.INNER_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_qualContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Join_qualContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_join_qual

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterJoin_qual(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitJoin_qual(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitJoin_qual(self)
            else:
                return visitor.visitChildren(self)




    def join_qual(self):

        localctx = PlPgSqlParser.Join_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_join_qual)
        try:
            self.state = 7479
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7472
                self.match(self.USING)
                self.state = 7473
                self.match(self.T__7)
                self.state = 7474 
                self.name_list(0)
                self.state = 7475
                self.match(self.T__13)

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7477
                self.match(self.ON)
                self.state = 7478 
                self.a_expr(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Relation_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def ONLY(self):
            return self.getToken(PlPgSqlParser.ONLY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_relation_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRelation_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRelation_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRelation_expr(self)
            else:
                return visitor.visitChildren(self)




    def relation_expr(self):

        localctx = PlPgSqlParser.Relation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_relation_expr)
        try:
            self.state = 7492
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7481 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7482 
                self.qualified_name()
                self.state = 7483
                self.match(self.T__9)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7485
                self.match(self.ONLY)
                self.state = 7486 
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7487
                self.match(self.ONLY)
                self.state = 7488
                self.match(self.T__7)
                self.state = 7489 
                self.qualified_name()
                self.state = 7490
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Relation_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_relation_expr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRelation_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRelation_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRelation_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def relation_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Relation_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1016
        self.enterRecursionRule(localctx, 1016, self.RULE_relation_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7495 
            self.relation_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,396,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Relation_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation_expr_list)
                    self.state = 7497
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7498
                    self.match(self.T__12)
                    self.state = 7499 
                    self.relation_expr() 
                self.state = 7504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Relation_expr_opt_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Relation_expr_opt_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Relation_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_relation_expr_opt_alias

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRelation_expr_opt_alias(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRelation_expr_opt_alias(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRelation_expr_opt_alias(self)
            else:
                return visitor.visitChildren(self)




    def relation_expr_opt_alias(self):

        localctx = PlPgSqlParser.Relation_expr_opt_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_relation_expr_opt_alias)
        try:
            self.state = 7513
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7505 
                self.relation_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7506 
                self.relation_expr()
                self.state = 7507 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7509 
                self.relation_expr()
                self.state = 7510
                self.match(self.AS)
                self.state = 7511 
                self.colId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_table

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_table(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_table(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_table(self)
            else:
                return visitor.visitChildren(self)




    def func_table(self):

        localctx = PlPgSqlParser.Func_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_func_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7515 
            self.func_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Where_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PlPgSqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_where_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWhere_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = PlPgSqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_where_clause)
        try:
            self.state = 7520
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7517
                self.match(self.WHERE)
                self.state = 7518 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_or_current_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Where_or_current_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PlPgSqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Cursor_nameContext,0)


        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def CURRENT_P(self):
            return self.getToken(PlPgSqlParser.CURRENT_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_where_or_current_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWhere_or_current_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWhere_or_current_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWhere_or_current_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_or_current_clause(self):

        localctx = PlPgSqlParser.Where_or_current_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_where_or_current_clause)
        try:
            self.state = 7529
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7522
                self.match(self.WHERE)
                self.state = 7523 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7524
                self.match(self.WHERE)
                self.state = 7525
                self.match(self.CURRENT_P)
                self.state = 7526
                self.match(self.OF)
                self.state = 7527 
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttableFuncElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.OpttableFuncElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opttableFuncElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpttableFuncElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpttableFuncElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpttableFuncElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttableFuncElementList(self):

        localctx = PlPgSqlParser.OpttableFuncElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_opttableFuncElementList)
        try:
            self.state = 7533
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7531 
                self.tableFuncElementList(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableFuncElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableFuncElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElement(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableFuncElementContext,0)


        def tableFuncElementList(self):
            return self.getTypedRuleContext(PlPgSqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableFuncElementList

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableFuncElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableFuncElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableFuncElementList(self)
            else:
                return visitor.visitChildren(self)



    def tableFuncElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.TableFuncElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1028
        self.enterRecursionRule(localctx, 1028, self.RULE_tableFuncElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7536 
            self.tableFuncElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,401,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.TableFuncElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableFuncElementList)
                    self.state = 7538
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7539
                    self.match(self.T__12)
                    self.state = 7540 
                    self.tableFuncElement() 
                self.state = 7545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableFuncElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TableFuncElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def opt_collate_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_collate_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_tableFuncElement

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTableFuncElement(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTableFuncElement(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTableFuncElement(self)
            else:
                return visitor.visitChildren(self)




    def tableFuncElement(self):

        localctx = PlPgSqlParser.TableFuncElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_tableFuncElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7546 
            self.colId()
            self.state = 7547 
            self.typename()
            self.state = 7548 
            self.opt_collate_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.TypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SETOF(self):
            return self.getToken(PlPgSqlParser.SETOF, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(PlPgSqlParser.SimpletypenameContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_array_boundsContext,0)


        def ARRAY(self):
            return self.getToken(PlPgSqlParser.ARRAY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_typename

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTypename(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTypename(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTypename(self)
            else:
                return visitor.visitChildren(self)




    def typename(self):

        localctx = PlPgSqlParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_typename)
        try:
            self.state = 7577
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7550 
                self.simpletypename()
                self.state = 7551 
                self.opt_array_bounds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7553
                self.match(self.SETOF)
                self.state = 7554 
                self.simpletypename()
                self.state = 7555 
                self.opt_array_bounds(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7557 
                self.simpletypename()
                self.state = 7558
                self.match(self.ARRAY)
                self.state = 7559
                self.match(self.T__8)
                self.state = 7560 
                self.iConst()
                self.state = 7561
                self.match(self.T__17)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7563
                self.match(self.SETOF)
                self.state = 7564 
                self.simpletypename()
                self.state = 7565
                self.match(self.ARRAY)
                self.state = 7566
                self.match(self.T__8)
                self.state = 7567 
                self.iConst()
                self.state = 7568
                self.match(self.T__17)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7570 
                self.simpletypename()
                self.state = 7571
                self.match(self.ARRAY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7573
                self.match(self.SETOF)
                self.state = 7574 
                self.simpletypename()
                self.state = 7575
                self.match(self.ARRAY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_array_boundsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_array_boundsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_array_boundsContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_array_bounds

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_array_bounds(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_array_bounds(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_array_bounds(self)
            else:
                return visitor.visitChildren(self)



    def opt_array_bounds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Opt_array_boundsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1034
        self.enterRecursionRule(localctx, 1034, self.RULE_opt_array_bounds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 7590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7588
                    la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.Opt_array_boundsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_array_bounds)
                        self.state = 7580
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7581
                        self.match(self.T__8)
                        self.state = 7582
                        self.match(self.T__17)
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.Opt_array_boundsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_array_bounds)
                        self.state = 7583
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7584
                        self.match(self.T__8)
                        self.state = 7585 
                        self.iConst()
                        self.state = 7586
                        self.match(self.T__17)
                        pass

             
                self.state = 7592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SimpletypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SimpletypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_interval(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_intervalContext,0)


        def constDatetime(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstDatetimeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstIntervalContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def character(self):
            return self.getTypedRuleContext(PlPgSqlParser.CharacterContext,0)


        def genericType(self):
            return self.getTypedRuleContext(PlPgSqlParser.GenericTypeContext,0)


        def bit(self):
            return self.getTypedRuleContext(PlPgSqlParser.BitContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_simpletypename

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSimpletypename(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSimpletypename(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSimpletypename(self)
            else:
                return visitor.visitChildren(self)




    def simpletypename(self):

        localctx = PlPgSqlParser.SimpletypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_simpletypename)
        try:
            self.state = 7607
            la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7593 
                self.genericType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7594 
                self.numeric()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7595 
                self.bit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7596 
                self.character()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7597 
                self.constDatetime()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7598 
                self.constInterval()
                self.state = 7599 
                self.opt_interval()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7601 
                self.constInterval()
                self.state = 7602
                self.match(self.T__7)
                self.state = 7603 
                self.iConst()
                self.state = 7604
                self.match(self.T__13)
                self.state = 7605 
                self.opt_interval()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConsttypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConsttypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constDatetime(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstDatetimeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(PlPgSqlParser.NumericContext,0)


        def constbit(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstbitContext,0)


        def constcharacter(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstcharacterContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_consttypename

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConsttypename(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConsttypename(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConsttypename(self)
            else:
                return visitor.visitChildren(self)




    def consttypename(self):

        localctx = PlPgSqlParser.ConsttypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_consttypename)
        try:
            self.state = 7613
            token = self._input.LA(1)
            if token in [self.BIGINT, self.BOOLEAN_P, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.FLOAT_P, self.INT_P, self.INTEGER, self.NUMERIC, self.REAL, self.SMALLINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7609 
                self.numeric()

            elif token in [self.BIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7610 
                self.constbit()

            elif token in [self.CHAR_P, self.CHARACTER, self.NATIONAL, self.NCHAR, self.VARCHAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7611 
                self.constcharacter()

            elif token in [self.TIME, self.TIMESTAMP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7612 
                self.constDatetime()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.GenericTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PlPgSqlParser.AttrsContext,0)


        def opt_type_modifiers(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_type_modifiersContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_genericType

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterGenericType(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitGenericType(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)




    def genericType(self):

        localctx = PlPgSqlParser.GenericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_genericType)
        try:
            self.state = 7622
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7615 
                self.type_function_name()
                self.state = 7616 
                self.opt_type_modifiers()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7618 
                self.type_function_name()
                self.state = 7619 
                self.attrs(0)
                self.state = 7620 
                self.opt_type_modifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_type_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_type_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_type_modifiers

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_type_modifiers(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_type_modifiers(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_type_modifiers(self)
            else:
                return visitor.visitChildren(self)




    def opt_type_modifiers(self):

        localctx = PlPgSqlParser.Opt_type_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_opt_type_modifiers)
        try:
            self.state = 7629
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7624
                self.match(self.T__7)
                self.state = 7625 
                self.expr_list(0)
                self.state = 7626
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.NumericContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_P(self):
            return self.getToken(PlPgSqlParser.DOUBLE_P, 0)

        def DEC(self):
            return self.getToken(PlPgSqlParser.DEC, 0)

        def PRECISION(self):
            return self.getToken(PlPgSqlParser.PRECISION, 0)

        def opt_type_modifiers(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_type_modifiersContext,0)


        def BOOLEAN_P(self):
            return self.getToken(PlPgSqlParser.BOOLEAN_P, 0)

        def FLOAT_P(self):
            return self.getToken(PlPgSqlParser.FLOAT_P, 0)

        def NUMERIC(self):
            return self.getToken(PlPgSqlParser.NUMERIC, 0)

        def opt_float(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_floatContext,0)


        def DECIMAL_P(self):
            return self.getToken(PlPgSqlParser.DECIMAL_P, 0)

        def INT_P(self):
            return self.getToken(PlPgSqlParser.INT_P, 0)

        def REAL(self):
            return self.getToken(PlPgSqlParser.REAL, 0)

        def INTEGER(self):
            return self.getToken(PlPgSqlParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(PlPgSqlParser.BIGINT, 0)

        def SMALLINT(self):
            return self.getToken(PlPgSqlParser.SMALLINT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_numeric

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterNumeric(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitNumeric(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = PlPgSqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_numeric)
        try:
            self.state = 7647
            token = self._input.LA(1)
            if token in [self.INT_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7631
                self.match(self.INT_P)

            elif token in [self.INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7632
                self.match(self.INTEGER)

            elif token in [self.SMALLINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7633
                self.match(self.SMALLINT)

            elif token in [self.BIGINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7634
                self.match(self.BIGINT)

            elif token in [self.REAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7635
                self.match(self.REAL)

            elif token in [self.FLOAT_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7636
                self.match(self.FLOAT_P)
                self.state = 7637 
                self.opt_float()

            elif token in [self.DOUBLE_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7638
                self.match(self.DOUBLE_P)
                self.state = 7639
                self.match(self.PRECISION)

            elif token in [self.DECIMAL_P]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7640
                self.match(self.DECIMAL_P)
                self.state = 7641 
                self.opt_type_modifiers()

            elif token in [self.DEC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7642
                self.match(self.DEC)
                self.state = 7643 
                self.opt_type_modifiers()

            elif token in [self.NUMERIC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7644
                self.match(self.NUMERIC)
                self.state = 7645 
                self.opt_type_modifiers()

            elif token in [self.BOOLEAN_P]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7646
                self.match(self.BOOLEAN_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_floatContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_floatContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_float

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_float(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_float(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_float(self)
            else:
                return visitor.visitChildren(self)




    def opt_float(self):

        localctx = PlPgSqlParser.Opt_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_opt_float)
        try:
            self.state = 7654
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7649
                self.match(self.T__7)
                self.state = 7650 
                self.iConst()
                self.state = 7651
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.BitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def bitWithLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.BitWithLengthContext,0)


        def bitWithoutLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.BitWithoutLengthContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_bit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterBit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitBit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitBit(self)
            else:
                return visitor.visitChildren(self)




    def bit(self):

        localctx = PlPgSqlParser.BitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_bit)
        try:
            self.state = 7658
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7656 
                self.bitWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7657 
                self.bitWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstbitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstbitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def bitWithLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.BitWithLengthContext,0)


        def bitWithoutLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.BitWithoutLengthContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constbit

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstbit(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstbit(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstbit(self)
            else:
                return visitor.visitChildren(self)




    def constbit(self):

        localctx = PlPgSqlParser.ConstbitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_constbit)
        try:
            self.state = 7662
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7660 
                self.bitWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7661 
                self.bitWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitWithLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.BitWithLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PlPgSqlParser.BIT, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def opt_varying(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_bitWithLength

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterBitWithLength(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitBitWithLength(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitBitWithLength(self)
            else:
                return visitor.visitChildren(self)




    def bitWithLength(self):

        localctx = PlPgSqlParser.BitWithLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_bitWithLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7664
            self.match(self.BIT)
            self.state = 7665 
            self.opt_varying()
            self.state = 7666
            self.match(self.T__7)
            self.state = 7667 
            self.expr_list(0)
            self.state = 7668
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitWithoutLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.BitWithoutLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PlPgSqlParser.BIT, 0)

        def opt_varying(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_bitWithoutLength

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterBitWithoutLength(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitBitWithoutLength(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitBitWithoutLength(self)
            else:
                return visitor.visitChildren(self)




    def bitWithoutLength(self):

        localctx = PlPgSqlParser.BitWithoutLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_bitWithoutLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7670
            self.match(self.BIT)
            self.state = 7671 
            self.opt_varying()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CharacterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def characterWithoutLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.CharacterWithoutLengthContext,0)


        def characterWithLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.CharacterWithLengthContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_character

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCharacter(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCharacter(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCharacter(self)
            else:
                return visitor.visitChildren(self)




    def character(self):

        localctx = PlPgSqlParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_character)
        try:
            self.state = 7675
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7673 
                self.characterWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7674 
                self.characterWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstcharacterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstcharacterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def characterWithoutLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.CharacterWithoutLengthContext,0)


        def characterWithLength(self):
            return self.getTypedRuleContext(PlPgSqlParser.CharacterWithLengthContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constcharacter

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstcharacter(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstcharacter(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstcharacter(self)
            else:
                return visitor.visitChildren(self)




    def constcharacter(self):

        localctx = PlPgSqlParser.ConstcharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_constcharacter)
        try:
            self.state = 7679
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7677 
                self.characterWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7678 
                self.characterWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterWithLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CharacterWithLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_charset(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_charsetContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def character_def(self):
            return self.getTypedRuleContext(PlPgSqlParser.Character_defContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_characterWithLength

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCharacterWithLength(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCharacterWithLength(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCharacterWithLength(self)
            else:
                return visitor.visitChildren(self)




    def characterWithLength(self):

        localctx = PlPgSqlParser.CharacterWithLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_characterWithLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7681 
            self.character_def()
            self.state = 7682
            self.match(self.T__7)
            self.state = 7683 
            self.iConst()
            self.state = 7684
            self.match(self.T__13)
            self.state = 7685 
            self.opt_charset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterWithoutLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.CharacterWithoutLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_charset(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_charsetContext,0)


        def character_def(self):
            return self.getTypedRuleContext(PlPgSqlParser.Character_defContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_characterWithoutLength

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCharacterWithoutLength(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCharacterWithoutLength(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCharacterWithoutLength(self)
            else:
                return visitor.visitChildren(self)




    def characterWithoutLength(self):

        localctx = PlPgSqlParser.CharacterWithoutLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_characterWithoutLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7687 
            self.character_def()
            self.state = 7688 
            self.opt_charset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Character_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Character_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(PlPgSqlParser.NATIONAL, 0)

        def CHARACTER(self):
            return self.getToken(PlPgSqlParser.CHARACTER, 0)

        def CHAR_P(self):
            return self.getToken(PlPgSqlParser.CHAR_P, 0)

        def NCHAR(self):
            return self.getToken(PlPgSqlParser.NCHAR, 0)

        def VARCHAR(self):
            return self.getToken(PlPgSqlParser.VARCHAR, 0)

        def opt_varying(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_character_def

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCharacter_def(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCharacter_def(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCharacter_def(self)
            else:
                return visitor.visitChildren(self)




    def character_def(self):

        localctx = PlPgSqlParser.Character_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_character_def)
        try:
            self.state = 7703
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7690
                self.match(self.CHARACTER)
                self.state = 7691 
                self.opt_varying()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7692
                self.match(self.CHAR_P)
                self.state = 7693 
                self.opt_varying()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7694
                self.match(self.VARCHAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7695
                self.match(self.NATIONAL)
                self.state = 7696
                self.match(self.CHARACTER)
                self.state = 7697 
                self.opt_varying()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7698
                self.match(self.NATIONAL)
                self.state = 7699
                self.match(self.CHAR_P)
                self.state = 7700 
                self.opt_varying()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7701
                self.match(self.NCHAR)
                self.state = 7702 
                self.opt_varying()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_varyingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_varyingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(PlPgSqlParser.VARYING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_varying

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_varying(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_varying(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_varying(self)
            else:
                return visitor.visitChildren(self)




    def opt_varying(self):

        localctx = PlPgSqlParser.Opt_varyingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_opt_varying)
        try:
            self.state = 7707
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7705
                self.match(self.VARYING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_charsetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_charsetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlPgSqlParser.SET, 0)

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def CHARACTER(self):
            return self.getToken(PlPgSqlParser.CHARACTER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_charset

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_charset(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_charset(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_charset(self)
            else:
                return visitor.visitChildren(self)




    def opt_charset(self):

        localctx = PlPgSqlParser.Opt_charsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_opt_charset)
        try:
            self.state = 7713
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7709
                self.match(self.CHARACTER)
                self.state = 7710
                self.match(self.SET)
                self.state = 7711 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDatetimeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstDatetimeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PlPgSqlParser.TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def opt_timezone(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_timezoneContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constDatetime

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstDatetime(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstDatetime(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstDatetime(self)
            else:
                return visitor.visitChildren(self)




    def constDatetime(self):

        localctx = PlPgSqlParser.ConstDatetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_constDatetime)
        try:
            self.state = 7731
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7715
                self.match(self.TIMESTAMP)
                self.state = 7716
                self.match(self.T__7)
                self.state = 7717 
                self.iConst()
                self.state = 7718
                self.match(self.T__13)
                self.state = 7719 
                self.opt_timezone()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7721
                self.match(self.TIMESTAMP)
                self.state = 7722 
                self.opt_timezone()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7723
                self.match(self.TIME)
                self.state = 7724
                self.match(self.T__7)
                self.state = 7725 
                self.iConst()
                self.state = 7726
                self.match(self.T__13)
                self.state = 7727 
                self.opt_timezone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7729
                self.match(self.TIME)
                self.state = 7730 
                self.opt_timezone()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ConstIntervalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(PlPgSqlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_constInterval

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterConstInterval(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitConstInterval(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitConstInterval(self)
            else:
                return visitor.visitChildren(self)




    def constInterval(self):

        localctx = PlPgSqlParser.ConstIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_constInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7733
            self.match(self.INTERVAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_timezoneContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_timezoneContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def WITH_TIME(self):
            return self.getToken(PlPgSqlParser.WITH_TIME, 0)

        def WITHOUT(self):
            return self.getToken(PlPgSqlParser.WITHOUT, 0)

        def ZONE(self):
            return self.getToken(PlPgSqlParser.ZONE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_timezone

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_timezone(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_timezone(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_timezone(self)
            else:
                return visitor.visitChildren(self)




    def opt_timezone(self):

        localctx = PlPgSqlParser.Opt_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_opt_timezone)
        try:
            self.state = 7741
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7735
                self.match(self.WITH_TIME)
                self.state = 7736
                self.match(self.ZONE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7737
                self.match(self.WITHOUT)
                self.state = 7738
                self.match(self.TIME)
                self.state = 7739
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_intervalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_intervalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MONTH_P(self):
            return self.getToken(PlPgSqlParser.MONTH_P, 0)

        def MINUTE_P(self):
            return self.getToken(PlPgSqlParser.MINUTE_P, 0)

        def HOUR_P(self):
            return self.getToken(PlPgSqlParser.HOUR_P, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def YEAR_P(self):
            return self.getToken(PlPgSqlParser.YEAR_P, 0)

        def interval_second(self):
            return self.getTypedRuleContext(PlPgSqlParser.Interval_secondContext,0)


        def DAY_P(self):
            return self.getToken(PlPgSqlParser.DAY_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_interval

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_interval(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_interval(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_interval(self)
            else:
                return visitor.visitChildren(self)




    def opt_interval(self):

        localctx = PlPgSqlParser.Opt_intervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_opt_interval)
        try:
            self.state = 7771
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7743
                self.match(self.YEAR_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7744
                self.match(self.MONTH_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7745
                self.match(self.DAY_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7746
                self.match(self.HOUR_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7747
                self.match(self.MINUTE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7748 
                self.interval_second()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7749
                self.match(self.YEAR_P)
                self.state = 7750
                self.match(self.TO)
                self.state = 7751
                self.match(self.MONTH_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7752
                self.match(self.DAY_P)
                self.state = 7753
                self.match(self.TO)
                self.state = 7754
                self.match(self.HOUR_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7755
                self.match(self.DAY_P)
                self.state = 7756
                self.match(self.TO)
                self.state = 7757
                self.match(self.MINUTE_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7758
                self.match(self.DAY_P)
                self.state = 7759
                self.match(self.TO)
                self.state = 7760 
                self.interval_second()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7761
                self.match(self.HOUR_P)
                self.state = 7762
                self.match(self.TO)
                self.state = 7763
                self.match(self.MINUTE_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7764
                self.match(self.HOUR_P)
                self.state = 7765
                self.match(self.TO)
                self.state = 7766 
                self.interval_second()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7767
                self.match(self.MINUTE_P)
                self.state = 7768
                self.match(self.TO)
                self.state = 7769 
                self.interval_second()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_secondContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Interval_secondContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SECOND_P(self):
            return self.getToken(PlPgSqlParser.SECOND_P, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_interval_second

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterInterval_second(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitInterval_second(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitInterval_second(self)
            else:
                return visitor.visitChildren(self)




    def interval_second(self):

        localctx = PlPgSqlParser.Interval_secondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_interval_second)
        try:
            self.state = 7779
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7773
                self.match(self.SECOND_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7774
                self.match(self.SECOND_P)
                self.state = 7775
                self.match(self.T__7)
                self.state = 7776 
                self.iConst()
                self.state = 7777
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class A_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.A_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def AND(self):
            return self.getToken(PlPgSqlParser.AND, 0)

        def subquery_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.Subquery_OpContext,0)


        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.B_exprContext,i)


        def row(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.RowContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.RowContext,i)


        def TYPECAST(self):
            return self.getToken(PlPgSqlParser.TYPECAST, 0)

        def IS(self):
            return self.getToken(PlPgSqlParser.IS, 0)

        def UNKNOWN(self):
            return self.getToken(PlPgSqlParser.UNKNOWN, 0)

        def any_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_nameContext,0)


        def SIMILAR(self):
            return self.getToken(PlPgSqlParser.SIMILAR, 0)

        def sub_type(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sub_typeContext,0)


        def NOTNULL(self):
            return self.getToken(PlPgSqlParser.NOTNULL, 0)

        def ILIKE(self):
            return self.getToken(PlPgSqlParser.ILIKE, 0)

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def FALSE_P(self):
            return self.getToken(PlPgSqlParser.FALSE_P, 0)

        def LIKE(self):
            return self.getToken(PlPgSqlParser.LIKE, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def opt_asymmetric(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_asymmetricContext,0)


        def ESCAPE(self):
            return self.getToken(PlPgSqlParser.ESCAPE, 0)

        def SYMMETRIC(self):
            return self.getToken(PlPgSqlParser.SYMMETRIC, 0)

        def TRUE_P(self):
            return self.getToken(PlPgSqlParser.TRUE_P, 0)

        def DOCUMENT_P(self):
            return self.getToken(PlPgSqlParser.DOCUMENT_P, 0)

        def ISNULL(self):
            return self.getToken(PlPgSqlParser.ISNULL, 0)

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,i)


        def OR(self):
            return self.getToken(PlPgSqlParser.OR, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def OVERLAPS(self):
            return self.getToken(PlPgSqlParser.OVERLAPS, 0)

        def AT(self):
            return self.getToken(PlPgSqlParser.AT, 0)

        def UNIQUE(self):
            return self.getToken(PlPgSqlParser.UNIQUE, 0)

        def qual_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qual_OpContext,0)


        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def BETWEEN(self):
            return self.getToken(PlPgSqlParser.BETWEEN, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.C_exprContext,0)


        def COLLATE(self):
            return self.getToken(PlPgSqlParser.COLLATE, 0)

        def in_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.In_exprContext,0)


        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def ZONE(self):
            return self.getToken(PlPgSqlParser.ZONE, 0)

        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_a_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterA_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitA_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitA_expr(self)
            else:
                return visitor.visitChildren(self)



    def a_expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.A_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1080
        self.enterRecursionRule(localctx, 1080, self.RULE_a_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7798
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 7782
                self.match(self.T__11)
                self.state = 7783 
                self.a_expr(55)
                pass

            elif la_ == 2:
                self.state = 7784
                self.match(self.T__10)
                self.state = 7785 
                self.a_expr(54)
                pass

            elif la_ == 3:
                self.state = 7786 
                self.qual_Op()
                self.state = 7787 
                self.a_expr(43)
                pass

            elif la_ == 4:
                self.state = 7789
                self.match(self.NOT)
                self.state = 7790 
                self.a_expr(39)
                pass

            elif la_ == 5:
                self.state = 7791 
                self.c_expr()
                pass

            elif la_ == 6:
                self.state = 7792 
                self.row()
                self.state = 7793
                self.match(self.OVERLAPS)
                self.state = 7794 
                self.row()
                pass

            elif la_ == 7:
                self.state = 7796
                self.match(self.UNIQUE)
                self.state = 7797 
                self.select_with_parens(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 8030
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 8028
                    la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7800
                        if not self.precpred(self._ctx, 56):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 7801
                        self.match(self.AT)
                        self.state = 7802
                        self.match(self.TIME)
                        self.state = 7803
                        self.match(self.ZONE)
                        self.state = 7804 
                        self.a_expr(57)
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7805
                        if not self.precpred(self._ctx, 53):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 53)")
                        self.state = 7806
                        self.match(self.T__11)
                        self.state = 7807 
                        self.a_expr(54)
                        pass

                    elif la_ == 3:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7808
                        if not self.precpred(self._ctx, 52):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 7809
                        self.match(self.T__10)
                        self.state = 7810 
                        self.a_expr(53)
                        pass

                    elif la_ == 4:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7811
                        if not self.precpred(self._ctx, 51):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 7812
                        self.match(self.T__9)
                        self.state = 7813 
                        self.a_expr(52)
                        pass

                    elif la_ == 5:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7814
                        if not self.precpred(self._ctx, 50):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 7815
                        self.match(self.T__1)
                        self.state = 7816 
                        self.a_expr(51)
                        pass

                    elif la_ == 6:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7817
                        if not self.precpred(self._ctx, 49):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 7818
                        self.match(self.T__16)
                        self.state = 7819 
                        self.a_expr(50)
                        pass

                    elif la_ == 7:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7820
                        if not self.precpred(self._ctx, 48):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 7821
                        self.match(self.T__15)
                        self.state = 7822 
                        self.a_expr(49)
                        pass

                    elif la_ == 8:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7823
                        if not self.precpred(self._ctx, 47):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 7824
                        self.match(self.T__5)
                        self.state = 7825 
                        self.a_expr(48)
                        pass

                    elif la_ == 9:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7826
                        if not self.precpred(self._ctx, 46):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 7827
                        self.match(self.T__2)
                        self.state = 7828 
                        self.a_expr(47)
                        pass

                    elif la_ == 10:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7829
                        if not self.precpred(self._ctx, 45):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 7830
                        self.match(self.T__4)
                        self.state = 7831 
                        self.a_expr(46)
                        pass

                    elif la_ == 11:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7832
                        if not self.precpred(self._ctx, 44):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 7833 
                        self.qual_Op()
                        self.state = 7834 
                        self.a_expr(45)
                        pass

                    elif la_ == 12:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7836
                        if not self.precpred(self._ctx, 41):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 7837
                        self.match(self.AND)
                        self.state = 7838 
                        self.a_expr(42)
                        pass

                    elif la_ == 13:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7839
                        if not self.precpred(self._ctx, 40):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 7840
                        self.match(self.OR)
                        self.state = 7841 
                        self.a_expr(41)
                        pass

                    elif la_ == 14:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7842
                        if not self.precpred(self._ctx, 38):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 7843
                        self.match(self.LIKE)
                        self.state = 7844 
                        self.a_expr(39)
                        pass

                    elif la_ == 15:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7845
                        if not self.precpred(self._ctx, 37):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 7846
                        self.match(self.LIKE)
                        self.state = 7847 
                        self.a_expr(0)
                        self.state = 7848
                        self.match(self.ESCAPE)
                        self.state = 7849 
                        self.a_expr(38)
                        pass

                    elif la_ == 16:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7851
                        if not self.precpred(self._ctx, 36):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 7852
                        self.match(self.NOT)
                        self.state = 7853
                        self.match(self.LIKE)
                        self.state = 7854 
                        self.a_expr(37)
                        pass

                    elif la_ == 17:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7855
                        if not self.precpred(self._ctx, 35):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 7856
                        self.match(self.NOT)
                        self.state = 7857
                        self.match(self.LIKE)
                        self.state = 7858 
                        self.a_expr(0)
                        self.state = 7859
                        self.match(self.ESCAPE)
                        self.state = 7860 
                        self.a_expr(36)
                        pass

                    elif la_ == 18:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7862
                        if not self.precpred(self._ctx, 34):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 7863
                        self.match(self.ILIKE)
                        self.state = 7864 
                        self.a_expr(35)
                        pass

                    elif la_ == 19:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7865
                        if not self.precpred(self._ctx, 33):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 7866
                        self.match(self.ILIKE)
                        self.state = 7867 
                        self.a_expr(0)
                        self.state = 7868
                        self.match(self.ESCAPE)
                        self.state = 7869 
                        self.a_expr(34)
                        pass

                    elif la_ == 20:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7871
                        if not self.precpred(self._ctx, 32):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 7872
                        self.match(self.NOT)
                        self.state = 7873
                        self.match(self.ILIKE)
                        self.state = 7874 
                        self.a_expr(33)
                        pass

                    elif la_ == 21:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7875
                        if not self.precpred(self._ctx, 31):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 7876
                        self.match(self.NOT)
                        self.state = 7877
                        self.match(self.ILIKE)
                        self.state = 7878 
                        self.a_expr(0)
                        self.state = 7879
                        self.match(self.ESCAPE)
                        self.state = 7880 
                        self.a_expr(32)
                        pass

                    elif la_ == 22:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7882
                        if not self.precpred(self._ctx, 30):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 7883
                        self.match(self.SIMILAR)
                        self.state = 7884
                        self.match(self.TO)
                        self.state = 7885 
                        self.a_expr(31)
                        pass

                    elif la_ == 23:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7886
                        if not self.precpred(self._ctx, 29):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 7887
                        self.match(self.SIMILAR)
                        self.state = 7888
                        self.match(self.TO)
                        self.state = 7889 
                        self.a_expr(0)
                        self.state = 7890
                        self.match(self.ESCAPE)
                        self.state = 7891 
                        self.a_expr(30)
                        pass

                    elif la_ == 24:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7893
                        if not self.precpred(self._ctx, 28):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 7894
                        self.match(self.NOT)
                        self.state = 7895
                        self.match(self.SIMILAR)
                        self.state = 7896
                        self.match(self.TO)
                        self.state = 7897 
                        self.a_expr(29)
                        pass

                    elif la_ == 25:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7898
                        if not self.precpred(self._ctx, 27):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 7899
                        self.match(self.NOT)
                        self.state = 7900
                        self.match(self.SIMILAR)
                        self.state = 7901
                        self.match(self.TO)
                        self.state = 7902 
                        self.a_expr(0)
                        self.state = 7903
                        self.match(self.ESCAPE)
                        self.state = 7904 
                        self.a_expr(28)
                        pass

                    elif la_ == 26:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7906
                        if not self.precpred(self._ctx, 15):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 7907
                        self.match(self.IS)
                        self.state = 7908
                        self.match(self.DISTINCT)
                        self.state = 7909
                        self.match(self.FROM)
                        self.state = 7910 
                        self.a_expr(16)
                        pass

                    elif la_ == 27:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7911
                        if not self.precpred(self._ctx, 14):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 7912
                        self.match(self.IS)
                        self.state = 7913
                        self.match(self.NOT)
                        self.state = 7914
                        self.match(self.DISTINCT)
                        self.state = 7915
                        self.match(self.FROM)
                        self.state = 7916 
                        self.a_expr(15)
                        pass

                    elif la_ == 28:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7917
                        if not self.precpred(self._ctx, 58):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 7918
                        self.match(self.TYPECAST)
                        self.state = 7919 
                        self.typename()
                        pass

                    elif la_ == 29:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7920
                        if not self.precpred(self._ctx, 57):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 7921
                        self.match(self.COLLATE)
                        self.state = 7922 
                        self.any_name()
                        pass

                    elif la_ == 30:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7923
                        if not self.precpred(self._ctx, 42):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 7924 
                        self.qual_Op()
                        pass

                    elif la_ == 31:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7925
                        if not self.precpred(self._ctx, 26):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 7926
                        self.match(self.IS)
                        self.state = 7927
                        self.match(self.NULL_P)
                        pass

                    elif la_ == 32:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7928
                        if not self.precpred(self._ctx, 25):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 7929
                        self.match(self.ISNULL)
                        pass

                    elif la_ == 33:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7930
                        if not self.precpred(self._ctx, 24):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 7931
                        self.match(self.IS)
                        self.state = 7932
                        self.match(self.NOT)
                        self.state = 7933
                        self.match(self.NULL_P)
                        pass

                    elif la_ == 34:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7934
                        if not self.precpred(self._ctx, 23):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 7935
                        self.match(self.NOTNULL)
                        pass

                    elif la_ == 35:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7936
                        if not self.precpred(self._ctx, 21):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 7937
                        self.match(self.IS)
                        self.state = 7938
                        self.match(self.TRUE_P)
                        pass

                    elif la_ == 36:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7939
                        if not self.precpred(self._ctx, 20):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 7940
                        self.match(self.IS)
                        self.state = 7941
                        self.match(self.NOT)
                        self.state = 7942
                        self.match(self.TRUE_P)
                        pass

                    elif la_ == 37:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7943
                        if not self.precpred(self._ctx, 19):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 7944
                        self.match(self.IS)
                        self.state = 7945
                        self.match(self.FALSE_P)
                        pass

                    elif la_ == 38:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7946
                        if not self.precpred(self._ctx, 18):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 7947
                        self.match(self.IS)
                        self.state = 7948
                        self.match(self.NOT)
                        self.state = 7949
                        self.match(self.FALSE_P)
                        pass

                    elif la_ == 39:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7950
                        if not self.precpred(self._ctx, 17):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 7951
                        self.match(self.IS)
                        self.state = 7952
                        self.match(self.UNKNOWN)
                        pass

                    elif la_ == 40:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7953
                        if not self.precpred(self._ctx, 16):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 7954
                        self.match(self.IS)
                        self.state = 7955
                        self.match(self.NOT)
                        self.state = 7956
                        self.match(self.UNKNOWN)
                        pass

                    elif la_ == 41:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7957
                        if not self.precpred(self._ctx, 13):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 7958
                        self.match(self.IS)
                        self.state = 7959
                        self.match(self.OF)
                        self.state = 7960
                        self.match(self.T__7)
                        self.state = 7961 
                        self.type_list(0)
                        self.state = 7962
                        self.match(self.T__13)
                        pass

                    elif la_ == 42:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7964
                        if not self.precpred(self._ctx, 12):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 7965
                        self.match(self.IS)
                        self.state = 7966
                        self.match(self.NOT)
                        self.state = 7967
                        self.match(self.OF)
                        self.state = 7968
                        self.match(self.T__7)
                        self.state = 7969 
                        self.type_list(0)
                        self.state = 7970
                        self.match(self.T__13)
                        pass

                    elif la_ == 43:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7972
                        if not self.precpred(self._ctx, 11):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 7973
                        self.match(self.BETWEEN)
                        self.state = 7974 
                        self.opt_asymmetric()
                        self.state = 7975 
                        self.b_expr(0)
                        self.state = 7976
                        self.match(self.AND)
                        self.state = 7977 
                        self.b_expr(0)
                        pass

                    elif la_ == 44:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7979
                        if not self.precpred(self._ctx, 10):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 7980
                        self.match(self.NOT)
                        self.state = 7981
                        self.match(self.BETWEEN)
                        self.state = 7982 
                        self.opt_asymmetric()
                        self.state = 7983 
                        self.b_expr(0)
                        self.state = 7984
                        self.match(self.AND)
                        self.state = 7985 
                        self.b_expr(0)
                        pass

                    elif la_ == 45:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7987
                        if not self.precpred(self._ctx, 9):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 7988
                        self.match(self.BETWEEN)
                        self.state = 7989
                        self.match(self.SYMMETRIC)
                        self.state = 7990 
                        self.b_expr(0)
                        self.state = 7991
                        self.match(self.AND)
                        self.state = 7992 
                        self.b_expr(0)
                        pass

                    elif la_ == 46:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7994
                        if not self.precpred(self._ctx, 8):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 7995
                        self.match(self.NOT)
                        self.state = 7996
                        self.match(self.BETWEEN)
                        self.state = 7997
                        self.match(self.SYMMETRIC)
                        self.state = 7998 
                        self.b_expr(0)
                        self.state = 7999
                        self.match(self.AND)
                        self.state = 8000 
                        self.b_expr(0)
                        pass

                    elif la_ == 47:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8002
                        if not self.precpred(self._ctx, 7):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 8003
                        self.match(self.IN_P)
                        self.state = 8004 
                        self.in_expr()
                        pass

                    elif la_ == 48:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8005
                        if not self.precpred(self._ctx, 6):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 8006
                        self.match(self.NOT)
                        self.state = 8007
                        self.match(self.IN_P)
                        self.state = 8008 
                        self.in_expr()
                        pass

                    elif la_ == 49:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8009
                        if not self.precpred(self._ctx, 5):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 8010 
                        self.subquery_Op()
                        self.state = 8011 
                        self.sub_type()
                        self.state = 8012 
                        self.select_with_parens(0)
                        pass

                    elif la_ == 50:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8014
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 8015 
                        self.subquery_Op()
                        self.state = 8016 
                        self.sub_type()
                        self.state = 8017
                        self.match(self.T__7)
                        self.state = 8018 
                        self.a_expr(0)
                        self.state = 8019
                        self.match(self.T__13)
                        pass

                    elif la_ == 51:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8021
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 8022
                        self.match(self.IS)
                        self.state = 8023
                        self.match(self.DOCUMENT_P)
                        pass

                    elif la_ == 52:
                        localctx = PlPgSqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 8024
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 8025
                        self.match(self.IS)
                        self.state = 8026
                        self.match(self.NOT)
                        self.state = 8027
                        self.match(self.DOCUMENT_P)
                        pass

             
                self.state = 8032
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class B_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.B_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def c_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.C_exprContext,0)


        def DOCUMENT_P(self):
            return self.getToken(PlPgSqlParser.DOCUMENT_P, 0)

        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def OF(self):
            return self.getToken(PlPgSqlParser.OF, 0)

        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.B_exprContext,i)


        def TYPECAST(self):
            return self.getToken(PlPgSqlParser.TYPECAST, 0)

        def IS(self):
            return self.getToken(PlPgSqlParser.IS, 0)

        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def qual_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qual_OpContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_b_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterB_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitB_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitB_expr(self)
            else:
                return visitor.visitChildren(self)



    def b_expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.B_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1082
        self.enterRecursionRule(localctx, 1082, self.RULE_b_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8042
            token = self._input.LA(1)
            if token in [self.T__11]:
                self.state = 8034
                self.match(self.T__11)
                self.state = 8035 
                self.b_expr(20)

            elif token in [self.T__10]:
                self.state = 8036
                self.match(self.T__10)
                self.state = 8037 
                self.b_expr(19)

            elif token in [self.Op, self.OPERATOR]:
                self.state = 8038 
                self.qual_Op()
                self.state = 8039 
                self.b_expr(8)

            elif token in [self.T__7, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.state = 8041 
                self.c_expr()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 8115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,427,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 8113
                    la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                    if la_ == 1:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8044
                        if not self.precpred(self._ctx, 18):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 8045
                        self.match(self.T__11)
                        self.state = 8046 
                        self.b_expr(19)
                        pass

                    elif la_ == 2:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8047
                        if not self.precpred(self._ctx, 17):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 8048
                        self.match(self.T__10)
                        self.state = 8049 
                        self.b_expr(18)
                        pass

                    elif la_ == 3:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8050
                        if not self.precpred(self._ctx, 16):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 8051
                        self.match(self.T__9)
                        self.state = 8052 
                        self.b_expr(17)
                        pass

                    elif la_ == 4:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8053
                        if not self.precpred(self._ctx, 15):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 8054
                        self.match(self.T__1)
                        self.state = 8055 
                        self.b_expr(16)
                        pass

                    elif la_ == 5:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8056
                        if not self.precpred(self._ctx, 14):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 8057
                        self.match(self.T__16)
                        self.state = 8058 
                        self.b_expr(15)
                        pass

                    elif la_ == 6:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8059
                        if not self.precpred(self._ctx, 13):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 8060
                        self.match(self.T__15)
                        self.state = 8061 
                        self.b_expr(14)
                        pass

                    elif la_ == 7:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8062
                        if not self.precpred(self._ctx, 12):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 8063
                        self.match(self.T__5)
                        self.state = 8064 
                        self.b_expr(13)
                        pass

                    elif la_ == 8:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8065
                        if not self.precpred(self._ctx, 11):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 8066
                        self.match(self.T__2)
                        self.state = 8067 
                        self.b_expr(12)
                        pass

                    elif la_ == 9:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8068
                        if not self.precpred(self._ctx, 10):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 8069
                        self.match(self.T__4)
                        self.state = 8070 
                        self.b_expr(11)
                        pass

                    elif la_ == 10:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8071
                        if not self.precpred(self._ctx, 9):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 8072 
                        self.qual_Op()
                        self.state = 8073 
                        self.b_expr(10)
                        pass

                    elif la_ == 11:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8075
                        if not self.precpred(self._ctx, 6):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 8076
                        self.match(self.IS)
                        self.state = 8077
                        self.match(self.DISTINCT)
                        self.state = 8078
                        self.match(self.FROM)
                        self.state = 8079 
                        self.b_expr(7)
                        pass

                    elif la_ == 12:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8080
                        if not self.precpred(self._ctx, 5):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 8081
                        self.match(self.IS)
                        self.state = 8082
                        self.match(self.NOT)
                        self.state = 8083
                        self.match(self.DISTINCT)
                        self.state = 8084
                        self.match(self.FROM)
                        self.state = 8085 
                        self.b_expr(6)
                        pass

                    elif la_ == 13:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8086
                        if not self.precpred(self._ctx, 21):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 8087
                        self.match(self.TYPECAST)
                        self.state = 8088 
                        self.typename()
                        pass

                    elif la_ == 14:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8089
                        if not self.precpred(self._ctx, 7):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 8090 
                        self.qual_Op()
                        pass

                    elif la_ == 15:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8091
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 8092
                        self.match(self.IS)
                        self.state = 8093
                        self.match(self.OF)
                        self.state = 8094
                        self.match(self.T__7)
                        self.state = 8095 
                        self.type_list(0)
                        self.state = 8096
                        self.match(self.T__13)
                        pass

                    elif la_ == 16:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8098
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 8099
                        self.match(self.IS)
                        self.state = 8100
                        self.match(self.NOT)
                        self.state = 8101
                        self.match(self.OF)
                        self.state = 8102
                        self.match(self.T__7)
                        self.state = 8103 
                        self.type_list(0)
                        self.state = 8104
                        self.match(self.T__13)
                        pass

                    elif la_ == 17:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8106
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 8107
                        self.match(self.IS)
                        self.state = 8108
                        self.match(self.DOCUMENT_P)
                        pass

                    elif la_ == 18:
                        localctx = PlPgSqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 8109
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 8110
                        self.match(self.IS)
                        self.state = 8111
                        self.match(self.NOT)
                        self.state = 8112
                        self.match(self.DOCUMENT_P)
                        pass

             
                self.state = 8117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,427,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class C_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.C_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_exprContext,0)


        def case_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_exprContext,0)


        def PARAM(self):
            return self.getToken(PlPgSqlParser.PARAM, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_indirectionContext,0)


        def columnref(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColumnrefContext,0)


        def array_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Array_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def row(self):
            return self.getTypedRuleContext(PlPgSqlParser.RowContext,0)


        def ARRAY(self):
            return self.getToken(PlPgSqlParser.ARRAY, 0)

        def aexprConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.AexprConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_c_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterC_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitC_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitC_expr(self)
            else:
                return visitor.visitChildren(self)




    def c_expr(self):

        localctx = PlPgSqlParser.C_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_c_expr)
        try:
            self.state = 8137
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8118 
                self.columnref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8119 
                self.aexprConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8120
                self.match(self.PARAM)
                self.state = 8121 
                self.opt_indirection(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8122
                self.match(self.T__7)
                self.state = 8123 
                self.a_expr(0)
                self.state = 8124
                self.match(self.T__13)
                self.state = 8125 
                self.opt_indirection(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8127 
                self.case_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8128 
                self.func_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8129 
                self.select_with_parens(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8130
                self.match(self.EXISTS)
                self.state = 8131 
                self.select_with_parens(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8132
                self.match(self.ARRAY)
                self.state = 8133 
                self.select_with_parens(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8134
                self.match(self.ARRAY)
                self.state = 8135 
                self.array_expr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8136 
                self.row()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(PlPgSqlParser.COALESCE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_DATE(self):
            return self.getToken(PlPgSqlParser.CURRENT_DATE, 0)

        def NULLIF(self):
            return self.getToken(PlPgSqlParser.NULLIF, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def simpletypename(self):
            return self.getTypedRuleContext(PlPgSqlParser.SimpletypenameContext,0)


        def TRIM(self):
            return self.getToken(PlPgSqlParser.TRIM, 0)

        def CURRENT_TIME(self):
            return self.getToken(PlPgSqlParser.CURRENT_TIME, 0)

        def overlay_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Overlay_listContext,0)


        def XMLROOT(self):
            return self.getToken(PlPgSqlParser.XMLROOT, 0)

        def NAME_P(self):
            return self.getToken(PlPgSqlParser.NAME_P, 0)

        def substr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Substr_listContext,0)


        def LOCALTIME(self):
            return self.getToken(PlPgSqlParser.LOCALTIME, 0)

        def GREATEST(self):
            return self.getToken(PlPgSqlParser.GREATEST, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PlPgSqlParser.CURRENT_CATALOG, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PlPgSqlParser.Document_or_contentContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Over_clauseContext,0)


        def opt_xml_root_standalone(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_xml_root_standaloneContext,0)


        def XMLPI(self):
            return self.getToken(PlPgSqlParser.XMLPI, 0)

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def trim_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Trim_listContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,i)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_sort_clauseContext,0)


        def TRAILING(self):
            return self.getToken(PlPgSqlParser.TRAILING, 0)

        def LEAST(self):
            return self.getToken(PlPgSqlParser.LEAST, 0)

        def VARIADIC(self):
            return self.getToken(PlPgSqlParser.VARIADIC, 0)

        def xmlexists_argument(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xmlexists_argumentContext,0)


        def LOCALTIMESTAMP(self):
            return self.getToken(PlPgSqlParser.LOCALTIMESTAMP, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PlPgSqlParser.CURRENT_ROLE, 0)

        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def XMLFOREST(self):
            return self.getToken(PlPgSqlParser.XMLFOREST, 0)

        def CURRENT_USER(self):
            return self.getToken(PlPgSqlParser.CURRENT_USER, 0)

        def SUBSTRING(self):
            return self.getToken(PlPgSqlParser.SUBSTRING, 0)

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def XMLEXISTS(self):
            return self.getToken(PlPgSqlParser.XMLEXISTS, 0)

        def xml_attributes(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_attributesContext,0)


        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Sort_clauseContext,0)


        def extract_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Extract_listContext,0)


        def BOTH(self):
            return self.getToken(PlPgSqlParser.BOTH, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def xml_whitespace_option(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_whitespace_optionContext,0)


        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PlPgSqlParser.CURRENT_SCHEMA, 0)

        def TREAT(self):
            return self.getToken(PlPgSqlParser.TREAT, 0)

        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_attribute_listContext,0)


        def OVERLAY(self):
            return self.getToken(PlPgSqlParser.OVERLAY, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PlPgSqlParser.XMLSERIALIZE, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def EXTRACT(self):
            return self.getToken(PlPgSqlParser.EXTRACT, 0)

        def xml_root_version(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_root_versionContext,0)


        def func_arg_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_exprContext,0)


        def XMLCONCAT(self):
            return self.getToken(PlPgSqlParser.XMLCONCAT, 0)

        def LEADING(self):
            return self.getToken(PlPgSqlParser.LEADING, 0)

        def XMLPARSE(self):
            return self.getToken(PlPgSqlParser.XMLPARSE, 0)

        def position_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Position_listContext,0)


        def XMLELEMENT(self):
            return self.getToken(PlPgSqlParser.XMLELEMENT, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.C_exprContext,0)


        def POSITION(self):
            return self.getToken(PlPgSqlParser.POSITION, 0)

        def SESSION_USER(self):
            return self.getToken(PlPgSqlParser.SESSION_USER, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_expr(self)
            else:
                return visitor.visitChildren(self)




    def func_expr(self):

        localctx = PlPgSqlParser.Func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_func_expr)
        try:
            self.state = 8396
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8139 
                self.func_name()
                self.state = 8140
                self.match(self.T__7)
                self.state = 8141
                self.match(self.T__13)
                self.state = 8142 
                self.over_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8144 
                self.func_name()
                self.state = 8145
                self.match(self.T__7)
                self.state = 8146 
                self.func_arg_list(0)
                self.state = 8147
                self.match(self.T__13)
                self.state = 8148 
                self.over_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8150 
                self.func_name()
                self.state = 8151
                self.match(self.T__7)
                self.state = 8152
                self.match(self.VARIADIC)
                self.state = 8153 
                self.func_arg_expr()
                self.state = 8154
                self.match(self.T__13)
                self.state = 8155 
                self.over_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8157 
                self.func_name()
                self.state = 8158
                self.match(self.T__7)
                self.state = 8159 
                self.func_arg_list(0)
                self.state = 8160
                self.match(self.T__12)
                self.state = 8161
                self.match(self.VARIADIC)
                self.state = 8162 
                self.func_arg_expr()
                self.state = 8163
                self.match(self.T__13)
                self.state = 8164 
                self.over_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8166 
                self.func_name()
                self.state = 8167
                self.match(self.T__7)
                self.state = 8168 
                self.func_arg_list(0)
                self.state = 8169 
                self.sort_clause()
                self.state = 8170
                self.match(self.T__13)
                self.state = 8171 
                self.over_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8173 
                self.func_name()
                self.state = 8174
                self.match(self.T__7)
                self.state = 8175
                self.match(self.ALL)
                self.state = 8176 
                self.func_arg_list(0)
                self.state = 8177 
                self.opt_sort_clause()
                self.state = 8178
                self.match(self.T__13)
                self.state = 8179 
                self.over_clause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8181 
                self.func_name()
                self.state = 8182
                self.match(self.T__7)
                self.state = 8183
                self.match(self.DISTINCT)
                self.state = 8184 
                self.func_arg_list(0)
                self.state = 8185 
                self.opt_sort_clause()
                self.state = 8186
                self.match(self.T__13)
                self.state = 8187 
                self.over_clause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8189 
                self.func_name()
                self.state = 8190
                self.match(self.T__7)
                self.state = 8191
                self.match(self.T__9)
                self.state = 8192
                self.match(self.T__13)
                self.state = 8193 
                self.over_clause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8195
                self.match(self.COLLATION)
                self.state = 8196
                self.match(self.FOR)
                self.state = 8197
                self.match(self.T__7)
                self.state = 8198 
                self.a_expr(0)
                self.state = 8199
                self.match(self.T__13)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8201
                self.match(self.CURRENT_DATE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8202
                self.match(self.CURRENT_TIME)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8203
                self.match(self.CURRENT_TIME)
                self.state = 8204
                self.match(self.T__7)
                self.state = 8205 
                self.iConst()
                self.state = 8206
                self.match(self.T__13)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8208
                self.match(self.CURRENT_TIMESTAMP)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 8209
                self.match(self.CURRENT_TIMESTAMP)
                self.state = 8210
                self.match(self.T__7)
                self.state = 8211 
                self.iConst()
                self.state = 8212
                self.match(self.T__13)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 8214
                self.match(self.LOCALTIME)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 8215
                self.match(self.LOCALTIME)
                self.state = 8216
                self.match(self.T__7)
                self.state = 8217 
                self.iConst()
                self.state = 8218
                self.match(self.T__13)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 8220
                self.match(self.LOCALTIMESTAMP)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 8221
                self.match(self.LOCALTIMESTAMP)
                self.state = 8222
                self.match(self.T__7)
                self.state = 8223 
                self.iConst()
                self.state = 8224
                self.match(self.T__13)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 8226
                self.match(self.CURRENT_ROLE)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 8227
                self.match(self.CURRENT_USER)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 8228
                self.match(self.SESSION_USER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 8229
                self.match(self.USER)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 8230
                self.match(self.CURRENT_CATALOG)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 8231
                self.match(self.CURRENT_SCHEMA)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 8232
                self.match(self.CAST)
                self.state = 8233
                self.match(self.T__7)
                self.state = 8234 
                self.a_expr(0)
                self.state = 8235
                self.match(self.AS)
                self.state = 8236 
                self.typename()
                self.state = 8237
                self.match(self.T__13)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 8239
                self.match(self.EXTRACT)
                self.state = 8240
                self.match(self.T__7)
                self.state = 8241 
                self.extract_list()
                self.state = 8242
                self.match(self.T__13)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 8244
                self.match(self.OVERLAY)
                self.state = 8245
                self.match(self.T__7)
                self.state = 8246 
                self.overlay_list()
                self.state = 8247
                self.match(self.T__13)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 8249
                self.match(self.POSITION)
                self.state = 8250
                self.match(self.T__7)
                self.state = 8251 
                self.position_list()
                self.state = 8252
                self.match(self.T__13)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 8254
                self.match(self.SUBSTRING)
                self.state = 8255
                self.match(self.T__7)
                self.state = 8256 
                self.substr_list()
                self.state = 8257
                self.match(self.T__13)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 8259
                self.match(self.TREAT)
                self.state = 8260
                self.match(self.T__7)
                self.state = 8261 
                self.a_expr(0)
                self.state = 8262
                self.match(self.AS)
                self.state = 8263 
                self.typename()
                self.state = 8264
                self.match(self.T__13)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 8266
                self.match(self.TRIM)
                self.state = 8267
                self.match(self.T__7)
                self.state = 8268
                self.match(self.BOTH)
                self.state = 8269 
                self.trim_list()
                self.state = 8270
                self.match(self.T__13)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 8272
                self.match(self.TRIM)
                self.state = 8273
                self.match(self.T__7)
                self.state = 8274
                self.match(self.LEADING)
                self.state = 8275 
                self.trim_list()
                self.state = 8276
                self.match(self.T__13)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 8278
                self.match(self.TRIM)
                self.state = 8279
                self.match(self.T__7)
                self.state = 8280
                self.match(self.TRAILING)
                self.state = 8281 
                self.trim_list()
                self.state = 8282
                self.match(self.T__13)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 8284
                self.match(self.TRIM)
                self.state = 8285
                self.match(self.T__7)
                self.state = 8286 
                self.trim_list()
                self.state = 8287
                self.match(self.T__13)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 8289
                self.match(self.NULLIF)
                self.state = 8290
                self.match(self.T__7)
                self.state = 8291 
                self.a_expr(0)
                self.state = 8292
                self.match(self.T__12)
                self.state = 8293 
                self.a_expr(0)
                self.state = 8294
                self.match(self.T__13)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 8296
                self.match(self.COALESCE)
                self.state = 8297
                self.match(self.T__7)
                self.state = 8298 
                self.expr_list(0)
                self.state = 8299
                self.match(self.T__13)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 8301
                self.match(self.GREATEST)
                self.state = 8302
                self.match(self.T__7)
                self.state = 8303 
                self.expr_list(0)
                self.state = 8304
                self.match(self.T__13)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 8306
                self.match(self.LEAST)
                self.state = 8307
                self.match(self.T__7)
                self.state = 8308 
                self.expr_list(0)
                self.state = 8309
                self.match(self.T__13)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 8311
                self.match(self.XMLCONCAT)
                self.state = 8312
                self.match(self.T__7)
                self.state = 8313 
                self.expr_list(0)
                self.state = 8314
                self.match(self.T__13)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 8316
                self.match(self.XMLELEMENT)
                self.state = 8317
                self.match(self.T__7)
                self.state = 8318
                self.match(self.NAME_P)
                self.state = 8319 
                self.colLabel()
                self.state = 8320
                self.match(self.T__13)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 8322
                self.match(self.XMLELEMENT)
                self.state = 8323
                self.match(self.T__7)
                self.state = 8324
                self.match(self.NAME_P)
                self.state = 8325 
                self.colLabel()
                self.state = 8326
                self.match(self.T__12)
                self.state = 8327 
                self.xml_attributes()
                self.state = 8328
                self.match(self.T__13)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 8330
                self.match(self.XMLELEMENT)
                self.state = 8331
                self.match(self.T__7)
                self.state = 8332
                self.match(self.NAME_P)
                self.state = 8333 
                self.colLabel()
                self.state = 8334
                self.match(self.T__12)
                self.state = 8335 
                self.expr_list(0)
                self.state = 8336
                self.match(self.T__13)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 8338
                self.match(self.XMLELEMENT)
                self.state = 8339
                self.match(self.T__7)
                self.state = 8340
                self.match(self.NAME_P)
                self.state = 8341 
                self.colLabel()
                self.state = 8342
                self.match(self.T__12)
                self.state = 8343 
                self.xml_attributes()
                self.state = 8344
                self.match(self.T__12)
                self.state = 8345 
                self.expr_list(0)
                self.state = 8346
                self.match(self.T__13)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 8348
                self.match(self.XMLEXISTS)
                self.state = 8349
                self.match(self.T__7)
                self.state = 8350 
                self.c_expr()
                self.state = 8351 
                self.xmlexists_argument()
                self.state = 8352
                self.match(self.T__13)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 8354
                self.match(self.XMLFOREST)
                self.state = 8355
                self.match(self.T__7)
                self.state = 8356 
                self.xml_attribute_list(0)
                self.state = 8357
                self.match(self.T__13)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 8359
                self.match(self.XMLPARSE)
                self.state = 8360
                self.match(self.T__7)
                self.state = 8361 
                self.document_or_content()
                self.state = 8362 
                self.a_expr(0)
                self.state = 8363 
                self.xml_whitespace_option()
                self.state = 8364
                self.match(self.T__13)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 8366
                self.match(self.XMLPI)
                self.state = 8367
                self.match(self.T__7)
                self.state = 8368
                self.match(self.NAME_P)
                self.state = 8369 
                self.colLabel()
                self.state = 8370
                self.match(self.T__13)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 8372
                self.match(self.XMLPI)
                self.state = 8373
                self.match(self.T__7)
                self.state = 8374
                self.match(self.NAME_P)
                self.state = 8375 
                self.colLabel()
                self.state = 8376
                self.match(self.T__12)
                self.state = 8377 
                self.a_expr(0)
                self.state = 8378
                self.match(self.T__13)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 8380
                self.match(self.XMLROOT)
                self.state = 8381
                self.match(self.T__7)
                self.state = 8382 
                self.a_expr(0)
                self.state = 8383
                self.match(self.T__12)
                self.state = 8384 
                self.xml_root_version()
                self.state = 8385 
                self.opt_xml_root_standalone()
                self.state = 8386
                self.match(self.T__13)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 8388
                self.match(self.XMLSERIALIZE)
                self.state = 8389
                self.match(self.T__7)
                self.state = 8390 
                self.document_or_content()
                self.state = 8391 
                self.a_expr(0)
                self.state = 8392
                self.match(self.AS)
                self.state = 8393 
                self.simpletypename()
                self.state = 8394
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_root_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xml_root_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PlPgSqlParser.VALUE_P, 0)

        def VERSION_P(self):
            return self.getToken(PlPgSqlParser.VERSION_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xml_root_version

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXml_root_version(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXml_root_version(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXml_root_version(self)
            else:
                return visitor.visitChildren(self)




    def xml_root_version(self):

        localctx = PlPgSqlParser.Xml_root_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_xml_root_version)
        try:
            self.state = 8403
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8398
                self.match(self.VERSION_P)
                self.state = 8399 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8400
                self.match(self.VERSION_P)
                self.state = 8401
                self.match(self.NO)
                self.state = 8402
                self.match(self.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_xml_root_standaloneContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_xml_root_standaloneContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PlPgSqlParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PlPgSqlParser.VALUE_P, 0)

        def STANDALONE_P(self):
            return self.getToken(PlPgSqlParser.STANDALONE_P, 0)

        def YES_P(self):
            return self.getToken(PlPgSqlParser.YES_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_xml_root_standalone

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_xml_root_standalone(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_xml_root_standalone(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_xml_root_standalone(self)
            else:
                return visitor.visitChildren(self)




    def opt_xml_root_standalone(self):

        localctx = PlPgSqlParser.Opt_xml_root_standaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_opt_xml_root_standalone)
        try:
            self.state = 8416
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                self.match(self.T__12)
                self.state = 8406
                self.match(self.STANDALONE_P)
                self.state = 8407
                self.match(self.YES_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8408
                self.match(self.T__12)
                self.state = 8409
                self.match(self.STANDALONE_P)
                self.state = 8410
                self.match(self.NO)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8411
                self.match(self.T__12)
                self.state = 8412
                self.match(self.STANDALONE_P)
                self.state = 8413
                self.match(self.NO)
                self.state = 8414
                self.match(self.VALUE_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xml_attributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_attribute_listContext,0)


        def XMLATTRIBUTES(self):
            return self.getToken(PlPgSqlParser.XMLATTRIBUTES, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xml_attributes

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXml_attributes(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXml_attributes(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXml_attributes(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes(self):

        localctx = PlPgSqlParser.Xml_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_xml_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8418
            self.match(self.XMLATTRIBUTES)
            self.state = 8419
            self.match(self.T__7)
            self.state = 8420 
            self.xml_attribute_list(0)
            self.state = 8421
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attribute_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xml_attribute_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_attribute_listContext,0)


        def xml_attribute_el(self):
            return self.getTypedRuleContext(PlPgSqlParser.Xml_attribute_elContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xml_attribute_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXml_attribute_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXml_attribute_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXml_attribute_list(self)
            else:
                return visitor.visitChildren(self)



    def xml_attribute_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Xml_attribute_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1094
        self.enterRecursionRule(localctx, 1094, self.RULE_xml_attribute_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8424 
            self.xml_attribute_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Xml_attribute_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xml_attribute_list)
                    self.state = 8426
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8427
                    self.match(self.T__12)
                    self.state = 8428 
                    self.xml_attribute_el() 
                self.state = 8433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Xml_attribute_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xml_attribute_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xml_attribute_el

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXml_attribute_el(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXml_attribute_el(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXml_attribute_el(self)
            else:
                return visitor.visitChildren(self)




    def xml_attribute_el(self):

        localctx = PlPgSqlParser.Xml_attribute_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_xml_attribute_el)
        try:
            self.state = 8439
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8434 
                self.a_expr(0)
                self.state = 8435
                self.match(self.AS)
                self.state = 8436 
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8438 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_or_contentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Document_or_contentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTENT_P(self):
            return self.getToken(PlPgSqlParser.CONTENT_P, 0)

        def DOCUMENT_P(self):
            return self.getToken(PlPgSqlParser.DOCUMENT_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_document_or_content

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDocument_or_content(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDocument_or_content(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDocument_or_content(self)
            else:
                return visitor.visitChildren(self)




    def document_or_content(self):

        localctx = PlPgSqlParser.Document_or_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_document_or_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8441
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.CONTENT_P or _la==PlPgSqlParser.DOCUMENT_P):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_whitespace_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xml_whitespace_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHITESPACE_P(self):
            return self.getToken(PlPgSqlParser.WHITESPACE_P, 0)

        def STRIP_P(self):
            return self.getToken(PlPgSqlParser.STRIP_P, 0)

        def PRESERVE(self):
            return self.getToken(PlPgSqlParser.PRESERVE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xml_whitespace_option

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXml_whitespace_option(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXml_whitespace_option(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXml_whitespace_option(self)
            else:
                return visitor.visitChildren(self)




    def xml_whitespace_option(self):

        localctx = PlPgSqlParser.Xml_whitespace_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_xml_whitespace_option)
        try:
            self.state = 8448
            token = self._input.LA(1)
            if token in [self.PRESERVE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8443
                self.match(self.PRESERVE)
                self.state = 8444
                self.match(self.WHITESPACE_P)

            elif token in [self.STRIP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8445
                self.match(self.STRIP_P)
                self.state = 8446
                self.match(self.WHITESPACE_P)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlexists_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Xmlexists_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.BY)
            else:
                return self.getToken(PlPgSqlParser.BY, i)

        def c_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.C_exprContext,0)


        def PASSING(self):
            return self.getToken(PlPgSqlParser.PASSING, 0)

        def REF(self, i=None):
            if i is None:
                return self.getTokens(PlPgSqlParser.REF)
            else:
                return self.getToken(PlPgSqlParser.REF, i)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_xmlexists_argument

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterXmlexists_argument(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitXmlexists_argument(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitXmlexists_argument(self)
            else:
                return visitor.visitChildren(self)




    def xmlexists_argument(self):

        localctx = PlPgSqlParser.Xmlexists_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_xmlexists_argument)
        try:
            self.state = 8468
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8450
                self.match(self.PASSING)
                self.state = 8451 
                self.c_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8452
                self.match(self.PASSING)
                self.state = 8453 
                self.c_expr()
                self.state = 8454
                self.match(self.BY)
                self.state = 8455
                self.match(self.REF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8457
                self.match(self.PASSING)
                self.state = 8458
                self.match(self.BY)
                self.state = 8459
                self.match(self.REF)
                self.state = 8460 
                self.c_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8461
                self.match(self.PASSING)
                self.state = 8462
                self.match(self.BY)
                self.state = 8463
                self.match(self.REF)
                self.state = 8464 
                self.c_expr()
                self.state = 8465
                self.match(self.BY)
                self.state = 8466
                self.match(self.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Window_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(PlPgSqlParser.WINDOW, 0)

        def window_definition_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_definition_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_window_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWindow_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWindow_clause(self)
            else:
                return visitor.visitChildren(self)




    def window_clause(self):

        localctx = PlPgSqlParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_window_clause)
        try:
            self.state = 8473
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8470
                self.match(self.WINDOW)
                self.state = 8471 
                self.window_definition_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_definition_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Window_definition_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def window_definition_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_definition_listContext,0)


        def window_definition(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_definitionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_window_definition_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWindow_definition_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWindow_definition_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWindow_definition_list(self)
            else:
                return visitor.visitChildren(self)



    def window_definition_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Window_definition_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1106
        self.enterRecursionRule(localctx, 1106, self.RULE_window_definition_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8476 
            self.window_definition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Window_definition_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_window_definition_list)
                    self.state = 8478
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8479
                    self.match(self.T__12)
                    self.state = 8480 
                    self.window_definition() 
                self.state = 8485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Window_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Window_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def window_specification(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_window_definition

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWindow_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWindow_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWindow_definition(self)
            else:
                return visitor.visitChildren(self)




    def window_definition(self):

        localctx = PlPgSqlParser.Window_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_window_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8486 
            self.colId()
            self.state = 8487
            self.match(self.AS)
            self.state = 8488 
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Over_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def OVER(self):
            return self.getToken(PlPgSqlParser.OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(PlPgSqlParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_over_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOver_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOver_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = PlPgSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_over_clause)
        try:
            self.state = 8495
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8490
                self.match(self.OVER)
                self.state = 8491 
                self.window_specification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8492
                self.match(self.OVER)
                self.state = 8493 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Window_specificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_frame_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_frame_clauseContext,0)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_sort_clauseContext,0)


        def opt_existing_window_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_existing_window_nameContext,0)


        def opt_partition_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_partition_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_window_specification

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWindow_specification(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWindow_specification(self)
            else:
                return visitor.visitChildren(self)




    def window_specification(self):

        localctx = PlPgSqlParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_window_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8497
            self.match(self.T__7)
            self.state = 8498 
            self.opt_existing_window_name()
            self.state = 8499 
            self.opt_partition_clause()
            self.state = 8500 
            self.opt_sort_clause()
            self.state = 8501 
            self.opt_frame_clause()
            self.state = 8502
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_existing_window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_existing_window_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_existing_window_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_existing_window_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_existing_window_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_existing_window_name(self)
            else:
                return visitor.visitChildren(self)




    def opt_existing_window_name(self):

        localctx = PlPgSqlParser.Opt_existing_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_opt_existing_window_name)
        try:
            self.state = 8506
            token = self._input.LA(1)
            if token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.IDENT, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8504 
                self.colId()

            elif token in [self.T__13, self.ORDER, self.PARTITION, self.RANGE, self.ROWS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_partition_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def BY(self):
            return self.getToken(PlPgSqlParser.BY, 0)

        def PARTITION(self):
            return self.getToken(PlPgSqlParser.PARTITION, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_partition_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_partition_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_partition_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_partition_clause(self):

        localctx = PlPgSqlParser.Opt_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_opt_partition_clause)
        try:
            self.state = 8512
            token = self._input.LA(1)
            if token in [self.PARTITION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8508
                self.match(self.PARTITION)
                self.state = 8509
                self.match(self.BY)
                self.state = 8510 
                self.expr_list(0)

            elif token in [self.T__13, self.ORDER, self.RANGE, self.ROWS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_frame_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_frame_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(PlPgSqlParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(PlPgSqlParser.ROWS, 0)

        def frame_extent(self):
            return self.getTypedRuleContext(PlPgSqlParser.Frame_extentContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_frame_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_frame_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_frame_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_frame_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_frame_clause(self):

        localctx = PlPgSqlParser.Opt_frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_opt_frame_clause)
        try:
            self.state = 8519
            token = self._input.LA(1)
            if token in [self.RANGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8514
                self.match(self.RANGE)
                self.state = 8515 
                self.frame_extent()

            elif token in [self.ROWS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8516
                self.match(self.ROWS)
                self.state = 8517 
                self.frame_extent()

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Frame_extentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(PlPgSqlParser.BETWEEN, 0)

        def frame_bound(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.Frame_boundContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.Frame_boundContext,i)


        def AND(self):
            return self.getToken(PlPgSqlParser.AND, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_frame_extent

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFrame_extent(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFrame_extent(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFrame_extent(self)
            else:
                return visitor.visitChildren(self)




    def frame_extent(self):

        localctx = PlPgSqlParser.Frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_frame_extent)
        try:
            self.state = 8527
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8521 
                self.frame_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8522
                self.match(self.BETWEEN)
                self.state = 8523 
                self.frame_bound()
                self.state = 8524
                self.match(self.AND)
                self.state = 8525 
                self.frame_bound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Frame_boundContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(PlPgSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(PlPgSqlParser.PRECEDING, 0)

        def CURRENT_P(self):
            return self.getToken(PlPgSqlParser.CURRENT_P, 0)

        def FOLLOWING(self):
            return self.getToken(PlPgSqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_frame_bound

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFrame_bound(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFrame_bound(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFrame_bound(self)
            else:
                return visitor.visitChildren(self)




    def frame_bound(self):

        localctx = PlPgSqlParser.Frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_frame_bound)
        try:
            self.state = 8541
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8529
                self.match(self.UNBOUNDED)
                self.state = 8530
                self.match(self.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8531
                self.match(self.UNBOUNDED)
                self.state = 8532
                self.match(self.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8533
                self.match(self.CURRENT_P)
                self.state = 8534
                self.match(self.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8535 
                self.a_expr(0)
                self.state = 8536
                self.match(self.PRECEDING)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8538 
                self.a_expr(0)
                self.state = 8539
                self.match(self.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RowContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_row

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRow(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRow(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRow(self)
            else:
                return visitor.visitChildren(self)




    def row(self):

        localctx = PlPgSqlParser.RowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_row)
        try:
            self.state = 8557
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8543
                self.match(self.ROW)
                self.state = 8544
                self.match(self.T__7)
                self.state = 8545 
                self.expr_list(0)
                self.state = 8546
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8548
                self.match(self.ROW)
                self.state = 8549
                self.match(self.T__7)
                self.state = 8550
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8551
                self.match(self.T__7)
                self.state = 8552 
                self.expr_list(0)
                self.state = 8553
                self.match(self.T__12)
                self.state = 8554 
                self.a_expr(0)
                self.state = 8555
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sub_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Sub_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(PlPgSqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(PlPgSqlParser.ANY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_sub_type

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSub_type(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSub_type(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSub_type(self)
            else:
                return visitor.visitChildren(self)




    def sub_type(self):

        localctx = PlPgSqlParser.Sub_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_sub_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8559
            _la = self._input.LA(1)
            if not(_la==PlPgSqlParser.ALL or _la==PlPgSqlParser.ANY or _la==PlPgSqlParser.SOME):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.All_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def mathOp(self):
            return self.getTypedRuleContext(PlPgSqlParser.MathOpContext,0)


        def Op(self):
            return self.getToken(PlPgSqlParser.Op, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_all_Op

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAll_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAll_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAll_Op(self)
            else:
                return visitor.visitChildren(self)




    def all_Op(self):

        localctx = PlPgSqlParser.All_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_all_Op)
        try:
            self.state = 8563
            token = self._input.LA(1)
            if token in [self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8561
                self.match(self.Op)

            elif token in [self.T__16, self.T__15, self.T__11, self.T__10, self.T__9, self.T__5, self.T__4, self.T__2, self.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8562 
                self.mathOp()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.MathOpContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_mathOp

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterMathOp(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitMathOp(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitMathOp(self)
            else:
                return visitor.visitChildren(self)




    def mathOp(self):

        localctx = PlPgSqlParser.MathOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_mathOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8565
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.T__16) | (1 << self.T__15) | (1 << self.T__11) | (1 << self.T__10) | (1 << self.T__9) | (1 << self.T__5) | (1 << self.T__4) | (1 << self.T__2) | (1 << self.T__1))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qual_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Qual_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def Op(self):
            return self.getToken(PlPgSqlParser.Op, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_qual_Op

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterQual_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitQual_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitQual_Op(self)
            else:
                return visitor.visitChildren(self)




    def qual_Op(self):

        localctx = PlPgSqlParser.Qual_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_qual_Op)
        try:
            self.state = 8573
            token = self._input.LA(1)
            if token in [self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8567
                self.match(self.Op)

            elif token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8568
                self.match(self.OPERATOR)
                self.state = 8569
                self.match(self.T__7)
                self.state = 8570 
                self.any_operator()
                self.state = 8571
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qual_all_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Qual_all_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def all_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.All_OpContext,0)


        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_qual_all_Op

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterQual_all_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitQual_all_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitQual_all_Op(self)
            else:
                return visitor.visitChildren(self)




    def qual_all_Op(self):

        localctx = PlPgSqlParser.Qual_all_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_qual_all_Op)
        try:
            self.state = 8581
            token = self._input.LA(1)
            if token in [self.T__16, self.T__15, self.T__11, self.T__10, self.T__9, self.T__5, self.T__4, self.T__2, self.T__1, self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8575 
                self.all_Op()

            elif token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8576
                self.match(self.OPERATOR)
                self.state = 8577
                self.match(self.T__7)
                self.state = 8578 
                self.any_operator()
                self.state = 8579
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Subquery_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ILIKE(self):
            return self.getToken(PlPgSqlParser.ILIKE, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PlPgSqlParser.Any_operatorContext,0)


        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def all_Op(self):
            return self.getTypedRuleContext(PlPgSqlParser.All_OpContext,0)


        def LIKE(self):
            return self.getToken(PlPgSqlParser.LIKE, 0)

        def OPERATOR(self):
            return self.getToken(PlPgSqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_subquery_Op

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSubquery_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSubquery_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSubquery_Op(self)
            else:
                return visitor.visitChildren(self)




    def subquery_Op(self):

        localctx = PlPgSqlParser.Subquery_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_subquery_Op)
        try:
            self.state = 8595
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8583 
                self.all_Op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8584
                self.match(self.OPERATOR)
                self.state = 8585
                self.match(self.T__7)
                self.state = 8586 
                self.any_operator()
                self.state = 8587
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8589
                self.match(self.LIKE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8590
                self.match(self.NOT)
                self.state = 8591
                self.match(self.LIKE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8592
                self.match(self.ILIKE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8593
                self.match(self.NOT)
                self.state = 8594
                self.match(self.ILIKE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_expr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExpr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExpr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExpr_list(self)
            else:
                return visitor.visitChildren(self)



    def expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1138
        self.enterRecursionRule(localctx, 1138, self.RULE_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8598 
            self.a_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 8605
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,449,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr_list)
                    self.state = 8600
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8601
                    self.match(self.T__12)
                    self.state = 8602 
                    self.a_expr(0) 
                self.state = 8607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,449,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_arg_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_arg_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_arg_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_listContext,0)


        def func_arg_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_arg_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_arg_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_arg_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_arg_list(self)
            else:
                return visitor.visitChildren(self)



    def func_arg_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Func_arg_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1140
        self.enterRecursionRule(localctx, 1140, self.RULE_func_arg_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8609 
            self.func_arg_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Func_arg_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_arg_list)
                    self.state = 8611
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8612
                    self.match(self.T__12)
                    self.state = 8613 
                    self.func_arg_expr() 
                self.state = 8618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_arg_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_arg_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Param_nameContext,0)


        def COLON_EQUALS(self):
            return self.getToken(PlPgSqlParser.COLON_EQUALS, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_arg_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_arg_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_arg_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_arg_expr(self)
            else:
                return visitor.visitChildren(self)




    def func_arg_expr(self):

        localctx = PlPgSqlParser.Func_arg_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_func_arg_expr)
        try:
            self.state = 8624
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8619 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8620 
                self.param_name()
                self.state = 8621
                self.match(self.COLON_EQUALS)
                self.state = 8622 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Type_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PlPgSqlParser.TypenameContext,0)


        def type_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_type_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterType_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitType_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitType_list(self)
            else:
                return visitor.visitChildren(self)



    def type_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Type_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1144
        self.enterRecursionRule(localctx, 1144, self.RULE_type_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8627 
            self.typename()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,452,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Type_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_list)
                    self.state = 8629
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8630
                    self.match(self.T__12)
                    self.state = 8631 
                    self.typename() 
                self.state = 8636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,452,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Array_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Array_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def array_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Array_expr_listContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_array_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterArray_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitArray_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitArray_expr(self)
            else:
                return visitor.visitChildren(self)




    def array_expr(self):

        localctx = PlPgSqlParser.Array_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_array_expr)
        try:
            self.state = 8647
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8637
                self.match(self.T__8)
                self.state = 8638 
                self.expr_list(0)
                self.state = 8639
                self.match(self.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8641
                self.match(self.T__8)
                self.state = 8642 
                self.array_expr_list(0)
                self.state = 8643
                self.match(self.T__17)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8645
                self.match(self.T__8)
                self.state = 8646
                self.match(self.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Array_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def array_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Array_expr_listContext,0)


        def array_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Array_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_array_expr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterArray_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitArray_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitArray_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def array_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Array_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1148
        self.enterRecursionRule(localctx, 1148, self.RULE_array_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8650 
            self.array_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,454,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Array_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_array_expr_list)
                    self.state = 8652
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8653
                    self.match(self.T__12)
                    self.state = 8654 
                    self.array_expr() 
                self.state = 8659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Extract_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Extract_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def extract_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Extract_argContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_extract_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExtract_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExtract_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExtract_list(self)
            else:
                return visitor.visitChildren(self)




    def extract_list(self):

        localctx = PlPgSqlParser.Extract_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_extract_list)
        try:
            self.state = 8665
            token = self._input.LA(1)
            if token in [self.DAY_P, self.HOUR_P, self.MINUTE_P, self.MONTH_P, self.SECOND_P, self.YEAR_P, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8660 
                self.extract_arg()
                self.state = 8661
                self.match(self.FROM)
                self.state = 8662 
                self.a_expr(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extract_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Extract_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MONTH_P(self):
            return self.getToken(PlPgSqlParser.MONTH_P, 0)

        def MINUTE_P(self):
            return self.getToken(PlPgSqlParser.MINUTE_P, 0)

        def SECOND_P(self):
            return self.getToken(PlPgSqlParser.SECOND_P, 0)

        def HOUR_P(self):
            return self.getToken(PlPgSqlParser.HOUR_P, 0)

        def YEAR_P(self):
            return self.getToken(PlPgSqlParser.YEAR_P, 0)

        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def DAY_P(self):
            return self.getToken(PlPgSqlParser.DAY_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_extract_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterExtract_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitExtract_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitExtract_arg(self)
            else:
                return visitor.visitChildren(self)




    def extract_arg(self):

        localctx = PlPgSqlParser.Extract_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_extract_arg)
        try:
            self.state = 8675
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8667
                self.match(self.IDENT)

            elif token in [self.YEAR_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8668
                self.match(self.YEAR_P)

            elif token in [self.MONTH_P]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8669
                self.match(self.MONTH_P)

            elif token in [self.DAY_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8670
                self.match(self.DAY_P)

            elif token in [self.HOUR_P]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8671
                self.match(self.HOUR_P)

            elif token in [self.MINUTE_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8672
                self.match(self.MINUTE_P)

            elif token in [self.SECOND_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8673
                self.match(self.SECOND_P)

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8674 
                self.sConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overlay_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Overlay_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def substr_from(self):
            return self.getTypedRuleContext(PlPgSqlParser.Substr_fromContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def overlay_placing(self):
            return self.getTypedRuleContext(PlPgSqlParser.Overlay_placingContext,0)


        def substr_for(self):
            return self.getTypedRuleContext(PlPgSqlParser.Substr_forContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_overlay_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOverlay_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOverlay_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOverlay_list(self)
            else:
                return visitor.visitChildren(self)




    def overlay_list(self):

        localctx = PlPgSqlParser.Overlay_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_overlay_list)
        try:
            self.state = 8686
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8677 
                self.a_expr(0)
                self.state = 8678 
                self.overlay_placing()
                self.state = 8679 
                self.substr_from()
                self.state = 8680 
                self.substr_for()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8682 
                self.a_expr(0)
                self.state = 8683 
                self.overlay_placing()
                self.state = 8684 
                self.substr_from()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overlay_placingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Overlay_placingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def PLACING(self):
            return self.getToken(PlPgSqlParser.PLACING, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_overlay_placing

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOverlay_placing(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOverlay_placing(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOverlay_placing(self)
            else:
                return visitor.visitChildren(self)




    def overlay_placing(self):

        localctx = PlPgSqlParser.Overlay_placingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_overlay_placing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8688
            self.match(self.PLACING)
            self.state = 8689 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Position_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Position_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.B_exprContext,i)


        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_position_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterPosition_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitPosition_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitPosition_list(self)
            else:
                return visitor.visitChildren(self)




    def position_list(self):

        localctx = PlPgSqlParser.Position_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_position_list)
        try:
            self.state = 8696
            token = self._input.LA(1)
            if token in [self.T__11, self.T__10, self.T__7, self.Op, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OPERATOR, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8691 
                self.b_expr(0)
                self.state = 8692
                self.match(self.IN_P)
                self.state = 8693 
                self.b_expr(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Substr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def substr_from(self):
            return self.getTypedRuleContext(PlPgSqlParser.Substr_fromContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def substr_for(self):
            return self.getTypedRuleContext(PlPgSqlParser.Substr_forContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_substr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSubstr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSubstr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSubstr_list(self)
            else:
                return visitor.visitChildren(self)




    def substr_list(self):

        localctx = PlPgSqlParser.Substr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_substr_list)
        try:
            self.state = 8714
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8698 
                self.a_expr(0)
                self.state = 8699 
                self.substr_from()
                self.state = 8700 
                self.substr_for()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8702 
                self.a_expr(0)
                self.state = 8703 
                self.substr_for()
                self.state = 8704 
                self.substr_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8706 
                self.a_expr(0)
                self.state = 8707 
                self.substr_from()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8709 
                self.a_expr(0)
                self.state = 8710 
                self.substr_for()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8712 
                self.expr_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_fromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Substr_fromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_substr_from

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSubstr_from(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSubstr_from(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSubstr_from(self)
            else:
                return visitor.visitChildren(self)




    def substr_from(self):

        localctx = PlPgSqlParser.Substr_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_substr_from)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8716
            self.match(self.FROM)
            self.state = 8717 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_forContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Substr_forContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_substr_for

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSubstr_for(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSubstr_for(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSubstr_for(self)
            else:
                return visitor.visitChildren(self)




    def substr_for(self):

        localctx = PlPgSqlParser.Substr_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_substr_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8719
            self.match(self.FOR)
            self.state = 8720 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trim_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Trim_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_trim_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTrim_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTrim_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTrim_list(self)
            else:
                return visitor.visitChildren(self)




    def trim_list(self):

        localctx = PlPgSqlParser.Trim_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_trim_list)
        try:
            self.state = 8729
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8722 
                self.a_expr(0)
                self.state = 8723
                self.match(self.FROM)
                self.state = 8724 
                self.expr_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8726
                self.match(self.FROM)
                self.state = 8727 
                self.expr_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8728 
                self.expr_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.In_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Expr_listContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PlPgSqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_in_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIn_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIn_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIn_expr(self)
            else:
                return visitor.visitChildren(self)




    def in_expr(self):

        localctx = PlPgSqlParser.In_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_in_expr)
        try:
            self.state = 8736
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8731 
                self.select_with_parens(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8732
                self.match(self.T__7)
                self.state = 8733 
                self.expr_list(0)
                self.state = 8734
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Case_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def case_arg(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_argContext,0)


        def CASE(self):
            return self.getToken(PlPgSqlParser.CASE, 0)

        def case_default(self):
            return self.getTypedRuleContext(PlPgSqlParser.Case_defaultContext,0)


        def END_P(self):
            return self.getToken(PlPgSqlParser.END_P, 0)

        def when_clause_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.When_clause_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_case_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCase_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCase_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCase_expr(self)
            else:
                return visitor.visitChildren(self)




    def case_expr(self):

        localctx = PlPgSqlParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_case_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8738
            self.match(self.CASE)
            self.state = 8739 
            self.case_arg()
            self.state = 8740 
            self.when_clause_list(0)
            self.state = 8741 
            self.case_default()
            self.state = 8742
            self.match(self.END_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_clause_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.When_clause_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def when_clause_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.When_clause_listContext,0)


        def when_clause(self):
            return self.getTypedRuleContext(PlPgSqlParser.When_clauseContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_when_clause_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWhen_clause_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWhen_clause_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWhen_clause_list(self)
            else:
                return visitor.visitChildren(self)



    def when_clause_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.When_clause_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1172
        self.enterRecursionRule(localctx, 1172, self.RULE_when_clause_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8745 
            self.when_clause()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,462,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.When_clause_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_when_clause_list)
                    self.state = 8747
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8748 
                    self.when_clause() 
                self.state = 8753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,462,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class When_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.When_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(PlPgSqlParser.THEN, 0)

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,i)


        def WHEN(self):
            return self.getToken(PlPgSqlParser.WHEN, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_when_clause

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitWhen_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitWhen_clause(self)
            else:
                return visitor.visitChildren(self)




    def when_clause(self):

        localctx = PlPgSqlParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8754
            self.match(self.WHEN)
            self.state = 8755 
            self.a_expr(0)
            self.state = 8756
            self.match(self.THEN)
            self.state = 8757 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Case_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def ELSE(self):
            return self.getToken(PlPgSqlParser.ELSE, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_case_default

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCase_default(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCase_default(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCase_default(self)
            else:
                return visitor.visitChildren(self)




    def case_default(self):

        localctx = PlPgSqlParser.Case_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_case_default)
        try:
            self.state = 8762
            token = self._input.LA(1)
            if token in [self.ELSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8759
                self.match(self.ELSE)
                self.state = 8760 
                self.a_expr(0)

            elif token in [self.END_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Case_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_case_arg

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCase_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCase_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCase_arg(self)
            else:
                return visitor.visitChildren(self)




    def case_arg(self):

        localctx = PlPgSqlParser.Case_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_case_arg)
        try:
            self.state = 8766
            token = self._input.LA(1)
            if token in [self.T__11, self.T__10, self.T__7, self.Op, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOT, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OPERATOR, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.UNIQUE, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8764 
                self.a_expr(0)

            elif token in [self.WHEN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnrefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColumnrefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_columnref

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColumnref(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColumnref(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColumnref(self)
            else:
                return visitor.visitChildren(self)




    def columnref(self):

        localctx = PlPgSqlParser.ColumnrefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_columnref)
        try:
            self.state = 8772
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8768 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8769 
                self.colId()
                self.state = 8770 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indirection_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Indirection_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PlPgSqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,i)


        def attr_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Attr_nameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_indirection_el

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndirection_el(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndirection_el(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndirection_el(self)
            else:
                return visitor.visitChildren(self)




    def indirection_el(self):

        localctx = PlPgSqlParser.Indirection_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_indirection_el)
        try:
            self.state = 8788
            la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8774
                self.match(self.T__14)
                self.state = 8775 
                self.attr_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8776
                self.match(self.T__14)
                self.state = 8777
                self.match(self.T__9)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8778
                self.match(self.T__8)
                self.state = 8779 
                self.a_expr(0)
                self.state = 8780
                self.match(self.T__17)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8782
                self.match(self.T__8)
                self.state = 8783 
                self.a_expr(0)
                self.state = 8784
                self.match(self.T__6)
                self.state = 8785 
                self.a_expr(0)
                self.state = 8786
                self.match(self.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndirectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.IndirectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self):
            return self.getTypedRuleContext(PlPgSqlParser.Indirection_elContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_indirection

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndirection(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndirection(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndirection(self)
            else:
                return visitor.visitChildren(self)



    def indirection(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.IndirectionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1184
        self.enterRecursionRule(localctx, 1184, self.RULE_indirection, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8791 
            self.indirection_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,467,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.IndirectionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indirection)
                    self.state = 8793
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8794 
                    self.indirection_el() 
                self.state = 8799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,467,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_indirectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_indirectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self):
            return self.getTypedRuleContext(PlPgSqlParser.Indirection_elContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_indirection

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_indirection(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_indirection(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_indirection(self)
            else:
                return visitor.visitChildren(self)



    def opt_indirection(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Opt_indirectionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1186
        self.enterRecursionRule(localctx, 1186, self.RULE_opt_indirection, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 8805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,468,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Opt_indirectionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_indirection)
                    self.state = 8801
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8802 
                    self.indirection_el() 
                self.state = 8807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_asymmetricContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Opt_asymmetricContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASYMMETRIC(self):
            return self.getToken(PlPgSqlParser.ASYMMETRIC, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_opt_asymmetric

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterOpt_asymmetric(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitOpt_asymmetric(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitOpt_asymmetric(self)
            else:
                return visitor.visitChildren(self)




    def opt_asymmetric(self):

        localctx = PlPgSqlParser.Opt_asymmetricContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_opt_asymmetric)
        try:
            self.state = 8810
            token = self._input.LA(1)
            if token in [self.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8808
                self.match(self.ASYMMETRIC)

            elif token in [self.T__11, self.T__10, self.T__7, self.Op, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OPERATOR, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctext_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Ctext_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ctext_expr

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCtext_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCtext_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCtext_expr(self)
            else:
                return visitor.visitChildren(self)




    def ctext_expr(self):

        localctx = PlPgSqlParser.Ctext_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_ctext_expr)
        try:
            self.state = 8814
            token = self._input.LA(1)
            if token in [self.T__11, self.T__10, self.T__7, self.Op, self.ARRAY, self.AUTHORIZATION, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.CASE, self.CAST, self.CHAR_P, self.CHARACTER, self.COALESCE, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.EXISTS, self.EXTRACT, self.FALSE_P, self.FLOAT_P, self.FREEZE, self.FULL, self.GREATEST, self.ILIKE, self.INNER_P, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.IS, self.ISNULL, self.JOIN, self.LEAST, self.LEFT, self.LIKE, self.LOCALTIME, self.LOCALTIMESTAMP, self.NATIONAL, self.NATURAL, self.NCHAR, self.NONE, self.NOT, self.NOTNULL, self.NULL_P, self.NULLIF, self.NUMERIC, self.OPERATOR, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.RIGHT, self.ROW, self.SESSION_USER, self.SETOF, self.SIMILAR, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.TRUE_P, self.UNIQUE, self.USER, self.VALUES, self.VARCHAR, self.VERBOSE, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM, self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8812 
                self.a_expr(0)

            elif token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8813
                self.match(self.DEFAULT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctext_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Ctext_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_expr_listContext,0)


        def ctext_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_exprContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ctext_expr_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCtext_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCtext_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCtext_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def ctext_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Ctext_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1192
        self.enterRecursionRule(localctx, 1192, self.RULE_ctext_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8817 
            self.ctext_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8824
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,471,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Ctext_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ctext_expr_list)
                    self.state = 8819
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8820
                    self.match(self.T__12)
                    self.state = 8821 
                    self.ctext_expr() 
                self.state = 8826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,471,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Ctext_rowContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Ctext_rowContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_expr_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Ctext_expr_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_ctext_row

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCtext_row(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCtext_row(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCtext_row(self)
            else:
                return visitor.visitChildren(self)




    def ctext_row(self):

        localctx = PlPgSqlParser.Ctext_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_ctext_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8827
            self.match(self.T__7)
            self.state = 8828 
            self.ctext_expr_list(0)
            self.state = 8829
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Target_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def target_el(self):
            return self.getTypedRuleContext(PlPgSqlParser.Target_elContext,0)


        def target_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Target_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_target_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTarget_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTarget_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTarget_list(self)
            else:
                return visitor.visitChildren(self)



    def target_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Target_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1196
        self.enterRecursionRule(localctx, 1196, self.RULE_target_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8832 
            self.target_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Target_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_target_list)
                    self.state = 8834
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8835
                    self.match(self.T__12)
                    self.state = 8836 
                    self.target_el() 
                self.state = 8841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Target_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Target_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PlPgSqlParser.A_exprContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_target_el

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterTarget_el(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitTarget_el(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitTarget_el(self)
            else:
                return visitor.visitChildren(self)




    def target_el(self):

        localctx = PlPgSqlParser.Target_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_target_el)
        try:
            self.state = 8851
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8842 
                self.a_expr(0)
                self.state = 8843
                self.match(self.AS)
                self.state = 8844 
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8846 
                self.a_expr(0)
                self.state = 8847
                self.match(self.IDENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8849 
                self.a_expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8850
                self.match(self.T__9)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Qualified_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_nameContext,0)


        def qualified_name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_qualified_name_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterQualified_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitQualified_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitQualified_name_list(self)
            else:
                return visitor.visitChildren(self)



    def qualified_name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Qualified_name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1200
        self.enterRecursionRule(localctx, 1200, self.RULE_qualified_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8854 
            self.qualified_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,474,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Qualified_name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_qualified_name_list)
                    self.state = 8856
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8857
                    self.match(self.T__12)
                    self.state = 8858 
                    self.qualified_name() 
                self.state = 8863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,474,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Qualified_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Qualified_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_qualified_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterQualified_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitQualified_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitQualified_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_name(self):

        localctx = PlPgSqlParser.Qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_qualified_name)
        try:
            self.state = 8868
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8864 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8865 
                self.colId()
                self.state = 8866 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Name_listContext,0)


        def name(self):
            return self.getTypedRuleContext(PlPgSqlParser.NameContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_name_list

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterName_list(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitName_list(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitName_list(self)
            else:
                return visitor.visitChildren(self)



    def name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlPgSqlParser.Name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1204
        self.enterRecursionRule(localctx, 1204, self.RULE_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8871 
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlPgSqlParser.Name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_name_list)
                    self.state = 8873
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8874
                    self.match(self.T__12)
                    self.state = 8875 
                    self.name() 
                self.state = 8880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,476,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterName(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitName(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = PlPgSqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8881 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_database_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitDatabase_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = PlPgSqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8883 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Access_methodContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Access_methodContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_access_method

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAccess_method(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAccess_method(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAccess_method(self)
            else:
                return visitor.visitChildren(self)




    def access_method(self):

        localctx = PlPgSqlParser.Access_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_access_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8885 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Attr_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_attr_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAttr_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAttr_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAttr_name(self)
            else:
                return visitor.visitChildren(self)




    def attr_name(self):

        localctx = PlPgSqlParser.Attr_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_attr_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8887 
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_index_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIndex_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = PlPgSqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8889 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.File_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_file_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFile_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFile_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFile_name(self)
            else:
                return visitor.visitChildren(self)




    def file_name(self):

        localctx = PlPgSqlParser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8891 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Func_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_function_nameContext,0)


        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PlPgSqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_func_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterFunc_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitFunc_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitFunc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_name(self):

        localctx = PlPgSqlParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_func_name)
        try:
            self.state = 8897
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8893 
                self.type_function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8894 
                self.colId()
                self.state = 8895 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AexprConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.AexprConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def opt_interval(self):
            return self.getTypedRuleContext(PlPgSqlParser.Opt_intervalContext,0)


        def consttypename(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConsttypenameContext,0)


        def TRUE_P(self):
            return self.getToken(PlPgSqlParser.TRUE_P, 0)

        def XCONST(self):
            return self.getToken(PlPgSqlParser.XCONST, 0)

        def func_name(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_nameContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(PlPgSqlParser.ConstIntervalContext,0)


        def func_arg_list(self):
            return self.getTypedRuleContext(PlPgSqlParser.Func_arg_listContext,0)


        def FCONST(self):
            return self.getToken(PlPgSqlParser.FCONST, 0)

        def FALSE_P(self):
            return self.getToken(PlPgSqlParser.FALSE_P, 0)

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def BCONST(self):
            return self.getToken(PlPgSqlParser.BCONST, 0)

        def sConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.SConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_aexprConst

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterAexprConst(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitAexprConst(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitAexprConst(self)
            else:
                return visitor.visitChildren(self)




    def aexprConst(self):

        localctx = PlPgSqlParser.AexprConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_aexprConst)
        try:
            self.state = 8930
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8899 
                self.iConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8900
                self.match(self.FCONST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8901 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8902
                self.match(self.BCONST)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8903
                self.match(self.XCONST)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8904 
                self.func_name()
                self.state = 8905 
                self.sConst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8907 
                self.func_name()
                self.state = 8908
                self.match(self.T__7)
                self.state = 8909 
                self.func_arg_list(0)
                self.state = 8910
                self.match(self.T__13)
                self.state = 8911 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8913 
                self.consttypename()
                self.state = 8914 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8916 
                self.constInterval()
                self.state = 8917 
                self.sConst()
                self.state = 8918 
                self.opt_interval()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8920 
                self.constInterval()
                self.state = 8921
                self.match(self.T__7)
                self.state = 8922 
                self.iConst()
                self.state = 8923
                self.match(self.T__13)
                self.state = 8924 
                self.sConst()
                self.state = 8925 
                self.opt_interval()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8927
                self.match(self.TRUE_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8928
                self.match(self.FALSE_P)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8929
                self.match(self.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.IConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ICONST(self):
            return self.getToken(PlPgSqlParser.ICONST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_iConst

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterIConst(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitIConst(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitIConst(self)
            else:
                return visitor.visitChildren(self)




    def iConst(self):

        localctx = PlPgSqlParser.IConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_iConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8932
            self.match(self.ICONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCONST(self):
            return self.getToken(PlPgSqlParser.SCONST, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_sConst

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSConst(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSConst(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSConst(self)
            else:
                return visitor.visitChildren(self)




    def sConst(self):

        localctx = PlPgSqlParser.SConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_sConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8934
            self.match(self.SCONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoleIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.RoleIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(PlPgSqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_roleId

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterRoleId(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitRoleId(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitRoleId(self)
            else:
                return visitor.visitChildren(self)




    def roleId(self):

        localctx = PlPgSqlParser.RoleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_roleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8936 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIconstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.SignedIconstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(PlPgSqlParser.IConstContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_signedIconst

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterSignedIconst(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitSignedIconst(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitSignedIconst(self)
            else:
                return visitor.visitChildren(self)




    def signedIconst(self):

        localctx = PlPgSqlParser.SignedIconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_signedIconst)
        try:
            self.state = 8943
            token = self._input.LA(1)
            if token in [self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8938 
                self.iConst()

            elif token in [self.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8939
                self.match(self.T__11)
                self.state = 8940 
                self.iConst()

            elif token in [self.T__10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8941
                self.match(self.T__10)
                self.state = 8942 
                self.iConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Col_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colId

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColId(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColId(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColId(self)
            else:
                return visitor.visitChildren(self)




    def colId(self):

        localctx = PlPgSqlParser.ColIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_colId)
        try:
            self.state = 8948
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8945
                self.match(self.IDENT)

            elif token in [self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8946 
                self.unreserved_keyword()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8947 
                self.col_name_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Type_function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Unreserved_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_func_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_type_function_name

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterType_function_name(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitType_function_name(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitType_function_name(self)
            else:
                return visitor.visitChildren(self)




    def type_function_name(self):

        localctx = PlPgSqlParser.Type_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_type_function_name)
        try:
            self.state = 8953
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8950
                self.match(self.IDENT)

            elif token in [self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8951 
                self.unreserved_keyword()

            elif token in [self.AUTHORIZATION, self.BINARY, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_SCHEMA, self.FREEZE, self.FULL, self.ILIKE, self.INNER_P, self.IS, self.ISNULL, self.JOIN, self.LEFT, self.LIKE, self.NATURAL, self.NOTNULL, self.OUTER_P, self.OVER, self.OVERLAPS, self.RIGHT, self.SIMILAR, self.VERBOSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8952 
                self.type_func_name_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColLabelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.ColLabelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Type_func_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(PlPgSqlParser.IDENT, 0)

        def reserved_keyword(self):
            return self.getTypedRuleContext(PlPgSqlParser.Reserved_keywordContext,0)


        def getRuleIndex(self):
            return PlPgSqlParser.RULE_colLabel

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterColLabel(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitColLabel(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitColLabel(self)
            else:
                return visitor.visitChildren(self)




    def colLabel(self):

        localctx = PlPgSqlParser.ColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_colLabel)
        try:
            self.state = 8960
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8955
                self.match(self.IDENT)

            elif token in [self.K_OPTION, self.K_DUMP, self.K_VARIABLE_CONFLICT, self.K_ERROR, self.K_USE_VARIABLE, self.K_USE_COLUMN, self.K_ALIAS, self.K_CURSOR, self.K_NO, self.K_SCROLL, self.K_IS, self.K_CONSTANT, self.K_CURRENT, self.K_STACKED, self.K_ARRAY, self.K_SLICE, self.K_ABSOLUTE, self.K_BACKWARD, self.K_DEBUG, self.K_DETAIL, self.K_ERRCODE, self.K_FIRST, self.K_FORWARD, self.K_HINT, self.K_INFO, self.K_LAST, self.K_LOG, self.K_MESSAGE, self.K_MESSAGE_TEXT, self.K_NEXT, self.K_NOTICE, self.K_PG_EXCEPTION_CONTEXT, self.K_PG_EXCEPTION_DETAIL, self.K_PG_EXCEPTION_HINT, self.K_PRIOR, self.K_QUERY, self.K_RELATIVE, self.K_RESULT_OID, self.K_RETURNED_SQLSTATE, self.K_REVERSE, self.K_ROW_COUNT, self.K_ROWTYPE, self.K_SQLSTATE, self.K_TYPE, self.K_WARNING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8956 
                self.unreserved_keyword()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8957 
                self.col_name_keyword()

            elif token in [self.AUTHORIZATION, self.BINARY, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_SCHEMA, self.FREEZE, self.FULL, self.ILIKE, self.INNER_P, self.IS, self.ISNULL, self.JOIN, self.LEFT, self.LIKE, self.NATURAL, self.NOTNULL, self.OUTER_P, self.OVER, self.OVERLAPS, self.RIGHT, self.SIMILAR, self.VERBOSE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8958 
                self.type_func_name_keyword()

            elif token in [self.ALL, self.ANALYSE, self.ANALYZE, self.AND, self.ANY, self.ARRAY, self.AS, self.ASC, self.ASYMMETRIC, self.BOTH, self.CASE, self.CAST, self.CHECK, self.COLLATE, self.COLUMN, self.CONSTRAINT, self.CREATE, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEFAULT, self.DEFERRABLE, self.DESC, self.DISTINCT, self.DO, self.ELSE, self.END_P, self.EXCEPT, self.FALSE_P, self.FETCH, self.FOR, self.FOREIGN, self.FROM, self.GRANT, self.GROUP_P, self.HAVING, self.IN_P, self.INITIALLY, self.INTERSECT, self.INTO, self.LEADING, self.LIMIT, self.LOCALTIME, self.LOCALTIMESTAMP, self.NOT, self.NULL_P, self.OFFSET, self.ON, self.ONLY, self.OR, self.ORDER, self.PLACING, self.PRIMARY, self.REFERENCES, self.RETURNING, self.SELECT, self.SESSION_USER, self.SOME, self.SYMMETRIC, self.TABLE, self.THEN, self.TO, self.TRAILING, self.TRUE_P, self.UNION, self.UNIQUE, self.USER, self.USING, self.VARIADIC, self.WHEN, self.WHERE, self.WINDOW, self.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8959 
                self.reserved_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_name_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Col_name_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PlPgSqlParser.TIMESTAMP, 0)

        def COALESCE(self):
            return self.getToken(PlPgSqlParser.COALESCE, 0)

        def BIT(self):
            return self.getToken(PlPgSqlParser.BIT, 0)

        def EXISTS(self):
            return self.getToken(PlPgSqlParser.EXISTS, 0)

        def NULLIF(self):
            return self.getToken(PlPgSqlParser.NULLIF, 0)

        def TIME(self):
            return self.getToken(PlPgSqlParser.TIME, 0)

        def CHAR_P(self):
            return self.getToken(PlPgSqlParser.CHAR_P, 0)

        def XMLEXISTS(self):
            return self.getToken(PlPgSqlParser.XMLEXISTS, 0)

        def TRIM(self):
            return self.getToken(PlPgSqlParser.TRIM, 0)

        def SETOF(self):
            return self.getToken(PlPgSqlParser.SETOF, 0)

        def DEC(self):
            return self.getToken(PlPgSqlParser.DEC, 0)

        def INOUT(self):
            return self.getToken(PlPgSqlParser.INOUT, 0)

        def XMLROOT(self):
            return self.getToken(PlPgSqlParser.XMLROOT, 0)

        def CHARACTER(self):
            return self.getToken(PlPgSqlParser.CHARACTER, 0)

        def ROW(self):
            return self.getToken(PlPgSqlParser.ROW, 0)

        def TREAT(self):
            return self.getToken(PlPgSqlParser.TREAT, 0)

        def DECIMAL_P(self):
            return self.getToken(PlPgSqlParser.DECIMAL_P, 0)

        def INT_P(self):
            return self.getToken(PlPgSqlParser.INT_P, 0)

        def REAL(self):
            return self.getToken(PlPgSqlParser.REAL, 0)

        def VALUES(self):
            return self.getToken(PlPgSqlParser.VALUES, 0)

        def GREATEST(self):
            return self.getToken(PlPgSqlParser.GREATEST, 0)

        def INTERVAL(self):
            return self.getToken(PlPgSqlParser.INTERVAL, 0)

        def BIGINT(self):
            return self.getToken(PlPgSqlParser.BIGINT, 0)

        def SMALLINT(self):
            return self.getToken(PlPgSqlParser.SMALLINT, 0)

        def XMLPI(self):
            return self.getToken(PlPgSqlParser.XMLPI, 0)

        def OVERLAY(self):
            return self.getToken(PlPgSqlParser.OVERLAY, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PlPgSqlParser.XMLSERIALIZE, 0)

        def EXTRACT(self):
            return self.getToken(PlPgSqlParser.EXTRACT, 0)

        def LEAST(self):
            return self.getToken(PlPgSqlParser.LEAST, 0)

        def VARCHAR(self):
            return self.getToken(PlPgSqlParser.VARCHAR, 0)

        def XMLCONCAT(self):
            return self.getToken(PlPgSqlParser.XMLCONCAT, 0)

        def PRECISION(self):
            return self.getToken(PlPgSqlParser.PRECISION, 0)

        def XMLPARSE(self):
            return self.getToken(PlPgSqlParser.XMLPARSE, 0)

        def BOOLEAN_P(self):
            return self.getToken(PlPgSqlParser.BOOLEAN_P, 0)

        def FLOAT_P(self):
            return self.getToken(PlPgSqlParser.FLOAT_P, 0)

        def NATIONAL(self):
            return self.getToken(PlPgSqlParser.NATIONAL, 0)

        def BETWEEN(self):
            return self.getToken(PlPgSqlParser.BETWEEN, 0)

        def NUMERIC(self):
            return self.getToken(PlPgSqlParser.NUMERIC, 0)

        def XMLELEMENT(self):
            return self.getToken(PlPgSqlParser.XMLELEMENT, 0)

        def OUT_P(self):
            return self.getToken(PlPgSqlParser.OUT_P, 0)

        def POSITION(self):
            return self.getToken(PlPgSqlParser.POSITION, 0)

        def NONE(self):
            return self.getToken(PlPgSqlParser.NONE, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PlPgSqlParser.XMLATTRIBUTES, 0)

        def XMLFOREST(self):
            return self.getToken(PlPgSqlParser.XMLFOREST, 0)

        def NCHAR(self):
            return self.getToken(PlPgSqlParser.NCHAR, 0)

        def SUBSTRING(self):
            return self.getToken(PlPgSqlParser.SUBSTRING, 0)

        def INTEGER(self):
            return self.getToken(PlPgSqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_col_name_keyword

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterCol_name_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitCol_name_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitCol_name_keyword(self)
            else:
                return visitor.visitChildren(self)




    def col_name_keyword(self):

        localctx = PlPgSqlParser.Col_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_col_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8962
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (self.BETWEEN - 48)) | (1 << (self.BIGINT - 48)) | (1 << (self.BIT - 48)) | (1 << (self.BOOLEAN_P - 48)) | (1 << (self.CHAR_P - 48)) | (1 << (self.CHARACTER - 48)) | (1 << (self.COALESCE - 48)) | (1 << (self.DEC - 48)) | (1 << (self.DECIMAL_P - 48)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (self.EXISTS - 140)) | (1 << (self.EXTRACT - 140)) | (1 << (self.FLOAT_P - 140)) | (1 << (self.GREATEST - 140)) | (1 << (self.INOUT - 140)) | (1 << (self.INT_P - 140)) | (1 << (self.INTEGER - 140)) | (1 << (self.INTERVAL - 140)))) != 0) or ((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (self.LEAST - 210)) | (1 << (self.NATIONAL - 210)) | (1 << (self.NCHAR - 210)) | (1 << (self.NONE - 210)) | (1 << (self.NULLIF - 210)) | (1 << (self.NUMERIC - 210)) | (1 << (self.OUT_P - 210)) | (1 << (self.OVERLAY - 210)) | (1 << (self.POSITION - 210)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (self.PRECISION - 275)) | (1 << (self.REAL - 275)) | (1 << (self.ROW - 275)) | (1 << (self.SETOF - 275)) | (1 << (self.SMALLINT - 275)))) != 0) or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (self.SUBSTRING - 344)) | (1 << (self.TIME - 344)) | (1 << (self.TIMESTAMP - 344)) | (1 << (self.TREAT - 344)) | (1 << (self.TRIM - 344)) | (1 << (self.VALUES - 344)) | (1 << (self.VARCHAR - 344)) | (1 << (self.XMLATTRIBUTES - 344)) | (1 << (self.XMLCONCAT - 344)) | (1 << (self.XMLELEMENT - 344)) | (1 << (self.XMLEXISTS - 344)))) != 0) or ((((_la - 408)) & ~0x3f) == 0 and ((1 << (_la - 408)) & ((1 << (self.XMLFOREST - 408)) | (1 << (self.XMLPARSE - 408)) | (1 << (self.XMLPI - 408)) | (1 << (self.XMLROOT - 408)) | (1 << (self.XMLSERIALIZE - 408)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_func_name_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Type_func_name_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(PlPgSqlParser.JOIN, 0)

        def OUTER_P(self):
            return self.getToken(PlPgSqlParser.OUTER_P, 0)

        def FULL(self):
            return self.getToken(PlPgSqlParser.FULL, 0)

        def VERBOSE(self):
            return self.getToken(PlPgSqlParser.VERBOSE, 0)

        def INNER_P(self):
            return self.getToken(PlPgSqlParser.INNER_P, 0)

        def ISNULL(self):
            return self.getToken(PlPgSqlParser.ISNULL, 0)

        def OVERLAPS(self):
            return self.getToken(PlPgSqlParser.OVERLAPS, 0)

        def LEFT(self):
            return self.getToken(PlPgSqlParser.LEFT, 0)

        def IS(self):
            return self.getToken(PlPgSqlParser.IS, 0)

        def AUTHORIZATION(self):
            return self.getToken(PlPgSqlParser.AUTHORIZATION, 0)

        def OVER(self):
            return self.getToken(PlPgSqlParser.OVER, 0)

        def NATURAL(self):
            return self.getToken(PlPgSqlParser.NATURAL, 0)

        def SIMILAR(self):
            return self.getToken(PlPgSqlParser.SIMILAR, 0)

        def CONCURRENTLY(self):
            return self.getToken(PlPgSqlParser.CONCURRENTLY, 0)

        def NOTNULL(self):
            return self.getToken(PlPgSqlParser.NOTNULL, 0)

        def CROSS(self):
            return self.getToken(PlPgSqlParser.CROSS, 0)

        def ILIKE(self):
            return self.getToken(PlPgSqlParser.ILIKE, 0)

        def COLLATION(self):
            return self.getToken(PlPgSqlParser.COLLATION, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PlPgSqlParser.CURRENT_SCHEMA, 0)

        def FREEZE(self):
            return self.getToken(PlPgSqlParser.FREEZE, 0)

        def LIKE(self):
            return self.getToken(PlPgSqlParser.LIKE, 0)

        def RIGHT(self):
            return self.getToken(PlPgSqlParser.RIGHT, 0)

        def BINARY(self):
            return self.getToken(PlPgSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_type_func_name_keyword

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterType_func_name_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitType_func_name_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitType_func_name_keyword(self)
            else:
                return visitor.visitChildren(self)




    def type_func_name_keyword(self):

        localctx = PlPgSqlParser.Type_func_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_type_func_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8964
            _la = self._input.LA(1)
            if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (self.AUTHORIZATION - 44)) | (1 << (self.BINARY - 44)) | (1 << (self.COLLATION - 44)) | (1 << (self.CONCURRENTLY - 44)) | (1 << (self.CROSS - 44)) | (1 << (self.CURRENT_SCHEMA - 44)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (self.FREEZE - 155)) | (1 << (self.FULL - 155)) | (1 << (self.ILIKE - 155)) | (1 << (self.INNER_P - 155)) | (1 << (self.IS - 155)) | (1 << (self.ISNULL - 155)) | (1 << (self.JOIN - 155)) | (1 << (self.LEFT - 155)) | (1 << (self.LIKE - 155)))) != 0) or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (self.NATURAL - 233)) | (1 << (self.NOTNULL - 233)) | (1 << (self.OUTER_P - 233)) | (1 << (self.OVER - 233)) | (1 << (self.OVERLAPS - 233)))) != 0) or _la==PlPgSqlParser.RIGHT or _la==PlPgSqlParser.SIMILAR or _la==PlPgSqlParser.VERBOSE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PlPgSqlParser.Reserved_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PlPgSqlParser.EXCEPT, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_DATE(self):
            return self.getToken(PlPgSqlParser.CURRENT_DATE, 0)

        def DEFERRABLE(self):
            return self.getToken(PlPgSqlParser.DEFERRABLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(PlPgSqlParser.CURRENT_TIME, 0)

        def RETURNING(self):
            return self.getToken(PlPgSqlParser.RETURNING, 0)

        def INITIALLY(self):
            return self.getToken(PlPgSqlParser.INITIALLY, 0)

        def SOME(self):
            return self.getToken(PlPgSqlParser.SOME, 0)

        def UNION(self):
            return self.getToken(PlPgSqlParser.UNION, 0)

        def GROUP_P(self):
            return self.getToken(PlPgSqlParser.GROUP_P, 0)

        def DEFAULT(self):
            return self.getToken(PlPgSqlParser.DEFAULT, 0)

        def DO(self):
            return self.getToken(PlPgSqlParser.DO, 0)

        def GRANT(self):
            return self.getToken(PlPgSqlParser.GRANT, 0)

        def FALSE_P(self):
            return self.getToken(PlPgSqlParser.FALSE_P, 0)

        def TABLE(self):
            return self.getToken(PlPgSqlParser.TABLE, 0)

        def LOCALTIME(self):
            return self.getToken(PlPgSqlParser.LOCALTIME, 0)

        def TO(self):
            return self.getToken(PlPgSqlParser.TO, 0)

        def ANALYSE(self):
            return self.getToken(PlPgSqlParser.ANALYSE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PlPgSqlParser.CURRENT_CATALOG, 0)

        def IN_P(self):
            return self.getToken(PlPgSqlParser.IN_P, 0)

        def WHEN(self):
            return self.getToken(PlPgSqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(PlPgSqlParser.THEN, 0)

        def ALL(self):
            return self.getToken(PlPgSqlParser.ALL, 0)

        def WINDOW(self):
            return self.getToken(PlPgSqlParser.WINDOW, 0)

        def TRUE_P(self):
            return self.getToken(PlPgSqlParser.TRUE_P, 0)

        def ANALYZE(self):
            return self.getToken(PlPgSqlParser.ANALYZE, 0)

        def TRAILING(self):
            return self.getToken(PlPgSqlParser.TRAILING, 0)

        def OR(self):
            return self.getToken(PlPgSqlParser.OR, 0)

        def WITH(self):
            return self.getToken(PlPgSqlParser.WITH, 0)

        def ASC(self):
            return self.getToken(PlPgSqlParser.ASC, 0)

        def VARIADIC(self):
            return self.getToken(PlPgSqlParser.VARIADIC, 0)

        def UNIQUE(self):
            return self.getToken(PlPgSqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(PlPgSqlParser.REFERENCES, 0)

        def WHERE(self):
            return self.getToken(PlPgSqlParser.WHERE, 0)

        def COLUMN(self):
            return self.getToken(PlPgSqlParser.COLUMN, 0)

        def DESC(self):
            return self.getToken(PlPgSqlParser.DESC, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PlPgSqlParser.LOCALTIMESTAMP, 0)

        def COLLATE(self):
            return self.getToken(PlPgSqlParser.COLLATE, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PlPgSqlParser.CURRENT_ROLE, 0)

        def DISTINCT(self):
            return self.getToken(PlPgSqlParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(PlPgSqlParser.ELSE, 0)

        def NOT(self):
            return self.getToken(PlPgSqlParser.NOT, 0)

        def USING(self):
            return self.getToken(PlPgSqlParser.USING, 0)

        def ONLY(self):
            return self.getToken(PlPgSqlParser.ONLY, 0)

        def CASE(self):
            return self.getToken(PlPgSqlParser.CASE, 0)

        def PRIMARY(self):
            return self.getToken(PlPgSqlParser.PRIMARY, 0)

        def CURRENT_USER(self):
            return self.getToken(PlPgSqlParser.CURRENT_USER, 0)

        def FOREIGN(self):
            return self.getToken(PlPgSqlParser.FOREIGN, 0)

        def AS(self):
            return self.getToken(PlPgSqlParser.AS, 0)

        def CHECK(self):
            return self.getToken(PlPgSqlParser.CHECK, 0)

        def LIMIT(self):
            return self.getToken(PlPgSqlParser.LIMIT, 0)

        def AND(self):
            return self.getToken(PlPgSqlParser.AND, 0)

        def INTO(self):
            return self.getToken(PlPgSqlParser.INTO, 0)

        def ASYMMETRIC(self):
            return self.getToken(PlPgSqlParser.ASYMMETRIC, 0)

        def BOTH(self):
            return self.getToken(PlPgSqlParser.BOTH, 0)

        def ON(self):
            return self.getToken(PlPgSqlParser.ON, 0)

        def OFFSET(self):
            return self.getToken(PlPgSqlParser.OFFSET, 0)

        def ORDER(self):
            return self.getToken(PlPgSqlParser.ORDER, 0)

        def HAVING(self):
            return self.getToken(PlPgSqlParser.HAVING, 0)

        def CONSTRAINT(self):
            return self.getToken(PlPgSqlParser.CONSTRAINT, 0)

        def PLACING(self):
            return self.getToken(PlPgSqlParser.PLACING, 0)

        def END_P(self):
            return self.getToken(PlPgSqlParser.END_P, 0)

        def FROM(self):
            return self.getToken(PlPgSqlParser.FROM, 0)

        def ARRAY(self):
            return self.getToken(PlPgSqlParser.ARRAY, 0)

        def CAST(self):
            return self.getToken(PlPgSqlParser.CAST, 0)

        def SYMMETRIC(self):
            return self.getToken(PlPgSqlParser.SYMMETRIC, 0)

        def CREATE(self):
            return self.getToken(PlPgSqlParser.CREATE, 0)

        def INTERSECT(self):
            return self.getToken(PlPgSqlParser.INTERSECT, 0)

        def ANY(self):
            return self.getToken(PlPgSqlParser.ANY, 0)

        def USER(self):
            return self.getToken(PlPgSqlParser.USER, 0)

        def SELECT(self):
            return self.getToken(PlPgSqlParser.SELECT, 0)

        def LEADING(self):
            return self.getToken(PlPgSqlParser.LEADING, 0)

        def FETCH(self):
            return self.getToken(PlPgSqlParser.FETCH, 0)

        def NULL_P(self):
            return self.getToken(PlPgSqlParser.NULL_P, 0)

        def SESSION_USER(self):
            return self.getToken(PlPgSqlParser.SESSION_USER, 0)

        def FOR(self):
            return self.getToken(PlPgSqlParser.FOR, 0)

        def getRuleIndex(self):
            return PlPgSqlParser.RULE_reserved_keyword

        def enterRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.enterReserved_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, PlPgSqlListener ):
                listener.exitReserved_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, PlPgSqlVisitor ):
                return visitor.visitReserved_keyword(self)
            else:
                return visitor.visitChildren(self)




    def reserved_keyword(self):

        localctx = PlPgSqlParser.Reserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_reserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8966
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ALL) | (1 << self.ANALYSE) | (1 << self.ANALYZE) | (1 << self.AND) | (1 << self.ANY) | (1 << self.ARRAY) | (1 << self.AS) | (1 << self.ASC) | (1 << self.ASYMMETRIC) | (1 << self.BOTH) | (1 << self.CASE) | (1 << self.CAST))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (self.CHECK - 66)) | (1 << (self.COLLATE - 66)) | (1 << (self.COLUMN - 66)) | (1 << (self.CONSTRAINT - 66)) | (1 << (self.CREATE - 66)) | (1 << (self.CURRENT_CATALOG - 66)) | (1 << (self.CURRENT_DATE - 66)) | (1 << (self.CURRENT_ROLE - 66)) | (1 << (self.CURRENT_TIME - 66)) | (1 << (self.CURRENT_TIMESTAMP - 66)) | (1 << (self.CURRENT_USER - 66)) | (1 << (self.DEFAULT - 66)) | (1 << (self.DEFERRABLE - 66)) | (1 << (self.DESC - 66)) | (1 << (self.DISTINCT - 66)) | (1 << (self.DO - 66)) | (1 << (self.ELSE - 66)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (self.END_P - 132)) | (1 << (self.EXCEPT - 132)) | (1 << (self.FALSE_P - 132)) | (1 << (self.FETCH - 132)) | (1 << (self.FOR - 132)) | (1 << (self.FOREIGN - 132)) | (1 << (self.FROM - 132)) | (1 << (self.GRANT - 132)) | (1 << (self.GROUP_P - 132)) | (1 << (self.HAVING - 132)) | (1 << (self.IN_P - 132)) | (1 << (self.INITIALLY - 132)) | (1 << (self.INTERSECT - 132)) | (1 << (self.INTO - 132)))) != 0) or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (self.LEADING - 208)) | (1 << (self.LIMIT - 208)) | (1 << (self.LOCALTIME - 208)) | (1 << (self.LOCALTIMESTAMP - 208)) | (1 << (self.NOT - 208)) | (1 << (self.NULL_P - 208)) | (1 << (self.OFFSET - 208)) | (1 << (self.ON - 208)) | (1 << (self.ONLY - 208)) | (1 << (self.OR - 208)) | (1 << (self.ORDER - 208)) | (1 << (self.PLACING - 208)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (self.PRIMARY - 279)) | (1 << (self.REFERENCES - 279)) | (1 << (self.RETURNING - 279)) | (1 << (self.SELECT - 279)) | (1 << (self.SESSION_USER - 279)) | (1 << (self.SOME - 279)))) != 0) or ((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & ((1 << (self.SYMMETRIC - 345)) | (1 << (self.TABLE - 345)) | (1 << (self.THEN - 345)) | (1 << (self.TO - 345)) | (1 << (self.TRAILING - 345)) | (1 << (self.TRUE_P - 345)) | (1 << (self.UNION - 345)) | (1 << (self.UNIQUE - 345)) | (1 << (self.USER - 345)) | (1 << (self.USING - 345)) | (1 << (self.VARIADIC - 345)) | (1 << (self.WHEN - 345)) | (1 << (self.WHERE - 345)) | (1 << (self.WINDOW - 345)) | (1 << (self.WITH - 345)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.comp_options_sempred
        self._predicates[7] = self.decl_stmts_sempred
        self._predicates[13] = self.decl_cursor_arglist_sempred
        self._predicates[26] = self.proc_stmts_sempred
        self._predicates[32] = self.getdiag_list_sempred
        self._predicates[36] = self.assign_var_sempred
        self._predicates[38] = self.stmt_elsifs_sempred
        self._predicates[42] = self.case_when_list_sempred
        self._predicates[67] = self.proc_exceptions_sempred
        self._predicates[69] = self.proc_conditions_sempred
        self._predicates[81] = self.stmtmulti_sempred
        self._predicates[84] = self.optRoleList_sempred
        self._predicates[85] = self.alteroptRoleList_sempred
        self._predicates[102] = self.optSchemaEltList_sempred
        self._predicates[107] = self.var_name_sempred
        self._predicates[108] = self.var_list_sempred
        self._predicates[125] = self.alter_table_cmds_sempred
        self._predicates[133] = self.reloption_list_sempred
        self._predicates[136] = self.alter_type_cmds_sempred
        self._predicates[143] = self.copy_opt_list_sempred
        self._predicates[149] = self.copy_generic_opt_list_sempred
        self._predicates[152] = self.copy_generic_opt_arg_list_sempred
        self._predicates[158] = self.tableElementList_sempred
        self._predicates[159] = self.typedtableElementList_sempred
        self._predicates[164] = self.colQualList_sempred
        self._predicates[169] = self.tableLikeOptionList_sempred
        self._predicates[175] = self.columnList_sempred
        self._predicates[178] = self.exclusionConstraintList_sempred
        self._predicates[197] = self.seqOptList_sempred
        self._predicates[201] = self.numericOnly_list_sempred
        self._predicates[214] = self.create_extension_opt_list_sempred
        self._predicates[217] = self.alter_extension_opt_list_sempred
        self._predicates[222] = self.fdw_options_sempred
        self._predicates[227] = self.generic_option_list_sempred
        self._predicates[229] = self.alter_generic_option_list_sempred
        self._predicates[242] = self.foreigntableElementList_sempred
        self._predicates[251] = self.triggerEvents_sempred
        self._predicates[257] = self.triggerFuncArgs_sempred
        self._predicates[260] = self.constraintAttributeSpec_sempred
        self._predicates[267] = self.def_list_sempred
        self._predicates[272] = self.old_aggr_list_sempred
        self._predicates[275] = self.enum_val_list_sempred
        self._predicates[278] = self.opclass_item_list_sempred
        self._predicates[286] = self.opclass_drop_list_sempred
        self._predicates[294] = self.any_name_list_sempred
        self._predicates[296] = self.attrs_sempred
        self._predicates[313] = self.privilege_list_sempred
        self._predicates[316] = self.grantee_list_sempred
        self._predicates[319] = self.function_with_argtypes_list_sempred
        self._predicates[326] = self.defACLOptionList_sempred
        self._predicates[335] = self.index_params_sempred
        self._predicates[344] = self.func_args_list_sempred
        self._predicates[346] = self.func_args_with_defaults_list_sempred
        self._predicates[353] = self.createfunc_opt_list_sempred
        self._predicates[359] = self.table_func_column_list_sempred
        self._predicates[361] = self.alterfunc_opt_list_sempred
        self._predicates[369] = self.dostmt_opt_list_sempred
        self._predicates[385] = self.ruleActionMulti_sempred
        self._predicates[398] = self.transaction_mode_list_sempred
        self._predicates[404] = self.createdb_opt_list_sempred
        self._predicates[409] = self.alterdb_opt_list_sempred
        self._predicates[421] = self.vacuum_option_list_sempred
        self._predicates[431] = self.explain_option_list_sempred
        self._predicates[443] = self.insert_column_list_sempred
        self._predicates[453] = self.set_clause_list_sempred
        self._predicates[458] = self.set_target_list_sempred
        self._predicates[461] = self.cursor_options_sempred
        self._predicates[464] = self.select_with_parens_sempred
        self._predicates[467] = self.simple_select_sempred
        self._predicates[469] = self.cte_list_sempred
        self._predicates[479] = self.sortby_list_sempred
        self._predicates[495] = self.for_locking_items_sempred
        self._predicates[498] = self.values_clause_sempred
        self._predicates[500] = self.from_list_sempred
        self._predicates[508] = self.relation_expr_list_sempred
        self._predicates[514] = self.tableFuncElementList_sempred
        self._predicates[517] = self.opt_array_bounds_sempred
        self._predicates[540] = self.a_expr_sempred
        self._predicates[541] = self.b_expr_sempred
        self._predicates[547] = self.xml_attribute_list_sempred
        self._predicates[553] = self.window_definition_list_sempred
        self._predicates[569] = self.expr_list_sempred
        self._predicates[570] = self.func_arg_list_sempred
        self._predicates[572] = self.type_list_sempred
        self._predicates[574] = self.array_expr_list_sempred
        self._predicates[586] = self.when_clause_list_sempred
        self._predicates[592] = self.indirection_sempred
        self._predicates[593] = self.opt_indirection_sempred
        self._predicates[596] = self.ctext_expr_list_sempred
        self._predicates[598] = self.target_list_sempred
        self._predicates[600] = self.qualified_name_list_sempred
        self._predicates[602] = self.name_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fdw_options_sempred(self, localctx, predIndex):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def sortby_list_sempred(self, localctx, predIndex):
            if predIndex == 79:
                return self.precpred(self._ctx, 1)
         

    def func_args_list_sempred(self, localctx, predIndex):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def opt_indirection_sempred(self, localctx, predIndex):
            if predIndex == 165:
                return self.precpred(self._ctx, 1)
         

    def name_list_sempred(self, localctx, predIndex):
            if predIndex == 169:
                return self.precpred(self._ctx, 1)
         

    def qualified_name_list_sempred(self, localctx, predIndex):
            if predIndex == 168:
                return self.precpred(self._ctx, 1)
         

    def when_clause_list_sempred(self, localctx, predIndex):
            if predIndex == 163:
                return self.precpred(self._ctx, 1)
         

    def vacuum_option_list_sempred(self, localctx, predIndex):
            if predIndex == 63:
                return self.precpred(self._ctx, 1)
         

    def createfunc_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def grantee_list_sempred(self, localctx, predIndex):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def target_list_sempred(self, localctx, predIndex):
            if predIndex == 167:
                return self.precpred(self._ctx, 1)
         

    def attrs_sempred(self, localctx, predIndex):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def alteroptRoleList_sempred(self, localctx, predIndex):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def alter_type_cmds_sempred(self, localctx, predIndex):
            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def array_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 162:
                return self.precpred(self._ctx, 1)
         

    def alterfunc_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def var_name_sempred(self, localctx, predIndex):
            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def set_clause_list_sempred(self, localctx, predIndex):
            if predIndex == 66:
                return self.precpred(self._ctx, 1)
         

    def for_locking_items_sempred(self, localctx, predIndex):
            if predIndex == 80:
                return self.precpred(self._ctx, 1)
         

    def explain_option_list_sempred(self, localctx, predIndex):
            if predIndex == 64:
                return self.precpred(self._ctx, 1)
         

    def typedtableElementList_sempred(self, localctx, predIndex):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def func_arg_list_sempred(self, localctx, predIndex):
            if predIndex == 160:
                return self.precpred(self._ctx, 1)
         

    def any_name_list_sempred(self, localctx, predIndex):
            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def columnList_sempred(self, localctx, predIndex):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def copy_generic_opt_arg_list_sempred(self, localctx, predIndex):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def indirection_sempred(self, localctx, predIndex):
            if predIndex == 164:
                return self.precpred(self._ctx, 1)
         

    def copy_generic_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def values_clause_sempred(self, localctx, predIndex):
            if predIndex == 81:
                return self.precpred(self._ctx, 1)
         

    def constraintAttributeSpec_sempred(self, localctx, predIndex):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def enum_val_list_sempred(self, localctx, predIndex):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def xml_attribute_list_sempred(self, localctx, predIndex):
            if predIndex == 157:
                return self.precpred(self._ctx, 1)
         

    def table_func_column_list_sempred(self, localctx, predIndex):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def seqOptList_sempred(self, localctx, predIndex):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def triggerEvents_sempred(self, localctx, predIndex):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def getdiag_list_sempred(self, localctx, predIndex):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def stmt_elsifs_sempred(self, localctx, predIndex):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def type_list_sempred(self, localctx, predIndex):
            if predIndex == 161:
                return self.precpred(self._ctx, 1)
         

    def foreigntableElementList_sempred(self, localctx, predIndex):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def stmtmulti_sempred(self, localctx, predIndex):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def createdb_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 61:
                return self.precpred(self._ctx, 2)
         

    def func_args_with_defaults_list_sempred(self, localctx, predIndex):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def privilege_list_sempred(self, localctx, predIndex):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def var_list_sempred(self, localctx, predIndex):
            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def index_params_sempred(self, localctx, predIndex):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def function_with_argtypes_list_sempred(self, localctx, predIndex):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def decl_cursor_arglist_sempred(self, localctx, predIndex):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def proc_stmts_sempred(self, localctx, predIndex):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def select_with_parens_sempred(self, localctx, predIndex):
            if predIndex == 72:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 73:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 74:
                return self.precpred(self._ctx, 1)
         

    def comp_options_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def cte_list_sempred(self, localctx, predIndex):
            if predIndex == 78:
                return self.precpred(self._ctx, 1)
         

    def tableElementList_sempred(self, localctx, predIndex):
            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def create_extension_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 31:
                return self.precpred(self._ctx, 2)
         

    def simple_select_sempred(self, localctx, predIndex):
            if predIndex == 76:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 77:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 75:
                return self.precpred(self._ctx, 3)
         

    def colQualList_sempred(self, localctx, predIndex):
            if predIndex == 24:
                return self.precpred(self._ctx, 2)
         

    def opclass_item_list_sempred(self, localctx, predIndex):
            if predIndex == 43:
                return self.precpred(self._ctx, 1)
         

    def a_expr_sempred(self, localctx, predIndex):
            if predIndex == 137:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 136:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 138:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 129:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 128:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 131:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 130:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 133:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 132:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 135:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 134:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 87:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 93:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 92:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 95:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 94:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 89:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 88:
                return self.precpred(self._ctx, 53)
         

            if predIndex == 91:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 90:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 102:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 103:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 100:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 101:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 98:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 99:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 96:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 97:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 110:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 111:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 108:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 109:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 106:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 107:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 104:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 105:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 119:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 118:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 117:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 116:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 115:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 114:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 113:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 112:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 127:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 126:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 125:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 124:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 123:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 122:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 121:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 120:
                return self.precpred(self._ctx, 23)
         

    def assign_var_sempred(self, localctx, predIndex):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def old_aggr_list_sempred(self, localctx, predIndex):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def exclusionConstraintList_sempred(self, localctx, predIndex):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def optRoleList_sempred(self, localctx, predIndex):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def ruleActionMulti_sempred(self, localctx, predIndex):
            if predIndex == 58:
                return self.precpred(self._ctx, 2)
         

    def tableFuncElementList_sempred(self, localctx, predIndex):
            if predIndex == 84:
                return self.precpred(self._ctx, 1)
         

    def b_expr_sempred(self, localctx, predIndex):
            if predIndex == 139:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 141:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 140:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 143:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 142:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 152:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 153:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 154:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 155:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 156:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 144:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 145:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 146:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 147:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 148:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 149:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 150:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 151:
                return self.precpred(self._ctx, 21)
         

    def ctext_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 166:
                return self.precpred(self._ctx, 1)
         

    def transaction_mode_list_sempred(self, localctx, predIndex):
            if predIndex == 59:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 60:
                return self.precpred(self._ctx, 1)
         

    def proc_conditions_sempred(self, localctx, predIndex):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def decl_stmts_sempred(self, localctx, predIndex):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def defACLOptionList_sempred(self, localctx, predIndex):
            if predIndex == 50:
                return self.precpred(self._ctx, 2)
         

    def opclass_drop_list_sempred(self, localctx, predIndex):
            if predIndex == 44:
                return self.precpred(self._ctx, 1)
         

    def insert_column_list_sempred(self, localctx, predIndex):
            if predIndex == 65:
                return self.precpred(self._ctx, 1)
         

    def optSchemaEltList_sempred(self, localctx, predIndex):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def numericOnly_list_sempred(self, localctx, predIndex):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def from_list_sempred(self, localctx, predIndex):
            if predIndex == 82:
                return self.precpred(self._ctx, 1)
         

    def tableLikeOptionList_sempred(self, localctx, predIndex):
            if predIndex == 25:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

    def set_target_list_sempred(self, localctx, predIndex):
            if predIndex == 67:
                return self.precpred(self._ctx, 1)
         

    def generic_option_list_sempred(self, localctx, predIndex):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def relation_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 83:
                return self.precpred(self._ctx, 1)
         

    def case_when_list_sempred(self, localctx, predIndex):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def cursor_options_sempred(self, localctx, predIndex):
            if predIndex == 68:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 69:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 70:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 71:
                return self.precpred(self._ctx, 1)
         

    def def_list_sempred(self, localctx, predIndex):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def alter_table_cmds_sempred(self, localctx, predIndex):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def alterdb_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 62:
                return self.precpred(self._ctx, 2)
         

    def dostmt_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def triggerFuncArgs_sempred(self, localctx, predIndex):
            if predIndex == 38:
                return self.precpred(self._ctx, 2)
         

    def reloption_list_sempred(self, localctx, predIndex):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def alter_extension_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 32:
                return self.precpred(self._ctx, 2)
         

    def window_definition_list_sempred(self, localctx, predIndex):
            if predIndex == 158:
                return self.precpred(self._ctx, 1)
         

    def alter_generic_option_list_sempred(self, localctx, predIndex):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def opt_array_bounds_sempred(self, localctx, predIndex):
            if predIndex == 85:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 86:
                return self.precpred(self._ctx, 2)
         

    def copy_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

    def proc_exceptions_sempred(self, localctx, predIndex):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_list_sempred(self, localctx, predIndex):
            if predIndex == 159:
                return self.precpred(self._ctx, 1)
         



