# Generated from java-escape by ANTLR 4.2.3
from __future__ import print_function
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .SqlListener import SqlListener
    from .SqlVisitor import SqlVisitor
else:
    from SqlListener import SqlListener
    from SqlVisitor import SqlVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u01b2\u20bf\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\t")
        buf.write(u"c\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l")
        buf.write(u"\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4")
        buf.write(u"u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}")
        buf.write(u"\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4")
        buf.write(u"\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085")
        buf.write(u"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088")
        buf.write(u"\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c")
        buf.write(u"\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f")
        buf.write(u"\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093")
        buf.write(u"\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096")
        buf.write(u"\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a")
        buf.write(u"\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c\4\u009d\t\u009d")
        buf.write(u"\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1")
        buf.write(u"\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4")
        buf.write(u"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8")
        buf.write(u"\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab")
        buf.write(u"\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae\4\u00af")
        buf.write(u"\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2")
        buf.write(u"\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6")
        buf.write(u"\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9")
        buf.write(u"\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc\t\u00bc\4\u00bd")
        buf.write(u"\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0")
        buf.write(u"\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4")
        buf.write(u"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7")
        buf.write(u"\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb")
        buf.write(u"\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce\t\u00ce")
        buf.write(u"\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2")
        buf.write(u"\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5")
        buf.write(u"\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9")
        buf.write(u"\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db\4\u00dc\t\u00dc")
        buf.write(u"\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0")
        buf.write(u"\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3")
        buf.write(u"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7")
        buf.write(u"\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea")
        buf.write(u"\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed\4\u00ee")
        buf.write(u"\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1")
        buf.write(u"\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5")
        buf.write(u"\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8")
        buf.write(u"\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb\t\u00fb\4\u00fc")
        buf.write(u"\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff")
        buf.write(u"\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103")
        buf.write(u"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106")
        buf.write(u"\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a")
        buf.write(u"\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d\t\u010d")
        buf.write(u"\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111")
        buf.write(u"\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114")
        buf.write(u"\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118")
        buf.write(u"\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a\4\u011b\t\u011b")
        buf.write(u"\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f")
        buf.write(u"\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122")
        buf.write(u"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126")
        buf.write(u"\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129")
        buf.write(u"\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c\4\u012d")
        buf.write(u"\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130")
        buf.write(u"\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134")
        buf.write(u"\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137")
        buf.write(u"\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a\t\u013a\4\u013b")
        buf.write(u"\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e")
        buf.write(u"\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142")
        buf.write(u"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145")
        buf.write(u"\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149")
        buf.write(u"\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c\t\u014c")
        buf.write(u"\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150")
        buf.write(u"\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153")
        buf.write(u"\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157")
        buf.write(u"\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159\4\u015a\t\u015a")
        buf.write(u"\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e")
        buf.write(u"\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161")
        buf.write(u"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165")
        buf.write(u"\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168")
        buf.write(u"\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b\t\u016b\4\u016c")
        buf.write(u"\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f\t\u016f")
        buf.write(u"\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173")
        buf.write(u"\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176")
        buf.write(u"\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179\t\u0179\4\u017a")
        buf.write(u"\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c\4\u017d\t\u017d")
        buf.write(u"\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181")
        buf.write(u"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184")
        buf.write(u"\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188")
        buf.write(u"\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a\4\u018b\t\u018b")
        buf.write(u"\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e\4\u018f")
        buf.write(u"\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192")
        buf.write(u"\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196")
        buf.write(u"\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198\4\u0199\t\u0199")
        buf.write(u"\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c\t\u019c\4\u019d")
        buf.write(u"\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0")
        buf.write(u"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4")
        buf.write(u"\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7")
        buf.write(u"\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa\t\u01aa\4\u01ab")
        buf.write(u"\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae\t\u01ae")
        buf.write(u"\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2")
        buf.write(u"\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5")
        buf.write(u"\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8\t\u01b8\4\u01b9")
        buf.write(u"\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb\4\u01bc\t\u01bc")
        buf.write(u"\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0")
        buf.write(u"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3")
        buf.write(u"\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7")
        buf.write(u"\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9\4\u01ca\t\u01ca")
        buf.write(u"\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd\4\u01ce")
        buf.write(u"\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1")
        buf.write(u"\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5")
        buf.write(u"\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7\4\u01d8\t\u01d8")
        buf.write(u"\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db\t\u01db\4\u01dc")
        buf.write(u"\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df")
        buf.write(u"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3")
        buf.write(u"\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6")
        buf.write(u"\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9\t\u01e9\4\u01ea")
        buf.write(u"\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed\t\u01ed")
        buf.write(u"\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1")
        buf.write(u"\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4")
        buf.write(u"\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7\t\u01f7\4\u01f8")
        buf.write(u"\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa\4\u01fb\t\u01fb")
        buf.write(u"\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff")
        buf.write(u"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202")
        buf.write(u"\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206")
        buf.write(u"\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208\4\u0209\t\u0209")
        buf.write(u"\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c\4\u020d")
        buf.write(u"\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210")
        buf.write(u"\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214")
        buf.write(u"\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216\4\u0217\t\u0217")
        buf.write(u"\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a\t\u021a\4\u021b")
        buf.write(u"\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e")
        buf.write(u"\4\u021f\t\u021f\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3")
        buf.write(u"\u0447\n\3\f\3\16\3\u044a\13\3\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\5\4\u04bb\n\4\3\5\3\5\3\5\3\5\5\5\u04c1\n\5\3")
        buf.write(u"\5\3\5\3\6\3\6\3\6\7\6\u04c8\n\6\f\6\16\6\u04cb\13\6")
        buf.write(u"\3\7\3\7\3\7\7\7\u04d0\n\7\f\7\16\7\u04d3\13\7\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\5\b\u04e9\n\b\3\t\3\t\3\t\3\t")
        buf.write(u"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04f8\n\t\3")
        buf.write(u"\n\3\n\3\n\3\n\5\n\u04fe\n\n\3\n\3\n\3\13\3\13\3\13\3")
        buf.write(u"\13\5\13\u0506\n\13\3\13\3\13\3\f\3\f\3\f\3\f\5\f\u050e")
        buf.write(u"\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16")
        buf.write(u"\u051a\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u052b\n\20\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0535\n\21\3")
        buf.write(u"\22\3\22\3\22\3\22\5\22\u053b\n\22\3\22\3\22\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3")
        buf.write(u"\25\3\25\3\25\3\25\3\25\5\25\u0550\n\25\3\26\3\26\3\26")
        buf.write(u"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u055e")
        buf.write(u"\n\26\3\27\3\27\5\27\u0562\n\27\3\30\3\30\3\30\7\30\u0567")
        buf.write(u"\n\30\f\30\16\30\u056a\13\30\3\31\3\31\3\31\3\31\3\31")
        buf.write(u"\3\31\5\31\u0572\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\5\32\u057c\n\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\5\33\u0586\n\33\3\34\3\34\3\34\3\34\3\34\3")
        buf.write(u"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write(u"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write(u"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write(u"\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u05b3\n\34\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\7\35\u05bb\n\35\f\35\16\35\u05be")
        buf.write(u"\13\35\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u05c6\n\36")
        buf.write(u"\f\36\16\36\u05c9\13\36\3\37\3\37\5\37\u05cd\n\37\3 ")
        buf.write(u"\3 \3 \3 \3 \3 \3 \5 \u05d6\n \3!\3!\3!\3!\5!\u05dc\n")
        buf.write(u"!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write(u"\3\"\3\"\3\"\5\"\u05ee\n\"\3#\3#\3#\5#\u05f3\n#\3$\3")
        buf.write(u"$\5$\u05f7\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write(u"\3%\5%\u0607\n%\3&\3&\3&\5&\u060c\n&\3\'\3\'\3\'\5\'")
        buf.write(u"\u0611\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(")
        buf.write(u"\5(\u0621\n(\3)\3)\3)\3)\3)\3*\3*\5*\u062a\n*\3+\3+\3")
        buf.write(u",\3,\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0638\n-\3.\3.\3.\3.")
        buf.write(u"\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(u".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.")
        buf.write(u"\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u066a\n.\3/\3/\3/\3/\3")
        buf.write(u"/\3/\7/\u0672\n/\f/\16/\u0675\13/\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write(u"\60\3\60\3\60\3\60\5\60\u071c\n\60\3\61\3\61\3\61\3\61")
        buf.write(u"\3\61\5\61\u0723\n\61\3\62\3\62\3\62\5\62\u0728\n\62")
        buf.write(u"\3\63\3\63\3\63\5\63\u072d\n\63\3\64\3\64\3\64\5\64\u0732")
        buf.write(u"\n\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\5\66\u073b\n")
        buf.write(u"\66\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0743\n\67\f\67")
        buf.write(u"\16\67\u0746\13\67\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write(u"8\38\38\38\58\u0757\n8\39\39\39\39\39\3:\3:\3:\3:\3:")
        buf.write(u"\3:\7:\u0764\n:\f:\16:\u0767\13:\3;\3;\3;\3;\3;\3;\3")
        buf.write(u";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;")
        buf.write(u"\3;\3;\5;\u0783\n;\3<\3<\3<\3<\5<\u0789\n<\3=\3=\3=\3")
        buf.write(u"=\3=\3=\3=\3=\3=\5=\u0794\n=\3=\3=\3=\3=\3=\3=\3=\5=")
        buf.write(u"\u079d\n=\3=\3=\5=\u07a1\n=\3>\3>\3?\3?\3?\5?\u07a8\n")
        buf.write(u"?\3@\3@\3@\3@\3@\5@\u07af\n@\3A\3A\3A\7A\u07b4\nA\fA")
        buf.write(u"\16A\u07b7\13A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write(u"B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B")
        buf.write(u"\3B\3B\5B\u07d9\nB\3C\3C\5C\u07dd\nC\3D\3D\3D\5D\u07e2")
        buf.write(u"\nD\3E\3E\3E\3E\3E\5E\u07e9\nE\3F\3F\5F\u07ed\nF\3G\3")
        buf.write(u"G\3G\3G\3G\3G\7G\u07f5\nG\fG\16G\u07f8\13G\3H\3H\3H\3")
        buf.write(u"I\3I\3I\3I\3I\3I\3I\3I\5I\u0805\nI\3J\3J\3J\3J\3J\3J")
        buf.write(u"\7J\u080d\nJ\fJ\16J\u0810\13J\3K\3K\3L\3L\3L\3L\3L\3")
        buf.write(u"L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L")
        buf.write(u"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write(u"L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0848\nL\3M\3M")
        buf.write(u"\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0856\nM\3N\3N\5N\u085a")
        buf.write(u"\nN\3O\3O\3O\3O\3O\5O\u0861\nO\3P\3P\3P\3P\3P\3P\7P\u0869")
        buf.write(u"\nP\fP\16P\u086c\13P\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0874\nQ\f")
        buf.write(u"Q\16Q\u0877\13Q\3R\3R\3R\5R\u087c\nR\3S\3S\5S\u0880\n")
        buf.write(u"S\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3V\3V\3V\7V\u088f\nV")
        buf.write(u"\fV\16V\u0892\13V\3W\3W\3W\3W\3W\3W\3W\3W\5W\u089c\n")
        buf.write(u"W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X")
        buf.write(u"\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u08b8\nX\3Y\3Y\3Y\3Y\3")
        buf.write(u"Y\3Y\3Y\5Y\u08c1\nY\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[")
        buf.write(u"\7[\u08ce\n[\f[\16[\u08d1\13[\3\\\3\\\3]\3]\3]\3]\3]")
        buf.write(u"\5]\u08da\n]\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write(u"^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^")
        buf.write(u"\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write(u"^\3^\3^\3^\3^\3^\5^\u0912\n^\3_\3_\3_\5_\u0917\n_\3`")
        buf.write(u"\3`\3`\3`\3`\5`\u091e\n`\3a\3a\3a\3a\3a\3a\7a\u0926\n")
        buf.write(u"a\fa\16a\u0929\13a\3b\3b\3c\3c\3c\3c\3c\3c\3c\5c\u0934")
        buf.write(u"\nc\3d\3d\3d\3d\3d\3d\7d\u093c\nd\fd\16d\u093f\13d\3")
        buf.write(u"e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u094c\ne\3f\3f\3f")
        buf.write(u"\3f\3f\3f\5f\u0954\nf\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u095f")
        buf.write(u"\ng\3h\3h\3h\3h\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\3j\3j\5")
        buf.write(u"j\u0971\nj\3k\3k\3k\3k\3k\3k\5k\u0979\nk\3l\3l\3l\3l")
        buf.write(u"\3l\3l\3l\5l\u0982\nl\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3")
        buf.write(u"m\3m\5m\u0990\nm\3n\3n\3n\5n\u0995\nn\3o\3o\3o\3o\3o")
        buf.write(u"\5o\u099c\no\3p\3p\3p\3p\3q\3q\3q\3q\3q\3q\3q\3q\3r\3")
        buf.write(u"r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\5s\u09b6\ns\3t\3t\3t")
        buf.write(u"\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u09ca")
        buf.write(u"\nu\3v\3v\5v\u09ce\nv\3w\3w\3w\3w\3w\7w\u09d5\nw\fw\16")
        buf.write(u"w\u09d8\13w\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write(u"x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u09f0\nx\3x\3x\3x\3x\5x")
        buf.write(u"\u09f6\nx\3x\5x\u09f9\nx\3y\3y\5y\u09fd\ny\3z\3z\3z\3")
        buf.write(u"z\5z\u0a03\nz\3{\3{\3{\3{\3{\3{\7{\u0a0b\n{\f{\16{\u0a0e")
        buf.write(u"\13{\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|")
        buf.write(u"\3|\3|\5|\u0a22\n|\3}\3}\5}\u0a26\n}\3~\3~\3~\3~\5~\u0a2c")
        buf.write(u"\n~\3\177\3\177\3\177\5\177\u0a31\n\177\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\5\u0080\u0a37\n\u0080\3\u0081\3\u0081")
        buf.write(u"\5\u0081\u0a3b\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write(u"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write(u"\3\u0082\3\u0082\3\u0082\5\u0082\u0a4b\n\u0082\3\u0083")
        buf.write(u"\3\u0083\5\u0083\u0a4f\n\u0083\3\u0084\3\u0084\3\u0084")
        buf.write(u"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085")
        buf.write(u"\5\u0085\u0a5b\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write(u"\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0a65\n\u0086")
        buf.write(u"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a6b\n\u0087")
        buf.write(u"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write(u"\3\u0087\3\u0087\5\u0087\u0a76\n\u0087\3\u0087\3\u0087")
        buf.write(u"\5\u0087\u0a7a\n\u0087\3\u0088\3\u0088\3\u0088\7\u0088")
        buf.write(u"\u0a7f\n\u0088\f\u0088\16\u0088\u0a82\13\u0088\3\u0089")
        buf.write(u"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a8a")
        buf.write(u"\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write(u"\3\u008b\3\u008b\3\u008b\7\u008b\u0a95\n\u008b\f\u008b")
        buf.write(u"\16\u008b\u0a98\13\u008b\3\u008c\3\u008c\3\u008c\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\5\u008d\u0b4f\n\u008d\3\u008e\3\u008e")
        buf.write(u"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f")
        buf.write(u"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write(u"\5\u008f\u0b61\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write(u"\3\u0090\7\u0090\u0b68\n\u0090\f\u0090\16\u0090\u0b6b")
        buf.write(u"\13\u0090\3\u0091\3\u0091\5\u0091\u0b6f\n\u0091\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\5\u0092\u0b81\n\u0092\3\u0093\3\u0093\3\u0093")
        buf.write(u"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write(u"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0b92")
        buf.write(u"\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write(u"\5\u0094\u0b9a\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write(u"\3\u0095\3\u0095\7\u0095\u0ba2\n\u0095\f\u0095\16\u0095")
        buf.write(u"\u0ba5\13\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write(u"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097")
        buf.write(u"\u0bb2\n\u0097\f\u0097\16\u0097\u0bb5\13\u0097\3\u0098")
        buf.write(u"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098")
        buf.write(u"\u0bbe\n\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a")
        buf.write(u"\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d")
        buf.write(u"\3\u009d\3\u009d\5\u009d\u0bd5\n\u009d\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\5\u009e\u0bdb\n\u009e\3\u009f\3\u009f")
        buf.write(u"\5\u009f\u0bdf\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write(u"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write(u"\3\u00a0\5\u00a0\u0bed\n\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write(u"\u0bff\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write(u"\3\u00a2\3\u00a2\5\u00a2\u0c16\n\u00a2\3\u00a3\3\u00a3")
        buf.write(u"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c1e\n\u00a3")
        buf.write(u"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4")
        buf.write(u"\u0c26\n\u00a4\f\u00a4\16\u00a4\u0c29\13\u00a4\3\u00a5")
        buf.write(u"\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write(u"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write(u"\3\u00a6\5\u00a6\u0c3b\n\u00a6\3\u00a7\3\u00a7\3\u00a7")
        buf.write(u"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\5\u00a8\u0c49\n\u00a8\3\u00a9\3\u00a9")
        buf.write(u"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write(u"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write(u"\3\u00a9\3\u00a9\5\u00a9\u0c5d\n\u00a9\3\u00aa\3\u00aa")
        buf.write(u"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write(u"\3\u00ab\3\u00ab\5\u00ab\u0c8d\n\u00ab\3\u00ac\3\u00ac")
        buf.write(u"\3\u00ac\3\u00ac\5\u00ac\u0c93\n\u00ac\3\u00ad\3\u00ad")
        buf.write(u"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0c9b\n\u00ad")
        buf.write(u"\f\u00ad\16\u00ad\u0c9e\13\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0ca7\n\u00ae")
        buf.write(u"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0cae")
        buf.write(u"\n\u00af\3\u00b0\3\u00b0\5\u00b0\u0cb2\n\u00b0\3\u00b1")
        buf.write(u"\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write(u"\5\u00b2\u0cbc\n\u00b2\3\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write(u"\u0cc1\n\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0cc6")
        buf.write(u"\n\u00b3\f\u00b3\16\u00b3\u0cc9\13\u00b3\3\u00b4\3\u00b4")
        buf.write(u"\3\u00b4\3\u00b4\5\u00b4\u0ccf\n\u00b4\3\u00b5\3\u00b5")
        buf.write(u"\3\u00b5\5\u00b5\u0cd4\n\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write(u"\7\u00b6\u0cd9\n\u00b6\f\u00b6\16\u00b6\u0cdc\13\u00b6")
        buf.write(u"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write(u"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0ce9\n\u00b7")
        buf.write(u"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write(u"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write(u"\3\u00b8\3\u00b8\5\u00b8\u0cfb\n\u00b8\3\u00b9\3\u00b9")
        buf.write(u"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write(u"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\5\u00bb\u0d62\n\u00bb\3\u00bc\3\u00bc\3\u00bc")
        buf.write(u"\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write(u"\7\u00bd\u0d6e\n\u00bd\f\u00bd\16\u00bd\u0d71\13\u00bd")
        buf.write(u"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0d78")
        buf.write(u"\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf")
        buf.write(u"\u0d7f\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\3\u00c0\5\u00c0\u0d88\n\u00c0\3\u00c1\3\u00c1")
        buf.write(u"\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write(u"\3\u00c2\7\u00c2\u0d94\n\u00c2\f\u00c2\16\u00c2\u0d97")
        buf.write(u"\13\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4")
        buf.write(u"\5\u00c4\u0d9f\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write(u"\3\u00c5\3\u00c5\7\u00c5\u0da7\n\u00c5\f\u00c5\16\u00c5")
        buf.write(u"\u0daa\13\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6")
        buf.write(u"\u0dc5\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write(u"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write(u"\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\7\u00c8\u0ddb\n\u00c8\f\u00c8\16\u00c8\u0dde")
        buf.write(u"\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\5\u00c9\u0dfc\n\u00c9\3\u00ca\3\u00ca\5\u00ca")
        buf.write(u"\u0e00\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0e05")
        buf.write(u"\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write(u"\3\u00cc\5\u00cc\u0e0e\n\u00cc\3\u00cd\3\u00cd\5\u00cd")
        buf.write(u"\u0e12\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write(u"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write(u"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write(u"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf")
        buf.write(u"\u0e2d\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write(u"\3\u00d0\7\u00d0\u0e35\n\u00d0\f\u00d0\16\u00d0\u0e38")
        buf.write(u"\13\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write(u"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1")
        buf.write(u"\u0e46\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2")
        buf.write(u"\u0e5a\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write(u"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write(u"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3")
        buf.write(u"\u0e6e\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write(u"\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write(u"\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write(u"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write(u"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write(u"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write(u"\u0e97\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0eb1")
        buf.write(u"\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write(u"\7\u00d8\u0eb9\n\u00d8\f\u00d8\16\u00d8\u0ebc\13\u00d8")
        buf.write(u"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0ec2\n\u00d9")
        buf.write(u"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write(u"\7\u00da\u0ecb\n\u00da\f\u00da\16\u00da\u0ece\13\u00da")
        buf.write(u"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0edb\n\u00dc")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\5\u00dd\u0f71\n\u00dd\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00de\5\u00de\u0f87\n\u00de\3\u00df")
        buf.write(u"\3\u00df\5\u00df\u0f8b\n\u00df\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0fbe\n\u00e0")
        buf.write(u"\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0fc3\n\u00e1\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0fd1\n\u00e2")
        buf.write(u"\3\u00e3\3\u00e3\5\u00e3\u0fd5\n\u00e3\3\u00e4\3\u00e4")
        buf.write(u"\3\u00e4\3\u00e4\5\u00e4\u0fdb\n\u00e4\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\5\u00e5\u101f\n\u00e5\3\u00e6\3\u00e6\3\u00e7")
        buf.write(u"\3\u00e7\5\u00e7\u1025\n\u00e7\3\u00e8\3\u00e8\3\u00e8")
        buf.write(u"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9")
        buf.write(u"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write(u"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write(u"\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1042\n\u00e9\3\u00ea")
        buf.write(u"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write(u"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write(u"\5\u00ea\u1053\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write(u"\3\u00eb\3\u00eb\7\u00eb\u105b\n\u00eb\f\u00eb\16\u00eb")
        buf.write(u"\u105e\13\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1069\n\u00ec")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\5\u00ed\u1097\n\u00ed\3\u00ee\3\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u109f\n\u00ee")
        buf.write(u"\f\u00ee\16\u00ee\u10a2\13\u00ee\3\u00ef\3\u00ef\3\u00ef")
        buf.write(u"\5\u00ef\u10a7\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write(u"\5\u00f0\u10ad\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write(u"\3\u00f1\3\u00f1\7\u00f1\u10b5\n\u00f1\f\u00f1\16\u00f1")
        buf.write(u"\u10b8\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3")
        buf.write(u"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f4\5\u00f4\u10d5\n\u00f4\3\u00f5\3\u00f5\3\u00f5")
        buf.write(u"\3\u00f5\5\u00f5\u10db\n\u00f5\3\u00f6\3\u00f6\3\u00f6")
        buf.write(u"\3\u00f6\5\u00f6\u10e1\n\u00f6\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\7\u00f8")
        buf.write(u"\u10ec\n\u00f8\f\u00f8\16\u00f8\u10ef\13\u00f8\3\u00f9")
        buf.write(u"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\3\u00f9\5\u00f9\u10fa\n\u00f9\3\u00fa\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1117\n\u00fa\3\u00fb")
        buf.write(u"\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write(u"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write(u"\3\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u112c\n\u00fd")
        buf.write(u"\3\u00fe\3\u00fe\5\u00fe\u1130\n\u00fe\3\u00ff\3\u00ff")
        buf.write(u"\5\u00ff\u1134\n\u00ff\3\u0100\3\u0100\3\u0100\5\u0100")
        buf.write(u"\u1139\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write(u"\3\u0101\7\u0101\u1141\n\u0101\f\u0101\16\u0101\u1144")
        buf.write(u"\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write(u"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write(u"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write(u"\5\u0102\u115a\n\u0102\3\u0103\3\u0103\3\u0103\5\u0103")
        buf.write(u"\u115f\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104")
        buf.write(u"\u1165\n\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u116a")
        buf.write(u"\n\u0105\3\u0106\3\u0106\3\u0106\5\u0106\u116f\n\u0106")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\5\u0107\u1190\n\u0107\3\u0108")
        buf.write(u"\3\u0108\3\u0108\5\u0108\u1195\n\u0108\3\u0109\3\u0109")
        buf.write(u"\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u119d\n\u0109")
        buf.write(u"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a")
        buf.write(u"\u11a5\n\u010a\f\u010a\16\u010a\u11a8\13\u010a\3\u010b")
        buf.write(u"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u11b0")
        buf.write(u"\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c")
        buf.write(u"\7\u010c\u11b8\n\u010c\f\u010c\16\u010c\u11bb\13\u010c")
        buf.write(u"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write(u"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write(u"\3\u010d\5\u010d\u11cc\n\u010d\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\5\u010e\u11d4\n\u010e\3\u010f")
        buf.write(u"\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write(u"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write(u"\3\u0111\5\u0111\u11e6\n\u0111\3\u0112\3\u0112\3\u0112")
        buf.write(u"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112")
        buf.write(u"\u11f1\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write(u"\7\u0113\u11f8\n\u0113\f\u0113\16\u0113\u11fb\13\u0113")
        buf.write(u"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write(u"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write(u"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write(u"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write(u"\3\u0114\3\u0114\3\u0114\5\u0114\u121c\n\u0114\3\u0115")
        buf.write(u"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1224")
        buf.write(u"\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116")
        buf.write(u"\u122b\n\u0116\3\u0117\3\u0117\3\u0117\5\u0117\u1230")
        buf.write(u"\n\u0117\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\3\u0119\7\u0119\u123b\n\u0119\f\u0119")
        buf.write(u"\16\u0119\u123e\13\u0119\3\u011a\3\u011a\3\u011a\3\u011a")
        buf.write(u"\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b")
        buf.write(u"\7\u011b\u124b\n\u011b\f\u011b\16\u011b\u124e\13\u011b")
        buf.write(u"\3\u011c\3\u011c\5\u011c\u1252\n\u011c\3\u011d\3\u011d")
        buf.write(u"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write(u"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1262")
        buf.write(u"\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u1272\n\u011e\3\u011f\3\u011f\3\u011f")
        buf.write(u"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write(u"\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1282\n\u011f")
        buf.write(u"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write(u"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write(u"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write(u"\3\u0120\5\u0120\u129a\n\u0120\3\u0121\3\u0121\3\u0121")
        buf.write(u"\3\u0121\3\u0121\5\u0121\u12a1\n\u0121\3\u0122\3\u0122")
        buf.write(u"\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\7\u0123")
        buf.write(u"\u12ab\n\u0123\f\u0123\16\u0123\u12ae\13\u0123\3\u0124")
        buf.write(u"\3\u0124\3\u0124\5\u0124\u12b3\n\u0124\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u12d7\n\u0125")
        buf.write(u"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u12de")
        buf.write(u"\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128")
        buf.write(u"\5\u0128\u12ed\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u12fe\n\u0129")
        buf.write(u"\3\u012a\3\u012a\3\u012b\3\u012b\5\u012b\u1304\n\u012b")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\5\u012c\u1458\n\u012c\3\u012d\3\u012d")
        buf.write(u"\5\u012d\u145c\n\u012d\3\u012e\3\u012e\3\u012e\5\u012e")
        buf.write(u"\u1461\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\5\u012f\u1517\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u15a7")
        buf.write(u"\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131")
        buf.write(u"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131")
        buf.write(u"\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write(u"\5\u0132\u15bd\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write(u"\3\u0133\3\u0133\7\u0133\u15c5\n\u0133\f\u0133\16\u0133")
        buf.write(u"\u15c8\13\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write(u"\5\u0134\u15cf\n\u0134\3\u0135\3\u0135\5\u0135\u15d3")
        buf.write(u"\n\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\5\u0137")
        buf.write(u"\u15da\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write(u"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write(u"\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u15ec\n\u0138")
        buf.write(u"\3\u0139\3\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3\u013a")
        buf.write(u"\5\u013a\u15f5\n\u013a\3\u013b\3\u013b\3\u013b\3\u013c")
        buf.write(u"\3\u013c\3\u013c\3\u013c\5\u013c\u15fe\n\u013c\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write(u"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d")
        buf.write(u"\u162a\n\u013d\3\u013e\3\u013e\3\u013e\5\u013e\u162f")
        buf.write(u"\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f")
        buf.write(u"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u163b\n\u013f")
        buf.write(u"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write(u"\3\u0140\7\u0140\u1645\n\u0140\f\u0140\16\u0140\u1648")
        buf.write(u"\13\u0140\3\u0141\3\u0141\5\u0141\u164c\n\u0141\3\u0142")
        buf.write(u"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142")
        buf.write(u"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142")
        buf.write(u"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142")
        buf.write(u"\5\u0142\u1664\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write(u"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write(u"\3\u0143\5\u0143\u1672\n\u0143\3\u0144\3\u0144\3\u0144")
        buf.write(u"\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u167b\n\u0145")
        buf.write(u"\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\7\u0146\u1682")
        buf.write(u"\n\u0146\f\u0146\16\u0146\u1685\13\u0146\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147")
        buf.write(u"\5\u0147\u16c8\n\u0147\3\u0148\3\u0148\5\u0148\u16cc")
        buf.write(u"\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u16d2")
        buf.write(u"\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write(u"\3\u0149\3\u0149\3\u0149\5\u0149\u16dd\n\u0149\3\u014a")
        buf.write(u"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b")
        buf.write(u"\7\u014b\u16e7\n\u014b\f\u014b\16\u014b\u16ea\13\u014b")
        buf.write(u"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d")
        buf.write(u"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d")
        buf.write(u"\u16f9\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e")
        buf.write(u"\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u014f\5\u014f\u1734\n\u014f\3\u0150")
        buf.write(u"\3\u0150\5\u0150\u1738\n\u0150\3\u0151\3\u0151\3\u0151")
        buf.write(u"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152")
        buf.write(u"\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152")
        buf.write(u"\u1789\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153")
        buf.write(u"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0154")
        buf.write(u"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154")
        buf.write(u"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u17a3")
        buf.write(u"\n\u0154\3\u0155\3\u0155\3\u0155\5\u0155\u17a8\n\u0155")
        buf.write(u"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write(u"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write(u"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write(u"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156")
        buf.write(u"\3\u0156\5\u0156\u17c7\n\u0156\3\u0157\3\u0157\3\u0157")
        buf.write(u"\3\u0157\3\u0157\3\u0157\7\u0157\u17cf\n\u0157\f\u0157")
        buf.write(u"\16\u0157\u17d2\13\u0157\3\u0158\3\u0158\3\u0158\3\u0158")
        buf.write(u"\5\u0158\u17d8\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write(u"\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u17e2\n\u0159")
        buf.write(u"\3\u015a\3\u015a\3\u015b\3\u015b\5\u015b\u17e8\n\u015b")
        buf.write(u"\3\u015c\3\u015c\5\u015c\u17ec\n\u015c\3\u015d\3\u015d")
        buf.write(u"\5\u015d\u17f0\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write(u"\3\u015e\5\u015e\u17f7\n\u015e\3\u015f\3\u015f\3\u015f")
        buf.write(u"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write(u"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write(u"\u1809\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160")
        buf.write(u"\3\u0160\3\u0160\5\u0160\u1812\n\u0160\3\u0161\3\u0161")
        buf.write(u"\3\u0161\3\u0161\3\u0161\3\u0161\7\u0161\u181a\n\u0161")
        buf.write(u"\f\u0161\16\u0161\u181d\13\u0161\3\u0162\3\u0162\3\u0162")
        buf.write(u"\3\u0163\3\u0163\3\u0163\5\u0163\u1825\n\u0163\3\u0164")
        buf.write(u"\3\u0164\3\u0164\5\u0164\u182a\n\u0164\3\u0165\3\u0165")
        buf.write(u"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166")
        buf.write(u"\3\u0166\3\u0166\5\u0166\u1837\n\u0166\3\u0167\3\u0167")
        buf.write(u"\3\u0167\3\u0167\5\u0167\u183d\n\u0167\3\u0168\3\u0168")
        buf.write(u"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write(u"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u184d")
        buf.write(u"\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write(u"\u1854\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write(u"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u1860")
        buf.write(u"\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write(u"\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write(u"\3\u016c\3\u016c\5\u016c\u1871\n\u016c\3\u016d\3\u016d")
        buf.write(u"\3\u016d\3\u016d\3\u016d\3\u016d\7\u016d\u1879\n\u016d")
        buf.write(u"\f\u016d\16\u016d\u187c\13\u016d\3\u016e\3\u016e\3\u016e")
        buf.write(u"\3\u016f\3\u016f\3\u016f\5\u016f\u1884\n\u016f\3\u0170")
        buf.write(u"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write(u"\3\u0171\3\u0171\3\u0171\5\u0171\u1891\n\u0171\3\u0172")
        buf.write(u"\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0173\3\u0173")
        buf.write(u"\3\u0173\3\u0173\3\u0173\5\u0173\u189e\n\u0173\3\u0174")
        buf.write(u"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write(u"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174")
        buf.write(u"\3\u0174\5\u0174\u18b0\n\u0174\3\u0175\3\u0175\5\u0175")
        buf.write(u"\u18b4\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176")
        buf.write(u"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177")
        buf.write(u"\3\u0177\3\u0177\3\u0177\7\u0177\u18c5\n\u0177\f\u0177")
        buf.write(u"\16\u0177\u18c8\13\u0177\3\u0178\3\u0178\5\u0178\u18cc")
        buf.write(u"\n\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a")
        buf.write(u"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c")
        buf.write(u"\u18e1\n\u017c\f\u017c\16\u017c\u18e4\13\u017c\3\u017d")
        buf.write(u"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d")
        buf.write(u"\3\u017e\3\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write(u"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\7\u017f\u18fa")
        buf.write(u"\n\u017f\f\u017f\16\u017f\u18fd\13\u017f\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\5\u0180\u1904\n\u0180\3\u0181")
        buf.write(u"\3\u0181\5\u0181\u1908\n\u0181\3\u0182\3\u0182\3\u0182")
        buf.write(u"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182")
        buf.write(u"\u1913\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write(u"\5\u0182\u191a\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write(u"\3\u0182\5\u0182\u1921\n\u0182\3\u0182\3\u0182\3\u0182")
        buf.write(u"\3\u0182\3\u0182\5\u0182\u1928\n\u0182\7\u0182\u192a")
        buf.write(u"\n\u0182\f\u0182\16\u0182\u192d\13\u0182\3\u0183\3\u0183")
        buf.write(u"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183")
        buf.write(u"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183")
        buf.write(u"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183")
        buf.write(u"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183")
        buf.write(u"\3\u0183\3\u0183\3\u0183\5\u0183\u1950\n\u0183\3\u0184")
        buf.write(u"\3\u0184\5\u0184\u1954\n\u0184\3\u0185\3\u0185\3\u0185")
        buf.write(u"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185")
        buf.write(u"\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1964\n\u0185")
        buf.write(u"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u196b")
        buf.write(u"\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185")
        buf.write(u"\u1972\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185")
        buf.write(u"\5\u0185\u1979\n\u0185\7\u0185\u197b\n\u0185\f\u0185")
        buf.write(u"\16\u0185\u197e\13\u0185\3\u0186\3\u0186\3\u0186\3\u0186")
        buf.write(u"\3\u0186\5\u0186\u1985\n\u0186\3\u0187\3\u0187\3\u0187")
        buf.write(u"\3\u0187\3\u0187\3\u0187\7\u0187\u198d\n\u0187\f\u0187")
        buf.write(u"\16\u0187\u1990\13\u0187\3\u0188\3\u0188\3\u0188\3\u0188")
        buf.write(u"\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\5\u0189\u199b")
        buf.write(u"\n\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u19a0\n\u018a")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write(u"\5\u018b\u19c5\n\u018b\3\u018c\3\u018c\5\u018c\u19c9")
        buf.write(u"\n\u018c\3\u018d\3\u018d\3\u018d\5\u018d\u19ce\n\u018d")
        buf.write(u"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e")
        buf.write(u"\3\u018e\3\u018e\5\u018e\u19d9\n\u018e\3\u018f\3\u018f")
        buf.write(u"\5\u018f\u19dd\n\u018f\3\u0190\3\u0190\3\u0190\3\u0190")
        buf.write(u"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\7\u0191")
        buf.write(u"\u19e9\n\u0191\f\u0191\16\u0191\u19ec\13\u0191\3\u0192")
        buf.write(u"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write(u"\3\u0192\5\u0192\u19f7\n\u0192\3\u0193\3\u0193\3\u0193")
        buf.write(u"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u1a01")
        buf.write(u"\n\u0193\3\u0194\3\u0194\5\u0194\u1a05\n\u0194\3\u0195")
        buf.write(u"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195")
        buf.write(u"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u1a14")
        buf.write(u"\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196")
        buf.write(u"\5\u0196\u1a1c\n\u0196\3\u0197\3\u0197\5\u0197\u1a20")
        buf.write(u"\n\u0197\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199")
        buf.write(u"\3\u0199\3\u0199\5\u0199\u1a2a\n\u0199\3\u019a\3\u019a")
        buf.write(u"\3\u019b\3\u019b\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d")
        buf.write(u"\3\u019d\5\u019d\u1a36\n\u019d\3\u019e\3\u019e\3\u019e")
        buf.write(u"\5\u019e\u1a3b\n\u019e\3\u019f\3\u019f\3\u019f\3\u019f")
        buf.write(u"\5\u019f\u1a41\n\u019f\3\u01a0\3\u01a0\5\u01a0\u1a45")
        buf.write(u"\n\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\7\u01a1")
        buf.write(u"\u1a4c\n\u01a1\f\u01a1\16\u01a1\u1a4f\13\u01a1\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\5\u01a2\u1a5b\n\u01a2\3\u01a3\3\u01a3")
        buf.write(u"\3\u01a3\5\u01a3\u1a60\n\u01a3\3\u01a4\3\u01a4\3\u01a4")
        buf.write(u"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\7\u01a4\u1a69\n\u01a4")
        buf.write(u"\f\u01a4\16\u01a4\u1a6c\13\u01a4\3\u01a5\3\u01a5\3\u01a5")
        buf.write(u"\5\u01a5\u1a71\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write(u"\3\u01a6\3\u01a6\7\u01a6\u1a79\n\u01a6\f\u01a6\16\u01a6")
        buf.write(u"\u1a7c\13\u01a6\3\u01a7\3\u01a7\5\u01a7\u1a80\n\u01a7")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1aa1\n\u01a8\3\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1aa7\n\u01a9\3\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1ac4")
        buf.write(u"\n\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write(u"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write(u"\3\u01aa\5\u01aa\u1ad4\n\u01aa\3\u01ab\3\u01ab\5\u01ab")
        buf.write(u"\u1ad8\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u1adc\n\u01ab")
        buf.write(u"\3\u01ab\3\u01ab\5\u01ab\u1ae0\n\u01ab\3\u01ab\5\u01ab")
        buf.write(u"\u1ae3\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac")
        buf.write(u"\3\u01ac\3\u01ac\5\u01ac\u1aec\n\u01ac\3\u01ad\3\u01ad")
        buf.write(u"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad")
        buf.write(u"\3\u01ad\3\u01ad\5\u01ad\u1af9\n\u01ad\3\u01ae\3\u01ae")
        buf.write(u"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\7\u01ae\u1b01\n\u01ae")
        buf.write(u"\f\u01ae\16\u01ae\u1b04\13\u01ae\3\u01af\3\u01af\3\u01af")
        buf.write(u"\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u1b0e")
        buf.write(u"\n\u01af\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b1\5\u01b1")
        buf.write(u"\u1b15\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2")
        buf.write(u"\3\u01b2\3\u01b2\5\u01b2\u1b1e\n\u01b2\3\u01b3\3\u01b3")
        buf.write(u"\5\u01b3\u1b22\n\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4")
        buf.write(u"\3\u01b4\3\u01b4\7\u01b4\u1b2a\n\u01b4\f\u01b4\16\u01b4")
        buf.write(u"\u1b2d\13\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b6")
        buf.write(u"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write(u"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write(u"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write(u"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b4e")
        buf.write(u"\n\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7")
        buf.write(u"\3\u01b7\3\u01b7\3\u01b7\7\u01b7\u1b59\n\u01b7\f\u01b7")
        buf.write(u"\16\u01b7\u1b5c\13\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write(u"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write(u"\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b6c\n\u01b8\3\u01b9")
        buf.write(u"\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b72\n\u01b9\3\u01ba")
        buf.write(u"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba")
        buf.write(u"\u1b7b\n\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb")
        buf.write(u"\5\u01bb\u1b82\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write(u"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write(u"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1b94")
        buf.write(u"\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd")
        buf.write(u"\u1b9b\n\u01bd\3\u01be\3\u01be\5\u01be\u1b9f\n\u01be")
        buf.write(u"\3\u01bf\3\u01bf\5\u01bf\u1ba3\n\u01bf\3\u01c0\3\u01c0")
        buf.write(u"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c1")
        buf.write(u"\3\u01c2\3\u01c2\5\u01c2\u1bb0\n\u01c2\3\u01c3\3\u01c3")
        buf.write(u"\5\u01c3\u1bb4\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4")
        buf.write(u"\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6")
        buf.write(u"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6")
        buf.write(u"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1bcc\n\u01c6")
        buf.write(u"\3\u01c7\3\u01c7\5\u01c7\u1bd0\n\u01c7\3\u01c8\3\u01c8")
        buf.write(u"\3\u01c8\3\u01c8\5\u01c8\u1bd6\n\u01c8\3\u01c9\3\u01c9")
        buf.write(u"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9")
        buf.write(u"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9")
        buf.write(u"\5\u01c9\u1be8\n\u01c9\3\u01ca\3\u01ca\3\u01cb\3\u01cb")
        buf.write(u"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u1bf2\n\u01cb")
        buf.write(u"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write(u"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write(u"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write(u"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write(u"\5\u01cc\u1c10\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd")
        buf.write(u"\3\u01cd\3\u01cd\5\u01cd\u1c18\n\u01cd\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\5\u01ce\u1c2b\n\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce")
        buf.write(u"\3\u01ce\7\u01ce\u1d11\n\u01ce\f\u01ce\16\u01ce\u1d14")
        buf.write(u"\13\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1d1f\n\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write(u"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\7\u01cf\u1d66")
        buf.write(u"\n\u01cf\f\u01cf\16\u01cf\u1d69\13\u01cf\3\u01d0\3\u01d0")
        buf.write(u"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write(u"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write(u"\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1d7e\n\u01d0\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1e81\n\u01d1")
        buf.write(u"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1e88")
        buf.write(u"\n\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write(u"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u1e95")
        buf.write(u"\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d5")
        buf.write(u"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\7\u01d5\u1ea2")
        buf.write(u"\n\u01d5\f\u01d5\16\u01d5\u1ea5\13\u01d5\3\u01d6\3\u01d6")
        buf.write(u"\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1eac\n\u01d6\3\u01d7")
        buf.write(u"\3\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8")
        buf.write(u"\u1eb5\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9")
        buf.write(u"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9")
        buf.write(u"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9")
        buf.write(u"\u1ec9\n\u01d9\3\u01da\3\u01da\3\u01da\5\u01da\u1ece")
        buf.write(u"\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db")
        buf.write(u"\7\u01db\u1ed6\n\u01db\f\u01db\16\u01db\u1ed9\13\u01db")
        buf.write(u"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01dd")
        buf.write(u"\3\u01dd\3\u01dd\5\u01dd\u1ee4\n\u01dd\3\u01de\3\u01de")
        buf.write(u"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01df\3\u01df")
        buf.write(u"\5\u01df\u1eef\n\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0")
        buf.write(u"\5\u01e0\u1ef5\n\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1")
        buf.write(u"\3\u01e1\5\u01e1\u1efc\n\u01e1\3\u01e2\3\u01e2\3\u01e2")
        buf.write(u"\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1f04\n\u01e2\3\u01e3")
        buf.write(u"\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3")
        buf.write(u"\3\u01e3\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u1f12\n\u01e3")
        buf.write(u"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4")
        buf.write(u"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4")
        buf.write(u"\5\u01e4\u1f22\n\u01e4\3\u01e5\3\u01e5\3\u01e6\3\u01e6")
        buf.write(u"\5\u01e6\u1f28\n\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8")
        buf.write(u"\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1f32\n\u01e8")
        buf.write(u"\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\5\u01e9")
        buf.write(u"\u1f3a\n\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea")
        buf.write(u"\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea")
        buf.write(u"\5\u01ea\u1f48\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb")
        buf.write(u"\3\u01eb\3\u01eb\7\u01eb\u1f50\n\u01eb\f\u01eb\16\u01eb")
        buf.write(u"\u1f53\13\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec")
        buf.write(u"\3\u01ec\7\u01ec\u1f5b\n\u01ec\f\u01ec\16\u01ec\u1f5e")
        buf.write(u"\13\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed")
        buf.write(u"\u1f65\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee")
        buf.write(u"\3\u01ee\7\u01ee\u1f6d\n\u01ee\f\u01ee\16\u01ee\u1f70")
        buf.write(u"\13\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef")
        buf.write(u"\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1f7c\n\u01ef")
        buf.write(u"\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\7\u01f0")
        buf.write(u"\u1f84\n\u01f0\f\u01f0\16\u01f0\u1f87\13\u01f0\3\u01f1")
        buf.write(u"\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u1f8e\n\u01f1")
        buf.write(u"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2")
        buf.write(u"\3\u01f2\5\u01f2\u1f98\n\u01f2\3\u01f3\3\u01f3\3\u01f3")
        buf.write(u"\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\5\u01f3")
        buf.write(u"\u1fa3\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f5\3\u01f5")
        buf.write(u"\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1fad\n\u01f5\3\u01f6")
        buf.write(u"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6")
        buf.write(u"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6")
        buf.write(u"\3\u01f6\5\u01f6\u1fbf\n\u01f6\3\u01f7\3\u01f7\3\u01f7")
        buf.write(u"\3\u01f8\3\u01f8\3\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9")
        buf.write(u"\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1fce\n\u01f9\3\u01fa")
        buf.write(u"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1fd5\n\u01fa")
        buf.write(u"\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fc")
        buf.write(u"\3\u01fc\3\u01fc\3\u01fc\3\u01fc\7\u01fc\u1fe2\n\u01fc")
        buf.write(u"\f\u01fc\16\u01fc\u1fe5\13\u01fc\3\u01fd\3\u01fd\3\u01fd")
        buf.write(u"\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1fef")
        buf.write(u"\n\u01fe\3\u01ff\3\u01ff\5\u01ff\u1ff3\n\u01ff\3\u0200")
        buf.write(u"\3\u0200\3\u0200\3\u0200\5\u0200\u1ff9\n\u0200\3\u0201")
        buf.write(u"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201")
        buf.write(u"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\5\u0201")
        buf.write(u"\u2009\n\u0201\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202")
        buf.write(u"\7\u0202\u2010\n\u0202\f\u0202\16\u0202\u2013\13\u0202")
        buf.write(u"\3\u0203\3\u0203\3\u0203\7\u0203\u2018\n\u0203\f\u0203")
        buf.write(u"\16\u0203\u201b\13\u0203\3\u0204\3\u0204\5\u0204\u201f")
        buf.write(u"\n\u0204\3\u0205\3\u0205\5\u0205\u2023\n\u0205\3\u0206")
        buf.write(u"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\7\u0206\u202b")
        buf.write(u"\n\u0206\f\u0206\16\u0206\u202e\13\u0206\3\u0207\3\u0207")
        buf.write(u"\3\u0207\3\u0207\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208")
        buf.write(u"\3\u0208\7\u0208\u203a\n\u0208\f\u0208\16\u0208\u203d")
        buf.write(u"\13\u0208\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209")
        buf.write(u"\3\u0209\3\u0209\3\u0209\5\u0209\u2048\n\u0209\3\u020a")
        buf.write(u"\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\7\u020a\u2050")
        buf.write(u"\n\u020a\f\u020a\16\u020a\u2053\13\u020a\3\u020b\3\u020b")
        buf.write(u"\3\u020b\3\u020b\5\u020b\u2059\n\u020b\3\u020c\3\u020c")
        buf.write(u"\3\u020c\3\u020c\3\u020c\3\u020c\7\u020c\u2061\n\u020c")
        buf.write(u"\f\u020c\16\u020c\u2064\13\u020c\3\u020d\3\u020d\3\u020e")
        buf.write(u"\3\u020e\3\u020f\3\u020f\3\u0210\3\u0210\3\u0211\3\u0211")
        buf.write(u"\3\u0212\3\u0212\3\u0213\3\u0213\3\u0213\3\u0213\5\u0213")
        buf.write(u"\u2076\n\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write(u"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write(u"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write(u"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write(u"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u2097")
        buf.write(u"\n\u0214\3\u0215\3\u0215\3\u0216\3\u0216\3\u0217\3\u0217")
        buf.write(u"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u20a4")
        buf.write(u"\n\u0218\3\u0219\3\u0219\3\u0219\5\u0219\u20a9\n\u0219")
        buf.write(u"\3\u021a\3\u021a\3\u021a\5\u021a\u20ae\n\u021a\3\u021b")
        buf.write(u"\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b\u20b5\n\u021b")
        buf.write(u"\3\u021c\3\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021f")
        buf.write(u"\3\u021f\3\u021f\2T\4\n\f.8:\\lr\u0080\u008c\u0092\u009e")
        buf.write(u"\u00a0\u00aa\u00b4\u00c0\u00c6\u00ec\u00f4\u010e\u0114")
        buf.write(u"\u011e\u0128\u012c\u0146\u0158\u0164\u016a\u0178\u0182")
        buf.write(u"\u0188\u018e\u019e\u01ae\u01b2\u01d4\u01da\u01e0\u01ee")
        buf.write(u"\u0200\u0212\u0216\u0224\u0230\u0234\u0244\u0264\u027e")
        buf.write(u"\u028a\u0294\u02ac\u02c0\u02d8\u02ec\u02f6\u02fc\u0302")
        buf.write(u"\u0308\u030c\u0320\u0340\u0346\u034a\u035a\u0366\u036c")
        buf.write(u"\u039a\u039c\u03a8\u03b4\u03d4\u03d6\u03da\u03de\u03f6")
        buf.write(u"\u0402\u0404\u040a\u040e\u0412\u0416\u0220\2\4\6\b\n")
        buf.write(u"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:")
        buf.write(u"<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write(u"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write(u"\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write(u"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write(u"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write(u"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write(u"\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write(u"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write(u"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write(u"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write(u"\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write(u"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write(u"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write(u"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write(u"\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write(u"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write(u"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4")
        buf.write(u"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6")
        buf.write(u"\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8")
        buf.write(u"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da")
        buf.write(u"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec")
        buf.write(u"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe")
        buf.write(u"\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210")
        buf.write(u"\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222")
        buf.write(u"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234")
        buf.write(u"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246")
        buf.write(u"\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258")
        buf.write(u"\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a")
        buf.write(u"\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c")
        buf.write(u"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e")
        buf.write(u"\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0")
        buf.write(u"\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2")
        buf.write(u"\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4")
        buf.write(u"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6")
        buf.write(u"\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8")
        buf.write(u"\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa")
        buf.write(u"\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c")
        buf.write(u"\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e")
        buf.write(u"\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330")
        buf.write(u"\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342")
        buf.write(u"\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354")
        buf.write(u"\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366")
        buf.write(u"\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378")
        buf.write(u"\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a")
        buf.write(u"\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c")
        buf.write(u"\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae")
        buf.write(u"\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0")
        buf.write(u"\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2")
        buf.write(u"\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4")
        buf.write(u"\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6")
        buf.write(u"\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408")
        buf.write(u"\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a")
        buf.write(u"\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c")
        buf.write(u"\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\2\25")
        buf.write(u"\4\2\31\31\177\177\4\2qq\u00ae\u00ae\4\2\u009d\u009d")
        buf.write(u"\u0167\u0167\b\2\35\35MMTToo\u00b5\u00b5\u0156\u0156")
        buf.write(u"\4\2\u0136\u0136\u0152\u0152\4\2\u009d\u009d\u00b1\u00b1")
        buf.write(u"\6\2\u00a0\u00a0\u0141\u0141\u015e\u015e\u0171\u0171")
        buf.write(u"\4\2\u00b4\u00b4\u015d\u015d\6\2ss\u00be\u00be\u013f")
        buf.write(u"\u013f\u017b\u017b\3\2!\"\3\2\u0136\u0137\4\2\u0095\u0095")
        buf.write(u"\u00ec\u00ec\4\2UU||\5\2\35\35$$\u014e\u014e\7\2\4\5")
        buf.write(u"\t\t\13\f\17\20\22\23P\2\25\34\36 ()+,.\60\67;>?BBDG")
        buf.write(u"LOQRTY\\]ejmmooquwy|\u0080\u0082\u0084\u0086\u0087\u0089")
        buf.write(u"\u008c\u008e\u0090\u0093\u0093\u0095\u0095\u0097\u0097")
        buf.write(u"\u0099\u0099\u009b\u009b\u009f\u00a1\u00a3\u00a3\u00a6")
        buf.write(u"\u00a6\u00a8\u00ac\u00ae\u00b0\u00b2\u00b7\u00b9\u00b9")
        buf.write(u"\u00bc\u00bf\u00c5\u00c5\u00c8\u00c8\u00ca\u00d0\u00d2")
        buf.write(u"\u00d2\u00d5\u00d5\u00d8\u00da\u00dd\u00e8\u00ec\u00ed")
        buf.write(u"\u00f0\u00f1\u00f3\u00f3\u00f6\u00f6\u00f8\u00fa\u00fc")
        buf.write(u"\u00fc\u00ff\u0101\u0109\u010f\u0111\u0111\u0113\u0113")
        buf.write(u"\u0115\u0117\u0119\u011f\u0121\u0124\u0126\u012f\u0131")
        buf.write(u"\u0132\u0134\u0135\u0137\u013e\u0140\u0144\u0146\u0146")
        buf.write(u"\u0148\u0149\u014b\u014b\u014d\u014d\u014f\u0158\u015b")
        buf.write(u"\u015c\u015e\u0163\u0169\u0169\u016b\u016b\u016e\u0174")
        buf.write(u"\u0177\u017b\u017e\u0182\u0186\u0186\u0188\u018a\u018d")
        buf.write(u"\u018d\u0190\u0194\u019e\u01a0\"\2\61\62\64\65@AHHkl")
        buf.write(u"\u008d\u008d\u0091\u0091\u0096\u0096\u00a4\u00a4\u00bb")
        buf.write(u"\u00bb\u00c0\u00c1\u00c3\u00c3\u00d3\u00d3\u00e9\u00e9")
        buf.write(u"\u00eb\u00eb\u00ee\u00ee\u00f5\u00f5\u00f7\u00f7\u0104")
        buf.write(u"\u0104\u0108\u0108\u0112\u0112\u0114\u0114\u0120\u0120")
        buf.write(u"\u0136\u0136\u0147\u0147\u014c\u014c\u0159\u0159\u0165")
        buf.write(u"\u0166\u016a\u016a\u016c\u016c\u0183\u0184\u0195\u019d")
        buf.write(u"\26\2--\63\63JJPP[[aa\u009c\u009c\u009e\u009e\u00ad\u00ad")
        buf.write(u"\u00ba\u00ba\u00c6\u00c7\u00c9\u00c9\u00d4\u00d4\u00d6")
        buf.write(u"\u00d6\u00ea\u00ea\u00f2\u00f2\u0105\u0107\u0133\u0133")
        buf.write(u"\u014a\u014a\u0187\u0187:\2\35\35!\'**\66\66<=CCIIKK")
        buf.write(u"SSZZ^`bdnnppvvz{\u0081\u0081\u0085\u0085\u0088\u0088")
        buf.write(u"\u0092\u0092\u0094\u0094\u0098\u0098\u009a\u009a\u009d")
        buf.write(u"\u009d\u00a2\u00a2\u00a5\u00a5\u00a7\u00a7\u00b1\u00b1")
        buf.write(u"\u00b8\u00b8\u00c2\u00c2\u00c4\u00c4\u00d1\u00d1\u00d7")
        buf.write(u"\u00d7\u00db\u00dc\u00ef\u00ef\u00f4\u00f4\u00fb\u00fb")
        buf.write(u"\u00fd\u00fe\u0102\u0103\u0110\u0110\u0118\u0118\u0125")
        buf.write(u"\u0125\u0130\u0130\u013f\u013f\u0145\u0145\u014e\u014e")
        buf.write(u"\u015a\u015a\u015d\u015d\u0164\u0164\u0167\u0168\u016d")
        buf.write(u"\u016d\u0175\u0176\u017c\u017d\u0185\u0185\u018b\u018c")
        buf.write(u"\u018e\u018f\u23be\2\u043e\3\2\2\2\4\u0440\3\2\2\2\6")
        buf.write(u"\u04ba\3\2\2\2\b\u04bc\3\2\2\2\n\u04c4\3\2\2\2\f\u04cc")
        buf.write(u"\3\2\2\2\16\u04e8\3\2\2\2\20\u04f7\3\2\2\2\22\u04f9\3")
        buf.write(u"\2\2\2\24\u0501\3\2\2\2\26\u050d\3\2\2\2\30\u050f\3\2")
        buf.write(u"\2\2\32\u0515\3\2\2\2\34\u051d\3\2\2\2\36\u052a\3\2\2")
        buf.write(u"\2 \u0534\3\2\2\2\"\u0536\3\2\2\2$\u053e\3\2\2\2&\u0545")
        buf.write(u"\3\2\2\2(\u054f\3\2\2\2*\u055d\3\2\2\2,\u0561\3\2\2\2")
        buf.write(u".\u0563\3\2\2\2\60\u0571\3\2\2\2\62\u057b\3\2\2\2\64")
        buf.write(u"\u0585\3\2\2\2\66\u05b2\3\2\2\28\u05b4\3\2\2\2:\u05bf")
        buf.write(u"\3\2\2\2<\u05cc\3\2\2\2>\u05d5\3\2\2\2@\u05db\3\2\2\2")
        buf.write(u"B\u05ed\3\2\2\2D\u05f2\3\2\2\2F\u05f6\3\2\2\2H\u0606")
        buf.write(u"\3\2\2\2J\u060b\3\2\2\2L\u0610\3\2\2\2N\u0620\3\2\2\2")
        buf.write(u"P\u0622\3\2\2\2R\u0629\3\2\2\2T\u062b\3\2\2\2V\u062d")
        buf.write(u"\3\2\2\2X\u0637\3\2\2\2Z\u0669\3\2\2\2\\\u066b\3\2\2")
        buf.write(u"\2^\u071b\3\2\2\2`\u0722\3\2\2\2b\u0727\3\2\2\2d\u072c")
        buf.write(u"\3\2\2\2f\u0731\3\2\2\2h\u0733\3\2\2\2j\u073a\3\2\2\2")
        buf.write(u"l\u073c\3\2\2\2n\u0756\3\2\2\2p\u0758\3\2\2\2r\u075d")
        buf.write(u"\3\2\2\2t\u0782\3\2\2\2v\u0788\3\2\2\2x\u07a0\3\2\2\2")
        buf.write(u"z\u07a2\3\2\2\2|\u07a7\3\2\2\2~\u07ae\3\2\2\2\u0080\u07b0")
        buf.write(u"\3\2\2\2\u0082\u07d8\3\2\2\2\u0084\u07dc\3\2\2\2\u0086")
        buf.write(u"\u07e1\3\2\2\2\u0088\u07e8\3\2\2\2\u008a\u07ec\3\2\2")
        buf.write(u"\2\u008c\u07ee\3\2\2\2\u008e\u07f9\3\2\2\2\u0090\u0804")
        buf.write(u"\3\2\2\2\u0092\u0806\3\2\2\2\u0094\u0811\3\2\2\2\u0096")
        buf.write(u"\u0847\3\2\2\2\u0098\u0855\3\2\2\2\u009a\u0859\3\2\2")
        buf.write(u"\2\u009c\u0860\3\2\2\2\u009e\u0862\3\2\2\2\u00a0\u086d")
        buf.write(u"\3\2\2\2\u00a2\u087b\3\2\2\2\u00a4\u087f\3\2\2\2\u00a6")
        buf.write(u"\u0881\3\2\2\2\u00a8\u0886\3\2\2\2\u00aa\u088b\3\2\2")
        buf.write(u"\2\u00ac\u089b\3\2\2\2\u00ae\u08b7\3\2\2\2\u00b0\u08c0")
        buf.write(u"\3\2\2\2\u00b2\u08c2\3\2\2\2\u00b4\u08c6\3\2\2\2\u00b6")
        buf.write(u"\u08d2\3\2\2\2\u00b8\u08d9\3\2\2\2\u00ba\u0911\3\2\2")
        buf.write(u"\2\u00bc\u0916\3\2\2\2\u00be\u091d\3\2\2\2\u00c0\u091f")
        buf.write(u"\3\2\2\2\u00c2\u092a\3\2\2\2\u00c4\u0933\3\2\2\2\u00c6")
        buf.write(u"\u0935\3\2\2\2\u00c8\u094b\3\2\2\2\u00ca\u0953\3\2\2")
        buf.write(u"\2\u00cc\u095e\3\2\2\2\u00ce\u0960\3\2\2\2\u00d0\u0964")
        buf.write(u"\3\2\2\2\u00d2\u0970\3\2\2\2\u00d4\u0978\3\2\2\2\u00d6")
        buf.write(u"\u0981\3\2\2\2\u00d8\u098f\3\2\2\2\u00da\u0994\3\2\2")
        buf.write(u"\2\u00dc\u099b\3\2\2\2\u00de\u099d\3\2\2\2\u00e0\u09a1")
        buf.write(u"\3\2\2\2\u00e2\u09a9\3\2\2\2\u00e4\u09b5\3\2\2\2\u00e6")
        buf.write(u"\u09b7\3\2\2\2\u00e8\u09c9\3\2\2\2\u00ea\u09cd\3\2\2")
        buf.write(u"\2\u00ec\u09cf\3\2\2\2\u00ee\u09f8\3\2\2\2\u00f0\u09fc")
        buf.write(u"\3\2\2\2\u00f2\u0a02\3\2\2\2\u00f4\u0a04\3\2\2\2\u00f6")
        buf.write(u"\u0a21\3\2\2\2\u00f8\u0a25\3\2\2\2\u00fa\u0a2b\3\2\2")
        buf.write(u"\2\u00fc\u0a30\3\2\2\2\u00fe\u0a36\3\2\2\2\u0100\u0a3a")
        buf.write(u"\3\2\2\2\u0102\u0a4a\3\2\2\2\u0104\u0a4e\3\2\2\2\u0106")
        buf.write(u"\u0a50\3\2\2\2\u0108\u0a5a\3\2\2\2\u010a\u0a64\3\2\2")
        buf.write(u"\2\u010c\u0a79\3\2\2\2\u010e\u0a7b\3\2\2\2\u0110\u0a89")
        buf.write(u"\3\2\2\2\u0112\u0a8b\3\2\2\2\u0114\u0a91\3\2\2\2\u0116")
        buf.write(u"\u0a99\3\2\2\2\u0118\u0b4e\3\2\2\2\u011a\u0b50\3\2\2")
        buf.write(u"\2\u011c\u0b60\3\2\2\2\u011e\u0b62\3\2\2\2\u0120\u0b6e")
        buf.write(u"\3\2\2\2\u0122\u0b80\3\2\2\2\u0124\u0b91\3\2\2\2\u0126")
        buf.write(u"\u0b99\3\2\2\2\u0128\u0b9b\3\2\2\2\u012a\u0ba6\3\2\2")
        buf.write(u"\2\u012c\u0bab\3\2\2\2\u012e\u0bbd\3\2\2\2\u0130\u0bbf")
        buf.write(u"\3\2\2\2\u0132\u0bc2\3\2\2\2\u0134\u0bc4\3\2\2\2\u0136")
        buf.write(u"\u0bc6\3\2\2\2\u0138\u0bd4\3\2\2\2\u013a\u0bda\3\2\2")
        buf.write(u"\2\u013c\u0bde\3\2\2\2\u013e\u0bec\3\2\2\2\u0140\u0bfe")
        buf.write(u"\3\2\2\2\u0142\u0c15\3\2\2\2\u0144\u0c1d\3\2\2\2\u0146")
        buf.write(u"\u0c1f\3\2\2\2\u0148\u0c2a\3\2\2\2\u014a\u0c3a\3\2\2")
        buf.write(u"\2\u014c\u0c3c\3\2\2\2\u014e\u0c48\3\2\2\2\u0150\u0c5c")
        buf.write(u"\3\2\2\2\u0152\u0c5e\3\2\2\2\u0154\u0c8c\3\2\2\2\u0156")
        buf.write(u"\u0c92\3\2\2\2\u0158\u0c94\3\2\2\2\u015a\u0ca6\3\2\2")
        buf.write(u"\2\u015c\u0cad\3\2\2\2\u015e\u0cb1\3\2\2\2\u0160\u0cb3")
        buf.write(u"\3\2\2\2\u0162\u0cbb\3\2\2\2\u0164\u0cc0\3\2\2\2\u0166")
        buf.write(u"\u0cce\3\2\2\2\u0168\u0cd3\3\2\2\2\u016a\u0cd5\3\2\2")
        buf.write(u"\2\u016c\u0ce8\3\2\2\2\u016e\u0cfa\3\2\2\2\u0170\u0cfc")
        buf.write(u"\3\2\2\2\u0172\u0d05\3\2\2\2\u0174\u0d61\3\2\2\2\u0176")
        buf.write(u"\u0d63\3\2\2\2\u0178\u0d67\3\2\2\2\u017a\u0d77\3\2\2")
        buf.write(u"\2\u017c\u0d7e\3\2\2\2\u017e\u0d87\3\2\2\2\u0180\u0d89")
        buf.write(u"\3\2\2\2\u0182\u0d8d\3\2\2\2\u0184\u0d98\3\2\2\2\u0186")
        buf.write(u"\u0d9e\3\2\2\2\u0188\u0da0\3\2\2\2\u018a\u0dc4\3\2\2")
        buf.write(u"\2\u018c\u0dc6\3\2\2\2\u018e\u0dd4\3\2\2\2\u0190\u0dfb")
        buf.write(u"\3\2\2\2\u0192\u0dff\3\2\2\2\u0194\u0e04\3\2\2\2\u0196")
        buf.write(u"\u0e0d\3\2\2\2\u0198\u0e11\3\2\2\2\u019a\u0e13\3\2\2")
        buf.write(u"\2\u019c\u0e2c\3\2\2\2\u019e\u0e2e\3\2\2\2\u01a0\u0e45")
        buf.write(u"\3\2\2\2\u01a2\u0e59\3\2\2\2\u01a4\u0e6d\3\2\2\2\u01a6")
        buf.write(u"\u0e6f\3\2\2\2\u01a8\u0e75\3\2\2\2\u01aa\u0e96\3\2\2")
        buf.write(u"\2\u01ac\u0eb0\3\2\2\2\u01ae\u0eb2\3\2\2\2\u01b0\u0ec1")
        buf.write(u"\3\2\2\2\u01b2\u0ec3\3\2\2\2\u01b4\u0ecf\3\2\2\2\u01b6")
        buf.write(u"\u0eda\3\2\2\2\u01b8\u0f70\3\2\2\2\u01ba\u0f86\3\2\2")
        buf.write(u"\2\u01bc\u0f8a\3\2\2\2\u01be\u0fbd\3\2\2\2\u01c0\u0fc2")
        buf.write(u"\3\2\2\2\u01c2\u0fd0\3\2\2\2\u01c4\u0fd4\3\2\2\2\u01c6")
        buf.write(u"\u0fda\3\2\2\2\u01c8\u101e\3\2\2\2\u01ca\u1020\3\2\2")
        buf.write(u"\2\u01cc\u1024\3\2\2\2\u01ce\u1026\3\2\2\2\u01d0\u1041")
        buf.write(u"\3\2\2\2\u01d2\u1052\3\2\2\2\u01d4\u1054\3\2\2\2\u01d6")
        buf.write(u"\u1068\3\2\2\2\u01d8\u1096\3\2\2\2\u01da\u1098\3\2\2")
        buf.write(u"\2\u01dc\u10a6\3\2\2\2\u01de\u10ac\3\2\2\2\u01e0\u10ae")
        buf.write(u"\3\2\2\2\u01e2\u10b9\3\2\2\2\u01e4\u10bc\3\2\2\2\u01e6")
        buf.write(u"\u10d4\3\2\2\2\u01e8\u10da\3\2\2\2\u01ea\u10e0\3\2\2")
        buf.write(u"\2\u01ec\u10e2\3\2\2\2\u01ee\u10e8\3\2\2\2\u01f0\u10f9")
        buf.write(u"\3\2\2\2\u01f2\u1116\3\2\2\2\u01f4\u1118\3\2\2\2\u01f6")
        buf.write(u"\u111a\3\2\2\2\u01f8\u112b\3\2\2\2\u01fa\u112f\3\2\2")
        buf.write(u"\2\u01fc\u1133\3\2\2\2\u01fe\u1138\3\2\2\2\u0200\u113a")
        buf.write(u"\3\2\2\2\u0202\u1159\3\2\2\2\u0204\u115e\3\2\2\2\u0206")
        buf.write(u"\u1164\3\2\2\2\u0208\u1169\3\2\2\2\u020a\u116e\3\2\2")
        buf.write(u"\2\u020c\u118f\3\2\2\2\u020e\u1194\3\2\2\2\u0210\u119c")
        buf.write(u"\3\2\2\2\u0212\u119e\3\2\2\2\u0214\u11af\3\2\2\2\u0216")
        buf.write(u"\u11b1\3\2\2\2\u0218\u11cb\3\2\2\2\u021a\u11d3\3\2\2")
        buf.write(u"\2\u021c\u11d5\3\2\2\2\u021e\u11d7\3\2\2\2\u0220\u11e5")
        buf.write(u"\3\2\2\2\u0222\u11f0\3\2\2\2\u0224\u11f2\3\2\2\2\u0226")
        buf.write(u"\u121b\3\2\2\2\u0228\u1223\3\2\2\2\u022a\u122a\3\2\2")
        buf.write(u"\2\u022c\u122f\3\2\2\2\u022e\u1231\3\2\2\2\u0230\u1234")
        buf.write(u"\3\2\2\2\u0232\u123f\3\2\2\2\u0234\u1245\3\2\2\2\u0236")
        buf.write(u"\u1251\3\2\2\2\u0238\u1261\3\2\2\2\u023a\u1271\3\2\2")
        buf.write(u"\2\u023c\u1281\3\2\2\2\u023e\u1299\3\2\2\2\u0240\u12a0")
        buf.write(u"\3\2\2\2\u0242\u12a2\3\2\2\2\u0244\u12a5\3\2\2\2\u0246")
        buf.write(u"\u12b2\3\2\2\2\u0248\u12d6\3\2\2\2\u024a\u12dd\3\2\2")
        buf.write(u"\2\u024c\u12df\3\2\2\2\u024e\u12ec\3\2\2\2\u0250\u12fd")
        buf.write(u"\3\2\2\2\u0252\u12ff\3\2\2\2\u0254\u1303\3\2\2\2\u0256")
        buf.write(u"\u1457\3\2\2\2\u0258\u145b\3\2\2\2\u025a\u1460\3\2\2")
        buf.write(u"\2\u025c\u1516\3\2\2\2\u025e\u15a6\3\2\2\2\u0260\u15a8")
        buf.write(u"\3\2\2\2\u0262\u15bc\3\2\2\2\u0264\u15be\3\2\2\2\u0266")
        buf.write(u"\u15ce\3\2\2\2\u0268\u15d2\3\2\2\2\u026a\u15d4\3\2\2")
        buf.write(u"\2\u026c\u15d9\3\2\2\2\u026e\u15eb\3\2\2\2\u0270\u15ed")
        buf.write(u"\3\2\2\2\u0272\u15f4\3\2\2\2\u0274\u15f6\3\2\2\2\u0276")
        buf.write(u"\u15fd\3\2\2\2\u0278\u1629\3\2\2\2\u027a\u162e\3\2\2")
        buf.write(u"\2\u027c\u163a\3\2\2\2\u027e\u163c\3\2\2\2\u0280\u164b")
        buf.write(u"\3\2\2\2\u0282\u1663\3\2\2\2\u0284\u1671\3\2\2\2\u0286")
        buf.write(u"\u1673\3\2\2\2\u0288\u1676\3\2\2\2\u028a\u167e\3\2\2")
        buf.write(u"\2\u028c\u16c7\3\2\2\2\u028e\u16cb\3\2\2\2\u0290\u16dc")
        buf.write(u"\3\2\2\2\u0292\u16de\3\2\2\2\u0294\u16e3\3\2\2\2\u0296")
        buf.write(u"\u16eb\3\2\2\2\u0298\u16f8\3\2\2\2\u029a\u16fa\3\2\2")
        buf.write(u"\2\u029c\u1733\3\2\2\2\u029e\u1737\3\2\2\2\u02a0\u1739")
        buf.write(u"\3\2\2\2\u02a2\u1788\3\2\2\2\u02a4\u178a\3\2\2\2\u02a6")
        buf.write(u"\u17a2\3\2\2\2\u02a8\u17a7\3\2\2\2\u02aa\u17c6\3\2\2")
        buf.write(u"\2\u02ac\u17c8\3\2\2\2\u02ae\u17d7\3\2\2\2\u02b0\u17e1")
        buf.write(u"\3\2\2\2\u02b2\u17e3\3\2\2\2\u02b4\u17e7\3\2\2\2\u02b6")
        buf.write(u"\u17eb\3\2\2\2\u02b8\u17ef\3\2\2\2\u02ba\u17f6\3\2\2")
        buf.write(u"\2\u02bc\u1808\3\2\2\2\u02be\u1811\3\2\2\2\u02c0\u1813")
        buf.write(u"\3\2\2\2\u02c2\u181e\3\2\2\2\u02c4\u1824\3\2\2\2\u02c6")
        buf.write(u"\u1829\3\2\2\2\u02c8\u182b\3\2\2\2\u02ca\u1836\3\2\2")
        buf.write(u"\2\u02cc\u183c\3\2\2\2\u02ce\u184c\3\2\2\2\u02d0\u1853")
        buf.write(u"\3\2\2\2\u02d2\u185f\3\2\2\2\u02d4\u1861\3\2\2\2\u02d6")
        buf.write(u"\u1870\3\2\2\2\u02d8\u1872\3\2\2\2\u02da\u187d\3\2\2")
        buf.write(u"\2\u02dc\u1883\3\2\2\2\u02de\u1885\3\2\2\2\u02e0\u1890")
        buf.write(u"\3\2\2\2\u02e2\u1892\3\2\2\2\u02e4\u189d\3\2\2\2\u02e6")
        buf.write(u"\u18af\3\2\2\2\u02e8\u18b3\3\2\2\2\u02ea\u18b5\3\2\2")
        buf.write(u"\2\u02ec\u18be\3\2\2\2\u02ee\u18cb\3\2\2\2\u02f0\u18cd")
        buf.write(u"\3\2\2\2\u02f2\u18d1\3\2\2\2\u02f4\u18d7\3\2\2\2\u02f6")
        buf.write(u"\u18da\3\2\2\2\u02f8\u18e5\3\2\2\2\u02fa\u18ed\3\2\2")
        buf.write(u"\2\u02fc\u18ef\3\2\2\2\u02fe\u1903\3\2\2\2\u0300\u1907")
        buf.write(u"\3\2\2\2\u0302\u1912\3\2\2\2\u0304\u194f\3\2\2\2\u0306")
        buf.write(u"\u1953\3\2\2\2\u0308\u1963\3\2\2\2\u030a\u1984\3\2\2")
        buf.write(u"\2\u030c\u1986\3\2\2\2\u030e\u1991\3\2\2\2\u0310\u199a")
        buf.write(u"\3\2\2\2\u0312\u199f\3\2\2\2\u0314\u19c4\3\2\2\2\u0316")
        buf.write(u"\u19c8\3\2\2\2\u0318\u19cd\3\2\2\2\u031a\u19d8\3\2\2")
        buf.write(u"\2\u031c\u19dc\3\2\2\2\u031e\u19de\3\2\2\2\u0320\u19e2")
        buf.write(u"\3\2\2\2\u0322\u19f6\3\2\2\2\u0324\u1a00\3\2\2\2\u0326")
        buf.write(u"\u1a04\3\2\2\2\u0328\u1a13\3\2\2\2\u032a\u1a1b\3\2\2")
        buf.write(u"\2\u032c\u1a1f\3\2\2\2\u032e\u1a21\3\2\2\2\u0330\u1a29")
        buf.write(u"\3\2\2\2\u0332\u1a2b\3\2\2\2\u0334\u1a2d\3\2\2\2\u0336")
        buf.write(u"\u1a2f\3\2\2\2\u0338\u1a35\3\2\2\2\u033a\u1a3a\3\2\2")
        buf.write(u"\2\u033c\u1a40\3\2\2\2\u033e\u1a44\3\2\2\2\u0340\u1a46")
        buf.write(u"\3\2\2\2\u0342\u1a5a\3\2\2\2\u0344\u1a5f\3\2\2\2\u0346")
        buf.write(u"\u1a61\3\2\2\2\u0348\u1a70\3\2\2\2\u034a\u1a72\3\2\2")
        buf.write(u"\2\u034c\u1a7f\3\2\2\2\u034e\u1aa0\3\2\2\2\u0350\u1ac3")
        buf.write(u"\3\2\2\2\u0352\u1ad3\3\2\2\2\u0354\u1ae2\3\2\2\2\u0356")
        buf.write(u"\u1aeb\3\2\2\2\u0358\u1af8\3\2\2\2\u035a\u1afa\3\2\2")
        buf.write(u"\2\u035c\u1b0d\3\2\2\2\u035e\u1b0f\3\2\2\2\u0360\u1b14")
        buf.write(u"\3\2\2\2\u0362\u1b1d\3\2\2\2\u0364\u1b21\3\2\2\2\u0366")
        buf.write(u"\u1b23\3\2\2\2\u0368\u1b2e\3\2\2\2\u036a\u1b4d\3\2\2")
        buf.write(u"\2\u036c\u1b4f\3\2\2\2\u036e\u1b6b\3\2\2\2\u0370\u1b71")
        buf.write(u"\3\2\2\2\u0372\u1b7a\3\2\2\2\u0374\u1b81\3\2\2\2\u0376")
        buf.write(u"\u1b93\3\2\2\2\u0378\u1b9a\3\2\2\2\u037a\u1b9e\3\2\2")
        buf.write(u"\2\u037c\u1ba2\3\2\2\2\u037e\u1ba4\3\2\2\2\u0380\u1baa")
        buf.write(u"\3\2\2\2\u0382\u1baf\3\2\2\2\u0384\u1bb3\3\2\2\2\u0386")
        buf.write(u"\u1bb5\3\2\2\2\u0388\u1bbb\3\2\2\2\u038a\u1bcb\3\2\2")
        buf.write(u"\2\u038c\u1bcf\3\2\2\2\u038e\u1bd5\3\2\2\2\u0390\u1be7")
        buf.write(u"\3\2\2\2\u0392\u1be9\3\2\2\2\u0394\u1bf1\3\2\2\2\u0396")
        buf.write(u"\u1c0f\3\2\2\2\u0398\u1c17\3\2\2\2\u039a\u1c2a\3\2\2")
        buf.write(u"\2\u039c\u1d1e\3\2\2\2\u039e\u1d7d\3\2\2\2\u03a0\u1e80")
        buf.write(u"\3\2\2\2\u03a2\u1e87\3\2\2\2\u03a4\u1e94\3\2\2\2\u03a6")
        buf.write(u"\u1e96\3\2\2\2\u03a8\u1e9b\3\2\2\2\u03aa\u1eab\3\2\2")
        buf.write(u"\2\u03ac\u1ead\3\2\2\2\u03ae\u1eb4\3\2\2\2\u03b0\u1ec8")
        buf.write(u"\3\2\2\2\u03b2\u1ecd\3\2\2\2\u03b4\u1ecf\3\2\2\2\u03b6")
        buf.write(u"\u1eda\3\2\2\2\u03b8\u1ee3\3\2\2\2\u03ba\u1ee5\3\2\2")
        buf.write(u"\2\u03bc\u1eee\3\2\2\2\u03be\u1ef4\3\2\2\2\u03c0\u1efb")
        buf.write(u"\3\2\2\2\u03c2\u1f03\3\2\2\2\u03c4\u1f11\3\2\2\2\u03c6")
        buf.write(u"\u1f21\3\2\2\2\u03c8\u1f23\3\2\2\2\u03ca\u1f27\3\2\2")
        buf.write(u"\2\u03cc\u1f29\3\2\2\2\u03ce\u1f31\3\2\2\2\u03d0\u1f39")
        buf.write(u"\3\2\2\2\u03d2\u1f47\3\2\2\2\u03d4\u1f49\3\2\2\2\u03d6")
        buf.write(u"\u1f54\3\2\2\2\u03d8\u1f64\3\2\2\2\u03da\u1f66\3\2\2")
        buf.write(u"\2\u03dc\u1f7b\3\2\2\2\u03de\u1f7d\3\2\2\2\u03e0\u1f8d")
        buf.write(u"\3\2\2\2\u03e2\u1f97\3\2\2\2\u03e4\u1fa2\3\2\2\2\u03e6")
        buf.write(u"\u1fa4\3\2\2\2\u03e8\u1fac\3\2\2\2\u03ea\u1fbe\3\2\2")
        buf.write(u"\2\u03ec\u1fc0\3\2\2\2\u03ee\u1fc3\3\2\2\2\u03f0\u1fcd")
        buf.write(u"\3\2\2\2\u03f2\u1fd4\3\2\2\2\u03f4\u1fd6\3\2\2\2\u03f6")
        buf.write(u"\u1fdc\3\2\2\2\u03f8\u1fe6\3\2\2\2\u03fa\u1fee\3\2\2")
        buf.write(u"\2\u03fc\u1ff2\3\2\2\2\u03fe\u1ff8\3\2\2\2\u0400\u2008")
        buf.write(u"\3\2\2\2\u0402\u200a\3\2\2\2\u0404\u2014\3\2\2\2\u0406")
        buf.write(u"\u201e\3\2\2\2\u0408\u2022\3\2\2\2\u040a\u2024\3\2\2")
        buf.write(u"\2\u040c\u202f\3\2\2\2\u040e\u2033\3\2\2\2\u0410\u2047")
        buf.write(u"\3\2\2\2\u0412\u2049\3\2\2\2\u0414\u2058\3\2\2\2\u0416")
        buf.write(u"\u205a\3\2\2\2\u0418\u2065\3\2\2\2\u041a\u2067\3\2\2")
        buf.write(u"\2\u041c\u2069\3\2\2\2\u041e\u206b\3\2\2\2\u0420\u206d")
        buf.write(u"\3\2\2\2\u0422\u206f\3\2\2\2\u0424\u2075\3\2\2\2\u0426")
        buf.write(u"\u2096\3\2\2\2\u0428\u2098\3\2\2\2\u042a\u209a\3\2\2")
        buf.write(u"\2\u042c\u209c\3\2\2\2\u042e\u20a3\3\2\2\2\u0430\u20a8")
        buf.write(u"\3\2\2\2\u0432\u20ad\3\2\2\2\u0434\u20b4\3\2\2\2\u0436")
        buf.write(u"\u20b6\3\2\2\2\u0438\u20b8\3\2\2\2\u043a\u20ba\3\2\2")
        buf.write(u"\2\u043c\u20bc\3\2\2\2\u043e\u043f\5\4\3\2\u043f\3\3")
        buf.write(u"\2\2\2\u0440\u0441\b\3\1\2\u0441\u0442\5\6\4\2\u0442")
        buf.write(u"\u0448\3\2\2\2\u0443\u0444\f\4\2\2\u0444\u0445\7\21\2")
        buf.write(u"\2\u0445\u0447\5\6\4\2\u0446\u0443\3\2\2\2\u0447\u044a")
        buf.write(u"\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449")
        buf.write(u"\5\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u04bb\5\u0290\u0149")
        buf.write(u"\2\u044c\u04bb\5\u0292\u014a\2\u044d\u04bb\5\u01ec\u00f7")
        buf.write(u"\2\u044e\u04bb\5\u029c\u014f\2\u044f\u04bb\5\u018a\u00c6")
        buf.write(u"\2\u0450\u04bb\5\u0112\u008a\2\u0451\u04bb\5\u0118\u008d")
        buf.write(u"\2\u0452\u04bb\5\u0124\u0093\2\u0453\u04bb\5\u0140\u00a1")
        buf.write(u"\2\u0454\u04bb\5\u014a\u00a6\2\u0455\u04bb\5\u0232\u011a")
        buf.write(u"\2\u0456\u04bb\5$\23\2\u0457\u04bb\5\u025c\u012f\2\u0458")
        buf.write(u"\u04bb\5\u025e\u0130\2\u0459\u04bb\5\u00e8u\2\u045a\u04bb")
        buf.write(u"\5Z.\2\u045b\u04bb\5p9\2\u045c\u04bb\5\30\r\2\u045d\u04bb")
        buf.write(u"\5\24\13\2\u045e\u04bb\5\u02a2\u0152\2\u045f\u04bb\5")
        buf.write(u"\u02a0\u0151\2\u0460\u04bb\5\u0152\u00aa\2\u0461\u04bb")
        buf.write(u"\5\34\17\2\u0462\u04bb\5\32\16\2\u0463\u04bb\5\u02b0")
        buf.write(u"\u0159\2\u0464\u04bb\5V,\2\u0465\u04bb\5v<\2\u0466\u04bb")
        buf.write(u"\5\u02a6\u0154\2\u0467\u04bb\5\u01b8\u00dd\2\u0468\u04bb")
        buf.write(u"\5P)\2\u0469\u04bb\5x=\2\u046a\u04bb\5\u00e0q\2\u046b")
        buf.write(u"\u04bb\5\u0170\u00b9\2\u046c\u04bb\5\u0248\u0125\2\u046d")
        buf.write(u"\u04bb\5\u02a4\u0153\2\u046e\u04bb\5\u029a\u014e\2\u046f")
        buf.write(u"\u04bb\5\u010c\u0087\2\u0470\u04bb\5\u011a\u008e\2\u0471")
        buf.write(u"\u04bb\5\u0136\u009c\2\u0472\u04bb\5\u0142\u00a2\2\u0473")
        buf.write(u"\u04bb\5\u020c\u0107\2\u0474\u04bb\5\"\22\2\u0475\u04bb")
        buf.write(u"\5\u018c\u00c7\2\u0476\u04bb\5\u019a\u00ce\2\u0477\u04bb")
        buf.write(u"\5\u019c\u00cf\2\u0478\u04bb\5\u00f6|\2\u0479\u04bb\5")
        buf.write(u"*\26\2\u047a\u04bb\5\u00e6t\2\u047b\u04bb\5\u0096L\2")
        buf.write(u"\u047c\u04bb\5\u0106\u0084\2\u047d\u04bb\5\u0154\u00ab")
        buf.write(u"\2\u047e\u04bb\5\b\5\2\u047f\u04bb\5\22\n\2\u0480\u04bb")
        buf.write(u"\5\u014c\u00a7\2\u0481\u04bb\5\u0288\u0145\2\u0482\u04bb")
        buf.write(u"\5\u02d2\u016a\2\u0483\u04bb\5\u02f8\u017d\2\u0484\u04bb")
        buf.write(u"\5\u0174\u00bb\2\u0485\u04bb\5\u02de\u0170\2\u0486\u04bb")
        buf.write(u"\5X-\2\u0487\u04bb\5\u0242\u0122\2\u0488\u04bb\5\u0172")
        buf.write(u"\u00ba\2\u0489\u04bb\5\u024c\u0127\2\u048a\u04bb\5\u0122")
        buf.write(u"\u0092\2\u048b\u04bb\5\u013e\u00a0\2\u048c\u04bb\5(\25")
        buf.write(u"\2\u048d\u04bb\5\u01a2\u00d2\2\u048e\u04bb\5\u01a4\u00d3")
        buf.write(u"\2\u048f\u04bb\5\u01a6\u00d4\2\u0490\u04bb\5\u0102\u0082")
        buf.write(u"\2\u0491\u04bb\5\u026e\u0138\2\u0492\u04bb\5\u01aa\u00d6")
        buf.write(u"\2\u0493\u04bb\5\u010a\u0086\2\u0494\u04bb\5\u016e\u00b8")
        buf.write(u"\2\u0495\u04bb\5\36\20\2\u0496\u04bb\5 \21\2\u0497\u04bb")
        buf.write(u"\5\u0150\u00a9\2\u0498\u04bb\5\u0298\u014d\2\u0499\u04bb")
        buf.write(u"\5\u02ce\u0168\2\u049a\u04bb\5\u02bc\u015f\2\u049b\u04bb")
        buf.write(u"\5\u01c6\u00e4\2\u049c\u04bb\5\u01ce\u00e8\2\u049d\u04bb")
        buf.write(u"\5\u01e4\u00f3\2\u049e\u04bb\5\u01f6\u00fc\2\u049f\u04bb")
        buf.write(u"\5\u02d4\u016b\2\u04a0\u04bb\5\u0274\u013b\2\u04a1\u04bb")
        buf.write(u"\5\u0286\u0144\2\u04a2\u04bb\5\u02e2\u0172\2\u04a3\u04bb")
        buf.write(u"\5\u0270\u0139\2\u04a4\u04bb\5\u02c8\u0165\2\u04a5\u04bb")
        buf.write(u"\5\u01a8\u00d5\2\u04a6\u04bb\5\u0250\u0129\2\u04a7\u04bb")
        buf.write(u"\5\u023a\u011e\2\u04a8\u04bb\5\u0238\u011d\2\u04a9\u04bb")
        buf.write(u"\5\u023c\u011f\2\u04aa\u04bb\5\u0256\u012c\2\u04ab\u04bb")
        buf.write(u"\5\u01d0\u00e9\2\u04ac\u04bb\5\u01e6\u00f4\2\u04ad\u04bb")
        buf.write(u"\5\u0260\u0131\2\u04ae\u04bb\5\u01be\u00e0\2\u04af\u04bb")
        buf.write(u"\5\u0300\u0181\2\u04b0\u04bb\5\u0278\u013d\2\u04b1\u04bb")
        buf.write(u"\5\u01b4\u00db\2\u04b2\u04bb\5\u0276\u013c\2\u04b3\u04bb")
        buf.write(u"\5\u02ea\u0176\2\u04b4\u04bb\5\u02aa\u0156\2\u04b5\u04bb")
        buf.write(u"\5H%\2\u04b6\u04bb\5\62\32\2\u04b7\u04bb\5N(\2\u04b8")
        buf.write(u"\u04bb\5\u0282\u0142\2\u04b9\u04bb\3\2\2\2\u04ba\u044b")
        buf.write(u"\3\2\2\2\u04ba\u044c\3\2\2\2\u04ba\u044d\3\2\2\2\u04ba")
        buf.write(u"\u044e\3\2\2\2\u04ba\u044f\3\2\2\2\u04ba\u0450\3\2\2")
        buf.write(u"\2\u04ba\u0451\3\2\2\2\u04ba\u0452\3\2\2\2\u04ba\u0453")
        buf.write(u"\3\2\2\2\u04ba\u0454\3\2\2\2\u04ba\u0455\3\2\2\2\u04ba")
        buf.write(u"\u0456\3\2\2\2\u04ba\u0457\3\2\2\2\u04ba\u0458\3\2\2")
        buf.write(u"\2\u04ba\u0459\3\2\2\2\u04ba\u045a\3\2\2\2\u04ba\u045b")
        buf.write(u"\3\2\2\2\u04ba\u045c\3\2\2\2\u04ba\u045d\3\2\2\2\u04ba")
        buf.write(u"\u045e\3\2\2\2\u04ba\u045f\3\2\2\2\u04ba\u0460\3\2\2")
        buf.write(u"\2\u04ba\u0461\3\2\2\2\u04ba\u0462\3\2\2\2\u04ba\u0463")
        buf.write(u"\3\2\2\2\u04ba\u0464\3\2\2\2\u04ba\u0465\3\2\2\2\u04ba")
        buf.write(u"\u0466\3\2\2\2\u04ba\u0467\3\2\2\2\u04ba\u0468\3\2\2")
        buf.write(u"\2\u04ba\u0469\3\2\2\2\u04ba\u046a\3\2\2\2\u04ba\u046b")
        buf.write(u"\3\2\2\2\u04ba\u046c\3\2\2\2\u04ba\u046d\3\2\2\2\u04ba")
        buf.write(u"\u046e\3\2\2\2\u04ba\u046f\3\2\2\2\u04ba\u0470\3\2\2")
        buf.write(u"\2\u04ba\u0471\3\2\2\2\u04ba\u0472\3\2\2\2\u04ba\u0473")
        buf.write(u"\3\2\2\2\u04ba\u0474\3\2\2\2\u04ba\u0475\3\2\2\2\u04ba")
        buf.write(u"\u0476\3\2\2\2\u04ba\u0477\3\2\2\2\u04ba\u0478\3\2\2")
        buf.write(u"\2\u04ba\u0479\3\2\2\2\u04ba\u047a\3\2\2\2\u04ba\u047b")
        buf.write(u"\3\2\2\2\u04ba\u047c\3\2\2\2\u04ba\u047d\3\2\2\2\u04ba")
        buf.write(u"\u047e\3\2\2\2\u04ba\u047f\3\2\2\2\u04ba\u0480\3\2\2")
        buf.write(u"\2\u04ba\u0481\3\2\2\2\u04ba\u0482\3\2\2\2\u04ba\u0483")
        buf.write(u"\3\2\2\2\u04ba\u0484\3\2\2\2\u04ba\u0485\3\2\2\2\u04ba")
        buf.write(u"\u0486\3\2\2\2\u04ba\u0487\3\2\2\2\u04ba\u0488\3\2\2")
        buf.write(u"\2\u04ba\u0489\3\2\2\2\u04ba\u048a\3\2\2\2\u04ba\u048b")
        buf.write(u"\3\2\2\2\u04ba\u048c\3\2\2\2\u04ba\u048d\3\2\2\2\u04ba")
        buf.write(u"\u048e\3\2\2\2\u04ba\u048f\3\2\2\2\u04ba\u0490\3\2\2")
        buf.write(u"\2\u04ba\u0491\3\2\2\2\u04ba\u0492\3\2\2\2\u04ba\u0493")
        buf.write(u"\3\2\2\2\u04ba\u0494\3\2\2\2\u04ba\u0495\3\2\2\2\u04ba")
        buf.write(u"\u0496\3\2\2\2\u04ba\u0497\3\2\2\2\u04ba\u0498\3\2\2")
        buf.write(u"\2\u04ba\u0499\3\2\2\2\u04ba\u049a\3\2\2\2\u04ba\u049b")
        buf.write(u"\3\2\2\2\u04ba\u049c\3\2\2\2\u04ba\u049d\3\2\2\2\u04ba")
        buf.write(u"\u049e\3\2\2\2\u04ba\u049f\3\2\2\2\u04ba\u04a0\3\2\2")
        buf.write(u"\2\u04ba\u04a1\3\2\2\2\u04ba\u04a2\3\2\2\2\u04ba\u04a3")
        buf.write(u"\3\2\2\2\u04ba\u04a4\3\2\2\2\u04ba\u04a5\3\2\2\2\u04ba")
        buf.write(u"\u04a6\3\2\2\2\u04ba\u04a7\3\2\2\2\u04ba\u04a8\3\2\2")
        buf.write(u"\2\u04ba\u04a9\3\2\2\2\u04ba\u04aa\3\2\2\2\u04ba\u04ab")
        buf.write(u"\3\2\2\2\u04ba\u04ac\3\2\2\2\u04ba\u04ad\3\2\2\2\u04ba")
        buf.write(u"\u04ae\3\2\2\2\u04ba\u04af\3\2\2\2\u04ba\u04b0\3\2\2")
        buf.write(u"\2\u04ba\u04b1\3\2\2\2\u04ba\u04b2\3\2\2\2\u04ba\u04b3")
        buf.write(u"\3\2\2\2\u04ba\u04b4\3\2\2\2\u04ba\u04b5\3\2\2\2\u04ba")
        buf.write(u"\u04b6\3\2\2\2\u04ba\u04b7\3\2\2\2\u04ba\u04b8\3\2\2")
        buf.write(u"\2\u04ba\u04b9\3\2\2\2\u04bb\7\3\2\2\2\u04bc\u04bd\7")
        buf.write(u"Z\2\2\u04bd\u04be\7\u0134\2\2\u04be\u04c0\5\u042c\u0217")
        buf.write(u"\2\u04bf\u04c1\7\u018f\2\2\u04c0\u04bf\3\2\2\2\u04c0")
        buf.write(u"\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\5\n\6")
        buf.write(u"\2\u04c3\t\3\2\2\2\u04c4\u04c9\b\6\1\2\u04c5\u04c6\f")
        buf.write(u"\4\2\2\u04c6\u04c8\5\20\t\2\u04c7\u04c5\3\2\2\2\u04c8")
        buf.write(u"\u04cb\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2")
        buf.write(u"\2\u04ca\13\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04d1\b")
        buf.write(u"\7\1\2\u04cd\u04ce\f\4\2\2\u04ce\u04d0\5\16\b\2\u04cf")
        buf.write(u"\u04cd\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2")
        buf.write(u"\2\u04d1\u04d2\3\2\2\2\u04d2\r\3\2\2\2\u04d3\u04d1\3")
        buf.write(u"\2\2\2\u04d4\u04d5\7\u010f\2\2\u04d5\u04e9\5\u042a\u0216")
        buf.write(u"\2\u04d6\u04d7\7\u010f\2\2\u04d7\u04e9\7\u00f4\2\2\u04d8")
        buf.write(u"\u04d9\7\u0084\2\2\u04d9\u04da\7\u010f\2\2\u04da\u04e9")
        buf.write(u"\5\u042a\u0216\2\u04db\u04dc\7\u0174\2\2\u04dc\u04dd")
        buf.write(u"\7\u010f\2\2\u04dd\u04e9\5\u042a\u0216\2\u04de\u04e9")
        buf.write(u"\7\u00b6\2\2\u04df\u04e0\7R\2\2\u04e0\u04e1\7\u00d7\2")
        buf.write(u"\2\u04e1\u04e9\5\u042e\u0218\2\u04e2\u04e3\7\u017f\2")
        buf.write(u"\2\u04e3\u04e4\7\u017a\2\2\u04e4\u04e9\5\u042a\u0216")
        buf.write(u"\2\u04e5\u04e6\7\u017c\2\2\u04e6\u04e9\5\u0416\u020c")
        buf.write(u"\2\u04e7\u04e9\7\u01ad\2\2\u04e8\u04d4\3\2\2\2\u04e8")
        buf.write(u"\u04d6\3\2\2\2\u04e8\u04d8\3\2\2\2\u04e8\u04db\3\2\2")
        buf.write(u"\2\u04e8\u04de\3\2\2\2\u04e8\u04df\3\2\2\2\u04e8\u04e2")
        buf.write(u"\3\2\2\2\u04e8\u04e5\3\2\2\2\u04e8\u04e7\3\2\2\2\u04e9")
        buf.write(u"\17\3\2\2\2\u04ea\u04f8\5\16\b\2\u04eb\u04ec\7\u015b")
        buf.write(u"\2\2\u04ec\u04f8\5\u0428\u0215\2\u04ed\u04ee\7\32\2\2")
        buf.write(u"\u04ee\u04f8\5\u0416\u020c\2\u04ef\u04f0\7\u0134\2\2")
        buf.write(u"\u04f0\u04f8\5\u0416\u020c\2\u04f1\u04f2\7\u00b1\2\2")
        buf.write(u"\u04f2\u04f3\7\u0134\2\2\u04f3\u04f8\5\u0416\u020c\2")
        buf.write(u"\u04f4\u04f5\7\u00b1\2\2\u04f5\u04f6\7\u00a5\2\2\u04f6")
        buf.write(u"\u04f8\5\u0416\u020c\2\u04f7\u04ea\3\2\2\2\u04f7\u04eb")
        buf.write(u"\3\2\2\2\u04f7\u04ed\3\2\2\2\u04f7\u04ef\3\2\2\2\u04f7")
        buf.write(u"\u04f1\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f8\21\3\2\2\2\u04f9")
        buf.write(u"\u04fa\7Z\2\2\u04fa\u04fb\7\u017c\2\2\u04fb\u04fd\5\u042c")
        buf.write(u"\u0217\2\u04fc\u04fe\7\u018f\2\2\u04fd\u04fc\3\2\2\2")
        buf.write(u"\u04fd\u04fe\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500")
        buf.write(u"\5\n\6\2\u0500\23\3\2\2\2\u0501\u0502\7\37\2\2\u0502")
        buf.write(u"\u0503\7\u0134\2\2\u0503\u0505\5\u042c\u0217\2\u0504")
        buf.write(u"\u0506\7\u018f\2\2\u0505\u0504\3\2\2\2\u0505\u0506\3")
        buf.write(u"\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508\5\f\7\2\u0508")
        buf.write(u"\25\3\2\2\2\u0509\u050e\3\2\2\2\u050a\u050b\7\u00b1\2")
        buf.write(u"\2\u050b\u050c\7h\2\2\u050c\u050e\5\u041a\u020e\2\u050d")
        buf.write(u"\u0509\3\2\2\2\u050d\u050a\3\2\2\2\u050e\27\3\2\2\2\u050f")
        buf.write(u"\u0510\7\37\2\2\u0510\u0511\7\u0134\2\2\u0511\u0512\5")
        buf.write(u"\u042c\u0217\2\u0512\u0513\5\26\f\2\u0513\u0514\5J&\2")
        buf.write(u"\u0514\31\3\2\2\2\u0515\u0516\7\37\2\2\u0516\u0517\7")
        buf.write(u"\u017c\2\2\u0517\u0519\5\u042c\u0217\2\u0518\u051a\7")
        buf.write(u"\u018f\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a")
        buf.write(u"\u051b\3\2\2\2\u051b\u051c\5\f\7\2\u051c\33\3\2\2\2\u051d")
        buf.write(u"\u051e\7\37\2\2\u051e\u051f\7\u017c\2\2\u051f\u0520\5")
        buf.write(u"\u042c\u0217\2\u0520\u0521\5J&\2\u0521\35\3\2\2\2\u0522")
        buf.write(u"\u0523\7\177\2\2\u0523\u0524\7\u0134\2\2\u0524\u052b")
        buf.write(u"\5\u0416\u020c\2\u0525\u0526\7\177\2\2\u0526\u0527\7")
        buf.write(u"\u0134\2\2\u0527\u0528\7\u00ac\2\2\u0528\u0529\7\u008d")
        buf.write(u"\2\2\u0529\u052b\5\u0416\u020c\2\u052a\u0522\3\2\2\2")
        buf.write(u"\u052a\u0525\3\2\2\2\u052b\37\3\2\2\2\u052c\u052d\7\177")
        buf.write(u"\2\2\u052d\u052e\7\u017c\2\2\u052e\u0535\5\u0416\u020c")
        buf.write(u"\2\u052f\u0530\7\177\2\2\u0530\u0531\7\u017c\2\2\u0531")
        buf.write(u"\u0532\7\u00ac\2\2\u0532\u0533\7\u008d\2\2\u0533\u0535")
        buf.write(u"\5\u0416\u020c\2\u0534\u052c\3\2\2\2\u0534\u052f\3\2")
        buf.write(u"\2\2\u0535!\3\2\2\2\u0536\u0537\7Z\2\2\u0537\u0538\7")
        buf.write(u"\u00a5\2\2\u0538\u053a\5\u042c\u0217\2\u0539\u053b\7")
        buf.write(u"\u018f\2\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b")
        buf.write(u"\u053c\3\2\2\2\u053c\u053d\5\n\6\2\u053d#\3\2\2\2\u053e")
        buf.write(u"\u053f\7\37\2\2\u053f\u0540\7\u00a5\2\2\u0540\u0541\5")
        buf.write(u"\u042c\u0217\2\u0541\u0542\5&\24\2\u0542\u0543\7\u017c")
        buf.write(u"\2\2\u0543\u0544\5\u0416\u020c\2\u0544%\3\2\2\2\u0545")
        buf.write(u"\u0546\t\2\2\2\u0546\'\3\2\2\2\u0547\u0548\7\177\2\2")
        buf.write(u"\u0548\u0549\7\u00a5\2\2\u0549\u0550\5\u0416\u020c\2")
        buf.write(u"\u054a\u054b\7\177\2\2\u054b\u054c\7\u00a5\2\2\u054c")
        buf.write(u"\u054d\7\u00ac\2\2\u054d\u054e\7\u008d\2\2\u054e\u0550")
        buf.write(u"\5\u0416\u020c\2\u054f\u0547\3\2\2\2\u054f\u054a\3\2")
        buf.write(u"\2\2\u0550)\3\2\2\2\u0551\u0552\7Z\2\2\u0552\u0553\7")
        buf.write(u"\u013a\2\2\u0553\u0554\5,\27\2\u0554\u0555\7-\2\2\u0555")
        buf.write(u"\u0556\5\u042c\u0217\2\u0556\u0557\5.\30\2\u0557\u055e")
        buf.write(u"\3\2\2\2\u0558\u0559\7Z\2\2\u0559\u055a\7\u013a\2\2\u055a")
        buf.write(u"\u055b\5\u0430\u0219\2\u055b\u055c\5.\30\2\u055c\u055e")
        buf.write(u"\3\2\2\2\u055d\u0551\3\2\2\2\u055d\u0558\3\2\2\2\u055e")
        buf.write(u"+\3\2\2\2\u055f\u0562\5\u0430\u0219\2\u0560\u0562\3\2")
        buf.write(u"\2\2\u0561\u055f\3\2\2\2\u0561\u0560\3\2\2\2\u0562-\3")
        buf.write(u"\2\2\2\u0563\u0568\b\30\1\2\u0564\u0565\f\4\2\2\u0565")
        buf.write(u"\u0567\5\60\31\2\u0566\u0564\3\2\2\2\u0567\u056a\3\2")
        buf.write(u"\2\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569/\3")
        buf.write(u"\2\2\2\u056a\u0568\3\2\2\2\u056b\u0572\5\u0096L\2\u056c")
        buf.write(u"\u0572\5\u01f6\u00fc\2\u056d\u0572\5\u00e6t\2\u056e\u0572")
        buf.write(u"\5\u0154\u00ab\2\u056f\u0572\5\u01ce\u00e8\2\u0570\u0572")
        buf.write(u"\5\u0282\u0142\2\u0571\u056b\3\2\2\2\u0571\u056c\3\2")
        buf.write(u"\2\2\u0571\u056d\3\2\2\2\u0571\u056e\3\2\2\2\u0571\u056f")
        buf.write(u"\3\2\2\2\u0571\u0570\3\2\2\2\u0572\61\3\2\2\2\u0573\u0574")
        buf.write(u"\7\u0146\2\2\u0574\u057c\5\64\33\2\u0575\u0576\7\u0146")
        buf.write(u"\2\2\u0576\u0577\7\u00da\2\2\u0577\u057c\5\64\33\2\u0578")
        buf.write(u"\u0579\7\u0146\2\2\u0579\u057a\7\u0144\2\2\u057a\u057c")
        buf.write(u"\5\64\33\2\u057b\u0573\3\2\2\2\u057b\u0575\3\2\2\2\u057b")
        buf.write(u"\u0578\3\2\2\2\u057c\63\3\2\2\2\u057d\u057e\7\u0169\2")
        buf.write(u"\2\u057e\u0586\5\u027e\u0140\2\u057f\u0580\7\u0144\2")
        buf.write(u"\2\u0580\u0581\7B\2\2\u0581\u0582\7&\2\2\u0582\u0583")
        buf.write(u"\7\u0169\2\2\u0583\u0586\5\u027e\u0140\2\u0584\u0586")
        buf.write(u"\5\66\34\2\u0585\u057d\3\2\2\2\u0585\u057f\3\2\2\2\u0585")
        buf.write(u"\u0584\3\2\2\2\u0586\65\3\2\2\2\u0587\u0588\58\35\2\u0588")
        buf.write(u"\u0589\7\u0167\2\2\u0589\u058a\5:\36\2\u058a\u05b3\3")
        buf.write(u"\2\2\2\u058b\u058c\58\35\2\u058c\u058d\7\20\2\2\u058d")
        buf.write(u"\u058e\5:\36\2\u058e\u05b3\3\2\2\2\u058f\u0590\58\35")
        buf.write(u"\2\u0590\u0591\7\u0167\2\2\u0591\u0592\7n\2\2\u0592\u05b3")
        buf.write(u"\3\2\2\2\u0593\u0594\58\35\2\u0594\u0595\7\20\2\2\u0595")
        buf.write(u"\u0596\7n\2\2\u0596\u05b3\3\2\2\2\u0597\u0598\58\35\2")
        buf.write(u"\u0598\u0599\7\u009d\2\2\u0599\u059a\7]\2\2\u059a\u05b3")
        buf.write(u"\3\2\2\2\u059b\u059c\7\u0165\2\2\u059c\u059d\7\u01a0")
        buf.write(u"\2\2\u059d\u05b3\5B\"\2\u059e\u059f\7>\2\2\u059f\u05b3")
        buf.write(u"\5\u042a\u0216\2\u05a0\u05a1\7\u013a\2\2\u05a1\u05b3")
        buf.write(u"\5\u042a\u0216\2\u05a2\u05a3\7\u00e8\2\2\u05a3\u05b3")
        buf.write(u"\5D#\2\u05a4\u05a5\7\u0134\2\2\u05a5\u05b3\5F$\2\u05a6")
        buf.write(u"\u05a7\7\u0144\2\2\u05a7\u05a8\7-\2\2\u05a8\u05b3\5F")
        buf.write(u"$\2\u05a9\u05aa\7\u0144\2\2\u05aa\u05ab\7-\2\2\u05ab")
        buf.write(u"\u05b3\7n\2\2\u05ac\u05ad\7\u0194\2\2\u05ad\u05ae\7\u0100")
        buf.write(u"\2\2\u05ae\u05b3\5\u03ac\u01d7\2\u05af\u05b0\7\u0169")
        buf.write(u"\2\2\u05b0\u05b1\7\u014d\2\2\u05b1\u05b3\5\u042a\u0216")
        buf.write(u"\2\u05b2\u0587\3\2\2\2\u05b2\u058b\3\2\2\2\u05b2\u058f")
        buf.write(u"\3\2\2\2\u05b2\u0593\3\2\2\2\u05b2\u0597\3\2\2\2\u05b2")
        buf.write(u"\u059b\3\2\2\2\u05b2\u059e\3\2\2\2\u05b2\u05a0\3\2\2")
        buf.write(u"\2\u05b2\u05a2\3\2\2\2\u05b2\u05a4\3\2\2\2\u05b2\u05a6")
        buf.write(u"\3\2\2\2\u05b2\u05a9\3\2\2\2\u05b2\u05ac\3\2\2\2\u05b2")
        buf.write(u"\u05af\3\2\2\2\u05b3\67\3\2\2\2\u05b4\u05b5\b\35\1\2")
        buf.write(u"\u05b5\u05b6\5\u0430\u0219\2\u05b6\u05bc\3\2\2\2\u05b7")
        buf.write(u"\u05b8\f\3\2\2\u05b8\u05b9\7\7\2\2\u05b9\u05bb\5\u0430")
        buf.write(u"\u0219\2\u05ba\u05b7\3\2\2\2\u05bb\u05be\3\2\2\2\u05bc")
        buf.write(u"\u05ba\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd9\3\2\2\2\u05be")
        buf.write(u"\u05bc\3\2\2\2\u05bf\u05c0\b\36\1\2\u05c0\u05c1\5<\37")
        buf.write(u"\2\u05c1\u05c7\3\2\2\2\u05c2\u05c3\f\3\2\2\u05c3\u05c4")
        buf.write(u"\7\b\2\2\u05c4\u05c6\5<\37\2\u05c5\u05c2\3\2\2\2\u05c6")
        buf.write(u"\u05c9\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2")
        buf.write(u"\2\u05c8;\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05cd\5@")
        buf.write(u"!\2\u05cb\u05cd\5\u00f2z\2\u05cc\u05ca\3\2\2\2\u05cc")
        buf.write(u"\u05cb\3\2\2\2\u05cd=\3\2\2\2\u05ce\u05cf\7\u011f\2\2")
        buf.write(u"\u05cf\u05d6\7\u0173\2\2\u05d0\u05d1\7\u011f\2\2\u05d1")
        buf.write(u"\u05d6\7O\2\2\u05d2\u05d3\7\u012a\2\2\u05d3\u05d6\7\u011f")
        buf.write(u"\2\2\u05d4\u05d6\7\u0142\2\2\u05d5\u05ce\3\2\2\2\u05d5")
        buf.write(u"\u05d0\3\2\2\2\u05d5\u05d2\3\2\2\2\u05d5\u05d4\3\2\2")
        buf.write(u"\2\u05d6?\3\2\2\2\u05d7\u05dc\7\u016d\2\2\u05d8\u05dc")
        buf.write(u"\7\u0092\2\2\u05d9\u05dc\7\u00fd\2\2\u05da\u05dc\5F$")
        buf.write(u"\2\u05db\u05d7\3\2\2\2\u05db\u05d8\3\2\2\2\u05db\u05d9")
        buf.write(u"\3\2\2\2\u05db\u05da\3\2\2\2\u05dcA\3\2\2\2\u05dd\u05ee")
        buf.write(u"\5\u042a\u0216\2\u05de\u05ee\7\u01ad\2\2\u05df\u05e0")
        buf.write(u"\5\u0392\u01ca\2\u05e0\u05e1\5\u042a\u0216\2\u05e1\u05e2")
        buf.write(u"\5\u0396\u01cc\2\u05e2\u05ee\3\2\2\2\u05e3\u05e4\5\u0392")
        buf.write(u"\u01ca\2\u05e4\u05e5\7\r\2\2\u05e5\u05e6\5\u0428\u0215")
        buf.write(u"\2\u05e6\u05e7\7\6\2\2\u05e7\u05e8\5\u042a\u0216\2\u05e8")
        buf.write(u"\u05e9\5\u0396\u01cc\2\u05e9\u05ee\3\2\2\2\u05ea\u05ee")
        buf.write(u"\5\u00f2z\2\u05eb\u05ee\7n\2\2\u05ec\u05ee\7\u00da\2")
        buf.write(u"\2\u05ed\u05dd\3\2\2\2\u05ed\u05de\3\2\2\2\u05ed\u05df")
        buf.write(u"\3\2\2\2\u05ed\u05e3\3\2\2\2\u05ed\u05ea\3\2\2\2\u05ed")
        buf.write(u"\u05eb\3\2\2\2\u05ed\u05ec\3\2\2\2\u05eeC\3\2\2\2\u05ef")
        buf.write(u"\u05f3\5\u042a\u0216\2\u05f0\u05f3\7n\2\2\u05f1\u05f3")
        buf.write(u"\3\2\2\2\u05f2\u05ef\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2")
        buf.write(u"\u05f1\3\2\2\2\u05f3E\3\2\2\2\u05f4\u05f7\5\u0430\u0219")
        buf.write(u"\2\u05f5\u05f7\5\u042a\u0216\2\u05f6\u05f4\3\2\2\2\u05f6")
        buf.write(u"\u05f5\3\2\2\2\u05f7G\3\2\2\2\u05f8\u05f9\7\u012d\2\2")
        buf.write(u"\u05f9\u0607\58\35\2\u05fa\u05fb\7\u012d\2\2\u05fb\u05fc")
        buf.write(u"\7\u0165\2\2\u05fc\u0607\7\u01a0\2\2\u05fd\u05fe\7\u012d")
        buf.write(u"\2\2\u05fe\u05ff\7\u0169\2\2\u05ff\u0600\7\u00c8\2\2")
        buf.write(u"\u0600\u0607\7\u00d5\2\2\u0601\u0602\7\u012d\2\2\u0602")
        buf.write(u"\u0603\7\u0144\2\2\u0603\u0607\7-\2\2\u0604\u0605\7\u012d")
        buf.write(u"\2\2\u0605\u0607\7\35\2\2\u0606\u05f8\3\2\2\2\u0606\u05fa")
        buf.write(u"\3\2\2\2\u0606\u05fd\3\2\2\2\u0606\u0601\3\2\2\2\u0606")
        buf.write(u"\u0604\3\2\2\2\u0607I\3\2\2\2\u0608\u0609\7\u0146\2\2")
        buf.write(u"\u0609\u060c\5\64\33\2\u060a\u060c\5H%\2\u060b\u0608")
        buf.write(u"\3\2\2\2\u060b\u060a\3\2\2\2\u060cK\3\2\2\2\u060d\u060e")
        buf.write(u"\7\u0146\2\2\u060e\u0611\5\66\34\2\u060f\u0611\5H%\2")
        buf.write(u"\u0610\u060d\3\2\2\2\u0610\u060f\3\2\2\2\u0611M\3\2\2")
        buf.write(u"\2\u0612\u0613\7\u0149\2\2\u0613\u0621\58\35\2\u0614")
        buf.write(u"\u0615\7\u0149\2\2\u0615\u0616\7\u0165\2\2\u0616\u0621")
        buf.write(u"\7\u01a0\2\2\u0617\u0618\7\u0149\2\2\u0618\u0619\7\u0169")
        buf.write(u"\2\2\u0619\u061a\7\u00c8\2\2\u061a\u0621\7\u00d5\2\2")
        buf.write(u"\u061b\u061c\7\u0149\2\2\u061c\u061d\7\u0144\2\2\u061d")
        buf.write(u"\u0621\7-\2\2\u061e\u061f\7\u0149\2\2\u061f\u0621\7\35")
        buf.write(u"\2\2\u0620\u0612\3\2\2\2\u0620\u0614\3\2\2\2\u0620\u0617")
        buf.write(u"\3\2\2\2\u0620\u061b\3\2\2\2\u0620\u061e\3\2\2\2\u0621")
        buf.write(u"O\3\2\2\2\u0622\u0623\7\u0146\2\2\u0623\u0624\7T\2\2")
        buf.write(u"\u0624\u0625\5R*\2\u0625\u0626\5T+\2\u0626Q\3\2\2\2\u0627")
        buf.write(u"\u062a\7\35\2\2\u0628\u062a\5\u0412\u020a\2\u0629\u0627")
        buf.write(u"\3\2\2\2\u0629\u0628\3\2\2\2\u062aS\3\2\2\2\u062b\u062c")
        buf.write(u"\t\3\2\2\u062cU\3\2\2\2\u062d\u062e\7D\2\2\u062eW\3\2")
        buf.write(u"\2\2\u062f\u0630\7y\2\2\u0630\u0638\7\35\2\2\u0631\u0632")
        buf.write(u"\7y\2\2\u0632\u0638\7\u0160\2\2\u0633\u0634\7y\2\2\u0634")
        buf.write(u"\u0638\7\u0162\2\2\u0635\u0636\7y\2\2\u0636\u0638\7\u0111")
        buf.write(u"\2\2\u0637\u062f\3\2\2\2\u0637\u0631\3\2\2\2\u0637\u0633")
        buf.write(u"\3\2\2\2\u0637\u0635\3\2\2\2\u0638Y\3\2\2\2\u0639\u063a")
        buf.write(u"\7\37\2\2\u063a\u063b\7\u015d\2\2\u063b\u063c\5\u0358")
        buf.write(u"\u01ad\2\u063c\u063d\5\\/\2\u063d\u066a\3\2\2\2\u063e")
        buf.write(u"\u063f\7\37\2\2\u063f\u0640\7\u015d\2\2\u0640\u0641\7")
        buf.write(u"\u00ac\2\2\u0641\u0642\7\u008d\2\2\u0642\u0643\5\u0358")
        buf.write(u"\u01ad\2\u0643\u0644\5\\/\2\u0644\u066a\3\2\2\2\u0645")
        buf.write(u"\u0646\7\37\2\2\u0646\u0647\7\u00b4\2\2\u0647\u0648\5")
        buf.write(u"\u0414\u020b\2\u0648\u0649\5\\/\2\u0649\u066a\3\2\2\2")
        buf.write(u"\u064a\u064b\7\37\2\2\u064b\u064c\7\u00b4\2\2\u064c\u064d")
        buf.write(u"\7\u00ac\2\2\u064d\u064e\7\u008d\2\2\u064e\u064f\5\u0414")
        buf.write(u"\u020b\2\u064f\u0650\5\\/\2\u0650\u066a\3\2\2\2\u0651")
        buf.write(u"\u0652\7\37\2\2\u0652\u0653\7\u0140\2\2\u0653\u0654\5")
        buf.write(u"\u0414\u020b\2\u0654\u0655\5\\/\2\u0655\u066a\3\2\2\2")
        buf.write(u"\u0656\u0657\7\37\2\2\u0657\u0658\7\u0140\2\2\u0658\u0659")
        buf.write(u"\7\u00ac\2\2\u0659\u065a\7\u008d\2\2\u065a\u065b\5\u0414")
        buf.write(u"\u020b\2\u065b\u065c\5\\/\2\u065c\u066a\3\2\2\2\u065d")
        buf.write(u"\u065e\7\37\2\2\u065e\u065f\7\u0189\2\2\u065f\u0660\5")
        buf.write(u"\u0414\u020b\2\u0660\u0661\5\\/\2\u0661\u066a\3\2\2\2")
        buf.write(u"\u0662\u0663\7\37\2\2\u0663\u0664\7\u0189\2\2\u0664\u0665")
        buf.write(u"\7\u00ac\2\2\u0665\u0666\7\u008d\2\2\u0666\u0667\5\u0414")
        buf.write(u"\u020b\2\u0667\u0668\5\\/\2\u0668\u066a\3\2\2\2\u0669")
        buf.write(u"\u0639\3\2\2\2\u0669\u063e\3\2\2\2\u0669\u0645\3\2\2")
        buf.write(u"\2\u0669\u064a\3\2\2\2\u0669\u0651\3\2\2\2\u0669\u0656")
        buf.write(u"\3\2\2\2\u0669\u065d\3\2\2\2\u0669\u0662\3\2\2\2\u066a")
        buf.write(u"[\3\2\2\2\u066b\u066c\b/\1\2\u066c\u066d\5^\60\2\u066d")
        buf.write(u"\u0673\3\2\2\2\u066e\u066f\f\3\2\2\u066f\u0670\7\b\2")
        buf.write(u"\2\u0670\u0672\5^\60\2\u0671\u066e\3\2\2\2\u0672\u0675")
        buf.write(u"\3\2\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2\u0674")
        buf.write(u"]\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0677\7\31\2\2\u0677")
        buf.write(u"\u071c\5\u00a6T\2\u0678\u0679\7\31\2\2\u0679\u067a\7")
        buf.write(u"K\2\2\u067a\u071c\5\u00a6T\2\u067b\u067c\7\37\2\2\u067c")
        buf.write(u"\u067d\5\u0258\u012d\2\u067d\u067e\5\u0430\u0219\2\u067e")
        buf.write(u"\u067f\5`\61\2\u067f\u071c\3\2\2\2\u0680\u0681\7\37\2")
        buf.write(u"\2\u0681\u0682\5\u0258\u012d\2\u0682\u0683\5\u0430\u0219")
        buf.write(u"\2\u0683\u0684\7\177\2\2\u0684\u0685\7\u00ef\2\2\u0685")
        buf.write(u"\u0686\7\u00f4\2\2\u0686\u071c\3\2\2\2\u0687\u0688\7")
        buf.write(u"\37\2\2\u0688\u0689\5\u0258\u012d\2\u0689\u068a\5\u0430")
        buf.write(u"\u0219\2\u068a\u068b\7\u0146\2\2\u068b\u068c\7\u00ef")
        buf.write(u"\2\2\u068c\u068d\7\u00f4\2\2\u068d\u071c\3\2\2\2\u068e")
        buf.write(u"\u068f\7\37\2\2\u068f\u0690\5\u0258\u012d\2\u0690\u0691")
        buf.write(u"\5\u0430\u0219\2\u0691\u0692\7\u0146\2\2\u0692\u0693")
        buf.write(u"\7\u0153\2\2\u0693\u0694\5\u042e\u0218\2\u0694\u071c")
        buf.write(u"\3\2\2\2\u0695\u0696\7\37\2\2\u0696\u0697\5\u0258\u012d")
        buf.write(u"\2\u0697\u0698\5\u0430\u0219\2\u0698\u0699\7\u0146\2")
        buf.write(u"\2\u0699\u069a\5h\65\2\u069a\u071c\3\2\2\2\u069b\u069c")
        buf.write(u"\7\37\2\2\u069c\u069d\5\u0258\u012d\2\u069d\u069e\5\u0430")
        buf.write(u"\u0219\2\u069e\u069f\7\u012d\2\2\u069f\u06a0\5h\65\2")
        buf.write(u"\u06a0\u071c\3\2\2\2\u06a1\u06a2\7\37\2\2\u06a2\u06a3")
        buf.write(u"\5\u0258\u012d\2\u06a3\u06a4\5\u0430\u0219\2\u06a4\u06a5")
        buf.write(u"\7\u0146\2\2\u06a5\u06a6\7\u0156\2\2\u06a6\u06a7\5\u0430")
        buf.write(u"\u0219\2\u06a7\u071c\3\2\2\2\u06a8\u06a9\7\177\2\2\u06a9")
        buf.write(u"\u06aa\5\u0258\u012d\2\u06aa\u06ab\7\u00ac\2\2\u06ab")
        buf.write(u"\u06ac\7\u008d\2\2\u06ac\u06ad\5\u0430\u0219\2\u06ad")
        buf.write(u"\u06ae\5b\62\2\u06ae\u071c\3\2\2\2\u06af\u06b0\7\177")
        buf.write(u"\2\2\u06b0\u06b1\5\u0258\u012d\2\u06b1\u06b2\5\u0430")
        buf.write(u"\u0219\2\u06b2\u06b3\5b\62\2\u06b3\u071c\3\2\2\2\u06b4")
        buf.write(u"\u06b5\7\37\2\2\u06b5\u06b6\5\u0258\u012d\2\u06b6\u06b7")
        buf.write(u"\5\u0430\u0219\2\u06b7\u06b8\5\u025a\u012e\2\u06b8\u06b9")
        buf.write(u"\7\u0170\2\2\u06b9\u06ba\5\u036a\u01b6\2\u06ba\u06bb")
        buf.write(u"\5d\63\2\u06bb\u06bc\5f\64\2\u06bc\u071c\3\2\2\2\u06bd")
        buf.write(u"\u06be\7\37\2\2\u06be\u06bf\5\u0258\u012d\2\u06bf\u06c0")
        buf.write(u"\5\u0430\u0219\2\u06c0\u06c1\5\u012a\u0096\2\u06c1\u071c")
        buf.write(u"\3\2\2\2\u06c2\u06c3\7\31\2\2\u06c3\u071c\5\u00b8]\2")
        buf.write(u"\u06c4\u06c5\7\u0180\2\2\u06c5\u06c6\7S\2\2\u06c6\u071c")
        buf.write(u"\5\u0418\u020d\2\u06c7\u06c8\7\177\2\2\u06c8\u06c9\7")
        buf.write(u"S\2\2\u06c9\u06ca\7\u00ac\2\2\u06ca\u06cb\7\u008d\2\2")
        buf.write(u"\u06cb\u06cc\5\u0418\u020d\2\u06cc\u06cd\5b\62\2\u06cd")
        buf.write(u"\u071c\3\2\2\2\u06ce\u06cf\7\177\2\2\u06cf\u06d0\7S\2")
        buf.write(u"\2\u06d0\u06d1\5\u0418\u020d\2\u06d1\u06d2\5b\62\2\u06d2")
        buf.write(u"\u071c\3\2\2\2\u06d3\u06d4\7\u0146\2\2\u06d4\u06d5\7")
        buf.write(u"\u018f\2\2\u06d5\u071c\7\u00fc\2\2\u06d6\u06d7\7\u0146")
        buf.write(u"\2\2\u06d7\u06d8\7\u0190\2\2\u06d8\u071c\7\u00fc\2\2")
        buf.write(u"\u06d9\u06da\7G\2\2\u06da\u06db\7\u00fd\2\2\u06db\u071c")
        buf.write(u"\5\u0418\u020d\2\u06dc\u06dd\7\u0146\2\2\u06dd\u06de")
        buf.write(u"\7\u0190\2\2\u06de\u071c\7G\2\2\u06df\u06e0\7\u0082\2")
        buf.write(u"\2\u06e0\u06e1\7\u016b\2\2\u06e1\u071c\5\u0418\u020d")
        buf.write(u"\2\u06e2\u06e3\7\u0082\2\2\u06e3\u06e4\7 \2\2\u06e4\u06e5")
        buf.write(u"\7\u016b\2\2\u06e5\u071c\5\u0418\u020d\2\u06e6\u06e7")
        buf.write(u"\7\u0082\2\2\u06e7\u06e8\7\u012c\2\2\u06e8\u06e9\7\u016b")
        buf.write(u"\2\2\u06e9\u071c\5\u0418\u020d\2\u06ea\u06eb\7\u0082")
        buf.write(u"\2\2\u06eb\u06ec\7\u016b\2\2\u06ec\u071c\7\35\2\2\u06ed")
        buf.write(u"\u06ee\7\u0082\2\2\u06ee\u06ef\7\u016b\2\2\u06ef\u071c")
        buf.write(u"\7\u017c\2\2\u06f0\u06f1\7x\2\2\u06f1\u06f2\7\u016b\2")
        buf.write(u"\2\u06f2\u071c\5\u0418\u020d\2\u06f3\u06f4\7x\2\2\u06f4")
        buf.write(u"\u06f5\7\u016b\2\2\u06f5\u071c\7\35\2\2\u06f6\u06f7\7")
        buf.write(u"x\2\2\u06f7\u06f8\7\u016b\2\2\u06f8\u071c\7\u017c\2\2")
        buf.write(u"\u06f9\u06fa\7\u0082\2\2\u06fa\u06fb\7\u0138\2\2\u06fb")
        buf.write(u"\u071c\5\u0418\u020d\2\u06fc\u06fd\7\u0082\2\2\u06fd")
        buf.write(u"\u06fe\7 \2\2\u06fe\u06ff\7\u0138\2\2\u06ff\u071c\5\u0418")
        buf.write(u"\u020d\2\u0700\u0701\7\u0082\2\2\u0701\u0702\7\u012c")
        buf.write(u"\2\2\u0702\u0703\7\u0138\2\2\u0703\u071c\5\u0418\u020d")
        buf.write(u"\2\u0704\u0705\7x\2\2\u0705\u0706\7\u0138\2\2\u0706\u071c")
        buf.write(u"\5\u0418\u020d\2\u0707\u0708\7\u00b6\2\2\u0708\u071c")
        buf.write(u"\5\u0414\u020b\2\u0709\u070a\7\u00ed\2\2\u070a\u070b")
        buf.write(u"\7\u00b6\2\2\u070b\u071c\5\u0414\u020b\2\u070c\u070d")
        buf.write(u"\7\u00f9\2\2\u070d\u071c\5\u01b0\u00d9\2\u070e\u070f")
        buf.write(u"\7\u00ef\2\2\u070f\u071c\7\u00f9\2\2\u0710\u0711\7\u010a")
        buf.write(u"\2\2\u0711\u0712\7\u0167\2\2\u0712\u071c\5\u042c\u0217")
        buf.write(u"\2\u0713\u0714\7\u0146\2\2\u0714\u0715\7\u015f\2\2\u0715")
        buf.write(u"\u071c\5\u0418\u020d\2\u0716\u0717\7\u0146\2\2\u0717")
        buf.write(u"\u071c\5h\65\2\u0718\u0719\7\u012d\2\2\u0719\u071c\5")
        buf.write(u"h\65\2\u071a\u071c\5\u012a\u0096\2\u071b\u0676\3\2\2")
        buf.write(u"\2\u071b\u0678\3\2\2\2\u071b\u067b\3\2\2\2\u071b\u0680")
        buf.write(u"\3\2\2\2\u071b\u0687\3\2\2\2\u071b\u068e\3\2\2\2\u071b")
        buf.write(u"\u0695\3\2\2\2\u071b\u069b\3\2\2\2\u071b\u06a1\3\2\2")
        buf.write(u"\2\u071b\u06a8\3\2\2\2\u071b\u06af\3\2\2\2\u071b\u06b4")
        buf.write(u"\3\2\2\2\u071b\u06bd\3\2\2\2\u071b\u06c2\3\2\2\2\u071b")
        buf.write(u"\u06c4\3\2\2\2\u071b\u06c7\3\2\2\2\u071b\u06ce\3\2\2")
        buf.write(u"\2\u071b\u06d3\3\2\2\2\u071b\u06d6\3\2\2\2\u071b\u06d9")
        buf.write(u"\3\2\2\2\u071b\u06dc\3\2\2\2\u071b\u06df\3\2\2\2\u071b")
        buf.write(u"\u06e2\3\2\2\2\u071b\u06e6\3\2\2\2\u071b\u06ea\3\2\2")
        buf.write(u"\2\u071b\u06ed\3\2\2\2\u071b\u06f0\3\2\2\2\u071b\u06f3")
        buf.write(u"\3\2\2\2\u071b\u06f6\3\2\2\2\u071b\u06f9\3\2\2\2\u071b")
        buf.write(u"\u06fc\3\2\2\2\u071b\u0700\3\2\2\2\u071b\u0704\3\2\2")
        buf.write(u"\2\u071b\u0707\3\2\2\2\u071b\u0709\3\2\2\2\u071b\u070c")
        buf.write(u"\3\2\2\2\u071b\u070e\3\2\2\2\u071b\u0710\3\2\2\2\u071b")
        buf.write(u"\u0713\3\2\2\2\u071b\u0716\3\2\2\2\u071b\u0718\3\2\2")
        buf.write(u"\2\u071b\u071a\3\2\2\2\u071c_\3\2\2\2\u071d\u071e\7\u0146")
        buf.write(u"\2\2\u071e\u071f\7n\2\2\u071f\u0723\5\u039a\u01ce\2\u0720")
        buf.write(u"\u0721\7\177\2\2\u0721\u0723\7n\2\2\u0722\u071d\3\2\2")
        buf.write(u"\2\u0722\u0720\3\2\2\2\u0723a\3\2\2\2\u0724\u0728\7:")
        buf.write(u"\2\2\u0725\u0728\7\u012f\2\2\u0726\u0728\3\2\2\2\u0727")
        buf.write(u"\u0724\3\2\2\2\u0727\u0725\3\2\2\2\u0727\u0726\3\2\2")
        buf.write(u"\2\u0728c\3\2\2\2\u0729\u072a\7I\2\2\u072a\u072d\5\u01b0")
        buf.write(u"\u00d9\2\u072b\u072d\3\2\2\2\u072c\u0729\3\2\2\2\u072c")
        buf.write(u"\u072b\3\2\2\2\u072de\3\2\2\2\u072e\u072f\7\u017d\2\2")
        buf.write(u"\u072f\u0732\5\u039a\u01ce\2\u0730\u0732\3\2\2\2\u0731")
        buf.write(u"\u072e\3\2\2\2\u0731\u0730\3\2\2\2\u0732g\3\2\2\2\u0733")
        buf.write(u"\u0734\7\r\2\2\u0734\u0735\5l\67\2\u0735\u0736\7\6\2")
        buf.write(u"\2\u0736i\3\2\2\2\u0737\u0738\7\u018f\2\2\u0738\u073b")
        buf.write(u"\5h\65\2\u0739\u073b\3\2\2\2\u073a\u0737\3\2\2\2\u073a")
        buf.write(u"\u0739\3\2\2\2\u073bk\3\2\2\2\u073c\u073d\b\67\1\2\u073d")
        buf.write(u"\u073e\5n8\2\u073e\u0744\3\2\2\2\u073f\u0740\f\3\2\2")
        buf.write(u"\u0740\u0741\7\b\2\2\u0741\u0743\5n8\2\u0742\u073f\3")
        buf.write(u"\2\2\2\u0743\u0746\3\2\2\2\u0744\u0742\3\2\2\2\u0744")
        buf.write(u"\u0745\3\2\2\2\u0745m\3\2\2\2\u0746\u0744\3\2\2\2\u0747")
        buf.write(u"\u0748\5\u0434\u021b\2\u0748\u0749\7\20\2\2\u0749\u074a")
        buf.write(u"\5\u017c\u00bf\2\u074a\u0757\3\2\2\2\u074b\u0757\5\u0434")
        buf.write(u"\u021b\2\u074c\u074d\5\u0434\u021b\2\u074d\u074e\7\7")
        buf.write(u"\2\2\u074e\u074f\5\u0434\u021b\2\u074f\u0750\7\20\2\2")
        buf.write(u"\u0750\u0751\5\u017c\u00bf\2\u0751\u0757\3\2\2\2\u0752")
        buf.write(u"\u0753\5\u0434\u021b\2\u0753\u0754\7\7\2\2\u0754\u0755")
        buf.write(u"\5\u0434\u021b\2\u0755\u0757\3\2\2\2\u0756\u0747\3\2")
        buf.write(u"\2\2\u0756\u074b\3\2\2\2\u0756\u074c\3\2\2\2\u0756\u0752")
        buf.write(u"\3\2\2\2\u0757o\3\2\2\2\u0758\u0759\7\37\2\2\u0759\u075a")
        buf.write(u"\7\u0170\2\2\u075a\u075b\5\u01b0\u00d9\2\u075b\u075c")
        buf.write(u"\5r:\2\u075cq\3\2\2\2\u075d\u075e\b:\1\2\u075e\u075f")
        buf.write(u"\5t;\2\u075f\u0765\3\2\2\2\u0760\u0761\f\3\2\2\u0761")
        buf.write(u"\u0762\7\b\2\2\u0762\u0764\5t;\2\u0763\u0760\3\2\2\2")
        buf.write(u"\u0764\u0767\3\2\2\2\u0765\u0763\3\2\2\2\u0765\u0766")
        buf.write(u"\3\2\2\2\u0766s\3\2\2\2\u0767\u0765\3\2\2\2\u0768\u0769")
        buf.write(u"\7\31\2\2\u0769\u076a\7,\2\2\u076a\u076b\5\u0368\u01b5")
        buf.write(u"\2\u076b\u076c\5b\62\2\u076c\u0783\3\2\2\2\u076d\u076e")
        buf.write(u"\7\177\2\2\u076e\u076f\7,\2\2\u076f\u0770\7\u00ac\2\2")
        buf.write(u"\u0770\u0771\7\u008d\2\2\u0771\u0772\5\u0430\u0219\2")
        buf.write(u"\u0772\u0773\5b\62\2\u0773\u0783\3\2\2\2\u0774\u0775")
        buf.write(u"\7\177\2\2\u0775\u0776\7,\2\2\u0776\u0777\5\u0430\u0219")
        buf.write(u"\2\u0777\u0778\5b\62\2\u0778\u0783\3\2\2\2\u0779\u077a")
        buf.write(u"\7\37\2\2\u077a\u077b\7,\2\2\u077b\u077c\5\u0430\u0219")
        buf.write(u"\2\u077c\u077d\5\u025a\u012e\2\u077d\u077e\7\u0170\2")
        buf.write(u"\2\u077e\u077f\5\u036a\u01b6\2\u077f\u0780\5d\63\2\u0780")
        buf.write(u"\u0781\5b\62\2\u0781\u0783\3\2\2\2\u0782\u0768\3\2\2")
        buf.write(u"\2\u0782\u076d\3\2\2\2\u0782\u0774\3\2\2\2\u0782\u0779")
        buf.write(u"\3\2\2\2\u0783u\3\2\2\2\u0784\u0785\7F\2\2\u0785\u0789")
        buf.write(u"\5\u02fa\u017e\2\u0786\u0787\7F\2\2\u0787\u0789\7\35")
        buf.write(u"\2\2\u0788\u0784\3\2\2\2\u0788\u0786\3\2\2\2\u0789w\3")
        buf.write(u"\2\2\2\u078a\u078b\7X\2\2\u078b\u078c\5\u0084C\2\u078c")
        buf.write(u"\u078d\5\u0414\u020b\2\u078d\u078e\5\u00be`\2\u078e\u078f")
        buf.write(u"\5\u0086D\2\u078f\u0790\5z>\2\u0790\u0791\5|?\2\u0791")
        buf.write(u"\u0793\5\u0088E\2\u0792\u0794\7\u018f\2\2\u0793\u0792")
        buf.write(u"\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0795\3\2\2\2\u0795")
        buf.write(u"\u0796\5~@\2\u0796\u07a1\3\2\2\2\u0797\u0798\7X\2\2\u0798")
        buf.write(u"\u0799\5\u0302\u0182\2\u0799\u079a\7\u0167\2\2\u079a")
        buf.write(u"\u079c\5|?\2\u079b\u079d\7\u018f\2\2\u079c\u079b\3\2")
        buf.write(u"\2\2\u079c\u079d\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u079f")
        buf.write(u"\5~@\2\u079f\u07a1\3\2\2\2\u07a0\u078a\3\2\2\2\u07a0")
        buf.write(u"\u0797\3\2\2\2\u07a1y\3\2\2\2\u07a2\u07a3\t\4\2\2\u07a3")
        buf.write(u"{\3\2\2\2\u07a4\u07a8\5\u042a\u0216\2\u07a5\u07a8\7\u0154")
        buf.write(u"\2\2\u07a6\u07a8\7\u0155\2\2\u07a7\u07a4\3\2\2\2\u07a7")
        buf.write(u"\u07a5\3\2\2\2\u07a7\u07a6\3\2\2\2\u07a8}\3\2\2\2\u07a9")
        buf.write(u"\u07af\5\u0080A\2\u07aa\u07ab\7\r\2\2\u07ab\u07ac\5\u008c")
        buf.write(u"G\2\u07ac\u07ad\7\6\2\2\u07ad\u07af\3\2\2\2\u07ae\u07a9")
        buf.write(u"\3\2\2\2\u07ae\u07aa\3\2\2\2\u07af\177\3\2\2\2\u07b0")
        buf.write(u"\u07b5\bA\1\2\u07b1\u07b2\f\4\2\2\u07b2\u07b4\5\u0082")
        buf.write(u"B\2\u07b3\u07b1\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3")
        buf.write(u"\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u0081\3\2\2\2\u07b7")
        buf.write(u"\u07b5\3\2\2\2\u07b8\u07d9\7\63\2\2\u07b9\u07d9\7\u00fc")
        buf.write(u"\2\2\u07ba\u07bb\7t\2\2\u07bb\u07bc\5\u029e\u0150\2\u07bc")
        buf.write(u"\u07bd\5\u042a\u0216\2\u07bd\u07d9\3\2\2\2\u07be\u07bf")
        buf.write(u"\7\u00f4\2\2\u07bf\u07c0\5\u029e\u0150\2\u07c0\u07c1")
        buf.write(u"\5\u042a\u0216\2\u07c1\u07d9\3\2\2\2\u07c2\u07d9\7\\")
        buf.write(u"\2\2\u07c3\u07d9\7\u00a8\2\2\u07c4\u07c5\7\u011d\2\2")
        buf.write(u"\u07c5\u07c6\5\u029e\u0150\2\u07c6\u07c7\5\u042a\u0216")
        buf.write(u"\2\u07c7\u07d9\3\2\2\2\u07c8\u07c9\7\u0087\2\2\u07c9")
        buf.write(u"\u07ca\5\u029e\u0150\2\u07ca\u07cb\5\u042a\u0216\2\u07cb")
        buf.write(u"\u07d9\3\2\2\2\u07cc\u07cd\7\u0099\2\2\u07cd\u07ce\7")
        buf.write(u"\u011d\2\2\u07ce\u07d9\5\u00c0a\2\u07cf\u07d0\7\u0099")
        buf.write(u"\2\2\u07d0\u07d1\7\u011d\2\2\u07d1\u07d9\7\f\2\2\u07d2")
        buf.write(u"\u07d3\7\u0099\2\2\u07d3\u07d4\7\u00ef\2\2\u07d4\u07d5")
        buf.write(u"\7\u00f4\2\2\u07d5\u07d9\5\u00c0a\2\u07d6\u07d7\7\u0083")
        buf.write(u"\2\2\u07d7\u07d9\5\u042a\u0216\2\u07d8\u07b8\3\2\2\2")
        buf.write(u"\u07d8\u07b9\3\2\2\2\u07d8\u07ba\3\2\2\2\u07d8\u07be")
        buf.write(u"\3\2\2\2\u07d8\u07c2\3\2\2\2\u07d8\u07c3\3\2\2\2\u07d8")
        buf.write(u"\u07c4\3\2\2\2\u07d8\u07c8\3\2\2\2\u07d8\u07cc\3\2\2")
        buf.write(u"\2\u07d8\u07cf\3\2\2\2\u07d8\u07d2\3\2\2\2\u07d8\u07d6")
        buf.write(u"\3\2\2\2\u07d9\u0083\3\2\2\2\u07da\u07dd\7\63\2\2\u07db")
        buf.write(u"\u07dd\3\2\2\2\u07dc\u07da\3\2\2\2\u07dc\u07db\3\2\2")
        buf.write(u"\2\u07dd\u0085\3\2\2\2\u07de\u07df\7\u018f\2\2\u07df")
        buf.write(u"\u07e2\7\u00fc\2\2\u07e0\u07e2\3\2\2\2\u07e1\u07de\3")
        buf.write(u"\2\2\2\u07e1\u07e0\3\2\2\2\u07e2\u0087\3\2\2\2\u07e3")
        buf.write(u"\u07e4\5\u008aF\2\u07e4\u07e5\7u\2\2\u07e5\u07e6\5\u042a")
        buf.write(u"\u0216\2\u07e6\u07e9\3\2\2\2\u07e7\u07e9\3\2\2\2\u07e8")
        buf.write(u"\u07e3\3\2\2\2\u07e8\u07e7\3\2\2\2\u07e9\u0089\3\2\2")
        buf.write(u"\2\u07ea\u07ed\7\u017d\2\2\u07eb\u07ed\3\2\2\2\u07ec")
        buf.write(u"\u07ea\3\2\2\2\u07ec\u07eb\3\2\2\2\u07ed\u008b\3\2\2")
        buf.write(u"\2\u07ee\u07ef\bG\1\2\u07ef\u07f0\5\u008eH\2\u07f0\u07f6")
        buf.write(u"\3\2\2\2\u07f1\u07f2\f\3\2\2\u07f2\u07f3\7\b\2\2\u07f3")
        buf.write(u"\u07f5\5\u008eH\2\u07f4\u07f1\3\2\2\2\u07f5\u07f8\3\2")
        buf.write(u"\2\2\u07f6\u07f4\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u008d")
        buf.write(u"\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f9\u07fa\5\u0434\u021b")
        buf.write(u"\2\u07fa\u07fb\5\u0090I\2\u07fb\u008f\3\2\2\2\u07fc\u0805")
        buf.write(u"\5@!\2\u07fd\u0805\5\u00f2z\2\u07fe\u0805\7\f\2\2\u07ff")
        buf.write(u"\u0800\7\r\2\2\u0800\u0801\5\u0092J\2\u0801\u0802\7\6")
        buf.write(u"\2\2\u0802\u0805\3\2\2\2\u0803\u0805\3\2\2\2\u0804\u07fc")
        buf.write(u"\3\2\2\2\u0804\u07fd\3\2\2\2\u0804\u07fe\3\2\2\2\u0804")
        buf.write(u"\u07ff\3\2\2\2\u0804\u0803\3\2\2\2\u0805\u0091\3\2\2")
        buf.write(u"\2\u0806\u0807\bJ\1\2\u0807\u0808\5\u0094K\2\u0808\u080e")
        buf.write(u"\3\2\2\2\u0809\u080a\f\3\2\2\u080a\u080b\7\b\2\2\u080b")
        buf.write(u"\u080d\5\u0094K\2\u080c\u0809\3\2\2\2\u080d\u0810\3\2")
        buf.write(u"\2\2\u080e\u080c\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0093")
        buf.write(u"\3\2\2\2\u0810\u080e\3\2\2\2\u0811\u0812\5@!\2\u0812")
        buf.write(u"\u0095\3\2\2\2\u0813\u0814\7Z\2\2\u0814\u0815\5\u0098")
        buf.write(u"M\2\u0815\u0816\7\u015d\2\2\u0816\u0817\5\u0414\u020b")
        buf.write(u"\2\u0817\u0818\7\r\2\2\u0818\u0819\5\u009aN\2\u0819\u081a")
        buf.write(u"\7\6\2\2\u081a\u081b\5\u00d4k\2\u081b\u081c\5\u00d6l")
        buf.write(u"\2\u081c\u081d\5\u00d8m\2\u081d\u081e\5\u00dan\2\u081e")
        buf.write(u"\u0848\3\2\2\2\u081f\u0820\7Z\2\2\u0820\u0821\5\u0098")
        buf.write(u"M\2\u0821\u0822\7\u015d\2\2\u0822\u0823\7\u00ac\2\2\u0823")
        buf.write(u"\u0824\7\u00ef\2\2\u0824\u0825\7\u008d\2\2\u0825\u0826")
        buf.write(u"\5\u0414\u020b\2\u0826\u0827\7\r\2\2\u0827\u0828\5\u009a")
        buf.write(u"N\2\u0828\u0829\7\6\2\2\u0829\u082a\5\u00d4k\2\u082a")
        buf.write(u"\u082b\5\u00d6l\2\u082b\u082c\5\u00d8m\2\u082c\u082d")
        buf.write(u"\5\u00dan\2\u082d\u0848\3\2\2\2\u082e\u082f\7Z\2\2\u082f")
        buf.write(u"\u0830\5\u0098M\2\u0830\u0831\7\u015d\2\2\u0831\u0832")
        buf.write(u"\5\u0414\u020b\2\u0832\u0833\7\u00f9\2\2\u0833\u0834")
        buf.write(u"\5\u01b0\u00d9\2\u0834\u0835\5\u009cO\2\u0835\u0836\5")
        buf.write(u"\u00d6l\2\u0836\u0837\5\u00d8m\2\u0837\u0838\5\u00da")
        buf.write(u"n\2\u0838\u0848\3\2\2\2\u0839\u083a\7Z\2\2\u083a\u083b")
        buf.write(u"\5\u0098M\2\u083b\u083c\7\u015d\2\2\u083c\u083d\7\u00ac")
        buf.write(u"\2\2\u083d\u083e\7\u00ef\2\2\u083e\u083f\7\u008d\2\2")
        buf.write(u"\u083f\u0840\5\u0414\u020b\2\u0840\u0841\7\u00f9\2\2")
        buf.write(u"\u0841\u0842\5\u01b0\u00d9\2\u0842\u0843\5\u009cO\2\u0843")
        buf.write(u"\u0844\5\u00d6l\2\u0844\u0845\5\u00d8m\2\u0845\u0846")
        buf.write(u"\5\u00dan\2\u0846\u0848\3\2\2\2\u0847\u0813\3\2\2\2\u0847")
        buf.write(u"\u081f\3\2\2\2\u0847\u082e\3\2\2\2\u0847\u0839\3\2\2")
        buf.write(u"\2\u0848\u0097\3\2\2\2\u0849\u0856\7\u0162\2\2\u084a")
        buf.write(u"\u0856\7\u0160\2\2\u084b\u084c\7\u00da\2\2\u084c\u0856")
        buf.write(u"\7\u0162\2\2\u084d\u084e\7\u00da\2\2\u084e\u0856\7\u0160")
        buf.write(u"\2\2\u084f\u0850\7\u00a1\2\2\u0850\u0856\7\u0162\2\2")
        buf.write(u"\u0851\u0852\7\u00a1\2\2\u0852\u0856\7\u0160\2\2\u0853")
        buf.write(u"\u0856\7\u0179\2\2\u0854\u0856\3\2\2\2\u0855\u0849\3")
        buf.write(u"\2\2\2\u0855\u084a\3\2\2\2\u0855\u084b\3\2\2\2\u0855")
        buf.write(u"\u084d\3\2\2\2\u0855\u084f\3\2\2\2\u0855\u0851\3\2\2")
        buf.write(u"\2\u0855\u0853\3\2\2\2\u0855\u0854\3\2\2\2\u0856\u0099")
        buf.write(u"\3\2\2\2\u0857\u085a\5\u009eP\2\u0858\u085a\3\2\2\2\u0859")
        buf.write(u"\u0857\3\2\2\2\u0859\u0858\3\2\2\2\u085a\u009b\3\2\2")
        buf.write(u"\2\u085b\u085c\7\r\2\2\u085c\u085d\5\u00a0Q\2\u085d\u085e")
        buf.write(u"\7\6\2\2\u085e\u0861\3\2\2\2\u085f\u0861\3\2\2\2\u0860")
        buf.write(u"\u085b\3\2\2\2\u0860\u085f\3\2\2\2\u0861\u009d\3\2\2")
        buf.write(u"\2\u0862\u0863\bP\1\2\u0863\u0864\5\u00a2R\2\u0864\u086a")
        buf.write(u"\3\2\2\2\u0865\u0866\f\3\2\2\u0866\u0867\7\b\2\2\u0867")
        buf.write(u"\u0869\5\u00a2R\2\u0868\u0865\3\2\2\2\u0869\u086c\3\2")
        buf.write(u"\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u009f")
        buf.write(u"\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u086e\bQ\1\2\u086e")
        buf.write(u"\u086f\5\u00a4S\2\u086f\u0875\3\2\2\2\u0870\u0871\f\3")
        buf.write(u"\2\2\u0871\u0872\7\b\2\2\u0872\u0874\5\u00a4S\2\u0873")
        buf.write(u"\u0870\3\2\2\2\u0874\u0877\3\2\2\2\u0875\u0873\3\2\2")
        buf.write(u"\2\u0875\u0876\3\2\2\2\u0876\u00a1\3\2\2\2\u0877\u0875")
        buf.write(u"\3\2\2\2\u0878\u087c\5\u00a6T\2\u0879\u087c\5\u00b2Z")
        buf.write(u"\2\u087a\u087c\5\u00b8]\2\u087b\u0878\3\2\2\2\u087b\u0879")
        buf.write(u"\3\2\2\2\u087b\u087a\3\2\2\2\u087c\u00a3\3\2\2\2\u087d")
        buf.write(u"\u0880\5\u00a8U\2\u087e\u0880\5\u00b8]\2\u087f\u087d")
        buf.write(u"\3\2\2\2\u087f\u087e\3\2\2\2\u0880\u00a5\3\2\2\2\u0881")
        buf.write(u"\u0882\5\u0430\u0219\2\u0882\u0883\5\u036a\u01b6\2\u0883")
        buf.write(u"\u0884\5\u0126\u0094\2\u0884\u0885\5\u00aaV\2\u0885\u00a7")
        buf.write(u"\3\2\2\2\u0886\u0887\5\u0430\u0219\2\u0887\u0888\7\u018f")
        buf.write(u"\2\2\u0888\u0889\7\u0101\2\2\u0889\u088a\5\u00aaV\2\u088a")
        buf.write(u"\u00a9\3\2\2\2\u088b\u0890\bV\1\2\u088c\u088d\f\4\2\2")
        buf.write(u"\u088d\u088f\5\u00acW\2\u088e\u088c\3\2\2\2\u088f\u0892")
        buf.write(u"\3\2\2\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2\2\2\u0891")
        buf.write(u"\u00ab\3\2\2\2\u0892\u0890\3\2\2\2\u0893\u0894\7S\2\2")
        buf.write(u"\u0894\u0895\5\u0418\u020d\2\u0895\u0896\5\u00aeX\2\u0896")
        buf.write(u"\u089c\3\2\2\2\u0897\u089c\5\u00aeX\2\u0898\u089c\5\u00b0")
        buf.write(u"Y\2\u0899\u089a\7I\2\2\u089a\u089c\5\u01b0\u00d9\2\u089b")
        buf.write(u"\u0893\3\2\2\2\u089b\u0897\3\2\2\2\u089b\u0898\3\2\2")
        buf.write(u"\2\u089b\u0899\3\2\2\2\u089c\u00ad\3\2\2\2\u089d\u089e")
        buf.write(u"\7\u00ef\2\2\u089e\u08b8\7\u00f4\2\2\u089f\u08b8\7\u00f4")
        buf.write(u"\2\2\u08a0\u08a1\7\u0176\2\2\u08a1\u08a2\5\u022c\u0117")
        buf.write(u"\2\u08a2\u08a3\5\u00dco\2\u08a3\u08b8\3\2\2\2\u08a4\u08a5")
        buf.write(u"\7\u0118\2\2\u08a5\u08a6\7\u00ca\2\2\u08a6\u08a7\5\u022c")
        buf.write(u"\u0117\2\u08a7\u08a8\5\u00dco\2\u08a8\u08b8\3\2\2\2\u08a9")
        buf.write(u"\u08aa\7C\2\2\u08aa\u08ab\7\r\2\2\u08ab\u08ac\5\u039a")
        buf.write(u"\u01ce\2\u08ac\u08ad\7\6\2\2\u08ad\u08ae\5\u00bc_\2\u08ae")
        buf.write(u"\u08b8\3\2\2\2\u08af\u08b0\7n\2\2\u08b0\u08b8\5\u039c")
        buf.write(u"\u01cf\2\u08b1\u08b2\7\u0125\2\2\u08b2\u08b3\5\u0414")
        buf.write(u"\u020b\2\u08b3\u08b4\5\u00be`\2\u08b4\u08b5\5\u00c4c")
        buf.write(u"\2\u08b5\u08b6\5\u00ccg\2\u08b6\u08b8\3\2\2\2\u08b7\u089d")
        buf.write(u"\3\2\2\2\u08b7\u089f\3\2\2\2\u08b7\u08a0\3\2\2\2\u08b7")
        buf.write(u"\u08a4\3\2\2\2\u08b7\u08a9\3\2\2\2\u08b7\u08af\3\2\2")
        buf.write(u"\2\u08b7\u08b1\3\2\2\2\u08b8\u00af\3\2\2\2\u08b9\u08c1")
        buf.write(u"\7p\2\2\u08ba\u08bb\7\u00ef\2\2\u08bb\u08c1\7p\2\2\u08bc")
        buf.write(u"\u08bd\7\u00b8\2\2\u08bd\u08c1\7q\2\2\u08be\u08bf\7\u00b8")
        buf.write(u"\2\2\u08bf\u08c1\7\u00ae\2\2\u08c0\u08b9\3\2\2\2\u08c0")
        buf.write(u"\u08ba\3\2\2\2\u08c0\u08bc\3\2\2\2\u08c0\u08be\3\2\2")
        buf.write(u"\2\u08c1\u00b1\3\2\2\2\u08c2\u08c3\7\u00d6\2\2\u08c3")
        buf.write(u"\u08c4\5\u0414\u020b\2\u08c4\u08c5\5\u00b4[\2\u08c5\u00b3")
        buf.write(u"\3\2\2\2\u08c6\u08cf\b[\1\2\u08c7\u08c8\f\5\2\2\u08c8")
        buf.write(u"\u08c9\7\u00b2\2\2\u08c9\u08ce\5\u00b6\\\2\u08ca\u08cb")
        buf.write(u"\f\4\2\2\u08cb\u08cc\7\u008a\2\2\u08cc\u08ce\5\u00b6")
        buf.write(u"\\\2\u08cd\u08c7\3\2\2\2\u08cd\u08ca\3\2\2\2\u08ce\u08d1")
        buf.write(u"\3\2\2\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0")
        buf.write(u"\u00b5\3\2\2\2\u08d1\u08cf\3\2\2\2\u08d2\u08d3\t\5\2")
        buf.write(u"\2\u08d3\u00b7\3\2\2\2\u08d4\u08d5\7S\2\2\u08d5\u08d6")
        buf.write(u"\5\u0418\u020d\2\u08d6\u08d7\5\u00ba^\2\u08d7\u08da\3")
        buf.write(u"\2\2\2\u08d8\u08da\5\u00ba^\2\u08d9\u08d4\3\2\2\2\u08d9")
        buf.write(u"\u08d8\3\2\2\2\u08da\u00b9\3\2\2\2\u08db\u08dc\7C\2\2")
        buf.write(u"\u08dc\u08dd\7\r\2\2\u08dd\u08de\5\u039a\u01ce\2\u08de")
        buf.write(u"\u08df\7\6\2\2\u08df\u08e0\5\u016a\u00b6\2\u08e0\u0912")
        buf.write(u"\3\2\2\2\u08e1\u08e2\7\u0176\2\2\u08e2\u08e3\7\r\2\2")
        buf.write(u"\u08e3\u08e4\5\u00c0a\2\u08e4\u08e5\7\6\2\2\u08e5\u08e6")
        buf.write(u"\5\u022c\u0117\2\u08e6\u08e7\5\u00dco\2\u08e7\u08e8\5")
        buf.write(u"\u016a\u00b6\2\u08e8\u0912\3\2\2\2\u08e9\u08ea\7\u0176")
        buf.write(u"\2\2\u08ea\u08eb\5\u00dep\2\u08eb\u08ec\5\u016a\u00b6")
        buf.write(u"\2\u08ec\u0912\3\2\2\2\u08ed\u08ee\7\u0118\2\2\u08ee")
        buf.write(u"\u08ef\7\u00ca\2\2\u08ef\u08f0\7\r\2\2\u08f0\u08f1\5")
        buf.write(u"\u00c0a\2\u08f1\u08f2\7\6\2\2\u08f2\u08f3\5\u022c\u0117")
        buf.write(u"\2\u08f3\u08f4\5\u00dco\2\u08f4\u08f5\5\u016a\u00b6\2")
        buf.write(u"\u08f5\u0912\3\2\2\2\u08f6\u08f7\7\u0118\2\2\u08f7\u08f8")
        buf.write(u"\7\u00ca\2\2\u08f8\u08f9\5\u00dep\2\u08f9\u08fa\5\u016a")
        buf.write(u"\u00b6\2\u08fa\u0912\3\2\2\2\u08fb\u08fc\7\u0089\2\2")
        buf.write(u"\u08fc\u08fd\5\u01fe\u0100\2\u08fd\u08fe\7\r\2\2\u08fe")
        buf.write(u"\u08ff\5\u00c6d\2\u08ff\u0900\7\6\2\2\u0900\u0901\5\u022c")
        buf.write(u"\u0117\2\u0901\u0902\5\u00dco\2\u0902\u0903\5\u00caf")
        buf.write(u"\2\u0903\u0904\5\u016a\u00b6\2\u0904\u0912\3\2\2\2\u0905")
        buf.write(u"\u0906\7\u009a\2\2\u0906\u0907\7\u00ca\2\2\u0907\u0908")
        buf.write(u"\7\r\2\2\u0908\u0909\5\u00c0a\2\u0909\u090a\7\6\2\2\u090a")
        buf.write(u"\u090b\7\u0125\2\2\u090b\u090c\5\u0414\u020b\2\u090c")
        buf.write(u"\u090d\5\u00be`\2\u090d\u090e\5\u00c4c\2\u090e\u090f")
        buf.write(u"\5\u00ccg\2\u090f\u0910\5\u016a\u00b6\2\u0910\u0912\3")
        buf.write(u"\2\2\2\u0911\u08db\3\2\2\2\u0911\u08e1\3\2\2\2\u0911")
        buf.write(u"\u08e9\3\2\2\2\u0911\u08ed\3\2\2\2\u0911\u08f6\3\2\2")
        buf.write(u"\2\u0911\u08fb\3\2\2\2\u0911\u0905\3\2\2\2\u0912\u00bb")
        buf.write(u"\3\2\2\2\u0913\u0914\7\u00ed\2\2\u0914\u0917\7\u00b6")
        buf.write(u"\2\2\u0915\u0917\3\2\2\2\u0916\u0913\3\2\2\2\u0916\u0915")
        buf.write(u"\3\2\2\2\u0917\u00bd\3\2\2\2\u0918\u0919\7\r\2\2\u0919")
        buf.write(u"\u091a\5\u00c0a\2\u091a\u091b\7\6\2\2\u091b\u091e\3\2")
        buf.write(u"\2\2\u091c\u091e\3\2\2\2\u091d\u0918\3\2\2\2\u091d\u091c")
        buf.write(u"\3\2\2\2\u091e\u00bf\3\2\2\2\u091f\u0920\ba\1\2\u0920")
        buf.write(u"\u0921\5\u00c2b\2\u0921\u0927\3\2\2\2\u0922\u0923\f\3")
        buf.write(u"\2\2\u0923\u0924\7\b\2\2\u0924\u0926\5\u00c2b\2\u0925")
        buf.write(u"\u0922\3\2\2\2\u0926\u0929\3\2\2\2\u0927\u0925\3\2\2")
        buf.write(u"\2\u0927\u0928\3\2\2\2\u0928\u00c1\3\2\2\2\u0929\u0927")
        buf.write(u"\3\2\2\2\u092a\u092b\5\u0430\u0219\2\u092b\u00c3\3\2")
        buf.write(u"\2\2\u092c\u092d\7\u00e0\2\2\u092d\u0934\7\u009e\2\2")
        buf.write(u"\u092e\u092f\7\u00e0\2\2\u092f\u0934\7\u010c\2\2\u0930")
        buf.write(u"\u0931\7\u00e0\2\2\u0931\u0934\7\u014b\2\2\u0932\u0934")
        buf.write(u"\3\2\2\2\u0933\u092c\3\2\2\2\u0933\u092e\3\2\2\2\u0933")
        buf.write(u"\u0930\3\2\2\2\u0933\u0932\3\2\2\2\u0934\u00c5\3\2\2")
        buf.write(u"\2\u0935\u0936\bd\1\2\u0936\u0937\5\u00c8e\2\u0937\u093d")
        buf.write(u"\3\2\2\2\u0938\u0939\f\3\2\2\u0939\u093a\7\b\2\2\u093a")
        buf.write(u"\u093c\5\u00c8e\2\u093b\u0938\3\2\2\2\u093c\u093f\3\2")
        buf.write(u"\2\2\u093d\u093b\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u00c7")
        buf.write(u"\3\2\2\2\u093f\u093d\3\2\2\2\u0940\u0941\5\u0202\u0102")
        buf.write(u"\2\u0941\u0942\7\u018f\2\2\u0942\u0943\5\u0240\u0121")
        buf.write(u"\2\u0943\u094c\3\2\2\2\u0944\u0945\5\u0202\u0102\2\u0945")
        buf.write(u"\u0946\7\u018f\2\2\u0946\u0947\7\u00ff\2\2\u0947\u0948")
        buf.write(u"\7\r\2\2\u0948\u0949\5\u0240\u0121\2\u0949\u094a\7\6")
        buf.write(u"\2\2\u094a\u094c\3\2\2\2\u094b\u0940\3\2\2\2\u094b\u0944")
        buf.write(u"\3\2\2\2\u094c\u00c9\3\2\2\2\u094d\u094e\7\u018c\2\2")
        buf.write(u"\u094e\u094f\7\r\2\2\u094f\u0950\5\u039a\u01ce\2\u0950")
        buf.write(u"\u0951\7\6\2\2\u0951\u0954\3\2\2\2\u0952\u0954\3\2\2")
        buf.write(u"\2\u0953\u094d\3\2\2\2\u0953\u0952\3\2\2\2\u0954\u00cb")
        buf.write(u"\3\2\2\2\u0955\u095f\5\u00ceh\2\u0956\u095f\5\u00d0i")
        buf.write(u"\2\u0957\u0958\5\u00ceh\2\u0958\u0959\5\u00d0i\2\u0959")
        buf.write(u"\u095f\3\2\2\2\u095a\u095b\5\u00d0i\2\u095b\u095c\5\u00ce")
        buf.write(u"h\2\u095c\u095f\3\2\2\2\u095d\u095f\3\2\2\2\u095e\u0955")
        buf.write(u"\3\2\2\2\u095e\u0956\3\2\2\2\u095e\u0957\3\2\2\2\u095e")
        buf.write(u"\u095a\3\2\2\2\u095e\u095d\3\2\2\2\u095f\u00cd\3\2\2")
        buf.write(u"\2\u0960\u0961\7\u00fd\2\2\u0961\u0962\7\u017b\2\2\u0962")
        buf.write(u"\u0963\5\u00d2j\2\u0963\u00cf\3\2\2\2\u0964\u0965\7\u00fd")
        buf.write(u"\2\2\u0965\u0966\7s\2\2\u0966\u0967\5\u00d2j\2\u0967")
        buf.write(u"\u00d1\3\2\2\2\u0968\u0969\7\u00ed\2\2\u0969\u0971\7")
        buf.write(u"\30\2\2\u096a\u0971\7\u012f\2\2\u096b\u0971\7:\2\2\u096c")
        buf.write(u"\u096d\7\u0146\2\2\u096d\u0971\7\u00f4\2\2\u096e\u096f")
        buf.write(u"\7\u0146\2\2\u096f\u0971\7n\2\2\u0970\u0968\3\2\2\2\u0970")
        buf.write(u"\u096a\3\2\2\2\u0970\u096b\3\2\2\2\u0970\u096c\3\2\2")
        buf.write(u"\2\u0970\u096e\3\2\2\2\u0971\u00d3\3\2\2\2\u0972\u0973")
        buf.write(u"\7\u00b7\2\2\u0973\u0974\7\r\2\2\u0974\u0975\5\u0412")
        buf.write(u"\u020a\2\u0975\u0976\7\6\2\2\u0976\u0979\3\2\2\2\u0977")
        buf.write(u"\u0979\3\2\2\2\u0978\u0972\3\2\2\2\u0978\u0977\3\2\2")
        buf.write(u"\2\u0979\u00d5\3\2\2\2\u097a\u097b\7\u018f\2\2\u097b")
        buf.write(u"\u0982\5h\65\2\u097c\u097d\7\u018f\2\2\u097d\u0982\7")
        buf.write(u"\u00fc\2\2\u097e\u097f\7\u0190\2\2\u097f\u0982\7\u00fc")
        buf.write(u"\2\2\u0980\u0982\3\2\2\2\u0981\u097a\3\2\2\2\u0981\u097c")
        buf.write(u"\3\2\2\2\u0981\u097e\3\2\2\2\u0981\u0980\3\2\2\2\u0982")
        buf.write(u"\u00d7\3\2\2\2\u0983\u0984\7\u00fd\2\2\u0984\u0985\7")
        buf.write(u"N\2\2\u0985\u0990\7\177\2\2\u0986\u0987\7\u00fd\2\2\u0987")
        buf.write(u"\u0988\7N\2\2\u0988\u0989\7s\2\2\u0989\u0990\7\u0137")
        buf.write(u"\2\2\u098a\u098b\7\u00fd\2\2\u098b\u098c\7N\2\2\u098c")
        buf.write(u"\u098d\7\u0117\2\2\u098d\u0990\7\u0137\2\2\u098e\u0990")
        buf.write(u"\3\2\2\2\u098f\u0983\3\2\2\2\u098f\u0986\3\2\2\2\u098f")
        buf.write(u"\u098a\3\2\2\2\u098f\u098e\3\2\2\2\u0990\u00d9\3\2\2")
        buf.write(u"\2\u0991\u0992\7\u015f\2\2\u0992\u0995\5\u0418\u020d")
        buf.write(u"\2\u0993\u0995\3\2\2\2\u0994\u0991\3\2\2\2\u0994\u0993")
        buf.write(u"\3\2\2\2\u0995\u00db\3\2\2\2\u0996\u0997\7\u017d\2\2")
        buf.write(u"\u0997\u0998\7\u00b4\2\2\u0998\u0999\7\u015f\2\2\u0999")
        buf.write(u"\u099c\5\u0418\u020d\2\u099a\u099c\3\2\2\2\u099b\u0996")
        buf.write(u"\3\2\2\2\u099b\u099a\3\2\2\2\u099c\u00dd\3\2\2\2\u099d")
        buf.write(u"\u099e\7\u017d\2\2\u099e\u099f\7\u00b4\2\2\u099f\u09a0")
        buf.write(u"\5\u0420\u0211\2\u09a0\u00df\3\2\2\2\u09a1\u09a2\7Z\2")
        buf.write(u"\2\u09a2\u09a3\5\u0098M\2\u09a3\u09a4\7\u015d\2\2\u09a4")
        buf.write(u"\u09a5\5\u00e2r\2\u09a5\u09a6\7&\2\2\u09a6\u09a7\5\u0300")
        buf.write(u"\u0181\2\u09a7\u09a8\5\u00e4s\2\u09a8\u00e1\3\2\2\2\u09a9")
        buf.write(u"\u09aa\5\u0414\u020b\2\u09aa\u09ab\5\u00be`\2\u09ab\u09ac")
        buf.write(u"\5\u00d6l\2\u09ac\u09ad\5\u00d8m\2\u09ad\u09ae\5\u00da")
        buf.write(u"n\2\u09ae\u00e3\3\2\2\2\u09af\u09b0\7\u018f\2\2\u09b0")
        buf.write(u"\u09b6\7g\2\2\u09b1\u09b2\7\u018f\2\2\u09b2\u09b3\7\u00ed")
        buf.write(u"\2\2\u09b3\u09b6\7g\2\2\u09b4\u09b6\3\2\2\2\u09b5\u09af")
        buf.write(u"\3\2\2\2\u09b5\u09b1\3\2\2\2\u09b5\u09b4\3\2\2\2\u09b6")
        buf.write(u"\u00e5\3\2\2\2\u09b7\u09b8\7Z\2\2\u09b8\u09b9\5\u0098")
        buf.write(u"M\2\u09b9\u09ba\7\u0140\2\2\u09ba\u09bb\5\u0414\u020b")
        buf.write(u"\2\u09bb\u09bc\5\u00eav\2\u09bc\u00e7\3\2\2\2\u09bd\u09be")
        buf.write(u"\7\37\2\2\u09be\u09bf\7\u0140\2\2\u09bf\u09c0\5\u0414")
        buf.write(u"\u020b\2\u09c0\u09c1\5\u00ecw\2\u09c1\u09ca\3\2\2\2\u09c2")
        buf.write(u"\u09c3\7\37\2\2\u09c3\u09c4\7\u0140\2\2\u09c4\u09c5\7")
        buf.write(u"\u00ac\2\2\u09c5\u09c6\7\u008d\2\2\u09c6\u09c7\5\u0414")
        buf.write(u"\u020b\2\u09c7\u09c8\5\u00ecw\2\u09c8\u09ca\3\2\2\2\u09c9")
        buf.write(u"\u09bd\3\2\2\2\u09c9\u09c2\3\2\2\2\u09ca\u00e9\3\2\2")
        buf.write(u"\2\u09cb\u09ce\5\u00ecw\2\u09cc\u09ce\3\2\2\2\u09cd\u09cb")
        buf.write(u"\3\2\2\2\u09cd\u09cc\3\2\2\2\u09ce\u00eb\3\2\2\2\u09cf")
        buf.write(u"\u09d0\bw\1\2\u09d0\u09d1\5\u00eex\2\u09d1\u09d6\3\2")
        buf.write(u"\2\2\u09d2\u09d3\f\3\2\2\u09d3\u09d5\5\u00eex\2\u09d4")
        buf.write(u"\u09d2\3\2\2\2\u09d5\u09d8\3\2\2\2\u09d6\u09d4\3\2\2")
        buf.write(u"\2\u09d6\u09d7\3\2\2\2\u09d7\u00ed\3\2\2\2\u09d8\u09d6")
        buf.write(u"\3\2\2\2\u09d9\u09da\78\2\2\u09da\u09f9\5\u00f2z\2\u09db")
        buf.write(u"\u09f9\7f\2\2\u09dc\u09dd\7\u00ed\2\2\u09dd\u09f9\7f")
        buf.write(u"\2\2\u09de\u09df\7\u00b3\2\2\u09df\u09e0\5\u00f0y\2\u09e0")
        buf.write(u"\u09e1\5\u00f2z\2\u09e1\u09f9\3\2\2\2\u09e2\u09e3\7\u00e1")
        buf.write(u"\2\2\u09e3\u09f9\5\u00f2z\2\u09e4\u09e5\7\u00e3\2\2\u09e5")
        buf.write(u"\u09f9\5\u00f2z\2\u09e6\u09e7\7\u00ed\2\2\u09e7\u09f9")
        buf.write(u"\7\u00e1\2\2\u09e8\u09e9\7\u00ed\2\2\u09e9\u09f9\7\u00e3")
        buf.write(u"\2\2\u09ea\u09eb\7\u0109\2\2\u09eb\u09ec\7\67\2\2\u09ec")
        buf.write(u"\u09f9\5\u01b0\u00d9\2\u09ed\u09ef\7\u0151\2\2\u09ee")
        buf.write(u"\u09f0\7\u018f\2\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0\3")
        buf.write(u"\2\2\2\u09f0\u09f1\3\2\2\2\u09f1\u09f9\5\u00f2z\2\u09f2")
        buf.write(u"\u09f9\7\u012e\2\2\u09f3\u09f5\7\u012e\2\2\u09f4\u09f6")
        buf.write(u"\7\u018f\2\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6\3\2\2\2")
        buf.write(u"\u09f6\u09f7\3\2\2\2\u09f7\u09f9\5\u00f2z\2\u09f8\u09d9")
        buf.write(u"\3\2\2\2\u09f8\u09db\3\2\2\2\u09f8\u09dc\3\2\2\2\u09f8")
        buf.write(u"\u09de\3\2\2\2\u09f8\u09e2\3\2\2\2\u09f8\u09e4\3\2\2")
        buf.write(u"\2\u09f8\u09e6\3\2\2\2\u09f8\u09e8\3\2\2\2\u09f8\u09ea")
        buf.write(u"\3\2\2\2\u09f8\u09ed\3\2\2\2\u09f8\u09f2\3\2\2\2\u09f8")
        buf.write(u"\u09f3\3\2\2\2\u09f9\u00ef\3\2\2\2\u09fa\u09fd\7\67\2")
        buf.write(u"\2\u09fb\u09fd\3\2\2\2\u09fc\u09fa\3\2\2\2\u09fc\u09fb")
        buf.write(u"\3\2\2\2\u09fd\u00f1\3\2\2\2\u09fe\u0a03\7\u01af\2\2")
        buf.write(u"\u09ff\u0a00\7\13\2\2\u0a00\u0a03\7\u01af\2\2\u0a01\u0a03")
        buf.write(u"\5\u042e\u0218\2\u0a02\u09fe\3\2\2\2\u0a02\u09ff\3\2")
        buf.write(u"\2\2\u0a02\u0a01\3\2\2\2\u0a03\u00f3\3\2\2\2\u0a04\u0a05")
        buf.write(u"\b{\1\2\u0a05\u0a06\5\u00f2z\2\u0a06\u0a0c\3\2\2\2\u0a07")
        buf.write(u"\u0a08\f\3\2\2\u0a08\u0a09\7\b\2\2\u0a09\u0a0b\5\u00f2")
        buf.write(u"z\2\u0a0a\u0a07\3\2\2\2\u0a0b\u0a0e\3\2\2\2\u0a0c\u0a0a")
        buf.write(u"\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u00f5\3\2\2\2\u0a0e")
        buf.write(u"\u0a0c\3\2\2\2\u0a0f\u0a10\7Z\2\2\u0a10\u0a11\5\u020e")
        buf.write(u"\u0108\2\u0a11\u0a12\5\u00f8}\2\u0a12\u0a13\5\u0104\u0083")
        buf.write(u"\2\u0a13\u0a14\7\u00cc\2\2\u0a14\u0a15\5F$\2\u0a15\u0a22")
        buf.write(u"\3\2\2\2\u0a16\u0a17\7Z\2\2\u0a17\u0a18\5\u020e\u0108")
        buf.write(u"\2\u0a18\u0a19\5\u00f8}\2\u0a19\u0a1a\5\u0104\u0083\2")
        buf.write(u"\u0a1a\u0a1b\7\u00cc\2\2\u0a1b\u0a1c\5F$\2\u0a1c\u0a1d")
        buf.write(u"\7\u00a6\2\2\u0a1d\u0a1e\5\u00fa~\2\u0a1e\u0a1f\5\u00fc")
        buf.write(u"\177\2\u0a1f\u0a20\5\u0100\u0081\2\u0a20\u0a22\3\2\2")
        buf.write(u"\2\u0a21\u0a0f\3\2\2\2\u0a21\u0a16\3\2\2\2\u0a22\u00f7")
        buf.write(u"\3\2\2\2\u0a23\u0a26\7\u016f\2\2\u0a24\u0a26\3\2\2\2")
        buf.write(u"\u0a25\u0a23\3\2\2\2\u0a25\u0a24\3\2\2\2\u0a26\u00f9")
        buf.write(u"\3\2\2\2\u0a27\u0a2c\5\u0418\u020d\2\u0a28\u0a29\5\u0418")
        buf.write(u"\u020d\2\u0a29\u0a2a\5\u01b2\u00da\2\u0a2a\u0a2c\3\2")
        buf.write(u"\2\2\u0a2b\u0a27\3\2\2\2\u0a2b\u0a28\3\2\2\2\u0a2c\u00fb")
        buf.write(u"\3\2\2\2\u0a2d\u0a2e\7\u00b9\2\2\u0a2e\u0a31\5\u00fa")
        buf.write(u"~\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2d\3\2\2\2\u0a30\u0a2f")
        buf.write(u"\3\2\2\2\u0a31\u00fd\3\2\2\2\u0a32\u0a33\7\u0181\2\2")
        buf.write(u"\u0a33\u0a37\5\u00fa~\2\u0a34\u0a35\7\u00ed\2\2\u0a35")
        buf.write(u"\u0a37\7\u0181\2\2\u0a36\u0a32\3\2\2\2\u0a36\u0a34\3")
        buf.write(u"\2\2\2\u0a37\u00ff\3\2\2\2\u0a38\u0a3b\5\u00fe\u0080")
        buf.write(u"\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a38\3\2\2\2\u0a3a\u0a39")
        buf.write(u"\3\2\2\2\u0a3b\u0101\3\2\2\2\u0a3c\u0a3d\7\177\2\2\u0a3d")
        buf.write(u"\u0a3e\5\u0104\u0083\2\u0a3e\u0a3f\7\u00cc\2\2\u0a3f")
        buf.write(u"\u0a40\5F$\2\u0a40\u0a41\5b\62\2\u0a41\u0a4b\3\2\2\2")
        buf.write(u"\u0a42\u0a43\7\177\2\2\u0a43\u0a44\5\u0104\u0083\2\u0a44")
        buf.write(u"\u0a45\7\u00cc\2\2\u0a45\u0a46\7\u00ac\2\2\u0a46\u0a47")
        buf.write(u"\7\u008d\2\2\u0a47\u0a48\5F$\2\u0a48\u0a49\5b\62\2\u0a49")
        buf.write(u"\u0a4b\3\2\2\2\u0a4a\u0a3c\3\2\2\2\u0a4a\u0a42\3\2\2")
        buf.write(u"\2\u0a4b\u0103\3\2\2\2\u0a4c\u0a4f\7\u011b\2\2\u0a4d")
        buf.write(u"\u0a4f\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4e\u0a4d\3\2\2")
        buf.write(u"\2\u0a4f\u0105\3\2\2\2\u0a50\u0a51\7Z\2\2\u0a51\u0a52")
        buf.write(u"\7\u015f\2\2\u0a52\u0a53\5\u0418\u020d\2\u0a53\u0a54")
        buf.write(u"\5\u0108\u0085\2\u0a54\u0a55\7\u00dd\2\2\u0a55\u0a56")
        buf.write(u"\5\u042a\u0216\2\u0a56\u0107\3\2\2\2\u0a57\u0a58\7\u010a")
        buf.write(u"\2\2\u0a58\u0a5b\5\u0418\u020d\2\u0a59\u0a5b\3\2\2\2")
        buf.write(u"\u0a5a\u0a57\3\2\2\2\u0a5a\u0a59\3\2\2\2\u0a5b\u0109")
        buf.write(u"\3\2\2\2\u0a5c\u0a5d\7\177\2\2\u0a5d\u0a5e\7\u015f\2")
        buf.write(u"\2\u0a5e\u0a65\5\u0418\u020d\2\u0a5f\u0a60\7\177\2\2")
        buf.write(u"\u0a60\u0a61\7\u015f\2\2\u0a61\u0a62\7\u00ac\2\2\u0a62")
        buf.write(u"\u0a63\7\u008d\2\2\u0a63\u0a65\5\u0418\u020d\2\u0a64")
        buf.write(u"\u0a5c\3\2\2\2\u0a64\u0a5f\3\2\2\2\u0a65\u010b\3\2\2")
        buf.write(u"\2\u0a66\u0a67\7Z\2\2\u0a67\u0a68\7\u008f\2\2\u0a68\u0a6a")
        buf.write(u"\5\u0418\u020d\2\u0a69\u0a6b\7\u018f\2\2\u0a6a\u0a69")
        buf.write(u"\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c")
        buf.write(u"\u0a6d\5\u010e\u0088\2\u0a6d\u0a7a\3\2\2\2\u0a6e\u0a6f")
        buf.write(u"\7Z\2\2\u0a6f\u0a70\7\u008f\2\2\u0a70\u0a71\7\u00ac\2")
        buf.write(u"\2\u0a71\u0a72\7\u00ef\2\2\u0a72\u0a73\7\u008d\2\2\u0a73")
        buf.write(u"\u0a75\5\u0418\u020d\2\u0a74\u0a76\7\u018f\2\2\u0a75")
        buf.write(u"\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\3\2\2")
        buf.write(u"\2\u0a77\u0a78\5\u010e\u0088\2\u0a78\u0a7a\3\2\2\2\u0a79")
        buf.write(u"\u0a66\3\2\2\2\u0a79\u0a6e\3\2\2\2\u0a7a\u010d\3\2\2")
        buf.write(u"\2\u0a7b\u0a80\b\u0088\1\2\u0a7c\u0a7d\f\4\2\2\u0a7d")
        buf.write(u"\u0a7f\5\u0110\u0089\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u0a82")
        buf.write(u"\3\2\2\2\u0a80\u0a7e\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81")
        buf.write(u"\u010f\3\2\2\2\u0a82\u0a80\3\2\2\2\u0a83\u0a84\7\u013a")
        buf.write(u"\2\2\u0a84\u0a8a\5\u0418\u020d\2\u0a85\u0a86\7\u0188")
        buf.write(u"\2\2\u0a86\u0a8a\5F$\2\u0a87\u0a88\7\u009d\2\2\u0a88")
        buf.write(u"\u0a8a\5F$\2\u0a89\u0a83\3\2\2\2\u0a89\u0a85\3\2\2\2")
        buf.write(u"\u0a89\u0a87\3\2\2\2\u0a8a\u0111\3\2\2\2\u0a8b\u0a8c")
        buf.write(u"\7\37\2\2\u0a8c\u0a8d\7\u008f\2\2\u0a8d\u0a8e\5\u0418")
        buf.write(u"\u020d\2\u0a8e\u0a8f\7\u017b\2\2\u0a8f\u0a90\5\u0114")
        buf.write(u"\u008b\2\u0a90\u0113\3\2\2\2\u0a91\u0a96\b\u008b\1\2")
        buf.write(u"\u0a92\u0a93\f\4\2\2\u0a93\u0a95\5\u0116\u008c\2\u0a94")
        buf.write(u"\u0a92\3\2\2\2\u0a95\u0a98\3\2\2\2\u0a96\u0a94\3\2\2")
        buf.write(u"\2\u0a96\u0a97\3\2\2\2\u0a97\u0115\3\2\2\2\u0a98\u0a96")
        buf.write(u"\3\2\2\2\u0a99\u0a9a\7\u0167\2\2\u0a9a\u0a9b\5F$\2\u0a9b")
        buf.write(u"\u0117\3\2\2\2\u0a9c\u0a9d\7\37\2\2\u0a9d\u0a9e\7\u008f")
        buf.write(u"\2\2\u0a9e\u0a9f\5\u0418\u020d\2\u0a9f\u0aa0\5&\24\2")
        buf.write(u"\u0aa0\u0aa1\7\34\2\2\u0aa1\u0aa2\5\u0424\u0213\2\u0aa2")
        buf.write(u"\u0aa3\5\u017e\u00c0\2\u0aa3\u0b4f\3\2\2\2\u0aa4\u0aa5")
        buf.write(u"\7\37\2\2\u0aa5\u0aa6\7\u008f\2\2\u0aa6\u0aa7\5\u0418")
        buf.write(u"\u020d\2\u0aa7\u0aa8\5&\24\2\u0aa8\u0aa9\7=\2\2\u0aa9")
        buf.write(u"\u0aaa\7\r\2\2\u0aaa\u0aab\5\u036a\u01b6\2\u0aab\u0aac")
        buf.write(u"\7&\2\2\u0aac\u0aad\5\u036a\u01b6\2\u0aad\u0aae\7\6\2")
        buf.write(u"\2\u0aae\u0b4f\3\2\2\2\u0aaf\u0ab0\7\37\2\2\u0ab0\u0ab1")
        buf.write(u"\7\u008f\2\2\u0ab1\u0ab2\5\u0418\u020d\2\u0ab2\u0ab3")
        buf.write(u"\5&\24\2\u0ab3\u0ab4\7J\2\2\u0ab4\u0ab5\5\u01b0\u00d9")
        buf.write(u"\2\u0ab5\u0b4f\3\2\2\2\u0ab6\u0ab7\7\37\2\2\u0ab7\u0ab8")
        buf.write(u"\7\u008f\2\2\u0ab8\u0ab9\5\u0418\u020d\2\u0ab9\u0aba")
        buf.write(u"\5&\24\2\u0aba\u0abb\7W\2\2\u0abb\u0abc\5\u01b0\u00d9")
        buf.write(u"\2\u0abc\u0b4f\3\2\2\2\u0abd\u0abe\7\37\2\2\u0abe\u0abf")
        buf.write(u"\7\u008f\2\2\u0abf\u0ac0\5\u0418\u020d\2\u0ac0\u0ac1")
        buf.write(u"\5&\24\2\u0ac1\u0ac2\7}\2\2\u0ac2\u0ac3\5\u01b0\u00d9")
        buf.write(u"\2\u0ac3\u0b4f\3\2\2\2\u0ac4\u0ac5\7\37\2\2\u0ac5\u0ac6")
        buf.write(u"\7\u008f\2\2\u0ac6\u0ac7\5\u0418\u020d\2\u0ac7\u0ac8")
        buf.write(u"\5&\24\2\u0ac8\u0ac9\7\u009f\2\2\u0ac9\u0aca\5\u01e2")
        buf.write(u"\u00f2\2\u0aca\u0b4f\3\2\2\2\u0acb\u0acc\7\37\2\2\u0acc")
        buf.write(u"\u0acd\7\u008f\2\2\u0acd\u0ace\5\u0418\u020d\2\u0ace")
        buf.write(u"\u0acf\5&\24\2\u0acf\u0ad0\5\u0104\u0083\2\u0ad0\u0ad1")
        buf.write(u"\7\u00cc\2\2\u0ad1\u0ad2\5\u0418\u020d\2\u0ad2\u0b4f")
        buf.write(u"\3\2\2\2\u0ad3\u0ad4\7\37\2\2\u0ad4\u0ad5\7\u008f\2\2")
        buf.write(u"\u0ad5\u0ad6\5\u0418\u020d\2\u0ad6\u0ad7\5&\24\2\u0ad7")
        buf.write(u"\u0ad8\7\u00ff\2\2\u0ad8\u0ad9\5\u0240\u0121\2\u0ad9")
        buf.write(u"\u0ada\5\u023e\u0120\2\u0ada\u0b4f\3\2\2\2\u0adb\u0adc")
        buf.write(u"\7\37\2\2\u0adc\u0add\7\u008f\2\2\u0add\u0ade\5\u0418")
        buf.write(u"\u020d\2\u0ade\u0adf\5&\24\2\u0adf\u0ae0\7\u00ff\2\2")
        buf.write(u"\u0ae0\u0ae1\7E\2\2\u0ae1\u0ae2\5\u01b0\u00d9\2\u0ae2")
        buf.write(u"\u0ae3\7\u017d\2\2\u0ae3\u0ae4\5\u041c\u020f\2\u0ae4")
        buf.write(u"\u0b4f\3\2\2\2\u0ae5\u0ae6\7\37\2\2\u0ae6\u0ae7\7\u008f")
        buf.write(u"\2\2\u0ae7\u0ae8\5\u0418\u020d\2\u0ae8\u0ae9\5&\24\2")
        buf.write(u"\u0ae9\u0aea\7\u00ff\2\2\u0aea\u0aeb\7\u0093\2\2\u0aeb")
        buf.write(u"\u0aec\5\u01b0\u00d9\2\u0aec\u0aed\7\u017d\2\2\u0aed")
        buf.write(u"\u0aee\5\u041c\u020f\2\u0aee\u0b4f\3\2\2\2\u0aef\u0af0")
        buf.write(u"\7\37\2\2\u0af0\u0af1\7\u008f\2\2\u0af1\u0af2\5\u0418")
        buf.write(u"\u020d\2\u0af2\u0af3\5&\24\2\u0af3\u0af4\7\u013a\2\2")
        buf.write(u"\u0af4\u0af5\5\u0418\u020d\2\u0af5\u0b4f\3\2\2\2\u0af6")
        buf.write(u"\u0af7\7\37\2\2\u0af7\u0af8\7\u008f\2\2\u0af8\u0af9\5")
        buf.write(u"\u0418\u020d\2\u0af9\u0afa\5&\24\2\u0afa\u0afb\7\u015d")
        buf.write(u"\2\2\u0afb\u0afc\5\u01b0\u00d9\2\u0afc\u0b4f\3\2\2\2")
        buf.write(u"\u0afd\u0afe\7\37\2\2\u0afe\u0aff\7\u008f\2\2\u0aff\u0b00")
        buf.write(u"\5\u0418\u020d\2\u0b00\u0b01\5&\24\2\u0b01\u0b02\7\u0163")
        buf.write(u"\2\2\u0b02\u0b03\7\u013c\2\2\u0b03\u0b04\7\u010b\2\2")
        buf.write(u"\u0b04\u0b05\5\u01b0\u00d9\2\u0b05\u0b4f\3\2\2\2\u0b06")
        buf.write(u"\u0b07\7\37\2\2\u0b07\u0b08\7\u008f\2\2\u0b08\u0b09\5")
        buf.write(u"\u0418\u020d\2\u0b09\u0b0a\5&\24\2\u0b0a\u0b0b\7\u0163")
        buf.write(u"\2\2\u0b0b\u0b0c\7\u013c\2\2\u0b0c\u0b0d\7w\2\2\u0b0d")
        buf.write(u"\u0b0e\5\u01b0\u00d9\2\u0b0e\u0b4f\3\2\2\2\u0b0f\u0b10")
        buf.write(u"\7\37\2\2\u0b10\u0b11\7\u008f\2\2\u0b11\u0b12\5\u0418")
        buf.write(u"\u020d\2\u0b12\u0b13\5&\24\2\u0b13\u0b14\7\u0163\2\2")
        buf.write(u"\u0b14\u0b15\7\u013c\2\2\u0b15\u0b16\7\u0161\2\2\u0b16")
        buf.write(u"\u0b17\5\u01b0\u00d9\2\u0b17\u0b4f\3\2\2\2\u0b18\u0b19")
        buf.write(u"\7\37\2\2\u0b19\u0b1a\7\u008f\2\2\u0b1a\u0b1b\5\u0418")
        buf.write(u"\u020d\2\u0b1b\u0b1c\5&\24\2\u0b1c\u0b1d\7\u0163\2\2")
        buf.write(u"\u0b1d\u0b1e\7\u013c\2\2\u0b1e\u0b1f\7Q\2\2\u0b1f\u0b20")
        buf.write(u"\5\u01b0\u00d9\2\u0b20\u0b4f\3\2\2\2\u0b21\u0b22\7\37")
        buf.write(u"\2\2\u0b22\u0b23\7\u008f\2\2\u0b23\u0b24\5\u0418\u020d")
        buf.write(u"\2\u0b24\u0b25\5&\24\2\u0b25\u0b26\7\u0140\2\2\u0b26")
        buf.write(u"\u0b27\5\u01b0\u00d9\2\u0b27\u0b4f\3\2\2\2\u0b28\u0b29")
        buf.write(u"\7\37\2\2\u0b29\u0b2a\7\u008f\2\2\u0b2a\u0b2b\5\u0418")
        buf.write(u"\u020d\2\u0b2b\u0b2c\5&\24\2\u0b2c\u0b2d\7\u0189\2\2")
        buf.write(u"\u0b2d\u0b2e\5\u01b0\u00d9\2\u0b2e\u0b4f\3\2\2\2\u0b2f")
        buf.write(u"\u0b30\7\37\2\2\u0b30\u0b31\7\u008f\2\2\u0b31\u0b32\5")
        buf.write(u"\u0418\u020d\2\u0b32\u0b33\5&\24\2\u0b33\u0b34\7\u009a")
        buf.write(u"\2\2\u0b34\u0b35\7\u015d\2\2\u0b35\u0b36\5\u01b0\u00d9")
        buf.write(u"\2\u0b36\u0b4f\3\2\2\2\u0b37\u0b38\7\37\2\2\u0b38\u0b39")
        buf.write(u"\7\u008f\2\2\u0b39\u0b3a\5\u0418\u020d\2\u0b3a\u0b3b")
        buf.write(u"\5&\24\2\u0b3b\u0b3c\7\u009a\2\2\u0b3c\u0b3d\7g\2\2\u0b3d")
        buf.write(u"\u0b3e\7\u0192\2\2\u0b3e\u0b3f\5\u0418\u020d\2\u0b3f")
        buf.write(u"\u0b4f\3\2\2\2\u0b40\u0b41\7\37\2\2\u0b41\u0b42\7\u008f")
        buf.write(u"\2\2\u0b42\u0b43\5\u0418\u020d\2\u0b43\u0b44\5&\24\2")
        buf.write(u"\u0b44\u0b45\7\u0143\2\2\u0b45\u0b46\5\u0418\u020d\2")
        buf.write(u"\u0b46\u0b4f\3\2\2\2\u0b47\u0b48\7\37\2\2\u0b48\u0b49")
        buf.write(u"\7\u008f\2\2\u0b49\u0b4a\5\u0418\u020d\2\u0b4a\u0b4b")
        buf.write(u"\5&\24\2\u0b4b\u0b4c\7\u0170\2\2\u0b4c\u0b4d\5\u01b0")
        buf.write(u"\u00d9\2\u0b4d\u0b4f\3\2\2\2\u0b4e\u0a9c\3\2\2\2\u0b4e")
        buf.write(u"\u0aa4\3\2\2\2\u0b4e\u0aaf\3\2\2\2\u0b4e\u0ab6\3\2\2")
        buf.write(u"\2\u0b4e\u0abd\3\2\2\2\u0b4e\u0ac4\3\2\2\2\u0b4e\u0acb")
        buf.write(u"\3\2\2\2\u0b4e\u0ad3\3\2\2\2\u0b4e\u0adb\3\2\2\2\u0b4e")
        buf.write(u"\u0ae5\3\2\2\2\u0b4e\u0aef\3\2\2\2\u0b4e\u0af6\3\2\2")
        buf.write(u"\2\u0b4e\u0afd\3\2\2\2\u0b4e\u0b06\3\2\2\2\u0b4e\u0b0f")
        buf.write(u"\3\2\2\2\u0b4e\u0b18\3\2\2\2\u0b4e\u0b21\3\2\2\2\u0b4e")
        buf.write(u"\u0b28\3\2\2\2\u0b4e\u0b2f\3\2\2\2\u0b4e\u0b37\3\2\2")
        buf.write(u"\2\u0b4e\u0b40\3\2\2\2\u0b4e\u0b47\3\2\2\2\u0b4f\u0119")
        buf.write(u"\3\2\2\2\u0b50\u0b51\7Z\2\2\u0b51\u0b52\7\u009a\2\2\u0b52")
        buf.write(u"\u0b53\7g\2\2\u0b53\u0b54\7\u0192\2\2\u0b54\u0b55\5\u0418")
        buf.write(u"\u020d\2\u0b55\u0b56\5\u0120\u0091\2\u0b56\u0b57\5\u0126")
        buf.write(u"\u0094\2\u0b57\u011b\3\2\2\2\u0b58\u0b59\7\u00a6\2\2")
        buf.write(u"\u0b59\u0b61\5\u00fa~\2\u0b5a\u0b5b\7\u00ed\2\2\u0b5b")
        buf.write(u"\u0b61\7\u00a6\2\2\u0b5c\u0b5d\7\u0181\2\2\u0b5d\u0b61")
        buf.write(u"\5\u00fa~\2\u0b5e\u0b5f\7\u00ed\2\2\u0b5f\u0b61\7\u0181")
        buf.write(u"\2\2\u0b60\u0b58\3\2\2\2\u0b60\u0b5a\3\2\2\2\u0b60\u0b5c")
        buf.write(u"\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b61\u011d\3\2\2\2\u0b62")
        buf.write(u"\u0b63\b\u0090\1\2\u0b63\u0b64\5\u011c\u008f\2\u0b64")
        buf.write(u"\u0b69\3\2\2\2\u0b65\u0b66\f\3\2\2\u0b66\u0b68\5\u011c")
        buf.write(u"\u008f\2\u0b67\u0b65\3\2\2\2\u0b68\u0b6b\3\2\2\2\u0b69")
        buf.write(u"\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u011f\3\2\2")
        buf.write(u"\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0b6f\5\u011e\u0090\2\u0b6d")
        buf.write(u"\u0b6f\3\2\2\2\u0b6e\u0b6c\3\2\2\2\u0b6e\u0b6d\3\2\2")
        buf.write(u"\2\u0b6f\u0121\3\2\2\2\u0b70\u0b71\7\177\2\2\u0b71\u0b72")
        buf.write(u"\7\u009a\2\2\u0b72\u0b73\7g\2\2\u0b73\u0b74\7\u0192\2")
        buf.write(u"\2\u0b74\u0b75\5\u0418\u020d\2\u0b75\u0b76\5b\62\2\u0b76")
        buf.write(u"\u0b81\3\2\2\2\u0b77\u0b78\7\177\2\2\u0b78\u0b79\7\u009a")
        buf.write(u"\2\2\u0b79\u0b7a\7g\2\2\u0b7a\u0b7b\7\u0192\2\2\u0b7b")
        buf.write(u"\u0b7c\7\u00ac\2\2\u0b7c\u0b7d\7\u008d\2\2\u0b7d\u0b7e")
        buf.write(u"\5\u0418\u020d\2\u0b7e\u0b7f\5b\62\2\u0b7f\u0b81\3\2")
        buf.write(u"\2\2\u0b80\u0b70\3\2\2\2\u0b80\u0b77\3\2\2\2\u0b81\u0123")
        buf.write(u"\3\2\2\2\u0b82\u0b83\7\37\2\2\u0b83\u0b84\7\u009a\2\2")
        buf.write(u"\u0b84\u0b85\7g\2\2\u0b85\u0b86\7\u0192\2\2\u0b86\u0b87")
        buf.write(u"\5\u0418\u020d\2\u0b87\u0b88\5\u0120\u0091\2\u0b88\u0b89")
        buf.write(u"\5\u012a\u0096\2\u0b89\u0b92\3\2\2\2\u0b8a\u0b8b\7\37")
        buf.write(u"\2\2\u0b8b\u0b8c\7\u009a\2\2\u0b8c\u0b8d\7g\2\2\u0b8d")
        buf.write(u"\u0b8e\7\u0192\2\2\u0b8e\u0b8f\5\u0418\u020d\2\u0b8f")
        buf.write(u"\u0b90\5\u011e\u0090\2\u0b90\u0b92\3\2\2\2\u0b91\u0b82")
        buf.write(u"\3\2\2\2\u0b91\u0b8a\3\2\2\2\u0b92\u0125\3\2\2\2\u0b93")
        buf.write(u"\u0b94\7\u0101\2\2\u0b94\u0b95\7\r\2\2\u0b95\u0b96\5")
        buf.write(u"\u0128\u0095\2\u0b96\u0b97\7\6\2\2\u0b97\u0b9a\3\2\2")
        buf.write(u"\2\u0b98\u0b9a\3\2\2\2\u0b99\u0b93\3\2\2\2\u0b99\u0b98")
        buf.write(u"\3\2\2\2\u0b9a\u0127\3\2\2\2\u0b9b\u0b9c\b\u0095\1\2")
        buf.write(u"\u0b9c\u0b9d\5\u0130\u0099\2\u0b9d\u0ba3\3\2\2\2\u0b9e")
        buf.write(u"\u0b9f\f\3\2\2\u0b9f\u0ba0\7\b\2\2\u0ba0\u0ba2\5\u0130")
        buf.write(u"\u0099\2\u0ba1\u0b9e\3\2\2\2\u0ba2\u0ba5\3\2\2\2\u0ba3")
        buf.write(u"\u0ba1\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0129\3\2\2")
        buf.write(u"\2\u0ba5\u0ba3\3\2\2\2\u0ba6\u0ba7\7\u0101\2\2\u0ba7")
        buf.write(u"\u0ba8\7\r\2\2\u0ba8\u0ba9\5\u012c\u0097\2\u0ba9\u0baa")
        buf.write(u"\7\6\2\2\u0baa\u012b\3\2\2\2\u0bab\u0bac\b\u0097\1\2")
        buf.write(u"\u0bac\u0bad\5\u012e\u0098\2\u0bad\u0bb3\3\2\2\2\u0bae")
        buf.write(u"\u0baf\f\3\2\2\u0baf\u0bb0\7\b\2\2\u0bb0\u0bb2\5\u012e")
        buf.write(u"\u0098\2\u0bb1\u0bae\3\2\2\2\u0bb2\u0bb5\3\2\2\2\u0bb3")
        buf.write(u"\u0bb1\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u012d\3\2\2")
        buf.write(u"\2\u0bb5\u0bb3\3\2\2\2\u0bb6\u0bbe\5\u0130\u0099\2\u0bb7")
        buf.write(u"\u0bb8\7\u0146\2\2\u0bb8\u0bbe\5\u0130\u0099\2\u0bb9")
        buf.write(u"\u0bba\7\31\2\2\u0bba\u0bbe\5\u0130\u0099\2\u0bbb\u0bbc")
        buf.write(u"\7\177\2\2\u0bbc\u0bbe\5\u0132\u009a\2\u0bbd\u0bb6\3")
        buf.write(u"\2\2\2\u0bbd\u0bb7\3\2\2\2\u0bbd\u0bb9\3\2\2\2\u0bbd")
        buf.write(u"\u0bbb\3\2\2\2\u0bbe\u012f\3\2\2\2\u0bbf\u0bc0\5\u0132")
        buf.write(u"\u009a\2\u0bc0\u0bc1\5\u0134\u009b\2\u0bc1\u0131\3\2")
        buf.write(u"\2\2\u0bc2\u0bc3\5\u0434\u021b\2\u0bc3\u0133\3\2\2\2")
        buf.write(u"\u0bc4\u0bc5\5\u042a\u0216\2\u0bc5\u0135\3\2\2\2\u0bc6")
        buf.write(u"\u0bc7\7Z\2\2\u0bc7\u0bc8\7\u0143\2\2\u0bc8\u0bc9\5\u0418")
        buf.write(u"\u020d\2\u0bc9\u0bca\5\u0138\u009d\2\u0bca\u0bcb\5\u013c")
        buf.write(u"\u009f\2\u0bcb\u0bcc\7\u009a\2\2\u0bcc\u0bcd\7g\2\2\u0bcd")
        buf.write(u"\u0bce\7\u0192\2\2\u0bce\u0bcf\5\u0418\u020d\2\u0bcf")
        buf.write(u"\u0bd0\5\u0126\u0094\2\u0bd0\u0137\3\2\2\2\u0bd1\u0bd2")
        buf.write(u"\7\u0170\2\2\u0bd2\u0bd5\5\u042a\u0216\2\u0bd3\u0bd5")
        buf.write(u"\3\2\2\2\u0bd4\u0bd1\3\2\2\2\u0bd4\u0bd3\3\2\2\2\u0bd5")
        buf.write(u"\u0139\3\2\2\2\u0bd6\u0bd7\7\u0188\2\2\u0bd7\u0bdb\5")
        buf.write(u"\u042a\u0216\2\u0bd8\u0bd9\7\u0188\2\2\u0bd9\u0bdb\7")
        buf.write(u"\u00f4\2\2\u0bda\u0bd6\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb")
        buf.write(u"\u013b\3\2\2\2\u0bdc\u0bdf\5\u013a\u009e\2\u0bdd\u0bdf")
        buf.write(u"\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bde\u0bdd\3\2\2\2\u0bdf")
        buf.write(u"\u013d\3\2\2\2\u0be0\u0be1\7\177\2\2\u0be1\u0be2\7\u0143")
        buf.write(u"\2\2\u0be2\u0be3\5\u0418\u020d\2\u0be3\u0be4\5b\62\2")
        buf.write(u"\u0be4\u0bed\3\2\2\2\u0be5\u0be6\7\177\2\2\u0be6\u0be7")
        buf.write(u"\7\u0143\2\2\u0be7\u0be8\7\u00ac\2\2\u0be8\u0be9\7\u008d")
        buf.write(u"\2\2\u0be9\u0bea\5\u0418\u020d\2\u0bea\u0beb\5b\62\2")
        buf.write(u"\u0beb\u0bed\3\2\2\2\u0bec\u0be0\3\2\2\2\u0bec\u0be5")
        buf.write(u"\3\2\2\2\u0bed\u013f\3\2\2\2\u0bee\u0bef\7\37\2\2\u0bef")
        buf.write(u"\u0bf0\7\u0143\2\2\u0bf0\u0bf1\5\u0418\u020d\2\u0bf1")
        buf.write(u"\u0bf2\5\u013a\u009e\2\u0bf2\u0bf3\5\u012a\u0096\2\u0bf3")
        buf.write(u"\u0bff\3\2\2\2\u0bf4\u0bf5\7\37\2\2\u0bf5\u0bf6\7\u0143")
        buf.write(u"\2\2\u0bf6\u0bf7\5\u0418\u020d\2\u0bf7\u0bf8\5\u013a")
        buf.write(u"\u009e\2\u0bf8\u0bff\3\2\2\2\u0bf9\u0bfa\7\37\2\2\u0bfa")
        buf.write(u"\u0bfb\7\u0143\2\2\u0bfb\u0bfc\5\u0418\u020d\2\u0bfc")
        buf.write(u"\u0bfd\5\u012a\u0096\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bee")
        buf.write(u"\3\2\2\2\u0bfe\u0bf4\3\2\2\2\u0bfe\u0bf9\3\2\2\2\u0bff")
        buf.write(u"\u0141\3\2\2\2\u0c00\u0c01\7Z\2\2\u0c01\u0c02\7\u009a")
        buf.write(u"\2\2\u0c02\u0c03\7\u015d\2\2\u0c03\u0c04\5\u0414\u020b")
        buf.write(u"\2\u0c04\u0c05\5\u0144\u00a3\2\u0c05\u0c06\7\u0143\2")
        buf.write(u"\2\u0c06\u0c07\5\u0418\u020d\2\u0c07\u0c08\5\u0126\u0094")
        buf.write(u"\2\u0c08\u0c16\3\2\2\2\u0c09\u0c0a\7Z\2\2\u0c0a\u0c0b")
        buf.write(u"\7\u009a\2\2\u0c0b\u0c0c\7\u015d\2\2\u0c0c\u0c0d\7\u00ac")
        buf.write(u"\2\2\u0c0d\u0c0e\7\u00ef\2\2\u0c0e\u0c0f\7\u008d\2\2")
        buf.write(u"\u0c0f\u0c10\5\u0414\u020b\2\u0c10\u0c11\5\u0144\u00a3")
        buf.write(u"\2\u0c11\u0c12\7\u0143\2\2\u0c12\u0c13\5\u0418\u020d")
        buf.write(u"\2\u0c13\u0c14\5\u0126\u0094\2\u0c14\u0c16\3\2\2\2\u0c15")
        buf.write(u"\u0c00\3\2\2\2\u0c15\u0c09\3\2\2\2\u0c16\u0143\3\2\2")
        buf.write(u"\2\u0c17\u0c18\7\r\2\2\u0c18\u0c19\5\u0146\u00a4\2\u0c19")
        buf.write(u"\u0c1a\7\6\2\2\u0c1a\u0c1e\3\2\2\2\u0c1b\u0c1c\7\r\2")
        buf.write(u"\2\u0c1c\u0c1e\7\6\2\2\u0c1d\u0c17\3\2\2\2\u0c1d\u0c1b")
        buf.write(u"\3\2\2\2\u0c1e\u0145\3\2\2\2\u0c1f\u0c20\b\u00a4\1\2")
        buf.write(u"\u0c20\u0c21\5\u0148\u00a5\2\u0c21\u0c27\3\2\2\2\u0c22")
        buf.write(u"\u0c23\f\3\2\2\u0c23\u0c24\7\b\2\2\u0c24\u0c26\5\u0148")
        buf.write(u"\u00a5\2\u0c25\u0c22\3\2\2\2\u0c26\u0c29\3\2\2\2\u0c27")
        buf.write(u"\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0147\3\2\2")
        buf.write(u"\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2b\5\u00a6T\2\u0c2b\u0149")
        buf.write(u"\3\2\2\2\u0c2c\u0c2d\7\37\2\2\u0c2d\u0c2e\7\u009a\2\2")
        buf.write(u"\u0c2e\u0c2f\7\u015d\2\2\u0c2f\u0c30\5\u0358\u01ad\2")
        buf.write(u"\u0c30\u0c31\5\\/\2\u0c31\u0c3b\3\2\2\2\u0c32\u0c33\7")
        buf.write(u"\37\2\2\u0c33\u0c34\7\u009a\2\2\u0c34\u0c35\7\u015d\2")
        buf.write(u"\2\u0c35\u0c36\7\u00ac\2\2\u0c36\u0c37\7\u008d\2\2\u0c37")
        buf.write(u"\u0c38\5\u0358\u01ad\2\u0c38\u0c39\5\\/\2\u0c39\u0c3b")
        buf.write(u"\3\2\2\2\u0c3a\u0c2c\3\2\2\2\u0c3a\u0c32\3\2\2\2\u0c3b")
        buf.write(u"\u014b\3\2\2\2\u0c3c\u0c3d\7Z\2\2\u0c3d\u0c3e\7\u017c")
        buf.write(u"\2\2\u0c3e\u0c3f\7\u00df\2\2\u0c3f\u0c40\7\u0098\2\2")
        buf.write(u"\u0c40\u0c41\5\u014e\u00a8\2\u0c41\u0c42\7\u0143\2\2")
        buf.write(u"\u0c42\u0c43\5\u0418\u020d\2\u0c43\u0c44\5\u0126\u0094")
        buf.write(u"\2\u0c44\u014d\3\2\2\2\u0c45\u0c49\7d\2\2\u0c46\u0c49")
        buf.write(u"\7\u017c\2\2\u0c47\u0c49\5\u042c\u0217\2\u0c48\u0c45")
        buf.write(u"\3\2\2\2\u0c48\u0c46\3\2\2\2\u0c48\u0c47\3\2\2\2\u0c49")
        buf.write(u"\u014f\3\2\2\2\u0c4a\u0c4b\7\177\2\2\u0c4b\u0c4c\7\u017c")
        buf.write(u"\2\2\u0c4c\u0c4d\7\u00df\2\2\u0c4d\u0c4e\7\u0098\2\2")
        buf.write(u"\u0c4e\u0c4f\5\u014e\u00a8\2\u0c4f\u0c50\7\u0143\2\2")
        buf.write(u"\u0c50\u0c51\5\u0418\u020d\2\u0c51\u0c5d\3\2\2\2\u0c52")
        buf.write(u"\u0c53\7\177\2\2\u0c53\u0c54\7\u017c\2\2\u0c54\u0c55")
        buf.write(u"\7\u00df\2\2\u0c55\u0c56\7\u00ac\2\2\u0c56\u0c57\7\u008d")
        buf.write(u"\2\2\u0c57\u0c58\7\u0098\2\2\u0c58\u0c59\5\u014e\u00a8")
        buf.write(u"\2\u0c59\u0c5a\7\u0143\2\2\u0c5a\u0c5b\5\u0418\u020d")
        buf.write(u"\2\u0c5b\u0c5d\3\2\2\2\u0c5c\u0c4a\3\2\2\2\u0c5c\u0c52")
        buf.write(u"\3\2\2\2\u0c5d\u0151\3\2\2\2\u0c5e\u0c5f\7\37\2\2\u0c5f")
        buf.write(u"\u0c60\7\u017c\2\2\u0c60\u0c61\7\u00df\2\2\u0c61\u0c62")
        buf.write(u"\7\u0098\2\2\u0c62\u0c63\5\u014e\u00a8\2\u0c63\u0c64")
        buf.write(u"\7\u0143\2\2\u0c64\u0c65\5\u0418\u020d\2\u0c65\u0c66")
        buf.write(u"\5\u012a\u0096\2\u0c66\u0153\3\2\2\2\u0c67\u0c68\7Z\2")
        buf.write(u"\2\u0c68\u0c69\7\u016b\2\2\u0c69\u0c6a\5\u0418\u020d")
        buf.write(u"\2\u0c6a\u0c6b\5\u0156\u00ac\2\u0c6b\u0c6c\5\u0158\u00ad")
        buf.write(u"\2\u0c6c\u0c6d\7\u00fd\2\2\u0c6d\u0c6e\5\u0414\u020b")
        buf.write(u"\2\u0c6e\u0c6f\5\u015c\u00af\2\u0c6f\u0c70\5\u0162\u00b2")
        buf.write(u"\2\u0c70\u0c71\7\u008c\2\2\u0c71\u0c72\7\u011c\2\2\u0c72")
        buf.write(u"\u0c73\5\u0424\u0213\2\u0c73\u0c74\7\r\2\2\u0c74\u0c75")
        buf.write(u"\5\u0164\u00b3\2\u0c75\u0c76\7\6\2\2\u0c76\u0c8d\3\2")
        buf.write(u"\2\2\u0c77\u0c78\7Z\2\2\u0c78\u0c79\7S\2\2\u0c79\u0c7a")
        buf.write(u"\7\u016b\2\2\u0c7a\u0c7b\5\u0418\u020d\2\u0c7b\u0c7c")
        buf.write(u"\7\33\2\2\u0c7c\u0c7d\5\u0158\u00ad\2\u0c7d\u0c7e\7\u00fd")
        buf.write(u"\2\2\u0c7e\u0c7f\5\u0414\u020b\2\u0c7f\u0c80\5\u0168")
        buf.write(u"\u00b5\2\u0c80\u0c81\5\u016a\u00b6\2\u0c81\u0c82\7\u0098")
        buf.write(u"\2\2\u0c82\u0c83\7\u0080\2\2\u0c83\u0c84\7\u0136\2\2")
        buf.write(u"\u0c84\u0c85\5\u0162\u00b2\2\u0c85\u0c86\7\u008c\2\2")
        buf.write(u"\u0c86\u0c87\7\u011c\2\2\u0c87\u0c88\5\u0424\u0213\2")
        buf.write(u"\u0c88\u0c89\7\r\2\2\u0c89\u0c8a\5\u0164\u00b3\2\u0c8a")
        buf.write(u"\u0c8b\7\6\2\2\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c67\3\2\2")
        buf.write(u"\2\u0c8c\u0c77\3\2\2\2\u0c8d\u0155\3\2\2\2\u0c8e\u0c93")
        buf.write(u"\7/\2\2\u0c8f\u0c93\7\33\2\2\u0c90\u0c91\7\u00bf\2\2")
        buf.write(u"\u0c91\u0c93\7\u00f9\2\2\u0c92\u0c8e\3\2\2\2\u0c92\u0c8f")
        buf.write(u"\3\2\2\2\u0c92\u0c90\3\2\2\2\u0c93\u0157\3\2\2\2\u0c94")
        buf.write(u"\u0c95\b\u00ad\1\2\u0c95\u0c96\5\u015a\u00ae\2\u0c96")
        buf.write(u"\u0c9c\3\2\2\2\u0c97\u0c98\f\3\2\2\u0c98\u0c99\7\u0102")
        buf.write(u"\2\2\u0c99\u0c9b\5\u015a\u00ae\2\u0c9a\u0c97\3\2\2\2")
        buf.write(u"\u0c9b\u0c9e\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9d")
        buf.write(u"\3\2\2\2\u0c9d\u0159\3\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9f")
        buf.write(u"\u0ca7\7\u00be\2\2\u0ca0\u0ca7\7s\2\2\u0ca1\u0ca7\7\u017b")
        buf.write(u"\2\2\u0ca2\u0ca3\7\u017b\2\2\u0ca3\u0ca4\7\u00f9\2\2")
        buf.write(u"\u0ca4\u0ca7\5\u00c0a\2\u0ca5\u0ca7\7\u016e\2\2\u0ca6")
        buf.write(u"\u0c9f\3\2\2\2\u0ca6\u0ca0\3\2\2\2\u0ca6\u0ca1\3\2\2")
        buf.write(u"\2\u0ca6\u0ca2\3\2\2\2\u0ca6\u0ca5\3\2\2\2\u0ca7\u015b")
        buf.write(u"\3\2\2\2\u0ca8\u0ca9\7\u0098\2\2\u0ca9\u0caa\5\u015e")
        buf.write(u"\u00b0\2\u0caa\u0cab\5\u0160\u00b1\2\u0cab\u0cae\3\2")
        buf.write(u"\2\2\u0cac\u0cae\3\2\2\2\u0cad\u0ca8\3\2\2\2\u0cad\u0cac")
        buf.write(u"\3\2\2\2\u0cae\u015d\3\2\2\2\u0caf\u0cb2\7\u0080\2\2")
        buf.write(u"\u0cb0\u0cb2\3\2\2\2\u0cb1\u0caf\3\2\2\2\u0cb1\u0cb0")
        buf.write(u"\3\2\2\2\u0cb2\u015f\3\2\2\2\u0cb3\u0cb4\t\6\2\2\u0cb4")
        buf.write(u"\u0161\3\2\2\2\u0cb5\u0cb6\7\u018b\2\2\u0cb6\u0cb7\7")
        buf.write(u"\r\2\2\u0cb7\u0cb8\5\u039a\u01ce\2\u0cb8\u0cb9\7\6\2")
        buf.write(u"\2\u0cb9\u0cbc\3\2\2\2\u0cba\u0cbc\3\2\2\2\u0cbb\u0cb5")
        buf.write(u"\3\2\2\2\u0cbb\u0cba\3\2\2\2\u0cbc\u0163\3\2\2\2\u0cbd")
        buf.write(u"\u0cbe\b\u00b3\1\2\u0cbe\u0cc1\5\u0166\u00b4\2\u0cbf")
        buf.write(u"\u0cc1\3\2\2\2\u0cc0\u0cbd\3\2\2\2\u0cc0\u0cbf\3\2\2")
        buf.write(u"\2\u0cc1\u0cc7\3\2\2\2\u0cc2\u0cc3\f\4\2\2\u0cc3\u0cc4")
        buf.write(u"\7\b\2\2\u0cc4\u0cc6\5\u0166\u00b4\2\u0cc5\u0cc2\3\2")
        buf.write(u"\2\2\u0cc6\u0cc9\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc7\u0cc8")
        buf.write(u"\3\2\2\2\u0cc8\u0165\3\2\2\2\u0cc9\u0cc7\3\2\2\2\u0cca")
        buf.write(u"\u0ccf\5\u0428\u0215\2\u0ccb\u0ccf\7\u01af\2\2\u0ccc")
        buf.write(u"\u0ccf\5\u042a\u0216\2\u0ccd\u0ccf\5\u0434\u021b\2\u0cce")
        buf.write(u"\u0cca\3\2\2\2\u0cce\u0ccb\3\2\2\2\u0cce\u0ccc\3\2\2")
        buf.write(u"\2\u0cce\u0ccd\3\2\2\2\u0ccf\u0167\3\2\2\2\u0cd0\u0cd1")
        buf.write(u"\7\u009d\2\2\u0cd1\u0cd4\5\u0414\u020b\2\u0cd2\u0cd4")
        buf.write(u"\3\2\2\2\u0cd3\u0cd0\3\2\2\2\u0cd3\u0cd2\3\2\2\2\u0cd4")
        buf.write(u"\u0169\3\2\2\2\u0cd5\u0cda\b\u00b6\1\2\u0cd6\u0cd7\f")
        buf.write(u"\3\2\2\u0cd7\u0cd9\5\u016c\u00b7\2\u0cd8\u0cd6\3\2\2")
        buf.write(u"\2\u0cd9\u0cdc\3\2\2\2\u0cda\u0cd8\3\2\2\2\u0cda\u0cdb")
        buf.write(u"\3\2\2\2\u0cdb\u016b\3\2\2\2\u0cdc\u0cda\3\2\2\2\u0cdd")
        buf.write(u"\u0cde\7\u00ef\2\2\u0cde\u0ce9\7p\2\2\u0cdf\u0ce9\7p")
        buf.write(u"\2\2\u0ce0\u0ce1\7\u00b8\2\2\u0ce1\u0ce9\7\u00ae\2\2")
        buf.write(u"\u0ce2\u0ce3\7\u00b8\2\2\u0ce3\u0ce9\7q\2\2\u0ce4\u0ce5")
        buf.write(u"\7\u00ef\2\2\u0ce5\u0ce9\7\u017f\2\2\u0ce6\u0ce7\7\u00ed")
        buf.write(u"\2\2\u0ce7\u0ce9\7\u00b6\2\2\u0ce8\u0cdd\3\2\2\2\u0ce8")
        buf.write(u"\u0cdf\3\2\2\2\u0ce8\u0ce0\3\2\2\2\u0ce8\u0ce2\3\2\2")
        buf.write(u"\2\u0ce8\u0ce4\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u016d")
        buf.write(u"\3\2\2\2\u0cea\u0ceb\7\177\2\2\u0ceb\u0cec\7\u016b\2")
        buf.write(u"\2\u0cec\u0ced\5\u0418\u020d\2\u0ced\u0cee\7\u00fd\2")
        buf.write(u"\2\u0cee\u0cef\5\u01b0\u00d9\2\u0cef\u0cf0\5b\62\2\u0cf0")
        buf.write(u"\u0cfb\3\2\2\2\u0cf1\u0cf2\7\177\2\2\u0cf2\u0cf3\7\u016b")
        buf.write(u"\2\2\u0cf3\u0cf4\7\u00ac\2\2\u0cf4\u0cf5\7\u008d\2\2")
        buf.write(u"\u0cf5\u0cf6\5\u0418\u020d\2\u0cf6\u0cf7\7\u00fd\2\2")
        buf.write(u"\u0cf7\u0cf8\5\u01b0\u00d9\2\u0cf8\u0cf9\5b\62\2\u0cf9")
        buf.write(u"\u0cfb\3\2\2\2\u0cfa\u0cea\3\2\2\2\u0cfa\u0cf1\3\2\2")
        buf.write(u"\2\u0cfb\u016f\3\2\2\2\u0cfc\u0cfd\7Z\2\2\u0cfd\u0cfe")
        buf.write(u"\7(\2\2\u0cfe\u0cff\5\u0418\u020d\2\u0cff\u0d00\7C\2")
        buf.write(u"\2\u0d00\u0d01\7\r\2\2\u0d01\u0d02\5\u039a\u01ce\2\u0d02")
        buf.write(u"\u0d03\7\6\2\2\u0d03\u0d04\5\u016a\u00b6\2\u0d04\u0171")
        buf.write(u"\3\2\2\2\u0d05\u0d06\7\177\2\2\u0d06\u0d07\7(\2\2\u0d07")
        buf.write(u"\u0d08\5\u0418\u020d\2\u0d08\u0d09\5b\62\2\u0d09\u0173")
        buf.write(u"\3\2\2\2\u0d0a\u0d0b\7Z\2\2\u0d0b\u0d0c\7\34\2\2\u0d0c")
        buf.write(u"\u0d0d\5\u0424\u0213\2\u0d0d\u0d0e\5\u017e\u00c0\2\u0d0e")
        buf.write(u"\u0d0f\5\u0176\u00bc\2\u0d0f\u0d62\3\2\2\2\u0d10\u0d11")
        buf.write(u"\7Z\2\2\u0d11\u0d12\7\34\2\2\u0d12\u0d13\5\u0424\u0213")
        buf.write(u"\2\u0d13\u0d14\5\u0180\u00c1\2\u0d14\u0d62\3\2\2\2\u0d15")
        buf.write(u"\u0d16\7Z\2\2\u0d16\u0d17\7\u00ff\2\2\u0d17\u0d18\5\u0240")
        buf.write(u"\u0121\2\u0d18\u0d19\5\u0176\u00bc\2\u0d19\u0d62\3\2")
        buf.write(u"\2\2\u0d1a\u0d1b\7Z\2\2\u0d1b\u0d1c\7\u0170\2\2\u0d1c")
        buf.write(u"\u0d1d\5\u01b0\u00d9\2\u0d1d\u0d1e\5\u0176\u00bc\2\u0d1e")
        buf.write(u"\u0d62\3\2\2\2\u0d1f\u0d20\7Z\2\2\u0d20\u0d21\7\u0170")
        buf.write(u"\2\2\u0d21\u0d62\5\u01b0\u00d9\2\u0d22\u0d23\7Z\2\2\u0d23")
        buf.write(u"\u0d24\7\u0170\2\2\u0d24\u0d25\5\u01b0\u00d9\2\u0d25")
        buf.write(u"\u0d26\7&\2\2\u0d26\u0d27\7\r\2\2\u0d27\u0d28\5\u0364")
        buf.write(u"\u01b3\2\u0d28\u0d29\7\6\2\2\u0d29\u0d62\3\2\2\2\u0d2a")
        buf.write(u"\u0d2b\7Z\2\2\u0d2b\u0d2c\7\u0170\2\2\u0d2c\u0d2d\5\u01b0")
        buf.write(u"\u00d9\2\u0d2d\u0d2e\7&\2\2\u0d2e\u0d2f\7\u0086\2\2\u0d2f")
        buf.write(u"\u0d30\7\r\2\2\u0d30\u0d31\5\u0186\u00c4\2\u0d31\u0d32")
        buf.write(u"\7\6\2\2\u0d32\u0d62\3\2\2\2\u0d33\u0d34\7Z\2\2\u0d34")
        buf.write(u"\u0d35\7\u0170\2\2\u0d35\u0d36\5\u01b0\u00d9\2\u0d36")
        buf.write(u"\u0d37\7&\2\2\u0d37\u0d38\7\u011e\2\2\u0d38\u0d39\5\u0176")
        buf.write(u"\u00bc\2\u0d39\u0d62\3\2\2\2\u0d3a\u0d3b\7Z\2\2\u0d3b")
        buf.write(u"\u0d3c\7\u0163\2\2\u0d3c\u0d3d\7\u013c\2\2\u0d3d\u0d3e")
        buf.write(u"\7\u010b\2\2\u0d3e\u0d3f\5\u01b0\u00d9\2\u0d3f\u0d40")
        buf.write(u"\5\u0176\u00bc\2\u0d40\u0d62\3\2\2\2\u0d41\u0d42\7Z\2")
        buf.write(u"\2\u0d42\u0d43\7\u0163\2\2\u0d43\u0d44\7\u013c\2\2\u0d44")
        buf.write(u"\u0d45\7w\2\2\u0d45\u0d46\5\u01b0\u00d9\2\u0d46\u0d47")
        buf.write(u"\5\u0176\u00bc\2\u0d47\u0d62\3\2\2\2\u0d48\u0d49\7Z\2")
        buf.write(u"\2\u0d49\u0d4a\7\u0163\2\2\u0d4a\u0d4b\7\u013c\2\2\u0d4b")
        buf.write(u"\u0d4c\7\u0161\2\2\u0d4c\u0d4d\5\u01b0\u00d9\2\u0d4d")
        buf.write(u"\u0d4e\5\u0176\u00bc\2\u0d4e\u0d62\3\2\2\2\u0d4f\u0d50")
        buf.write(u"\7Z\2\2\u0d50\u0d51\7\u0163\2\2\u0d51\u0d52\7\u013c\2")
        buf.write(u"\2\u0d52\u0d53\7Q\2\2\u0d53\u0d54\5\u01b0\u00d9\2\u0d54")
        buf.write(u"\u0d55\5\u0176\u00bc\2\u0d55\u0d62\3\2\2\2\u0d56\u0d57")
        buf.write(u"\7Z\2\2\u0d57\u0d58\7J\2\2\u0d58\u0d59\5\u01b0\u00d9")
        buf.write(u"\2\u0d59\u0d5a\5\u0176\u00bc\2\u0d5a\u0d62\3\2\2\2\u0d5b")
        buf.write(u"\u0d5c\7Z\2\2\u0d5c\u0d5d\7J\2\2\u0d5d\u0d5e\5\u01b0")
        buf.write(u"\u00d9\2\u0d5e\u0d5f\7\u009d\2\2\u0d5f\u0d60\5\u01b0")
        buf.write(u"\u00d9\2\u0d60\u0d62\3\2\2\2\u0d61\u0d0a\3\2\2\2\u0d61")
        buf.write(u"\u0d10\3\2\2\2\u0d61\u0d15\3\2\2\2\u0d61\u0d1a\3\2\2")
        buf.write(u"\2\u0d61\u0d1f\3\2\2\2\u0d61\u0d22\3\2\2\2\u0d61\u0d2a")
        buf.write(u"\3\2\2\2\u0d61\u0d33\3\2\2\2\u0d61\u0d3a\3\2\2\2\u0d61")
        buf.write(u"\u0d41\3\2\2\2\u0d61\u0d48\3\2\2\2\u0d61\u0d4f\3\2\2")
        buf.write(u"\2\u0d61\u0d56\3\2\2\2\u0d61\u0d5b\3\2\2\2\u0d62\u0175")
        buf.write(u"\3\2\2\2\u0d63\u0d64\7\r\2\2\u0d64\u0d65\5\u0178\u00bd")
        buf.write(u"\2\u0d65\u0d66\7\6\2\2\u0d66\u0177\3\2\2\2\u0d67\u0d68")
        buf.write(u"\b\u00bd\1\2\u0d68\u0d69\5\u017a\u00be\2\u0d69\u0d6f")
        buf.write(u"\3\2\2\2\u0d6a\u0d6b\f\3\2\2\u0d6b\u0d6c\7\b\2\2\u0d6c")
        buf.write(u"\u0d6e\5\u017a\u00be\2\u0d6d\u0d6a\3\2\2\2\u0d6e\u0d71")
        buf.write(u"\3\2\2\2\u0d6f\u0d6d\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70")
        buf.write(u"\u0179\3\2\2\2\u0d71\u0d6f\3\2\2\2\u0d72\u0d73\5\u0434")
        buf.write(u"\u021b\2\u0d73\u0d74\7\20\2\2\u0d74\u0d75\5\u017c\u00bf")
        buf.write(u"\2\u0d75\u0d78\3\2\2\2\u0d76\u0d78\5\u0434\u021b\2\u0d77")
        buf.write(u"\u0d72\3\2\2\2\u0d77\u0d76\3\2\2\2\u0d78\u017b\3\2\2")
        buf.write(u"\2\u0d79\u0d7f\5\u0220\u0111\2\u0d7a\u0d7f\5\u043c\u021f")
        buf.write(u"\2\u0d7b\u0d7f\5\u03d0\u01e9\2\u0d7c\u0d7f\5\u00f2z\2")
        buf.write(u"\u0d7d\u0d7f\5\u042a\u0216\2\u0d7e\u0d79\3\2\2\2\u0d7e")
        buf.write(u"\u0d7a\3\2\2\2\u0d7e\u0d7b\3\2\2\2\u0d7e\u0d7c\3\2\2")
        buf.write(u"\2\u0d7e\u0d7d\3\2\2\2\u0d7f\u017d\3\2\2\2\u0d80\u0d81")
        buf.write(u"\7\r\2\2\u0d81\u0d82\5\u03da\u01ee\2\u0d82\u0d83\7\6")
        buf.write(u"\2\2\u0d83\u0d88\3\2\2\2\u0d84\u0d85\7\r\2\2\u0d85\u0d86")
        buf.write(u"\7\f\2\2\u0d86\u0d88\7\6\2\2\u0d87\u0d80\3\2\2\2\u0d87")
        buf.write(u"\u0d84\3\2\2\2\u0d88\u017f\3\2\2\2\u0d89\u0d8a\7\r\2")
        buf.write(u"\2\u0d8a\u0d8b\5\u0182\u00c2\2\u0d8b\u0d8c\7\6\2\2\u0d8c")
        buf.write(u"\u0181\3\2\2\2\u0d8d\u0d8e\b\u00c2\1\2\u0d8e\u0d8f\5")
        buf.write(u"\u0184\u00c3\2\u0d8f\u0d95\3\2\2\2\u0d90\u0d91\f\3\2")
        buf.write(u"\2\u0d91\u0d92\7\b\2\2\u0d92\u0d94\5\u0184\u00c3\2\u0d93")
        buf.write(u"\u0d90\3\2\2\2\u0d94\u0d97\3\2\2\2\u0d95\u0d93\3\2\2")
        buf.write(u"\2\u0d95\u0d96\3\2\2\2\u0d96\u0183\3\2\2\2\u0d97\u0d95")
        buf.write(u"\3\2\2\2\u0d98\u0d99\7\u01ad\2\2\u0d99\u0d9a\7\20\2\2")
        buf.write(u"\u0d9a\u0d9b\5\u017c\u00bf\2\u0d9b\u0185\3\2\2\2\u0d9c")
        buf.write(u"\u0d9f\5\u0188\u00c5\2\u0d9d\u0d9f\3\2\2\2\u0d9e\u0d9c")
        buf.write(u"\3\2\2\2\u0d9e\u0d9d\3\2\2\2\u0d9f\u0187\3\2\2\2\u0da0")
        buf.write(u"\u0da1\b\u00c5\1\2\u0da1\u0da2\5\u042a\u0216\2\u0da2")
        buf.write(u"\u0da8\3\2\2\2\u0da3\u0da4\f\3\2\2\u0da4\u0da5\7\b\2")
        buf.write(u"\2\u0da5\u0da7\5\u042a\u0216\2\u0da6\u0da3\3\2\2\2\u0da7")
        buf.write(u"\u0daa\3\2\2\2\u0da8\u0da6\3\2\2\2\u0da8\u0da9\3\2\2")
        buf.write(u"\2\u0da9\u0189\3\2\2\2\u0daa\u0da8\3\2\2\2\u0dab\u0dac")
        buf.write(u"\7\37\2\2\u0dac\u0dad\7\u0170\2\2\u0dad\u0dae\5\u01b0")
        buf.write(u"\u00d9\2\u0dae\u0daf\7\31\2\2\u0daf\u0db0\7\u0182\2\2")
        buf.write(u"\u0db0\u0db1\5\u042a\u0216\2\u0db1\u0dc5\3\2\2\2\u0db2")
        buf.write(u"\u0db3\7\37\2\2\u0db3\u0db4\7\u0170\2\2\u0db4\u0db5\5")
        buf.write(u"\u01b0\u00d9\2\u0db5\u0db6\7\31\2\2\u0db6\u0db7\7\u0182")
        buf.write(u"\2\2\u0db7\u0db8\5\u042a\u0216\2\u0db8\u0db9\7/\2\2\u0db9")
        buf.write(u"\u0dba\5\u042a\u0216\2\u0dba\u0dc5\3\2\2\2\u0dbb\u0dbc")
        buf.write(u"\7\37\2\2\u0dbc\u0dbd\7\u0170\2\2\u0dbd\u0dbe\5\u01b0")
        buf.write(u"\u00d9\2\u0dbe\u0dbf\7\31\2\2\u0dbf\u0dc0\7\u0182\2\2")
        buf.write(u"\u0dc0\u0dc1\5\u042a\u0216\2\u0dc1\u0dc2\7\33\2\2\u0dc2")
        buf.write(u"\u0dc3\5\u042a\u0216\2\u0dc3\u0dc5\3\2\2\2\u0dc4\u0dab")
        buf.write(u"\3\2\2\2\u0dc4\u0db2\3\2\2\2\u0dc4\u0dbb\3\2\2\2\u0dc5")
        buf.write(u"\u018b\3\2\2\2\u0dc6\u0dc7\7Z\2\2\u0dc7\u0dc8\7\u00ff")
        buf.write(u"\2\2\u0dc8\u0dc9\7E\2\2\u0dc9\u0dca\5\u01b0\u00d9\2\u0dca")
        buf.write(u"\u0dcb\5\u0192\u00ca\2\u0dcb\u0dcc\7\u0098\2\2\u0dcc")
        buf.write(u"\u0dcd\7\u0170\2\2\u0dcd\u0dce\5\u036a\u01b6\2\u0dce")
        buf.write(u"\u0dcf\7\u017d\2\2\u0dcf\u0dd0\5\u041c\u020f\2\u0dd0")
        buf.write(u"\u0dd1\5\u0194\u00cb\2\u0dd1\u0dd2\7&\2\2\u0dd2\u0dd3")
        buf.write(u"\5\u018e\u00c8\2\u0dd3\u018d\3\2\2\2\u0dd4\u0dd5\b\u00c8")
        buf.write(u"\1\2\u0dd5\u0dd6\5\u0190\u00c9\2\u0dd6\u0ddc\3\2\2\2")
        buf.write(u"\u0dd7\u0dd8\f\3\2\2\u0dd8\u0dd9\7\b\2\2\u0dd9\u0ddb")
        buf.write(u"\5\u0190\u00c9\2\u0dda\u0dd7\3\2\2\2\u0ddb\u0dde\3\2")
        buf.write(u"\2\2\u0ddc\u0dda\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u018f")
        buf.write(u"\3\2\2\2\u0dde\u0ddc\3\2\2\2\u0ddf\u0de0\7\u00ff\2\2")
        buf.write(u"\u0de0\u0de1\5\u0428\u0215\2\u0de1\u0de2\5\u0240\u0121")
        buf.write(u"\2\u0de2\u0de3\5\u0196\u00cc\2\u0de3\u0de4\5\u0198\u00cd")
        buf.write(u"\2\u0de4\u0dfc\3\2\2\2\u0de5\u0de6\7\u00ff\2\2\u0de6")
        buf.write(u"\u0de7\5\u0428\u0215\2\u0de7\u0de8\5\u0240\u0121\2\u0de8")
        buf.write(u"\u0de9\5\u023e\u0120\2\u0de9\u0dea\5\u0196\u00cc\2\u0dea")
        buf.write(u"\u0deb\5\u0198\u00cd\2\u0deb\u0dfc\3\2\2\2\u0dec\u0ded")
        buf.write(u"\7\u009f\2\2\u0ded\u0dee\5\u0428\u0215\2\u0dee\u0def")
        buf.write(u"\5\u0424\u0213\2\u0def\u0df0\5\u0210\u0109\2\u0df0\u0dfc")
        buf.write(u"\3\2\2\2\u0df1\u0df2\7\u009f\2\2\u0df2\u0df3\5\u0428")
        buf.write(u"\u0215\2\u0df3\u0df4\7\r\2\2\u0df4\u0df5\5\u03da\u01ee")
        buf.write(u"\2\u0df5\u0df6\7\6\2\2\u0df6\u0df7\5\u0424\u0213\2\u0df7")
        buf.write(u"\u0df8\5\u0210\u0109\2\u0df8\u0dfc\3\2\2\2\u0df9\u0dfa")
        buf.write(u"\7\u0156\2\2\u0dfa\u0dfc\5\u036a\u01b6\2\u0dfb\u0ddf")
        buf.write(u"\3\2\2\2\u0dfb\u0de5\3\2\2\2\u0dfb\u0dec\3\2\2\2\u0dfb")
        buf.write(u"\u0df1\3\2\2\2\u0dfb\u0df9\3\2\2\2\u0dfc\u0191\3\2\2")
        buf.write(u"\2\u0dfd\u0e00\7n\2\2\u0dfe\u0e00\3\2\2\2\u0dff\u0dfd")
        buf.write(u"\3\2\2\2\u0dff\u0dfe\3\2\2\2\u0e00\u0193\3\2\2\2\u0e01")
        buf.write(u"\u0e02\7\u0093\2\2\u0e02\u0e05\5\u01b0\u00d9\2\u0e03")
        buf.write(u"\u0e05\3\2\2\2\u0e04\u0e01\3\2\2\2\u0e04\u0e03\3\2\2")
        buf.write(u"\2\u0e05\u0195\3\2\2\2\u0e06\u0e07\7\u0098\2\2\u0e07")
        buf.write(u"\u0e0e\7\u013c\2\2\u0e08\u0e09\7\u0098\2\2\u0e09\u0e0a")
        buf.write(u"\7\u0103\2\2\u0e0a\u0e0b\7\67\2\2\u0e0b\u0e0e\5\u01b0")
        buf.write(u"\u00d9\2\u0e0c\u0e0e\3\2\2\2\u0e0d\u0e06\3\2\2\2\u0e0d")
        buf.write(u"\u0e08\3\2\2\2\u0e0d\u0e0c\3\2\2\2\u0e0e\u0197\3\2\2")
        buf.write(u"\2\u0e0f\u0e12\7\u0122\2\2\u0e10\u0e12\3\2\2\2\u0e11")
        buf.write(u"\u0e0f\3\2\2\2\u0e11\u0e10\3\2\2\2\u0e12\u0199\3\2\2")
        buf.write(u"\2\u0e13\u0e14\7Z\2\2\u0e14\u0e15\7\u00ff\2\2\u0e15\u0e16")
        buf.write(u"\7\u0093\2\2\u0e16\u0e17\5\u01b0\u00d9\2\u0e17\u0e18")
        buf.write(u"\7\u017d\2\2\u0e18\u0e19\5\u041c\u020f\2\u0e19\u019b")
        buf.write(u"\3\2\2\2\u0e1a\u0e1b\7\37\2\2\u0e1b\u0e1c\7\u00ff\2\2")
        buf.write(u"\u0e1c\u0e1d\7\u0093\2\2\u0e1d\u0e1e\5\u01b0\u00d9\2")
        buf.write(u"\u0e1e\u0e1f\7\u017d\2\2\u0e1f\u0e20\5\u041c\u020f\2")
        buf.write(u"\u0e20\u0e21\7\31\2\2\u0e21\u0e22\5\u018e\u00c8\2\u0e22")
        buf.write(u"\u0e2d\3\2\2\2\u0e23\u0e24\7\37\2\2\u0e24\u0e25\7\u00ff")
        buf.write(u"\2\2\u0e25\u0e26\7\u0093\2\2\u0e26\u0e27\5\u01b0\u00d9")
        buf.write(u"\2\u0e27\u0e28\7\u017d\2\2\u0e28\u0e29\5\u041c\u020f")
        buf.write(u"\2\u0e29\u0e2a\7\177\2\2\u0e2a\u0e2b\5\u019e\u00d0\2")
        buf.write(u"\u0e2b\u0e2d\3\2\2\2\u0e2c\u0e1a\3\2\2\2\u0e2c\u0e23")
        buf.write(u"\3\2\2\2\u0e2d\u019d\3\2\2\2\u0e2e\u0e2f\b\u00d0\1\2")
        buf.write(u"\u0e2f\u0e30\5\u01a0\u00d1\2\u0e30\u0e36\3\2\2\2\u0e31")
        buf.write(u"\u0e32\f\3\2\2\u0e32\u0e33\7\b\2\2\u0e33\u0e35\5\u01a0")
        buf.write(u"\u00d1\2\u0e34\u0e31\3\2\2\2\u0e35\u0e38\3\2\2\2\u0e36")
        buf.write(u"\u0e34\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37\u019f\3\2\2")
        buf.write(u"\2\u0e38\u0e36\3\2\2\2\u0e39\u0e3a\7\u00ff\2\2\u0e3a")
        buf.write(u"\u0e3b\5\u0428\u0215\2\u0e3b\u0e3c\7\r\2\2\u0e3c\u0e3d")
        buf.write(u"\5\u03da\u01ee\2\u0e3d\u0e3e\7\6\2\2\u0e3e\u0e46\3\2")
        buf.write(u"\2\2\u0e3f\u0e40\7\u009f\2\2\u0e40\u0e41\5\u0428\u0215")
        buf.write(u"\2\u0e41\u0e42\7\r\2\2\u0e42\u0e43\5\u03da\u01ee\2\u0e43")
        buf.write(u"\u0e44\7\6\2\2\u0e44\u0e46\3\2\2\2\u0e45\u0e39\3\2\2")
        buf.write(u"\2\u0e45\u0e3f\3\2\2\2\u0e46\u01a1\3\2\2\2\u0e47\u0e48")
        buf.write(u"\7\177\2\2\u0e48\u0e49\7\u00ff\2\2\u0e49\u0e4a\7E\2\2")
        buf.write(u"\u0e4a\u0e4b\5\u01b0\u00d9\2\u0e4b\u0e4c\7\u017d\2\2")
        buf.write(u"\u0e4c\u0e4d\5\u041c\u020f\2\u0e4d\u0e4e\5b\62\2\u0e4e")
        buf.write(u"\u0e5a\3\2\2\2\u0e4f\u0e50\7\177\2\2\u0e50\u0e51\7\u00ff")
        buf.write(u"\2\2\u0e51\u0e52\7E\2\2\u0e52\u0e53\7\u00ac\2\2\u0e53")
        buf.write(u"\u0e54\7\u008d\2\2\u0e54\u0e55\5\u01b0\u00d9\2\u0e55")
        buf.write(u"\u0e56\7\u017d\2\2\u0e56\u0e57\5\u041c\u020f\2\u0e57")
        buf.write(u"\u0e58\5b\62\2\u0e58\u0e5a\3\2\2\2\u0e59\u0e47\3\2\2")
        buf.write(u"\2\u0e59\u0e4f\3\2\2\2\u0e5a\u01a3\3\2\2\2\u0e5b\u0e5c")
        buf.write(u"\7\177\2\2\u0e5c\u0e5d\7\u00ff\2\2\u0e5d\u0e5e\7\u0093")
        buf.write(u"\2\2\u0e5e\u0e5f\5\u01b0\u00d9\2\u0e5f\u0e60\7\u017d")
        buf.write(u"\2\2\u0e60\u0e61\5\u041c\u020f\2\u0e61\u0e62\5b\62\2")
        buf.write(u"\u0e62\u0e6e\3\2\2\2\u0e63\u0e64\7\177\2\2\u0e64\u0e65")
        buf.write(u"\7\u00ff\2\2\u0e65\u0e66\7\u0093\2\2\u0e66\u0e67\7\u00ac")
        buf.write(u"\2\2\u0e67\u0e68\7\u008d\2\2\u0e68\u0e69\5\u01b0\u00d9")
        buf.write(u"\2\u0e69\u0e6a\7\u017d\2\2\u0e6a\u0e6b\5\u041c\u020f")
        buf.write(u"\2\u0e6b\u0e6c\5b\62\2\u0e6c\u0e6e\3\2\2\2\u0e6d\u0e5b")
        buf.write(u"\3\2\2\2\u0e6d\u0e63\3\2\2\2\u0e6e\u01a5\3\2\2\2\u0e6f")
        buf.write(u"\u0e70\7\177\2\2\u0e70\u0e71\7\u0109\2\2\u0e71\u0e72")
        buf.write(u"\7\67\2\2\u0e72\u0e73\5\u0416\u020c\2\u0e73\u0e74\5b")
        buf.write(u"\62\2\u0e74\u01a7\3\2\2\2\u0e75\u0e76\7\u0121\2\2\u0e76")
        buf.write(u"\u0e77\7\u0109\2\2\u0e77\u0e78\7\67\2\2\u0e78\u0e79\5")
        buf.write(u"\u0416\u020c\2\u0e79\u0e7a\7\u0167\2\2\u0e7a\u0e7b\5")
        buf.write(u"\u0418\u020d\2\u0e7b\u01a9\3\2\2\2\u0e7c\u0e7d\7\177")
        buf.write(u"\2\2\u0e7d\u0e7e\5\u01ac\u00d7\2\u0e7e\u0e7f\7\u00ac")
        buf.write(u"\2\2\u0e7f\u0e80\7\u008d\2\2\u0e80\u0e81\5\u01ae\u00d8")
        buf.write(u"\2\u0e81\u0e82\5b\62\2\u0e82\u0e97\3\2\2\2\u0e83\u0e84")
        buf.write(u"\7\177\2\2\u0e84\u0e85\5\u01ac\u00d7\2\u0e85\u0e86\5")
        buf.write(u"\u01ae\u00d8\2\u0e86\u0e87\5b\62\2\u0e87\u0e97\3\2\2")
        buf.write(u"\2\u0e88\u0e89\7\177\2\2\u0e89\u0e8a\7\u00b4\2\2\u0e8a")
        buf.write(u"\u0e8b\7P\2\2\u0e8b\u0e8c\5\u01ae\u00d8\2\u0e8c\u0e8d")
        buf.write(u"\5b\62\2\u0e8d\u0e97\3\2\2\2\u0e8e\u0e8f\7\177\2\2\u0e8f")
        buf.write(u"\u0e90\7\u00b4\2\2\u0e90\u0e91\7P\2\2\u0e91\u0e92\7\u00ac")
        buf.write(u"\2\2\u0e92\u0e93\7\u008d\2\2\u0e93\u0e94\5\u01ae\u00d8")
        buf.write(u"\2\u0e94\u0e95\5b\62\2\u0e95\u0e97\3\2\2\2\u0e96\u0e7c")
        buf.write(u"\3\2\2\2\u0e96\u0e83\3\2\2\2\u0e96\u0e88\3\2\2\2\u0e96")
        buf.write(u"\u0e8e\3\2\2\2\u0e97\u01ab\3\2\2\2\u0e98\u0eb1\7\u015d")
        buf.write(u"\2\2\u0e99\u0eb1\7\u0140\2\2\u0e9a\u0eb1\7\u0189\2\2")
        buf.write(u"\u0e9b\u0eb1\7\u00b4\2\2\u0e9c\u0e9d\7\u009a\2\2\u0e9d")
        buf.write(u"\u0eb1\7\u015d\2\2\u0e9e\u0eb1\7\u0170\2\2\u0e9f\u0eb1")
        buf.write(u"\7}\2\2\u0ea0\u0eb1\7J\2\2\u0ea1\u0eb1\7W\2\2\u0ea2\u0eb1")
        buf.write(u"\7\u013a\2\2\u0ea3\u0eb1\7\u008f\2\2\u0ea4\u0ea5\7\u0163")
        buf.write(u"\2\2\u0ea5\u0ea6\7\u013c\2\2\u0ea6\u0eb1\7\u010b\2\2")
        buf.write(u"\u0ea7\u0ea8\7\u0163\2\2\u0ea8\u0ea9\7\u013c\2\2\u0ea9")
        buf.write(u"\u0eb1\7w\2\2\u0eaa\u0eab\7\u0163\2\2\u0eab\u0eac\7\u013c")
        buf.write(u"\2\2\u0eac\u0eb1\7\u0161\2\2\u0ead\u0eae\7\u0163\2\2")
        buf.write(u"\u0eae\u0eaf\7\u013c\2\2\u0eaf\u0eb1\7Q\2\2\u0eb0\u0e98")
        buf.write(u"\3\2\2\2\u0eb0\u0e99\3\2\2\2\u0eb0\u0e9a\3\2\2\2\u0eb0")
        buf.write(u"\u0e9b\3\2\2\2\u0eb0\u0e9c\3\2\2\2\u0eb0\u0e9e\3\2\2")
        buf.write(u"\2\u0eb0\u0e9f\3\2\2\2\u0eb0\u0ea0\3\2\2\2\u0eb0\u0ea1")
        buf.write(u"\3\2\2\2\u0eb0\u0ea2\3\2\2\2\u0eb0\u0ea3\3\2\2\2\u0eb0")
        buf.write(u"\u0ea4\3\2\2\2\u0eb0\u0ea7\3\2\2\2\u0eb0\u0eaa\3\2\2")
        buf.write(u"\2\u0eb0\u0ead\3\2\2\2\u0eb1\u01ad\3\2\2\2\u0eb2\u0eb3")
        buf.write(u"\b\u00d8\1\2\u0eb3\u0eb4\5\u01b0\u00d9\2\u0eb4\u0eba")
        buf.write(u"\3\2\2\2\u0eb5\u0eb6\f\3\2\2\u0eb6\u0eb7\7\b\2\2\u0eb7")
        buf.write(u"\u0eb9\5\u01b0\u00d9\2\u0eb8\u0eb5\3\2\2\2\u0eb9\u0ebc")
        buf.write(u"\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb")
        buf.write(u"\u01af\3\2\2\2\u0ebc\u0eba\3\2\2\2\u0ebd\u0ec2\5\u0430")
        buf.write(u"\u0219\2\u0ebe\u0ebf\5\u0430\u0219\2\u0ebf\u0ec0\5\u01b2")
        buf.write(u"\u00da\2\u0ec0\u0ec2\3\2\2\2\u0ec1\u0ebd\3\2\2\2\u0ec1")
        buf.write(u"\u0ebe\3\2\2\2\u0ec2\u01b1\3\2\2\2\u0ec3\u0ec4\b\u00da")
        buf.write(u"\1\2\u0ec4\u0ec5\7\7\2\2\u0ec5\u0ec6\5\u041e\u0210\2")
        buf.write(u"\u0ec6\u0ecc\3\2\2\2\u0ec7\u0ec8\f\3\2\2\u0ec8\u0ec9")
        buf.write(u"\7\7\2\2\u0ec9\u0ecb\5\u041e\u0210\2\u0eca\u0ec7\3\2")
        buf.write(u"\2\2\u0ecb\u0ece\3\2\2\2\u0ecc\u0eca\3\2\2\2\u0ecc\u0ecd")
        buf.write(u"\3\2\2\2\u0ecd\u01b3\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ecf")
        buf.write(u"\u0ed0\7\u016e\2\2\u0ed0\u0ed1\5\u0316\u018c\2\u0ed1")
        buf.write(u"\u0ed2\5\u035a\u01ae\2\u0ed2\u0ed3\5\u01b6\u00dc\2\u0ed3")
        buf.write(u"\u0ed4\5b\62\2\u0ed4\u01b5\3\2\2\2\u0ed5\u0ed6\7V\2\2")
        buf.write(u"\u0ed6\u0edb\7\u00ab\2\2\u0ed7\u0ed8\7\u012e\2\2\u0ed8")
        buf.write(u"\u0edb\7\u00ab\2\2\u0ed9\u0edb\3\2\2\2\u0eda\u0ed5\3")
        buf.write(u"\2\2\2\u0eda\u0ed7\3\2\2\2\u0eda\u0ed9\3\2\2\2\u0edb")
        buf.write(u"\u01b7\3\2\2\2\u0edc\u0edd\7L\2\2\u0edd\u0ede\7\u00fd")
        buf.write(u"\2\2\u0ede\u0edf\5\u01ba\u00de\2\u0edf\u0ee0\5\u01b0")
        buf.write(u"\u00d9\2\u0ee0\u0ee1\7\u00c6\2\2\u0ee1\u0ee2\5\u01bc")
        buf.write(u"\u00df\2\u0ee2\u0f71\3\2\2\2\u0ee3\u0ee4\7L\2\2\u0ee4")
        buf.write(u"\u0ee5\7\u00fd\2\2\u0ee5\u0ee6\7\34\2\2\u0ee6\u0ee7\5")
        buf.write(u"\u0424\u0213\2\u0ee7\u0ee8\5\u017e\u00c0\2\u0ee8\u0ee9")
        buf.write(u"\7\u00c6\2\2\u0ee9\u0eea\5\u01bc\u00df\2\u0eea\u0f71")
        buf.write(u"\3\2\2\2\u0eeb\u0eec\7L\2\2\u0eec\u0eed\7\u00fd\2\2\u0eed")
        buf.write(u"\u0eee\7\u009f\2\2\u0eee\u0eef\5\u0424\u0213\2\u0eef")
        buf.write(u"\u0ef0\5\u0210\u0109\2\u0ef0\u0ef1\7\u00c6\2\2\u0ef1")
        buf.write(u"\u0ef2\5\u01bc\u00df\2\u0ef2\u0f71\3\2\2\2\u0ef3\u0ef4")
        buf.write(u"\7L\2\2\u0ef4\u0ef5\7\u00fd\2\2\u0ef5\u0ef6\7\u00ff\2")
        buf.write(u"\2\u0ef6\u0ef7\5\u0240\u0121\2\u0ef7\u0ef8\5\u023e\u0120")
        buf.write(u"\2\u0ef8\u0ef9\7\u00c6\2\2\u0ef9\u0efa\5\u01bc\u00df")
        buf.write(u"\2\u0efa\u0f71\3\2\2\2\u0efb\u0efc\7L\2\2\u0efc\u0efd")
        buf.write(u"\7\u00fd\2\2\u0efd\u0efe\7S\2\2\u0efe\u0eff\5\u0418\u020d")
        buf.write(u"\2\u0eff\u0f00\7\u00fd\2\2\u0f00\u0f01\5\u01b0\u00d9")
        buf.write(u"\2\u0f01\u0f02\7\u00c6\2\2\u0f02\u0f03\5\u01bc\u00df")
        buf.write(u"\2\u0f03\u0f71\3\2\2\2\u0f04\u0f05\7L\2\2\u0f05\u0f06")
        buf.write(u"\7\u00fd\2\2\u0f06\u0f07\7\u0138\2\2\u0f07\u0f08\5\u0418")
        buf.write(u"\u020d\2\u0f08\u0f09\7\u00fd\2\2\u0f09\u0f0a\5\u01b0")
        buf.write(u"\u00d9\2\u0f0a\u0f0b\7\u00c6\2\2\u0f0b\u0f0c\5\u01bc")
        buf.write(u"\u00df\2\u0f0c\u0f71\3\2\2\2\u0f0d\u0f0e\7L\2\2\u0f0e")
        buf.write(u"\u0f0f\7\u00fd\2\2\u0f0f\u0f10\7\u0138\2\2\u0f10\u0f11")
        buf.write(u"\5\u0418\u020d\2\u0f11\u0f12\7\u00c6\2\2\u0f12\u0f13")
        buf.write(u"\5\u01bc\u00df\2\u0f13\u0f71\3\2\2\2\u0f14\u0f15\7L\2")
        buf.write(u"\2\u0f15\u0f16\7\u00fd\2\2\u0f16\u0f17\7\u016b\2\2\u0f17")
        buf.write(u"\u0f18\5\u0418\u020d\2\u0f18\u0f19\7\u00fd\2\2\u0f19")
        buf.write(u"\u0f1a\5\u01b0\u00d9\2\u0f1a\u0f1b\7\u00c6\2\2\u0f1b")
        buf.write(u"\u0f1c\5\u01bc\u00df\2\u0f1c\u0f71\3\2\2\2\u0f1d\u0f1e")
        buf.write(u"\7L\2\2\u0f1e\u0f1f\7\u00fd\2\2\u0f1f\u0f20\7\u00ff\2")
        buf.write(u"\2\u0f20\u0f21\7E\2\2\u0f21\u0f22\5\u01b0\u00d9\2\u0f22")
        buf.write(u"\u0f23\7\u017d\2\2\u0f23\u0f24\5\u041c\u020f\2\u0f24")
        buf.write(u"\u0f25\7\u00c6\2\2\u0f25\u0f26\5\u01bc\u00df\2\u0f26")
        buf.write(u"\u0f71\3\2\2\2\u0f27\u0f28\7L\2\2\u0f28\u0f29\7\u00fd")
        buf.write(u"\2\2\u0f29\u0f2a\7\u00ff\2\2\u0f2a\u0f2b\7\u0093\2\2")
        buf.write(u"\u0f2b\u0f2c\5\u01b0\u00d9\2\u0f2c\u0f2d\7\u017d\2\2")
        buf.write(u"\u0f2d\u0f2e\5\u041c\u020f\2\u0f2e\u0f2f\7\u00c6\2\2")
        buf.write(u"\u0f2f\u0f30\5\u01bc\u00df\2\u0f30\u0f71\3\2\2\2\u0f31")
        buf.write(u"\u0f32\7L\2\2\u0f32\u0f33\7\u00fd\2\2\u0f33\u0f34\7\u00cd")
        buf.write(u"\2\2\u0f34\u0f35\7\u00f8\2\2\u0f35\u0f36\5\u00f2z\2\u0f36")
        buf.write(u"\u0f37\7\u00c6\2\2\u0f37\u0f38\5\u01bc\u00df\2\u0f38")
        buf.write(u"\u0f71\3\2\2\2\u0f39\u0f3a\7L\2\2\u0f3a\u0f3b\7\u00fd")
        buf.write(u"\2\2\u0f3b\u0f3c\7=\2\2\u0f3c\u0f3d\7\r\2\2\u0f3d\u0f3e")
        buf.write(u"\5\u036a\u01b6\2\u0f3e\u0f3f\7&\2\2\u0f3f\u0f40\5\u036a")
        buf.write(u"\u01b6\2\u0f40\u0f41\7\6\2\2\u0f41\u0f42\7\u00c6\2\2")
        buf.write(u"\u0f42\u0f43\5\u01bc\u00df\2\u0f43\u0f71\3\2\2\2\u0f44")
        buf.write(u"\u0f45\7L\2\2\u0f45\u0f46\7\u00fd\2\2\u0f46\u0f47\5\u0104")
        buf.write(u"\u0083\2\u0f47\u0f48\7\u00cc\2\2\u0f48\u0f49\5\u01b0")
        buf.write(u"\u00d9\2\u0f49\u0f4a\7\u00c6\2\2\u0f4a\u0f4b\5\u01bc")
        buf.write(u"\u00df\2\u0f4b\u0f71\3\2\2\2\u0f4c\u0f4d\7L\2\2\u0f4d")
        buf.write(u"\u0f4e\7\u00fd\2\2\u0f4e\u0f4f\7\u0163\2\2\u0f4f\u0f50")
        buf.write(u"\7\u013c\2\2\u0f50\u0f51\7\u010b\2\2\u0f51\u0f52\5\u01b0")
        buf.write(u"\u00d9\2\u0f52\u0f53\7\u00c6\2\2\u0f53\u0f54\5\u01bc")
        buf.write(u"\u00df\2\u0f54\u0f71\3\2\2\2\u0f55\u0f56\7L\2\2\u0f56")
        buf.write(u"\u0f57\7\u00fd\2\2\u0f57\u0f58\7\u0163\2\2\u0f58\u0f59")
        buf.write(u"\7\u013c\2\2\u0f59\u0f5a\7w\2\2\u0f5a\u0f5b\5\u01b0\u00d9")
        buf.write(u"\2\u0f5b\u0f5c\7\u00c6\2\2\u0f5c\u0f5d\5\u01bc\u00df")
        buf.write(u"\2\u0f5d\u0f71\3\2\2\2\u0f5e\u0f5f\7L\2\2\u0f5f\u0f60")
        buf.write(u"\7\u00fd\2\2\u0f60\u0f61\7\u0163\2\2\u0f61\u0f62\7\u013c")
        buf.write(u"\2\2\u0f62\u0f63\7\u0161\2\2\u0f63\u0f64\5\u01b0\u00d9")
        buf.write(u"\2\u0f64\u0f65\7\u00c6\2\2\u0f65\u0f66\5\u01bc\u00df")
        buf.write(u"\2\u0f66\u0f71\3\2\2\2\u0f67\u0f68\7L\2\2\u0f68\u0f69")
        buf.write(u"\7\u00fd\2\2\u0f69\u0f6a\7\u0163\2\2\u0f6a\u0f6b\7\u013c")
        buf.write(u"\2\2\u0f6b\u0f6c\7Q\2\2\u0f6c\u0f6d\5\u01b0\u00d9\2\u0f6d")
        buf.write(u"\u0f6e\7\u00c6\2\2\u0f6e\u0f6f\5\u01bc\u00df\2\u0f6f")
        buf.write(u"\u0f71\3\2\2\2\u0f70\u0edc\3\2\2\2\u0f70\u0ee3\3\2\2")
        buf.write(u"\2\u0f70\u0eeb\3\2\2\2\u0f70\u0ef3\3\2\2\2\u0f70\u0efb")
        buf.write(u"\3\2\2\2\u0f70\u0f04\3\2\2\2\u0f70\u0f0d\3\2\2\2\u0f70")
        buf.write(u"\u0f14\3\2\2\2\u0f70\u0f1d\3\2\2\2\u0f70\u0f27\3\2\2")
        buf.write(u"\2\u0f70\u0f31\3\2\2\2\u0f70\u0f39\3\2\2\2\u0f70\u0f44")
        buf.write(u"\3\2\2\2\u0f70\u0f4c\3\2\2\2\u0f70\u0f55\3\2\2\2\u0f70")
        buf.write(u"\u0f5e\3\2\2\2\u0f70\u0f67\3\2\2\2\u0f71\u01b9\3\2\2")
        buf.write(u"\2\u0f72\u0f87\7K\2\2\u0f73\u0f87\7h\2\2\u0f74\u0f87")
        buf.write(u"\7\u013a\2\2\u0f75\u0f87\7\u00b4\2\2\u0f76\u0f87\7\u0140")
        buf.write(u"\2\2\u0f77\u0f87\7\u015d\2\2\u0f78\u0f87\7}\2\2\u0f79")
        buf.write(u"\u0f87\7\u0170\2\2\u0f7a\u0f87\7\u0189\2\2\u0f7b\u0f87")
        buf.write(u"\7J\2\2\u0f7c\u0f87\7W\2\2\u0f7d\u0f87\7\u015f\2\2\u0f7e")
        buf.write(u"\u0f87\7\u008f\2\2\u0f7f\u0f87\7\u0134\2\2\u0f80\u0f81")
        buf.write(u"\7\u009a\2\2\u0f81\u0f87\7\u015d\2\2\u0f82\u0f87\7\u0143")
        buf.write(u"\2\2\u0f83\u0f84\7\u009a\2\2\u0f84\u0f85\7g\2\2\u0f85")
        buf.write(u"\u0f87\7\u0192\2\2\u0f86\u0f72\3\2\2\2\u0f86\u0f73\3")
        buf.write(u"\2\2\2\u0f86\u0f74\3\2\2\2\u0f86\u0f75\3\2\2\2\u0f86")
        buf.write(u"\u0f76\3\2\2\2\u0f86\u0f77\3\2\2\2\u0f86\u0f78\3\2\2")
        buf.write(u"\2\u0f86\u0f79\3\2\2\2\u0f86\u0f7a\3\2\2\2\u0f86\u0f7b")
        buf.write(u"\3\2\2\2\u0f86\u0f7c\3\2\2\2\u0f86\u0f7d\3\2\2\2\u0f86")
        buf.write(u"\u0f7e\3\2\2\2\u0f86\u0f7f\3\2\2\2\u0f86\u0f80\3\2\2")
        buf.write(u"\2\u0f86\u0f82\3\2\2\2\u0f86\u0f83\3\2\2\2\u0f87\u01bb")
        buf.write(u"\3\2\2\2\u0f88\u0f8b\5\u042a\u0216\2\u0f89\u0f8b\7\u00f4")
        buf.write(u"\2\2\u0f8a\u0f88\3\2\2\2\u0f8a\u0f89\3\2\2\2\u0f8b\u01bd")
        buf.write(u"\3\2\2\2\u0f8c\u0f8d\7\u013e\2\2\u0f8d\u0f8e\7\u00cb")
        buf.write(u"\2\2\u0f8e\u0f8f\5\u01c0\u00e1\2\u0f8f\u0f90\7\u00fd")
        buf.write(u"\2\2\u0f90\u0f91\5\u01c2\u00e2\2\u0f91\u0f92\5\u01b0")
        buf.write(u"\u00d9\2\u0f92\u0f93\7\u00c6\2\2\u0f93\u0f94\5\u01c4")
        buf.write(u"\u00e3\2\u0f94\u0fbe\3\2\2\2\u0f95\u0f96\7\u013e\2\2")
        buf.write(u"\u0f96\u0f97\7\u00cb\2\2\u0f97\u0f98\5\u01c0\u00e1\2")
        buf.write(u"\u0f98\u0f99\7\u00fd\2\2\u0f99\u0f9a\7\34\2\2\u0f9a\u0f9b")
        buf.write(u"\5\u0424\u0213\2\u0f9b\u0f9c\5\u017e\u00c0\2\u0f9c\u0f9d")
        buf.write(u"\7\u00c6\2\2\u0f9d\u0f9e\5\u01c4\u00e3\2\u0f9e\u0fbe")
        buf.write(u"\3\2\2\2\u0f9f\u0fa0\7\u013e\2\2\u0fa0\u0fa1\7\u00cb")
        buf.write(u"\2\2\u0fa1\u0fa2\5\u01c0\u00e1\2\u0fa2\u0fa3\7\u00fd")
        buf.write(u"\2\2\u0fa3\u0fa4\7\u009f\2\2\u0fa4\u0fa5\5\u0424\u0213")
        buf.write(u"\2\u0fa5\u0fa6\5\u0210\u0109\2\u0fa6\u0fa7\7\u00c6\2")
        buf.write(u"\2\u0fa7\u0fa8\5\u01c4\u00e3\2\u0fa8\u0fbe\3\2\2\2\u0fa9")
        buf.write(u"\u0faa\7\u013e\2\2\u0faa\u0fab\7\u00cb\2\2\u0fab\u0fac")
        buf.write(u"\5\u01c0\u00e1\2\u0fac\u0fad\7\u00fd\2\2\u0fad\u0fae")
        buf.write(u"\7\u00cd\2\2\u0fae\u0faf\7\u00f8\2\2\u0faf\u0fb0\5\u00f2")
        buf.write(u"z\2\u0fb0\u0fb1\7\u00c6\2\2\u0fb1\u0fb2\5\u01c4\u00e3")
        buf.write(u"\2\u0fb2\u0fbe\3\2\2\2\u0fb3\u0fb4\7\u013e\2\2\u0fb4")
        buf.write(u"\u0fb5\7\u00cb\2\2\u0fb5\u0fb6\5\u01c0\u00e1\2\u0fb6")
        buf.write(u"\u0fb7\7\u00fd\2\2\u0fb7\u0fb8\5\u0104\u0083\2\u0fb8")
        buf.write(u"\u0fb9\7\u00cc\2\2\u0fb9\u0fba\5\u01b0\u00d9\2\u0fba")
        buf.write(u"\u0fbb\7\u00c6\2\2\u0fbb\u0fbc\5\u01c4\u00e3\2\u0fbc")
        buf.write(u"\u0fbe\3\2\2\2\u0fbd\u0f8c\3\2\2\2\u0fbd\u0f95\3\2\2")
        buf.write(u"\2\u0fbd\u0f9f\3\2\2\2\u0fbd\u0fa9\3\2\2\2\u0fbd\u0fb3")
        buf.write(u"\3\2\2\2\u0fbe\u01bf\3\2\2\2\u0fbf\u0fc0\7\u0098\2\2")
        buf.write(u"\u0fc0\u0fc3\5F$\2\u0fc1\u0fc3\3\2\2\2\u0fc2\u0fbf\3")
        buf.write(u"\2\2\2\u0fc2\u0fc1\3\2\2\2\u0fc3\u01c1\3\2\2\2\u0fc4")
        buf.write(u"\u0fd1\7K\2\2\u0fc5\u0fd1\7h\2\2\u0fc6\u0fc7\7\u009a")
        buf.write(u"\2\2\u0fc7\u0fd1\7\u015d\2\2\u0fc8\u0fd1\7\u013a\2\2")
        buf.write(u"\u0fc9\u0fd1\7\u0140\2\2\u0fca\u0fd1\7\u015d\2\2\u0fcb")
        buf.write(u"\u0fd1\7}\2\2\u0fcc\u0fd1\7\u0134\2\2\u0fcd\u0fd1\7\u015f")
        buf.write(u"\2\2\u0fce\u0fd1\7\u0170\2\2\u0fcf\u0fd1\7\u0189\2\2")
        buf.write(u"\u0fd0\u0fc4\3\2\2\2\u0fd0\u0fc5\3\2\2\2\u0fd0\u0fc6")
        buf.write(u"\3\2\2\2\u0fd0\u0fc8\3\2\2\2\u0fd0\u0fc9\3\2\2\2\u0fd0")
        buf.write(u"\u0fca\3\2\2\2\u0fd0\u0fcb\3\2\2\2\u0fd0\u0fcc\3\2\2")
        buf.write(u"\2\u0fd0\u0fcd\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fcf")
        buf.write(u"\3\2\2\2\u0fd1\u01c3\3\2\2\2\u0fd2\u0fd5\5\u042a\u0216")
        buf.write(u"\2\u0fd3\u0fd5\7\u00f4\2\2\u0fd4\u0fd2\3\2\2\2\u0fd4")
        buf.write(u"\u0fd3\3\2\2\2\u0fd5\u01c5\3\2\2\2\u0fd6\u0fd7\7\u0094")
        buf.write(u"\2\2\u0fd7\u0fdb\5\u01c8\u00e5\2\u0fd8\u0fd9\7\u00e6")
        buf.write(u"\2\2\u0fd9\u0fdb\5\u01c8\u00e5\2\u0fda\u0fd6\3\2\2\2")
        buf.write(u"\u0fda\u0fd8\3\2\2\2\u0fdb\u01c7\3\2\2\2\u0fdc\u101f")
        buf.write(u"\5\u02fa\u017e\2\u0fdd\u0fde\5\u01ca\u00e6\2\u0fde\u0fdf")
        buf.write(u"\5\u02fa\u017e\2\u0fdf\u101f\3\2\2\2\u0fe0\u0fe1\7\u00ec")
        buf.write(u"\2\2\u0fe1\u0fe2\5\u01cc\u00e7\2\u0fe2\u0fe3\5\u02fa")
        buf.write(u"\u017e\2\u0fe3\u101f\3\2\2\2\u0fe4\u0fe5\7\u0119\2\2")
        buf.write(u"\u0fe5\u0fe6\5\u01cc\u00e7\2\u0fe6\u0fe7\5\u02fa\u017e")
        buf.write(u"\2\u0fe7\u101f\3\2\2\2\u0fe8\u0fe9\7\u0095\2\2\u0fe9")
        buf.write(u"\u0fea\5\u01cc\u00e7\2\u0fea\u0feb\5\u02fa\u017e\2\u0feb")
        buf.write(u"\u101f\3\2\2\2\u0fec\u0fed\7\u00ce\2\2\u0fed\u0fee\5")
        buf.write(u"\u01cc\u00e7\2\u0fee\u0fef\5\u02fa\u017e\2\u0fef\u101f")
        buf.write(u"\3\2\2\2\u0ff0\u0ff1\7\26\2\2\u0ff1\u0ff2\5\u042e\u0218")
        buf.write(u"\2\u0ff2\u0ff3\5\u01cc\u00e7\2\u0ff3\u0ff4\5\u02fa\u017e")
        buf.write(u"\2\u0ff4\u101f\3\2\2\2\u0ff5\u0ff6\7\u0127\2\2\u0ff6")
        buf.write(u"\u0ff7\5\u042e\u0218\2\u0ff7\u0ff8\5\u01cc\u00e7\2\u0ff8")
        buf.write(u"\u0ff9\5\u02fa\u017e\2\u0ff9\u101f\3\2\2\2\u0ffa\u0ffb")
        buf.write(u"\5\u042e\u0218\2\u0ffb\u0ffc\5\u01cc\u00e7\2\u0ffc\u0ffd")
        buf.write(u"\5\u02fa\u017e\2\u0ffd\u101f\3\2\2\2\u0ffe\u0fff\7\35")
        buf.write(u"\2\2\u0fff\u1000\5\u01cc\u00e7\2\u1000\u1001\5\u02fa")
        buf.write(u"\u017e\2\u1001\u101f\3\2\2\2\u1002\u1003\7\u009b\2\2")
        buf.write(u"\u1003\u1004\5\u01cc\u00e7\2\u1004\u1005\5\u02fa\u017e")
        buf.write(u"\2\u1005\u101f\3\2\2\2\u1006\u1007\7\u009b\2\2\u1007")
        buf.write(u"\u1008\5\u042e\u0218\2\u1008\u1009\5\u01cc\u00e7\2\u1009")
        buf.write(u"\u100a\5\u02fa\u017e\2\u100a\u101f\3\2\2\2\u100b\u100c")
        buf.write(u"\7\u009b\2\2\u100c\u100d\7\35\2\2\u100d\u100e\5\u01cc")
        buf.write(u"\u00e7\2\u100e\u100f\5\u02fa\u017e\2\u100f\u101f\3\2")
        buf.write(u"\2\2\u1010\u1011\7.\2\2\u1011\u1012\5\u01cc\u00e7\2\u1012")
        buf.write(u"\u1013\5\u02fa\u017e\2\u1013\u101f\3\2\2\2\u1014\u1015")
        buf.write(u"\7.\2\2\u1015\u1016\5\u042e\u0218\2\u1016\u1017\5\u01cc")
        buf.write(u"\u00e7\2\u1017\u1018\5\u02fa\u017e\2\u1018\u101f\3\2")
        buf.write(u"\2\2\u1019\u101a\7.\2\2\u101a\u101b\7\35\2\2\u101b\u101c")
        buf.write(u"\5\u01cc\u00e7\2\u101c\u101d\5\u02fa\u017e\2\u101d\u101f")
        buf.write(u"\3\2\2\2\u101e\u0fdc\3\2\2\2\u101e\u0fdd\3\2\2\2\u101e")
        buf.write(u"\u0fe0\3\2\2\2\u101e\u0fe4\3\2\2\2\u101e\u0fe8\3\2\2")
        buf.write(u"\2\u101e\u0fec\3\2\2\2\u101e\u0ff0\3\2\2\2\u101e\u0ff5")
        buf.write(u"\3\2\2\2\u101e\u0ffa\3\2\2\2\u101e\u0ffe\3\2\2\2\u101e")
        buf.write(u"\u1002\3\2\2\2\u101e\u1006\3\2\2\2\u101e\u100b\3\2\2")
        buf.write(u"\2\u101e\u1010\3\2\2\2\u101e\u1014\3\2\2\2\u101e\u1019")
        buf.write(u"\3\2\2\2\u101f\u01c9\3\2\2\2\u1020\u1021\t\7\2\2\u1021")
        buf.write(u"\u01cb\3\2\2\2\u1022\u1025\5\u01ca\u00e6\2\u1023\u1025")
        buf.write(u"\3\2\2\2\u1024\u1022\3\2\2\2\u1024\u1023\3\2\2\2\u1025")
        buf.write(u"\u01cd\3\2\2\2\u1026\u1027\7\u00a2\2\2\u1027\u1028\5")
        buf.write(u"\u01d2\u00ea\2\u1028\u1029\7\u00fd\2\2\u1029\u102a\5")
        buf.write(u"\u01d8\u00ed\2\u102a\u102b\7\u0167\2\2\u102b\u102c\5")
        buf.write(u"\u01da\u00ee\2\u102c\u102d\5\u01de\u00f0\2\u102d\u01cf")
        buf.write(u"\3\2\2\2\u102e\u102f\7\u0132\2\2\u102f\u1030\5\u01d2")
        buf.write(u"\u00ea\2\u1030\u1031\7\u00fd\2\2\u1031\u1032\5\u01d8")
        buf.write(u"\u00ed\2\u1032\u1033\7\u009d\2\2\u1033\u1034\5\u01da")
        buf.write(u"\u00ee\2\u1034\u1035\5b\62\2\u1035\u1042\3\2\2\2\u1036")
        buf.write(u"\u1037\7\u0132\2\2\u1037\u1038\7\u00a2\2\2\u1038\u1039")
        buf.write(u"\7\u0100\2\2\u1039\u103a\7\u0098\2\2\u103a\u103b\5\u01d2")
        buf.write(u"\u00ea\2\u103b\u103c\7\u00fd\2\2\u103c\u103d\5\u01d8")
        buf.write(u"\u00ed\2\u103d\u103e\7\u009d\2\2\u103e\u103f\5\u01da")
        buf.write(u"\u00ee\2\u103f\u1040\5b\62\2\u1040\u1042\3\2\2\2\u1041")
        buf.write(u"\u102e\3\2\2\2\u1041\u1036\3\2\2\2\u1042\u01d1\3\2\2")
        buf.write(u"\2\u1043\u1053\5\u01d4\u00eb\2\u1044\u1053\7\35\2\2\u1045")
        buf.write(u"\u1046\7\35\2\2\u1046\u1053\7\u011a\2\2\u1047\u1048\7")
        buf.write(u"\35\2\2\u1048\u1049\7\r\2\2\u1049\u104a\5\u00c0a\2\u104a")
        buf.write(u"\u104b\7\6\2\2\u104b\u1053\3\2\2\2\u104c\u104d\7\35\2")
        buf.write(u"\2\u104d\u104e\7\u011a\2\2\u104e\u104f\7\r\2\2\u104f")
        buf.write(u"\u1050\5\u00c0a\2\u1050\u1051\7\6\2\2\u1051\u1053\3\2")
        buf.write(u"\2\2\u1052\u1043\3\2\2\2\u1052\u1044\3\2\2\2\u1052\u1045")
        buf.write(u"\3\2\2\2\u1052\u1047\3\2\2\2\u1052\u104c\3\2\2\2\u1053")
        buf.write(u"\u01d3\3\2\2\2\u1054\u1055\b\u00eb\1\2\u1055\u1056\5")
        buf.write(u"\u01d6\u00ec\2\u1056\u105c\3\2\2\2\u1057\u1058\f\3\2")
        buf.write(u"\2\u1058\u1059\7\b\2\2\u1059\u105b\5\u01d6\u00ec\2\u105a")
        buf.write(u"\u1057\3\2\2\2\u105b\u105e\3\2\2\2\u105c\u105a\3\2\2")
        buf.write(u"\2\u105c\u105d\3\2\2\2\u105d\u01d5\3\2\2\2\u105e\u105c")
        buf.write(u"\3\2\2\2\u105f\u1060\7\u013f\2\2\u1060\u1069\5\u00be")
        buf.write(u"`\2\u1061\u1062\7\u0125\2\2\u1062\u1069\5\u00be`\2\u1063")
        buf.write(u"\u1064\7Z\2\2\u1064\u1069\5\u00be`\2\u1065\u1066\5\u0430")
        buf.write(u"\u0219\2\u1066\u1067\5\u00be`\2\u1067\u1069\3\2\2\2\u1068")
        buf.write(u"\u105f\3\2\2\2\u1068\u1061\3\2\2\2\u1068\u1063\3\2\2")
        buf.write(u"\2\u1068\u1065\3\2\2\2\u1069\u01d7\3\2\2\2\u106a\u1097")
        buf.write(u"\5\u0412\u020a\2\u106b\u106c\7\u015d\2\2\u106c\u1097")
        buf.write(u"\5\u0412\u020a\2\u106d\u106e\7\u0140\2\2\u106e\u1097")
        buf.write(u"\5\u0412\u020a\2\u106f\u1070\7\u009a\2\2\u1070\u1071")
        buf.write(u"\7g\2\2\u1071\u1072\7\u0192\2\2\u1072\u1097\5\u0416\u020c")
        buf.write(u"\2\u1073\u1074\7\u009a\2\2\u1074\u1075\7\u0143\2\2\u1075")
        buf.write(u"\u1097\5\u0416\u020c\2\u1076\u1077\7\u009f\2\2\u1077")
        buf.write(u"\u1097\5\u01e0\u00f1\2\u1078\u1079\7h\2\2\u1079\u1097")
        buf.write(u"\5\u0416\u020c\2\u107a\u107b\7}\2\2\u107b\u1097\5\u01ae")
        buf.write(u"\u00d8\2\u107c\u107d\7\u00cc\2\2\u107d\u1097\5\u0416")
        buf.write(u"\u020c\2\u107e\u107f\7\u00cd\2\2\u107f\u1080\7\u00f8")
        buf.write(u"\2\2\u1080\u1097\5\u00f4{\2\u1081\u1082\7\u013a\2\2\u1082")
        buf.write(u"\u1097\5\u0416\u020c\2\u1083\u1084\7\u015f\2\2\u1084")
        buf.write(u"\u1097\5\u0416\u020c\2\u1085\u1086\7\u0170\2\2\u1086")
        buf.write(u"\u1097\5\u01ae\u00d8\2\u1087\u1088\7\35\2\2\u1088\u1089")
        buf.write(u"\7\u015e\2\2\u1089\u108a\7\u00b1\2\2\u108a\u108b\7\u013a")
        buf.write(u"\2\2\u108b\u1097\5\u0416\u020c\2\u108c\u108d\7\35\2\2")
        buf.write(u"\u108d\u108e\7\u0141\2\2\u108e\u108f\7\u00b1\2\2\u108f")
        buf.write(u"\u1090\7\u013a\2\2\u1090\u1097\5\u0416\u020c\2\u1091")
        buf.write(u"\u1092\7\35\2\2\u1092\u1093\7\u00a0\2\2\u1093\u1094\7")
        buf.write(u"\u00b1\2\2\u1094\u1095\7\u013a\2\2\u1095\u1097\5\u0416")
        buf.write(u"\u020c\2\u1096\u106a\3\2\2\2\u1096\u106b\3\2\2\2\u1096")
        buf.write(u"\u106d\3\2\2\2\u1096\u106f\3\2\2\2\u1096\u1073\3\2\2")
        buf.write(u"\2\u1096\u1076\3\2\2\2\u1096\u1078\3\2\2\2\u1096\u107a")
        buf.write(u"\3\2\2\2\u1096\u107c\3\2\2\2\u1096\u107e\3\2\2\2\u1096")
        buf.write(u"\u1081\3\2\2\2\u1096\u1083\3\2\2\2\u1096\u1085\3\2\2")
        buf.write(u"\2\u1096\u1087\3\2\2\2\u1096\u108c\3\2\2\2\u1096\u1091")
        buf.write(u"\3\2\2\2\u1097\u01d9\3\2\2\2\u1098\u1099\b\u00ee\1\2")
        buf.write(u"\u1099\u109a\5\u01dc\u00ef\2\u109a\u10a0\3\2\2\2\u109b")
        buf.write(u"\u109c\f\3\2\2\u109c\u109d\7\b\2\2\u109d\u109f\5\u01dc")
        buf.write(u"\u00ef\2\u109e\u109b\3\2\2\2\u109f\u10a2\3\2\2\2\u10a0")
        buf.write(u"\u109e\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1\u01db\3\2\2")
        buf.write(u"\2\u10a2\u10a0\3\2\2\2\u10a3\u10a7\5\u042c\u0217\2\u10a4")
        buf.write(u"\u10a5\7\u00a5\2\2\u10a5\u10a7\5\u042c\u0217\2\u10a6")
        buf.write(u"\u10a3\3\2\2\2\u10a6\u10a4\3\2\2\2\u10a7\u01dd\3\2\2")
        buf.write(u"\2\u10a8\u10a9\7\u018f\2\2\u10a9\u10aa\7\u00a2\2\2\u10aa")
        buf.write(u"\u10ad\7\u0100\2\2\u10ab\u10ad\3\2\2\2\u10ac\u10a8\3")
        buf.write(u"\2\2\2\u10ac\u10ab\3\2\2\2\u10ad\u01df\3\2\2\2\u10ae")
        buf.write(u"\u10af\b\u00f1\1\2\u10af\u10b0\5\u01e2\u00f2\2\u10b0")
        buf.write(u"\u10b6\3\2\2\2\u10b1\u10b2\f\3\2\2\u10b2\u10b3\7\b\2")
        buf.write(u"\2\u10b3\u10b5\5\u01e2\u00f2\2\u10b4\u10b1\3\2\2\2\u10b5")
        buf.write(u"\u10b8\3\2\2\2\u10b6\u10b4\3\2\2\2\u10b6\u10b7\3\2\2")
        buf.write(u"\2\u10b7\u01e1\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b9\u10ba")
        buf.write(u"\5\u0424\u0213\2\u10ba\u10bb\5\u0210\u0109\2\u10bb\u01e3")
        buf.write(u"\3\2\2\2\u10bc\u10bd\7\u00a2\2\2\u10bd\u10be\5\u01d4")
        buf.write(u"\u00eb\2\u10be\u10bf\7\u0167\2\2\u10bf\u10c0\5\u0416")
        buf.write(u"\u020c\2\u10c0\u10c1\5\u01e8\u00f5\2\u10c1\u10c2\5\u01ea")
        buf.write(u"\u00f6\2\u10c2\u01e5\3\2\2\2\u10c3\u10c4\7\u0132\2\2")
        buf.write(u"\u10c4\u10c5\5\u01d4\u00eb\2\u10c5\u10c6\7\u009d\2\2")
        buf.write(u"\u10c6\u10c7\5\u0416\u020c\2\u10c7\u10c8\5\u01ea\u00f6")
        buf.write(u"\2\u10c8\u10c9\5b\62\2\u10c9\u10d5\3\2\2\2\u10ca\u10cb")
        buf.write(u"\7\u0132\2\2\u10cb\u10cc\7\32\2\2\u10cc\u10cd\7\u0100")
        buf.write(u"\2\2\u10cd\u10ce\7\u0098\2\2\u10ce\u10cf\5\u01d4\u00eb")
        buf.write(u"\2\u10cf\u10d0\7\u009d\2\2\u10d0\u10d1\5\u0416\u020c")
        buf.write(u"\2\u10d1\u10d2\5\u01ea\u00f6\2\u10d2\u10d3\5b\62\2\u10d3")
        buf.write(u"\u10d5\3\2\2\2\u10d4\u10c3\3\2\2\2\u10d4\u10ca\3\2\2")
        buf.write(u"\2\u10d5\u01e7\3\2\2\2\u10d6\u10d7\7\u018f\2\2\u10d7")
        buf.write(u"\u10d8\7\32\2\2\u10d8\u10db\7\u0100\2\2\u10d9\u10db\3")
        buf.write(u"\2\2\2\u10da\u10d6\3\2\2\2\u10da\u10d9\3\2\2\2\u10db")
        buf.write(u"\u01e9\3\2\2\2\u10dc\u10dd\7\u00a3\2\2\u10dd\u10de\7")
        buf.write(u"\67\2\2\u10de\u10e1\5\u042c\u0217\2\u10df\u10e1\3\2\2")
        buf.write(u"\2\u10e0\u10dc\3\2\2\2\u10e0\u10df\3\2\2\2\u10e1\u01eb")
        buf.write(u"\3\2\2\2\u10e2\u10e3\7\37\2\2\u10e3\u10e4\7n\2\2\u10e4")
        buf.write(u"\u10e5\7\u011a\2\2\u10e5\u10e6\5\u01ee\u00f8\2\u10e6")
        buf.write(u"\u10e7\5\u01f2\u00fa\2\u10e7\u01ed\3\2\2\2\u10e8\u10ed")
        buf.write(u"\b\u00f8\1\2\u10e9\u10ea\f\4\2\2\u10ea\u10ec\5\u01f0")
        buf.write(u"\u00f9\2\u10eb\u10e9\3\2\2\2\u10ec\u10ef\3\2\2\2\u10ed")
        buf.write(u"\u10eb\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u01ef\3\2\2")
        buf.write(u"\2\u10ef\u10ed\3\2\2\2\u10f0\u10f1\7\u00b1\2\2\u10f1")
        buf.write(u"\u10f2\7\u013a\2\2\u10f2\u10fa\5\u0416\u020c\2\u10f3")
        buf.write(u"\u10f4\7\u0098\2\2\u10f4\u10f5\7\u0134\2\2\u10f5\u10fa")
        buf.write(u"\5\u0416\u020c\2\u10f6\u10f7\7\u0098\2\2\u10f7\u10f8")
        buf.write(u"\7\u017c\2\2\u10f8\u10fa\5\u0416\u020c\2\u10f9\u10f0")
        buf.write(u"\3\2\2\2\u10f9\u10f3\3\2\2\2\u10f9\u10f6\3\2\2\2\u10fa")
        buf.write(u"\u01f1\3\2\2\2\u10fb\u10fc\7\u00a2\2\2\u10fc\u10fd\5")
        buf.write(u"\u01d2\u00ea\2\u10fd\u10fe\7\u00fd\2\2\u10fe\u10ff\5")
        buf.write(u"\u01f4\u00fb\2\u10ff\u1100\7\u0167\2\2\u1100\u1101\5")
        buf.write(u"\u01da\u00ee\2\u1101\u1102\5\u01de\u00f0\2\u1102\u1117")
        buf.write(u"\3\2\2\2\u1103\u1104\7\u0132\2\2\u1104\u1105\5\u01d2")
        buf.write(u"\u00ea\2\u1105\u1106\7\u00fd\2\2\u1106\u1107\5\u01f4")
        buf.write(u"\u00fb\2\u1107\u1108\7\u009d\2\2\u1108\u1109\5\u01da")
        buf.write(u"\u00ee\2\u1109\u110a\5b\62\2\u110a\u1117\3\2\2\2\u110b")
        buf.write(u"\u110c\7\u0132\2\2\u110c\u110d\7\u00a2\2\2\u110d\u110e")
        buf.write(u"\7\u0100\2\2\u110e\u110f\7\u0098\2\2\u110f\u1110\5\u01d2")
        buf.write(u"\u00ea\2\u1110\u1111\7\u00fd\2\2\u1111\u1112\5\u01f4")
        buf.write(u"\u00fb\2\u1112\u1113\7\u009d\2\2\u1113\u1114\5\u01da")
        buf.write(u"\u00ee\2\u1114\u1115\5b\62\2\u1115\u1117\3\2\2\2\u1116")
        buf.write(u"\u10fb\3\2\2\2\u1116\u1103\3\2\2\2\u1116\u110b\3\2\2")
        buf.write(u"\2\u1117\u01f3\3\2\2\2\u1118\u1119\t\b\2\2\u1119\u01f5")
        buf.write(u"\3\2\2\2\u111a\u111b\7Z\2\2\u111b\u111c\5\u01f8\u00fd")
        buf.write(u"\2\u111c\u111d\7\u00b4\2\2\u111d\u111e\5\u01fa\u00fe")
        buf.write(u"\2\u111e\u111f\5\u01fc\u00ff\2\u111f\u1120\7\u00fd\2")
        buf.write(u"\2\u1120\u1121\5\u0414\u020b\2\u1121\u1122\5\u01fe\u0100")
        buf.write(u"\2\u1122\u1123\7\r\2\2\u1123\u1124\5\u0200\u0101\2\u1124")
        buf.write(u"\u1125\7\6\2\2\u1125\u1126\5j\66\2\u1126\u1127\5\u00da")
        buf.write(u"n\2\u1127\u1128\5\u0360\u01b1\2\u1128\u01f7\3\2\2\2\u1129")
        buf.write(u"\u112c\7\u0176\2\2\u112a\u112c\3\2\2\2\u112b\u1129\3")
        buf.write(u"\2\2\2\u112b\u112a\3\2\2\2\u112c\u01f9\3\2\2\2\u112d")
        buf.write(u"\u1130\7P\2\2\u112e\u1130\3\2\2\2\u112f\u112d\3\2\2\2")
        buf.write(u"\u112f\u112e\3\2\2\2\u1130\u01fb\3\2\2\2\u1131\u1134")
        buf.write(u"\5\u0420\u0211\2\u1132\u1134\3\2\2\2\u1133\u1131\3\2")
        buf.write(u"\2\2\u1133\u1132\3\2\2\2\u1134\u01fd\3\2\2\2\u1135\u1136")
        buf.write(u"\7\u017d\2\2\u1136\u1139\5\u041c\u020f\2\u1137\u1139")
        buf.write(u"\3\2\2\2\u1138\u1135\3\2\2\2\u1138\u1137\3\2\2\2\u1139")
        buf.write(u"\u01ff\3\2\2\2\u113a\u113b\b\u0101\1\2\u113b\u113c\5")
        buf.write(u"\u0202\u0102\2\u113c\u1142\3\2\2\2\u113d\u113e\f\3\2")
        buf.write(u"\2\u113e\u113f\7\b\2\2\u113f\u1141\5\u0202\u0102\2\u1140")
        buf.write(u"\u113d\3\2\2\2\u1141\u1144\3\2\2\2\u1142\u1140\3\2\2")
        buf.write(u"\2\u1142\u1143\3\2\2\2\u1143\u0201\3\2\2\2\u1144\u1142")
        buf.write(u"\3\2\2\2\u1145\u1146\5\u0430\u0219\2\u1146\u1147\5\u0204")
        buf.write(u"\u0103\2\u1147\u1148\5\u0206\u0104\2\u1148\u1149\5\u0208")
        buf.write(u"\u0105\2\u1149\u114a\5\u020a\u0106\2\u114a\u115a\3\2")
        buf.write(u"\2\2\u114b\u114c\5\u03a0\u01d1\2\u114c\u114d\5\u0204")
        buf.write(u"\u0103\2\u114d\u114e\5\u0206\u0104\2\u114e\u114f\5\u0208")
        buf.write(u"\u0105\2\u114f\u1150\5\u020a\u0106\2\u1150\u115a\3\2")
        buf.write(u"\2\2\u1151\u1152\7\r\2\2\u1152\u1153\5\u039a\u01ce\2")
        buf.write(u"\u1153\u1154\7\6\2\2\u1154\u1155\5\u0204\u0103\2\u1155")
        buf.write(u"\u1156\5\u0206\u0104\2\u1156\u1157\5\u0208\u0105\2\u1157")
        buf.write(u"\u1158\5\u020a\u0106\2\u1158\u115a\3\2\2\2\u1159\u1145")
        buf.write(u"\3\2\2\2\u1159\u114b\3\2\2\2\u1159\u1151\3\2\2\2\u115a")
        buf.write(u"\u0203\3\2\2\2\u115b\u115c\7I\2\2\u115c\u115f\5\u01b0")
        buf.write(u"\u00d9\2\u115d\u115f\3\2\2\2\u115e\u115b\3\2\2\2\u115e")
        buf.write(u"\u115d\3\2\2\2\u115f\u0205\3\2\2\2\u1160\u1165\5\u01b0")
        buf.write(u"\u00d9\2\u1161\u1162\7\u017d\2\2\u1162\u1165\5\u01b0")
        buf.write(u"\u00d9\2\u1163\u1165\3\2\2\2\u1164\u1160\3\2\2\2\u1164")
        buf.write(u"\u1161\3\2\2\2\u1164\u1163\3\2\2\2\u1165\u0207\3\2\2")
        buf.write(u"\2\u1166\u116a\7\'\2\2\u1167\u116a\7v\2\2\u1168\u116a")
        buf.write(u"\3\2\2\2\u1169\u1166\3\2\2\2\u1169\u1167\3\2\2\2\u1169")
        buf.write(u"\u1168\3\2\2\2\u116a\u0209\3\2\2\2\u116b\u116f\7\u01a7")
        buf.write(u"\2\2\u116c\u116f\7\u01a8\2\2\u116d\u116f\3\2\2\2\u116e")
        buf.write(u"\u116b\3\2\2\2\u116e\u116c\3\2\2\2\u116e\u116d\3\2\2")
        buf.write(u"\2\u116f\u020b\3\2\2\2\u1170\u1171\7Z\2\2\u1171\u1172")
        buf.write(u"\5\u020e\u0108\2\u1172\u1173\7\u009f\2\2\u1173\u1174")
        buf.write(u"\5\u0424\u0213\2\u1174\u1175\5\u0214\u010b\2\u1175\u1176")
        buf.write(u"\7\u0131\2\2\u1176\u1177\5\u021e\u0110\2\u1177\u1178")
        buf.write(u"\5\u0224\u0113\2\u1178\u1179\5\u022c\u0117\2\u1179\u1190")
        buf.write(u"\3\2\2\2\u117a\u117b\7Z\2\2\u117b\u117c\5\u020e\u0108")
        buf.write(u"\2\u117c\u117d\7\u009f\2\2\u117d\u117e\5\u0424\u0213")
        buf.write(u"\2\u117e\u117f\5\u0214\u010b\2\u117f\u1180\7\u0131\2")
        buf.write(u"\2\u1180\u1181\7\u015d\2\2\u1181\u1182\7\r\2\2\u1182")
        buf.write(u"\u1183\5\u0230\u0119\2\u1183\u1184\7\6\2\2\u1184\u1185")
        buf.write(u"\5\u0224\u0113\2\u1185\u1186\5\u022c\u0117\2\u1186\u1190")
        buf.write(u"\3\2\2\2\u1187\u1188\7Z\2\2\u1188\u1189\5\u020e\u0108")
        buf.write(u"\2\u1189\u118a\7\u009f\2\2\u118a\u118b\5\u0424\u0213")
        buf.write(u"\2\u118b\u118c\5\u0214\u010b\2\u118c\u118d\5\u0224\u0113")
        buf.write(u"\2\u118d\u118e\5\u022c\u0117\2\u118e\u1190\3\2\2\2\u118f")
        buf.write(u"\u1170\3\2\2\2\u118f\u117a\3\2\2\2\u118f\u1187\3\2\2")
        buf.write(u"\2\u1190\u020d\3\2\2\2\u1191\u1192\7\u0102\2\2\u1192")
        buf.write(u"\u1195\7\u012b\2\2\u1193\u1195\3\2\2\2\u1194\u1191\3")
        buf.write(u"\2\2\2\u1194\u1193\3\2\2\2\u1195\u020f\3\2\2\2\u1196")
        buf.write(u"\u1197\7\r\2\2\u1197\u1198\5\u0212\u010a\2\u1198\u1199")
        buf.write(u"\7\6\2\2\u1199\u119d\3\2\2\2\u119a\u119b\7\r\2\2\u119b")
        buf.write(u"\u119d\7\6\2\2\u119c\u1196\3\2\2\2\u119c\u119a\3\2\2")
        buf.write(u"\2\u119d\u0211\3\2\2\2\u119e\u119f\b\u010a\1\2\u119f")
        buf.write(u"\u11a0\5\u0218\u010d\2\u11a0\u11a6\3\2\2\2\u11a1\u11a2")
        buf.write(u"\f\3\2\2\u11a2\u11a3\7\b\2\2\u11a3\u11a5\5\u0218\u010d")
        buf.write(u"\2\u11a4\u11a1\3\2\2\2\u11a5\u11a8\3\2\2\2\u11a6\u11a4")
        buf.write(u"\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u0213\3\2\2\2\u11a8")
        buf.write(u"\u11a6\3\2\2\2\u11a9\u11aa\7\r\2\2\u11aa\u11ab\5\u0216")
        buf.write(u"\u010c\2\u11ab\u11ac\7\6\2\2\u11ac\u11b0\3\2\2\2\u11ad")
        buf.write(u"\u11ae\7\r\2\2\u11ae\u11b0\7\6\2\2\u11af\u11a9\3\2\2")
        buf.write(u"\2\u11af\u11ad\3\2\2\2\u11b0\u0215\3\2\2\2\u11b1\u11b2")
        buf.write(u"\b\u010c\1\2\u11b2\u11b3\5\u0222\u0112\2\u11b3\u11b9")
        buf.write(u"\3\2\2\2\u11b4\u11b5\f\3\2\2\u11b5\u11b6\7\b\2\2\u11b6")
        buf.write(u"\u11b8\5\u0222\u0112\2\u11b7\u11b4\3\2\2\2\u11b8\u11bb")
        buf.write(u"\3\2\2\2\u11b9\u11b7\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba")
        buf.write(u"\u0217\3\2\2\2\u11bb\u11b9\3\2\2\2\u11bc\u11bd\5\u021a")
        buf.write(u"\u010e\2\u11bd\u11be\5\u021c\u010f\2\u11be\u11bf\5\u0220")
        buf.write(u"\u0111\2\u11bf\u11cc\3\2\2\2\u11c0\u11c1\5\u021c\u010f")
        buf.write(u"\2\u11c1\u11c2\5\u021a\u010e\2\u11c2\u11c3\5\u0220\u0111")
        buf.write(u"\2\u11c3\u11cc\3\2\2\2\u11c4\u11c5\5\u021c\u010f\2\u11c5")
        buf.write(u"\u11c6\5\u0220\u0111\2\u11c6\u11cc\3\2\2\2\u11c7\u11c8")
        buf.write(u"\5\u021a\u010e\2\u11c8\u11c9\5\u0220\u0111\2\u11c9\u11cc")
        buf.write(u"\3\2\2\2\u11ca\u11cc\5\u0220\u0111\2\u11cb\u11bc\3\2")
        buf.write(u"\2\2\u11cb\u11c0\3\2\2\2\u11cb\u11c4\3\2\2\2\u11cb\u11c7")
        buf.write(u"\3\2\2\2\u11cb\u11ca\3\2\2\2\u11cc\u0219\3\2\2\2\u11cd")
        buf.write(u"\u11d4\7\u00b1\2\2\u11ce\u11d4\7\u0104\2\2\u11cf\u11d4")
        buf.write(u"\7\u00bb\2\2\u11d0\u11d1\7\u00b1\2\2\u11d1\u11d4\7\u0104")
        buf.write(u"\2\2\u11d2\u11d4\7\u0185\2\2\u11d3\u11cd\3\2\2\2\u11d3")
        buf.write(u"\u11ce\3\2\2\2\u11d3\u11cf\3\2\2\2\u11d3\u11d0\3\2\2")
        buf.write(u"\2\u11d3\u11d2\3\2\2\2\u11d4\u021b\3\2\2\2\u11d5\u11d6")
        buf.write(u"\5\u0432\u021a\2\u11d6\u021d\3\2\2\2\u11d7\u11d8\5\u0220")
        buf.write(u"\u0111\2\u11d8\u021f\3\2\2\2\u11d9\u11e6\5\u036a\u01b6")
        buf.write(u"\2\u11da\u11db\5\u0432\u021a\2\u11db\u11dc\5\u01b2\u00da")
        buf.write(u"\2\u11dc\u11dd\7\4\2\2\u11dd\u11de\7\u0170\2\2\u11de")
        buf.write(u"\u11e6\3\2\2\2\u11df\u11e0\7\u0147\2\2\u11e0\u11e1\5")
        buf.write(u"\u0432\u021a\2\u11e1\u11e2\5\u01b2\u00da\2\u11e2\u11e3")
        buf.write(u"\7\4\2\2\u11e3\u11e4\7\u0170\2\2\u11e4\u11e6\3\2\2\2")
        buf.write(u"\u11e5\u11d9\3\2\2\2\u11e5\u11da\3\2\2\2\u11e5\u11df")
        buf.write(u"\3\2\2\2\u11e6\u0221\3\2\2\2\u11e7\u11f1\5\u0218\u010d")
        buf.write(u"\2\u11e8\u11e9\5\u0218\u010d\2\u11e9\u11ea\7n\2\2\u11ea")
        buf.write(u"\u11eb\5\u039a\u01ce\2\u11eb\u11f1\3\2\2\2\u11ec\u11ed")
        buf.write(u"\5\u0218\u010d\2\u11ed\u11ee\7\20\2\2\u11ee\u11ef\5\u039a")
        buf.write(u"\u01ce\2\u11ef\u11f1\3\2\2\2\u11f0\u11e7\3\2\2\2\u11f0")
        buf.write(u"\u11e8\3\2\2\2\u11f0\u11ec\3\2\2\2\u11f1\u0223\3\2\2")
        buf.write(u"\2\u11f2\u11f3\b\u0113\1\2\u11f3\u11f4\5\u0228\u0115")
        buf.write(u"\2\u11f4\u11f9\3\2\2\2\u11f5\u11f6\f\3\2\2\u11f6\u11f8")
        buf.write(u"\5\u0228\u0115\2\u11f7\u11f5\3\2\2\2\u11f8\u11fb\3\2")
        buf.write(u"\2\2\u11f9\u11f7\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa\u0225")
        buf.write(u"\3\2\2\2\u11fb\u11f9\3\2\2\2\u11fc\u11fd\79\2\2\u11fd")
        buf.write(u"\u11fe\7\u00fd\2\2\u11fe\u11ff\7\u00f4\2\2\u11ff\u121c")
        buf.write(u"\7\u00bc\2\2\u1200\u1201\7\u0131\2\2\u1201\u1202\7\u00f4")
        buf.write(u"\2\2\u1202\u1203\7\u00fd\2\2\u1203\u1204\7\u00f4\2\2")
        buf.write(u"\u1204\u121c\7\u00bc\2\2\u1205\u121c\7\u0157\2\2\u1206")
        buf.write(u"\u121c\7\u00af\2\2\u1207\u121c\7\u014f\2\2\u1208\u121c")
        buf.write(u"\7\u018a\2\2\u1209\u120a\7\u0090\2\2\u120a\u120b\7\u013e")
        buf.write(u"\2\2\u120b\u121c\7r\2\2\u120c\u120d\7\u0090\2\2\u120d")
        buf.write(u"\u120e\7\u013e\2\2\u120e\u121c\7\u00c5\2\2\u120f\u1210")
        buf.write(u"\7\u013e\2\2\u1210\u121c\7r\2\2\u1211\u1212\7\u013e\2")
        buf.write(u"\2\u1212\u121c\7\u00c5\2\2\u1213\u121c\7\u00d2\2\2\u1214")
        buf.write(u"\u1215\7\u00ef\2\2\u1215\u121c\7\u00d2\2\2\u1216\u1217")
        buf.write(u"\7Y\2\2\u1217\u121c\5\u00f2z\2\u1218\u1219\7\u0137\2")
        buf.write(u"\2\u1219\u121c\5\u00f2z\2\u121a\u121c\5L\'\2\u121b\u11fc")
        buf.write(u"\3\2\2\2\u121b\u1200\3\2\2\2\u121b\u1205\3\2\2\2\u121b")
        buf.write(u"\u1206\3\2\2\2\u121b\u1207\3\2\2\2\u121b\u1208\3\2\2")
        buf.write(u"\2\u121b\u1209\3\2\2\2\u121b\u120c\3\2\2\2\u121b\u120f")
        buf.write(u"\3\2\2\2\u121b\u1211\3\2\2\2\u121b\u1213\3\2\2\2\u121b")
        buf.write(u"\u1214\3\2\2\2\u121b\u1216\3\2\2\2\u121b\u1218\3\2\2")
        buf.write(u"\2\u121b\u121a\3\2\2\2\u121c\u0227\3\2\2\2\u121d\u121e")
        buf.write(u"\7&\2\2\u121e\u1224\5\u022a\u0116\2\u121f\u1220\7\u00cc")
        buf.write(u"\2\2\u1220\u1224\5F$\2\u1221\u1224\7\u018e\2\2\u1222")
        buf.write(u"\u1224\5\u0226\u0114\2\u1223\u121d\3\2\2\2\u1223\u121f")
        buf.write(u"\3\2\2\2\u1223\u1221\3\2\2\2\u1223\u1222\3\2\2\2\u1224")
        buf.write(u"\u0229\3\2\2\2\u1225\u122b\5\u042a\u0216\2\u1226\u1227")
        buf.write(u"\5\u042a\u0216\2\u1227\u1228\7\b\2\2\u1228\u1229\5\u042a")
        buf.write(u"\u0216\2\u1229\u122b\3\2\2\2\u122a\u1225\3\2\2\2\u122a")
        buf.write(u"\u1226\3\2\2\2\u122b\u022b\3\2\2\2\u122c\u122d\7\u018f")
        buf.write(u"\2\2\u122d\u1230\5\u0176\u00bc\2\u122e\u1230\3\2\2\2")
        buf.write(u"\u122f\u122c\3\2\2\2\u122f\u122e\3\2\2\2\u1230\u022d")
        buf.write(u"\3\2\2\2\u1231\u1232\5\u021c\u010f\2\u1232\u1233\5\u0220")
        buf.write(u"\u0111\2\u1233\u022f\3\2\2\2\u1234\u1235\b\u0119\1\2")
        buf.write(u"\u1235\u1236\5\u022e\u0118\2\u1236\u123c\3\2\2\2\u1237")
        buf.write(u"\u1238\f\3\2\2\u1238\u1239\7\b\2\2\u1239\u123b\5\u022e")
        buf.write(u"\u0118\2\u123a\u1237\3\2\2\2\u123b\u123e\3\2\2\2\u123c")
        buf.write(u"\u123a\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u0231\3\2\2")
        buf.write(u"\2\u123e\u123c\3\2\2\2\u123f\u1240\7\37\2\2\u1240\u1241")
        buf.write(u"\7\u009f\2\2\u1241\u1242\5\u01e2\u00f2\2\u1242\u1243")
        buf.write(u"\5\u0234\u011b\2\u1243\u1244\5\u0236\u011c\2\u1244\u0233")
        buf.write(u"\3\2\2\2\u1245\u1246\b\u011b\1\2\u1246\u1247\5\u0226")
        buf.write(u"\u0114\2\u1247\u124c\3\2\2\2\u1248\u1249\f\3\2\2\u1249")
        buf.write(u"\u124b\5\u0226\u0114\2\u124a\u1248\3\2\2\2\u124b\u124e")
        buf.write(u"\3\2\2\2\u124c\u124a\3\2\2\2\u124c\u124d\3\2\2\2\u124d")
        buf.write(u"\u0235\3\2\2\2\u124e\u124c\3\2\2\2\u124f\u1252\7\u012f")
        buf.write(u"\2\2\u1250\u1252\3\2\2\2\u1251\u124f\3\2\2\2\u1251\u1250")
        buf.write(u"\3\2\2\2\u1252\u0237\3\2\2\2\u1253\u1254\7\177\2\2\u1254")
        buf.write(u"\u1255\7\u009f\2\2\u1255\u1256\5\u0424\u0213\2\u1256")
        buf.write(u"\u1257\5\u0210\u0109\2\u1257\u1258\5b\62\2\u1258\u1262")
        buf.write(u"\3\2\2\2\u1259\u125a\7\177\2\2\u125a\u125b\7\u009f\2")
        buf.write(u"\2\u125b\u125c\7\u00ac\2\2\u125c\u125d\7\u008d\2\2\u125d")
        buf.write(u"\u125e\5\u0424\u0213\2\u125e\u125f\5\u0210\u0109\2\u125f")
        buf.write(u"\u1260\5b\62\2\u1260\u1262\3\2\2\2\u1261\u1253\3\2\2")
        buf.write(u"\2\u1261\u1259\3\2\2\2\u1262\u0239\3\2\2\2\u1263\u1264")
        buf.write(u"\7\177\2\2\u1264\u1265\7\34\2\2\u1265\u1266\5\u0424\u0213")
        buf.write(u"\2\u1266\u1267\5\u017e\u00c0\2\u1267\u1268\5b\62\2\u1268")
        buf.write(u"\u1272\3\2\2\2\u1269\u126a\7\177\2\2\u126a\u126b\7\34")
        buf.write(u"\2\2\u126b\u126c\7\u00ac\2\2\u126c\u126d\7\u008d\2\2")
        buf.write(u"\u126d\u126e\5\u0424\u0213\2\u126e\u126f\5\u017e\u00c0")
        buf.write(u"\2\u126f\u1270\5b\62\2\u1270\u1272\3\2\2\2\u1271\u1263")
        buf.write(u"\3\2\2\2\u1271\u1269\3\2\2\2\u1272\u023b\3\2\2\2\u1273")
        buf.write(u"\u1274\7\177\2\2\u1274\u1275\7\u00ff\2\2\u1275\u1276")
        buf.write(u"\5\u0240\u0121\2\u1276\u1277\5\u023e\u0120\2\u1277\u1278")
        buf.write(u"\5b\62\2\u1278\u1282\3\2\2\2\u1279\u127a\7\177\2\2\u127a")
        buf.write(u"\u127b\7\u00ff\2\2\u127b\u127c\7\u00ac\2\2\u127c\u127d")
        buf.write(u"\7\u008d\2\2\u127d\u127e\5\u0240\u0121\2\u127e\u127f")
        buf.write(u"\5\u023e\u0120\2\u127f\u1280\5b\62\2\u1280\u1282\3\2")
        buf.write(u"\2\2\u1281\u1273\3\2\2\2\u1281\u1279\3\2\2\2\u1282\u023d")
        buf.write(u"\3\2\2\2\u1283\u1284\7\r\2\2\u1284\u1285\5\u036a\u01b6")
        buf.write(u"\2\u1285\u1286\7\6\2\2\u1286\u129a\3\2\2\2\u1287\u1288")
        buf.write(u"\7\r\2\2\u1288\u1289\5\u036a\u01b6\2\u1289\u128a\7\b")
        buf.write(u"\2\2\u128a\u128b\5\u036a\u01b6\2\u128b\u128c\7\6\2\2")
        buf.write(u"\u128c\u129a\3\2\2\2\u128d\u128e\7\r\2\2\u128e\u128f")
        buf.write(u"\7\u00ee\2\2\u128f\u1290\7\b\2\2\u1290\u1291\5\u036a")
        buf.write(u"\u01b6\2\u1291\u1292\7\6\2\2\u1292\u129a\3\2\2\2\u1293")
        buf.write(u"\u1294\7\r\2\2\u1294\u1295\5\u036a\u01b6\2\u1295\u1296")
        buf.write(u"\7\b\2\2\u1296\u1297\7\u00ee\2\2\u1297\u1298\7\6\2\2")
        buf.write(u"\u1298\u129a\3\2\2\2\u1299\u1283\3\2\2\2\u1299\u1287")
        buf.write(u"\3\2\2\2\u1299\u128d\3\2\2\2\u1299\u1293\3\2\2\2\u129a")
        buf.write(u"\u023f\3\2\2\2\u129b\u12a1\5\u03ca\u01e6\2\u129c\u129d")
        buf.write(u"\5\u0430\u0219\2\u129d\u129e\7\7\2\2\u129e\u129f\5\u0240")
        buf.write(u"\u0121\2\u129f\u12a1\3\2\2\2\u12a0\u129b\3\2\2\2\u12a0")
        buf.write(u"\u129c\3\2\2\2\u12a1\u0241\3\2\2\2\u12a2\u12a3\7{\2\2")
        buf.write(u"\u12a3\u12a4\5\u0244\u0123\2\u12a4\u0243\3\2\2\2\u12a5")
        buf.write(u"\u12a6\b\u0123\1\2\u12a6\u12a7\5\u0246\u0124\2\u12a7")
        buf.write(u"\u12ac\3\2\2\2\u12a8\u12a9\f\3\2\2\u12a9\u12ab\5\u0246")
        buf.write(u"\u0124\2\u12aa\u12a8\3\2\2\2\u12ab\u12ae\3\2\2\2\u12ac")
        buf.write(u"\u12aa\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u0245\3\2\2")
        buf.write(u"\2\u12ae\u12ac\3\2\2\2\u12af\u12b3\5\u042a\u0216\2\u12b0")
        buf.write(u"\u12b1\7\u00cc\2\2\u12b1\u12b3\5F$\2\u12b2\u12af\3\2")
        buf.write(u"\2\2\u12b2\u12b0\3\2\2\2\u12b3\u0247\3\2\2\2\u12b4\u12b5")
        buf.write(u"\7Z\2\2\u12b5\u12b6\7=\2\2\u12b6\u12b7\7\r\2\2\u12b7")
        buf.write(u"\u12b8\5\u036a\u01b6\2\u12b8\u12b9\7&\2\2\u12b9\u12ba")
        buf.write(u"\5\u036a\u01b6\2\u12ba\u12bb\7\6\2\2\u12bb\u12bc\7\u018f")
        buf.write(u"\2\2\u12bc\u12bd\7\u009f\2\2\u12bd\u12be\5\u01e2\u00f2")
        buf.write(u"\2\u12be\u12bf\5\u024a\u0126\2\u12bf\u12d7\3\2\2\2\u12c0")
        buf.write(u"\u12c1\7Z\2\2\u12c1\u12c2\7=\2\2\u12c2\u12c3\7\r\2\2")
        buf.write(u"\u12c3\u12c4\5\u036a\u01b6\2\u12c4\u12c5\7&\2\2\u12c5")
        buf.write(u"\u12c6\5\u036a\u01b6\2\u12c6\u12c7\7\6\2\2\u12c7\u12c8")
        buf.write(u"\7\u0190\2\2\u12c8\u12c9\7\u009f\2\2\u12c9\u12ca\5\u024a")
        buf.write(u"\u0126\2\u12ca\u12d7\3\2\2\2\u12cb\u12cc\7Z\2\2\u12cc")
        buf.write(u"\u12cd\7=\2\2\u12cd\u12ce\7\r\2\2\u12ce\u12cf\5\u036a")
        buf.write(u"\u01b6\2\u12cf\u12d0\7&\2\2\u12d0\u12d1\5\u036a\u01b6")
        buf.write(u"\2\u12d1\u12d2\7\6\2\2\u12d2\u12d3\7\u018f\2\2\u12d3")
        buf.write(u"\u12d4\7\u00bb\2\2\u12d4\u12d5\5\u024a\u0126\2\u12d5")
        buf.write(u"\u12d7\3\2\2\2\u12d6\u12b4\3\2\2\2\u12d6\u12c0\3\2\2")
        buf.write(u"\2\u12d6\u12cb\3\2\2\2\u12d7\u0249\3\2\2\2\u12d8\u12d9")
        buf.write(u"\7&\2\2\u12d9\u12de\7\u00b0\2\2\u12da\u12db\7&\2\2\u12db")
        buf.write(u"\u12de\7)\2\2\u12dc\u12de\3\2\2\2\u12dd\u12d8\3\2\2\2")
        buf.write(u"\u12dd\u12da\3\2\2\2\u12dd\u12dc\3\2\2\2\u12de\u024b")
        buf.write(u"\3\2\2\2\u12df\u12e0\7\177\2\2\u12e0\u12e1\7=\2\2\u12e1")
        buf.write(u"\u12e2\5\u024e\u0128\2\u12e2\u12e3\7\r\2\2\u12e3\u12e4")
        buf.write(u"\5\u036a\u01b6\2\u12e4\u12e5\7&\2\2\u12e5\u12e6\5\u036a")
        buf.write(u"\u01b6\2\u12e6\u12e7\7\6\2\2\u12e7\u12e8\5b\62\2\u12e8")
        buf.write(u"\u024d\3\2\2\2\u12e9\u12ea\7\u00ac\2\2\u12ea\u12ed\7")
        buf.write(u"\u008d\2\2\u12eb\u12ed\3\2\2\2\u12ec\u12e9\3\2\2\2\u12ec")
        buf.write(u"\u12eb\3\2\2\2\u12ed\u024f\3\2\2\2\u12ee\u12ef\7\u0126")
        buf.write(u"\2\2\u12ef\u12f0\5\u0252\u012a\2\u12f0\u12f1\5\u0414")
        buf.write(u"\u020b\2\u12f1\u12f2\5\u0254\u012b\2\u12f2\u12fe\3\2")
        buf.write(u"\2\2\u12f3\u12f4\7\u0126\2\2\u12f4\u12f5\7\u015c\2\2")
        buf.write(u"\u12f5\u12f6\5\u0418\u020d\2\u12f6\u12f7\5\u0254\u012b")
        buf.write(u"\2\u12f7\u12fe\3\2\2\2\u12f8\u12f9\7\u0126\2\2\u12f9")
        buf.write(u"\u12fa\7h\2\2\u12fa\u12fb\5\u0418\u020d\2\u12fb\u12fc")
        buf.write(u"\5\u0254\u012b\2\u12fc\u12fe\3\2\2\2\u12fd\u12ee\3\2")
        buf.write(u"\2\2\u12fd\u12f3\3\2\2\2\u12fd\u12f8\3\2\2\2\u12fe\u0251")
        buf.write(u"\3\2\2\2\u12ff\u1300\t\t\2\2\u1300\u0253\3\2\2\2\u1301")
        buf.write(u"\u1304\7\u0099\2\2\u1302\u1304\3\2\2\2\u1303\u1301\3")
        buf.write(u"\2\2\2\u1303\u1302\3\2\2\2\u1304\u0255\3\2\2\2\u1305")
        buf.write(u"\u1306\7\37\2\2\u1306\u1307\7\34\2\2\u1307\u1308\5\u0424")
        buf.write(u"\u0213\2\u1308\u1309\5\u017e\u00c0\2\u1309\u130a\7\u0129")
        buf.write(u"\2\2\u130a\u130b\7\u0167\2\2\u130b\u130c\5\u0418\u020d")
        buf.write(u"\2\u130c\u1458\3\2\2\2\u130d\u130e\7\37\2\2\u130e\u130f")
        buf.write(u"\7J\2\2\u130f\u1310\5\u01b0\u00d9\2\u1310\u1311\7\u0129")
        buf.write(u"\2\2\u1311\u1312\7\u0167\2\2\u1312\u1313\5\u0418\u020d")
        buf.write(u"\2\u1313\u1458\3\2\2\2\u1314\u1315\7\37\2\2\u1315\u1316")
        buf.write(u"\7W\2\2\u1316\u1317\5\u01b0\u00d9\2\u1317\u1318\7\u0129")
        buf.write(u"\2\2\u1318\u1319\7\u0167\2\2\u1319\u131a\5\u0418\u020d")
        buf.write(u"\2\u131a\u1458\3\2\2\2\u131b\u131c\7\37\2\2\u131c\u131d")
        buf.write(u"\7h\2\2\u131d\u131e\5\u041a\u020e\2\u131e\u131f\7\u0129")
        buf.write(u"\2\2\u131f\u1320\7\u0167\2\2\u1320\u1321\5\u041a\u020e")
        buf.write(u"\2\u1321\u1458\3\2\2\2\u1322\u1323\7\37\2\2\u1323\u1324")
        buf.write(u"\7}\2\2\u1324\u1325\5\u01b0\u00d9\2\u1325\u1326\7\u0129")
        buf.write(u"\2\2\u1326\u1327\7\u0167\2\2\u1327\u1328\5\u0418\u020d")
        buf.write(u"\2\u1328\u1458\3\2\2\2\u1329\u132a\7\37\2\2\u132a\u132b")
        buf.write(u"\7}\2\2\u132b\u132c\5\u01b0\u00d9\2\u132c\u132d\7\u0129")
        buf.write(u"\2\2\u132d\u132e\7S\2\2\u132e\u132f\5\u0418\u020d\2\u132f")
        buf.write(u"\u1330\7\u0167\2\2\u1330\u1331\5\u0418\u020d\2\u1331")
        buf.write(u"\u1458\3\2\2\2\u1332\u1333\7\37\2\2\u1333\u1334\7\u009a")
        buf.write(u"\2\2\u1334\u1335\7g\2\2\u1335\u1336\7\u0192\2\2\u1336")
        buf.write(u"\u1337\5\u0418\u020d\2\u1337\u1338\7\u0129\2\2\u1338")
        buf.write(u"\u1339\7\u0167\2\2\u1339\u133a\5\u0418\u020d\2\u133a")
        buf.write(u"\u1458\3\2\2\2\u133b\u133c\7\37\2\2\u133c\u133d\7\u009f")
        buf.write(u"\2\2\u133d\u133e\5\u01e2\u00f2\2\u133e\u133f\7\u0129")
        buf.write(u"\2\2\u133f\u1340\7\u0167\2\2\u1340\u1341\5\u0418\u020d")
        buf.write(u"\2\u1341\u1458\3\2\2\2\u1342\u1343\7\37\2\2\u1343\u1344")
        buf.write(u"\7\u00a5\2\2\u1344\u1345\5\u042c\u0217\2\u1345\u1346")
        buf.write(u"\7\u0129\2\2\u1346\u1347\7\u0167\2\2\u1347\u1348\5\u042c")
        buf.write(u"\u0217\2\u1348\u1458\3\2\2\2\u1349\u134a\7\37\2\2\u134a")
        buf.write(u"\u134b\5\u0104\u0083\2\u134b\u134c\7\u00cc\2\2\u134c")
        buf.write(u"\u134d\5\u0418\u020d\2\u134d\u134e\7\u0129\2\2\u134e")
        buf.write(u"\u134f\7\u0167\2\2\u134f\u1350\5\u0418\u020d\2\u1350")
        buf.write(u"\u1458\3\2\2\2\u1351\u1352\7\37\2\2\u1352\u1353\7\u00ff")
        buf.write(u"\2\2\u1353\u1354\7E\2\2\u1354\u1355\5\u01b0\u00d9\2\u1355")
        buf.write(u"\u1356\7\u017d\2\2\u1356\u1357\5\u041c\u020f\2\u1357")
        buf.write(u"\u1358\7\u0129\2\2\u1358\u1359\7\u0167\2\2\u1359\u135a")
        buf.write(u"\5\u0418\u020d\2\u135a\u1458\3\2\2\2\u135b\u135c\7\37")
        buf.write(u"\2\2\u135c\u135d\7\u00ff\2\2\u135d\u135e\7\u0093\2\2")
        buf.write(u"\u135e\u135f\5\u01b0\u00d9\2\u135f\u1360\7\u017d\2\2")
        buf.write(u"\u1360\u1361\5\u041c\u020f\2\u1361\u1362\7\u0129\2\2")
        buf.write(u"\u1362\u1363\7\u0167\2\2\u1363\u1364\5\u0418\u020d\2")
        buf.write(u"\u1364\u1458\3\2\2\2\u1365\u1366\7\37\2\2\u1366\u1367")
        buf.write(u"\7\u013a\2\2\u1367\u1368\5\u0418\u020d\2\u1368\u1369")
        buf.write(u"\7\u0129\2\2\u1369\u136a\7\u0167\2\2\u136a\u136b\5\u0418")
        buf.write(u"\u020d\2\u136b\u1458\3\2\2\2\u136c\u136d\7\37\2\2\u136d")
        buf.write(u"\u136e\7\u0143\2\2\u136e\u136f\5\u0418\u020d\2\u136f")
        buf.write(u"\u1370\7\u0129\2\2\u1370\u1371\7\u0167\2\2\u1371\u1372")
        buf.write(u"\5\u0418\u020d\2\u1372\u1458\3\2\2\2\u1373\u1374\7\37")
        buf.write(u"\2\2\u1374\u1375\7\u015d\2\2\u1375\u1376\5\u0358\u01ad")
        buf.write(u"\2\u1376\u1377\7\u0129\2\2\u1377\u1378\7\u0167\2\2\u1378")
        buf.write(u"\u1379\5\u0418\u020d\2\u1379\u1458\3\2\2\2\u137a\u137b")
        buf.write(u"\7\37\2\2\u137b\u137c\7\u015d\2\2\u137c\u137d\7\u00ac")
        buf.write(u"\2\2\u137d\u137e\7\u008d\2\2\u137e\u137f\5\u0358\u01ad")
        buf.write(u"\2\u137f\u1380\7\u0129\2\2\u1380\u1381\7\u0167\2\2\u1381")
        buf.write(u"\u1382\5\u0418\u020d\2\u1382\u1458\3\2\2\2\u1383\u1384")
        buf.write(u"\7\37\2\2\u1384\u1385\7\u0140\2\2\u1385\u1386\5\u0414")
        buf.write(u"\u020b\2\u1386\u1387\7\u0129\2\2\u1387\u1388\7\u0167")
        buf.write(u"\2\2\u1388\u1389\5\u0418\u020d\2\u1389\u1458\3\2\2\2")
        buf.write(u"\u138a\u138b\7\37\2\2\u138b\u138c\7\u0140\2\2\u138c\u138d")
        buf.write(u"\7\u00ac\2\2\u138d\u138e\7\u008d\2\2\u138e\u138f\5\u0414")
        buf.write(u"\u020b\2\u138f\u1390\7\u0129\2\2\u1390\u1391\7\u0167")
        buf.write(u"\2\2\u1391\u1392\5\u0418\u020d\2\u1392\u1458\3\2\2\2")
        buf.write(u"\u1393\u1394\7\37\2\2\u1394\u1395\7\u0189\2\2\u1395\u1396")
        buf.write(u"\5\u0414\u020b\2\u1396\u1397\7\u0129\2\2\u1397\u1398")
        buf.write(u"\7\u0167\2\2\u1398\u1399\5\u0418\u020d\2\u1399\u1458")
        buf.write(u"\3\2\2\2\u139a\u139b\7\37\2\2\u139b\u139c\7\u0189\2\2")
        buf.write(u"\u139c\u139d\7\u00ac\2\2\u139d\u139e\7\u008d\2\2\u139e")
        buf.write(u"\u139f\5\u0414\u020b\2\u139f\u13a0\7\u0129\2\2\u13a0")
        buf.write(u"\u13a1\7\u0167\2\2\u13a1\u13a2\5\u0418\u020d\2\u13a2")
        buf.write(u"\u1458\3\2\2\2\u13a3\u13a4\7\37\2\2\u13a4\u13a5\7\u00b4")
        buf.write(u"\2\2\u13a5\u13a6\5\u0414\u020b\2\u13a6\u13a7\7\u0129")
        buf.write(u"\2\2\u13a7\u13a8\7\u0167\2\2\u13a8\u13a9\5\u0418\u020d")
        buf.write(u"\2\u13a9\u1458\3\2\2\2\u13aa\u13ab\7\37\2\2\u13ab\u13ac")
        buf.write(u"\7\u00b4\2\2\u13ac\u13ad\7\u00ac\2\2\u13ad\u13ae\7\u008d")
        buf.write(u"\2\2\u13ae\u13af\5\u0414\u020b\2\u13af\u13b0\7\u0129")
        buf.write(u"\2\2\u13b0\u13b1\7\u0167\2\2\u13b1\u13b2\5\u0418\u020d")
        buf.write(u"\2\u13b2\u1458\3\2\2\2\u13b3\u13b4\7\37\2\2\u13b4\u13b5")
        buf.write(u"\7\u009a\2\2\u13b5\u13b6\7\u015d\2\2\u13b6\u13b7\5\u0358")
        buf.write(u"\u01ad\2\u13b7\u13b8\7\u0129\2\2\u13b8\u13b9\7\u0167")
        buf.write(u"\2\2\u13b9\u13ba\5\u0418\u020d\2\u13ba\u1458\3\2\2\2")
        buf.write(u"\u13bb\u13bc\7\37\2\2\u13bc\u13bd\7\u009a\2\2\u13bd\u13be")
        buf.write(u"\7\u015d\2\2\u13be\u13bf\7\u00ac\2\2\u13bf\u13c0\7\u008d")
        buf.write(u"\2\2\u13c0\u13c1\5\u0358\u01ad\2\u13c1\u13c2\7\u0129")
        buf.write(u"\2\2\u13c2\u13c3\7\u0167\2\2\u13c3\u13c4\5\u0418\u020d")
        buf.write(u"\2\u13c4\u1458\3\2\2\2\u13c5\u13c6\7\37\2\2\u13c6\u13c7")
        buf.write(u"\7\u015d\2\2\u13c7\u13c8\5\u0358\u01ad\2\u13c8\u13c9")
        buf.write(u"\7\u0129\2\2\u13c9\u13ca\5\u0258\u012d\2\u13ca\u13cb")
        buf.write(u"\5\u0418\u020d\2\u13cb\u13cc\7\u0167\2\2\u13cc\u13cd")
        buf.write(u"\5\u0418\u020d\2\u13cd\u1458\3\2\2\2\u13ce\u13cf\7\37")
        buf.write(u"\2\2\u13cf\u13d0\7\u015d\2\2\u13d0\u13d1\7\u00ac\2\2")
        buf.write(u"\u13d1\u13d2\7\u008d\2\2\u13d2\u13d3\5\u0358\u01ad\2")
        buf.write(u"\u13d3\u13d4\7\u0129\2\2\u13d4\u13d5\5\u0258\u012d\2")
        buf.write(u"\u13d5\u13d6\5\u0418\u020d\2\u13d6\u13d7\7\u0167\2\2")
        buf.write(u"\u13d7\u13d8\5\u0418\u020d\2\u13d8\u1458\3\2\2\2\u13d9")
        buf.write(u"\u13da\7\37\2\2\u13da\u13db\7\u015d\2\2\u13db\u13dc\5")
        buf.write(u"\u0358\u01ad\2\u13dc\u13dd\7\u0129\2\2\u13dd\u13de\7")
        buf.write(u"S\2\2\u13de\u13df\5\u0418\u020d\2\u13df\u13e0\7\u0167")
        buf.write(u"\2\2\u13e0\u13e1\5\u0418\u020d\2\u13e1\u1458\3\2\2\2")
        buf.write(u"\u13e2\u13e3\7\37\2\2\u13e3\u13e4\7\u009a\2\2\u13e4\u13e5")
        buf.write(u"\7\u015d\2\2\u13e5\u13e6\5\u0358\u01ad\2\u13e6\u13e7")
        buf.write(u"\7\u0129\2\2\u13e7\u13e8\5\u0258\u012d\2\u13e8\u13e9")
        buf.write(u"\5\u0418\u020d\2\u13e9\u13ea\7\u0167\2\2\u13ea\u13eb")
        buf.write(u"\5\u0418\u020d\2\u13eb\u1458\3\2\2\2\u13ec\u13ed\7\37")
        buf.write(u"\2\2\u13ed\u13ee\7\u009a\2\2\u13ee\u13ef\7\u015d\2\2")
        buf.write(u"\u13ef\u13f0\7\u00ac\2\2\u13f0\u13f1\7\u008d\2\2\u13f1")
        buf.write(u"\u13f2\5\u0358\u01ad\2\u13f2\u13f3\7\u0129\2\2\u13f3")
        buf.write(u"\u13f4\5\u0258\u012d\2\u13f4\u13f5\5\u0418\u020d\2\u13f5")
        buf.write(u"\u13f6\7\u0167\2\2\u13f6\u13f7\5\u0418\u020d\2\u13f7")
        buf.write(u"\u1458\3\2\2\2\u13f8\u13f9\7\37\2\2\u13f9\u13fa\7\u016b")
        buf.write(u"\2\2\u13fa\u13fb\5\u0418\u020d\2\u13fb\u13fc\7\u00fd")
        buf.write(u"\2\2\u13fc\u13fd\5\u0414\u020b\2\u13fd\u13fe\7\u0129")
        buf.write(u"\2\2\u13fe\u13ff\7\u0167\2\2\u13ff\u1400\5\u0418\u020d")
        buf.write(u"\2\u1400\u1458\3\2\2\2\u1401\u1402\7\37\2\2\u1402\u1403")
        buf.write(u"\7\u0134\2\2\u1403\u1404\5\u042c\u0217\2\u1404\u1405")
        buf.write(u"\7\u0129\2\2\u1405\u1406\7\u0167\2\2\u1406\u1407\5\u042c")
        buf.write(u"\u0217\2\u1407\u1458\3\2\2\2\u1408\u1409\7\37\2\2\u1409")
        buf.write(u"\u140a\7\u017c\2\2\u140a\u140b\5\u042c\u0217\2\u140b")
        buf.write(u"\u140c\7\u0129\2\2\u140c\u140d\7\u0167\2\2\u140d\u140e")
        buf.write(u"\5\u042c\u0217\2\u140e\u1458\3\2\2\2\u140f\u1410\7\37")
        buf.write(u"\2\2\u1410\u1411\7\u015f\2\2\u1411\u1412\5\u0418\u020d")
        buf.write(u"\2\u1412\u1413\7\u0129\2\2\u1413\u1414\7\u0167\2\2\u1414")
        buf.write(u"\u1415\5\u0418\u020d\2\u1415\u1458\3\2\2\2\u1416\u1417")
        buf.write(u"\7\37\2\2\u1417\u1418\7\u015f\2\2\u1418\u1419\5\u0418")
        buf.write(u"\u020d\2\u1419\u141a\7\u0146\2\2\u141a\u141b\5h\65\2")
        buf.write(u"\u141b\u1458\3\2\2\2\u141c\u141d\7\37\2\2\u141d\u141e")
        buf.write(u"\7\u015f\2\2\u141e\u141f\5\u0418\u020d\2\u141f\u1420")
        buf.write(u"\7\u012d\2\2\u1420\u1421\5h\65\2\u1421\u1458\3\2\2\2")
        buf.write(u"\u1422\u1423\7\37\2\2\u1423\u1424\7\u0163\2\2\u1424\u1425")
        buf.write(u"\7\u013c\2\2\u1425\u1426\7\u010b\2\2\u1426\u1427\5\u01b0")
        buf.write(u"\u00d9\2\u1427\u1428\7\u0129\2\2\u1428\u1429\7\u0167")
        buf.write(u"\2\2\u1429\u142a\5\u0418\u020d\2\u142a\u1458\3\2\2\2")
        buf.write(u"\u142b\u142c\7\37\2\2\u142c\u142d\7\u0163\2\2\u142d\u142e")
        buf.write(u"\7\u013c\2\2\u142e\u142f\7w\2\2\u142f\u1430\5\u01b0\u00d9")
        buf.write(u"\2\u1430\u1431\7\u0129\2\2\u1431\u1432\7\u0167\2\2\u1432")
        buf.write(u"\u1433\5\u0418\u020d\2\u1433\u1458\3\2\2\2\u1434\u1435")
        buf.write(u"\7\37\2\2\u1435\u1436\7\u0163\2\2\u1436\u1437\7\u013c")
        buf.write(u"\2\2\u1437\u1438\7\u0161\2\2\u1438\u1439\5\u01b0\u00d9")
        buf.write(u"\2\u1439\u143a\7\u0129\2\2\u143a\u143b\7\u0167\2\2\u143b")
        buf.write(u"\u143c\5\u0418\u020d\2\u143c\u1458\3\2\2\2\u143d\u143e")
        buf.write(u"\7\37\2\2\u143e\u143f\7\u0163\2\2\u143f\u1440\7\u013c")
        buf.write(u"\2\2\u1440\u1441\7Q\2\2\u1441\u1442\5\u01b0\u00d9\2\u1442")
        buf.write(u"\u1443\7\u0129\2\2\u1443\u1444\7\u0167\2\2\u1444\u1445")
        buf.write(u"\5\u0418\u020d\2\u1445\u1458\3\2\2\2\u1446\u1447\7\37")
        buf.write(u"\2\2\u1447\u1448\7\u0170\2\2\u1448\u1449\5\u01b0\u00d9")
        buf.write(u"\2\u1449\u144a\7\u0129\2\2\u144a\u144b\7\u0167\2\2\u144b")
        buf.write(u"\u144c\5\u0418\u020d\2\u144c\u1458\3\2\2\2\u144d\u144e")
        buf.write(u"\7\37\2\2\u144e\u144f\7\u0170\2\2\u144f\u1450\5\u01b0")
        buf.write(u"\u00d9\2\u1450\u1451\7\u0129\2\2\u1451\u1452\7,\2\2\u1452")
        buf.write(u"\u1453\5\u0418\u020d\2\u1453\u1454\7\u0167\2\2\u1454")
        buf.write(u"\u1455\5\u0418\u020d\2\u1455\u1456\5b\62\2\u1456\u1458")
        buf.write(u"\3\2\2\2\u1457\u1305\3\2\2\2\u1457\u130d\3\2\2\2\u1457")
        buf.write(u"\u1314\3\2\2\2\u1457\u131b\3\2\2\2\u1457\u1322\3\2\2")
        buf.write(u"\2\u1457\u1329\3\2\2\2\u1457\u1332\3\2\2\2\u1457\u133b")
        buf.write(u"\3\2\2\2\u1457\u1342\3\2\2\2\u1457\u1349\3\2\2\2\u1457")
        buf.write(u"\u1351\3\2\2\2\u1457\u135b\3\2\2\2\u1457\u1365\3\2\2")
        buf.write(u"\2\u1457\u136c\3\2\2\2\u1457\u1373\3\2\2\2\u1457\u137a")
        buf.write(u"\3\2\2\2\u1457\u1383\3\2\2\2\u1457\u138a\3\2\2\2\u1457")
        buf.write(u"\u1393\3\2\2\2\u1457\u139a\3\2\2\2\u1457\u13a3\3\2\2")
        buf.write(u"\2\u1457\u13aa\3\2\2\2\u1457\u13b3\3\2\2\2\u1457\u13bb")
        buf.write(u"\3\2\2\2\u1457\u13c5\3\2\2\2\u1457\u13ce\3\2\2\2\u1457")
        buf.write(u"\u13d9\3\2\2\2\u1457\u13e2\3\2\2\2\u1457\u13ec\3\2\2")
        buf.write(u"\2\u1457\u13f8\3\2\2\2\u1457\u1401\3\2\2\2\u1457\u1408")
        buf.write(u"\3\2\2\2\u1457\u140f\3\2\2\2\u1457\u1416\3\2\2\2\u1457")
        buf.write(u"\u141c\3\2\2\2\u1457\u1422\3\2\2\2\u1457\u142b\3\2\2")
        buf.write(u"\2\u1457\u1434\3\2\2\2\u1457\u143d\3\2\2\2\u1457\u1446")
        buf.write(u"\3\2\2\2\u1457\u144d\3\2\2\2\u1458\u0257\3\2\2\2\u1459")
        buf.write(u"\u145c\7K\2\2\u145a\u145c\3\2\2\2\u145b\u1459\3\2\2\2")
        buf.write(u"\u145b\u145a\3\2\2\2\u145c\u0259\3\2\2\2\u145d\u145e")
        buf.write(u"\7\u0146\2\2\u145e\u1461\7g\2\2\u145f\u1461\3\2\2\2\u1460")
        buf.write(u"\u145d\3\2\2\2\u1460\u145f\3\2\2\2\u1461\u025b\3\2\2")
        buf.write(u"\2\u1462\u1463\7\37\2\2\u1463\u1464\7\34\2\2\u1464\u1465")
        buf.write(u"\5\u0424\u0213\2\u1465\u1466\5\u017e\u00c0\2\u1466\u1467")
        buf.write(u"\7\u0146\2\2\u1467\u1468\7\u013a\2\2\u1468\u1469\5\u0418")
        buf.write(u"\u020d\2\u1469\u1517\3\2\2\2\u146a\u146b\7\37\2\2\u146b")
        buf.write(u"\u146c\7J\2\2\u146c\u146d\5\u01b0\u00d9\2\u146d\u146e")
        buf.write(u"\7\u0146\2\2\u146e\u146f\7\u013a\2\2\u146f\u1470\5\u0418")
        buf.write(u"\u020d\2\u1470\u1517\3\2\2\2\u1471\u1472\7\37\2\2\u1472")
        buf.write(u"\u1473\7W\2\2\u1473\u1474\5\u01b0\u00d9\2\u1474\u1475")
        buf.write(u"\7\u0146\2\2\u1475\u1476\7\u013a\2\2\u1476\u1477\5\u0418")
        buf.write(u"\u020d\2\u1477\u1517\3\2\2\2\u1478\u1479\7\37\2\2\u1479")
        buf.write(u"\u147a\7}\2\2\u147a\u147b\5\u01b0\u00d9\2\u147b\u147c")
        buf.write(u"\7\u0146\2\2\u147c\u147d\7\u013a\2\2\u147d\u147e\5\u0418")
        buf.write(u"\u020d\2\u147e\u1517\3\2\2\2\u147f\u1480\7\37\2\2\u1480")
        buf.write(u"\u1481\7\u008f\2\2\u1481\u1482\5\u01b0\u00d9\2\u1482")
        buf.write(u"\u1483\7\u0146\2\2\u1483\u1484\7\u013a\2\2\u1484\u1485")
        buf.write(u"\5\u0418\u020d\2\u1485\u1517\3\2\2\2\u1486\u1487\7\37")
        buf.write(u"\2\2\u1487\u1488\7\u009f\2\2\u1488\u1489\5\u01e2\u00f2")
        buf.write(u"\2\u1489\u148a\7\u0146\2\2\u148a\u148b\7\u013a\2\2\u148b")
        buf.write(u"\u148c\5\u0418\u020d\2\u148c\u1517\3\2\2\2\u148d\u148e")
        buf.write(u"\7\37\2\2\u148e\u148f\7\u00ff\2\2\u148f\u1490\5\u0240")
        buf.write(u"\u0121\2\u1490\u1491\5\u023e\u0120\2\u1491\u1492\7\u0146")
        buf.write(u"\2\2\u1492\u1493\7\u013a\2\2\u1493\u1494\5\u0418\u020d")
        buf.write(u"\2\u1494\u1517\3\2\2\2\u1495\u1496\7\37\2\2\u1496\u1497")
        buf.write(u"\7\u00ff\2\2\u1497\u1498\7E\2\2\u1498\u1499\5\u01b0\u00d9")
        buf.write(u"\2\u1499\u149a\7\u017d\2\2\u149a\u149b\5\u041c\u020f")
        buf.write(u"\2\u149b\u149c\7\u0146\2\2\u149c\u149d\7\u013a\2\2\u149d")
        buf.write(u"\u149e\5\u0418\u020d\2\u149e\u1517\3\2\2\2\u149f\u14a0")
        buf.write(u"\7\37\2\2\u14a0\u14a1\7\u00ff\2\2\u14a1\u14a2\7\u0093")
        buf.write(u"\2\2\u14a2\u14a3\5\u01b0\u00d9\2\u14a3\u14a4\7\u017d")
        buf.write(u"\2\2\u14a4\u14a5\5\u041c\u020f\2\u14a5\u14a6\7\u0146")
        buf.write(u"\2\2\u14a6\u14a7\7\u013a\2\2\u14a7\u14a8\5\u0418\u020d")
        buf.write(u"\2\u14a8\u1517\3\2\2\2\u14a9\u14aa\7\37\2\2\u14aa\u14ab")
        buf.write(u"\7\u015d\2\2\u14ab\u14ac\5\u0358\u01ad\2\u14ac\u14ad")
        buf.write(u"\7\u0146\2\2\u14ad\u14ae\7\u013a\2\2\u14ae\u14af\5\u0418")
        buf.write(u"\u020d\2\u14af\u1517\3\2\2\2\u14b0\u14b1\7\37\2\2\u14b1")
        buf.write(u"\u14b2\7\u015d\2\2\u14b2\u14b3\7\u00ac\2\2\u14b3\u14b4")
        buf.write(u"\7\u008d\2\2\u14b4\u14b5\5\u0358\u01ad\2\u14b5\u14b6")
        buf.write(u"\7\u0146\2\2\u14b6\u14b7\7\u013a\2\2\u14b7\u14b8\5\u0418")
        buf.write(u"\u020d\2\u14b8\u1517\3\2\2\2\u14b9\u14ba\7\37\2\2\u14ba")
        buf.write(u"\u14bb\7\u0163\2\2\u14bb\u14bc\7\u013c\2\2\u14bc\u14bd")
        buf.write(u"\7\u010b\2\2\u14bd\u14be\5\u01b0\u00d9\2\u14be\u14bf")
        buf.write(u"\7\u0146\2\2\u14bf\u14c0\7\u013a\2\2\u14c0\u14c1\5\u0418")
        buf.write(u"\u020d\2\u14c1\u1517\3\2\2\2\u14c2\u14c3\7\37\2\2\u14c3")
        buf.write(u"\u14c4\7\u0163\2\2\u14c4\u14c5\7\u013c\2\2\u14c5\u14c6")
        buf.write(u"\7w\2\2\u14c6\u14c7\5\u01b0\u00d9\2\u14c7\u14c8\7\u0146")
        buf.write(u"\2\2\u14c8\u14c9\7\u013a\2\2\u14c9\u14ca\5\u0418\u020d")
        buf.write(u"\2\u14ca\u1517\3\2\2\2\u14cb\u14cc\7\37\2\2\u14cc\u14cd")
        buf.write(u"\7\u0163\2\2\u14cd\u14ce\7\u013c\2\2\u14ce\u14cf\7\u0161")
        buf.write(u"\2\2\u14cf\u14d0\5\u01b0\u00d9\2\u14d0\u14d1\7\u0146")
        buf.write(u"\2\2\u14d1\u14d2\7\u013a\2\2\u14d2\u14d3\5\u0418\u020d")
        buf.write(u"\2\u14d3\u1517\3\2\2\2\u14d4\u14d5\7\37\2\2\u14d5\u14d6")
        buf.write(u"\7\u0163\2\2\u14d6\u14d7\7\u013c\2\2\u14d7\u14d8\7Q\2")
        buf.write(u"\2\u14d8\u14d9\5\u01b0\u00d9\2\u14d9\u14da\7\u0146\2")
        buf.write(u"\2\u14da\u14db\7\u013a\2\2\u14db\u14dc\5\u0418\u020d")
        buf.write(u"\2\u14dc\u1517\3\2\2\2\u14dd\u14de\7\37\2\2\u14de\u14df")
        buf.write(u"\7\u0140\2\2\u14df\u14e0\5\u0414\u020b\2\u14e0\u14e1")
        buf.write(u"\7\u0146\2\2\u14e1\u14e2\7\u013a\2\2\u14e2\u14e3\5\u0418")
        buf.write(u"\u020d\2\u14e3\u1517\3\2\2\2\u14e4\u14e5\7\37\2\2\u14e5")
        buf.write(u"\u14e6\7\u0140\2\2\u14e6\u14e7\7\u00ac\2\2\u14e7\u14e8")
        buf.write(u"\7\u008d\2\2\u14e8\u14e9\5\u0414\u020b\2\u14e9\u14ea")
        buf.write(u"\7\u0146\2\2\u14ea\u14eb\7\u013a\2\2\u14eb\u14ec\5\u0418")
        buf.write(u"\u020d\2\u14ec\u1517\3\2\2\2\u14ed\u14ee\7\37\2\2\u14ee")
        buf.write(u"\u14ef\7\u0189\2\2\u14ef\u14f0\5\u0414\u020b\2\u14f0")
        buf.write(u"\u14f1\7\u0146\2\2\u14f1\u14f2\7\u013a\2\2\u14f2\u14f3")
        buf.write(u"\5\u0418\u020d\2\u14f3\u1517\3\2\2\2\u14f4\u14f5\7\37")
        buf.write(u"\2\2\u14f5\u14f6\7\u0189\2\2\u14f6\u14f7\7\u00ac\2\2")
        buf.write(u"\u14f7\u14f8\7\u008d\2\2\u14f8\u14f9\5\u0414\u020b\2")
        buf.write(u"\u14f9\u14fa\7\u0146\2\2\u14fa\u14fb\7\u013a\2\2\u14fb")
        buf.write(u"\u14fc\5\u0418\u020d\2\u14fc\u1517\3\2\2\2\u14fd\u14fe")
        buf.write(u"\7\37\2\2\u14fe\u14ff\7\u009a\2\2\u14ff\u1500\7\u015d")
        buf.write(u"\2\2\u1500\u1501\5\u0358\u01ad\2\u1501\u1502\7\u0146")
        buf.write(u"\2\2\u1502\u1503\7\u013a\2\2\u1503\u1504\5\u0418\u020d")
        buf.write(u"\2\u1504\u1517\3\2\2\2\u1505\u1506\7\37\2\2\u1506\u1507")
        buf.write(u"\7\u009a\2\2\u1507\u1508\7\u015d\2\2\u1508\u1509\7\u00ac")
        buf.write(u"\2\2\u1509\u150a\7\u008d\2\2\u150a\u150b\5\u0358\u01ad")
        buf.write(u"\2\u150b\u150c\7\u0146\2\2\u150c\u150d\7\u013a\2\2\u150d")
        buf.write(u"\u150e\5\u0418\u020d\2\u150e\u1517\3\2\2\2\u150f\u1510")
        buf.write(u"\7\37\2\2\u1510\u1511\7\u0170\2\2\u1511\u1512\5\u01b0")
        buf.write(u"\u00d9\2\u1512\u1513\7\u0146\2\2\u1513\u1514\7\u013a")
        buf.write(u"\2\2\u1514\u1515\5\u0418\u020d\2\u1515\u1517\3\2\2\2")
        buf.write(u"\u1516\u1462\3\2\2\2\u1516\u146a\3\2\2\2\u1516\u1471")
        buf.write(u"\3\2\2\2\u1516\u1478\3\2\2\2\u1516\u147f\3\2\2\2\u1516")
        buf.write(u"\u1486\3\2\2\2\u1516\u148d\3\2\2\2\u1516\u1495\3\2\2")
        buf.write(u"\2\u1516\u149f\3\2\2\2\u1516\u14a9\3\2\2\2\u1516\u14b0")
        buf.write(u"\3\2\2\2\u1516\u14b9\3\2\2\2\u1516\u14c2\3\2\2\2\u1516")
        buf.write(u"\u14cb\3\2\2\2\u1516\u14d4\3\2\2\2\u1516\u14dd\3\2\2")
        buf.write(u"\2\u1516\u14e4\3\2\2\2\u1516\u14ed\3\2\2\2\u1516\u14f4")
        buf.write(u"\3\2\2\2\u1516\u14fd\3\2\2\2\u1516\u1505\3\2\2\2\u1516")
        buf.write(u"\u150f\3\2\2\2\u1517\u025d\3\2\2\2\u1518\u1519\7\37\2")
        buf.write(u"\2\u1519\u151a\7\34\2\2\u151a\u151b\5\u0424\u0213\2\u151b")
        buf.write(u"\u151c\5\u017e\u00c0\2\u151c\u151d\7\u010a\2\2\u151d")
        buf.write(u"\u151e\7\u0167\2\2\u151e\u151f\5\u042c\u0217\2\u151f")
        buf.write(u"\u15a7\3\2\2\2\u1520\u1521\7\37\2\2\u1521\u1522\7J\2")
        buf.write(u"\2\u1522\u1523\5\u01b0\u00d9\2\u1523\u1524\7\u010a\2")
        buf.write(u"\2\u1524\u1525\7\u0167\2\2\u1525\u1526\5\u042c\u0217")
        buf.write(u"\2\u1526\u15a7\3\2\2\2\u1527\u1528\7\37\2\2\u1528\u1529")
        buf.write(u"\7W\2\2\u1529\u152a\5\u01b0\u00d9\2\u152a\u152b\7\u010a")
        buf.write(u"\2\2\u152b\u152c\7\u0167\2\2\u152c\u152d\5\u042c\u0217")
        buf.write(u"\2\u152d\u15a7\3\2\2\2\u152e\u152f\7\37\2\2\u152f\u1530")
        buf.write(u"\7h\2\2\u1530\u1531\5\u041a\u020e\2\u1531\u1532\7\u010a")
        buf.write(u"\2\2\u1532\u1533\7\u0167\2\2\u1533\u1534\5\u042c\u0217")
        buf.write(u"\2\u1534\u15a7\3\2\2\2\u1535\u1536\7\37\2\2\u1536\u1537")
        buf.write(u"\7}\2\2\u1537\u1538\5\u01b0\u00d9\2\u1538\u1539\7\u010a")
        buf.write(u"\2\2\u1539\u153a\7\u0167\2\2\u153a\u153b\5\u042c\u0217")
        buf.write(u"\2\u153b\u15a7\3\2\2\2\u153c\u153d\7\37\2\2\u153d\u153e")
        buf.write(u"\7\u009f\2\2\u153e\u153f\5\u01e2\u00f2\2\u153f\u1540")
        buf.write(u"\7\u010a\2\2\u1540\u1541\7\u0167\2\2\u1541\u1542\5\u042c")
        buf.write(u"\u0217\2\u1542\u15a7\3\2\2\2\u1543\u1544\7\37\2\2\u1544")
        buf.write(u"\u1545\5\u0104\u0083\2\u1545\u1546\7\u00cc\2\2\u1546")
        buf.write(u"\u1547\5\u0418\u020d\2\u1547\u1548\7\u010a\2\2\u1548")
        buf.write(u"\u1549\7\u0167\2\2\u1549\u154a\5\u042c\u0217\2\u154a")
        buf.write(u"\u15a7\3\2\2\2\u154b\u154c\7\37\2\2\u154c\u154d\7\u00cd")
        buf.write(u"\2\2\u154d\u154e\7\u00f8\2\2\u154e\u154f\5\u00f2z\2\u154f")
        buf.write(u"\u1550\7\u010a\2\2\u1550\u1551\7\u0167\2\2\u1551\u1552")
        buf.write(u"\5\u042c\u0217\2\u1552\u15a7\3\2\2\2\u1553\u1554\7\37")
        buf.write(u"\2\2\u1554\u1555\7\u00ff\2\2\u1555\u1556\5\u0240\u0121")
        buf.write(u"\2\u1556\u1557\5\u023e\u0120\2\u1557\u1558\7\u010a\2")
        buf.write(u"\2\u1558\u1559\7\u0167\2\2\u1559\u155a\5\u042c\u0217")
        buf.write(u"\2\u155a\u15a7\3\2\2\2\u155b\u155c\7\37\2\2\u155c\u155d")
        buf.write(u"\7\u00ff\2\2\u155d\u155e\7E\2\2\u155e\u155f\5\u01b0\u00d9")
        buf.write(u"\2\u155f\u1560\7\u017d\2\2\u1560\u1561\5\u041c\u020f")
        buf.write(u"\2\u1561\u1562\7\u010a\2\2\u1562\u1563\7\u0167\2\2\u1563")
        buf.write(u"\u1564\5\u042c\u0217\2\u1564\u15a7\3\2\2\2\u1565\u1566")
        buf.write(u"\7\37\2\2\u1566\u1567\7\u00ff\2\2\u1567\u1568\7\u0093")
        buf.write(u"\2\2\u1568\u1569\5\u01b0\u00d9\2\u1569\u156a\7\u017d")
        buf.write(u"\2\2\u156a\u156b\5\u041c\u020f\2\u156b\u156c\7\u010a")
        buf.write(u"\2\2\u156c\u156d\7\u0167\2\2\u156d\u156e\5\u042c\u0217")
        buf.write(u"\2\u156e\u15a7\3\2\2\2\u156f\u1570\7\37\2\2\u1570\u1571")
        buf.write(u"\7\u013a\2\2\u1571\u1572\5\u0418\u020d\2\u1572\u1573")
        buf.write(u"\7\u010a\2\2\u1573\u1574\7\u0167\2\2\u1574\u1575\5\u042c")
        buf.write(u"\u0217\2\u1575\u15a7\3\2\2\2\u1576\u1577\7\37\2\2\u1577")
        buf.write(u"\u1578\7\u0170\2\2\u1578\u1579\5\u01b0\u00d9\2\u1579")
        buf.write(u"\u157a\7\u010a\2\2\u157a\u157b\7\u0167\2\2\u157b\u157c")
        buf.write(u"\5\u042c\u0217\2\u157c\u15a7\3\2\2\2\u157d\u157e\7\37")
        buf.write(u"\2\2\u157e\u157f\7\u015f\2\2\u157f\u1580\5\u0418\u020d")
        buf.write(u"\2\u1580\u1581\7\u010a\2\2\u1581\u1582\7\u0167\2\2\u1582")
        buf.write(u"\u1583\5\u042c\u0217\2\u1583\u15a7\3\2\2\2\u1584\u1585")
        buf.write(u"\7\37\2\2\u1585\u1586\7\u0163\2\2\u1586\u1587\7\u013c")
        buf.write(u"\2\2\u1587\u1588\7w\2\2\u1588\u1589\5\u01b0\u00d9\2\u1589")
        buf.write(u"\u158a\7\u010a\2\2\u158a\u158b\7\u0167\2\2\u158b\u158c")
        buf.write(u"\5\u042c\u0217\2\u158c\u15a7\3\2\2\2\u158d\u158e\7\37")
        buf.write(u"\2\2\u158e\u158f\7\u0163\2\2\u158f\u1590\7\u013c\2\2")
        buf.write(u"\u1590\u1591\7Q\2\2\u1591\u1592\5\u01b0\u00d9\2\u1592")
        buf.write(u"\u1593\7\u010a\2\2\u1593\u1594\7\u0167\2\2\u1594\u1595")
        buf.write(u"\5\u042c\u0217\2\u1595\u15a7\3\2\2\2\u1596\u1597\7\37")
        buf.write(u"\2\2\u1597\u1598\7\u009a\2\2\u1598\u1599\7g\2\2\u1599")
        buf.write(u"\u159a\7\u0192\2\2\u159a\u159b\5\u0418\u020d\2\u159b")
        buf.write(u"\u159c\7\u010a\2\2\u159c\u159d\7\u0167\2\2\u159d\u159e")
        buf.write(u"\5\u042c\u0217\2\u159e\u15a7\3\2\2\2\u159f\u15a0\7\37")
        buf.write(u"\2\2\u15a0\u15a1\7\u0143\2\2\u15a1\u15a2\5\u0418\u020d")
        buf.write(u"\2\u15a2\u15a3\7\u010a\2\2\u15a3\u15a4\7\u0167\2\2\u15a4")
        buf.write(u"\u15a5\5\u042c\u0217\2\u15a5\u15a7\3\2\2\2\u15a6\u1518")
        buf.write(u"\3\2\2\2\u15a6\u1520\3\2\2\2\u15a6\u1527\3\2\2\2\u15a6")
        buf.write(u"\u152e\3\2\2\2\u15a6\u1535\3\2\2\2\u15a6\u153c\3\2\2")
        buf.write(u"\2\u15a6\u1543\3\2\2\2\u15a6\u154b\3\2\2\2\u15a6\u1553")
        buf.write(u"\3\2\2\2\u15a6\u155b\3\2\2\2\u15a6\u1565\3\2\2\2\u15a6")
        buf.write(u"\u156f\3\2\2\2\u15a6\u1576\3\2\2\2\u15a6\u157d\3\2\2")
        buf.write(u"\2\u15a6\u1584\3\2\2\2\u15a6\u158d\3\2\2\2\u15a6\u1596")
        buf.write(u"\3\2\2\2\u15a6\u159f\3\2\2\2\u15a7\u025f\3\2\2\2\u15a8")
        buf.write(u"\u15a9\7Z\2\2\u15a9\u15aa\5\u020e\u0108\2\u15aa\u15ab")
        buf.write(u"\7\u0138\2\2\u15ab\u15ac\5\u0418\u020d\2\u15ac\u15ad")
        buf.write(u"\7&\2\2\u15ad\u15ae\7\u00fd\2\2\u15ae\u15af\5\u026a\u0136")
        buf.write(u"\2\u15af\u15b0\7\u0167\2\2\u15b0\u15b1\5\u0414\u020b")
        buf.write(u"\2\u15b1\u15b2\5\u0360\u01b1\2\u15b2\u15b3\7{\2\2\u15b3")
        buf.write(u"\u15b4\5\u026c\u0137\2\u15b4\u15b5\5\u0262\u0132\2\u15b5")
        buf.write(u"\u0261\3\2\2\2\u15b6\u15bd\7\u00f0\2\2\u15b7\u15bd\5")
        buf.write(u"\u0266\u0134\2\u15b8\u15b9\7\r\2\2\u15b9\u15ba\5\u0264")
        buf.write(u"\u0133\2\u15ba\u15bb\7\6\2\2\u15bb\u15bd\3\2\2\2\u15bc")
        buf.write(u"\u15b6\3\2\2\2\u15bc\u15b7\3\2\2\2\u15bc\u15b8\3\2\2")
        buf.write(u"\2\u15bd\u0263\3\2\2\2\u15be\u15bf\b\u0133\1\2\u15bf")
        buf.write(u"\u15c0\5\u0268\u0135\2\u15c0\u15c6\3\2\2\2\u15c1\u15c2")
        buf.write(u"\f\4\2\2\u15c2\u15c3\7\21\2\2\u15c3\u15c5\5\u0268\u0135")
        buf.write(u"\2\u15c4\u15c1\3\2\2\2\u15c5\u15c8\3\2\2\2\u15c6\u15c4")
        buf.write(u"\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u0265\3\2\2\2\u15c8")
        buf.write(u"\u15c6\3\2\2\2\u15c9\u15cf\5\u0300\u0181\2\u15ca\u15cf")
        buf.write(u"\5\u02d4\u016b\2\u15cb\u15cf\5\u02ea\u0176\2\u15cc\u15cf")
        buf.write(u"\5\u02de\u0170\2\u15cd\u15cf\5\u0270\u0139\2\u15ce\u15c9")
        buf.write(u"\3\2\2\2\u15ce\u15ca\3\2\2\2\u15ce\u15cb\3\2\2\2\u15ce")
        buf.write(u"\u15cc\3\2\2\2\u15ce\u15cd\3\2\2\2\u15cf\u0267\3\2\2")
        buf.write(u"\2\u15d0\u15d3\5\u0266\u0134\2\u15d1\u15d3\3\2\2\2\u15d2")
        buf.write(u"\u15d0\3\2\2\2\u15d2\u15d1\3\2\2\2\u15d3\u0269\3\2\2")
        buf.write(u"\2\u15d4\u15d5\t\n\2\2\u15d5\u026b\3\2\2\2\u15d6\u15da")
        buf.write(u"\7\u00bf\2\2\u15d7\u15da\7\36\2\2\u15d8\u15da\3\2\2\2")
        buf.write(u"\u15d9\u15d6\3\2\2\2\u15d9\u15d7\3\2\2\2\u15d9\u15d8")
        buf.write(u"\3\2\2\2\u15da\u026d\3\2\2\2\u15db\u15dc\7\177\2\2\u15dc")
        buf.write(u"\u15dd\7\u0138\2\2\u15dd\u15de\5\u0418\u020d\2\u15de")
        buf.write(u"\u15df\7\u00fd\2\2\u15df\u15e0\5\u01b0\u00d9\2\u15e0")
        buf.write(u"\u15e1\5b\62\2\u15e1\u15ec\3\2\2\2\u15e2\u15e3\7\177")
        buf.write(u"\2\2\u15e3\u15e4\7\u0138\2\2\u15e4\u15e5\7\u00ac\2\2")
        buf.write(u"\u15e5\u15e6\7\u008d\2\2\u15e6\u15e7\5\u0418\u020d\2")
        buf.write(u"\u15e7\u15e8\7\u00fd\2\2\u15e8\u15e9\5\u01b0\u00d9\2")
        buf.write(u"\u15e9\u15ea\5b\62\2\u15ea\u15ec\3\2\2\2\u15eb\u15db")
        buf.write(u"\3\2\2\2\u15eb\u15e2\3\2\2\2\u15ec\u026f\3\2\2\2\u15ed")
        buf.write(u"\u15ee\7\u00f1\2\2\u15ee\u15ef\5\u0430\u0219\2\u15ef")
        buf.write(u"\u15f0\5\u0272\u013a\2\u15f0\u0271\3\2\2\2\u15f1\u15f2")
        buf.write(u"\7\b\2\2\u15f2\u15f5\5\u042a\u0216\2\u15f3\u15f5\3\2")
        buf.write(u"\2\2\u15f4\u15f1\3\2\2\2\u15f4\u15f3\3\2\2\2\u15f5\u0273")
        buf.write(u"\3\2\2\2\u15f6\u15f7\7\u00d8\2\2\u15f7\u15f8\5\u0430")
        buf.write(u"\u0219\2\u15f8\u0275\3\2\2\2\u15f9\u15fa\7\u0178\2\2")
        buf.write(u"\u15fa\u15fe\5\u0430\u0219\2\u15fb\u15fc\7\u0178\2\2")
        buf.write(u"\u15fc\u15fe\7\f\2\2\u15fd\u15f9\3\2\2\2\u15fd\u15fb")
        buf.write(u"\3\2\2\2\u15fe\u0277\3\2\2\2\u15ff\u1600\7\25\2\2\u1600")
        buf.write(u"\u162a\5\u027a\u013e\2\u1601\u1602\7\60\2\2\u1602\u1603")
        buf.write(u"\5\u027a\u013e\2\u1603\u1604\5\u0280\u0141\2\u1604\u162a")
        buf.write(u"\3\2\2\2\u1605\u1606\7\u0151\2\2\u1606\u1607\7\u0169")
        buf.write(u"\2\2\u1607\u162a\5\u0280\u0141\2\u1608\u1609\7N\2\2\u1609")
        buf.write(u"\u162a\5\u027a\u013e\2\u160a\u160b\7\u0085\2\2\u160b")
        buf.write(u"\u162a\5\u027a\u013e\2\u160c\u160d\7\u0135\2\2\u160d")
        buf.write(u"\u162a\5\u027a\u013e\2\u160e\u160f\7\u0139\2\2\u160f")
        buf.write(u"\u162a\5\u0430\u0219\2\u1610\u1611\7\u0128\2\2\u1611")
        buf.write(u"\u1612\7\u0139\2\2\u1612\u162a\5\u0430\u0219\2\u1613")
        buf.write(u"\u1614\7\u0128\2\2\u1614\u162a\5\u0430\u0219\2\u1615")
        buf.write(u"\u1616\7\u0135\2\2\u1616\u1617\5\u027a\u013e\2\u1617")
        buf.write(u"\u1618\7\u0167\2\2\u1618\u1619\7\u0139\2\2\u1619\u161a")
        buf.write(u"\5\u0430\u0219\2\u161a\u162a\3\2\2\2\u161b\u161c\7\u0135")
        buf.write(u"\2\2\u161c\u161d\5\u027a\u013e\2\u161d\u161e\7\u0167")
        buf.write(u"\2\2\u161e\u161f\5\u0430\u0219\2\u161f\u162a\3\2\2\2")
        buf.write(u"\u1620\u1621\7\u0115\2\2\u1621\u1622\7\u0169\2\2\u1622")
        buf.write(u"\u162a\5\u042a\u0216\2\u1623\u1624\7N\2\2\u1624\u1625")
        buf.write(u"\7\u0116\2\2\u1625\u162a\5\u042a\u0216\2\u1626\u1627")
        buf.write(u"\7\u0135\2\2\u1627\u1628\7\u0116\2\2\u1628\u162a\5\u042a")
        buf.write(u"\u0216\2\u1629\u15ff\3\2\2\2\u1629\u1601\3\2\2\2\u1629")
        buf.write(u"\u1605\3\2\2\2\u1629\u1608\3\2\2\2\u1629\u160a\3\2\2")
        buf.write(u"\2\u1629\u160c\3\2\2\2\u1629\u160e\3\2\2\2\u1629\u1610")
        buf.write(u"\3\2\2\2\u1629\u1613\3\2\2\2\u1629\u1615\3\2\2\2\u1629")
        buf.write(u"\u161b\3\2\2\2\u1629\u1620\3\2\2\2\u1629\u1623\3\2\2")
        buf.write(u"\2\u1629\u1626\3\2\2\2\u162a\u0279\3\2\2\2\u162b\u162f")
        buf.write(u"\7\u0191\2\2\u162c\u162f\7\u0169\2\2\u162d\u162f\3\2")
        buf.write(u"\2\2\u162e\u162b\3\2\2\2\u162e\u162c\3\2\2\2\u162e\u162d")
        buf.write(u"\3\2\2\2\u162f\u027b\3\2\2\2\u1630\u1631\7\u00c8\2\2")
        buf.write(u"\u1631\u1632\7\u00d5\2\2\u1632\u163b\5> \2\u1633\u1634")
        buf.write(u"\7\u011f\2\2\u1634\u163b\7\u00fe\2\2\u1635\u1636\7\u011f")
        buf.write(u"\2\2\u1636\u163b\7\u0193\2\2\u1637\u163b\7p\2\2\u1638")
        buf.write(u"\u1639\7\u00ef\2\2\u1639\u163b\7p\2\2\u163a\u1630\3\2")
        buf.write(u"\2\2\u163a\u1633\3\2\2\2\u163a\u1635\3\2\2\2\u163a\u1637")
        buf.write(u"\3\2\2\2\u163a\u1638\3\2\2\2\u163b\u027d\3\2\2\2\u163c")
        buf.write(u"\u163d\b\u0140\1\2\u163d\u163e\5\u027c\u013f\2\u163e")
        buf.write(u"\u1646\3\2\2\2\u163f\u1640\f\4\2\2\u1640\u1641\7\b\2")
        buf.write(u"\2\u1641\u1645\5\u027c\u013f\2\u1642\u1643\f\3\2\2\u1643")
        buf.write(u"\u1645\5\u027c\u013f\2\u1644\u163f\3\2\2\2\u1644\u1642")
        buf.write(u"\3\2\2\2\u1645\u1648\3\2\2\2\u1646\u1644\3\2\2\2\u1646")
        buf.write(u"\u1647\3\2\2\2\u1647\u027f\3\2\2\2\u1648\u1646\3\2\2")
        buf.write(u"\2\u1649\u164c\5\u027e\u0140\2\u164a\u164c\3\2\2\2\u164b")
        buf.write(u"\u1649\3\2\2\2\u164b\u164a\3\2\2\2\u164c\u0281\3\2\2")
        buf.write(u"\2\u164d\u164e\7Z\2\2\u164e\u164f\5\u0098M\2\u164f\u1650")
        buf.write(u"\7\u0189\2\2\u1650\u1651\5\u0414\u020b\2\u1651\u1652")
        buf.write(u"\5\u00be`\2\u1652\u1653\5j\66\2\u1653\u1654\7&\2\2\u1654")
        buf.write(u"\u1655\5\u0300\u0181\2\u1655\u1656\5\u0284\u0143\2\u1656")
        buf.write(u"\u1664\3\2\2\2\u1657\u1658\7Z\2\2\u1658\u1659\7\u0102")
        buf.write(u"\2\2\u1659\u165a\7\u012b\2\2\u165a\u165b\5\u0098M\2\u165b")
        buf.write(u"\u165c\7\u0189\2\2\u165c\u165d\5\u0414\u020b\2\u165d")
        buf.write(u"\u165e\5\u00be`\2\u165e\u165f\5j\66\2\u165f\u1660\7&")
        buf.write(u"\2\2\u1660\u1661\5\u0300\u0181\2\u1661\u1662\5\u0284")
        buf.write(u"\u0143\2\u1662\u1664\3\2\2\2\u1663\u164d\3\2\2\2\u1663")
        buf.write(u"\u1657\3\2\2\2\u1664\u0283\3\2\2\2\u1665\u1666\7\u018f")
        buf.write(u"\2\2\u1666\u1667\7C\2\2\u1667\u1672\7\u0100\2\2\u1668")
        buf.write(u"\u1669\7\u018f\2\2\u1669\u166a\7;\2\2\u166a\u166b\7C")
        buf.write(u"\2\2\u166b\u1672\7\u0100\2\2\u166c\u166d\7\u018f\2\2")
        buf.write(u"\u166d\u166e\7\u00da\2\2\u166e\u166f\7C\2\2\u166f\u1672")
        buf.write(u"\7\u0100\2\2\u1670\u1672\3\2\2\2\u1671\u1665\3\2\2\2")
        buf.write(u"\u1671\u1668\3\2\2\2\u1671\u166c\3\2\2\2\u1671\u1670")
        buf.write(u"\3\2\2\2\u1672\u0285\3\2\2\2\u1673\u1674\7\u00d9\2\2")
        buf.write(u"\u1674\u1675\5\u0422\u0212\2\u1675\u0287\3\2\2\2\u1676")
        buf.write(u"\u1677\7Z\2\2\u1677\u1678\7h\2\2\u1678\u167a\5\u041a")
        buf.write(u"\u020e\2\u1679\u167b\7\u018f\2\2\u167a\u1679\3\2\2\2")
        buf.write(u"\u167a\u167b\3\2\2\2\u167b\u167c\3\2\2\2\u167c\u167d")
        buf.write(u"\5\u028a\u0146\2\u167d\u0289\3\2\2\2\u167e\u1683\b\u0146")
        buf.write(u"\1\2\u167f\u1680\f\4\2\2\u1680\u1682\5\u028c\u0147\2")
        buf.write(u"\u1681\u167f\3\2\2\2\u1682\u1685\3\2\2\2\u1683\u1681")
        buf.write(u"\3\2\2\2\u1683\u1684\3\2\2\2\u1684\u028b\3\2\2\2\u1685")
        buf.write(u"\u1683\3\2\2\2\u1686\u1687\7\u015f\2\2\u1687\u1688\5")
        buf.write(u"\u028e\u0148\2\u1688\u1689\5\u0418\u020d\2\u1689\u16c8")
        buf.write(u"\3\2\2\2\u168a\u168b\7\u015f\2\2\u168b\u168c\5\u028e")
        buf.write(u"\u0148\2\u168c\u168d\7n\2\2\u168d\u16c8\3\2\2\2\u168e")
        buf.write(u"\u168f\7\u00dd\2\2\u168f\u1690\5\u028e\u0148\2\u1690")
        buf.write(u"\u1691\5\u042a\u0216\2\u1691\u16c8\3\2\2\2\u1692\u1693")
        buf.write(u"\7\u00dd\2\2\u1693\u1694\5\u028e\u0148\2\u1694\u1695")
        buf.write(u"\7n\2\2\u1695\u16c8\3\2\2\2\u1696\u1697\7\u0161\2\2\u1697")
        buf.write(u"\u1698\5\u028e\u0148\2\u1698\u1699\5\u0418\u020d\2\u1699")
        buf.write(u"\u16c8\3\2\2\2\u169a\u169b\7\u0161\2\2\u169b\u169c\5")
        buf.write(u"\u028e\u0148\2\u169c\u169d\7n\2\2\u169d\u16c8\3\2\2\2")
        buf.write(u"\u169e\u169f\7\u0083\2\2\u169f\u16a0\5\u028e\u0148\2")
        buf.write(u"\u16a0\u16a1\5\u042a\u0216\2\u16a1\u16c8\3\2\2\2\u16a2")
        buf.write(u"\u16a3\7\u0083\2\2\u16a3\u16a4\5\u028e\u0148\2\u16a4")
        buf.write(u"\u16a5\5\u0428\u0215\2\u16a5\u16c8\3\2\2\2\u16a6\u16a7")
        buf.write(u"\7\u0083\2\2\u16a7\u16a8\5\u028e\u0148\2\u16a8\u16a9")
        buf.write(u"\7n\2\2\u16a9\u16c8\3\2\2\2\u16aa\u16ab\7\u00cf\2\2\u16ab")
        buf.write(u"\u16ac\5\u028e\u0148\2\u16ac\u16ad\5\u042a\u0216\2\u16ad")
        buf.write(u"\u16c8\3\2\2\2\u16ae\u16af\7\u00cf\2\2\u16af\u16b0\5")
        buf.write(u"\u028e\u0148\2\u16b0\u16b1\7n\2\2\u16b1\u16c8\3\2\2\2")
        buf.write(u"\u16b2\u16b3\7\u00d0\2\2\u16b3\u16b4\5\u028e\u0148\2")
        buf.write(u"\u16b4\u16b5\5\u042a\u0216\2\u16b5\u16c8\3\2\2\2\u16b6")
        buf.write(u"\u16b7\7\u00d0\2\2\u16b7\u16b8\5\u028e\u0148\2\u16b8")
        buf.write(u"\u16b9\7n\2\2\u16b9\u16c8\3\2\2\2\u16ba\u16bb\7R\2\2")
        buf.write(u"\u16bb\u16bc\7\u00d7\2\2\u16bc\u16bd\5\u028e\u0148\2")
        buf.write(u"\u16bd\u16be\5\u042e\u0218\2\u16be\u16c8\3\2\2\2\u16bf")
        buf.write(u"\u16c0\7\u010a\2\2\u16c0\u16c1\5\u028e\u0148\2\u16c1")
        buf.write(u"\u16c2\5\u0418\u020d\2\u16c2\u16c8\3\2\2\2\u16c3\u16c4")
        buf.write(u"\7\u010a\2\2\u16c4\u16c5\5\u028e\u0148\2\u16c5\u16c6")
        buf.write(u"\7n\2\2\u16c6\u16c8\3\2\2\2\u16c7\u1686\3\2\2\2\u16c7")
        buf.write(u"\u168a\3\2\2\2\u16c7\u168e\3\2\2\2\u16c7\u1692\3\2\2")
        buf.write(u"\2\u16c7\u1696\3\2\2\2\u16c7\u169a\3\2\2\2\u16c7\u169e")
        buf.write(u"\3\2\2\2\u16c7\u16a2\3\2\2\2\u16c7\u16a6\3\2\2\2\u16c7")
        buf.write(u"\u16aa\3\2\2\2\u16c7\u16ae\3\2\2\2\u16c7\u16b2\3\2\2")
        buf.write(u"\2\u16c7\u16b6\3\2\2\2\u16c7\u16ba\3\2\2\2\u16c7\u16bf")
        buf.write(u"\3\2\2\2\u16c7\u16c3\3\2\2\2\u16c8\u028d\3\2\2\2\u16c9")
        buf.write(u"\u16cc\7\20\2\2\u16ca\u16cc\3\2\2\2\u16cb\u16c9\3\2\2")
        buf.write(u"\2\u16cb\u16ca\3\2\2\2\u16cc\u028f\3\2\2\2\u16cd\u16ce")
        buf.write(u"\7\37\2\2\u16ce\u16cf\7h\2\2\u16cf\u16d1\5\u041a\u020e")
        buf.write(u"\2\u16d0\u16d2\7\u018f\2\2\u16d1\u16d0\3\2\2\2\u16d1")
        buf.write(u"\u16d2\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3\u16d4\5\u0294")
        buf.write(u"\u014b\2\u16d4\u16dd\3\2\2\2\u16d5\u16d6\7\37\2\2\u16d6")
        buf.write(u"\u16d7\7h\2\2\u16d7\u16d8\5\u041a\u020e\2\u16d8\u16d9")
        buf.write(u"\7\u0146\2\2\u16d9\u16da\7\u015f\2\2\u16da\u16db\5\u0418")
        buf.write(u"\u020d\2\u16db\u16dd\3\2\2\2\u16dc\u16cd\3\2\2\2\u16dc")
        buf.write(u"\u16d5\3\2\2\2\u16dd\u0291\3\2\2\2\u16de\u16df\7\37\2")
        buf.write(u"\2\u16df\u16e0\7h\2\2\u16e0\u16e1\5\u041a\u020e\2\u16e1")
        buf.write(u"\u16e2\5J&\2\u16e2\u0293\3\2\2\2\u16e3\u16e8\b\u014b")
        buf.write(u"\1\2\u16e4\u16e5\f\4\2\2\u16e5\u16e7\5\u0296\u014c\2")
        buf.write(u"\u16e6\u16e4\3\2\2\2\u16e7\u16ea\3\2\2\2\u16e8\u16e6")
        buf.write(u"\3\2\2\2\u16e8\u16e9\3\2\2\2\u16e9\u0295\3\2\2\2\u16ea")
        buf.write(u"\u16e8\3\2\2\2\u16eb\u16ec\7R\2\2\u16ec\u16ed\7\u00d7")
        buf.write(u"\2\2\u16ed\u16ee\5\u028e\u0148\2\u16ee\u16ef\5\u042e")
        buf.write(u"\u0218\2\u16ef\u0297\3\2\2\2\u16f0\u16f1\7\177\2\2\u16f1")
        buf.write(u"\u16f2\7h\2\2\u16f2\u16f9\5\u041a\u020e\2\u16f3\u16f4")
        buf.write(u"\7\177\2\2\u16f4\u16f5\7h\2\2\u16f5\u16f6\7\u00ac\2\2")
        buf.write(u"\u16f6\u16f7\7\u008d\2\2\u16f7\u16f9\5\u041a\u020e\2")
        buf.write(u"\u16f8\u16f0\3\2\2\2\u16f8\u16f3\3\2\2\2\u16f9\u0299")
        buf.write(u"\3\2\2\2\u16fa\u16fb\7Z\2\2\u16fb\u16fc\7}\2\2\u16fc")
        buf.write(u"\u16fd\5\u01b0\u00d9\2\u16fd\u16fe\5\u029e\u0150\2\u16fe")
        buf.write(u"\u16ff\5\u036a\u01b6\2\u16ff\u1700\5\u00aaV\2\u1700\u029b")
        buf.write(u"\3\2\2\2\u1701\u1702\7\37\2\2\u1702\u1703\7}\2\2\u1703")
        buf.write(u"\u1704\5\u01b0\u00d9\2\u1704\u1705\5`\61\2\u1705\u1734")
        buf.write(u"\3\2\2\2\u1706\u1707\7\37\2\2\u1707\u1708\7}\2\2\u1708")
        buf.write(u"\u1709\5\u01b0\u00d9\2\u1709\u170a\7\177\2\2\u170a\u170b")
        buf.write(u"\7\u00ef\2\2\u170b\u170c\7\u00f4\2\2\u170c\u1734\3\2")
        buf.write(u"\2\2\u170d\u170e\7\37\2\2\u170e\u170f\7}\2\2\u170f\u1710")
        buf.write(u"\5\u01b0\u00d9\2\u1710\u1711\7\u0146\2\2\u1711\u1712")
        buf.write(u"\7\u00ef\2\2\u1712\u1713\7\u00f4\2\2\u1713\u1734\3\2")
        buf.write(u"\2\2\u1714\u1715\7\37\2\2\u1715\u1716\7}\2\2\u1716\u1717")
        buf.write(u"\5\u01b0\u00d9\2\u1717\u1718\7\31\2\2\u1718\u1719\5\u00b8")
        buf.write(u"]\2\u1719\u1734\3\2\2\2\u171a\u171b\7\37\2\2\u171b\u171c")
        buf.write(u"\7}\2\2\u171c\u171d\5\u01b0\u00d9\2\u171d\u171e\7\177")
        buf.write(u"\2\2\u171e\u171f\7S\2\2\u171f\u1720\5\u0418\u020d\2\u1720")
        buf.write(u"\u1721\5b\62\2\u1721\u1734\3\2\2\2\u1722\u1723\7\37\2")
        buf.write(u"\2\u1723\u1724\7}\2\2\u1724\u1725\5\u01b0\u00d9\2\u1725")
        buf.write(u"\u1726\7\177\2\2\u1726\u1727\7S\2\2\u1727\u1728\7\u00ac")
        buf.write(u"\2\2\u1728\u1729\7\u008d\2\2\u1729\u172a\5\u0418\u020d")
        buf.write(u"\2\u172a\u172b\5b\62\2\u172b\u1734\3\2\2\2\u172c\u172d")
        buf.write(u"\7\37\2\2\u172d\u172e\7}\2\2\u172e\u172f\5\u01b0\u00d9")
        buf.write(u"\2\u172f\u1730\7\u0180\2\2\u1730\u1731\7S\2\2\u1731\u1732")
        buf.write(u"\5\u0418\u020d\2\u1732\u1734\3\2\2\2\u1733\u1701\3\2")
        buf.write(u"\2\2\u1733\u1706\3\2\2\2\u1733\u170d\3\2\2\2\u1733\u1714")
        buf.write(u"\3\2\2\2\u1733\u171a\3\2\2\2\u1733\u1722\3\2\2\2\u1733")
        buf.write(u"\u172c\3\2\2\2\u1734\u029d\3\2\2\2\u1735\u1738\7&\2\2")
        buf.write(u"\u1736\u1738\3\2\2\2\u1737\u1735\3\2\2\2\u1737\u1736")
        buf.write(u"\3\2\2\2\u1738\u029f\3\2\2\2\u1739\u173a\7\37\2\2\u173a")
        buf.write(u"\u173b\7\u0163\2\2\u173b\u173c\7\u013c\2\2\u173c\u173d")
        buf.write(u"\7w\2\2\u173d\u173e\5\u01b0\u00d9\2\u173e\u173f\5\u0176")
        buf.write(u"\u00bc\2\u173f\u02a1\3\2\2\2\u1740\u1741\7\37\2\2\u1741")
        buf.write(u"\u1742\7\u0163\2\2\u1742\u1743\7\u013c\2\2\u1743\u1744")
        buf.write(u"\7Q\2\2\u1744\u1745\5\u01b0\u00d9\2\u1745\u1746\7\31")
        buf.write(u"\2\2\u1746\u1747\7\u00df\2\2\u1747\u1748\7\u0098\2\2")
        buf.write(u"\u1748\u1749\5\u0416\u020c\2\u1749\u174a\7\u018f\2\2")
        buf.write(u"\u174a\u174b\5\u01ae\u00d8\2\u174b\u1789\3\2\2\2\u174c")
        buf.write(u"\u174d\7\37\2\2\u174d\u174e\7\u0163\2\2\u174e\u174f\7")
        buf.write(u"\u013c\2\2\u174f\u1750\7Q\2\2\u1750\u1751\5\u01b0\u00d9")
        buf.write(u"\2\u1751\u1752\7\37\2\2\u1752\u1753\7\u00df\2\2\u1753")
        buf.write(u"\u1754\7\u0098\2\2\u1754\u1755\5\u0416\u020c\2\u1755")
        buf.write(u"\u1756\7\u018f\2\2\u1756\u1757\5\u01ae\u00d8\2\u1757")
        buf.write(u"\u1789\3\2\2\2\u1758\u1759\7\37\2\2\u1759\u175a\7\u0163")
        buf.write(u"\2\2\u175a\u175b\7\u013c\2\2\u175b\u175c\7Q\2\2\u175c")
        buf.write(u"\u175d\5\u01b0\u00d9\2\u175d\u175e\7\37\2\2\u175e\u175f")
        buf.write(u"\7\u00df\2\2\u175f\u1760\7\u012b\2\2\u1760\u1761\5\u01b0")
        buf.write(u"\u00d9\2\u1761\u1762\7\u018f\2\2\u1762\u1763\5\u01b0")
        buf.write(u"\u00d9\2\u1763\u1789\3\2\2\2\u1764\u1765\7\37\2\2\u1765")
        buf.write(u"\u1766\7\u0163\2\2\u1766\u1767\7\u013c\2\2\u1767\u1768")
        buf.write(u"\7Q\2\2\u1768\u1769\5\u01b0\u00d9\2\u1769\u176a\7\37")
        buf.write(u"\2\2\u176a\u176b\7\u00df\2\2\u176b\u176c\7\u0098\2\2")
        buf.write(u"\u176c\u176d\5\u0416\u020c\2\u176d\u176e\7\u012b\2\2")
        buf.write(u"\u176e\u176f\5\u01b0\u00d9\2\u176f\u1770\7\u018f\2\2")
        buf.write(u"\u1770\u1771\5\u01b0\u00d9\2\u1771\u1789\3\2\2\2\u1772")
        buf.write(u"\u1773\7\37\2\2\u1773\u1774\7\u0163\2\2\u1774\u1775\7")
        buf.write(u"\u013c\2\2\u1775\u1776\7Q\2\2\u1776\u1777\5\u01b0\u00d9")
        buf.write(u"\2\u1777\u1778\7\177\2\2\u1778\u1779\7\u00df\2\2\u1779")
        buf.write(u"\u177a\7\u0098\2\2\u177a\u177b\5\u0416\u020c\2\u177b")
        buf.write(u"\u1789\3\2\2\2\u177c\u177d\7\37\2\2\u177d\u177e\7\u0163")
        buf.write(u"\2\2\u177e\u177f\7\u013c\2\2\u177f\u1780\7Q\2\2\u1780")
        buf.write(u"\u1781\5\u01b0\u00d9\2\u1781\u1782\7\177\2\2\u1782\u1783")
        buf.write(u"\7\u00df\2\2\u1783\u1784\7\u00ac\2\2\u1784\u1785\7\u008d")
        buf.write(u"\2\2\u1785\u1786\7\u0098\2\2\u1786\u1787\5\u0416\u020c")
        buf.write(u"\2\u1787\u1789\3\2\2\2\u1788\u1740\3\2\2\2\u1788\u174c")
        buf.write(u"\3\2\2\2\u1788\u1758\3\2\2\2\u1788\u1764\3\2\2\2\u1788")
        buf.write(u"\u1772\3\2\2\2\u1788\u177c\3\2\2\2\u1789\u02a3\3\2\2")
        buf.write(u"\2\u178a\u178b\7Z\2\2\u178b\u178c\5\u0192\u00ca\2\u178c")
        buf.write(u"\u178d\7W\2\2\u178d\u178e\5\u01b0\u00d9\2\u178e\u178f")
        buf.write(u"\7\u0098\2\2\u178f\u1790\5\u042a\u0216\2\u1790\u1791")
        buf.write(u"\7\u0167\2\2\u1791\u1792\5\u042a\u0216\2\u1792\u1793")
        buf.write(u"\7\u009d\2\2\u1793\u1794\5\u01b0\u00d9\2\u1794\u02a5")
        buf.write(u"\3\2\2\2\u1795\u1796\7G\2\2\u1796\u1797\5\u02b4\u015b")
        buf.write(u"\2\u1797\u1798\5\u0414\u020b\2\u1798\u1799\5\u02a8\u0155")
        buf.write(u"\2\u1799\u17a3\3\2\2\2\u179a\u179b\7G\2\2\u179b\u17a3")
        buf.write(u"\5\u02b4\u015b\2\u179c\u179d\7G\2\2\u179d\u179e\5\u02b4")
        buf.write(u"\u015b\2\u179e\u179f\5\u0420\u0211\2\u179f\u17a0\7\u00fd")
        buf.write(u"\2\2\u17a0\u17a1\5\u0414\u020b\2\u17a1\u17a3\3\2\2\2")
        buf.write(u"\u17a2\u1795\3\2\2\2\u17a2\u179a\3\2\2\2\u17a2\u179c")
        buf.write(u"\3\2\2\2\u17a3\u02a7\3\2\2\2\u17a4\u17a5\7\u017d\2\2")
        buf.write(u"\u17a5\u17a8\5\u0420\u0211\2\u17a6\u17a8\3\2\2\2\u17a7")
        buf.write(u"\u17a4\3\2\2\2\u17a7\u17a6\3\2\2\2\u17a8\u02a9\3\2\2")
        buf.write(u"\2\u17a9\u17aa\7\u017e\2\2\u17aa\u17ab\5\u02b6\u015c")
        buf.write(u"\2\u17ab\u17ac\5\u02b8\u015d\2\u17ac\u17ad\5\u02b4\u015b")
        buf.write(u"\2\u17ad\u17c7\3\2\2\2\u17ae\u17af\7\u017e\2\2\u17af")
        buf.write(u"\u17b0\5\u02b6\u015c\2\u17b0\u17b1\5\u02b8\u015d\2\u17b1")
        buf.write(u"\u17b2\5\u02b4\u015b\2\u17b2\u17b3\5\u0414\u020b\2\u17b3")
        buf.write(u"\u17c7\3\2\2\2\u17b4\u17b5\7\u017e\2\2\u17b5\u17b6\5")
        buf.write(u"\u02b6\u015c\2\u17b6\u17b7\5\u02b8\u015d\2\u17b7\u17b8")
        buf.write(u"\5\u02b4\u015b\2\u17b8\u17b9\5\u02b0\u0159\2\u17b9\u17c7")
        buf.write(u"\3\2\2\2\u17ba\u17bb\7\u017e\2\2\u17bb\u17bc\7\r\2\2")
        buf.write(u"\u17bc\u17bd\5\u02ac\u0157\2\u17bd\u17be\7\6\2\2\u17be")
        buf.write(u"\u17c7\3\2\2\2\u17bf\u17c0\7\u017e\2\2\u17c0\u17c1\7")
        buf.write(u"\r\2\2\u17c1\u17c2\5\u02ac\u0157\2\u17c2\u17c3\7\6\2")
        buf.write(u"\2\u17c3\u17c4\5\u0414\u020b\2\u17c4\u17c5\5\u02ba\u015e")
        buf.write(u"\2\u17c5\u17c7\3\2\2\2\u17c6\u17a9\3\2\2\2\u17c6\u17ae")
        buf.write(u"\3\2\2\2\u17c6\u17b4\3\2\2\2\u17c6\u17ba\3\2\2\2\u17c6")
        buf.write(u"\u17bf\3\2\2\2\u17c7\u02ab\3\2\2\2\u17c8\u17c9\b\u0157")
        buf.write(u"\1\2\u17c9\u17ca\5\u02ae\u0158\2\u17ca\u17d0\3\2\2\2")
        buf.write(u"\u17cb\u17cc\f\3\2\2\u17cc\u17cd\7\b\2\2\u17cd\u17cf")
        buf.write(u"\5\u02ae\u0158\2\u17ce\u17cb\3\2\2\2\u17cf\u17d2\3\2")
        buf.write(u"\2\2\u17d0\u17ce\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u02ad")
        buf.write(u"\3\2\2\2\u17d2\u17d0\3\2\2\2\u17d3\u17d8\5\u02b2\u015a")
        buf.write(u"\2\u17d4\u17d8\7\u0187\2\2\u17d5\u17d8\7\u009c\2\2\u17d6")
        buf.write(u"\u17d8\7\u009e\2\2\u17d7\u17d3\3\2\2\2\u17d7\u17d4\3")
        buf.write(u"\2\2\2\u17d7\u17d5\3\2\2\2\u17d7\u17d6\3\2\2\2\u17d8")
        buf.write(u"\u02af\3\2\2\2\u17d9\u17da\5\u02b2\u015a\2\u17da\u17db")
        buf.write(u"\5\u02b4\u015b\2\u17db\u17e2\3\2\2\2\u17dc\u17dd\5\u02b2")
        buf.write(u"\u015a\2\u17dd\u17de\5\u02b4\u015b\2\u17de\u17df\5\u0414")
        buf.write(u"\u020b\2\u17df\u17e0\5\u02ba\u015e\2\u17e0\u17e2\3\2")
        buf.write(u"\2\2\u17e1\u17d9\3\2\2\2\u17e1\u17dc\3\2\2\2\u17e2\u02b1")
        buf.write(u"\3\2\2\2\u17e3\u17e4\t\13\2\2\u17e4\u02b3\3\2\2\2\u17e5")
        buf.write(u"\u17e8\7\u0187\2\2\u17e6\u17e8\3\2\2\2\u17e7\u17e5\3")
        buf.write(u"\2\2\2\u17e7\u17e6\3\2\2\2\u17e8\u02b5\3\2\2\2\u17e9")
        buf.write(u"\u17ec\7\u009e\2\2\u17ea\u17ec\3\2\2\2\u17eb\u17e9\3")
        buf.write(u"\2\2\2\u17eb\u17ea\3\2\2\2\u17ec\u02b7\3\2\2\2\u17ed")
        buf.write(u"\u17f0\7\u009c\2\2\u17ee\u17f0\3\2\2\2\u17ef\u17ed\3")
        buf.write(u"\2\2\2\u17ef\u17ee\3\2\2\2\u17f0\u02b9\3\2\2\2\u17f1")
        buf.write(u"\u17f2\7\r\2\2\u17f2\u17f3\5\u0416\u020c\2\u17f3\u17f4")
        buf.write(u"\7\6\2\2\u17f4\u17f7\3\2\2\2\u17f5\u17f7\3\2\2\2\u17f6")
        buf.write(u"\u17f1\3\2\2\2\u17f6\u17f5\3\2\2\2\u17f7\u02bb\3\2\2")
        buf.write(u"\2\u17f8\u17f9\7\u008e\2\2\u17f9\u1809\5\u02be\u0160")
        buf.write(u"\2\u17fa\u17fb\7\u008e\2\2\u17fb\u17fc\5\u02b2\u015a")
        buf.write(u"\2\u17fc\u17fd\5\u02b4\u015b\2\u17fd\u17fe\5\u02be\u0160")
        buf.write(u"\2\u17fe\u1809\3\2\2\2\u17ff\u1800\7\u008e\2\2\u1800")
        buf.write(u"\u1801\7\u0187\2\2\u1801\u1809\5\u02be\u0160\2\u1802")
        buf.write(u"\u1803\7\u008e\2\2\u1803\u1804\7\r\2\2\u1804\u1805\5")
        buf.write(u"\u02c0\u0161\2\u1805\u1806\7\6\2\2\u1806\u1807\5\u02be")
        buf.write(u"\u0160\2\u1807\u1809\3\2\2\2\u1808\u17f8\3\2\2\2\u1808")
        buf.write(u"\u17fa\3\2\2\2\u1808\u17ff\3\2\2\2\u1808\u1802\3\2\2")
        buf.write(u"\2\u1809\u02bd\3\2\2\2\u180a\u1812\5\u0300\u0181\2\u180b")
        buf.write(u"\u1812\5\u02d4\u016b\2\u180c\u1812\5\u02ea\u0176\2\u180d")
        buf.write(u"\u1812\5\u02de\u0170\2\u180e\u1812\5\u02f8\u017d\2\u180f")
        buf.write(u"\u1812\5\u00e0q\2\u1810\u1812\5\u02ce\u0168\2\u1811\u180a")
        buf.write(u"\3\2\2\2\u1811\u180b\3\2\2\2\u1811\u180c\3\2\2\2\u1811")
        buf.write(u"\u180d\3\2\2\2\u1811\u180e\3\2\2\2\u1811\u180f\3\2\2")
        buf.write(u"\2\u1811\u1810\3\2\2\2\u1812\u02bf\3\2\2\2\u1813\u1814")
        buf.write(u"\b\u0161\1\2\u1814\u1815\5\u02c2\u0162\2\u1815\u181b")
        buf.write(u"\3\2\2\2\u1816\u1817\f\3\2\2\u1817\u1818\7\b\2\2\u1818")
        buf.write(u"\u181a\5\u02c2\u0162\2\u1819\u1816\3\2\2\2\u181a\u181d")
        buf.write(u"\3\2\2\2\u181b\u1819\3\2\2\2\u181b\u181c\3\2\2\2\u181c")
        buf.write(u"\u02c1\3\2\2\2\u181d\u181b\3\2\2\2\u181e\u181f\5\u02c4")
        buf.write(u"\u0163\2\u181f\u1820\5\u02c6\u0164\2\u1820\u02c3\3\2")
        buf.write(u"\2\2\u1821\u1825\5\u0430\u0219\2\u1822\u1825\5\u02b2")
        buf.write(u"\u015a\2\u1823\u1825\7\u0187\2\2\u1824\u1821\3\2\2\2")
        buf.write(u"\u1824\u1822\3\2\2\2\u1824\u1823\3\2\2\2\u1825\u02c5")
        buf.write(u"\3\2\2\2\u1826\u182a\5@!\2\u1827\u182a\5\u00f2z\2\u1828")
        buf.write(u"\u182a\3\2\2\2\u1829\u1826\3\2\2\2\u1829\u1827\3\2\2")
        buf.write(u"\2\u1829\u1828\3\2\2\2\u182a\u02c7\3\2\2\2\u182b\u182c")
        buf.write(u"\7\u0115\2\2\u182c\u182d\5\u0418\u020d\2\u182d\u182e")
        buf.write(u"\5\u02ca\u0166\2\u182e\u182f\7&\2\2\u182f\u1830\5\u02cc")
        buf.write(u"\u0167\2\u1830\u02c9\3\2\2\2\u1831\u1832\7\r\2\2\u1832")
        buf.write(u"\u1833\5\u03da\u01ee\2\u1833\u1834\7\6\2\2\u1834\u1837")
        buf.write(u"\3\2\2\2\u1835\u1837\3\2\2\2\u1836\u1831\3\2\2\2\u1836")
        buf.write(u"\u1835\3\2\2\2\u1837\u02cb\3\2\2\2\u1838\u183d\5\u0300")
        buf.write(u"\u0181\2\u1839\u183d\5\u02d4\u016b\2\u183a\u183d\5\u02ea")
        buf.write(u"\u0176\2\u183b\u183d\5\u02de\u0170\2\u183c\u1838\3\2")
        buf.write(u"\2\2\u183c\u1839\3\2\2\2\u183c\u183a\3\2\2\2\u183c\u183b")
        buf.write(u"\3\2\2\2\u183d\u02cd\3\2\2\2\u183e\u183f\7\u008c\2\2")
        buf.write(u"\u183f\u1840\5\u0418\u020d\2\u1840\u1841\5\u02d0\u0169")
        buf.write(u"\2\u1841\u184d\3\2\2\2\u1842\u1843\7Z\2\2\u1843\u1844")
        buf.write(u"\5\u0098M\2\u1844\u1845\7\u015d\2\2\u1845\u1846\5\u00e2")
        buf.write(u"r\2\u1846\u1847\7&\2\2\u1847\u1848\7\u008c\2\2\u1848")
        buf.write(u"\u1849\5\u0418\u020d\2\u1849\u184a\5\u02d0\u0169\2\u184a")
        buf.write(u"\u184b\5\u00e4s\2\u184b\u184d\3\2\2\2\u184c\u183e\3\2")
        buf.write(u"\2\2\u184c\u1842\3\2\2\2\u184d\u02cf\3\2\2\2\u184e\u184f")
        buf.write(u"\7\r\2\2\u184f\u1850\5\u03d4\u01eb\2\u1850\u1851\7\6")
        buf.write(u"\2\2\u1851\u1854\3\2\2\2\u1852\u1854\3\2\2\2\u1853\u184e")
        buf.write(u"\3\2\2\2\u1853\u1852\3\2\2\2\u1854\u02d1\3\2\2\2\u1855")
        buf.write(u"\u1856\7j\2\2\u1856\u1860\5\u0418\u020d\2\u1857\u1858")
        buf.write(u"\7j\2\2\u1858\u1859\7\u0115\2\2\u1859\u1860\5\u0418\u020d")
        buf.write(u"\2\u185a\u185b\7j\2\2\u185b\u1860\7\35\2\2\u185c\u185d")
        buf.write(u"\7j\2\2\u185d\u185e\7\u0115\2\2\u185e\u1860\7\35\2\2")
        buf.write(u"\u185f\u1855\3\2\2\2\u185f\u1857\3\2\2\2\u185f\u185a")
        buf.write(u"\3\2\2\2\u185f\u185c\3\2\2\2\u1860\u02d3\3\2\2\2\u1861")
        buf.write(u"\u1862\5\u0310\u0189\2\u1862\u1863\7\u00be\2\2\u1863")
        buf.write(u"\u1864\7\u00c4\2\2\u1864\u1865\5\u0414\u020b\2\u1865")
        buf.write(u"\u1866\5\u02d6\u016c\2\u1866\u1867\5\u02dc\u016f\2\u1867")
        buf.write(u"\u02d5\3\2\2\2\u1868\u1871\5\u0300\u0181\2\u1869\u186a")
        buf.write(u"\7\r\2\2\u186a\u186b\5\u02d8\u016d\2\u186b\u186c\7\6")
        buf.write(u"\2\2\u186c\u186d\5\u0300\u0181\2\u186d\u1871\3\2\2\2")
        buf.write(u"\u186e\u186f\7n\2\2\u186f\u1871\7\u0183\2\2\u1870\u1868")
        buf.write(u"\3\2\2\2\u1870\u1869\3\2\2\2\u1870\u186e\3\2\2\2\u1871")
        buf.write(u"\u02d7\3\2\2\2\u1872\u1873\b\u016d\1\2\u1873\u1874\5")
        buf.write(u"\u02da\u016e\2\u1874\u187a\3\2\2\2\u1875\u1876\f\3\2")
        buf.write(u"\2\u1876\u1877\7\b\2\2\u1877\u1879\5\u02da\u016e\2\u1878")
        buf.write(u"\u1875\3\2\2\2\u1879\u187c\3\2\2\2\u187a\u1878\3\2\2")
        buf.write(u"\2\u187a\u187b\3\2\2\2\u187b\u02d9\3\2\2\2\u187c\u187a")
        buf.write(u"\3\2\2\2\u187d\u187e\5\u0430\u0219\2\u187e\u187f\5\u0404")
        buf.write(u"\u0203\2\u187f\u02db\3\2\2\2\u1880\u1881\7\u0130\2\2")
        buf.write(u"\u1881\u1884\5\u040e\u0208\2\u1882\u1884\3\2\2\2\u1883")
        buf.write(u"\u1880\3\2\2\2\u1883\u1882\3\2\2\2\u1884\u02dd\3\2\2")
        buf.write(u"\2\u1885\u1886\5\u0310\u0189\2\u1886\u1887\7s\2\2\u1887")
        buf.write(u"\u1888\7\u009d\2\2\u1888\u1889\5\u035c\u01af\2\u1889")
        buf.write(u"\u188a\5\u02e0\u0171\2\u188a\u188b\5\u0362\u01b2\2\u188b")
        buf.write(u"\u188c\5\u02dc\u016f\2\u188c\u02df\3\2\2\2\u188d\u188e")
        buf.write(u"\7\u017d\2\2\u188e\u1891\5\u034a\u01a6\2\u188f\u1891")
        buf.write(u"\3\2\2\2\u1890\u188d\3\2\2\2\u1890\u188f\3\2\2\2\u1891")
        buf.write(u"\u02e1\3\2\2\2\u1892\u1893\7\u00de\2\2\u1893\u1894\5")
        buf.write(u"\u0316\u018c\2\u1894\u1895\5\u035a\u01ae\2\u1895\u1896")
        buf.write(u"\5\u02e4\u0173\2\u1896\u1897\5\u02e8\u0175\2\u1897\u02e3")
        buf.write(u"\3\2\2\2\u1898\u1899\7\u00b1\2\2\u1899\u189a\5\u02e6")
        buf.write(u"\u0174\2\u189a\u189b\7\u00e4\2\2\u189b\u189e\3\2\2\2")
        buf.write(u"\u189c\u189e\3\2\2\2\u189d\u1898\3\2\2\2\u189d\u189c")
        buf.write(u"\3\2\2\2\u189e\u02e5\3\2\2\2\u189f\u18a0\7\27\2\2\u18a0")
        buf.write(u"\u18b0\7\u0148\2\2\u18a1\u18a2\7\u0136\2\2\u18a2\u18b0")
        buf.write(u"\7\u0148\2\2\u18a3\u18a4\7\u0136\2\2\u18a4\u18b0\7\u008b")
        buf.write(u"\2\2\u18a5\u18a6\7\u0148\2\2\u18a6\u18a7\7\u017b\2\2")
        buf.write(u"\u18a7\u18b0\7\u008b\2\2\u18a8\u18b0\7\u0148\2\2\u18a9")
        buf.write(u"\u18aa\7\u0148\2\2\u18aa\u18ab\7\u0136\2\2\u18ab\u18b0")
        buf.write(u"\7\u008b\2\2\u18ac\u18b0\7\u008b\2\2\u18ad\u18ae\7\27")
        buf.write(u"\2\2\u18ae\u18b0\7\u008b\2\2\u18af\u189f\3\2\2\2\u18af")
        buf.write(u"\u18a1\3\2\2\2\u18af\u18a3\3\2\2\2\u18af\u18a5\3\2\2")
        buf.write(u"\2\u18af\u18a8\3\2\2\2\u18af\u18a9\3\2\2\2\u18af\u18ac")
        buf.write(u"\3\2\2\2\u18af\u18ad\3\2\2\2\u18b0\u02e7\3\2\2\2\u18b1")
        buf.write(u"\u18b4\7\u00f3\2\2\u18b2\u18b4\3\2\2\2\u18b3\u18b1\3")
        buf.write(u"\2\2\2\u18b3\u18b2\3\2\2\2\u18b4\u02e9\3\2\2\2\u18b5")
        buf.write(u"\u18b6\5\u0310\u0189\2\u18b6\u18b7\7\u017b\2\2\u18b7")
        buf.write(u"\u18b8\5\u035c\u01af\2\u18b8\u18b9\7\u0146\2\2\u18b9")
        buf.write(u"\u18ba\5\u02ec\u0177\2\u18ba\u18bb\5\u0348\u01a5\2\u18bb")
        buf.write(u"\u18bc\5\u0362\u01b2\2\u18bc\u18bd\5\u02dc\u016f\2\u18bd")
        buf.write(u"\u02eb\3\2\2\2\u18be\u18bf\b\u0177\1\2\u18bf\u18c0\5")
        buf.write(u"\u02ee\u0178\2\u18c0\u18c6\3\2\2\2\u18c1\u18c2\f\3\2")
        buf.write(u"\2\u18c2\u18c3\7\b\2\2\u18c3\u18c5\5\u02ee\u0178\2\u18c4")
        buf.write(u"\u18c1\3\2\2\2\u18c5\u18c8\3\2\2\2\u18c6\u18c4\3\2\2")
        buf.write(u"\2\u18c6\u18c7\3\2\2\2\u18c7\u02ed\3\2\2\2\u18c8\u18c6")
        buf.write(u"\3\2\2\2\u18c9\u18cc\5\u02f0\u0179\2\u18ca\u18cc\5\u02f2")
        buf.write(u"\u017a\2\u18cb\u18c9\3\2\2\2\u18cb\u18ca\3\2\2\2\u18cc")
        buf.write(u"\u02ef\3\2\2\2\u18cd\u18ce\5\u02f4\u017b\2\u18ce\u18cf")
        buf.write(u"\7\20\2\2\u18cf\u18d0\5\u0408\u0205\2\u18d0\u02f1\3\2")
        buf.write(u"\2\2\u18d1\u18d2\7\r\2\2\u18d2\u18d3\5\u02f6\u017c\2")
        buf.write(u"\u18d3\u18d4\7\6\2\2\u18d4\u18d5\7\20\2\2\u18d5\u18d6")
        buf.write(u"\5\u040c\u0207\2\u18d6\u02f3\3\2\2\2\u18d7\u18d8\5\u0430")
        buf.write(u"\u0219\2\u18d8\u18d9\5\u0404\u0203\2\u18d9\u02f5\3\2")
        buf.write(u"\2\2\u18da\u18db\b\u017c\1\2\u18db\u18dc\5\u02f4\u017b")
        buf.write(u"\2\u18dc\u18e2\3\2\2\2\u18dd\u18de\f\3\2\2\u18de\u18df")
        buf.write(u"\7\b\2\2\u18df\u18e1\5\u02f4\u017b\2\u18e0\u18dd\3\2")
        buf.write(u"\2\2\u18e1\u18e4\3\2\2\2\u18e2\u18e0\3\2\2\2\u18e2\u18e3")
        buf.write(u"\3\2\2\2\u18e3\u02f7\3\2\2\2\u18e4\u18e2\3\2\2\2\u18e5")
        buf.write(u"\u18e6\7m\2\2\u18e6\u18e7\5\u02fa\u017e\2\u18e7\u18e8")
        buf.write(u"\5\u02fc\u017f\2\u18e8\u18e9\7e\2\2\u18e9\u18ea\5\u02fe")
        buf.write(u"\u0180\2\u18ea\u18eb\7\u0098\2\2\u18eb\u18ec\5\u0300")
        buf.write(u"\u0181\2\u18ec\u02f9\3\2\2\2\u18ed\u18ee\5\u0418\u020d")
        buf.write(u"\2\u18ee\u02fb\3\2\2\2\u18ef\u18fb\b\u017f\1\2\u18f0")
        buf.write(u"\u18f1\f\6\2\2\u18f1\u18f2\7\u00ed\2\2\u18f2\u18fa\7")
        buf.write(u"\u013b\2\2\u18f3\u18f4\f\5\2\2\u18f4\u18fa\7\u013b\2")
        buf.write(u"\2\u18f5\u18f6\f\4\2\2\u18f6\u18fa\7\63\2\2\u18f7\u18f8")
        buf.write(u"\f\3\2\2\u18f8\u18fa\7\u00bd\2\2\u18f9\u18f0\3\2\2\2")
        buf.write(u"\u18f9\u18f3\3\2\2\2\u18f9\u18f5\3\2\2\2\u18f9\u18f7")
        buf.write(u"\3\2\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb")
        buf.write(u"\u18fc\3\2\2\2\u18fc\u02fd\3\2\2\2\u18fd\u18fb\3\2\2")
        buf.write(u"\2\u18fe\u1904\3\2\2\2\u18ff\u1900\7\u018f\2\2\u1900")
        buf.write(u"\u1904\7\u00a9\2\2\u1901\u1902\7\u0190\2\2\u1902\u1904")
        buf.write(u"\7\u00a9\2\2\u1903\u18fe\3\2\2\2\u1903\u18ff\3\2\2\2")
        buf.write(u"\u1903\u1901\3\2\2\2\u1904\u02ff\3\2\2\2\u1905\u1908")
        buf.write(u"\5\u0304\u0183\2\u1906\u1908\5\u0302\u0182\2\u1907\u1905")
        buf.write(u"\3\2\2\2\u1907\u1906\3\2\2\2\u1908\u0301\3\2\2\2\u1909")
        buf.write(u"\u190a\b\u0182\1\2\u190a\u190b\7\r\2\2\u190b\u190c\5")
        buf.write(u"\u0304\u0183\2\u190c\u190d\7\6\2\2\u190d\u1913\3\2\2")
        buf.write(u"\2\u190e\u190f\7\r\2\2\u190f\u1910\5\u0302\u0182\2\u1910")
        buf.write(u"\u1911\7\6\2\2\u1911\u1913\3\2\2\2\u1912\u1909\3\2\2")
        buf.write(u"\2\u1912\u190e\3\2\2\2\u1913\u192b\3\2\2\2\u1914\u1915")
        buf.write(u"\f\5\2\2\u1915\u1916\7\u0175\2\2\u1916\u1919\5\u0318")
        buf.write(u"\u018d\2\u1917\u191a\5\u0302\u0182\2\u1918\u191a\5\u0308")
        buf.write(u"\u0185\2\u1919\u1917\3\2\2\2\u1919\u1918\3\2\2\2\u191a")
        buf.write(u"\u192a\3\2\2\2\u191b\u191c\f\4\2\2\u191c\u191d\7\u00c2")
        buf.write(u"\2\2\u191d\u1920\5\u0318\u018d\2\u191e\u1921\5\u0302")
        buf.write(u"\u0182\2\u191f\u1921\5\u0308\u0185\2\u1920\u191e\3\2")
        buf.write(u"\2\2\u1920\u191f\3\2\2\2\u1921\u192a\3\2\2\2\u1922\u1923")
        buf.write(u"\f\3\2\2\u1923\u1924\7\u0088\2\2\u1924\u1927\5\u0318")
        buf.write(u"\u018d\2\u1925\u1928\5\u0302\u0182\2\u1926\u1928\5\u0308")
        buf.write(u"\u0185\2\u1927\u1925\3\2\2\2\u1927\u1926\3\2\2\2\u1928")
        buf.write(u"\u192a\3\2\2\2\u1929\u1914\3\2\2\2\u1929\u191b\3\2\2")
        buf.write(u"\2\u1929\u1922\3\2\2\2\u192a\u192d\3\2\2\2\u192b\u1929")
        buf.write(u"\3\2\2\2\u192b\u192c\3\2\2\2\u192c\u0303\3\2\2\2\u192d")
        buf.write(u"\u192b\3\2\2\2\u192e\u1950\5\u0308\u0185\2\u192f\u1930")
        buf.write(u"\5\u0306\u0184\2\u1930\u1931\5\u031e\u0190\2\u1931\u1950")
        buf.write(u"\3\2\2\2\u1932\u1933\5\u0306\u0184\2\u1933\u1934\5\u031c")
        buf.write(u"\u018f\2\u1934\u1935\5\u033c\u019f\2\u1935\u1936\5\u0326")
        buf.write(u"\u0194\2\u1936\u1950\3\2\2\2\u1937\u1938\5\u0306\u0184")
        buf.write(u"\2\u1938\u1939\5\u031c\u018f\2\u1939\u193a\5\u0324\u0193")
        buf.write(u"\2\u193a\u193b\5\u033e\u01a0\2\u193b\u1950\3\2\2\2\u193c")
        buf.write(u"\u193d\5\u030a\u0186\2\u193d\u193e\5\u0306\u0184\2\u193e")
        buf.write(u"\u1950\3\2\2\2\u193f\u1940\5\u030a\u0186\2\u1940\u1941")
        buf.write(u"\5\u0306\u0184\2\u1941\u1942\5\u031e\u0190\2\u1942\u1950")
        buf.write(u"\3\2\2\2\u1943\u1944\5\u030a\u0186\2\u1944\u1945\5\u0306")
        buf.write(u"\u0184\2\u1945\u1946\5\u031c\u018f\2\u1946\u1947\5\u033c")
        buf.write(u"\u019f\2\u1947\u1948\5\u0326\u0194\2\u1948\u1950\3\2")
        buf.write(u"\2\2\u1949\u194a\5\u030a\u0186\2\u194a\u194b\5\u0306")
        buf.write(u"\u0184\2\u194b\u194c\5\u031c\u018f\2\u194c\u194d\5\u0324")
        buf.write(u"\u0193\2\u194d\u194e\5\u033e\u01a0\2\u194e\u1950\3\2")
        buf.write(u"\2\2\u194f\u192e\3\2\2\2\u194f\u192f\3\2\2\2\u194f\u1932")
        buf.write(u"\3\2\2\2\u194f\u1937\3\2\2\2\u194f\u193c\3\2\2\2\u194f")
        buf.write(u"\u193f\3\2\2\2\u194f\u1943\3\2\2\2\u194f\u1949\3\2\2")
        buf.write(u"\2\u1950\u0305\3\2\2\2\u1951\u1954\5\u0308\u0185\2\u1952")
        buf.write(u"\u1954\5\u0302\u0182\2\u1953\u1951\3\2\2\2\u1953\u1952")
        buf.write(u"\3\2\2\2\u1954\u0307\3\2\2\2\u1955\u1956\b\u0185\1\2")
        buf.write(u"\u1956\u1957\7\u013f\2\2\u1957\u1958\5\u031a\u018e\2")
        buf.write(u"\u1958\u1959\5\u040e\u0208\2\u1959\u195a\5\u0312\u018a")
        buf.write(u"\2\u195a\u195b\5\u0348\u01a5\2\u195b\u195c\5\u0360\u01b1")
        buf.write(u"\2\u195c\u195d\5\u0338\u019d\2\u195d\u195e\5\u033a\u019e")
        buf.write(u"\2\u195e\u195f\5\u03b2\u01da\2\u195f\u1964\3\2\2\2\u1960")
        buf.write(u"\u1964\5\u0346\u01a4\2\u1961\u1962\7\u015d\2\2\u1962")
        buf.write(u"\u1964\5\u0358\u01ad\2\u1963\u1955\3\2\2\2\u1963\u1960")
        buf.write(u"\3\2\2\2\u1963\u1961\3\2\2\2\u1964\u197c\3\2\2\2\u1965")
        buf.write(u"\u1966\f\5\2\2\u1966\u1967\7\u0175\2\2\u1967\u196a\5")
        buf.write(u"\u0318\u018d\2\u1968\u196b\5\u0302\u0182\2\u1969\u196b")
        buf.write(u"\5\u0308\u0185\2\u196a\u1968\3\2\2\2\u196a\u1969\3\2")
        buf.write(u"\2\2\u196b\u197b\3\2\2\2\u196c\u196d\f\4\2\2\u196d\u196e")
        buf.write(u"\7\u00c2\2\2\u196e\u1971\5\u0318\u018d\2\u196f\u1972")
        buf.write(u"\5\u0302\u0182\2\u1970\u1972\5\u0308\u0185\2\u1971\u196f")
        buf.write(u"\3\2\2\2\u1971\u1970\3\2\2\2\u1972\u197b\3\2\2\2\u1973")
        buf.write(u"\u1974\f\3\2\2\u1974\u1975\7\u0088\2\2\u1975\u1978\5")
        buf.write(u"\u0318\u018d\2\u1976\u1979\5\u0302\u0182\2\u1977\u1979")
        buf.write(u"\5\u0308\u0185\2\u1978\u1976\3\2\2\2\u1978\u1977\3\2")
        buf.write(u"\2\2\u1979\u197b\3\2\2\2\u197a\u1965\3\2\2\2\u197a\u196c")
        buf.write(u"\3\2\2\2\u197a\u1973\3\2\2\2\u197b\u197e\3\2\2\2\u197c")
        buf.write(u"\u197a\3\2\2\2\u197c\u197d\3\2\2\2\u197d\u0309\3\2\2")
        buf.write(u"\2\u197e\u197c\3\2\2\2\u197f\u1980\7\u018f\2\2\u1980")
        buf.write(u"\u1985\5\u030c\u0187\2\u1981\u1982\7\u018f\2\2\u1982")
        buf.write(u"\u1983\7\u0123\2\2\u1983\u1985\5\u030c\u0187\2\u1984")
        buf.write(u"\u197f\3\2\2\2\u1984\u1981\3\2\2\2\u1985\u030b\3\2\2")
        buf.write(u"\2\u1986\u1987\b\u0187\1\2\u1987\u1988\5\u030e\u0188")
        buf.write(u"\2\u1988\u198e\3\2\2\2\u1989\u198a\f\3\2\2\u198a\u198b")
        buf.write(u"\7\b\2\2\u198b\u198d\5\u030e\u0188\2\u198c\u1989\3\2")
        buf.write(u"\2\2\u198d\u1990\3\2\2\2\u198e\u198c\3\2\2\2\u198e\u198f")
        buf.write(u"\3\2\2\2\u198f\u030d\3\2\2\2\u1990\u198e\3\2\2\2\u1991")
        buf.write(u"\u1992\5\u0418\u020d\2\u1992\u1993\5\u02ba\u015e\2\u1993")
        buf.write(u"\u1994\7&\2\2\u1994\u1995\7\r\2\2\u1995\u1996\5\u02cc")
        buf.write(u"\u0167\2\u1996\u1997\7\6\2\2\u1997\u030f\3\2\2\2\u1998")
        buf.write(u"\u199b\5\u030a\u0186\2\u1999\u199b\3\2\2\2\u199a\u1998")
        buf.write(u"\3\2\2\2\u199a\u1999\3\2\2\2\u199b\u0311\3\2\2\2\u199c")
        buf.write(u"\u199d\7\u00c4\2\2\u199d\u19a0\5\u0314\u018b\2\u199e")
        buf.write(u"\u19a0\3\2\2\2\u199f\u199c\3\2\2\2\u199f\u199e\3\2\2")
        buf.write(u"\2\u19a0\u0313\3\2\2\2\u19a1\u19a2\7\u0162\2\2\u19a2")
        buf.write(u"\u19a3\5\u0316\u018c\2\u19a3\u19a4\5\u0414\u020b\2\u19a4")
        buf.write(u"\u19c5\3\2\2\2\u19a5\u19a6\7\u0160\2\2\u19a6\u19a7\5")
        buf.write(u"\u0316\u018c\2\u19a7\u19a8\5\u0414\u020b\2\u19a8\u19c5")
        buf.write(u"\3\2\2\2\u19a9\u19aa\7\u00da\2\2\u19aa\u19ab\7\u0162")
        buf.write(u"\2\2\u19ab\u19ac\5\u0316\u018c\2\u19ac\u19ad\5\u0414")
        buf.write(u"\u020b\2\u19ad\u19c5\3\2\2\2\u19ae\u19af\7\u00da\2\2")
        buf.write(u"\u19af\u19b0\7\u0160\2\2\u19b0\u19b1\5\u0316\u018c\2")
        buf.write(u"\u19b1\u19b2\5\u0414\u020b\2\u19b2\u19c5\3\2\2\2\u19b3")
        buf.write(u"\u19b4\7\u00a1\2\2\u19b4\u19b5\7\u0162\2\2\u19b5\u19b6")
        buf.write(u"\5\u0316\u018c\2\u19b6\u19b7\5\u0414\u020b\2\u19b7\u19c5")
        buf.write(u"\3\2\2\2\u19b8\u19b9\7\u00a1\2\2\u19b9\u19ba\7\u0160")
        buf.write(u"\2\2\u19ba\u19bb\5\u0316\u018c\2\u19bb\u19bc\5\u0414")
        buf.write(u"\u020b\2\u19bc\u19c5\3\2\2\2\u19bd\u19be\7\u0179\2\2")
        buf.write(u"\u19be\u19bf\5\u0316\u018c\2\u19bf\u19c0\5\u0414\u020b")
        buf.write(u"\2\u19c0\u19c5\3\2\2\2\u19c1\u19c2\7\u015d\2\2\u19c2")
        buf.write(u"\u19c5\5\u0414\u020b\2\u19c3\u19c5\5\u0414\u020b\2\u19c4")
        buf.write(u"\u19a1\3\2\2\2\u19c4\u19a5\3\2\2\2\u19c4\u19a9\3\2\2")
        buf.write(u"\2\u19c4\u19ae\3\2\2\2\u19c4\u19b3\3\2\2\2\u19c4\u19b8")
        buf.write(u"\3\2\2\2\u19c4\u19bd\3\2\2\2\u19c4\u19c1\3\2\2\2\u19c4")
        buf.write(u"\u19c3\3\2\2\2\u19c5\u0315\3\2\2\2\u19c6\u19c9\7\u015d")
        buf.write(u"\2\2\u19c7\u19c9\3\2\2\2\u19c8\u19c6\3\2\2\2\u19c8\u19c7")
        buf.write(u"\3\2\2\2\u19c9\u0317\3\2\2\2\u19ca\u19ce\7\35\2\2\u19cb")
        buf.write(u"\u19ce\7z\2\2\u19cc\u19ce\3\2\2\2\u19cd\u19ca\3\2\2\2")
        buf.write(u"\u19cd\u19cb\3\2\2\2\u19cd\u19cc\3\2\2\2\u19ce\u0319")
        buf.write(u"\3\2\2\2\u19cf\u19d9\7z\2\2\u19d0\u19d1\7z\2\2\u19d1")
        buf.write(u"\u19d2\7\u00fd\2\2\u19d2\u19d3\7\r\2\2\u19d3\u19d4\5")
        buf.write(u"\u03d4\u01eb\2\u19d4\u19d5\7\6\2\2\u19d5\u19d9\3\2\2")
        buf.write(u"\2\u19d6\u19d9\7\35\2\2\u19d7\u19d9\3\2\2\2\u19d8\u19cf")
        buf.write(u"\3\2\2\2\u19d8\u19d0\3\2\2\2\u19d8\u19d6\3\2\2\2\u19d8")
        buf.write(u"\u19d7\3\2\2\2\u19d9\u031b\3\2\2\2\u19da\u19dd\5\u031e")
        buf.write(u"\u0190\2\u19db\u19dd\3\2\2\2\u19dc\u19da\3\2\2\2\u19dc")
        buf.write(u"\u19db\3\2\2\2\u19dd\u031d\3\2\2\2\u19de\u19df\7\u0103")
        buf.write(u"\2\2\u19df\u19e0\7\67\2\2\u19e0\u19e1\5\u0320\u0191\2")
        buf.write(u"\u19e1\u031f\3\2\2\2\u19e2\u19e3\b\u0191\1\2\u19e3\u19e4")
        buf.write(u"\5\u0322\u0192\2\u19e4\u19ea\3\2\2\2\u19e5\u19e6\f\3")
        buf.write(u"\2\2\u19e6\u19e7\7\b\2\2\u19e7\u19e9\5\u0322\u0192\2")
        buf.write(u"\u19e8\u19e5\3\2\2\2\u19e9\u19ec\3\2\2\2\u19ea\u19e8")
        buf.write(u"\3\2\2\2\u19ea\u19eb\3\2\2\2\u19eb\u0321\3\2\2\2\u19ec")
        buf.write(u"\u19ea\3\2\2\2\u19ed\u19ee\5\u039a\u01ce\2\u19ee\u19ef")
        buf.write(u"\7\u017d\2\2\u19ef\u19f0\5\u03d0\u01e9\2\u19f0\u19f1")
        buf.write(u"\5\u020a\u0106\2\u19f1\u19f7\3\2\2\2\u19f2\u19f3\5\u039a")
        buf.write(u"\u01ce\2\u19f3\u19f4\5\u0208\u0105\2\u19f4\u19f5\5\u020a")
        buf.write(u"\u0106\2\u19f5\u19f7\3\2\2\2\u19f6\u19ed\3\2\2\2\u19f6")
        buf.write(u"\u19f2\3\2\2\2\u19f7\u0323\3\2\2\2\u19f8\u19f9\5\u0328")
        buf.write(u"\u0195\2\u19f9\u19fa\5\u032a\u0196\2\u19fa\u1a01\3\2")
        buf.write(u"\2\2\u19fb\u19fc\5\u032a\u0196\2\u19fc\u19fd\5\u0328")
        buf.write(u"\u0195\2\u19fd\u1a01\3\2\2\2\u19fe\u1a01\5\u0328\u0195")
        buf.write(u"\2\u19ff\u1a01\5\u032a\u0196\2\u1a00\u19f8\3\2\2\2\u1a00")
        buf.write(u"\u19fb\3\2\2\2\u1a00\u19fe\3\2\2\2\u1a00\u19ff\3\2\2")
        buf.write(u"\2\u1a01\u0325\3\2\2\2\u1a02\u1a05\5\u0324\u0193\2\u1a03")
        buf.write(u"\u1a05\3\2\2\2\u1a04\u1a02\3\2\2\2\u1a04\u1a03\3\2\2")
        buf.write(u"\2\u1a05\u0327\3\2\2\2\u1a06\u1a07\7\u00d7\2\2\u1a07")
        buf.write(u"\u1a14\5\u032c\u0197\2\u1a08\u1a09\7\u00d7\2\2\u1a09")
        buf.write(u"\u1a0a\5\u032c\u0197\2\u1a0a\u1a0b\7\b\2\2\u1a0b\u1a0c")
        buf.write(u"\5\u032e\u0198\2\u1a0c\u1a14\3\2\2\2\u1a0d\u1a0e\7\u0094")
        buf.write(u"\2\2\u1a0e\u1a0f\5\u0336\u019c\2\u1a0f\u1a10\5\u0330")
        buf.write(u"\u0199\2\u1a10\u1a11\5\u0334\u019b\2\u1a11\u1a12\7\u00fe")
        buf.write(u"\2\2\u1a12\u1a14\3\2\2\2\u1a13\u1a06\3\2\2\2\u1a13\u1a08")
        buf.write(u"\3\2\2\2\u1a13\u1a0d\3\2\2\2\u1a14\u0329\3\2\2\2\u1a15")
        buf.write(u"\u1a16\7\u00fb\2\2\u1a16\u1a1c\5\u032e\u0198\2\u1a17")
        buf.write(u"\u1a18\7\u00fb\2\2\u1a18\u1a19\5\u0332\u019a\2\u1a19")
        buf.write(u"\u1a1a\5\u0334\u019b\2\u1a1a\u1a1c\3\2\2\2\u1a1b\u1a15")
        buf.write(u"\3\2\2\2\u1a1b\u1a17\3\2\2\2\u1a1c\u032b\3\2\2\2\u1a1d")
        buf.write(u"\u1a20\5\u039a\u01ce\2\u1a1e\u1a20\7\35\2\2\u1a1f\u1a1d")
        buf.write(u"\3\2\2\2\u1a1f\u1a1e\3\2\2\2\u1a20\u032d\3\2\2\2\u1a21")
        buf.write(u"\u1a22\5\u039a\u01ce\2\u1a22\u032f\3\2\2\2\u1a23\u1a2a")
        buf.write(u"\5\u042e\u0218\2\u1a24\u1a25\7\r\2\2\u1a25\u1a26\5\u039a")
        buf.write(u"\u01ce\2\u1a26\u1a27\7\6\2\2\u1a27\u1a2a\3\2\2\2\u1a28")
        buf.write(u"\u1a2a\3\2\2\2\u1a29\u1a23\3\2\2\2\u1a29\u1a24\3\2\2")
        buf.write(u"\2\u1a29\u1a28\3\2\2\2\u1a2a\u0331\3\2\2\2\u1a2b\u1a2c")
        buf.write(u"\5\u039e\u01d0\2\u1a2c\u0333\3\2\2\2\u1a2d\u1a2e\t\f")
        buf.write(u"\2\2\u1a2e\u0335\3\2\2\2\u1a2f\u1a30\t\r\2\2\u1a30\u0337")
        buf.write(u"\3\2\2\2\u1a31\u1a32\7\u00a5\2\2\u1a32\u1a33\7\67\2\2")
        buf.write(u"\u1a33\u1a36\5\u03d4\u01eb\2\u1a34\u1a36\3\2\2\2\u1a35")
        buf.write(u"\u1a31\3\2\2\2\u1a35\u1a34\3\2\2\2\u1a36\u0339\3\2\2")
        buf.write(u"\2\u1a37\u1a38\7\u00a7\2\2\u1a38\u1a3b\5\u039a\u01ce")
        buf.write(u"\2\u1a39\u1a3b\3\2\2\2\u1a3a\u1a37\3\2\2\2\u1a3a\u1a39")
        buf.write(u"\3\2\2\2\u1a3b\u033b\3\2\2\2\u1a3c\u1a41\5\u0340\u01a1")
        buf.write(u"\2\u1a3d\u1a3e\7\u0098\2\2\u1a3e\u1a3f\7\u011f\2\2\u1a3f")
        buf.write(u"\u1a41\7\u00fe\2\2\u1a40\u1a3c\3\2\2\2\u1a40\u1a3d\3")
        buf.write(u"\2\2\2\u1a41\u033d\3\2\2\2\u1a42\u1a45\5\u033c\u019f")
        buf.write(u"\2\u1a43\u1a45\3\2\2\2\u1a44\u1a42\3\2\2\2\u1a44\u1a43")
        buf.write(u"\3\2\2\2\u1a45\u033f\3\2\2\2\u1a46\u1a47\b\u01a1\1\2")
        buf.write(u"\u1a47\u1a48\5\u0342\u01a2\2\u1a48\u1a4d\3\2\2\2\u1a49")
        buf.write(u"\u1a4a\f\3\2\2\u1a4a\u1a4c\5\u0342\u01a2\2\u1a4b\u1a49")
        buf.write(u"\3\2\2\2\u1a4c\u1a4f\3\2\2\2\u1a4d\u1a4b\3\2\2\2\u1a4d")
        buf.write(u"\u1a4e\3\2\2\2\u1a4e\u0341\3\2\2\2\u1a4f\u1a4d\3\2\2")
        buf.write(u"\2\u1a50\u1a51\7\u0098\2\2\u1a51\u1a52\7\u017b\2\2\u1a52")
        buf.write(u"\u1a53\5\u0344\u01a3\2\u1a53\u1a54\5\u02e8\u0175\2\u1a54")
        buf.write(u"\u1a5b\3\2\2\2\u1a55\u1a56\7\u0098\2\2\u1a56\u1a57\7")
        buf.write(u"\u0148\2\2\u1a57\u1a58\5\u0344\u01a3\2\u1a58\u1a59\5")
        buf.write(u"\u02e8\u0175\2\u1a59\u1a5b\3\2\2\2\u1a5a\u1a50\3\2\2")
        buf.write(u"\2\u1a5a\u1a55\3\2\2\2\u1a5b\u0343\3\2\2\2\u1a5c\u1a5d")
        buf.write(u"\7\u00f9\2\2\u1a5d\u1a60\5\u0412\u020a\2\u1a5e\u1a60")
        buf.write(u"\3\2\2\2\u1a5f\u1a5c\3\2\2\2\u1a5f\u1a5e\3\2\2\2\u1a60")
        buf.write(u"\u0345\3\2\2\2\u1a61\u1a62\b\u01a4\1\2\u1a62\u1a63\7")
        buf.write(u"\u0183\2\2\u1a63\u1a64\5\u040c\u0207\2\u1a64\u1a6a\3")
        buf.write(u"\2\2\2\u1a65\u1a66\f\3\2\2\u1a66\u1a67\7\b\2\2\u1a67")
        buf.write(u"\u1a69\5\u040c\u0207\2\u1a68\u1a65\3\2\2\2\u1a69\u1a6c")
        buf.write(u"\3\2\2\2\u1a6a\u1a68\3\2\2\2\u1a6a\u1a6b\3\2\2\2\u1a6b")
        buf.write(u"\u0347\3\2\2\2\u1a6c\u1a6a\3\2\2\2\u1a6d\u1a6e\7\u009d")
        buf.write(u"\2\2\u1a6e\u1a71\5\u034a\u01a6\2\u1a6f\u1a71\3\2\2\2")
        buf.write(u"\u1a70\u1a6d\3\2\2\2\u1a70\u1a6f\3\2\2\2\u1a71\u0349")
        buf.write(u"\3\2\2\2\u1a72\u1a73\b\u01a6\1\2\u1a73\u1a74\5\u034c")
        buf.write(u"\u01a7\2\u1a74\u1a7a\3\2\2\2\u1a75\u1a76\f\3\2\2\u1a76")
        buf.write(u"\u1a77\7\b\2\2\u1a77\u1a79\5\u034c\u01a7\2\u1a78\u1a75")
        buf.write(u"\3\2\2\2\u1a79\u1a7c\3\2\2\2\u1a7a\u1a78\3\2\2\2\u1a7a")
        buf.write(u"\u1a7b\3\2\2\2\u1a7b\u034b\3\2\2\2\u1a7c\u1a7a\3\2\2")
        buf.write(u"\2\u1a7d\u1a80\5\u0350\u01a9\2\u1a7e\u1a80\5\u034e\u01a8")
        buf.write(u"\2\u1a7f\u1a7d\3\2\2\2\u1a7f\u1a7e\3\2\2\2\u1a80\u034d")
        buf.write(u"\3\2\2\2\u1a81\u1aa1\5\u0358\u01ad\2\u1a82\u1a83\5\u0358")
        buf.write(u"\u01ad\2\u1a83\u1a84\5\u0352\u01aa\2\u1a84\u1aa1\3\2")
        buf.write(u"\2\2\u1a85\u1aa1\5\u035e\u01b0\2\u1a86\u1a87\5\u035e")
        buf.write(u"\u01b0\2\u1a87\u1a88\5\u0352\u01aa\2\u1a88\u1aa1\3\2")
        buf.write(u"\2\2\u1a89\u1a8a\5\u035e\u01b0\2\u1a8a\u1a8b\7&\2\2\u1a8b")
        buf.write(u"\u1a8c\7\r\2\2\u1a8c\u1a8d\5\u0366\u01b4\2\u1a8d\u1a8e")
        buf.write(u"\7\6\2\2\u1a8e\u1aa1\3\2\2\2\u1a8f\u1a90\5\u035e\u01b0")
        buf.write(u"\2\u1a90\u1a91\7&\2\2\u1a91\u1a92\5\u0430\u0219\2\u1a92")
        buf.write(u"\u1a93\7\r\2\2\u1a93\u1a94\5\u0366\u01b4\2\u1a94\u1a95")
        buf.write(u"\7\6\2\2\u1a95\u1aa1\3\2\2\2\u1a96\u1a97\5\u035e\u01b0")
        buf.write(u"\2\u1a97\u1a98\5\u0430\u0219\2\u1a98\u1a99\7\r\2\2\u1a99")
        buf.write(u"\u1a9a\5\u0366\u01b4\2\u1a9a\u1a9b\7\6\2\2\u1a9b\u1aa1")
        buf.write(u"\3\2\2\2\u1a9c\u1aa1\5\u0302\u0182\2\u1a9d\u1a9e\5\u0302")
        buf.write(u"\u0182\2\u1a9e\u1a9f\5\u0352\u01aa\2\u1a9f\u1aa1\3\2")
        buf.write(u"\2\2\u1aa0\u1a81\3\2\2\2\u1aa0\u1a82\3\2\2\2\u1aa0\u1a85")
        buf.write(u"\3\2\2\2\u1aa0\u1a86\3\2\2\2\u1aa0\u1a89\3\2\2\2\u1aa0")
        buf.write(u"\u1a8f\3\2\2\2\u1aa0\u1a96\3\2\2\2\u1aa0\u1a9c\3\2\2")
        buf.write(u"\2\u1aa0\u1a9d\3\2\2\2\u1aa1\u034f\3\2\2\2\u1aa2\u1aa3")
        buf.write(u"\7\r\2\2\u1aa3\u1aa4\5\u0350\u01a9\2\u1aa4\u1aa6\7\6")
        buf.write(u"\2\2\u1aa5\u1aa7\5\u0352\u01aa\2\u1aa6\u1aa5\3\2\2\2")
        buf.write(u"\u1aa6\u1aa7\3\2\2\2\u1aa7\u1ac4\3\2\2\2\u1aa8\u1aa9")
        buf.write(u"\5\u034e\u01a8\2\u1aa9\u1aaa\7[\2\2\u1aaa\u1aab\7\u00c9")
        buf.write(u"\2\2\u1aab\u1aac\5\u034e\u01a8\2\u1aac\u1ac4\3\2\2\2")
        buf.write(u"\u1aad\u1aae\5\u034e\u01a8\2\u1aae\u1aaf\5\u0354\u01ab")
        buf.write(u"\2\u1aaf\u1ab0\7\u00c9\2\2\u1ab0\u1ab1\5\u034e\u01a8")
        buf.write(u"\2\u1ab1\u1ab2\5\u0356\u01ac\2\u1ab2\u1ac4\3\2\2\2\u1ab3")
        buf.write(u"\u1ab4\5\u034e\u01a8\2\u1ab4\u1ab5\7\u00c9\2\2\u1ab5")
        buf.write(u"\u1ab6\5\u034e\u01a8\2\u1ab6\u1ab7\5\u0356\u01ac\2\u1ab7")
        buf.write(u"\u1ac4\3\2\2\2\u1ab8\u1ab9\5\u034e\u01a8\2\u1ab9\u1aba")
        buf.write(u"\7\u00ea\2\2\u1aba\u1abb\5\u0354\u01ab\2\u1abb\u1abc")
        buf.write(u"\7\u00c9\2\2\u1abc\u1abd\5\u034e\u01a8\2\u1abd\u1ac4")
        buf.write(u"\3\2\2\2\u1abe\u1abf\5\u034e\u01a8\2\u1abf\u1ac0\7\u00ea")
        buf.write(u"\2\2\u1ac0\u1ac1\7\u00c9\2\2\u1ac1\u1ac2\5\u034e\u01a8")
        buf.write(u"\2\u1ac2\u1ac4\3\2\2\2\u1ac3\u1aa2\3\2\2\2\u1ac3\u1aa8")
        buf.write(u"\3\2\2\2\u1ac3\u1aad\3\2\2\2\u1ac3\u1ab3\3\2\2\2\u1ac3")
        buf.write(u"\u1ab8\3\2\2\2\u1ac3\u1abe\3\2\2\2\u1ac4\u0351\3\2\2")
        buf.write(u"\2\u1ac5\u1ac6\7&\2\2\u1ac6\u1ac7\5\u0430\u0219\2\u1ac7")
        buf.write(u"\u1ac8\7\r\2\2\u1ac8\u1ac9\5\u0416\u020c\2\u1ac9\u1aca")
        buf.write(u"\7\6\2\2\u1aca\u1ad4\3\2\2\2\u1acb\u1acc\7&\2\2\u1acc")
        buf.write(u"\u1ad4\5\u0430\u0219\2\u1acd\u1ace\5\u0430\u0219\2\u1ace")
        buf.write(u"\u1acf\7\r\2\2\u1acf\u1ad0\5\u0416\u020c\2\u1ad0\u1ad1")
        buf.write(u"\7\6\2\2\u1ad1\u1ad4\3\2\2\2\u1ad2\u1ad4\5\u0430\u0219")
        buf.write(u"\2\u1ad3\u1ac5\3\2\2\2\u1ad3\u1acb\3\2\2\2\u1ad3\u1acd")
        buf.write(u"\3\2\2\2\u1ad3\u1ad2\3\2\2\2\u1ad4\u0353\3\2\2\2\u1ad5")
        buf.write(u"\u1ad7\7\u009e\2\2\u1ad6\u1ad8\7\u0105\2\2\u1ad7\u1ad6")
        buf.write(u"\3\2\2\2\u1ad7\u1ad8\3\2\2\2\u1ad8\u1ae3\3\2\2\2\u1ad9")
        buf.write(u"\u1adb\7\u00d4\2\2\u1ada\u1adc\7\u0105\2\2\u1adb\u1ada")
        buf.write(u"\3\2\2\2\u1adb\u1adc\3\2\2\2\u1adc\u1ae3\3\2\2\2\u1add")
        buf.write(u"\u1adf\7\u0133\2\2\u1ade\u1ae0\7\u0105\2\2\u1adf\u1ade")
        buf.write(u"\3\2\2\2\u1adf\u1ae0\3\2\2\2\u1ae0\u1ae3\3\2\2\2\u1ae1")
        buf.write(u"\u1ae3\7\u00ba\2\2\u1ae2\u1ad5\3\2\2\2\u1ae2\u1ad9\3")
        buf.write(u"\2\2\2\u1ae2\u1add\3\2\2\2\u1ae2\u1ae1\3\2\2\2\u1ae3")
        buf.write(u"\u0355\3\2\2\2\u1ae4\u1ae5\7\u017d\2\2\u1ae5\u1ae6\7")
        buf.write(u"\r\2\2\u1ae6\u1ae7\5\u0416\u020c\2\u1ae7\u1ae8\7\6\2")
        buf.write(u"\2\u1ae8\u1aec\3\2\2\2\u1ae9\u1aea\7\u00fd\2\2\u1aea")
        buf.write(u"\u1aec\5\u039a\u01ce\2\u1aeb\u1ae4\3\2\2\2\u1aeb\u1ae9")
        buf.write(u"\3\2\2\2\u1aec\u0357\3\2\2\2\u1aed\u1af9\5\u0414\u020b")
        buf.write(u"\2\u1aee\u1aef\5\u0414\u020b\2\u1aef\u1af0\7\f\2\2\u1af0")
        buf.write(u"\u1af9\3\2\2\2\u1af1\u1af2\7\u00fe\2\2\u1af2\u1af9\5")
        buf.write(u"\u0414\u020b\2\u1af3\u1af4\7\u00fe\2\2\u1af4\u1af5\7")
        buf.write(u"\r\2\2\u1af5\u1af6\5\u0414\u020b\2\u1af6\u1af7\7\6\2")
        buf.write(u"\2\u1af7\u1af9\3\2\2\2\u1af8\u1aed\3\2\2\2\u1af8\u1aee")
        buf.write(u"\3\2\2\2\u1af8\u1af1\3\2\2\2\u1af8\u1af3\3\2\2\2\u1af9")
        buf.write(u"\u0359\3\2\2\2\u1afa\u1afb\b\u01ae\1\2\u1afb\u1afc\5")
        buf.write(u"\u0358\u01ad\2\u1afc\u1b02\3\2\2\2\u1afd\u1afe\f\3\2")
        buf.write(u"\2\u1afe\u1aff\7\b\2\2\u1aff\u1b01\5\u0358\u01ad\2\u1b00")
        buf.write(u"\u1afd\3\2\2\2\u1b01\u1b04\3\2\2\2\u1b02\u1b00\3\2\2")
        buf.write(u"\2\u1b02\u1b03\3\2\2\2\u1b03\u035b\3\2\2\2\u1b04\u1b02")
        buf.write(u"\3\2\2\2\u1b05\u1b0e\5\u0358\u01ad\2\u1b06\u1b07\5\u0358")
        buf.write(u"\u01ad\2\u1b07\u1b08\5\u0430\u0219\2\u1b08\u1b0e\3\2")
        buf.write(u"\2\2\u1b09\u1b0a\5\u0358\u01ad\2\u1b0a\u1b0b\7&\2\2\u1b0b")
        buf.write(u"\u1b0c\5\u0430\u0219\2\u1b0c\u1b0e\3\2\2\2\u1b0d\u1b05")
        buf.write(u"\3\2\2\2\u1b0d\u1b06\3\2\2\2\u1b0d\u1b09\3\2\2\2\u1b0e")
        buf.write(u"\u035d\3\2\2\2\u1b0f\u1b10\5\u03a0\u01d1\2\u1b10\u035f")
        buf.write(u"\3\2\2\2\u1b11\u1b12\7\u018c\2\2\u1b12\u1b15\5\u039a")
        buf.write(u"\u01ce\2\u1b13\u1b15\3\2\2\2\u1b14\u1b11\3\2\2\2\u1b14")
        buf.write(u"\u1b13\3\2\2\2\u1b15\u0361\3\2\2\2\u1b16\u1b17\7\u018c")
        buf.write(u"\2\2\u1b17\u1b1e\5\u039a\u01ce\2\u1b18\u1b19\7\u018c")
        buf.write(u"\2\2\u1b19\u1b1a\7]\2\2\u1b1a\u1b1b\7\u00f9\2\2\u1b1b")
        buf.write(u"\u1b1e\5\u02fa\u017e\2\u1b1c\u1b1e\3\2\2\2\u1b1d\u1b16")
        buf.write(u"\3\2\2\2\u1b1d\u1b18\3\2\2\2\u1b1d\u1b1c\3\2\2\2\u1b1e")
        buf.write(u"\u0363\3\2\2\2\u1b1f\u1b22\5\u0366\u01b4\2\u1b20\u1b22")
        buf.write(u"\3\2\2\2\u1b21\u1b1f\3\2\2\2\u1b21\u1b20\3\2\2\2\u1b22")
        buf.write(u"\u0365\3\2\2\2\u1b23\u1b24\b\u01b4\1\2\u1b24\u1b25\5")
        buf.write(u"\u0368\u01b5\2\u1b25\u1b2b\3\2\2\2\u1b26\u1b27\f\3\2")
        buf.write(u"\2\u1b27\u1b28\7\b\2\2\u1b28\u1b2a\5\u0368\u01b5\2\u1b29")
        buf.write(u"\u1b26\3\2\2\2\u1b2a\u1b2d\3\2\2\2\u1b2b\u1b29\3\2\2")
        buf.write(u"\2\u1b2b\u1b2c\3\2\2\2\u1b2c\u0367\3\2\2\2\u1b2d\u1b2b")
        buf.write(u"\3\2\2\2\u1b2e\u1b2f\5\u0430\u0219\2\u1b2f\u1b30\5\u036a")
        buf.write(u"\u01b6\2\u1b30\u1b31\5d\63\2\u1b31\u0369\3\2\2\2\u1b32")
        buf.write(u"\u1b33\5\u036e\u01b8\2\u1b33\u1b34\5\u036c\u01b7\2\u1b34")
        buf.write(u"\u1b4e\3\2\2\2\u1b35\u1b36\7\u0147\2\2\u1b36\u1b37\5")
        buf.write(u"\u036e\u01b8\2\u1b37\u1b38\5\u036c\u01b7\2\u1b38\u1b4e")
        buf.write(u"\3\2\2\2\u1b39\u1b3a\5\u036e\u01b8\2\u1b3a\u1b3b\7%\2")
        buf.write(u"\2\u1b3b\u1b3c\7\n\2\2\u1b3c\u1b3d\5\u0428\u0215\2\u1b3d")
        buf.write(u"\u1b3e\7\3\2\2\u1b3e\u1b4e\3\2\2\2\u1b3f\u1b40\7\u0147")
        buf.write(u"\2\2\u1b40\u1b41\5\u036e\u01b8\2\u1b41\u1b42\7%\2\2\u1b42")
        buf.write(u"\u1b43\7\n\2\2\u1b43\u1b44\5\u0428\u0215\2\u1b44\u1b45")
        buf.write(u"\7\3\2\2\u1b45\u1b4e\3\2\2\2\u1b46\u1b47\5\u036e\u01b8")
        buf.write(u"\2\u1b47\u1b48\7%\2\2\u1b48\u1b4e\3\2\2\2\u1b49\u1b4a")
        buf.write(u"\7\u0147\2\2\u1b4a\u1b4b\5\u036e\u01b8\2\u1b4b\u1b4c")
        buf.write(u"\7%\2\2\u1b4c\u1b4e\3\2\2\2\u1b4d\u1b32\3\2\2\2\u1b4d")
        buf.write(u"\u1b35\3\2\2\2\u1b4d\u1b39\3\2\2\2\u1b4d\u1b3f\3\2\2")
        buf.write(u"\2\u1b4d\u1b46\3\2\2\2\u1b4d\u1b49\3\2\2\2\u1b4e\u036b")
        buf.write(u"\3\2\2\2\u1b4f\u1b5a\b\u01b7\1\2\u1b50\u1b51\f\5\2\2")
        buf.write(u"\u1b51\u1b52\7\n\2\2\u1b52\u1b59\7\3\2\2\u1b53\u1b54")
        buf.write(u"\f\4\2\2\u1b54\u1b55\7\n\2\2\u1b55\u1b56\5\u0428\u0215")
        buf.write(u"\2\u1b56\u1b57\7\3\2\2\u1b57\u1b59\3\2\2\2\u1b58\u1b50")
        buf.write(u"\3\2\2\2\u1b58\u1b53\3\2\2\2\u1b59\u1b5c\3\2\2\2\u1b5a")
        buf.write(u"\u1b58\3\2\2\2\u1b5a\u1b5b\3\2\2\2\u1b5b\u036d\3\2\2")
        buf.write(u"\2\u1b5c\u1b5a\3\2\2\2\u1b5d\u1b6c\5\u0372\u01ba\2\u1b5e")
        buf.write(u"\u1b6c\5\u0376\u01bc\2\u1b5f\u1b6c\5\u037a\u01be\2\u1b60")
        buf.write(u"\u1b6c\5\u0382\u01c2\2\u1b61\u1b6c\5\u0390\u01c9\2\u1b62")
        buf.write(u"\u1b63\5\u0392\u01ca\2\u1b63\u1b64\5\u0396\u01cc\2\u1b64")
        buf.write(u"\u1b6c\3\2\2\2\u1b65\u1b66\5\u0392\u01ca\2\u1b66\u1b67")
        buf.write(u"\7\r\2\2\u1b67\u1b68\5\u0428\u0215\2\u1b68\u1b69\7\6")
        buf.write(u"\2\2\u1b69\u1b6a\5\u0396\u01cc\2\u1b6a\u1b6c\3\2\2\2")
        buf.write(u"\u1b6b\u1b5d\3\2\2\2\u1b6b\u1b5e\3\2\2\2\u1b6b\u1b5f")
        buf.write(u"\3\2\2\2\u1b6b\u1b60\3\2\2\2\u1b6b\u1b61\3\2\2\2\u1b6b")
        buf.write(u"\u1b62\3\2\2\2\u1b6b\u1b65\3\2\2\2\u1b6c\u036f\3\2\2")
        buf.write(u"\2\u1b6d\u1b72\5\u0376\u01bc\2\u1b6e\u1b72\5\u037c\u01bf")
        buf.write(u"\2\u1b6f\u1b72\5\u0384\u01c3\2\u1b70\u1b72\5\u0390\u01c9")
        buf.write(u"\2\u1b71\u1b6d\3\2\2\2\u1b71\u1b6e\3\2\2\2\u1b71\u1b6f")
        buf.write(u"\3\2\2\2\u1b71\u1b70\3\2\2\2\u1b72\u0371\3\2\2\2\u1b73")
        buf.write(u"\u1b74\5\u0432\u021a\2\u1b74\u1b75\5\u0374\u01bb\2\u1b75")
        buf.write(u"\u1b7b\3\2\2\2\u1b76\u1b77\5\u0432\u021a\2\u1b77\u1b78")
        buf.write(u"\5\u01b2\u00da\2\u1b78\u1b79\5\u0374\u01bb\2\u1b79\u1b7b")
        buf.write(u"\3\2\2\2\u1b7a\u1b73\3\2\2\2\u1b7a\u1b76\3\2\2\2\u1b7b")
        buf.write(u"\u0373\3\2\2\2\u1b7c\u1b7d\7\r\2\2\u1b7d\u1b7e\5\u03d4")
        buf.write(u"\u01eb\2\u1b7e\u1b7f\7\6\2\2\u1b7f\u1b82\3\2\2\2\u1b80")
        buf.write(u"\u1b82\3\2\2\2\u1b81\u1b7c\3\2\2\2\u1b81\u1b80\3\2\2")
        buf.write(u"\2\u1b82\u0375\3\2\2\2\u1b83\u1b94\7\u00c0\2\2\u1b84")
        buf.write(u"\u1b94\7\u00c1\2\2\u1b85\u1b94\7\u014c\2\2\u1b86\u1b94")
        buf.write(u"\7\62\2\2\u1b87\u1b94\7\u0120\2\2\u1b88\u1b89\7\u0096")
        buf.write(u"\2\2\u1b89\u1b94\5\u0378\u01bd\2\u1b8a\u1b8b\7~\2\2\u1b8b")
        buf.write(u"\u1b94\7\u0114\2\2\u1b8c\u1b8d\7l\2\2\u1b8d\u1b94\5\u0374")
        buf.write(u"\u01bb\2\u1b8e\u1b8f\7k\2\2\u1b8f\u1b94\5\u0374\u01bb")
        buf.write(u"\2\u1b90\u1b91\7\u00f7\2\2\u1b91\u1b94\5\u0374\u01bb")
        buf.write(u"\2\u1b92\u1b94\7\65\2\2\u1b93\u1b83\3\2\2\2\u1b93\u1b84")
        buf.write(u"\3\2\2\2\u1b93\u1b85\3\2\2\2\u1b93\u1b86\3\2\2\2\u1b93")
        buf.write(u"\u1b87\3\2\2\2\u1b93\u1b88\3\2\2\2\u1b93\u1b8a\3\2\2")
        buf.write(u"\2\u1b93\u1b8c\3\2\2\2\u1b93\u1b8e\3\2\2\2\u1b93\u1b90")
        buf.write(u"\3\2\2\2\u1b93\u1b92\3\2\2\2\u1b94\u0377\3\2\2\2\u1b95")
        buf.write(u"\u1b96\7\r\2\2\u1b96\u1b97\5\u0428\u0215\2\u1b97\u1b98")
        buf.write(u"\7\6\2\2\u1b98\u1b9b\3\2\2\2\u1b99\u1b9b\3\2\2\2\u1b9a")
        buf.write(u"\u1b95\3\2\2\2\u1b9a\u1b99\3\2\2\2\u1b9b\u0379\3\2\2")
        buf.write(u"\2\u1b9c\u1b9f\5\u037e\u01c0\2\u1b9d\u1b9f\5\u0380\u01c1")
        buf.write(u"\2\u1b9e\u1b9c\3\2\2\2\u1b9e\u1b9d\3\2\2\2\u1b9f\u037b")
        buf.write(u"\3\2\2\2\u1ba0\u1ba3\5\u037e\u01c0\2\u1ba1\u1ba3\5\u0380")
        buf.write(u"\u01c1\2\u1ba2\u1ba0\3\2\2\2\u1ba2\u1ba1\3\2\2\2\u1ba3")
        buf.write(u"\u037d\3\2\2\2\u1ba4\u1ba5\7\64\2\2\u1ba5\u1ba6\5\u038c")
        buf.write(u"\u01c7\2\u1ba6\u1ba7\7\r\2\2\u1ba7\u1ba8\5\u03d4\u01eb")
        buf.write(u"\2\u1ba8\u1ba9\7\6\2\2\u1ba9\u037f\3\2\2\2\u1baa\u1bab")
        buf.write(u"\7\64\2\2\u1bab\u1bac\5\u038c\u01c7\2\u1bac\u0381\3\2")
        buf.write(u"\2\2\u1bad\u1bb0\5\u0386\u01c4\2\u1bae\u1bb0\5\u0388")
        buf.write(u"\u01c5\2\u1baf\u1bad\3\2\2\2\u1baf\u1bae\3\2\2\2\u1bb0")
        buf.write(u"\u0383\3\2\2\2\u1bb1\u1bb4\5\u0386\u01c4\2\u1bb2\u1bb4")
        buf.write(u"\5\u0388\u01c5\2\u1bb3\u1bb1\3\2\2\2\u1bb3\u1bb2\3\2")
        buf.write(u"\2\2\u1bb4\u0385\3\2\2\2\u1bb5\u1bb6\5\u038a\u01c6\2")
        buf.write(u"\u1bb6\u1bb7\7\r\2\2\u1bb7\u1bb8\5\u0428\u0215\2\u1bb8")
        buf.write(u"\u1bb9\7\6\2\2\u1bb9\u1bba\5\u038e\u01c8\2\u1bba\u0387")
        buf.write(u"\3\2\2\2\u1bbb\u1bbc\5\u038a\u01c6\2\u1bbc\u1bbd\5\u038e")
        buf.write(u"\u01c8\2\u1bbd\u0389\3\2\2\2\u1bbe\u1bbf\7A\2\2\u1bbf")
        buf.write(u"\u1bcc\5\u038c\u01c7\2\u1bc0\u1bc1\7@\2\2\u1bc1\u1bcc")
        buf.write(u"\5\u038c\u01c7\2\u1bc2\u1bcc\7\u0184\2\2\u1bc3\u1bc4")
        buf.write(u"\7\u00e9\2\2\u1bc4\u1bc5\7A\2\2\u1bc5\u1bcc\5\u038c\u01c7")
        buf.write(u"\2\u1bc6\u1bc7\7\u00e9\2\2\u1bc7\u1bc8\7@\2\2\u1bc8\u1bcc")
        buf.write(u"\5\u038c\u01c7\2\u1bc9\u1bca\7\u00eb\2\2\u1bca\u1bcc")
        buf.write(u"\5\u038c\u01c7\2\u1bcb\u1bbe\3\2\2\2\u1bcb\u1bc0\3\2")
        buf.write(u"\2\2\u1bcb\u1bc2\3\2\2\2\u1bcb\u1bc3\3\2\2\2\u1bcb\u1bc6")
        buf.write(u"\3\2\2\2\u1bcb\u1bc9\3\2\2\2\u1bcc\u038b\3\2\2\2\u1bcd")
        buf.write(u"\u1bd0\7\u0186\2\2\u1bce\u1bd0\3\2\2\2\u1bcf\u1bcd\3")
        buf.write(u"\2\2\2\u1bcf\u1bce\3\2\2\2\u1bd0\u038d\3\2\2\2\u1bd1")
        buf.write(u"\u1bd2\7A\2\2\u1bd2\u1bd3\7\u0146\2\2\u1bd3\u1bd6\5\u0430")
        buf.write(u"\u0219\2\u1bd4\u1bd6\3\2\2\2\u1bd5\u1bd1\3\2\2\2\u1bd5")
        buf.write(u"\u1bd4\3\2\2\2\u1bd6\u038f\3\2\2\2\u1bd7\u1bd8\7\u0166")
        buf.write(u"\2\2\u1bd8\u1bd9\7\r\2\2\u1bd9\u1bda\5\u0428\u0215\2")
        buf.write(u"\u1bda\u1bdb\7\6\2\2\u1bdb\u1bdc\5\u0394\u01cb\2\u1bdc")
        buf.write(u"\u1be8\3\2\2\2\u1bdd\u1bde\7\u0166\2\2\u1bde\u1be8\5")
        buf.write(u"\u0394\u01cb\2\u1bdf\u1be0\7\u0165\2\2\u1be0\u1be1\7")
        buf.write(u"\r\2\2\u1be1\u1be2\5\u0428\u0215\2\u1be2\u1be3\7\6\2")
        buf.write(u"\2\u1be3\u1be4\5\u0394\u01cb\2\u1be4\u1be8\3\2\2\2\u1be5")
        buf.write(u"\u1be6\7\u0165\2\2\u1be6\u1be8\5\u0394\u01cb\2\u1be7")
        buf.write(u"\u1bd7\3\2\2\2\u1be7\u1bdd\3\2\2\2\u1be7\u1bdf\3\2\2")
        buf.write(u"\2\u1be7\u1be5\3\2\2\2\u1be8\u0391\3\2\2\2\u1be9\u1bea")
        buf.write(u"\7\u00c3\2\2\u1bea\u0393\3\2\2\2\u1beb\u1bec\7\u01a4")
        buf.write(u"\2\2\u1bec\u1bf2\7\u01a0\2\2\u1bed\u1bee\7\u0190\2\2")
        buf.write(u"\u1bee\u1bef\7\u0165\2\2\u1bef\u1bf2\7\u01a0\2\2\u1bf0")
        buf.write(u"\u1bf2\3\2\2\2\u1bf1\u1beb\3\2\2\2\u1bf1\u1bed\3\2\2")
        buf.write(u"\2\u1bf1\u1bf0\3\2\2\2\u1bf2\u0395\3\2\2\2\u1bf3\u1c10")
        buf.write(u"\7\u019e\2\2\u1bf4\u1c10\7\u00e5\2\2\u1bf5\u1c10\7i\2")
        buf.write(u"\2\u1bf6\u1c10\7\u00aa\2\2\u1bf7\u1c10\7\u00e2\2\2\u1bf8")
        buf.write(u"\u1c10\5\u0398\u01cd\2\u1bf9\u1bfa\7\u019e\2\2\u1bfa")
        buf.write(u"\u1bfb\7\u0167\2\2\u1bfb\u1c10\7\u00e5\2\2\u1bfc\u1bfd")
        buf.write(u"\7i\2\2\u1bfd\u1bfe\7\u0167\2\2\u1bfe\u1c10\7\u00aa\2")
        buf.write(u"\2\u1bff\u1c00\7i\2\2\u1c00\u1c01\7\u0167\2\2\u1c01\u1c10")
        buf.write(u"\7\u00e2\2\2\u1c02\u1c03\7i\2\2\u1c03\u1c04\7\u0167\2")
        buf.write(u"\2\u1c04\u1c10\5\u0398\u01cd\2\u1c05\u1c06\7\u00aa\2")
        buf.write(u"\2\u1c06\u1c07\7\u0167\2\2\u1c07\u1c10\7\u00e2\2\2\u1c08")
        buf.write(u"\u1c09\7\u00aa\2\2\u1c09\u1c0a\7\u0167\2\2\u1c0a\u1c10")
        buf.write(u"\5\u0398\u01cd\2\u1c0b\u1c0c\7\u00e2\2\2\u1c0c\u1c0d")
        buf.write(u"\7\u0167\2\2\u1c0d\u1c10\5\u0398\u01cd\2\u1c0e\u1c10")
        buf.write(u"\3\2\2\2\u1c0f\u1bf3\3\2\2\2\u1c0f\u1bf4\3\2\2\2\u1c0f")
        buf.write(u"\u1bf5\3\2\2\2\u1c0f\u1bf6\3\2\2\2\u1c0f\u1bf7\3\2\2")
        buf.write(u"\2\u1c0f\u1bf8\3\2\2\2\u1c0f\u1bf9\3\2\2\2\u1c0f\u1bfc")
        buf.write(u"\3\2\2\2\u1c0f\u1bff\3\2\2\2\u1c0f\u1c02\3\2\2\2\u1c0f")
        buf.write(u"\u1c05\3\2\2\2\u1c0f\u1c08\3\2\2\2\u1c0f\u1c0b\3\2\2")
        buf.write(u"\2\u1c0f\u1c0e\3\2\2\2\u1c10\u0397\3\2\2\2\u1c11\u1c18")
        buf.write(u"\7\u013d\2\2\u1c12\u1c13\7\u013d\2\2\u1c13\u1c14\7\r")
        buf.write(u"\2\2\u1c14\u1c15\5\u0428\u0215\2\u1c15\u1c16\7\6\2\2")
        buf.write(u"\u1c16\u1c18\3\2\2\2\u1c17\u1c11\3\2\2\2\u1c17\u1c12")
        buf.write(u"\3\2\2\2\u1c18\u0399\3\2\2\2\u1c19\u1c1a\b\u01ce\1\2")
        buf.write(u"\u1c1a\u1c1b\7\t\2\2\u1c1b\u1c2b\5\u039a\u01ce9\u1c1c")
        buf.write(u"\u1c1d\7\13\2\2\u1c1d\u1c2b\5\u039a\u01ce8\u1c1e\u1c1f")
        buf.write(u"\5\u03ce\u01e8\2\u1c1f\u1c20\5\u039a\u01ce-\u1c20\u1c2b")
        buf.write(u"\3\2\2\2\u1c21\u1c22\7\u00ef\2\2\u1c22\u1c2b\5\u039a")
        buf.write(u"\u01ce)\u1c23\u1c2b\5\u039e\u01d0\2\u1c24\u1c25\5\u03c6")
        buf.write(u"\u01e4\2\u1c25\u1c26\7\u0107\2\2\u1c26\u1c27\5\u03c6")
        buf.write(u"\u01e4\2\u1c27\u1c2b\3\2\2\2\u1c28\u1c29\7\u0176\2\2")
        buf.write(u"\u1c29\u1c2b\5\u0302\u0182\2\u1c2a\u1c19\3\2\2\2\u1c2a")
        buf.write(u"\u1c1c\3\2\2\2\u1c2a\u1c1e\3\2\2\2\u1c2a\u1c21\3\2\2")
        buf.write(u"\2\u1c2a\u1c23\3\2\2\2\u1c2a\u1c24\3\2\2\2\u1c2a\u1c28")
        buf.write(u"\3\2\2\2\u1c2b\u1d12\3\2\2\2\u1c2c\u1c2d\f:\2\2\u1c2d")
        buf.write(u"\u1c2e\7+\2\2\u1c2e\u1c2f\7\u0165\2\2\u1c2f\u1c30\7\u01a0")
        buf.write(u"\2\2\u1c30\u1d11\5\u039a\u01ce;\u1c31\u1c32\f\67\2\2")
        buf.write(u"\u1c32\u1c33\7\t\2\2\u1c33\u1d11\5\u039a\u01ce8\u1c34")
        buf.write(u"\u1c35\f\66\2\2\u1c35\u1c36\7\13\2\2\u1c36\u1d11\5\u039a")
        buf.write(u"\u01ce\67\u1c37\u1c38\f\65\2\2\u1c38\u1c39\7\f\2\2\u1c39")
        buf.write(u"\u1d11\5\u039a\u01ce\66\u1c3a\u1c3b\f\64\2\2\u1c3b\u1c3c")
        buf.write(u"\7\23\2\2\u1c3c\u1d11\5\u039a\u01ce\65\u1c3d\u1c3e\f")
        buf.write(u"\63\2\2\u1c3e\u1c3f\7\4\2\2\u1c3f\u1d11\5\u039a\u01ce")
        buf.write(u"\64\u1c40\u1c41\f\62\2\2\u1c41\u1c42\7\5\2\2\u1c42\u1d11")
        buf.write(u"\5\u039a\u01ce\63\u1c43\u1c44\f\61\2\2\u1c44\u1c45\7")
        buf.write(u"\17\2\2\u1c45\u1d11\5\u039a\u01ce\62\u1c46\u1c47\f\60")
        buf.write(u"\2\2\u1c47\u1c48\7\22\2\2\u1c48\u1d11\5\u039a\u01ce\61")
        buf.write(u"\u1c49\u1c4a\f/\2\2\u1c4a\u1c4b\7\20\2\2\u1c4b\u1d11")
        buf.write(u"\5\u039a\u01ce\60\u1c4c\u1c4d\f.\2\2\u1c4d\u1c4e\5\u03ce")
        buf.write(u"\u01e8\2\u1c4e\u1c4f\5\u039a\u01ce/\u1c4f\u1d11\3\2\2")
        buf.write(u"\2\u1c50\u1c51\f+\2\2\u1c51\u1c52\7#\2\2\u1c52\u1d11")
        buf.write(u"\5\u039a\u01ce,\u1c53\u1c54\f*\2\2\u1c54\u1c55\7\u0102")
        buf.write(u"\2\2\u1c55\u1d11\5\u039a\u01ce+\u1c56\u1c57\f(\2\2\u1c57")
        buf.write(u"\u1c58\7\u00d6\2\2\u1c58\u1d11\5\u039a\u01ce)\u1c59\u1c5a")
        buf.write(u"\f\'\2\2\u1c5a\u1c5b\7\u00d6\2\2\u1c5b\u1c5c\5\u039a")
        buf.write(u"\u01ce\2\u1c5c\u1c5d\7\u0087\2\2\u1c5d\u1c5e\5\u039a")
        buf.write(u"\u01ce(\u1c5e\u1d11\3\2\2\2\u1c5f\u1c60\f&\2\2\u1c60")
        buf.write(u"\u1c61\7\u00ef\2\2\u1c61\u1c62\7\u00d6\2\2\u1c62\u1d11")
        buf.write(u"\5\u039a\u01ce\'\u1c63\u1c64\f%\2\2\u1c64\u1c65\7\u00ef")
        buf.write(u"\2\2\u1c65\u1c66\7\u00d6\2\2\u1c66\u1c67\5\u039a\u01ce")
        buf.write(u"\2\u1c67\u1c68\7\u0087\2\2\u1c68\u1c69\5\u039a\u01ce")
        buf.write(u"&\u1c69\u1d11\3\2\2\2\u1c6a\u1c6b\f$\2\2\u1c6b\u1c6c")
        buf.write(u"\7\u00ad\2\2\u1c6c\u1d11\5\u039a\u01ce%\u1c6d\u1c6e\f")
        buf.write(u"#\2\2\u1c6e\u1c6f\7\u00ad\2\2\u1c6f\u1c70\5\u039a\u01ce")
        buf.write(u"\2\u1c70\u1c71\7\u0087\2\2\u1c71\u1c72\5\u039a\u01ce")
        buf.write(u"$\u1c72\u1d11\3\2\2\2\u1c73\u1c74\f\"\2\2\u1c74\u1c75")
        buf.write(u"\7\u00ef\2\2\u1c75\u1c76\7\u00ad\2\2\u1c76\u1d11\5\u039a")
        buf.write(u"\u01ce#\u1c77\u1c78\f!\2\2\u1c78\u1c79\7\u00ef\2\2\u1c79")
        buf.write(u"\u1c7a\7\u00ad\2\2\u1c7a\u1c7b\5\u039a\u01ce\2\u1c7b")
        buf.write(u"\u1c7c\7\u0087\2\2\u1c7c\u1c7d\5\u039a\u01ce\"\u1c7d")
        buf.write(u"\u1d11\3\2\2\2\u1c7e\u1c7f\f \2\2\u1c7f\u1c80\7\u014a")
        buf.write(u"\2\2\u1c80\u1c81\7\u0167\2\2\u1c81\u1d11\5\u039a\u01ce")
        buf.write(u"!\u1c82\u1c83\f\37\2\2\u1c83\u1c84\7\u014a\2\2\u1c84")
        buf.write(u"\u1c85\7\u0167\2\2\u1c85\u1c86\5\u039a\u01ce\2\u1c86")
        buf.write(u"\u1c87\7\u0087\2\2\u1c87\u1c88\5\u039a\u01ce \u1c88\u1d11")
        buf.write(u"\3\2\2\2\u1c89\u1c8a\f\36\2\2\u1c8a\u1c8b\7\u00ef\2\2")
        buf.write(u"\u1c8b\u1c8c\7\u014a\2\2\u1c8c\u1c8d\7\u0167\2\2\u1c8d")
        buf.write(u"\u1d11\5\u039a\u01ce\37\u1c8e\u1c8f\f\35\2\2\u1c8f\u1c90")
        buf.write(u"\7\u00ef\2\2\u1c90\u1c91\7\u014a\2\2\u1c91\u1c92\7\u0167")
        buf.write(u"\2\2\u1c92\u1c93\5\u039a\u01ce\2\u1c93\u1c94\7\u0087")
        buf.write(u"\2\2\u1c94\u1c95\5\u039a\u01ce\36\u1c95\u1d11\3\2\2\2")
        buf.write(u"\u1c96\u1c97\f\21\2\2\u1c97\u1c98\7\u00c6\2\2\u1c98\u1c99")
        buf.write(u"\7z\2\2\u1c99\u1c9a\7\u009d\2\2\u1c9a\u1d11\5\u039a\u01ce")
        buf.write(u"\22\u1c9b\u1c9c\f\20\2\2\u1c9c\u1c9d\7\u00c6\2\2\u1c9d")
        buf.write(u"\u1c9e\7\u00ef\2\2\u1c9e\u1c9f\7z\2\2\u1c9f\u1ca0\7\u009d")
        buf.write(u"\2\2\u1ca0\u1d11\5\u039a\u01ce\21\u1ca1\u1ca2\f<\2\2")
        buf.write(u"\u1ca2\u1ca3\7\u01a5\2\2\u1ca3\u1d11\5\u036a\u01b6\2")
        buf.write(u"\u1ca4\u1ca5\f;\2\2\u1ca5\u1ca6\7I\2\2\u1ca6\u1d11\5")
        buf.write(u"\u01b0\u00d9\2\u1ca7\u1ca8\f,\2\2\u1ca8\u1d11\5\u03ce")
        buf.write(u"\u01e8\2\u1ca9\u1caa\f\34\2\2\u1caa\u1cab\7\u00c6\2\2")
        buf.write(u"\u1cab\u1d11\7\u00f4\2\2\u1cac\u1cad\f\33\2\2\u1cad\u1d11")
        buf.write(u"\7\u00c7\2\2\u1cae\u1caf\f\32\2\2\u1caf\u1cb0\7\u00c6")
        buf.write(u"\2\2\u1cb0\u1cb1\7\u00ef\2\2\u1cb1\u1d11\7\u00f4\2\2")
        buf.write(u"\u1cb2\u1cb3\f\31\2\2\u1cb3\u1d11\7\u00f2\2\2\u1cb4\u1cb5")
        buf.write(u"\f\27\2\2\u1cb5\u1cb6\7\u00c6\2\2\u1cb6\u1d11\7\u016d")
        buf.write(u"\2\2\u1cb7\u1cb8\f\26\2\2\u1cb8\u1cb9\7\u00c6\2\2\u1cb9")
        buf.write(u"\u1cba\7\u00ef\2\2\u1cba\u1d11\7\u016d\2\2\u1cbb\u1cbc")
        buf.write(u"\f\25\2\2\u1cbc\u1cbd\7\u00c6\2\2\u1cbd\u1d11\7\u0092")
        buf.write(u"\2\2\u1cbe\u1cbf\f\24\2\2\u1cbf\u1cc0\7\u00c6\2\2\u1cc0")
        buf.write(u"\u1cc1\7\u00ef\2\2\u1cc1\u1d11\7\u0092\2\2\u1cc2\u1cc3")
        buf.write(u"\f\23\2\2\u1cc3\u1cc4\7\u00c6\2\2\u1cc4\u1d11\7\u0177")
        buf.write(u"\2\2\u1cc5\u1cc6\f\22\2\2\u1cc6\u1cc7\7\u00c6\2\2\u1cc7")
        buf.write(u"\u1cc8\7\u00ef\2\2\u1cc8\u1d11\7\u0177\2\2\u1cc9\u1cca")
        buf.write(u"\f\17\2\2\u1cca\u1ccb\7\u00c6\2\2\u1ccb\u1ccc\7\u00f9")
        buf.write(u"\2\2\u1ccc\u1ccd\7\r\2\2\u1ccd\u1cce\5\u03da\u01ee\2")
        buf.write(u"\u1cce\u1ccf\7\6\2\2\u1ccf\u1d11\3\2\2\2\u1cd0\u1cd1")
        buf.write(u"\f\16\2\2\u1cd1\u1cd2\7\u00c6\2\2\u1cd2\u1cd3\7\u00ef")
        buf.write(u"\2\2\u1cd3\u1cd4\7\u00f9\2\2\u1cd4\u1cd5\7\r\2\2\u1cd5")
        buf.write(u"\u1cd6\5\u03da\u01ee\2\u1cd6\u1cd7\7\6\2\2\u1cd7\u1d11")
        buf.write(u"\3\2\2\2\u1cd8\u1cd9\f\r\2\2\u1cd9\u1cda\7\61\2\2\u1cda")
        buf.write(u"\u1cdb\5\u0406\u0204\2\u1cdb\u1cdc\5\u039c\u01cf\2\u1cdc")
        buf.write(u"\u1cdd\7#\2\2\u1cdd\u1cde\5\u039c\u01cf\2\u1cde\u1d11")
        buf.write(u"\3\2\2\2\u1cdf\u1ce0\f\f\2\2\u1ce0\u1ce1\7\u00ef\2\2")
        buf.write(u"\u1ce1\u1ce2\7\61\2\2\u1ce2\u1ce3\5\u0406\u0204\2\u1ce3")
        buf.write(u"\u1ce4\5\u039c\u01cf\2\u1ce4\u1ce5\7#\2\2\u1ce5\u1ce6")
        buf.write(u"\5\u039c\u01cf\2\u1ce6\u1d11\3\2\2\2\u1ce7\u1ce8\f\13")
        buf.write(u"\2\2\u1ce8\u1ce9\7\61\2\2\u1ce9\u1cea\7\u015a\2\2\u1cea")
        buf.write(u"\u1ceb\5\u039c\u01cf\2\u1ceb\u1cec\7#\2\2\u1cec\u1ced")
        buf.write(u"\5\u039c\u01cf\2\u1ced\u1d11\3\2\2\2\u1cee\u1cef\f\n")
        buf.write(u"\2\2\u1cef\u1cf0\7\u00ef\2\2\u1cf0\u1cf1\7\61\2\2\u1cf1")
        buf.write(u"\u1cf2\7\u015a\2\2\u1cf2\u1cf3\5\u039c\u01cf\2\u1cf3")
        buf.write(u"\u1cf4\7#\2\2\u1cf4\u1cf5\5\u039c\u01cf\2\u1cf5\u1d11")
        buf.write(u"\3\2\2\2\u1cf6\u1cf7\f\t\2\2\u1cf7\u1cf8\7\u00b1\2\2")
        buf.write(u"\u1cf8\u1d11\5\u03f2\u01fa\2\u1cf9\u1cfa\f\b\2\2\u1cfa")
        buf.write(u"\u1cfb\7\u00ef\2\2\u1cfb\u1cfc\7\u00b1\2\2\u1cfc\u1d11")
        buf.write(u"\5\u03f2\u01fa\2\u1cfd\u1cfe\f\7\2\2\u1cfe\u1cff\5\u03d2")
        buf.write(u"\u01ea\2\u1cff\u1d00\5\u03c8\u01e5\2\u1d00\u1d01\5\u0302")
        buf.write(u"\u0182\2\u1d01\u1d11\3\2\2\2\u1d02\u1d03\f\6\2\2\u1d03")
        buf.write(u"\u1d04\5\u03d2\u01ea\2\u1d04\u1d05\5\u03c8\u01e5\2\u1d05")
        buf.write(u"\u1d06\7\r\2\2\u1d06\u1d07\5\u039a\u01ce\2\u1d07\u1d08")
        buf.write(u"\7\6\2\2\u1d08\u1d11\3\2\2\2\u1d09\u1d0a\f\4\2\2\u1d0a")
        buf.write(u"\u1d0b\7\u00c6\2\2\u1d0b\u1d11\7|\2\2\u1d0c\u1d0d\f\3")
        buf.write(u"\2\2\u1d0d\u1d0e\7\u00c6\2\2\u1d0e\u1d0f\7\u00ef\2\2")
        buf.write(u"\u1d0f\u1d11\7|\2\2\u1d10\u1c2c\3\2\2\2\u1d10\u1c31\3")
        buf.write(u"\2\2\2\u1d10\u1c34\3\2\2\2\u1d10\u1c37\3\2\2\2\u1d10")
        buf.write(u"\u1c3a\3\2\2\2\u1d10\u1c3d\3\2\2\2\u1d10\u1c40\3\2\2")
        buf.write(u"\2\u1d10\u1c43\3\2\2\2\u1d10\u1c46\3\2\2\2\u1d10\u1c49")
        buf.write(u"\3\2\2\2\u1d10\u1c4c\3\2\2\2\u1d10\u1c50\3\2\2\2\u1d10")
        buf.write(u"\u1c53\3\2\2\2\u1d10\u1c56\3\2\2\2\u1d10\u1c59\3\2\2")
        buf.write(u"\2\u1d10\u1c5f\3\2\2\2\u1d10\u1c63\3\2\2\2\u1d10\u1c6a")
        buf.write(u"\3\2\2\2\u1d10\u1c6d\3\2\2\2\u1d10\u1c73\3\2\2\2\u1d10")
        buf.write(u"\u1c77\3\2\2\2\u1d10\u1c7e\3\2\2\2\u1d10\u1c82\3\2\2")
        buf.write(u"\2\u1d10\u1c89\3\2\2\2\u1d10\u1c8e\3\2\2\2\u1d10\u1c96")
        buf.write(u"\3\2\2\2\u1d10\u1c9b\3\2\2\2\u1d10\u1ca1\3\2\2\2\u1d10")
        buf.write(u"\u1ca4\3\2\2\2\u1d10\u1ca7\3\2\2\2\u1d10\u1ca9\3\2\2")
        buf.write(u"\2\u1d10\u1cac\3\2\2\2\u1d10\u1cae\3\2\2\2\u1d10\u1cb2")
        buf.write(u"\3\2\2\2\u1d10\u1cb4\3\2\2\2\u1d10\u1cb7\3\2\2\2\u1d10")
        buf.write(u"\u1cbb\3\2\2\2\u1d10\u1cbe\3\2\2\2\u1d10\u1cc2\3\2\2")
        buf.write(u"\2\u1d10\u1cc5\3\2\2\2\u1d10\u1cc9\3\2\2\2\u1d10\u1cd0")
        buf.write(u"\3\2\2\2\u1d10\u1cd8\3\2\2\2\u1d10\u1cdf\3\2\2\2\u1d10")
        buf.write(u"\u1ce7\3\2\2\2\u1d10\u1cee\3\2\2\2\u1d10\u1cf6\3\2\2")
        buf.write(u"\2\u1d10\u1cf9\3\2\2\2\u1d10\u1cfd\3\2\2\2\u1d10\u1d02")
        buf.write(u"\3\2\2\2\u1d10\u1d09\3\2\2\2\u1d10\u1d0c\3\2\2\2\u1d11")
        buf.write(u"\u1d14\3\2\2\2\u1d12\u1d10\3\2\2\2\u1d12\u1d13\3\2\2")
        buf.write(u"\2\u1d13\u039b\3\2\2\2\u1d14\u1d12\3\2\2\2\u1d15\u1d16")
        buf.write(u"\b\u01cf\1\2\u1d16\u1d17\7\t\2\2\u1d17\u1d1f\5\u039c")
        buf.write(u"\u01cf\26\u1d18\u1d19\7\13\2\2\u1d19\u1d1f\5\u039c\u01cf")
        buf.write(u"\25\u1d1a\u1d1b\5\u03ce\u01e8\2\u1d1b\u1d1c\5\u039c\u01cf")
        buf.write(u"\n\u1d1c\u1d1f\3\2\2\2\u1d1d\u1d1f\5\u039e\u01d0\2\u1d1e")
        buf.write(u"\u1d15\3\2\2\2\u1d1e\u1d18\3\2\2\2\u1d1e\u1d1a\3\2\2")
        buf.write(u"\2\u1d1e\u1d1d\3\2\2\2\u1d1f\u1d67\3\2\2\2\u1d20\u1d21")
        buf.write(u"\f\24\2\2\u1d21\u1d22\7\t\2\2\u1d22\u1d66\5\u039c\u01cf")
        buf.write(u"\25\u1d23\u1d24\f\23\2\2\u1d24\u1d25\7\13\2\2\u1d25\u1d66")
        buf.write(u"\5\u039c\u01cf\24\u1d26\u1d27\f\22\2\2\u1d27\u1d28\7")
        buf.write(u"\f\2\2\u1d28\u1d66\5\u039c\u01cf\23\u1d29\u1d2a\f\21")
        buf.write(u"\2\2\u1d2a\u1d2b\7\23\2\2\u1d2b\u1d66\5\u039c\u01cf\22")
        buf.write(u"\u1d2c\u1d2d\f\20\2\2\u1d2d\u1d2e\7\4\2\2\u1d2e\u1d66")
        buf.write(u"\5\u039c\u01cf\21\u1d2f\u1d30\f\17\2\2\u1d30\u1d31\7")
        buf.write(u"\5\2\2\u1d31\u1d66\5\u039c\u01cf\20\u1d32\u1d33\f\16")
        buf.write(u"\2\2\u1d33\u1d34\7\17\2\2\u1d34\u1d66\5\u039c\u01cf\17")
        buf.write(u"\u1d35\u1d36\f\r\2\2\u1d36\u1d37\7\22\2\2\u1d37\u1d66")
        buf.write(u"\5\u039c\u01cf\16\u1d38\u1d39\f\f\2\2\u1d39\u1d3a\7\20")
        buf.write(u"\2\2\u1d3a\u1d66\5\u039c\u01cf\r\u1d3b\u1d3c\f\13\2\2")
        buf.write(u"\u1d3c\u1d3d\5\u03ce\u01e8\2\u1d3d\u1d3e\5\u039c\u01cf")
        buf.write(u"\f\u1d3e\u1d66\3\2\2\2\u1d3f\u1d40\f\b\2\2\u1d40\u1d41")
        buf.write(u"\7\u00c6\2\2\u1d41\u1d42\7z\2\2\u1d42\u1d43\7\u009d\2")
        buf.write(u"\2\u1d43\u1d66\5\u039c\u01cf\t\u1d44\u1d45\f\7\2\2\u1d45")
        buf.write(u"\u1d46\7\u00c6\2\2\u1d46\u1d47\7\u00ef\2\2\u1d47\u1d48")
        buf.write(u"\7z\2\2\u1d48\u1d49\7\u009d\2\2\u1d49\u1d66\5\u039c\u01cf")
        buf.write(u"\b\u1d4a\u1d4b\f\27\2\2\u1d4b\u1d4c\7\u01a5\2\2\u1d4c")
        buf.write(u"\u1d66\5\u036a\u01b6\2\u1d4d\u1d4e\f\t\2\2\u1d4e\u1d66")
        buf.write(u"\5\u03ce\u01e8\2\u1d4f\u1d50\f\6\2\2\u1d50\u1d51\7\u00c6")
        buf.write(u"\2\2\u1d51\u1d52\7\u00f9\2\2\u1d52\u1d53\7\r\2\2\u1d53")
        buf.write(u"\u1d54\5\u03da\u01ee\2\u1d54\u1d55\7\6\2\2\u1d55\u1d66")
        buf.write(u"\3\2\2\2\u1d56\u1d57\f\5\2\2\u1d57\u1d58\7\u00c6\2\2")
        buf.write(u"\u1d58\u1d59\7\u00ef\2\2\u1d59\u1d5a\7\u00f9\2\2\u1d5a")
        buf.write(u"\u1d5b\7\r\2\2\u1d5b\u1d5c\5\u03da\u01ee\2\u1d5c\u1d5d")
        buf.write(u"\7\6\2\2\u1d5d\u1d66\3\2\2\2\u1d5e\u1d5f\f\4\2\2\u1d5f")
        buf.write(u"\u1d60\7\u00c6\2\2\u1d60\u1d66\7|\2\2\u1d61\u1d62\f\3")
        buf.write(u"\2\2\u1d62\u1d63\7\u00c6\2\2\u1d63\u1d64\7\u00ef\2\2")
        buf.write(u"\u1d64\u1d66\7|\2\2\u1d65\u1d20\3\2\2\2\u1d65\u1d23\3")
        buf.write(u"\2\2\2\u1d65\u1d26\3\2\2\2\u1d65\u1d29\3\2\2\2\u1d65")
        buf.write(u"\u1d2c\3\2\2\2\u1d65\u1d2f\3\2\2\2\u1d65\u1d32\3\2\2")
        buf.write(u"\2\u1d65\u1d35\3\2\2\2\u1d65\u1d38\3\2\2\2\u1d65\u1d3b")
        buf.write(u"\3\2\2\2\u1d65\u1d3f\3\2\2\2\u1d65\u1d44\3\2\2\2\u1d65")
        buf.write(u"\u1d4a\3\2\2\2\u1d65\u1d4d\3\2\2\2\u1d65\u1d4f\3\2\2")
        buf.write(u"\2\u1d65\u1d56\3\2\2\2\u1d65\u1d5e\3\2\2\2\u1d65\u1d61")
        buf.write(u"\3\2\2\2\u1d66\u1d69\3\2\2\2\u1d67\u1d65\3\2\2\2\u1d67")
        buf.write(u"\u1d68\3\2\2\2\u1d68\u039d\3\2\2\2\u1d69\u1d67\3\2\2")
        buf.write(u"\2\u1d6a\u1d7e\5\u03fe\u0200\2\u1d6b\u1d7e\5\u0426\u0214")
        buf.write(u"\2\u1d6c\u1d6d\7\u01b2\2\2\u1d6d\u1d7e\5\u0404\u0203")
        buf.write(u"\2\u1d6e\u1d6f\7\r\2\2\u1d6f\u1d70\5\u039a\u01ce\2\u1d70")
        buf.write(u"\u1d71\7\6\2\2\u1d71\u1d72\5\u0404\u0203\2\u1d72\u1d7e")
        buf.write(u"\3\2\2\2\u1d73\u1d7e\5\u03f4\u01fb\2\u1d74\u1d7e\5\u03a0")
        buf.write(u"\u01d1\2\u1d75\u1d7e\5\u0302\u0182\2\u1d76\u1d77\7\u008d")
        buf.write(u"\2\2\u1d77\u1d7e\5\u0302\u0182\2\u1d78\u1d79\7%\2\2\u1d79")
        buf.write(u"\u1d7e\5\u0302\u0182\2\u1d7a\u1d7b\7%\2\2\u1d7b\u1d7e")
        buf.write(u"\5\u03dc\u01ef\2\u1d7c\u1d7e\5\u03c6\u01e4\2\u1d7d\u1d6a")
        buf.write(u"\3\2\2\2\u1d7d\u1d6b\3\2\2\2\u1d7d\u1d6c\3\2\2\2\u1d7d")
        buf.write(u"\u1d6e\3\2\2\2\u1d7d\u1d73\3\2\2\2\u1d7d\u1d74\3\2\2")
        buf.write(u"\2\u1d7d\u1d75\3\2\2\2\u1d7d\u1d76\3\2\2\2\u1d7d\u1d78")
        buf.write(u"\3\2\2\2\u1d7d\u1d7a\3\2\2\2\u1d7d\u1d7c\3\2\2\2\u1d7e")
        buf.write(u"\u039f\3\2\2\2\u1d7f\u1d80\5\u0424\u0213\2\u1d80\u1d81")
        buf.write(u"\7\r\2\2\u1d81\u1d82\7\6\2\2\u1d82\u1d83\5\u03b8\u01dd")
        buf.write(u"\2\u1d83\u1e81\3\2\2\2\u1d84\u1d85\5\u0424\u0213\2\u1d85")
        buf.write(u"\u1d86\7\r\2\2\u1d86\u1d87\5\u03d6\u01ec\2\u1d87\u1d88")
        buf.write(u"\7\6\2\2\u1d88\u1d89\5\u03b8\u01dd\2\u1d89\u1e81\3\2")
        buf.write(u"\2\2\u1d8a\u1d8b\5\u0424\u0213\2\u1d8b\u1d8c\7\r\2\2")
        buf.write(u"\u1d8c\u1d8d\7\u0185\2\2\u1d8d\u1d8e\5\u03d8\u01ed\2")
        buf.write(u"\u1d8e\u1d8f\7\6\2\2\u1d8f\u1d90\5\u03b8\u01dd\2\u1d90")
        buf.write(u"\u1e81\3\2\2\2\u1d91\u1d92\5\u0424\u0213\2\u1d92\u1d93")
        buf.write(u"\7\r\2\2\u1d93\u1d94\5\u03d6\u01ec\2\u1d94\u1d95\7\b")
        buf.write(u"\2\2\u1d95\u1d96\7\u0185\2\2\u1d96\u1d97\5\u03d8\u01ed")
        buf.write(u"\2\u1d97\u1d98\7\6\2\2\u1d98\u1d99\5\u03b8\u01dd\2\u1d99")
        buf.write(u"\u1e81\3\2\2\2\u1d9a\u1d9b\5\u0424\u0213\2\u1d9b\u1d9c")
        buf.write(u"\7\r\2\2\u1d9c\u1d9d\5\u03d6\u01ec\2\u1d9d\u1d9e\5\u031e")
        buf.write(u"\u0190\2\u1d9e\u1d9f\7\6\2\2\u1d9f\u1da0\5\u03b8\u01dd")
        buf.write(u"\2\u1da0\u1e81\3\2\2\2\u1da1\u1da2\5\u0424\u0213\2\u1da2")
        buf.write(u"\u1da3\7\r\2\2\u1da3\u1da4\7\35\2\2\u1da4\u1da5\5\u03d6")
        buf.write(u"\u01ec\2\u1da5\u1da6\5\u031c\u018f\2\u1da6\u1da7\7\6")
        buf.write(u"\2\2\u1da7\u1da8\5\u03b8\u01dd\2\u1da8\u1e81\3\2\2\2")
        buf.write(u"\u1da9\u1daa\5\u0424\u0213\2\u1daa\u1dab\7\r\2\2\u1dab")
        buf.write(u"\u1dac\7z\2\2\u1dac\u1dad\5\u03d6\u01ec\2\u1dad\u1dae")
        buf.write(u"\5\u031c\u018f\2\u1dae\u1daf\7\6\2\2\u1daf\u1db0\5\u03b8")
        buf.write(u"\u01dd\2\u1db0\u1e81\3\2\2\2\u1db1\u1db2\5\u0424\u0213")
        buf.write(u"\2\u1db2\u1db3\7\r\2\2\u1db3\u1db4\7\f\2\2\u1db4\u1db5")
        buf.write(u"\7\6\2\2\u1db5\u1db6\5\u03b8\u01dd\2\u1db6\u1e81\3\2")
        buf.write(u"\2\2\u1db7\u1db8\7J\2\2\u1db8\u1db9\7\u0098\2\2\u1db9")
        buf.write(u"\u1dba\7\r\2\2\u1dba\u1dbb\5\u039a\u01ce\2\u1dbb\u1dbc")
        buf.write(u"\7\6\2\2\u1dbc\u1e81\3\2\2\2\u1dbd\u1e81\7_\2\2\u1dbe")
        buf.write(u"\u1e81\7b\2\2\u1dbf\u1dc0\7b\2\2\u1dc0\u1dc1\7\r\2\2")
        buf.write(u"\u1dc1\u1dc2\5\u0428\u0215\2\u1dc2\u1dc3\7\6\2\2\u1dc3")
        buf.write(u"\u1e81\3\2\2\2\u1dc4\u1e81\7c\2\2\u1dc5\u1dc6\7c\2\2")
        buf.write(u"\u1dc6\u1dc7\7\r\2\2\u1dc7\u1dc8\5\u0428\u0215\2\u1dc8")
        buf.write(u"\u1dc9\7\6\2\2\u1dc9\u1e81\3\2\2\2\u1dca\u1e81\7\u00db")
        buf.write(u"\2\2\u1dcb\u1dcc\7\u00db\2\2\u1dcc\u1dcd\7\r\2\2\u1dcd")
        buf.write(u"\u1dce\5\u0428\u0215\2\u1dce\u1dcf\7\6\2\2\u1dcf\u1e81")
        buf.write(u"\3\2\2\2\u1dd0\u1e81\7\u00dc\2\2\u1dd1\u1dd2\7\u00dc")
        buf.write(u"\2\2\u1dd2\u1dd3\7\r\2\2\u1dd3\u1dd4\5\u0428\u0215\2")
        buf.write(u"\u1dd4\u1dd5\7\6\2\2\u1dd5\u1e81\3\2\2\2\u1dd6\u1e81")
        buf.write(u"\7`\2\2\u1dd7\u1e81\7d\2\2\u1dd8\u1e81\7\u0145\2\2\u1dd9")
        buf.write(u"\u1e81\7\u017c\2\2\u1dda\u1e81\7^\2\2\u1ddb\u1e81\7a")
        buf.write(u"\2\2\u1ddc\u1ddd\7=\2\2\u1ddd\u1dde\7\r\2\2\u1dde\u1ddf")
        buf.write(u"\5\u039a\u01ce\2\u1ddf\u1de0\7&\2\2\u1de0\u1de1\5\u036a")
        buf.write(u"\u01b6\2\u1de1\u1de2\7\6\2\2\u1de2\u1e81\3\2\2\2\u1de3")
        buf.write(u"\u1de4\7\u0091\2\2\u1de4\u1de5\7\r\2\2\u1de5\u1de6\5")
        buf.write(u"\u03e0\u01f1\2\u1de6\u1de7\7\6\2\2\u1de7\u1e81\3\2\2")
        buf.write(u"\2\u1de8\u1de9\7\u0108\2\2\u1de9\u1dea\7\r\2\2\u1dea")
        buf.write(u"\u1deb\5\u03e4\u01f3\2\u1deb\u1dec\7\6\2\2\u1dec\u1e81")
        buf.write(u"\3\2\2\2\u1ded\u1dee\7\u0112\2\2\u1dee\u1def\7\r\2\2")
        buf.write(u"\u1def\u1df0\5\u03e8\u01f5\2\u1df0\u1df1\7\6\2\2\u1df1")
        buf.write(u"\u1e81\3\2\2\2\u1df2\u1df3\7\u0159\2\2\u1df3\u1df4\7")
        buf.write(u"\r\2\2\u1df4\u1df5\5\u03ea\u01f6\2\u1df5\u1df6\7\6\2")
        buf.write(u"\2\u1df6\u1e81\3\2\2\2\u1df7\u1df8\7\u016a\2\2\u1df8")
        buf.write(u"\u1df9\7\r\2\2\u1df9\u1dfa\5\u039a\u01ce\2\u1dfa\u1dfb")
        buf.write(u"\7&\2\2\u1dfb\u1dfc\5\u036a\u01b6\2\u1dfc\u1dfd\7\6\2")
        buf.write(u"\2\u1dfd\u1e81\3\2\2\2\u1dfe\u1dff\7\u016c\2\2\u1dff")
        buf.write(u"\u1e00\7\r\2\2\u1e00\u1e01\7\66\2\2\u1e01\u1e02\5\u03f0")
        buf.write(u"\u01f9\2\u1e02\u1e03\7\6\2\2\u1e03\u1e81\3\2\2\2\u1e04")
        buf.write(u"\u1e05\7\u016c\2\2\u1e05\u1e06\7\r\2\2\u1e06\u1e07\7")
        buf.write(u"\u00d1\2\2\u1e07\u1e08\5\u03f0\u01f9\2\u1e08\u1e09\7")
        buf.write(u"\6\2\2\u1e09\u1e81\3\2\2\2\u1e0a\u1e0b\7\u016c\2\2\u1e0b")
        buf.write(u"\u1e0c\7\r\2\2\u1e0c\u1e0d\7\u0168\2\2\u1e0d\u1e0e\5")
        buf.write(u"\u03f0\u01f9\2\u1e0e\u1e0f\7\6\2\2\u1e0f\u1e81\3\2\2")
        buf.write(u"\2\u1e10\u1e11\7\u016c\2\2\u1e11\u1e12\7\r\2\2\u1e12")
        buf.write(u"\u1e13\5\u03f0\u01f9\2\u1e13\u1e14\7\6\2\2\u1e14\u1e81")
        buf.write(u"\3\2\2\2\u1e15\u1e16\7\u00f5\2\2\u1e16\u1e17\7\r\2\2")
        buf.write(u"\u1e17\u1e18\5\u039a\u01ce\2\u1e18\u1e19\7\b\2\2\u1e19")
        buf.write(u"\u1e1a\5\u039a\u01ce\2\u1e1a\u1e1b\7\6\2\2\u1e1b\u1e81")
        buf.write(u"\3\2\2\2\u1e1c\u1e1d\7H\2\2\u1e1d\u1e1e\7\r\2\2\u1e1e")
        buf.write(u"\u1e1f\5\u03d4\u01eb\2\u1e1f\u1e20\7\6\2\2\u1e20\u1e81")
        buf.write(u"\3\2\2\2\u1e21\u1e22\7\u00a4\2\2\u1e22\u1e23\7\r\2\2")
        buf.write(u"\u1e23\u1e24\5\u03d4\u01eb\2\u1e24\u1e25\7\6\2\2\u1e25")
        buf.write(u"\u1e81\3\2\2\2\u1e26\u1e27\7\u00d3\2\2\u1e27\u1e28\7")
        buf.write(u"\r\2\2\u1e28\u1e29\5\u03d4\u01eb\2\u1e29\u1e2a\7\6\2")
        buf.write(u"\2\u1e2a\u1e81\3\2\2\2\u1e2b\u1e2c\7\u0196\2\2\u1e2c")
        buf.write(u"\u1e2d\7\r\2\2\u1e2d\u1e2e\5\u03d4\u01eb\2\u1e2e\u1e2f")
        buf.write(u"\7\6\2\2\u1e2f\u1e81\3\2\2\2\u1e30\u1e31\7\u0197\2\2")
        buf.write(u"\u1e31\u1e32\7\r\2\2\u1e32\u1e33\7\u00e7\2\2\u1e33\u1e34")
        buf.write(u"\5\u0434\u021b\2\u1e34\u1e35\7\6\2\2\u1e35\u1e81\3\2")
        buf.write(u"\2\2\u1e36\u1e37\7\u0197\2\2\u1e37\u1e38\7\r\2\2\u1e38")
        buf.write(u"\u1e39\7\u00e7\2\2\u1e39\u1e3a\5\u0434\u021b\2\u1e3a")
        buf.write(u"\u1e3b\7\b\2\2\u1e3b\u1e3c\5\u03a6\u01d4\2\u1e3c\u1e3d")
        buf.write(u"\7\6\2\2\u1e3d\u1e81\3\2\2\2\u1e3e\u1e3f\7\u0197\2\2")
        buf.write(u"\u1e3f\u1e40\7\r\2\2\u1e40\u1e41\7\u00e7\2\2\u1e41\u1e42")
        buf.write(u"\5\u0434\u021b\2\u1e42\u1e43\7\b\2\2\u1e43\u1e44\5\u03d4")
        buf.write(u"\u01eb\2\u1e44\u1e45\7\6\2\2\u1e45\u1e81\3\2\2\2\u1e46")
        buf.write(u"\u1e47\7\u0197\2\2\u1e47\u1e48\7\r\2\2\u1e48\u1e49\7")
        buf.write(u"\u00e7\2\2\u1e49\u1e4a\5\u0434\u021b\2\u1e4a\u1e4b\7")
        buf.write(u"\b\2\2\u1e4b\u1e4c\5\u03a6\u01d4\2\u1e4c\u1e4d\7\b\2")
        buf.write(u"\2\u1e4d\u1e4e\5\u03d4\u01eb\2\u1e4e\u1e4f\7\6\2\2\u1e4f")
        buf.write(u"\u1e81\3\2\2\2\u1e50\u1e51\7\u0198\2\2\u1e51\u1e52\7")
        buf.write(u"\r\2\2\u1e52\u1e53\5\u039e\u01d0\2\u1e53\u1e54\5\u03b0")
        buf.write(u"\u01d9\2\u1e54\u1e55\7\6\2\2\u1e55\u1e81\3\2\2\2\u1e56")
        buf.write(u"\u1e57\7\u0199\2\2\u1e57\u1e58\7\r\2\2\u1e58\u1e59\5")
        buf.write(u"\u03a8\u01d5\2\u1e59\u1e5a\7\6\2\2\u1e5a\u1e81\3\2\2")
        buf.write(u"\2\u1e5b\u1e5c\7\u019a\2\2\u1e5c\u1e5d\7\r\2\2\u1e5d")
        buf.write(u"\u1e5e\5\u03ac\u01d7\2\u1e5e\u1e5f\5\u039a\u01ce\2\u1e5f")
        buf.write(u"\u1e60\5\u03ae\u01d8\2\u1e60\u1e61\7\6\2\2\u1e61\u1e81")
        buf.write(u"\3\2\2\2\u1e62\u1e63\7\u019b\2\2\u1e63\u1e64\7\r\2\2")
        buf.write(u"\u1e64\u1e65\7\u00e7\2\2\u1e65\u1e66\5\u0434\u021b\2")
        buf.write(u"\u1e66\u1e67\7\6\2\2\u1e67\u1e81\3\2\2\2\u1e68\u1e69")
        buf.write(u"\7\u019b\2\2\u1e69\u1e6a\7\r\2\2\u1e6a\u1e6b\7\u00e7")
        buf.write(u"\2\2\u1e6b\u1e6c\5\u0434\u021b\2\u1e6c\u1e6d\7\b\2\2")
        buf.write(u"\u1e6d\u1e6e\5\u039a\u01ce\2\u1e6e\u1e6f\7\6\2\2\u1e6f")
        buf.write(u"\u1e81\3\2\2\2\u1e70\u1e71\7\u019c\2\2\u1e71\u1e72\7")
        buf.write(u"\r\2\2\u1e72\u1e73\5\u039a\u01ce\2\u1e73\u1e74\7\b\2")
        buf.write(u"\2\u1e74\u1e75\5\u03a2\u01d2\2\u1e75\u1e76\5\u03a4\u01d3")
        buf.write(u"\2\u1e76\u1e77\7\6\2\2\u1e77\u1e81\3\2\2\2\u1e78\u1e79")
        buf.write(u"\7\u019d\2\2\u1e79\u1e7a\7\r\2\2\u1e7a\u1e7b\5\u03ac")
        buf.write(u"\u01d7\2\u1e7b\u1e7c\5\u039a\u01ce\2\u1e7c\u1e7d\7&\2")
        buf.write(u"\2\u1e7d\u1e7e\5\u036e\u01b8\2\u1e7e\u1e7f\7\6\2\2\u1e7f")
        buf.write(u"\u1e81\3\2\2\2\u1e80\u1d7f\3\2\2\2\u1e80\u1d84\3\2\2")
        buf.write(u"\2\u1e80\u1d8a\3\2\2\2\u1e80\u1d91\3\2\2\2\u1e80\u1d9a")
        buf.write(u"\3\2\2\2\u1e80\u1da1\3\2\2\2\u1e80\u1da9\3\2\2\2\u1e80")
        buf.write(u"\u1db1\3\2\2\2\u1e80\u1db7\3\2\2\2\u1e80\u1dbd\3\2\2")
        buf.write(u"\2\u1e80\u1dbe\3\2\2\2\u1e80\u1dbf\3\2\2\2\u1e80\u1dc4")
        buf.write(u"\3\2\2\2\u1e80\u1dc5\3\2\2\2\u1e80\u1dca\3\2\2\2\u1e80")
        buf.write(u"\u1dcb\3\2\2\2\u1e80\u1dd0\3\2\2\2\u1e80\u1dd1\3\2\2")
        buf.write(u"\2\u1e80\u1dd6\3\2\2\2\u1e80\u1dd7\3\2\2\2\u1e80\u1dd8")
        buf.write(u"\3\2\2\2\u1e80\u1dd9\3\2\2\2\u1e80\u1dda\3\2\2\2\u1e80")
        buf.write(u"\u1ddb\3\2\2\2\u1e80\u1ddc\3\2\2\2\u1e80\u1de3\3\2\2")
        buf.write(u"\2\u1e80\u1de8\3\2\2\2\u1e80\u1ded\3\2\2\2\u1e80\u1df2")
        buf.write(u"\3\2\2\2\u1e80\u1df7\3\2\2\2\u1e80\u1dfe\3\2\2\2\u1e80")
        buf.write(u"\u1e04\3\2\2\2\u1e80\u1e0a\3\2\2\2\u1e80\u1e10\3\2\2")
        buf.write(u"\2\u1e80\u1e15\3\2\2\2\u1e80\u1e1c\3\2\2\2\u1e80\u1e21")
        buf.write(u"\3\2\2\2\u1e80\u1e26\3\2\2\2\u1e80\u1e2b\3\2\2\2\u1e80")
        buf.write(u"\u1e30\3\2\2\2\u1e80\u1e36\3\2\2\2\u1e80\u1e3e\3\2\2")
        buf.write(u"\2\u1e80\u1e46\3\2\2\2\u1e80\u1e50\3\2\2\2\u1e80\u1e56")
        buf.write(u"\3\2\2\2\u1e80\u1e5b\3\2\2\2\u1e80\u1e62\3\2\2\2\u1e80")
        buf.write(u"\u1e68\3\2\2\2\u1e80\u1e70\3\2\2\2\u1e80\u1e78\3\2\2")
        buf.write(u"\2\u1e81\u03a1\3\2\2\2\u1e82\u1e83\7\u0188\2\2\u1e83")
        buf.write(u"\u1e88\5\u039a\u01ce\2\u1e84\u1e85\7\u0188\2\2\u1e85")
        buf.write(u"\u1e86\7\u00ed\2\2\u1e86\u1e88\7\u0182\2\2\u1e87\u1e82")
        buf.write(u"\3\2\2\2\u1e87\u1e84\3\2\2\2\u1e88\u03a3\3\2\2\2\u1e89")
        buf.write(u"\u1e8a\7\b\2\2\u1e8a\u1e8b\7\u0150\2\2\u1e8b\u1e95\7")
        buf.write(u"\u019f\2\2\u1e8c\u1e8d\7\b\2\2\u1e8d\u1e8e\7\u0150\2")
        buf.write(u"\2\u1e8e\u1e95\7\u00ed\2\2\u1e8f\u1e90\7\b\2\2\u1e90")
        buf.write(u"\u1e91\7\u0150\2\2\u1e91\u1e92\7\u00ed\2\2\u1e92\u1e95")
        buf.write(u"\7\u0182\2\2\u1e93\u1e95\3\2\2\2\u1e94\u1e89\3\2\2\2")
        buf.write(u"\u1e94\u1e8c\3\2\2\2\u1e94\u1e8f\3\2\2\2\u1e94\u1e93")
        buf.write(u"\3\2\2\2\u1e95\u03a5\3\2\2\2\u1e96\u1e97\7\u0195\2\2")
        buf.write(u"\u1e97\u1e98\7\r\2\2\u1e98\u1e99\5\u03a8\u01d5\2\u1e99")
        buf.write(u"\u1e9a\7\6\2\2\u1e9a\u03a7\3\2\2\2\u1e9b\u1e9c\b\u01d5")
        buf.write(u"\1\2\u1e9c\u1e9d\5\u03aa\u01d6\2\u1e9d\u1ea3\3\2\2\2")
        buf.write(u"\u1e9e\u1e9f\f\3\2\2\u1e9f\u1ea0\7\b\2\2\u1ea0\u1ea2")
        buf.write(u"\5\u03aa\u01d6\2\u1ea1\u1e9e\3\2\2\2\u1ea2\u1ea5\3\2")
        buf.write(u"\2\2\u1ea3\u1ea1\3\2\2\2\u1ea3\u1ea4\3\2\2\2\u1ea4\u03a9")
        buf.write(u"\3\2\2\2\u1ea5\u1ea3\3\2\2\2\u1ea6\u1ea7\5\u039a\u01ce")
        buf.write(u"\2\u1ea7\u1ea8\7&\2\2\u1ea8\u1ea9\5\u0434\u021b\2\u1ea9")
        buf.write(u"\u1eac\3\2\2\2\u1eaa\u1eac\5\u039a\u01ce\2\u1eab\u1ea6")
        buf.write(u"\3\2\2\2\u1eab\u1eaa\3\2\2\2\u1eac\u03ab\3\2\2\2\u1ead")
        buf.write(u"\u1eae\t\16\2\2\u1eae\u03ad\3\2\2\2\u1eaf\u1eb0\7\u0117")
        buf.write(u"\2\2\u1eb0\u1eb5\7\u018d\2\2\u1eb1\u1eb2\7\u0158\2\2")
        buf.write(u"\u1eb2\u1eb5\7\u018d\2\2\u1eb3\u1eb5\3\2\2\2\u1eb4\u1eaf")
        buf.write(u"\3\2\2\2\u1eb4\u1eb1\3\2\2\2\u1eb4\u1eb3\3\2\2\2\u1eb5")
        buf.write(u"\u03af\3\2\2\2\u1eb6\u1eb7\7\u010e\2\2\u1eb7\u1ec9\5")
        buf.write(u"\u039e\u01d0\2\u1eb8\u1eb9\7\u010e\2\2\u1eb9\u1eba\5")
        buf.write(u"\u039e\u01d0\2\u1eba\u1ebb\7\67\2\2\u1ebb\u1ebc\7\u0124")
        buf.write(u"\2\2\u1ebc\u1ec9\3\2\2\2\u1ebd\u1ebe\7\u010e\2\2\u1ebe")
        buf.write(u"\u1ebf\7\67\2\2\u1ebf\u1ec0\7\u0124\2\2\u1ec0\u1ec9\5")
        buf.write(u"\u039e\u01d0\2\u1ec1\u1ec2\7\u010e\2\2\u1ec2\u1ec3\7")
        buf.write(u"\67\2\2\u1ec3\u1ec4\7\u0124\2\2\u1ec4\u1ec5\5\u039e\u01d0")
        buf.write(u"\2\u1ec5\u1ec6\7\67\2\2\u1ec6\u1ec7\7\u0124\2\2\u1ec7")
        buf.write(u"\u1ec9\3\2\2\2\u1ec8\u1eb6\3\2\2\2\u1ec8\u1eb8\3\2\2")
        buf.write(u"\2\u1ec8\u1ebd\3\2\2\2\u1ec8\u1ec1\3\2\2\2\u1ec9\u03b1")
        buf.write(u"\3\2\2\2\u1eca\u1ecb\7\u018e\2\2\u1ecb\u1ece\5\u03b4")
        buf.write(u"\u01db\2\u1ecc\u1ece\3\2\2\2\u1ecd\u1eca\3\2\2\2\u1ecd")
        buf.write(u"\u1ecc\3\2\2\2\u1ece\u03b3\3\2\2\2\u1ecf\u1ed0\b\u01db")
        buf.write(u"\1\2\u1ed0\u1ed1\5\u03b6\u01dc\2\u1ed1\u1ed7\3\2\2\2")
        buf.write(u"\u1ed2\u1ed3\f\3\2\2\u1ed3\u1ed4\7\b\2\2\u1ed4\u1ed6")
        buf.write(u"\5\u03b6\u01dc\2\u1ed5\u1ed2\3\2\2\2\u1ed6\u1ed9\3\2")
        buf.write(u"\2\2\u1ed7\u1ed5\3\2\2\2\u1ed7\u1ed8\3\2\2\2\u1ed8\u03b5")
        buf.write(u"\3\2\2\2\u1ed9\u1ed7\3\2\2\2\u1eda\u1edb\5\u0430\u0219")
        buf.write(u"\2\u1edb\u1edc\7&\2\2\u1edc\u1edd\5\u03ba\u01de\2\u1edd")
        buf.write(u"\u03b7\3\2\2\2\u1ede\u1edf\7\u0106\2\2\u1edf\u1ee4\5")
        buf.write(u"\u03ba\u01de\2\u1ee0\u1ee1\7\u0106\2\2\u1ee1\u1ee4\5")
        buf.write(u"\u0430\u0219\2\u1ee2\u1ee4\3\2\2\2\u1ee3\u1ede\3\2\2")
        buf.write(u"\2\u1ee3\u1ee0\3\2\2\2\u1ee3\u1ee2\3\2\2\2\u1ee4\u03b9")
        buf.write(u"\3\2\2\2\u1ee5\u1ee6\7\r\2\2\u1ee6\u1ee7\5\u03bc\u01df")
        buf.write(u"\2\u1ee7\u1ee8\5\u03be\u01e0\2\u1ee8\u1ee9\5\u031c\u018f")
        buf.write(u"\2\u1ee9\u1eea\5\u03c0\u01e1\2\u1eea\u1eeb\7\6\2\2\u1eeb")
        buf.write(u"\u03bb\3\2\2\2\u1eec\u1eef\5\u0430\u0219\2\u1eed\u1eef")
        buf.write(u"\3\2\2\2\u1eee\u1eec\3\2\2\2\u1eee\u1eed\3\2\2\2\u1eef")
        buf.write(u"\u03bd\3\2\2\2\u1ef0\u1ef1\7\u010d\2\2\u1ef1\u1ef2\7")
        buf.write(u"\67\2\2\u1ef2\u1ef5\5\u03d4\u01eb\2\u1ef3\u1ef5\3\2\2")
        buf.write(u"\2\u1ef4\u1ef0\3\2\2\2\u1ef4\u1ef3\3\2\2\2\u1ef5\u03bf")
        buf.write(u"\3\2\2\2\u1ef6\u1ef7\7\u011e\2\2\u1ef7\u1efc\5\u03c2")
        buf.write(u"\u01e2\2\u1ef8\u1ef9\7\u0137\2\2\u1ef9\u1efc\5\u03c2")
        buf.write(u"\u01e2\2\u1efa\u1efc\3\2\2\2\u1efb\u1ef6\3\2\2\2\u1efb")
        buf.write(u"\u1ef8\3\2\2\2\u1efb\u1efa\3\2\2\2\u1efc\u03c1\3\2\2")
        buf.write(u"\2\u1efd\u1f04\5\u03c4\u01e3\2\u1efe\u1eff\7\61\2\2\u1eff")
        buf.write(u"\u1f00\5\u03c4\u01e3\2\u1f00\u1f01\7#\2\2\u1f01\u1f02")
        buf.write(u"\5\u03c4\u01e3\2\u1f02\u1f04\3\2\2\2\u1f03\u1efd\3\2")
        buf.write(u"\2\2\u1f03\u1efe\3\2\2\2\u1f04\u03c3\3\2\2\2\u1f05\u1f06")
        buf.write(u"\7\u0172\2\2\u1f06\u1f12\7\u0113\2\2\u1f07\u1f08\7\u0172")
        buf.write(u"\2\2\u1f08\u1f12\7\u0097\2\2\u1f09\u1f0a\7]\2\2\u1f0a")
        buf.write(u"\u1f12\7\u0136\2\2\u1f0b\u1f0c\5\u039a\u01ce\2\u1f0c")
        buf.write(u"\u1f0d\7\u0113\2\2\u1f0d\u1f12\3\2\2\2\u1f0e\u1f0f\5")
        buf.write(u"\u039a\u01ce\2\u1f0f\u1f10\7\u0097\2\2\u1f10\u1f12\3")
        buf.write(u"\2\2\2\u1f11\u1f05\3\2\2\2\u1f11\u1f07\3\2\2\2\u1f11")
        buf.write(u"\u1f09\3\2\2\2\u1f11\u1f0b\3\2\2\2\u1f11\u1f0e\3\2\2")
        buf.write(u"\2\u1f12\u03c5\3\2\2\2\u1f13\u1f14\7\u0136\2\2\u1f14")
        buf.write(u"\u1f15\7\r\2\2\u1f15\u1f16\5\u03d4\u01eb\2\u1f16\u1f17")
        buf.write(u"\7\6\2\2\u1f17\u1f22\3\2\2\2\u1f18\u1f19\7\u0136\2\2")
        buf.write(u"\u1f19\u1f1a\7\r\2\2\u1f1a\u1f22\7\6\2\2\u1f1b\u1f1c")
        buf.write(u"\7\r\2\2\u1f1c\u1f1d\5\u03d4\u01eb\2\u1f1d\u1f1e\7\b")
        buf.write(u"\2\2\u1f1e\u1f1f\5\u039a\u01ce\2\u1f1f\u1f20\7\6\2\2")
        buf.write(u"\u1f20\u1f22\3\2\2\2\u1f21\u1f13\3\2\2\2\u1f21\u1f18")
        buf.write(u"\3\2\2\2\u1f21\u1f1b\3\2\2\2\u1f22\u03c7\3\2\2\2\u1f23")
        buf.write(u"\u1f24\t\17\2\2\u1f24\u03c9\3\2\2\2\u1f25\u1f28\7\24")
        buf.write(u"\2\2\u1f26\u1f28\5\u03cc\u01e7\2\u1f27\u1f25\3\2\2\2")
        buf.write(u"\u1f27\u1f26\3\2\2\2\u1f28\u03cb\3\2\2\2\u1f29\u1f2a")
        buf.write(u"\t\20\2\2\u1f2a\u03cd\3\2\2\2\u1f2b\u1f32\7\24\2\2\u1f2c")
        buf.write(u"\u1f2d\7\u00ff\2\2\u1f2d\u1f2e\7\r\2\2\u1f2e\u1f2f\5")
        buf.write(u"\u0240\u0121\2\u1f2f\u1f30\7\6\2\2\u1f30\u1f32\3\2\2")
        buf.write(u"\2\u1f31\u1f2b\3\2\2\2\u1f31\u1f2c\3\2\2\2\u1f32\u03cf")
        buf.write(u"\3\2\2\2\u1f33\u1f3a\5\u03ca\u01e6\2\u1f34\u1f35\7\u00ff")
        buf.write(u"\2\2\u1f35\u1f36\7\r\2\2\u1f36\u1f37\5\u0240\u0121\2")
        buf.write(u"\u1f37\u1f38\7\6\2\2\u1f38\u1f3a\3\2\2\2\u1f39\u1f33")
        buf.write(u"\3\2\2\2\u1f39\u1f34\3\2\2\2\u1f3a\u03d1\3\2\2\2\u1f3b")
        buf.write(u"\u1f48\5\u03ca\u01e6\2\u1f3c\u1f3d\7\u00ff\2\2\u1f3d")
        buf.write(u"\u1f3e\7\r\2\2\u1f3e\u1f3f\5\u0240\u0121\2\u1f3f\u1f40")
        buf.write(u"\7\6\2\2\u1f40\u1f48\3\2\2\2\u1f41\u1f48\7\u00d6\2\2")
        buf.write(u"\u1f42\u1f43\7\u00ef\2\2\u1f43\u1f48\7\u00d6\2\2\u1f44")
        buf.write(u"\u1f48\7\u00ad\2\2\u1f45\u1f46\7\u00ef\2\2\u1f46\u1f48")
        buf.write(u"\7\u00ad\2\2\u1f47\u1f3b\3\2\2\2\u1f47\u1f3c\3\2\2\2")
        buf.write(u"\u1f47\u1f41\3\2\2\2\u1f47\u1f42\3\2\2\2\u1f47\u1f44")
        buf.write(u"\3\2\2\2\u1f47\u1f45\3\2\2\2\u1f48\u03d3\3\2\2\2\u1f49")
        buf.write(u"\u1f4a\b\u01eb\1\2\u1f4a\u1f4b\5\u039a\u01ce\2\u1f4b")
        buf.write(u"\u1f51\3\2\2\2\u1f4c\u1f4d\f\3\2\2\u1f4d\u1f4e\7\b\2")
        buf.write(u"\2\u1f4e\u1f50\5\u039a\u01ce\2\u1f4f\u1f4c\3\2\2\2\u1f50")
        buf.write(u"\u1f53\3\2\2\2\u1f51\u1f4f\3\2\2\2\u1f51\u1f52\3\2\2")
        buf.write(u"\2\u1f52\u03d5\3\2\2\2\u1f53\u1f51\3\2\2\2\u1f54\u1f55")
        buf.write(u"\b\u01ec\1\2\u1f55\u1f56\5\u03d8\u01ed\2\u1f56\u1f5c")
        buf.write(u"\3\2\2\2\u1f57\u1f58\f\3\2\2\u1f58\u1f59\7\b\2\2\u1f59")
        buf.write(u"\u1f5b\5\u03d8\u01ed\2\u1f5a\u1f57\3\2\2\2\u1f5b\u1f5e")
        buf.write(u"\3\2\2\2\u1f5c\u1f5a\3\2\2\2\u1f5c\u1f5d\3\2\2\2\u1f5d")
        buf.write(u"\u03d7\3\2\2\2\u1f5e\u1f5c\3\2\2\2\u1f5f\u1f65\5\u039a")
        buf.write(u"\u01ce\2\u1f60\u1f61\5\u021c\u010f\2\u1f61\u1f62\7\u01ab")
        buf.write(u"\2\2\u1f62\u1f63\5\u039a\u01ce\2\u1f63\u1f65\3\2\2\2")
        buf.write(u"\u1f64\u1f5f\3\2\2\2\u1f64\u1f60\3\2\2\2\u1f65\u03d9")
        buf.write(u"\3\2\2\2\u1f66\u1f67\b\u01ee\1\2\u1f67\u1f68\5\u036a")
        buf.write(u"\u01b6\2\u1f68\u1f6e\3\2\2\2\u1f69\u1f6a\f\3\2\2\u1f6a")
        buf.write(u"\u1f6b\7\b\2\2\u1f6b\u1f6d\5\u036a\u01b6\2\u1f6c\u1f69")
        buf.write(u"\3\2\2\2\u1f6d\u1f70\3\2\2\2\u1f6e\u1f6c\3\2\2\2\u1f6e")
        buf.write(u"\u1f6f\3\2\2\2\u1f6f\u03db\3\2\2\2\u1f70\u1f6e\3\2\2")
        buf.write(u"\2\u1f71\u1f72\7\n\2\2\u1f72\u1f73\5\u03d4\u01eb\2\u1f73")
        buf.write(u"\u1f74\7\3\2\2\u1f74\u1f7c\3\2\2\2\u1f75\u1f76\7\n\2")
        buf.write(u"\2\u1f76\u1f77\5\u03de\u01f0\2\u1f77\u1f78\7\3\2\2\u1f78")
        buf.write(u"\u1f7c\3\2\2\2\u1f79\u1f7a\7\n\2\2\u1f7a\u1f7c\7\3\2")
        buf.write(u"\2\u1f7b\u1f71\3\2\2\2\u1f7b\u1f75\3\2\2\2\u1f7b\u1f79")
        buf.write(u"\3\2\2\2\u1f7c\u03dd\3\2\2\2\u1f7d\u1f7e\b\u01f0\1\2")
        buf.write(u"\u1f7e\u1f7f\5\u03dc\u01ef\2\u1f7f\u1f85\3\2\2\2\u1f80")
        buf.write(u"\u1f81\f\3\2\2\u1f81\u1f82\7\b\2\2\u1f82\u1f84\5\u03dc")
        buf.write(u"\u01ef\2\u1f83\u1f80\3\2\2\2\u1f84\u1f87\3\2\2\2\u1f85")
        buf.write(u"\u1f83\3\2\2\2\u1f85\u1f86\3\2\2\2\u1f86\u03df\3\2\2")
        buf.write(u"\2\u1f87\u1f85\3\2\2\2\u1f88\u1f89\5\u03e2\u01f2\2\u1f89")
        buf.write(u"\u1f8a\7\u009d\2\2\u1f8a\u1f8b\5\u039a\u01ce\2\u1f8b")
        buf.write(u"\u1f8e\3\2\2\2\u1f8c\u1f8e\3\2\2\2\u1f8d\u1f88\3\2\2")
        buf.write(u"\2\u1f8d\u1f8c\3\2\2\2\u1f8e\u03e1\3\2\2\2\u1f8f\u1f98")
        buf.write(u"\7\u01ad\2\2\u1f90\u1f98\7\u019e\2\2\u1f91\u1f98\7\u00e5")
        buf.write(u"\2\2\u1f92\u1f98\7i\2\2\u1f93\u1f98\7\u00aa\2\2\u1f94")
        buf.write(u"\u1f98\7\u00e2\2\2\u1f95\u1f98\7\u013d\2\2\u1f96\u1f98")
        buf.write(u"\5\u042a\u0216\2\u1f97\u1f8f\3\2\2\2\u1f97\u1f90\3\2")
        buf.write(u"\2\2\u1f97\u1f91\3\2\2\2\u1f97\u1f92\3\2\2\2\u1f97\u1f93")
        buf.write(u"\3\2\2\2\u1f97\u1f94\3\2\2\2\u1f97\u1f95\3\2\2\2\u1f97")
        buf.write(u"\u1f96\3\2\2\2\u1f98\u03e3\3\2\2\2\u1f99\u1f9a\5\u039a")
        buf.write(u"\u01ce\2\u1f9a\u1f9b\5\u03e6\u01f4\2\u1f9b\u1f9c\5\u03ec")
        buf.write(u"\u01f7\2\u1f9c\u1f9d\5\u03ee\u01f8\2\u1f9d\u1fa3\3\2")
        buf.write(u"\2\2\u1f9e\u1f9f\5\u039a\u01ce\2\u1f9f\u1fa0\5\u03e6")
        buf.write(u"\u01f4\2\u1fa0\u1fa1\5\u03ec\u01f7\2\u1fa1\u1fa3\3\2")
        buf.write(u"\2\2\u1fa2\u1f99\3\2\2\2\u1fa2\u1f9e\3\2\2\2\u1fa3\u03e5")
        buf.write(u"\3\2\2\2\u1fa4\u1fa5\7\u0110\2\2\u1fa5\u1fa6\5\u039a")
        buf.write(u"\u01ce\2\u1fa6\u03e7\3\2\2\2\u1fa7\u1fa8\5\u039c\u01cf")
        buf.write(u"\2\u1fa8\u1fa9\7\u00b1\2\2\u1fa9\u1faa\5\u039c\u01cf")
        buf.write(u"\2\u1faa\u1fad\3\2\2\2\u1fab\u1fad\3\2\2\2\u1fac\u1fa7")
        buf.write(u"\3\2\2\2\u1fac\u1fab\3\2\2\2\u1fad\u03e9\3\2\2\2\u1fae")
        buf.write(u"\u1faf\5\u039a\u01ce\2\u1faf\u1fb0\5\u03ec\u01f7\2\u1fb0")
        buf.write(u"\u1fb1\5\u03ee\u01f8\2\u1fb1\u1fbf\3\2\2\2\u1fb2\u1fb3")
        buf.write(u"\5\u039a\u01ce\2\u1fb3\u1fb4\5\u03ee\u01f8\2\u1fb4\u1fb5")
        buf.write(u"\5\u03ec\u01f7\2\u1fb5\u1fbf\3\2\2\2\u1fb6\u1fb7\5\u039a")
        buf.write(u"\u01ce\2\u1fb7\u1fb8\5\u03ec\u01f7\2\u1fb8\u1fbf\3\2")
        buf.write(u"\2\2\u1fb9\u1fba\5\u039a\u01ce\2\u1fba\u1fbb\5\u03ee")
        buf.write(u"\u01f8\2\u1fbb\u1fbf\3\2\2\2\u1fbc\u1fbf\5\u03d4\u01eb")
        buf.write(u"\2\u1fbd\u1fbf\3\2\2\2\u1fbe\u1fae\3\2\2\2\u1fbe\u1fb2")
        buf.write(u"\3\2\2\2\u1fbe\u1fb6\3\2\2\2\u1fbe\u1fb9\3\2\2\2\u1fbe")
        buf.write(u"\u1fbc\3\2\2\2\u1fbe\u1fbd\3\2\2\2\u1fbf\u03eb\3\2\2")
        buf.write(u"\2\u1fc0\u1fc1\7\u009d\2\2\u1fc1\u1fc2\5\u039a\u01ce")
        buf.write(u"\2\u1fc2\u03ed\3\2\2\2\u1fc3\u1fc4\7\u0098\2\2\u1fc4")
        buf.write(u"\u1fc5\5\u039a\u01ce\2\u1fc5\u03ef\3\2\2\2\u1fc6\u1fc7")
        buf.write(u"\5\u039a\u01ce\2\u1fc7\u1fc8\7\u009d\2\2\u1fc8\u1fc9")
        buf.write(u"\5\u03d4\u01eb\2\u1fc9\u1fce\3\2\2\2\u1fca\u1fcb\7\u009d")
        buf.write(u"\2\2\u1fcb\u1fce\5\u03d4\u01eb\2\u1fcc\u1fce\5\u03d4")
        buf.write(u"\u01eb\2\u1fcd\u1fc6\3\2\2\2\u1fcd\u1fca\3\2\2\2\u1fcd")
        buf.write(u"\u1fcc\3\2\2\2\u1fce\u03f1\3\2\2\2\u1fcf\u1fd5\5\u0302")
        buf.write(u"\u0182\2\u1fd0\u1fd1\7\r\2\2\u1fd1\u1fd2\5\u03d4\u01eb")
        buf.write(u"\2\u1fd2\u1fd3\7\6\2\2\u1fd3\u1fd5\3\2\2\2\u1fd4\u1fcf")
        buf.write(u"\3\2\2\2\u1fd4\u1fd0\3\2\2\2\u1fd5\u03f3\3\2\2\2\u1fd6")
        buf.write(u"\u1fd7\7<\2\2\u1fd7\u1fd8\5\u03fc\u01ff\2\u1fd8\u1fd9")
        buf.write(u"\5\u03f6\u01fc\2\u1fd9\u1fda\5\u03fa\u01fe\2\u1fda\u1fdb")
        buf.write(u"\7\u0085\2\2\u1fdb\u03f5\3\2\2\2\u1fdc\u1fdd\b\u01fc")
        buf.write(u"\1\2\u1fdd\u1fde\5\u03f8\u01fd\2\u1fde\u1fe3\3\2\2\2")
        buf.write(u"\u1fdf\u1fe0\f\3\2\2\u1fe0\u1fe2\5\u03f8\u01fd\2\u1fe1")
        buf.write(u"\u1fdf\3\2\2\2\u1fe2\u1fe5\3\2\2\2\u1fe3\u1fe1\3\2\2")
        buf.write(u"\2\u1fe3\u1fe4\3\2\2\2\u1fe4\u03f7\3\2\2\2\u1fe5\u1fe3")
        buf.write(u"\3\2\2\2\u1fe6\u1fe7\7\u018b\2\2\u1fe7\u1fe8\5\u039a")
        buf.write(u"\u01ce\2\u1fe8\u1fe9\7\u0164\2\2\u1fe9\u1fea\5\u039a")
        buf.write(u"\u01ce\2\u1fea\u03f9\3\2\2\2\u1feb\u1fec\7\u0081\2\2")
        buf.write(u"\u1fec\u1fef\5\u039a\u01ce\2\u1fed\u1fef\3\2\2\2\u1fee")
        buf.write(u"\u1feb\3\2\2\2\u1fee\u1fed\3\2\2\2\u1fef\u03fb\3\2\2")
        buf.write(u"\2\u1ff0\u1ff3\5\u039a\u01ce\2\u1ff1\u1ff3\3\2\2\2\u1ff2")
        buf.write(u"\u1ff0\3\2\2\2\u1ff2\u1ff1\3\2\2\2\u1ff3\u03fd\3\2\2")
        buf.write(u"\2\u1ff4\u1ff9\5\u0430\u0219\2\u1ff5\u1ff6\5\u0430\u0219")
        buf.write(u"\2\u1ff6\u1ff7\5\u0402\u0202\2\u1ff7\u1ff9\3\2\2\2\u1ff8")
        buf.write(u"\u1ff4\3\2\2\2\u1ff8\u1ff5\3\2\2\2\u1ff9\u03ff\3\2\2")
        buf.write(u"\2\u1ffa\u1ffb\7\7\2\2\u1ffb\u2009\5\u041e\u0210\2\u1ffc")
        buf.write(u"\u1ffd\7\7\2\2\u1ffd\u2009\7\f\2\2\u1ffe\u1fff\7\n\2")
        buf.write(u"\2\u1fff\u2000\5\u039a\u01ce\2\u2000\u2001\7\3\2\2\u2001")
        buf.write(u"\u2009\3\2\2\2\u2002\u2003\7\n\2\2\u2003\u2004\5\u039a")
        buf.write(u"\u01ce\2\u2004\u2005\7\16\2\2\u2005\u2006\5\u039a\u01ce")
        buf.write(u"\2\u2006\u2007\7\3\2\2\u2007\u2009\3\2\2\2\u2008\u1ffa")
        buf.write(u"\3\2\2\2\u2008\u1ffc\3\2\2\2\u2008\u1ffe\3\2\2\2\u2008")
        buf.write(u"\u2002\3\2\2\2\u2009\u0401\3\2\2\2\u200a\u200b\b\u0202")
        buf.write(u"\1\2\u200b\u200c\5\u0400\u0201\2\u200c\u2011\3\2\2\2")
        buf.write(u"\u200d\u200e\f\3\2\2\u200e\u2010\5\u0400\u0201\2\u200f")
        buf.write(u"\u200d\3\2\2\2\u2010\u2013\3\2\2\2\u2011\u200f\3\2\2")
        buf.write(u"\2\u2011\u2012\3\2\2\2\u2012\u0403\3\2\2\2\u2013\u2011")
        buf.write(u"\3\2\2\2\u2014\u2019\b\u0203\1\2\u2015\u2016\f\3\2\2")
        buf.write(u"\u2016\u2018\5\u0400\u0201\2\u2017\u2015\3\2\2\2\u2018")
        buf.write(u"\u201b\3\2\2\2\u2019\u2017\3\2\2\2\u2019\u201a\3\2\2")
        buf.write(u"\2\u201a\u0405\3\2\2\2\u201b\u2019\3\2\2\2\u201c\u201f")
        buf.write(u"\7*\2\2\u201d\u201f\3\2\2\2\u201e\u201c\3\2\2\2\u201e")
        buf.write(u"\u201d\3\2\2\2\u201f\u0407\3\2\2\2\u2020\u2023\5\u039a")
        buf.write(u"\u01ce\2\u2021\u2023\7n\2\2\u2022\u2020\3\2\2\2\u2022")
        buf.write(u"\u2021\3\2\2\2\u2023\u0409\3\2\2\2\u2024\u2025\b\u0206")
        buf.write(u"\1\2\u2025\u2026\5\u0408\u0205\2\u2026\u202c\3\2\2\2")
        buf.write(u"\u2027\u2028\f\3\2\2\u2028\u2029\7\b\2\2\u2029\u202b")
        buf.write(u"\5\u0408\u0205\2\u202a\u2027\3\2\2\2\u202b\u202e\3\2")
        buf.write(u"\2\2\u202c\u202a\3\2\2\2\u202c\u202d\3\2\2\2\u202d\u040b")
        buf.write(u"\3\2\2\2\u202e\u202c\3\2\2\2\u202f\u2030\7\r\2\2\u2030")
        buf.write(u"\u2031\5\u040a\u0206\2\u2031\u2032\7\6\2\2\u2032\u040d")
        buf.write(u"\3\2\2\2\u2033\u2034\b\u0208\1\2\u2034\u2035\5\u0410")
        buf.write(u"\u0209\2\u2035\u203b\3\2\2\2\u2036\u2037\f\3\2\2\u2037")
        buf.write(u"\u2038\7\b\2\2\u2038\u203a\5\u0410\u0209\2\u2039\u2036")
        buf.write(u"\3\2\2\2\u203a\u203d\3\2\2\2\u203b\u2039\3\2\2\2\u203b")
        buf.write(u"\u203c\3\2\2\2\u203c\u040f\3\2\2\2\u203d\u203b\3\2\2")
        buf.write(u"\2\u203e\u203f\5\u039a\u01ce\2\u203f\u2040\7&\2\2\u2040")
        buf.write(u"\u2041\5\u0434\u021b\2\u2041\u2048\3\2\2\2\u2042\u2043")
        buf.write(u"\5\u039a\u01ce\2\u2043\u2044\7\u01ad\2\2\u2044\u2048")
        buf.write(u"\3\2\2\2\u2045\u2048\5\u039a\u01ce\2\u2046\u2048\7\f")
        buf.write(u"\2\2\u2047\u203e\3\2\2\2\u2047\u2042\3\2\2\2\u2047\u2045")
        buf.write(u"\3\2\2\2\u2047\u2046\3\2\2\2\u2048\u0411\3\2\2\2\u2049")
        buf.write(u"\u204a\b\u020a\1\2\u204a\u204b\5\u0414\u020b\2\u204b")
        buf.write(u"\u2051\3\2\2\2\u204c\u204d\f\3\2\2\u204d\u204e\7\b\2")
        buf.write(u"\2\u204e\u2050\5\u0414\u020b\2\u204f\u204c\3\2\2\2\u2050")
        buf.write(u"\u2053\3\2\2\2\u2051\u204f\3\2\2\2\u2051\u2052\3\2\2")
        buf.write(u"\2\u2052\u0413\3\2\2\2\u2053\u2051\3\2\2\2\u2054\u2059")
        buf.write(u"\5\u0430\u0219\2\u2055\u2056\5\u0430\u0219\2\u2056\u2057")
        buf.write(u"\5\u0402\u0202\2\u2057\u2059\3\2\2\2\u2058\u2054\3\2")
        buf.write(u"\2\2\u2058\u2055\3\2\2\2\u2059\u0415\3\2\2\2\u205a\u205b")
        buf.write(u"\b\u020c\1\2\u205b\u205c\5\u0418\u020d\2\u205c\u2062")
        buf.write(u"\3\2\2\2\u205d\u205e\f\3\2\2\u205e\u205f\7\b\2\2\u205f")
        buf.write(u"\u2061\5\u0418\u020d\2\u2060\u205d\3\2\2\2\u2061\u2064")
        buf.write(u"\3\2\2\2\u2062\u2060\3\2\2\2\u2062\u2063\3\2\2\2\u2063")
        buf.write(u"\u0417\3\2\2\2\u2064\u2062\3\2\2\2\u2065\u2066\5\u0430")
        buf.write(u"\u0219\2\u2066\u0419\3\2\2\2\u2067\u2068\5\u0430\u0219")
        buf.write(u"\2\u2068\u041b\3\2\2\2\u2069\u206a\5\u0430\u0219\2\u206a")
        buf.write(u"\u041d\3\2\2\2\u206b\u206c\5\u0434\u021b\2\u206c\u041f")
        buf.write(u"\3\2\2\2\u206d\u206e\5\u0430\u0219\2\u206e\u0421\3\2")
        buf.write(u"\2\2\u206f\u2070\5\u042a\u0216\2\u2070\u0423\3\2\2\2")
        buf.write(u"\u2071\u2076\5\u0432\u021a\2\u2072\u2073\5\u0430\u0219")
        buf.write(u"\2\u2073\u2074\5\u0402\u0202\2\u2074\u2076\3\2\2\2\u2075")
        buf.write(u"\u2071\3\2\2\2\u2075\u2072\3\2\2\2\u2076\u0425\3\2\2")
        buf.write(u"\2\u2077\u2097\5\u0428\u0215\2\u2078\u2097\7\u01af\2")
        buf.write(u"\2\u2079\u2097\5\u042a\u0216\2\u207a\u2097\7\u01b0\2")
        buf.write(u"\2\u207b\u2097\7\u01b1\2\2\u207c\u207d\5\u0424\u0213")
        buf.write(u"\2\u207d\u207e\5\u042a\u0216\2\u207e\u2097\3\2\2\2\u207f")
        buf.write(u"\u2080\5\u0424\u0213\2\u2080\u2081\7\r\2\2\u2081\u2082")
        buf.write(u"\5\u03d6\u01ec\2\u2082\u2083\7\6\2\2\u2083\u2084\5\u042a")
        buf.write(u"\u0216\2\u2084\u2097\3\2\2\2\u2085\u2086\5\u0370\u01b9")
        buf.write(u"\2\u2086\u2087\5\u042a\u0216\2\u2087\u2097\3\2\2\2\u2088")
        buf.write(u"\u2089\5\u0392\u01ca\2\u2089\u208a\5\u042a\u0216\2\u208a")
        buf.write(u"\u208b\5\u0396\u01cc\2\u208b\u2097\3\2\2\2\u208c\u208d")
        buf.write(u"\5\u0392\u01ca\2\u208d\u208e\7\r\2\2\u208e\u208f\5\u0428")
        buf.write(u"\u0215\2\u208f\u2090\7\6\2\2\u2090\u2091\5\u042a\u0216")
        buf.write(u"\2\u2091\u2092\5\u0396\u01cc\2\u2092\u2097\3\2\2\2\u2093")
        buf.write(u"\u2097\7\u016d\2\2\u2094\u2097\7\u0092\2\2\u2095\u2097")
        buf.write(u"\7\u00f4\2\2\u2096\u2077\3\2\2\2\u2096\u2078\3\2\2\2")
        buf.write(u"\u2096\u2079\3\2\2\2\u2096\u207a\3\2\2\2\u2096\u207b")
        buf.write(u"\3\2\2\2\u2096\u207c\3\2\2\2\u2096\u207f\3\2\2\2\u2096")
        buf.write(u"\u2085\3\2\2\2\u2096\u2088\3\2\2\2\u2096\u208c\3\2\2")
        buf.write(u"\2\u2096\u2093\3\2\2\2\u2096\u2094\3\2\2\2\u2096\u2095")
        buf.write(u"\3\2\2\2\u2097\u0427\3\2\2\2\u2098\u2099\7\u01ac\2\2")
        buf.write(u"\u2099\u0429\3\2\2\2\u209a\u209b\7\u01ae\2\2\u209b\u042b")
        buf.write(u"\3\2\2\2\u209c\u209d\5\u0430\u0219\2\u209d\u042d\3\2")
        buf.write(u"\2\2\u209e\u20a4\5\u0428\u0215\2\u209f\u20a0\7\t\2\2")
        buf.write(u"\u20a0\u20a4\5\u0428\u0215\2\u20a1\u20a2\7\13\2\2\u20a2")
        buf.write(u"\u20a4\5\u0428\u0215\2\u20a3\u209e\3\2\2\2\u20a3\u209f")
        buf.write(u"\3\2\2\2\u20a3\u20a1\3\2\2\2\u20a4\u042f\3\2\2\2\u20a5")
        buf.write(u"\u20a9\7\u01ad\2\2\u20a6\u20a9\5\u0436\u021c\2\u20a7")
        buf.write(u"\u20a9\5\u0438\u021d\2\u20a8\u20a5\3\2\2\2\u20a8\u20a6")
        buf.write(u"\3\2\2\2\u20a8\u20a7\3\2\2\2\u20a9\u0431\3\2\2\2\u20aa")
        buf.write(u"\u20ae\7\u01ad\2\2\u20ab\u20ae\5\u0436\u021c\2\u20ac")
        buf.write(u"\u20ae\5\u043a\u021e\2\u20ad\u20aa\3\2\2\2\u20ad\u20ab")
        buf.write(u"\3\2\2\2\u20ad\u20ac\3\2\2\2\u20ae\u0433\3\2\2\2\u20af")
        buf.write(u"\u20b5\7\u01ad\2\2\u20b0\u20b5\5\u0436\u021c\2\u20b1")
        buf.write(u"\u20b5\5\u0438\u021d\2\u20b2\u20b5\5\u043a\u021e\2\u20b3")
        buf.write(u"\u20b5\5\u043c\u021f\2\u20b4\u20af\3\2\2\2\u20b4\u20b0")
        buf.write(u"\3\2\2\2\u20b4\u20b1\3\2\2\2\u20b4\u20b2\3\2\2\2\u20b4")
        buf.write(u"\u20b3\3\2\2\2\u20b5\u0435\3\2\2\2\u20b6\u20b7\t\21\2")
        buf.write(u"\2\u20b7\u0437\3\2\2\2\u20b8\u20b9\t\22\2\2\u20b9\u0439")
        buf.write(u"\3\2\2\2\u20ba\u20bb\t\23\2\2\u20bb\u043b\3\2\2\2\u20bc")
        buf.write(u"\u20bd\t\24\2\2\u20bd\u043d\3\2\2\2\u01c4\u0448\u04ba")
        buf.write(u"\u04c0\u04c9\u04d1\u04e8\u04f7\u04fd\u0505\u050d\u0519")
        buf.write(u"\u052a\u0534\u053a\u054f\u055d\u0561\u0568\u0571\u057b")
        buf.write(u"\u0585\u05b2\u05bc\u05c7\u05cc\u05d5\u05db\u05ed\u05f2")
        buf.write(u"\u05f6\u0606\u060b\u0610\u0620\u0629\u0637\u0669\u0673")
        buf.write(u"\u071b\u0722\u0727\u072c\u0731\u073a\u0744\u0756\u0765")
        buf.write(u"\u0782\u0788\u0793\u079c\u07a0\u07a7\u07ae\u07b5\u07d8")
        buf.write(u"\u07dc\u07e1\u07e8\u07ec\u07f6\u0804\u080e\u0847\u0855")
        buf.write(u"\u0859\u0860\u086a\u0875\u087b\u087f\u0890\u089b\u08b7")
        buf.write(u"\u08c0\u08cd\u08cf\u08d9\u0911\u0916\u091d\u0927\u0933")
        buf.write(u"\u093d\u094b\u0953\u095e\u0970\u0978\u0981\u098f\u0994")
        buf.write(u"\u099b\u09b5\u09c9\u09cd\u09d6\u09ef\u09f5\u09f8\u09fc")
        buf.write(u"\u0a02\u0a0c\u0a21\u0a25\u0a2b\u0a30\u0a36\u0a3a\u0a4a")
        buf.write(u"\u0a4e\u0a5a\u0a64\u0a6a\u0a75\u0a79\u0a80\u0a89\u0a96")
        buf.write(u"\u0b4e\u0b60\u0b69\u0b6e\u0b80\u0b91\u0b99\u0ba3\u0bb3")
        buf.write(u"\u0bbd\u0bd4\u0bda\u0bde\u0bec\u0bfe\u0c15\u0c1d\u0c27")
        buf.write(u"\u0c3a\u0c48\u0c5c\u0c8c\u0c92\u0c9c\u0ca6\u0cad\u0cb1")
        buf.write(u"\u0cbb\u0cc0\u0cc7\u0cce\u0cd3\u0cda\u0ce8\u0cfa\u0d61")
        buf.write(u"\u0d6f\u0d77\u0d7e\u0d87\u0d95\u0d9e\u0da8\u0dc4\u0ddc")
        buf.write(u"\u0dfb\u0dff\u0e04\u0e0d\u0e11\u0e2c\u0e36\u0e45\u0e59")
        buf.write(u"\u0e6d\u0e96\u0eb0\u0eba\u0ec1\u0ecc\u0eda\u0f70\u0f86")
        buf.write(u"\u0f8a\u0fbd\u0fc2\u0fd0\u0fd4\u0fda\u101e\u1024\u1041")
        buf.write(u"\u1052\u105c\u1068\u1096\u10a0\u10a6\u10ac\u10b6\u10d4")
        buf.write(u"\u10da\u10e0\u10ed\u10f9\u1116\u112b\u112f\u1133\u1138")
        buf.write(u"\u1142\u1159\u115e\u1164\u1169\u116e\u118f\u1194\u119c")
        buf.write(u"\u11a6\u11af\u11b9\u11cb\u11d3\u11e5\u11f0\u11f9\u121b")
        buf.write(u"\u1223\u122a\u122f\u123c\u124c\u1251\u1261\u1271\u1281")
        buf.write(u"\u1299\u12a0\u12ac\u12b2\u12d6\u12dd\u12ec\u12fd\u1303")
        buf.write(u"\u1457\u145b\u1460\u1516\u15a6\u15bc\u15c6\u15ce\u15d2")
        buf.write(u"\u15d9\u15eb\u15f4\u15fd\u1629\u162e\u163a\u1644\u1646")
        buf.write(u"\u164b\u1663\u1671\u167a\u1683\u16c7\u16cb\u16d1\u16dc")
        buf.write(u"\u16e8\u16f8\u1733\u1737\u1788\u17a2\u17a7\u17c6\u17d0")
        buf.write(u"\u17d7\u17e1\u17e7\u17eb\u17ef\u17f6\u1808\u1811\u181b")
        buf.write(u"\u1824\u1829\u1836\u183c\u184c\u1853\u185f\u1870\u187a")
        buf.write(u"\u1883\u1890\u189d\u18af\u18b3\u18c6\u18cb\u18e2\u18f9")
        buf.write(u"\u18fb\u1903\u1907\u1912\u1919\u1920\u1927\u1929\u192b")
        buf.write(u"\u194f\u1953\u1963\u196a\u1971\u1978\u197a\u197c\u1984")
        buf.write(u"\u198e\u199a\u199f\u19c4\u19c8\u19cd\u19d8\u19dc\u19ea")
        buf.write(u"\u19f6\u1a00\u1a04\u1a13\u1a1b\u1a1f\u1a29\u1a35\u1a3a")
        buf.write(u"\u1a40\u1a44\u1a4d\u1a5a\u1a5f\u1a6a\u1a70\u1a7a\u1a7f")
        buf.write(u"\u1aa0\u1aa6\u1ac3\u1ad3\u1ad7\u1adb\u1adf\u1ae2\u1aeb")
        buf.write(u"\u1af8\u1b02\u1b0d\u1b14\u1b1d\u1b21\u1b2b\u1b4d\u1b58")
        buf.write(u"\u1b5a\u1b6b\u1b71\u1b7a\u1b81\u1b93\u1b9a\u1b9e\u1ba2")
        buf.write(u"\u1baf\u1bb3\u1bcb\u1bcf\u1bd5\u1be7\u1bf1\u1c0f\u1c17")
        buf.write(u"\u1c2a\u1d10\u1d12\u1d1e\u1d65\u1d67\u1d7d\u1e80\u1e87")
        buf.write(u"\u1e94\u1ea3\u1eab\u1eb4\u1ec8\u1ecd\u1ed7\u1ee3\u1eee")
        buf.write(u"\u1ef4\u1efb\u1f03\u1f11\u1f21\u1f27\u1f31\u1f39\u1f47")
        buf.write(u"\u1f51\u1f5c\u1f64\u1f6e\u1f7b\u1f85\u1f8d\u1f97\u1fa2")
        buf.write(u"\u1fac\u1fbe\u1fcd\u1fd4\u1fe3\u1fee\u1ff2\u1ff8\u2008")
        buf.write(u"\u2011\u2019\u201e\u2022\u202c\u203b\u2047\u2051\u2058")
        buf.write(u"\u2062\u2075\u2096\u20a3\u20a8\u20ad\u20b4")
        return buf.getvalue()
		

class SqlParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    EOF = Token.EOF
    T__16=1
    T__15=2
    T__14=3
    T__13=4
    T__12=5
    T__11=6
    T__10=7
    T__9=8
    T__8=9
    T__7=10
    T__6=11
    T__5=12
    T__4=13
    T__3=14
    T__2=15
    T__1=16
    T__0=17
    Op=18
    ABORT_P=19
    ABSOLUTE_P=20
    ACCESS=21
    ACTION=22
    ADD_P=23
    ADMIN=24
    AFTER=25
    AGGREGATE=26
    ALL=27
    ALSO=28
    ALTER=29
    ALWAYS=30
    ANALYSE=31
    ANALYZE=32
    AND=33
    ANY=34
    ARRAY=35
    AS=36
    ASC=37
    ASSERTION=38
    ASSIGNMENT=39
    ASYMMETRIC=40
    AT=41
    ATTRIBUTE=42
    AUTHORIZATION=43
    BACKWARD=44
    BEFORE=45
    BEGIN_P=46
    BETWEEN=47
    BIGINT=48
    BINARY=49
    BIT=50
    BOOLEAN_P=51
    BOTH=52
    BY=53
    CACHE=54
    CALLED=55
    CASCADE=56
    CASCADED=57
    CASE=58
    CAST=59
    CATALOG_P=60
    CHAIN=61
    CHAR_P=62
    CHARACTER=63
    CHARACTERISTICS=64
    CHECK=65
    CHECKPOINT=66
    CLASS=67
    CLOSE=68
    CLUSTER=69
    COALESCE=70
    COLLATE=71
    COLLATION=72
    COLUMN=73
    COMMENT=74
    COMMENTS=75
    COMMIT=76
    COMMITTED=77
    CONCURRENTLY=78
    CONFIGURATION=79
    CONNECTION=80
    CONSTRAINT=81
    CONSTRAINTS=82
    CONTENT_P=83
    CONTINUE_P=84
    CONVERSION_P=85
    COPY=86
    COST=87
    CREATE=88
    CROSS=89
    CSV=90
    CURRENT_P=91
    CURRENT_CATALOG=92
    CURRENT_DATE=93
    CURRENT_ROLE=94
    CURRENT_SCHEMA=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CYCLE=100
    DATA_P=101
    DATABASE=102
    DAY_P=103
    DEALLOCATE=104
    DEC=105
    DECIMAL_P=106
    DECLARE=107
    DEFAULT=108
    DEFAULTS=109
    DEFERRABLE=110
    DEFERRED=111
    DEFINER=112
    DELETE_P=113
    DELIMITER=114
    DELIMITERS=115
    DESC=116
    DICTIONARY=117
    DISABLE_P=118
    DISCARD=119
    DISTINCT=120
    DO=121
    DOCUMENT_P=122
    DOMAIN_P=123
    DOUBLE_P=124
    DROP=125
    EACH=126
    ELSE=127
    ENABLE_P=128
    ENCODING=129
    ENCRYPTED=130
    END_P=131
    ENUM_P=132
    ESCAPE=133
    EXCEPT=134
    EXCLUDE=135
    EXCLUDING=136
    EXCLUSIVE=137
    EXECUTE=138
    EXISTS=139
    EXPLAIN=140
    EXTENSION=141
    EXTERNAL=142
    EXTRACT=143
    FALSE_P=144
    FAMILY=145
    FETCH=146
    FIRST_P=147
    FLOAT_P=148
    FOLLOWING=149
    FOR=150
    FORCE=151
    FOREIGN=152
    FORWARD=153
    FREEZE=154
    FROM=155
    FULL=156
    FUNCTION=157
    FUNCTIONS=158
    GLOBAL=159
    GRANT=160
    GRANTED=161
    GREATEST=162
    GROUP_P=163
    HANDLER=164
    HAVING=165
    HEADER_P=166
    HOLD=167
    HOUR_P=168
    IDENTITY_P=169
    IF_P=170
    ILIKE=171
    IMMEDIATE=172
    IMMUTABLE=173
    IMPLICIT_P=174
    IN_P=175
    INCLUDING=176
    INCREMENT=177
    INDEX=178
    INDEXES=179
    INHERIT=180
    INHERITS=181
    INITIALLY=182
    INLINE_P=183
    INNER_P=184
    INOUT=185
    INPUT_P=186
    INSENSITIVE=187
    INSERT=188
    INSTEAD=189
    INT_P=190
    INTEGER=191
    INTERSECT=192
    INTERVAL=193
    INTO=194
    INVOKER=195
    IS=196
    ISNULL=197
    ISOLATION=198
    JOIN=199
    KEY=200
    LABEL=201
    LANGUAGE=202
    LARGE_P=203
    LAST_P=204
    LC_COLLATE_P=205
    LC_CTYPE_P=206
    LEADING=207
    LEAKPROOF=208
    LEAST=209
    LEFT=210
    LEVEL=211
    LIKE=212
    LIMIT=213
    LISTEN=214
    LOAD=215
    LOCAL=216
    LOCALTIME=217
    LOCALTIMESTAMP=218
    LOCATION=219
    LOCK_P=220
    MAPPING=221
    MATCH=222
    MAXVALUE=223
    MINUTE_P=224
    MINVALUE=225
    MODE=226
    MONTH_P=227
    MOVE=228
    NAME_P=229
    NAMES=230
    NATIONAL=231
    NATURAL=232
    NCHAR=233
    NEXT=234
    NO=235
    NONE=236
    NOT=237
    NOTHING=238
    NOTIFY=239
    NOTNULL=240
    NOWAIT=241
    NULL_P=242
    NULLIF=243
    NULLS_P=244
    NUMERIC=245
    OBJECT_P=246
    OF=247
    OFF=248
    OFFSET=249
    OIDS=250
    ON=251
    ONLY=252
    OPERATOR=253
    OPTION=254
    OPTIONS=255
    OR=256
    ORDER=257
    OUT_P=258
    OUTER_P=259
    OVER=260
    OVERLAPS=261
    OVERLAY=262
    OWNED=263
    OWNER=264
    PARSER=265
    PARTIAL=266
    PARTITION=267
    PASSING=268
    PASSWORD=269
    PLACING=270
    PLANS=271
    POSITION=272
    PRECEDING=273
    PRECISION=274
    PREPARE=275
    PREPARED=276
    PRESERVE=277
    PRIMARY=278
    PRIOR=279
    PRIVILEGES=280
    PROCEDURAL=281
    PROCEDURE=282
    QUOTE=283
    RANGE=284
    READ=285
    REAL=286
    REASSIGN=287
    RECHECK=288
    RECURSIVE=289
    REF=290
    REFERENCES=291
    REINDEX=292
    RELATIVE_P=293
    RELEASE=294
    RENAME=295
    REPEATABLE=296
    REPLACE=297
    REPLICA=298
    RESET=299
    RESTART=300
    RESTRICT=301
    RETURNING=302
    RETURNS=303
    REVOKE=304
    RIGHT=305
    ROLE=306
    ROLLBACK=307
    ROW=308
    ROWS=309
    RULE=310
    SAVEPOINT=311
    SCHEMA=312
    SCROLL=313
    SEARCH=314
    SECOND_P=315
    SECURITY=316
    SELECT=317
    SEQUENCE=318
    SEQUENCES=319
    SERIALIZABLE=320
    SERVER=321
    SESSION=322
    SESSION_USER=323
    SET=324
    SETOF=325
    SHARE=326
    SHOW=327
    SIMILAR=328
    SIMPLE=329
    SMALLINT=330
    SNAPSHOT=331
    SOME=332
    STABLE=333
    STANDALONE_P=334
    START=335
    STATEMENT=336
    STATISTICS=337
    STDIN=338
    STDOUT=339
    STORAGE=340
    STRICT_P=341
    STRIP_P=342
    SUBSTRING=343
    SYMMETRIC=344
    SYSID=345
    SYSTEM_P=346
    TABLE=347
    TABLES=348
    TABLESPACE=349
    TEMP=350
    TEMPLATE=351
    TEMPORARY=352
    TEXT_P=353
    THEN=354
    TIME=355
    TIMESTAMP=356
    TO=357
    TRAILING=358
    TRANSACTION=359
    TREAT=360
    TRIGGER=361
    TRIM=362
    TRUE_P=363
    TRUNCATE=364
    TRUSTED=365
    TYPE_P=366
    TYPES_P=367
    UNBOUNDED=368
    UNCOMMITTED=369
    UNENCRYPTED=370
    UNION=371
    UNIQUE=372
    UNKNOWN=373
    UNLISTEN=374
    UNLOGGED=375
    UNTIL=376
    UPDATE=377
    USER=378
    USING=379
    VACUUM=380
    VALID=381
    VALIDATE=382
    VALIDATOR=383
    VALUE_P=384
    VALUES=385
    VARCHAR=386
    VARIADIC=387
    VARYING=388
    VERBOSE=389
    VERSION_P=390
    VIEW=391
    VOLATILE=392
    WHEN=393
    WHERE=394
    WHITESPACE_P=395
    WINDOW=396
    WITH=397
    WITHOUT=398
    WORK=399
    WRAPPER=400
    WRITE=401
    XML_P=402
    XMLATTRIBUTES=403
    XMLCONCAT=404
    XMLELEMENT=405
    XMLEXISTS=406
    XMLFOREST=407
    XMLPARSE=408
    XMLPI=409
    XMLROOT=410
    XMLSERIALIZE=411
    YEAR_P=412
    YES_P=413
    ZONE=414
    WS=415
    SL_COMMENT=416
    ML_COMMENT=417
    WITH_TIME=418
    TYPECAST=419
    DOT_DOT=420
    NULLS_FIRST=421
    NULLS_LAST=422
    LESS_LESS=423
    GREATER_GREATER=424
    COLON_EQUALS=425
    ICONST=426
    IDENT=427
    SCONST=428
    FCONST=429
    BCONST=430
    XCONST=431
    PARAM=432

    tokenNames = [ u"<INVALID>", u"']'", u"'%'", u"'^'", u"')'", u"'.'", 
                   u"','", u"'+'", u"'['", u"'-'", u"'*'", u"'('", u"':'", 
                   u"'<'", u"'='", u"';'", u"'>'", u"'/'", u"'TODO'", u"ABORT_P", 
                   u"ABSOLUTE_P", u"ACCESS", u"ACTION", u"ADD_P", u"ADMIN", 
                   u"AFTER", u"AGGREGATE", u"ALL", u"ALSO", u"ALTER", u"ALWAYS", 
                   u"ANALYSE", u"ANALYZE", u"AND", u"ANY", u"ARRAY", u"AS", 
                   u"ASC", u"ASSERTION", u"ASSIGNMENT", u"ASYMMETRIC", u"AT", 
                   u"ATTRIBUTE", u"AUTHORIZATION", u"BACKWARD", u"BEFORE", 
                   u"BEGIN_P", u"BETWEEN", u"BIGINT", u"BINARY", u"BIT", 
                   u"BOOLEAN_P", u"BOTH", u"BY", u"CACHE", u"CALLED", u"CASCADE", 
                   u"CASCADED", u"CASE", u"CAST", u"CATALOG_P", u"CHAIN", 
                   u"CHAR_P", u"CHARACTER", u"CHARACTERISTICS", u"CHECK", 
                   u"CHECKPOINT", u"CLASS", u"CLOSE", u"CLUSTER", u"COALESCE", 
                   u"COLLATE", u"COLLATION", u"COLUMN", u"COMMENT", u"COMMENTS", 
                   u"COMMIT", u"COMMITTED", u"CONCURRENTLY", u"CONFIGURATION", 
                   u"CONNECTION", u"CONSTRAINT", u"CONSTRAINTS", u"CONTENT_P", 
                   u"CONTINUE_P", u"CONVERSION_P", u"COPY", u"COST", u"CREATE", 
                   u"CROSS", u"CSV", u"CURRENT_P", u"CURRENT_CATALOG", u"CURRENT_DATE", 
                   u"CURRENT_ROLE", u"CURRENT_SCHEMA", u"CURRENT_TIME", 
                   u"CURRENT_TIMESTAMP", u"CURRENT_USER", u"CURSOR", u"CYCLE", 
                   u"DATA_P", u"DATABASE", u"DAY_P", u"DEALLOCATE", u"DEC", 
                   u"DECIMAL_P", u"DECLARE", u"DEFAULT", u"DEFAULTS", u"DEFERRABLE", 
                   u"DEFERRED", u"DEFINER", u"DELETE_P", u"DELIMITER", u"DELIMITERS", 
                   u"DESC", u"DICTIONARY", u"DISABLE_P", u"DISCARD", u"DISTINCT", 
                   u"DO", u"DOCUMENT_P", u"DOMAIN_P", u"DOUBLE_P", u"DROP", 
                   u"EACH", u"ELSE", u"ENABLE_P", u"ENCODING", u"ENCRYPTED", 
                   u"END_P", u"ENUM_P", u"ESCAPE", u"EXCEPT", u"EXCLUDE", 
                   u"EXCLUDING", u"EXCLUSIVE", u"EXECUTE", u"EXISTS", u"EXPLAIN", 
                   u"EXTENSION", u"EXTERNAL", u"EXTRACT", u"FALSE_P", u"FAMILY", 
                   u"FETCH", u"FIRST_P", u"FLOAT_P", u"FOLLOWING", u"FOR", 
                   u"FORCE", u"FOREIGN", u"FORWARD", u"FREEZE", u"FROM", 
                   u"FULL", u"FUNCTION", u"FUNCTIONS", u"GLOBAL", u"GRANT", 
                   u"GRANTED", u"GREATEST", u"GROUP_P", u"HANDLER", u"HAVING", 
                   u"HEADER_P", u"HOLD", u"HOUR_P", u"IDENTITY_P", u"IF_P", 
                   u"ILIKE", u"IMMEDIATE", u"IMMUTABLE", u"IMPLICIT_P", 
                   u"IN_P", u"INCLUDING", u"INCREMENT", u"INDEX", u"INDEXES", 
                   u"INHERIT", u"INHERITS", u"INITIALLY", u"INLINE_P", u"INNER_P", 
                   u"INOUT", u"INPUT_P", u"INSENSITIVE", u"INSERT", u"INSTEAD", 
                   u"INT_P", u"INTEGER", u"INTERSECT", u"INTERVAL", u"INTO", 
                   u"INVOKER", u"IS", u"ISNULL", u"ISOLATION", u"JOIN", 
                   u"KEY", u"LABEL", u"LANGUAGE", u"LARGE_P", u"LAST_P", 
                   u"LC_COLLATE_P", u"LC_CTYPE_P", u"LEADING", u"LEAKPROOF", 
                   u"LEAST", u"LEFT", u"LEVEL", u"LIKE", u"LIMIT", u"LISTEN", 
                   u"LOAD", u"LOCAL", u"LOCALTIME", u"LOCALTIMESTAMP", u"LOCATION", 
                   u"LOCK_P", u"MAPPING", u"MATCH", u"MAXVALUE", u"MINUTE_P", 
                   u"MINVALUE", u"MODE", u"MONTH_P", u"MOVE", u"NAME_P", 
                   u"NAMES", u"NATIONAL", u"NATURAL", u"NCHAR", u"NEXT", 
                   u"NO", u"NONE", u"NOT", u"NOTHING", u"NOTIFY", u"NOTNULL", 
                   u"NOWAIT", u"NULL_P", u"NULLIF", u"NULLS_P", u"NUMERIC", 
                   u"OBJECT_P", u"OF", u"OFF", u"OFFSET", u"OIDS", u"ON", 
                   u"ONLY", u"OPERATOR", u"OPTION", u"OPTIONS", u"OR", u"ORDER", 
                   u"OUT_P", u"OUTER_P", u"OVER", u"OVERLAPS", u"OVERLAY", 
                   u"OWNED", u"OWNER", u"PARSER", u"PARTIAL", u"PARTITION", 
                   u"PASSING", u"PASSWORD", u"PLACING", u"PLANS", u"POSITION", 
                   u"PRECEDING", u"PRECISION", u"PREPARE", u"PREPARED", 
                   u"PRESERVE", u"PRIMARY", u"PRIOR", u"PRIVILEGES", u"PROCEDURAL", 
                   u"PROCEDURE", u"QUOTE", u"RANGE", u"READ", u"REAL", u"REASSIGN", 
                   u"RECHECK", u"RECURSIVE", u"REF", u"REFERENCES", u"REINDEX", 
                   u"RELATIVE_P", u"RELEASE", u"RENAME", u"REPEATABLE", 
                   u"REPLACE", u"REPLICA", u"RESET", u"RESTART", u"RESTRICT", 
                   u"RETURNING", u"RETURNS", u"REVOKE", u"RIGHT", u"ROLE", 
                   u"ROLLBACK", u"ROW", u"ROWS", u"RULE", u"SAVEPOINT", 
                   u"SCHEMA", u"SCROLL", u"SEARCH", u"SECOND_P", u"SECURITY", 
                   u"SELECT", u"SEQUENCE", u"SEQUENCES", u"SERIALIZABLE", 
                   u"SERVER", u"SESSION", u"SESSION_USER", u"SET", u"SETOF", 
                   u"SHARE", u"SHOW", u"SIMILAR", u"SIMPLE", u"SMALLINT", 
                   u"SNAPSHOT", u"SOME", u"STABLE", u"STANDALONE_P", u"START", 
                   u"STATEMENT", u"STATISTICS", u"STDIN", u"STDOUT", u"STORAGE", 
                   u"STRICT_P", u"STRIP_P", u"SUBSTRING", u"SYMMETRIC", 
                   u"SYSID", u"SYSTEM_P", u"TABLE", u"TABLES", u"TABLESPACE", 
                   u"TEMP", u"TEMPLATE", u"TEMPORARY", u"TEXT_P", u"THEN", 
                   u"TIME", u"TIMESTAMP", u"TO", u"TRAILING", u"TRANSACTION", 
                   u"TREAT", u"TRIGGER", u"TRIM", u"TRUE_P", u"TRUNCATE", 
                   u"TRUSTED", u"TYPE_P", u"TYPES_P", u"UNBOUNDED", u"UNCOMMITTED", 
                   u"UNENCRYPTED", u"UNION", u"UNIQUE", u"UNKNOWN", u"UNLISTEN", 
                   u"UNLOGGED", u"UNTIL", u"UPDATE", u"USER", u"USING", 
                   u"VACUUM", u"VALID", u"VALIDATE", u"VALIDATOR", u"VALUE_P", 
                   u"VALUES", u"VARCHAR", u"VARIADIC", u"VARYING", u"VERBOSE", 
                   u"VERSION_P", u"VIEW", u"VOLATILE", u"WHEN", u"WHERE", 
                   u"WHITESPACE_P", u"WINDOW", u"WITH", u"WITHOUT", u"WORK", 
                   u"WRAPPER", u"WRITE", u"XML_P", u"XMLATTRIBUTES", u"XMLCONCAT", 
                   u"XMLELEMENT", u"XMLEXISTS", u"XMLFOREST", u"XMLPARSE", 
                   u"XMLPI", u"XMLROOT", u"XMLSERIALIZE", u"YEAR_P", u"YES_P", 
                   u"ZONE", u"WS", u"SL_COMMENT", u"ML_COMMENT", u"WITH_TIME", 
                   u"'::'", u"'..'", u"NULLS_FIRST", u"NULLS_LAST", u"'<<'", 
                   u"'>>'", u"':='", u"ICONST", u"IDENT", u"SCONST", u"FCONST", 
                   u"BCONST", u"XCONST", u"PARAM" ]

    RULE_stmtblock = 0
    RULE_stmtmulti = 1
    RULE_stmt = 2
    RULE_createRoleStmt = 3
    RULE_optRoleList = 4
    RULE_alteroptRoleList = 5
    RULE_alterOptRoleElem = 6
    RULE_createOptRoleElem = 7
    RULE_createUserStmt = 8
    RULE_alterRoleStmt = 9
    RULE_opt_in_database = 10
    RULE_alterRoleSetStmt = 11
    RULE_alterUserStmt = 12
    RULE_alterUserSetStmt = 13
    RULE_dropRoleStmt = 14
    RULE_dropUserStmt = 15
    RULE_createGroupStmt = 16
    RULE_alterGroupStmt = 17
    RULE_add_drop = 18
    RULE_dropGroupStmt = 19
    RULE_createSchemaStmt = 20
    RULE_optSchemaName = 21
    RULE_optSchemaEltList = 22
    RULE_schema_stmt = 23
    RULE_variableSetStmt = 24
    RULE_set_rest = 25
    RULE_set_rest_more = 26
    RULE_var_name = 27
    RULE_var_list = 28
    RULE_var_value = 29
    RULE_iso_level = 30
    RULE_opt_boolean_or_string = 31
    RULE_zone_value = 32
    RULE_opt_encoding = 33
    RULE_colId_or_Sconst = 34
    RULE_variableResetStmt = 35
    RULE_setResetClause = 36
    RULE_functionsetResetClause = 37
    RULE_variableShowStmt = 38
    RULE_constraintsSetStmt = 39
    RULE_constraints_set_list = 40
    RULE_constraints_set_mode = 41
    RULE_checkPointStmt = 42
    RULE_discardStmt = 43
    RULE_alterTableStmt = 44
    RULE_alter_table_cmds = 45
    RULE_alter_table_cmd = 46
    RULE_alter_column_default = 47
    RULE_opt_drop_behavior = 48
    RULE_opt_collate_clause = 49
    RULE_alter_using = 50
    RULE_reloptions = 51
    RULE_opt_reloptions = 52
    RULE_reloption_list = 53
    RULE_reloption_elem = 54
    RULE_alterCompositeTypeStmt = 55
    RULE_alter_type_cmds = 56
    RULE_alter_type_cmd = 57
    RULE_closePortalStmt = 58
    RULE_copyStmt = 59
    RULE_copy_from = 60
    RULE_copy_file_name = 61
    RULE_copy_options = 62
    RULE_copy_opt_list = 63
    RULE_copy_opt_item = 64
    RULE_opt_binary = 65
    RULE_opt_oids = 66
    RULE_copy_delimiter = 67
    RULE_opt_using = 68
    RULE_copy_generic_opt_list = 69
    RULE_copy_generic_opt_elem = 70
    RULE_copy_generic_opt_arg = 71
    RULE_copy_generic_opt_arg_list = 72
    RULE_copy_generic_opt_arg_list_item = 73
    RULE_createStmt = 74
    RULE_optTemp = 75
    RULE_opttableElementList = 76
    RULE_opttypedtableElementList = 77
    RULE_tableElementList = 78
    RULE_typedtableElementList = 79
    RULE_tableElement = 80
    RULE_typedtableElement = 81
    RULE_columnDef = 82
    RULE_columnOptions = 83
    RULE_colQualList = 84
    RULE_colConstraint = 85
    RULE_colconstraintElem = 86
    RULE_constraintAttr = 87
    RULE_tableLikeClause = 88
    RULE_tableLikeOptionList = 89
    RULE_tableLikeOption = 90
    RULE_tableConstraint = 91
    RULE_constraintElem = 92
    RULE_opt_no_inherit = 93
    RULE_opt_column_list = 94
    RULE_columnList = 95
    RULE_columnElem = 96
    RULE_key_match = 97
    RULE_exclusionConstraintList = 98
    RULE_exclusionconstraintElem = 99
    RULE_exclusionWhereClause = 100
    RULE_key_actions = 101
    RULE_key_update = 102
    RULE_key_delete = 103
    RULE_key_action = 104
    RULE_optInherit = 105
    RULE_optWith = 106
    RULE_onCommitOption = 107
    RULE_optTableSpace = 108
    RULE_optConsTableSpace = 109
    RULE_existingIndex = 110
    RULE_createAsStmt = 111
    RULE_create_as_target = 112
    RULE_opt_with_data = 113
    RULE_createSeqStmt = 114
    RULE_alterSeqStmt = 115
    RULE_optseqOptList = 116
    RULE_seqOptList = 117
    RULE_seqOptElem = 118
    RULE_opt_by = 119
    RULE_numericOnly = 120
    RULE_numericOnly_list = 121
    RULE_createPLangStmt = 122
    RULE_opt_trusted = 123
    RULE_handler_name = 124
    RULE_opt_inline_handler = 125
    RULE_validator_clause = 126
    RULE_opt_validator = 127
    RULE_dropPLangStmt = 128
    RULE_opt_procedural = 129
    RULE_createTableSpaceStmt = 130
    RULE_optTableSpaceOwner = 131
    RULE_dropTableSpaceStmt = 132
    RULE_createExtensionStmt = 133
    RULE_create_extension_opt_list = 134
    RULE_create_extension_opt_item = 135
    RULE_alterExtensionStmt = 136
    RULE_alter_extension_opt_list = 137
    RULE_alter_extension_opt_item = 138
    RULE_alterExtensionContentsStmt = 139
    RULE_createFdwStmt = 140
    RULE_fdw_option = 141
    RULE_fdw_options = 142
    RULE_opt_fdw_options = 143
    RULE_dropFdwStmt = 144
    RULE_alterFdwStmt = 145
    RULE_create_generic_options = 146
    RULE_generic_option_list = 147
    RULE_alter_generic_options = 148
    RULE_alter_generic_option_list = 149
    RULE_alter_generic_option_elem = 150
    RULE_generic_option_elem = 151
    RULE_generic_option_name = 152
    RULE_generic_option_arg = 153
    RULE_createForeignServerStmt = 154
    RULE_opt_type = 155
    RULE_foreign_server_version = 156
    RULE_opt_foreign_server_version = 157
    RULE_dropForeignServerStmt = 158
    RULE_alterForeignServerStmt = 159
    RULE_createForeignTableStmt = 160
    RULE_optforeigntableElementList = 161
    RULE_foreigntableElementList = 162
    RULE_foreigntableElement = 163
    RULE_alterForeignTableStmt = 164
    RULE_createUserMappingStmt = 165
    RULE_auth_ident = 166
    RULE_dropUserMappingStmt = 167
    RULE_alterUserMappingStmt = 168
    RULE_createTrigStmt = 169
    RULE_triggerActionTime = 170
    RULE_triggerEvents = 171
    RULE_triggerOneEvent = 172
    RULE_triggerForSpec = 173
    RULE_triggerForOptEach = 174
    RULE_triggerForType = 175
    RULE_triggerWhen = 176
    RULE_triggerFuncArgs = 177
    RULE_triggerFuncArg = 178
    RULE_optConstrFromTable = 179
    RULE_constraintAttributeSpec = 180
    RULE_constraintAttributeElem = 181
    RULE_dropTrigStmt = 182
    RULE_createAssertStmt = 183
    RULE_dropAssertStmt = 184
    RULE_defineStmt = 185
    RULE_definition = 186
    RULE_def_list = 187
    RULE_def_elem = 188
    RULE_def_arg = 189
    RULE_aggr_args = 190
    RULE_old_aggr_definition = 191
    RULE_old_aggr_list = 192
    RULE_old_aggr_elem = 193
    RULE_opt_enum_val_list = 194
    RULE_enum_val_list = 195
    RULE_alterEnumStmt = 196
    RULE_createOpClassStmt = 197
    RULE_opclass_item_list = 198
    RULE_opclass_item = 199
    RULE_opt_default = 200
    RULE_opt_opfamily = 201
    RULE_opclass_purpose = 202
    RULE_opt_recheck = 203
    RULE_createOpFamilyStmt = 204
    RULE_alterOpFamilyStmt = 205
    RULE_opclass_drop_list = 206
    RULE_opclass_drop = 207
    RULE_dropOpClassStmt = 208
    RULE_dropOpFamilyStmt = 209
    RULE_dropOwnedStmt = 210
    RULE_reassignOwnedStmt = 211
    RULE_dropStmt = 212
    RULE_drop_type = 213
    RULE_any_name_list = 214
    RULE_any_name = 215
    RULE_attrs = 216
    RULE_truncateStmt = 217
    RULE_opt_restart_seqs = 218
    RULE_commentStmt = 219
    RULE_comment_type = 220
    RULE_comment_text = 221
    RULE_secLabelStmt = 222
    RULE_opt_provider = 223
    RULE_security_label_type = 224
    RULE_security_label = 225
    RULE_fetchStmt = 226
    RULE_fetch_args = 227
    RULE_from_in = 228
    RULE_opt_from_in = 229
    RULE_grantStmt = 230
    RULE_revokeStmt = 231
    RULE_privileges = 232
    RULE_privilege_list = 233
    RULE_privilege = 234
    RULE_privilege_target = 235
    RULE_grantee_list = 236
    RULE_grantee = 237
    RULE_opt_grant_grant_option = 238
    RULE_function_with_argtypes_list = 239
    RULE_function_with_argtypes = 240
    RULE_grantRoleStmt = 241
    RULE_revokeRoleStmt = 242
    RULE_opt_grant_admin_option = 243
    RULE_opt_granted_by = 244
    RULE_alterDefaultPrivilegesStmt = 245
    RULE_defACLOptionList = 246
    RULE_defACLOption = 247
    RULE_defACLAction = 248
    RULE_defacl_privilege_target = 249
    RULE_indexStmt = 250
    RULE_opt_unique = 251
    RULE_opt_concurrently = 252
    RULE_opt_index_name = 253
    RULE_access_method_clause = 254
    RULE_index_params = 255
    RULE_index_elem = 256
    RULE_opt_collate = 257
    RULE_opt_class = 258
    RULE_opt_asc_desc = 259
    RULE_opt_nulls_order = 260
    RULE_createFunctionStmt = 261
    RULE_opt_or_replace = 262
    RULE_func_args = 263
    RULE_func_args_list = 264
    RULE_func_args_with_defaults = 265
    RULE_func_args_with_defaults_list = 266
    RULE_func_arg = 267
    RULE_arg_class = 268
    RULE_param_name = 269
    RULE_func_return = 270
    RULE_func_type = 271
    RULE_func_arg_with_default = 272
    RULE_createfunc_opt_list = 273
    RULE_common_func_opt_item = 274
    RULE_createfunc_opt_item = 275
    RULE_func_as = 276
    RULE_opt_definition = 277
    RULE_table_func_column = 278
    RULE_table_func_column_list = 279
    RULE_alterFunctionStmt = 280
    RULE_alterfunc_opt_list = 281
    RULE_opt_restrict = 282
    RULE_removeFuncStmt = 283
    RULE_removeAggrStmt = 284
    RULE_removeOperStmt = 285
    RULE_oper_argtypes = 286
    RULE_any_operator = 287
    RULE_doStmt = 288
    RULE_dostmt_opt_list = 289
    RULE_dostmt_opt_item = 290
    RULE_createCastStmt = 291
    RULE_cast_context = 292
    RULE_dropCastStmt = 293
    RULE_opt_if_exists = 294
    RULE_reindexStmt = 295
    RULE_reindex_type = 296
    RULE_opt_force = 297
    RULE_renameStmt = 298
    RULE_opt_column = 299
    RULE_opt_set_data = 300
    RULE_alterObjectSchemaStmt = 301
    RULE_alterOwnerStmt = 302
    RULE_ruleStmt = 303
    RULE_ruleActionList = 304
    RULE_ruleActionMulti = 305
    RULE_ruleActionStmt = 306
    RULE_ruleActionStmtOrEmpty = 307
    RULE_event = 308
    RULE_opt_instead = 309
    RULE_dropruleStmt = 310
    RULE_notifyStmt = 311
    RULE_notify_payload = 312
    RULE_listenStmt = 313
    RULE_unlistenStmt = 314
    RULE_transactionStmt = 315
    RULE_opt_transaction = 316
    RULE_transaction_mode_item = 317
    RULE_transaction_mode_list = 318
    RULE_transaction_mode_list_or_empty = 319
    RULE_viewStmt = 320
    RULE_opt_check_option = 321
    RULE_loadStmt = 322
    RULE_createdbStmt = 323
    RULE_createdb_opt_list = 324
    RULE_createdb_opt_item = 325
    RULE_opt_equal = 326
    RULE_alterDatabaseStmt = 327
    RULE_alterDatabaseSetStmt = 328
    RULE_alterdb_opt_list = 329
    RULE_alterdb_opt_item = 330
    RULE_dropdbStmt = 331
    RULE_createDomainStmt = 332
    RULE_alterDomainStmt = 333
    RULE_opt_as = 334
    RULE_alterTSDictionaryStmt = 335
    RULE_alterTSConfigurationStmt = 336
    RULE_createConversionStmt = 337
    RULE_clusterStmt = 338
    RULE_cluster_index_specification = 339
    RULE_vacuumStmt = 340
    RULE_vacuum_option_list = 341
    RULE_vacuum_option_elem = 342
    RULE_analyzeStmt = 343
    RULE_analyze_keyword = 344
    RULE_opt_verbose = 345
    RULE_opt_full = 346
    RULE_opt_freeze = 347
    RULE_opt_name_list = 348
    RULE_explainStmt = 349
    RULE_explainableStmt = 350
    RULE_explain_option_list = 351
    RULE_explain_option_elem = 352
    RULE_explain_option_name = 353
    RULE_explain_option_arg = 354
    RULE_prepareStmt = 355
    RULE_prep_type_clause = 356
    RULE_preparableStmt = 357
    RULE_executeStmt = 358
    RULE_execute_param_clause = 359
    RULE_deallocateStmt = 360
    RULE_insertStmt = 361
    RULE_insert_rest = 362
    RULE_insert_column_list = 363
    RULE_insert_column_item = 364
    RULE_returning_clause = 365
    RULE_deleteStmt = 366
    RULE_using_clause = 367
    RULE_lockStmt = 368
    RULE_opt_lock = 369
    RULE_lock_type = 370
    RULE_opt_nowait = 371
    RULE_updateStmt = 372
    RULE_set_clause_list = 373
    RULE_set_clause = 374
    RULE_single_set_clause = 375
    RULE_multiple_set_clause = 376
    RULE_set_target = 377
    RULE_set_target_list = 378
    RULE_declareCursorStmt = 379
    RULE_cursor_name = 380
    RULE_cursor_options = 381
    RULE_opt_hold = 382
    RULE_selectStmt = 383
    RULE_select_with_parens = 384
    RULE_select_no_parens = 385
    RULE_select_clause = 386
    RULE_simple_select = 387
    RULE_with_clause = 388
    RULE_cte_list = 389
    RULE_common_table_expr = 390
    RULE_opt_with_clause = 391
    RULE_into_clause = 392
    RULE_optTempTableName = 393
    RULE_opt_table = 394
    RULE_opt_all = 395
    RULE_opt_distinct = 396
    RULE_opt_sort_clause = 397
    RULE_sort_clause = 398
    RULE_sortby_list = 399
    RULE_sortby = 400
    RULE_select_limit = 401
    RULE_opt_select_limit = 402
    RULE_limit_clause = 403
    RULE_offset_clause = 404
    RULE_select_limit_value = 405
    RULE_select_offset_value = 406
    RULE_opt_select_fetch_first_value = 407
    RULE_select_offset_value2 = 408
    RULE_row_or_rows = 409
    RULE_first_or_next = 410
    RULE_group_clause = 411
    RULE_having_clause = 412
    RULE_for_locking_clause = 413
    RULE_opt_for_locking_clause = 414
    RULE_for_locking_items = 415
    RULE_for_locking_item = 416
    RULE_locked_rels_list = 417
    RULE_values_clause = 418
    RULE_from_clause = 419
    RULE_from_list = 420
    RULE_table_ref = 421
    RULE_table_ref2 = 422
    RULE_joined_table = 423
    RULE_alias_clause = 424
    RULE_join_type = 425
    RULE_join_qual = 426
    RULE_relation_expr = 427
    RULE_relation_expr_list = 428
    RULE_relation_expr_opt_alias = 429
    RULE_func_table = 430
    RULE_where_clause = 431
    RULE_where_or_current_clause = 432
    RULE_opttableFuncElementList = 433
    RULE_tableFuncElementList = 434
    RULE_tableFuncElement = 435
    RULE_typename = 436
    RULE_opt_array_bounds = 437
    RULE_simpletypename = 438
    RULE_consttypename = 439
    RULE_genericType = 440
    RULE_opt_type_modifiers = 441
    RULE_numeric = 442
    RULE_opt_float = 443
    RULE_bit = 444
    RULE_constbit = 445
    RULE_bitWithLength = 446
    RULE_bitWithoutLength = 447
    RULE_character = 448
    RULE_constcharacter = 449
    RULE_characterWithLength = 450
    RULE_characterWithoutLength = 451
    RULE_character_def = 452
    RULE_opt_varying = 453
    RULE_opt_charset = 454
    RULE_constDatetime = 455
    RULE_constInterval = 456
    RULE_opt_timezone = 457
    RULE_opt_interval = 458
    RULE_interval_second = 459
    RULE_a_expr = 460
    RULE_b_expr = 461
    RULE_c_expr = 462
    RULE_func_expr = 463
    RULE_xml_root_version = 464
    RULE_opt_xml_root_standalone = 465
    RULE_xml_attributes = 466
    RULE_xml_attribute_list = 467
    RULE_xml_attribute_el = 468
    RULE_document_or_content = 469
    RULE_xml_whitespace_option = 470
    RULE_xmlexists_argument = 471
    RULE_window_clause = 472
    RULE_window_definition_list = 473
    RULE_window_definition = 474
    RULE_over_clause = 475
    RULE_window_specification = 476
    RULE_opt_existing_window_name = 477
    RULE_opt_partition_clause = 478
    RULE_opt_frame_clause = 479
    RULE_frame_extent = 480
    RULE_frame_bound = 481
    RULE_row = 482
    RULE_sub_type = 483
    RULE_all_Op = 484
    RULE_mathOp = 485
    RULE_qual_Op = 486
    RULE_qual_all_Op = 487
    RULE_subquery_Op = 488
    RULE_expr_list = 489
    RULE_func_arg_list = 490
    RULE_func_arg_expr = 491
    RULE_type_list = 492
    RULE_array_expr = 493
    RULE_array_expr_list = 494
    RULE_extract_list = 495
    RULE_extract_arg = 496
    RULE_overlay_list = 497
    RULE_overlay_placing = 498
    RULE_position_list = 499
    RULE_substr_list = 500
    RULE_substr_from = 501
    RULE_substr_for = 502
    RULE_trim_list = 503
    RULE_in_expr = 504
    RULE_case_expr = 505
    RULE_when_clause_list = 506
    RULE_when_clause = 507
    RULE_case_default = 508
    RULE_case_arg = 509
    RULE_columnref = 510
    RULE_indirection_el = 511
    RULE_indirection = 512
    RULE_opt_indirection = 513
    RULE_opt_asymmetric = 514
    RULE_ctext_expr = 515
    RULE_ctext_expr_list = 516
    RULE_ctext_row = 517
    RULE_target_list = 518
    RULE_target_el = 519
    RULE_qualified_name_list = 520
    RULE_qualified_name = 521
    RULE_name_list = 522
    RULE_name = 523
    RULE_database_name = 524
    RULE_access_method = 525
    RULE_attr_name = 526
    RULE_index_name = 527
    RULE_file_name = 528
    RULE_func_name = 529
    RULE_aexprConst = 530
    RULE_iConst = 531
    RULE_sConst = 532
    RULE_roleId = 533
    RULE_signedIconst = 534
    RULE_colId = 535
    RULE_type_function_name = 536
    RULE_colLabel = 537
    RULE_unreserved_keyword = 538
    RULE_col_name_keyword = 539
    RULE_type_func_name_keyword = 540
    RULE_reserved_keyword = 541

    ruleNames =  [ u"stmtblock", u"stmtmulti", u"stmt", u"createRoleStmt", 
                   u"optRoleList", u"alteroptRoleList", u"alterOptRoleElem", 
                   u"createOptRoleElem", u"createUserStmt", u"alterRoleStmt", 
                   u"opt_in_database", u"alterRoleSetStmt", u"alterUserStmt", 
                   u"alterUserSetStmt", u"dropRoleStmt", u"dropUserStmt", 
                   u"createGroupStmt", u"alterGroupStmt", u"add_drop", u"dropGroupStmt", 
                   u"createSchemaStmt", u"optSchemaName", u"optSchemaEltList", 
                   u"schema_stmt", u"variableSetStmt", u"set_rest", u"set_rest_more", 
                   u"var_name", u"var_list", u"var_value", u"iso_level", 
                   u"opt_boolean_or_string", u"zone_value", u"opt_encoding", 
                   u"colId_or_Sconst", u"variableResetStmt", u"setResetClause", 
                   u"functionsetResetClause", u"variableShowStmt", u"constraintsSetStmt", 
                   u"constraints_set_list", u"constraints_set_mode", u"checkPointStmt", 
                   u"discardStmt", u"alterTableStmt", u"alter_table_cmds", 
                   u"alter_table_cmd", u"alter_column_default", u"opt_drop_behavior", 
                   u"opt_collate_clause", u"alter_using", u"reloptions", 
                   u"opt_reloptions", u"reloption_list", u"reloption_elem", 
                   u"alterCompositeTypeStmt", u"alter_type_cmds", u"alter_type_cmd", 
                   u"closePortalStmt", u"copyStmt", u"copy_from", u"copy_file_name", 
                   u"copy_options", u"copy_opt_list", u"copy_opt_item", 
                   u"opt_binary", u"opt_oids", u"copy_delimiter", u"opt_using", 
                   u"copy_generic_opt_list", u"copy_generic_opt_elem", u"copy_generic_opt_arg", 
                   u"copy_generic_opt_arg_list", u"copy_generic_opt_arg_list_item", 
                   u"createStmt", u"optTemp", u"opttableElementList", u"opttypedtableElementList", 
                   u"tableElementList", u"typedtableElementList", u"tableElement", 
                   u"typedtableElement", u"columnDef", u"columnOptions", 
                   u"colQualList", u"colConstraint", u"colconstraintElem", 
                   u"constraintAttr", u"tableLikeClause", u"tableLikeOptionList", 
                   u"tableLikeOption", u"tableConstraint", u"constraintElem", 
                   u"opt_no_inherit", u"opt_column_list", u"columnList", 
                   u"columnElem", u"key_match", u"exclusionConstraintList", 
                   u"exclusionconstraintElem", u"exclusionWhereClause", 
                   u"key_actions", u"key_update", u"key_delete", u"key_action", 
                   u"optInherit", u"optWith", u"onCommitOption", u"optTableSpace", 
                   u"optConsTableSpace", u"existingIndex", u"createAsStmt", 
                   u"create_as_target", u"opt_with_data", u"createSeqStmt", 
                   u"alterSeqStmt", u"optseqOptList", u"seqOptList", u"seqOptElem", 
                   u"opt_by", u"numericOnly", u"numericOnly_list", u"createPLangStmt", 
                   u"opt_trusted", u"handler_name", u"opt_inline_handler", 
                   u"validator_clause", u"opt_validator", u"dropPLangStmt", 
                   u"opt_procedural", u"createTableSpaceStmt", u"optTableSpaceOwner", 
                   u"dropTableSpaceStmt", u"createExtensionStmt", u"create_extension_opt_list", 
                   u"create_extension_opt_item", u"alterExtensionStmt", 
                   u"alter_extension_opt_list", u"alter_extension_opt_item", 
                   u"alterExtensionContentsStmt", u"createFdwStmt", u"fdw_option", 
                   u"fdw_options", u"opt_fdw_options", u"dropFdwStmt", u"alterFdwStmt", 
                   u"create_generic_options", u"generic_option_list", u"alter_generic_options", 
                   u"alter_generic_option_list", u"alter_generic_option_elem", 
                   u"generic_option_elem", u"generic_option_name", u"generic_option_arg", 
                   u"createForeignServerStmt", u"opt_type", u"foreign_server_version", 
                   u"opt_foreign_server_version", u"dropForeignServerStmt", 
                   u"alterForeignServerStmt", u"createForeignTableStmt", 
                   u"optforeigntableElementList", u"foreigntableElementList", 
                   u"foreigntableElement", u"alterForeignTableStmt", u"createUserMappingStmt", 
                   u"auth_ident", u"dropUserMappingStmt", u"alterUserMappingStmt", 
                   u"createTrigStmt", u"triggerActionTime", u"triggerEvents", 
                   u"triggerOneEvent", u"triggerForSpec", u"triggerForOptEach", 
                   u"triggerForType", u"triggerWhen", u"triggerFuncArgs", 
                   u"triggerFuncArg", u"optConstrFromTable", u"constraintAttributeSpec", 
                   u"constraintAttributeElem", u"dropTrigStmt", u"createAssertStmt", 
                   u"dropAssertStmt", u"defineStmt", u"definition", u"def_list", 
                   u"def_elem", u"def_arg", u"aggr_args", u"old_aggr_definition", 
                   u"old_aggr_list", u"old_aggr_elem", u"opt_enum_val_list", 
                   u"enum_val_list", u"alterEnumStmt", u"createOpClassStmt", 
                   u"opclass_item_list", u"opclass_item", u"opt_default", 
                   u"opt_opfamily", u"opclass_purpose", u"opt_recheck", 
                   u"createOpFamilyStmt", u"alterOpFamilyStmt", u"opclass_drop_list", 
                   u"opclass_drop", u"dropOpClassStmt", u"dropOpFamilyStmt", 
                   u"dropOwnedStmt", u"reassignOwnedStmt", u"dropStmt", 
                   u"drop_type", u"any_name_list", u"any_name", u"attrs", 
                   u"truncateStmt", u"opt_restart_seqs", u"commentStmt", 
                   u"comment_type", u"comment_text", u"secLabelStmt", u"opt_provider", 
                   u"security_label_type", u"security_label", u"fetchStmt", 
                   u"fetch_args", u"from_in", u"opt_from_in", u"grantStmt", 
                   u"revokeStmt", u"privileges", u"privilege_list", u"privilege", 
                   u"privilege_target", u"grantee_list", u"grantee", u"opt_grant_grant_option", 
                   u"function_with_argtypes_list", u"function_with_argtypes", 
                   u"grantRoleStmt", u"revokeRoleStmt", u"opt_grant_admin_option", 
                   u"opt_granted_by", u"alterDefaultPrivilegesStmt", u"defACLOptionList", 
                   u"defACLOption", u"defACLAction", u"defacl_privilege_target", 
                   u"indexStmt", u"opt_unique", u"opt_concurrently", u"opt_index_name", 
                   u"access_method_clause", u"index_params", u"index_elem", 
                   u"opt_collate", u"opt_class", u"opt_asc_desc", u"opt_nulls_order", 
                   u"createFunctionStmt", u"opt_or_replace", u"func_args", 
                   u"func_args_list", u"func_args_with_defaults", u"func_args_with_defaults_list", 
                   u"func_arg", u"arg_class", u"param_name", u"func_return", 
                   u"func_type", u"func_arg_with_default", u"createfunc_opt_list", 
                   u"common_func_opt_item", u"createfunc_opt_item", u"func_as", 
                   u"opt_definition", u"table_func_column", u"table_func_column_list", 
                   u"alterFunctionStmt", u"alterfunc_opt_list", u"opt_restrict", 
                   u"removeFuncStmt", u"removeAggrStmt", u"removeOperStmt", 
                   u"oper_argtypes", u"any_operator", u"doStmt", u"dostmt_opt_list", 
                   u"dostmt_opt_item", u"createCastStmt", u"cast_context", 
                   u"dropCastStmt", u"opt_if_exists", u"reindexStmt", u"reindex_type", 
                   u"opt_force", u"renameStmt", u"opt_column", u"opt_set_data", 
                   u"alterObjectSchemaStmt", u"alterOwnerStmt", u"ruleStmt", 
                   u"ruleActionList", u"ruleActionMulti", u"ruleActionStmt", 
                   u"ruleActionStmtOrEmpty", u"event", u"opt_instead", u"dropruleStmt", 
                   u"notifyStmt", u"notify_payload", u"listenStmt", u"unlistenStmt", 
                   u"transactionStmt", u"opt_transaction", u"transaction_mode_item", 
                   u"transaction_mode_list", u"transaction_mode_list_or_empty", 
                   u"viewStmt", u"opt_check_option", u"loadStmt", u"createdbStmt", 
                   u"createdb_opt_list", u"createdb_opt_item", u"opt_equal", 
                   u"alterDatabaseStmt", u"alterDatabaseSetStmt", u"alterdb_opt_list", 
                   u"alterdb_opt_item", u"dropdbStmt", u"createDomainStmt", 
                   u"alterDomainStmt", u"opt_as", u"alterTSDictionaryStmt", 
                   u"alterTSConfigurationStmt", u"createConversionStmt", 
                   u"clusterStmt", u"cluster_index_specification", u"vacuumStmt", 
                   u"vacuum_option_list", u"vacuum_option_elem", u"analyzeStmt", 
                   u"analyze_keyword", u"opt_verbose", u"opt_full", u"opt_freeze", 
                   u"opt_name_list", u"explainStmt", u"explainableStmt", 
                   u"explain_option_list", u"explain_option_elem", u"explain_option_name", 
                   u"explain_option_arg", u"prepareStmt", u"prep_type_clause", 
                   u"preparableStmt", u"executeStmt", u"execute_param_clause", 
                   u"deallocateStmt", u"insertStmt", u"insert_rest", u"insert_column_list", 
                   u"insert_column_item", u"returning_clause", u"deleteStmt", 
                   u"using_clause", u"lockStmt", u"opt_lock", u"lock_type", 
                   u"opt_nowait", u"updateStmt", u"set_clause_list", u"set_clause", 
                   u"single_set_clause", u"multiple_set_clause", u"set_target", 
                   u"set_target_list", u"declareCursorStmt", u"cursor_name", 
                   u"cursor_options", u"opt_hold", u"selectStmt", u"select_with_parens", 
                   u"select_no_parens", u"select_clause", u"simple_select", 
                   u"with_clause", u"cte_list", u"common_table_expr", u"opt_with_clause", 
                   u"into_clause", u"optTempTableName", u"opt_table", u"opt_all", 
                   u"opt_distinct", u"opt_sort_clause", u"sort_clause", 
                   u"sortby_list", u"sortby", u"select_limit", u"opt_select_limit", 
                   u"limit_clause", u"offset_clause", u"select_limit_value", 
                   u"select_offset_value", u"opt_select_fetch_first_value", 
                   u"select_offset_value2", u"row_or_rows", u"first_or_next", 
                   u"group_clause", u"having_clause", u"for_locking_clause", 
                   u"opt_for_locking_clause", u"for_locking_items", u"for_locking_item", 
                   u"locked_rels_list", u"values_clause", u"from_clause", 
                   u"from_list", u"table_ref", u"table_ref2", u"joined_table", 
                   u"alias_clause", u"join_type", u"join_qual", u"relation_expr", 
                   u"relation_expr_list", u"relation_expr_opt_alias", u"func_table", 
                   u"where_clause", u"where_or_current_clause", u"opttableFuncElementList", 
                   u"tableFuncElementList", u"tableFuncElement", u"typename", 
                   u"opt_array_bounds", u"simpletypename", u"consttypename", 
                   u"genericType", u"opt_type_modifiers", u"numeric", u"opt_float", 
                   u"bit", u"constbit", u"bitWithLength", u"bitWithoutLength", 
                   u"character", u"constcharacter", u"characterWithLength", 
                   u"characterWithoutLength", u"character_def", u"opt_varying", 
                   u"opt_charset", u"constDatetime", u"constInterval", u"opt_timezone", 
                   u"opt_interval", u"interval_second", u"a_expr", u"b_expr", 
                   u"c_expr", u"func_expr", u"xml_root_version", u"opt_xml_root_standalone", 
                   u"xml_attributes", u"xml_attribute_list", u"xml_attribute_el", 
                   u"document_or_content", u"xml_whitespace_option", u"xmlexists_argument", 
                   u"window_clause", u"window_definition_list", u"window_definition", 
                   u"over_clause", u"window_specification", u"opt_existing_window_name", 
                   u"opt_partition_clause", u"opt_frame_clause", u"frame_extent", 
                   u"frame_bound", u"row", u"sub_type", u"all_Op", u"mathOp", 
                   u"qual_Op", u"qual_all_Op", u"subquery_Op", u"expr_list", 
                   u"func_arg_list", u"func_arg_expr", u"type_list", u"array_expr", 
                   u"array_expr_list", u"extract_list", u"extract_arg", 
                   u"overlay_list", u"overlay_placing", u"position_list", 
                   u"substr_list", u"substr_from", u"substr_for", u"trim_list", 
                   u"in_expr", u"case_expr", u"when_clause_list", u"when_clause", 
                   u"case_default", u"case_arg", u"columnref", u"indirection_el", 
                   u"indirection", u"opt_indirection", u"opt_asymmetric", 
                   u"ctext_expr", u"ctext_expr_list", u"ctext_row", u"target_list", 
                   u"target_el", u"qualified_name_list", u"qualified_name", 
                   u"name_list", u"name", u"database_name", u"access_method", 
                   u"attr_name", u"index_name", u"file_name", u"func_name", 
                   u"aexprConst", u"iConst", u"sConst", u"roleId", u"signedIconst", 
                   u"colId", u"type_function_name", u"colLabel", u"unreserved_keyword", 
                   u"col_name_keyword", u"type_func_name_keyword", u"reserved_keyword" ]

    def __init__(self, input):
        super(SqlParser, self).__init__(input)
        self.checkVersion("4.2.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StmtblockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.StmtblockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(SqlParser.StmtmultiContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_stmtblock

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterStmtblock(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitStmtblock(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitStmtblock(self)
            else:
                return visitor.visitChildren(self)




    def stmtblock(self):

        localctx = SqlParser.StmtblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stmtblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084 
            self.stmtmulti(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtmultiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.StmtmultiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(SqlParser.StmtmultiContext,0)


        def stmt(self):
            return self.getTypedRuleContext(SqlParser.StmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_stmtmulti

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterStmtmulti(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitStmtmulti(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitStmtmulti(self)
            else:
                return visitor.visitChildren(self)



    def stmtmulti(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.StmtmultiContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_stmtmulti, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087 
            self.stmt()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.StmtmultiContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_stmtmulti)
                    self.state = 1089
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1090
                    self.match(self.T__2)
                    self.state = 1091 
                    self.stmt() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.StmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def prepareStmt(self):
            return self.getTypedRuleContext(SqlParser.PrepareStmtContext,0)


        def removeOperStmt(self):
            return self.getTypedRuleContext(SqlParser.RemoveOperStmtContext,0)


        def truncateStmt(self):
            return self.getTypedRuleContext(SqlParser.TruncateStmtContext,0)


        def alterTableStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterTableStmtContext,0)


        def createRoleStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateRoleStmtContext,0)


        def alterOpFamilyStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterOpFamilyStmtContext,0)


        def executeStmt(self):
            return self.getTypedRuleContext(SqlParser.ExecuteStmtContext,0)


        def createOpFamilyStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateOpFamilyStmtContext,0)


        def dropFdwStmt(self):
            return self.getTypedRuleContext(SqlParser.DropFdwStmtContext,0)


        def dropRoleStmt(self):
            return self.getTypedRuleContext(SqlParser.DropRoleStmtContext,0)


        def variableShowStmt(self):
            return self.getTypedRuleContext(SqlParser.VariableShowStmtContext,0)


        def dropTableSpaceStmt(self):
            return self.getTypedRuleContext(SqlParser.DropTableSpaceStmtContext,0)


        def dropUserMappingStmt(self):
            return self.getTypedRuleContext(SqlParser.DropUserMappingStmtContext,0)


        def reassignOwnedStmt(self):
            return self.getTypedRuleContext(SqlParser.ReassignOwnedStmtContext,0)


        def alterUserStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterUserStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(SqlParser.LockStmtContext,0)


        def listenStmt(self):
            return self.getTypedRuleContext(SqlParser.ListenStmtContext,0)


        def createAssertStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateAssertStmtContext,0)


        def checkPointStmt(self):
            return self.getTypedRuleContext(SqlParser.CheckPointStmtContext,0)


        def ruleStmt(self):
            return self.getTypedRuleContext(SqlParser.RuleStmtContext,0)


        def alterSeqStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterSeqStmtContext,0)


        def dropPLangStmt(self):
            return self.getTypedRuleContext(SqlParser.DropPLangStmtContext,0)


        def removeAggrStmt(self):
            return self.getTypedRuleContext(SqlParser.RemoveAggrStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(SqlParser.DiscardStmtContext,0)


        def createConversionStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateConversionStmtContext,0)


        def alterDefaultPrivilegesStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterDefaultPrivilegesStmtContext,0)


        def createGroupStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateGroupStmtContext,0)


        def alterForeignServerStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterForeignServerStmtContext,0)


        def revokeStmt(self):
            return self.getTypedRuleContext(SqlParser.RevokeStmtContext,0)


        def fetchStmt(self):
            return self.getTypedRuleContext(SqlParser.FetchStmtContext,0)


        def createUserStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateUserStmtContext,0)


        def deallocateStmt(self):
            return self.getTypedRuleContext(SqlParser.DeallocateStmtContext,0)


        def alterDatabaseStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterDatabaseStmtContext,0)


        def dropOwnedStmt(self):
            return self.getTypedRuleContext(SqlParser.DropOwnedStmtContext,0)


        def dropOpFamilyStmt(self):
            return self.getTypedRuleContext(SqlParser.DropOpFamilyStmtContext,0)


        def analyzeStmt(self):
            return self.getTypedRuleContext(SqlParser.AnalyzeStmtContext,0)


        def closePortalStmt(self):
            return self.getTypedRuleContext(SqlParser.ClosePortalStmtContext,0)


        def alterTSConfigurationStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterTSConfigurationStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(SqlParser.DeleteStmtContext,0)


        def createFdwStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateFdwStmtContext,0)


        def variableSetStmt(self):
            return self.getTypedRuleContext(SqlParser.VariableSetStmtContext,0)


        def createForeignServerStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateForeignServerStmtContext,0)


        def dropUserStmt(self):
            return self.getTypedRuleContext(SqlParser.DropUserStmtContext,0)


        def constraintsSetStmt(self):
            return self.getTypedRuleContext(SqlParser.ConstraintsSetStmtContext,0)


        def doStmt(self):
            return self.getTypedRuleContext(SqlParser.DoStmtContext,0)


        def renameStmt(self):
            return self.getTypedRuleContext(SqlParser.RenameStmtContext,0)


        def createAsStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateAsStmtContext,0)


        def alterEnumStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterEnumStmtContext,0)


        def viewStmt(self):
            return self.getTypedRuleContext(SqlParser.ViewStmtContext,0)


        def createSeqStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateSeqStmtContext,0)


        def alterFdwStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterFdwStmtContext,0)


        def createdbStmt(self):
            return self.getTypedRuleContext(SqlParser.CreatedbStmtContext,0)


        def indexStmt(self):
            return self.getTypedRuleContext(SqlParser.IndexStmtContext,0)


        def createExtensionStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateExtensionStmtContext,0)


        def createDomainStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateDomainStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(SqlParser.InsertStmtContext,0)


        def alterExtensionContentsStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterExtensionContentsStmtContext,0)


        def alterDatabaseSetStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterDatabaseSetStmtContext,0)


        def alterCompositeTypeStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterCompositeTypeStmtContext,0)


        def notifyStmt(self):
            return self.getTypedRuleContext(SqlParser.NotifyStmtContext,0)


        def dropdbStmt(self):
            return self.getTypedRuleContext(SqlParser.DropdbStmtContext,0)


        def dropCastStmt(self):
            return self.getTypedRuleContext(SqlParser.DropCastStmtContext,0)


        def alterDomainStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterDomainStmtContext,0)


        def clusterStmt(self):
            return self.getTypedRuleContext(SqlParser.ClusterStmtContext,0)


        def grantRoleStmt(self):
            return self.getTypedRuleContext(SqlParser.GrantRoleStmtContext,0)


        def explainStmt(self):
            return self.getTypedRuleContext(SqlParser.ExplainStmtContext,0)


        def dropStmt(self):
            return self.getTypedRuleContext(SqlParser.DropStmtContext,0)


        def dropOpClassStmt(self):
            return self.getTypedRuleContext(SqlParser.DropOpClassStmtContext,0)


        def revokeRoleStmt(self):
            return self.getTypedRuleContext(SqlParser.RevokeRoleStmtContext,0)


        def alterObjectSchemaStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterObjectSchemaStmtContext,0)


        def variableResetStmt(self):
            return self.getTypedRuleContext(SqlParser.VariableResetStmtContext,0)


        def unlistenStmt(self):
            return self.getTypedRuleContext(SqlParser.UnlistenStmtContext,0)


        def alterGroupStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterGroupStmtContext,0)


        def declareCursorStmt(self):
            return self.getTypedRuleContext(SqlParser.DeclareCursorStmtContext,0)


        def createFunctionStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateFunctionStmtContext,0)


        def createCastStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateCastStmtContext,0)


        def alterRoleSetStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterRoleSetStmtContext,0)


        def createTableSpaceStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateTableSpaceStmtContext,0)


        def alterRoleStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterRoleStmtContext,0)


        def removeFuncStmt(self):
            return self.getTypedRuleContext(SqlParser.RemoveFuncStmtContext,0)


        def alterUserSetStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterUserSetStmtContext,0)


        def alterFunctionStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterFunctionStmtContext,0)


        def reindexStmt(self):
            return self.getTypedRuleContext(SqlParser.ReindexStmtContext,0)


        def vacuumStmt(self):
            return self.getTypedRuleContext(SqlParser.VacuumStmtContext,0)


        def createSchemaStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateSchemaStmtContext,0)


        def dropAssertStmt(self):
            return self.getTypedRuleContext(SqlParser.DropAssertStmtContext,0)


        def copyStmt(self):
            return self.getTypedRuleContext(SqlParser.CopyStmtContext,0)


        def createOpClassStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateOpClassStmtContext,0)


        def dropForeignServerStmt(self):
            return self.getTypedRuleContext(SqlParser.DropForeignServerStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(SqlParser.UpdateStmtContext,0)


        def createPLangStmt(self):
            return self.getTypedRuleContext(SqlParser.CreatePLangStmtContext,0)


        def secLabelStmt(self):
            return self.getTypedRuleContext(SqlParser.SecLabelStmtContext,0)


        def alterOwnerStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterOwnerStmtContext,0)


        def dropGroupStmt(self):
            return self.getTypedRuleContext(SqlParser.DropGroupStmtContext,0)


        def dropruleStmt(self):
            return self.getTypedRuleContext(SqlParser.DropruleStmtContext,0)


        def alterTSDictionaryStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterTSDictionaryStmtContext,0)


        def dropTrigStmt(self):
            return self.getTypedRuleContext(SqlParser.DropTrigStmtContext,0)


        def grantStmt(self):
            return self.getTypedRuleContext(SqlParser.GrantStmtContext,0)


        def createForeignTableStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateForeignTableStmtContext,0)


        def transactionStmt(self):
            return self.getTypedRuleContext(SqlParser.TransactionStmtContext,0)


        def alterUserMappingStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterUserMappingStmtContext,0)


        def defineStmt(self):
            return self.getTypedRuleContext(SqlParser.DefineStmtContext,0)


        def alterExtensionStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterExtensionStmtContext,0)


        def createTrigStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateTrigStmtContext,0)


        def commentStmt(self):
            return self.getTypedRuleContext(SqlParser.CommentStmtContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(SqlParser.LoadStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateStmtContext,0)


        def createUserMappingStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateUserMappingStmtContext,0)


        def alterForeignTableStmt(self):
            return self.getTypedRuleContext(SqlParser.AlterForeignTableStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_stmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = SqlParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_stmt)
        try:
            self.state = 1208
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097 
                self.alterDatabaseStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098 
                self.alterDatabaseSetStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099 
                self.alterDefaultPrivilegesStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1100 
                self.alterDomainStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1101 
                self.alterEnumStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1102 
                self.alterExtensionStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1103 
                self.alterExtensionContentsStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1104 
                self.alterFdwStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1105 
                self.alterForeignServerStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1106 
                self.alterForeignTableStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1107 
                self.alterFunctionStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1108 
                self.alterGroupStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1109 
                self.alterObjectSchemaStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1110 
                self.alterOwnerStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1111 
                self.alterSeqStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1112 
                self.alterTableStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1113 
                self.alterCompositeTypeStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1114 
                self.alterRoleSetStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1115 
                self.alterRoleStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1116 
                self.alterTSConfigurationStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1117 
                self.alterTSDictionaryStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1118 
                self.alterUserMappingStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1119 
                self.alterUserSetStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1120 
                self.alterUserStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1121 
                self.analyzeStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1122 
                self.checkPointStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1123 
                self.closePortalStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1124 
                self.clusterStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1125 
                self.commentStmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1126 
                self.constraintsSetStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1127 
                self.copyStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1128 
                self.createAsStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1129 
                self.createAssertStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1130 
                self.createCastStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1131 
                self.createConversionStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1132 
                self.createDomainStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1133 
                self.createExtensionStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1134 
                self.createFdwStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1135 
                self.createForeignServerStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1136 
                self.createForeignTableStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1137 
                self.createFunctionStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1138 
                self.createGroupStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1139 
                self.createOpClassStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1140 
                self.createOpFamilyStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1141 
                self.alterOpFamilyStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1142 
                self.createPLangStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1143 
                self.createSchemaStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1144 
                self.createSeqStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1145 
                self.createStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1146 
                self.createTableSpaceStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1147 
                self.createTrigStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1148 
                self.createRoleStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1149 
                self.createUserStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1150 
                self.createUserMappingStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1151 
                self.createdbStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1152 
                self.deallocateStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1153 
                self.declareCursorStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1154 
                self.defineStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1155 
                self.deleteStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1156 
                self.discardStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1157 
                self.doStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1158 
                self.dropAssertStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1159 
                self.dropCastStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1160 
                self.dropFdwStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1161 
                self.dropForeignServerStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1162 
                self.dropGroupStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1163 
                self.dropOpClassStmt()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1164 
                self.dropOpFamilyStmt()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1165 
                self.dropOwnedStmt()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1166 
                self.dropPLangStmt()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1167 
                self.dropruleStmt()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1168 
                self.dropStmt()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1169 
                self.dropTableSpaceStmt()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1170 
                self.dropTrigStmt()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1171 
                self.dropRoleStmt()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1172 
                self.dropUserStmt()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1173 
                self.dropUserMappingStmt()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1174 
                self.dropdbStmt()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1175 
                self.executeStmt()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1176 
                self.explainStmt()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1177 
                self.fetchStmt()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1178 
                self.grantStmt()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1179 
                self.grantRoleStmt()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1180 
                self.indexStmt()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1181 
                self.insertStmt()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1182 
                self.listenStmt()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1183 
                self.loadStmt()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1184 
                self.lockStmt()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1185 
                self.notifyStmt()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1186 
                self.prepareStmt()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1187 
                self.reassignOwnedStmt()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1188 
                self.reindexStmt()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1189 
                self.removeAggrStmt()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1190 
                self.removeFuncStmt()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1191 
                self.removeOperStmt()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1192 
                self.renameStmt()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1193 
                self.revokeStmt()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1194 
                self.revokeRoleStmt()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1195 
                self.ruleStmt()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1196 
                self.secLabelStmt()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1197 
                self.selectStmt()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1198 
                self.transactionStmt()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1199 
                self.truncateStmt()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1200 
                self.unlistenStmt()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1201 
                self.updateStmt()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1202 
                self.vacuumStmt()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1203 
                self.variableResetStmt()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1204 
                self.variableSetStmt()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1205 
                self.variableShowStmt()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1206 
                self.viewStmt()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(SqlParser.OptRoleListContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def createRoleStmt(self):

        localctx = SqlParser.CreateRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_createRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(self.CREATE)
            self.state = 1211
            self.match(self.ROLE)
            self.state = 1212 
            self.roleId()
            self.state = 1214
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(self.WITH)


            self.state = 1216 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptRoleListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptRoleListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optRoleList(self):
            return self.getTypedRuleContext(SqlParser.OptRoleListContext,0)


        def createOptRoleElem(self):
            return self.getTypedRuleContext(SqlParser.CreateOptRoleElemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optRoleList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptRoleList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptRoleList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptRoleList(self)
            else:
                return visitor.visitChildren(self)



    def optRoleList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.OptRoleListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_optRoleList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1223
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.OptRoleListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_optRoleList)
                    self.state = 1219
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1220 
                    self.createOptRoleElem() 
                self.state = 1225
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlteroptRoleListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlteroptRoleListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alterOptRoleElem(self):
            return self.getTypedRuleContext(SqlParser.AlterOptRoleElemContext,0)


        def alteroptRoleList(self):
            return self.getTypedRuleContext(SqlParser.AlteroptRoleListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alteroptRoleList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlteroptRoleList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlteroptRoleList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlteroptRoleList(self)
            else:
                return visitor.visitChildren(self)



    def alteroptRoleList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.AlteroptRoleListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_alteroptRoleList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1231
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.AlteroptRoleListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alteroptRoleList)
                    self.state = 1227
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1228 
                    self.alterOptRoleElem() 
                self.state = 1233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterOptRoleElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterOptRoleElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SqlParser.LIMIT, 0)

        def UNENCRYPTED(self):
            return self.getToken(SqlParser.UNENCRYPTED, 0)

        def ENCRYPTED(self):
            return self.getToken(SqlParser.ENCRYPTED, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(SqlParser.PASSWORD, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def VALID(self):
            return self.getToken(SqlParser.VALID, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def UNTIL(self):
            return self.getToken(SqlParser.UNTIL, 0)

        def INHERIT(self):
            return self.getToken(SqlParser.INHERIT, 0)

        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def CONNECTION(self):
            return self.getToken(SqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterOptRoleElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterOptRoleElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterOptRoleElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterOptRoleElem(self)
            else:
                return visitor.visitChildren(self)




    def alterOptRoleElem(self):

        localctx = SqlParser.AlterOptRoleElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alterOptRoleElem)
        try:
            self.state = 1254
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.match(self.PASSWORD)
                self.state = 1235 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1236
                self.match(self.PASSWORD)
                self.state = 1237
                self.match(self.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1238
                self.match(self.ENCRYPTED)
                self.state = 1239
                self.match(self.PASSWORD)
                self.state = 1240 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1241
                self.match(self.UNENCRYPTED)
                self.state = 1242
                self.match(self.PASSWORD)
                self.state = 1243 
                self.sConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1244
                self.match(self.INHERIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1245
                self.match(self.CONNECTION)
                self.state = 1246
                self.match(self.LIMIT)
                self.state = 1247 
                self.signedIconst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1248
                self.match(self.VALID)
                self.state = 1249
                self.match(self.UNTIL)
                self.state = 1250 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1251
                self.match(self.USER)
                self.state = 1252 
                self.name_list(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1253
                self.match(self.IDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOptRoleElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateOptRoleElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def ADMIN(self):
            return self.getToken(SqlParser.ADMIN, 0)

        def SYSID(self):
            return self.getToken(SqlParser.SYSID, 0)

        def alterOptRoleElem(self):
            return self.getTypedRuleContext(SqlParser.AlterOptRoleElemContext,0)


        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createOptRoleElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateOptRoleElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateOptRoleElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateOptRoleElem(self)
            else:
                return visitor.visitChildren(self)




    def createOptRoleElem(self):

        localctx = SqlParser.CreateOptRoleElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createOptRoleElem)
        try:
            self.state = 1269
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1256 
                self.alterOptRoleElem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                self.match(self.SYSID)
                self.state = 1258 
                self.iConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1259
                self.match(self.ADMIN)
                self.state = 1260 
                self.name_list(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1261
                self.match(self.ROLE)
                self.state = 1262 
                self.name_list(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1263
                self.match(self.IN_P)
                self.state = 1264
                self.match(self.ROLE)
                self.state = 1265 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1266
                self.match(self.IN_P)
                self.state = 1267
                self.match(self.GROUP_P)
                self.state = 1268 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(SqlParser.OptRoleListContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createUserStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def createUserStmt(self):

        localctx = SqlParser.CreateUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createUserStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(self.CREATE)
            self.state = 1272
            self.match(self.USER)
            self.state = 1273 
            self.roleId()
            self.state = 1275
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1274
                self.match(self.WITH)


            self.state = 1277 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def alteroptRoleList(self):
            return self.getTypedRuleContext(SqlParser.AlteroptRoleListContext,0)


        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterRoleStmt(self):

        localctx = SqlParser.AlterRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alterRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(self.ALTER)
            self.state = 1280
            self.match(self.ROLE)
            self.state = 1281 
            self.roleId()
            self.state = 1283
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 1282
                self.match(self.WITH)


            self.state = 1285 
            self.alteroptRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_in_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_in_databaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_in_database

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_in_database(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_in_database(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_in_database(self)
            else:
                return visitor.visitChildren(self)




    def opt_in_database(self):

        localctx = SqlParser.Opt_in_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_opt_in_database)
        try:
            self.state = 1291
            token = self._input.LA(1)
            if token in [self.RESET, self.SET]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.IN_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.match(self.IN_P)
                self.state = 1289
                self.match(self.DATABASE)
                self.state = 1290 
                self.database_name()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterRoleSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterRoleSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def opt_in_database(self):
            return self.getTypedRuleContext(SqlParser.Opt_in_databaseContext,0)


        def setResetClause(self):
            return self.getTypedRuleContext(SqlParser.SetResetClauseContext,0)


        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterRoleSetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterRoleSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterRoleSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterRoleSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterRoleSetStmt(self):

        localctx = SqlParser.AlterRoleSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alterRoleSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(self.ALTER)
            self.state = 1294
            self.match(self.ROLE)
            self.state = 1295 
            self.roleId()
            self.state = 1296 
            self.opt_in_database()
            self.state = 1297 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def alteroptRoleList(self):
            return self.getTypedRuleContext(SqlParser.AlteroptRoleListContext,0)


        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterUserStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserStmt(self):

        localctx = SqlParser.AlterUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterUserStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(self.ALTER)
            self.state = 1300
            self.match(self.USER)
            self.state = 1301 
            self.roleId()
            self.state = 1303
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 1302
                self.match(self.WITH)


            self.state = 1305 
            self.alteroptRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterUserSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def setResetClause(self):
            return self.getTypedRuleContext(SqlParser.SetResetClauseContext,0)


        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterUserSetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterUserSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterUserSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterUserSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserSetStmt(self):

        localctx = SqlParser.AlterUserSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_alterUserSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(self.ALTER)
            self.state = 1308
            self.match(self.USER)
            self.state = 1309 
            self.roleId()
            self.state = 1310 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropRoleStmt(self):

        localctx = SqlParser.DropRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_dropRoleStmt)
        try:
            self.state = 1320
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1312
                self.match(self.DROP)
                self.state = 1313
                self.match(self.ROLE)
                self.state = 1314 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.match(self.DROP)
                self.state = 1316
                self.match(self.ROLE)
                self.state = 1317
                self.match(self.IF_P)
                self.state = 1318
                self.match(self.EXISTS)
                self.state = 1319 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropUserStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropUserStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropUserStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropUserStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropUserStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropUserStmt(self):

        localctx = SqlParser.DropUserStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_dropUserStmt)
        try:
            self.state = 1330
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.match(self.DROP)
                self.state = 1323
                self.match(self.USER)
                self.state = 1324 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(self.DROP)
                self.state = 1326
                self.match(self.USER)
                self.state = 1327
                self.match(self.IF_P)
                self.state = 1328
                self.match(self.EXISTS)
                self.state = 1329 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optRoleList(self):
            return self.getTypedRuleContext(SqlParser.OptRoleListContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def createGroupStmt(self):

        localctx = SqlParser.CreateGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createGroupStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(self.CREATE)
            self.state = 1333
            self.match(self.GROUP_P)
            self.state = 1334 
            self.roleId()
            self.state = 1336
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 1335
                self.match(self.WITH)


            self.state = 1338 
            self.optRoleList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def add_drop(self):
            return self.getTypedRuleContext(SqlParser.Add_dropContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterGroupStmt(self):

        localctx = SqlParser.AlterGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alterGroupStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.match(self.ALTER)
            self.state = 1341
            self.match(self.GROUP_P)
            self.state = 1342 
            self.roleId()
            self.state = 1343 
            self.add_drop()
            self.state = 1344
            self.match(self.USER)
            self.state = 1345 
            self.name_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_dropContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Add_dropContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_add_drop

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAdd_drop(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAdd_drop(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAdd_drop(self)
            else:
                return visitor.visitChildren(self)




    def add_drop(self):

        localctx = SqlParser.Add_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_add_drop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            _la = self._input.LA(1)
            if not(_la==SqlParser.ADD_P or _la==SqlParser.DROP):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropGroupStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropGroupStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropGroupStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropGroupStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropGroupStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropGroupStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropGroupStmt(self):

        localctx = SqlParser.DropGroupStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_dropGroupStmt)
        try:
            self.state = 1357
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.match(self.DROP)
                self.state = 1350
                self.match(self.GROUP_P)
                self.state = 1351 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.match(self.DROP)
                self.state = 1353
                self.match(self.GROUP_P)
                self.state = 1354
                self.match(self.IF_P)
                self.state = 1355
                self.match(self.EXISTS)
                self.state = 1356 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateSchemaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateSchemaStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optSchemaEltList(self):
            return self.getTypedRuleContext(SqlParser.OptSchemaEltListContext,0)


        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def optSchemaName(self):
            return self.getTypedRuleContext(SqlParser.OptSchemaNameContext,0)


        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def AUTHORIZATION(self):
            return self.getToken(SqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createSchemaStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateSchemaStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateSchemaStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateSchemaStmt(self)
            else:
                return visitor.visitChildren(self)




    def createSchemaStmt(self):

        localctx = SqlParser.CreateSchemaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createSchemaStmt)
        try:
            self.state = 1371
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.match(self.CREATE)
                self.state = 1360
                self.match(self.SCHEMA)
                self.state = 1361 
                self.optSchemaName()
                self.state = 1362
                self.match(self.AUTHORIZATION)
                self.state = 1363 
                self.roleId()
                self.state = 1364 
                self.optSchemaEltList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.match(self.CREATE)
                self.state = 1367
                self.match(self.SCHEMA)
                self.state = 1368 
                self.colId()
                self.state = 1369 
                self.optSchemaEltList(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptSchemaNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptSchemaNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optSchemaName

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptSchemaName(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptSchemaName(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptSchemaName(self)
            else:
                return visitor.visitChildren(self)




    def optSchemaName(self):

        localctx = SqlParser.OptSchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_optSchemaName)
        try:
            self.state = 1375
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373 
                self.colId()

            elif token in [self.AUTHORIZATION]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptSchemaEltListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptSchemaEltListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optSchemaEltList(self):
            return self.getTypedRuleContext(SqlParser.OptSchemaEltListContext,0)


        def schema_stmt(self):
            return self.getTypedRuleContext(SqlParser.Schema_stmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optSchemaEltList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptSchemaEltList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptSchemaEltList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptSchemaEltList(self)
            else:
                return visitor.visitChildren(self)



    def optSchemaEltList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.OptSchemaEltListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_optSchemaEltList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.OptSchemaEltListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_optSchemaEltList)
                    self.state = 1378
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1379 
                    self.schema_stmt() 
                self.state = 1384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Schema_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Schema_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def grantStmt(self):
            return self.getTypedRuleContext(SqlParser.GrantStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateStmtContext,0)


        def viewStmt(self):
            return self.getTypedRuleContext(SqlParser.ViewStmtContext,0)


        def createSeqStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateSeqStmtContext,0)


        def createTrigStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateTrigStmtContext,0)


        def indexStmt(self):
            return self.getTypedRuleContext(SqlParser.IndexStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_schema_stmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSchema_stmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSchema_stmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSchema_stmt(self)
            else:
                return visitor.visitChildren(self)




    def schema_stmt(self):

        localctx = SqlParser.Schema_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_schema_stmt)
        try:
            self.state = 1391
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1385 
                self.createStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1386 
                self.indexStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1387 
                self.createSeqStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1388 
                self.createTrigStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1389 
                self.grantStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1390 
                self.viewStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.VariableSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def set_rest(self):
            return self.getTypedRuleContext(SqlParser.Set_restContext,0)


        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_variableSetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVariableSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVariableSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVariableSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableSetStmt(self):

        localctx = SqlParser.VariableSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_variableSetStmt)
        try:
            self.state = 1401
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.match(self.SET)
                self.state = 1394 
                self.set_rest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(self.SET)
                self.state = 1396
                self.match(self.LOCAL)
                self.state = 1397 
                self.set_rest()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1398
                self.match(self.SET)
                self.state = 1399
                self.match(self.SESSION)
                self.state = 1400 
                self.set_rest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_restContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_restContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(SqlParser.Set_rest_moreContext,0)


        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def transaction_mode_list(self):
            return self.getTypedRuleContext(SqlParser.Transaction_mode_listContext,0)


        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def CHARACTERISTICS(self):
            return self.getToken(SqlParser.CHARACTERISTICS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_set_rest

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_rest(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_rest(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_rest(self)
            else:
                return visitor.visitChildren(self)




    def set_rest(self):

        localctx = SqlParser.Set_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_set_rest)
        try:
            self.state = 1411
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.match(self.TRANSACTION)
                self.state = 1404 
                self.transaction_mode_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.match(self.SESSION)
                self.state = 1406
                self.match(self.CHARACTERISTICS)
                self.state = 1407
                self.match(self.AS)
                self.state = 1408
                self.match(self.TRANSACTION)
                self.state = 1409 
                self.transaction_mode_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1410 
                self.set_rest_more()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_rest_moreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_rest_moreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def var_name(self):
            return self.getTypedRuleContext(SqlParser.Var_nameContext,0)


        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def zone_value(self):
            return self.getTypedRuleContext(SqlParser.Zone_valueContext,0)


        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def var_list(self):
            return self.getTypedRuleContext(SqlParser.Var_listContext,0)


        def XML_P(self):
            return self.getToken(SqlParser.XML_P, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlParser.AUTHORIZATION, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def NAMES(self):
            return self.getToken(SqlParser.NAMES, 0)

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def CATALOG_P(self):
            return self.getToken(SqlParser.CATALOG_P, 0)

        def opt_encoding(self):
            return self.getTypedRuleContext(SqlParser.Opt_encodingContext,0)


        def CURRENT_P(self):
            return self.getToken(SqlParser.CURRENT_P, 0)

        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(SqlParser.Document_or_contentContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def SNAPSHOT(self):
            return self.getToken(SqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_set_rest_more

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_rest_more(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_rest_more(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_rest_more(self)
            else:
                return visitor.visitChildren(self)




    def set_rest_more(self):

        localctx = SqlParser.Set_rest_moreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_set_rest_more)
        try:
            self.state = 1456
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1413 
                self.var_name(0)
                self.state = 1414
                self.match(self.TO)
                self.state = 1415 
                self.var_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1417 
                self.var_name(0)
                self.state = 1418
                self.match(self.T__3)
                self.state = 1419 
                self.var_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1421 
                self.var_name(0)
                self.state = 1422
                self.match(self.TO)
                self.state = 1423
                self.match(self.DEFAULT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1425 
                self.var_name(0)
                self.state = 1426
                self.match(self.T__3)
                self.state = 1427
                self.match(self.DEFAULT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1429 
                self.var_name(0)
                self.state = 1430
                self.match(self.FROM)
                self.state = 1431
                self.match(self.CURRENT_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1433
                self.match(self.TIME)
                self.state = 1434
                self.match(self.ZONE)
                self.state = 1435 
                self.zone_value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1436
                self.match(self.CATALOG_P)
                self.state = 1437 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1438
                self.match(self.SCHEMA)
                self.state = 1439 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1440
                self.match(self.NAMES)
                self.state = 1441 
                self.opt_encoding()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1442
                self.match(self.ROLE)
                self.state = 1443 
                self.colId_or_Sconst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1444
                self.match(self.SESSION)
                self.state = 1445
                self.match(self.AUTHORIZATION)
                self.state = 1446 
                self.colId_or_Sconst()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1447
                self.match(self.SESSION)
                self.state = 1448
                self.match(self.AUTHORIZATION)
                self.state = 1449
                self.match(self.DEFAULT)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1450
                self.match(self.XML_P)
                self.state = 1451
                self.match(self.OPTION)
                self.state = 1452 
                self.document_or_content()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1453
                self.match(self.TRANSACTION)
                self.state = 1454
                self.match(self.SNAPSHOT)
                self.state = 1455 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Var_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(SqlParser.Var_nameContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_var_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVar_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVar_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVar_name(self)
            else:
                return visitor.visitChildren(self)



    def var_name(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Var_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_var_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459 
            self.colId()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Var_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_var_name)
                    self.state = 1461
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1462
                    self.match(self.T__12)
                    self.state = 1463 
                    self.colId() 
                self.state = 1468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Var_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Var_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_value(self):
            return self.getTypedRuleContext(SqlParser.Var_valueContext,0)


        def var_list(self):
            return self.getTypedRuleContext(SqlParser.Var_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_var_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVar_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVar_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVar_list(self)
            else:
                return visitor.visitChildren(self)



    def var_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Var_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_var_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470 
            self.var_value()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Var_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_var_list)
                    self.state = 1472
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1473
                    self.match(self.T__11)
                    self.state = 1474 
                    self.var_value() 
                self.state = 1479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Var_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Var_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(SqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_var_value

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVar_value(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVar_value(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVar_value(self)
            else:
                return visitor.visitChildren(self)




    def var_value(self):

        localctx = SqlParser.Var_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_var_value)
        try:
            self.state = 1482
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.ON, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1480 
                self.opt_boolean_or_string()

            elif token in [self.T__10, self.T__8, self.ICONST, self.FCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1481 
                self.numericOnly()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iso_levelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Iso_levelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(SqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(SqlParser.COMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlParser.SERIALIZABLE, 0)

        def READ(self):
            return self.getToken(SqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlParser.UNCOMMITTED, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_iso_level

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIso_level(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIso_level(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIso_level(self)
            else:
                return visitor.visitChildren(self)




    def iso_level(self):

        localctx = SqlParser.Iso_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_iso_level)
        try:
            self.state = 1491
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                self.match(self.READ)
                self.state = 1485
                self.match(self.UNCOMMITTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1486
                self.match(self.READ)
                self.state = 1487
                self.match(self.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1488
                self.match(self.REPEATABLE)
                self.state = 1489
                self.match(self.READ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1490
                self.match(self.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_boolean_or_stringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_boolean_or_stringContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def TRUE_P(self):
            return self.getToken(SqlParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(SqlParser.FALSE_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_boolean_or_string

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_boolean_or_string(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_boolean_or_string(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_boolean_or_string(self)
            else:
                return visitor.visitChildren(self)




    def opt_boolean_or_string(self):

        localctx = SqlParser.Opt_boolean_or_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_opt_boolean_or_string)
        try:
            self.state = 1497
            token = self._input.LA(1)
            if token in [self.TRUE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1493
                self.match(self.TRUE_P)

            elif token in [self.FALSE_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                self.match(self.FALSE_P)

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1495
                self.match(self.ON)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1496 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Zone_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Zone_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_interval(self):
            return self.getTypedRuleContext(SqlParser.Opt_intervalContext,0)


        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(SqlParser.ConstIntervalContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_zone_value

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterZone_value(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitZone_value(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitZone_value(self)
            else:
                return visitor.visitChildren(self)




    def zone_value(self):

        localctx = SqlParser.Zone_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_zone_value)
        try:
            self.state = 1515
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.match(self.IDENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1501 
                self.constInterval()
                self.state = 1502 
                self.sConst()
                self.state = 1503 
                self.opt_interval()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1505 
                self.constInterval()
                self.state = 1506
                self.match(self.T__6)
                self.state = 1507 
                self.iConst()
                self.state = 1508
                self.match(self.T__13)
                self.state = 1509 
                self.sConst()
                self.state = 1510 
                self.opt_interval()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1512 
                self.numericOnly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1513
                self.match(self.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1514
                self.match(self.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_encodingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_encodingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_encoding

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_encoding(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_encoding(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_encoding(self)
            else:
                return visitor.visitChildren(self)




    def opt_encoding(self):

        localctx = SqlParser.Opt_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_opt_encoding)
        try:
            self.state = 1520
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.match(self.DEFAULT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColId_or_SconstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColId_or_SconstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_colId_or_Sconst

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColId_or_Sconst(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColId_or_Sconst(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColId_or_Sconst(self)
            else:
                return visitor.visitChildren(self)




    def colId_or_Sconst(self):

        localctx = SqlParser.ColId_or_SconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_colId_or_Sconst)
        try:
            self.state = 1524
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522 
                self.colId()

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1523 
                self.sConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableResetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.VariableResetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SqlParser.RESET, 0)

        def var_name(self):
            return self.getTypedRuleContext(SqlParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def LEVEL(self):
            return self.getToken(SqlParser.LEVEL, 0)

        def ISOLATION(self):
            return self.getToken(SqlParser.ISOLATION, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_variableResetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVariableResetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVariableResetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVariableResetStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableResetStmt(self):

        localctx = SqlParser.VariableResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableResetStmt)
        try:
            self.state = 1540
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.match(self.RESET)
                self.state = 1527 
                self.var_name(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1528
                self.match(self.RESET)
                self.state = 1529
                self.match(self.TIME)
                self.state = 1530
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1531
                self.match(self.RESET)
                self.state = 1532
                self.match(self.TRANSACTION)
                self.state = 1533
                self.match(self.ISOLATION)
                self.state = 1534
                self.match(self.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1535
                self.match(self.RESET)
                self.state = 1536
                self.match(self.SESSION)
                self.state = 1537
                self.match(self.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1538
                self.match(self.RESET)
                self.state = 1539
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetResetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SetResetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def variableResetStmt(self):
            return self.getTypedRuleContext(SqlParser.VariableResetStmtContext,0)


        def set_rest(self):
            return self.getTypedRuleContext(SqlParser.Set_restContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_setResetClause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSetResetClause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSetResetClause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSetResetClause(self)
            else:
                return visitor.visitChildren(self)




    def setResetClause(self):

        localctx = SqlParser.SetResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_setResetClause)
        try:
            self.state = 1545
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.match(self.SET)
                self.state = 1543 
                self.set_rest()

            elif token in [self.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1544 
                self.variableResetStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsetResetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.FunctionsetResetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(SqlParser.Set_rest_moreContext,0)


        def variableResetStmt(self):
            return self.getTypedRuleContext(SqlParser.VariableResetStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_functionsetResetClause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunctionsetResetClause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunctionsetResetClause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunctionsetResetClause(self)
            else:
                return visitor.visitChildren(self)




    def functionsetResetClause(self):

        localctx = SqlParser.FunctionsetResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionsetResetClause)
        try:
            self.state = 1550
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1547
                self.match(self.SET)
                self.state = 1548 
                self.set_rest_more()

            elif token in [self.RESET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549 
                self.variableResetStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableShowStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.VariableShowStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(SqlParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def LEVEL(self):
            return self.getToken(SqlParser.LEVEL, 0)

        def ISOLATION(self):
            return self.getToken(SqlParser.ISOLATION, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def SHOW(self):
            return self.getToken(SqlParser.SHOW, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_variableShowStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVariableShowStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVariableShowStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVariableShowStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableShowStmt(self):

        localctx = SqlParser.VariableShowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableShowStmt)
        try:
            self.state = 1566
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1552
                self.match(self.SHOW)
                self.state = 1553 
                self.var_name(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.match(self.SHOW)
                self.state = 1555
                self.match(self.TIME)
                self.state = 1556
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1557
                self.match(self.SHOW)
                self.state = 1558
                self.match(self.TRANSACTION)
                self.state = 1559
                self.match(self.ISOLATION)
                self.state = 1560
                self.match(self.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1561
                self.match(self.SHOW)
                self.state = 1562
                self.match(self.SESSION)
                self.state = 1563
                self.match(self.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1564
                self.match(self.SHOW)
                self.state = 1565
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintsSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstraintsSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def constraints_set_list(self):
            return self.getTypedRuleContext(SqlParser.Constraints_set_listContext,0)


        def CONSTRAINTS(self):
            return self.getToken(SqlParser.CONSTRAINTS, 0)

        def constraints_set_mode(self):
            return self.getTypedRuleContext(SqlParser.Constraints_set_modeContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constraintsSetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraintsSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraintsSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraintsSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def constraintsSetStmt(self):

        localctx = SqlParser.ConstraintsSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_constraintsSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self.match(self.SET)
            self.state = 1569
            self.match(self.CONSTRAINTS)
            self.state = 1570 
            self.constraints_set_list()
            self.state = 1571 
            self.constraints_set_mode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraints_set_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Constraints_set_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(SqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constraints_set_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraints_set_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraints_set_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraints_set_list(self)
            else:
                return visitor.visitChildren(self)




    def constraints_set_list(self):

        localctx = SqlParser.Constraints_set_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constraints_set_list)
        try:
            self.state = 1575
            token = self._input.LA(1)
            if token in [self.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.match(self.ALL)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1574 
                self.qualified_name_list(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraints_set_modeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Constraints_set_modeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(SqlParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_constraints_set_mode

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraints_set_mode(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraints_set_mode(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraints_set_mode(self)
            else:
                return visitor.visitChildren(self)




    def constraints_set_mode(self):

        localctx = SqlParser.Constraints_set_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_constraints_set_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            _la = self._input.LA(1)
            if not(_la==SqlParser.DEFERRED or _la==SqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CheckPointStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CheckPointStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECKPOINT(self):
            return self.getToken(SqlParser.CHECKPOINT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_checkPointStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCheckPointStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCheckPointStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCheckPointStmt(self)
            else:
                return visitor.visitChildren(self)




    def checkPointStmt(self):

        localctx = SqlParser.CheckPointStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_checkPointStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(self.CHECKPOINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DiscardStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(SqlParser.DISCARD, 0)

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def PLANS(self):
            return self.getToken(SqlParser.PLANS, 0)

        def TEMPORARY(self):
            return self.getToken(SqlParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(SqlParser.TEMP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_discardStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDiscardStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDiscardStmt(self)
            else:
                return visitor.visitChildren(self)




    def discardStmt(self):

        localctx = SqlParser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_discardStmt)
        try:
            self.state = 1589
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.match(self.DISCARD)
                self.state = 1582
                self.match(self.ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1583
                self.match(self.DISCARD)
                self.state = 1584
                self.match(self.TEMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1585
                self.match(self.DISCARD)
                self.state = 1586
                self.match(self.TEMPORARY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1587
                self.match(self.DISCARD)
                self.state = 1588
                self.match(self.PLANS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def alter_table_cmds(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_cmdsContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterTableStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTableStmt(self):

        localctx = SqlParser.AlterTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alterTableStmt)
        try:
            self.state = 1639
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.match(self.ALTER)
                self.state = 1592
                self.match(self.TABLE)
                self.state = 1593 
                self.relation_expr()
                self.state = 1594 
                self.alter_table_cmds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.match(self.ALTER)
                self.state = 1597
                self.match(self.TABLE)
                self.state = 1598
                self.match(self.IF_P)
                self.state = 1599
                self.match(self.EXISTS)
                self.state = 1600 
                self.relation_expr()
                self.state = 1601 
                self.alter_table_cmds(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.match(self.ALTER)
                self.state = 1604
                self.match(self.INDEX)
                self.state = 1605 
                self.qualified_name()
                self.state = 1606 
                self.alter_table_cmds(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1608
                self.match(self.ALTER)
                self.state = 1609
                self.match(self.INDEX)
                self.state = 1610
                self.match(self.IF_P)
                self.state = 1611
                self.match(self.EXISTS)
                self.state = 1612 
                self.qualified_name()
                self.state = 1613 
                self.alter_table_cmds(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1615
                self.match(self.ALTER)
                self.state = 1616
                self.match(self.SEQUENCE)
                self.state = 1617 
                self.qualified_name()
                self.state = 1618 
                self.alter_table_cmds(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1620
                self.match(self.ALTER)
                self.state = 1621
                self.match(self.SEQUENCE)
                self.state = 1622
                self.match(self.IF_P)
                self.state = 1623
                self.match(self.EXISTS)
                self.state = 1624 
                self.qualified_name()
                self.state = 1625 
                self.alter_table_cmds(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1627
                self.match(self.ALTER)
                self.state = 1628
                self.match(self.VIEW)
                self.state = 1629 
                self.qualified_name()
                self.state = 1630 
                self.alter_table_cmds(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1632
                self.match(self.ALTER)
                self.state = 1633
                self.match(self.VIEW)
                self.state = 1634
                self.match(self.IF_P)
                self.state = 1635
                self.match(self.EXISTS)
                self.state = 1636 
                self.qualified_name()
                self.state = 1637 
                self.alter_table_cmds(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_cmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_table_cmdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_cmd(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_cmdContext,0)


        def alter_table_cmds(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_cmdsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_table_cmds

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_table_cmds(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_table_cmds(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_table_cmds(self)
            else:
                return visitor.visitChildren(self)



    def alter_table_cmds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alter_table_cmdsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_alter_table_cmds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642 
            self.alter_table_cmd()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alter_table_cmdsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_table_cmds)
                    self.state = 1644
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1645
                    self.match(self.T__11)
                    self.state = 1646 
                    self.alter_table_cmd() 
                self.state = 1651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_table_cmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_table_cmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SqlParser.RESET, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def colId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ColIdContext)
            else:
                return self.getTypedRuleContext(SqlParser.ColIdContext,i)


        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def tableConstraint(self):
            return self.getTypedRuleContext(SqlParser.TableConstraintContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def opt_collate_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_collate_clauseContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def columnDef(self):
            return self.getTypedRuleContext(SqlParser.ColumnDefContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_optionsContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(SqlParser.STATISTICS, 0)

        def OWNER(self):
            return self.getToken(SqlParser.OWNER, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def COLUMN(self):
            return self.getToken(SqlParser.COLUMN, 0)

        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def RULE(self):
            return self.getToken(SqlParser.RULE, 0)

        def VALIDATE(self):
            return self.getToken(SqlParser.VALIDATE, 0)

        def alter_column_default(self):
            return self.getTypedRuleContext(SqlParser.Alter_column_defaultContext,0)


        def opt_column(self):
            return self.getTypedRuleContext(SqlParser.Opt_columnContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def INHERIT(self):
            return self.getToken(SqlParser.INHERIT, 0)

        def CLUSTER(self):
            return self.getToken(SqlParser.CLUSTER, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def alter_using(self):
            return self.getTypedRuleContext(SqlParser.Alter_usingContext,0)


        def opt_set_data(self):
            return self.getTypedRuleContext(SqlParser.Opt_set_dataContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def ENABLE_P(self):
            return self.getToken(SqlParser.ENABLE_P, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def STORAGE(self):
            return self.getToken(SqlParser.STORAGE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def ALWAYS(self):
            return self.getToken(SqlParser.ALWAYS, 0)

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def reloptions(self):
            return self.getTypedRuleContext(SqlParser.ReloptionsContext,0)


        def DISABLE_P(self):
            return self.getToken(SqlParser.DISABLE_P, 0)

        def OIDS(self):
            return self.getToken(SqlParser.OIDS, 0)

        def REPLICA(self):
            return self.getToken(SqlParser.REPLICA, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_table_cmd

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_table_cmd(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_table_cmd(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_table_cmd(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_cmd(self):

        localctx = SqlParser.Alter_table_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alter_table_cmd)
        try:
            self.state = 1817
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.match(self.ADD_P)
                self.state = 1653 
                self.columnDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                self.match(self.ADD_P)
                self.state = 1655
                self.match(self.COLUMN)
                self.state = 1656 
                self.columnDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.match(self.ALTER)
                self.state = 1658 
                self.opt_column()
                self.state = 1659 
                self.colId()
                self.state = 1660 
                self.alter_column_default()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1662
                self.match(self.ALTER)
                self.state = 1663 
                self.opt_column()
                self.state = 1664 
                self.colId()
                self.state = 1665
                self.match(self.DROP)
                self.state = 1666
                self.match(self.NOT)
                self.state = 1667
                self.match(self.NULL_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1669
                self.match(self.ALTER)
                self.state = 1670 
                self.opt_column()
                self.state = 1671 
                self.colId()
                self.state = 1672
                self.match(self.SET)
                self.state = 1673
                self.match(self.NOT)
                self.state = 1674
                self.match(self.NULL_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1676
                self.match(self.ALTER)
                self.state = 1677 
                self.opt_column()
                self.state = 1678 
                self.colId()
                self.state = 1679
                self.match(self.SET)
                self.state = 1680
                self.match(self.STATISTICS)
                self.state = 1681 
                self.signedIconst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1683
                self.match(self.ALTER)
                self.state = 1684 
                self.opt_column()
                self.state = 1685 
                self.colId()
                self.state = 1686
                self.match(self.SET)
                self.state = 1687 
                self.reloptions()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1689
                self.match(self.ALTER)
                self.state = 1690 
                self.opt_column()
                self.state = 1691 
                self.colId()
                self.state = 1692
                self.match(self.RESET)
                self.state = 1693 
                self.reloptions()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1695
                self.match(self.ALTER)
                self.state = 1696 
                self.opt_column()
                self.state = 1697 
                self.colId()
                self.state = 1698
                self.match(self.SET)
                self.state = 1699
                self.match(self.STORAGE)
                self.state = 1700 
                self.colId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1702
                self.match(self.DROP)
                self.state = 1703 
                self.opt_column()
                self.state = 1704
                self.match(self.IF_P)
                self.state = 1705
                self.match(self.EXISTS)
                self.state = 1706 
                self.colId()
                self.state = 1707 
                self.opt_drop_behavior()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1709
                self.match(self.DROP)
                self.state = 1710 
                self.opt_column()
                self.state = 1711 
                self.colId()
                self.state = 1712 
                self.opt_drop_behavior()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1714
                self.match(self.ALTER)
                self.state = 1715 
                self.opt_column()
                self.state = 1716 
                self.colId()
                self.state = 1717 
                self.opt_set_data()
                self.state = 1718
                self.match(self.TYPE_P)
                self.state = 1719 
                self.typename()
                self.state = 1720 
                self.opt_collate_clause()
                self.state = 1721 
                self.alter_using()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1723
                self.match(self.ALTER)
                self.state = 1724 
                self.opt_column()
                self.state = 1725 
                self.colId()
                self.state = 1726 
                self.alter_generic_options()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1728
                self.match(self.ADD_P)
                self.state = 1729 
                self.tableConstraint()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1730
                self.match(self.VALIDATE)
                self.state = 1731
                self.match(self.CONSTRAINT)
                self.state = 1732 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1733
                self.match(self.DROP)
                self.state = 1734
                self.match(self.CONSTRAINT)
                self.state = 1735
                self.match(self.IF_P)
                self.state = 1736
                self.match(self.EXISTS)
                self.state = 1737 
                self.name()
                self.state = 1738 
                self.opt_drop_behavior()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1740
                self.match(self.DROP)
                self.state = 1741
                self.match(self.CONSTRAINT)
                self.state = 1742 
                self.name()
                self.state = 1743 
                self.opt_drop_behavior()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1745
                self.match(self.SET)
                self.state = 1746
                self.match(self.WITH)
                self.state = 1747
                self.match(self.OIDS)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1748
                self.match(self.SET)
                self.state = 1749
                self.match(self.WITHOUT)
                self.state = 1750
                self.match(self.OIDS)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1751
                self.match(self.CLUSTER)
                self.state = 1752
                self.match(self.ON)
                self.state = 1753 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1754
                self.match(self.SET)
                self.state = 1755
                self.match(self.WITHOUT)
                self.state = 1756
                self.match(self.CLUSTER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1757
                self.match(self.ENABLE_P)
                self.state = 1758
                self.match(self.TRIGGER)
                self.state = 1759 
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1760
                self.match(self.ENABLE_P)
                self.state = 1761
                self.match(self.ALWAYS)
                self.state = 1762
                self.match(self.TRIGGER)
                self.state = 1763 
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1764
                self.match(self.ENABLE_P)
                self.state = 1765
                self.match(self.REPLICA)
                self.state = 1766
                self.match(self.TRIGGER)
                self.state = 1767 
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1768
                self.match(self.ENABLE_P)
                self.state = 1769
                self.match(self.TRIGGER)
                self.state = 1770
                self.match(self.ALL)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1771
                self.match(self.ENABLE_P)
                self.state = 1772
                self.match(self.TRIGGER)
                self.state = 1773
                self.match(self.USER)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1774
                self.match(self.DISABLE_P)
                self.state = 1775
                self.match(self.TRIGGER)
                self.state = 1776 
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1777
                self.match(self.DISABLE_P)
                self.state = 1778
                self.match(self.TRIGGER)
                self.state = 1779
                self.match(self.ALL)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1780
                self.match(self.DISABLE_P)
                self.state = 1781
                self.match(self.TRIGGER)
                self.state = 1782
                self.match(self.USER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1783
                self.match(self.ENABLE_P)
                self.state = 1784
                self.match(self.RULE)
                self.state = 1785 
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1786
                self.match(self.ENABLE_P)
                self.state = 1787
                self.match(self.ALWAYS)
                self.state = 1788
                self.match(self.RULE)
                self.state = 1789 
                self.name()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1790
                self.match(self.ENABLE_P)
                self.state = 1791
                self.match(self.REPLICA)
                self.state = 1792
                self.match(self.RULE)
                self.state = 1793 
                self.name()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1794
                self.match(self.DISABLE_P)
                self.state = 1795
                self.match(self.RULE)
                self.state = 1796 
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1797
                self.match(self.INHERIT)
                self.state = 1798 
                self.qualified_name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1799
                self.match(self.NO)
                self.state = 1800
                self.match(self.INHERIT)
                self.state = 1801 
                self.qualified_name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1802
                self.match(self.OF)
                self.state = 1803 
                self.any_name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1804
                self.match(self.NOT)
                self.state = 1805
                self.match(self.OF)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1806
                self.match(self.OWNER)
                self.state = 1807
                self.match(self.TO)
                self.state = 1808 
                self.roleId()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1809
                self.match(self.SET)
                self.state = 1810
                self.match(self.TABLESPACE)
                self.state = 1811 
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1812
                self.match(self.SET)
                self.state = 1813 
                self.reloptions()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1814
                self.match(self.RESET)
                self.state = 1815 
                self.reloptions()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1816 
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_column_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_column_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_column_default

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_column_default(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_column_default(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_column_default(self)
            else:
                return visitor.visitChildren(self)




    def alter_column_default(self):

        localctx = SqlParser.Alter_column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_column_default)
        try:
            self.state = 1824
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.match(self.SET)
                self.state = 1820
                self.match(self.DEFAULT)
                self.state = 1821 
                self.a_expr(0)

            elif token in [self.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1822
                self.match(self.DROP)
                self.state = 1823
                self.match(self.DEFAULT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_drop_behaviorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_drop_behaviorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(SqlParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_drop_behavior

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_drop_behavior(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_drop_behavior(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_drop_behavior(self)
            else:
                return visitor.visitChildren(self)




    def opt_drop_behavior(self):

        localctx = SqlParser.Opt_drop_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_opt_drop_behavior)
        try:
            self.state = 1829
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.match(self.CASCADE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1827
                self.match(self.RESTRICT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_collate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_collate_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def COLLATE(self):
            return self.getToken(SqlParser.COLLATE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_collate_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_collate_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_collate_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_collate_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_collate_clause(self):

        localctx = SqlParser.Opt_collate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_opt_collate_clause)
        try:
            self.state = 1834
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1831
                self.match(self.COLLATE)
                self.state = 1832 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_usingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_usingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_using

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_using(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_using(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_using(self)
            else:
                return visitor.visitChildren(self)




    def alter_using(self):

        localctx = SqlParser.Alter_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alter_using)
        try:
            self.state = 1839
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.match(self.USING)
                self.state = 1837 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReloptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ReloptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloption_list(self):
            return self.getTypedRuleContext(SqlParser.Reloption_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reloptions

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReloptions(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReloptions(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReloptions(self)
            else:
                return visitor.visitChildren(self)




    def reloptions(self):

        localctx = SqlParser.ReloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_reloptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.match(self.T__6)
            self.state = 1842 
            self.reloption_list(0)
            self.state = 1843
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_reloptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_reloptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloptions(self):
            return self.getTypedRuleContext(SqlParser.ReloptionsContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_reloptions

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_reloptions(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_reloptions(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_reloptions(self)
            else:
                return visitor.visitChildren(self)




    def opt_reloptions(self):

        localctx = SqlParser.Opt_reloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_opt_reloptions)
        try:
            self.state = 1848
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self.match(self.WITH)
                self.state = 1846 
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reloption_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Reloption_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloption_list(self):
            return self.getTypedRuleContext(SqlParser.Reloption_listContext,0)


        def reloption_elem(self):
            return self.getTypedRuleContext(SqlParser.Reloption_elemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reloption_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReloption_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReloption_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReloption_list(self)
            else:
                return visitor.visitChildren(self)



    def reloption_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Reloption_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_reloption_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851 
            self.reloption_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Reloption_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_reloption_list)
                    self.state = 1853
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1854
                    self.match(self.T__11)
                    self.state = 1855 
                    self.reloption_elem() 
                self.state = 1860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Reloption_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Reloption_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ColLabelContext)
            else:
                return self.getTypedRuleContext(SqlParser.ColLabelContext,i)


        def def_arg(self):
            return self.getTypedRuleContext(SqlParser.Def_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reloption_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReloption_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReloption_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReloption_elem(self)
            else:
                return visitor.visitChildren(self)




    def reloption_elem(self):

        localctx = SqlParser.Reloption_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_reloption_elem)
        try:
            self.state = 1876
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1861 
                self.colLabel()
                self.state = 1862
                self.match(self.T__3)
                self.state = 1863 
                self.def_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1865 
                self.colLabel()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1866 
                self.colLabel()
                self.state = 1867
                self.match(self.T__12)
                self.state = 1868 
                self.colLabel()
                self.state = 1869
                self.match(self.T__3)
                self.state = 1870 
                self.def_arg()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1872 
                self.colLabel()
                self.state = 1873
                self.match(self.T__12)
                self.state = 1874 
                self.colLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterCompositeTypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterCompositeTypeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def alter_type_cmds(self):
            return self.getTypedRuleContext(SqlParser.Alter_type_cmdsContext,0)


        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterCompositeTypeStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterCompositeTypeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterCompositeTypeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterCompositeTypeStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterCompositeTypeStmt(self):

        localctx = SqlParser.AlterCompositeTypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alterCompositeTypeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(self.ALTER)
            self.state = 1879
            self.match(self.TYPE_P)
            self.state = 1880 
            self.any_name()
            self.state = 1881 
            self.alter_type_cmds(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_type_cmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_type_cmdsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_type_cmd(self):
            return self.getTypedRuleContext(SqlParser.Alter_type_cmdContext,0)


        def alter_type_cmds(self):
            return self.getTypedRuleContext(SqlParser.Alter_type_cmdsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_type_cmds

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_type_cmds(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_type_cmds(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_type_cmds(self)
            else:
                return visitor.visitChildren(self)



    def alter_type_cmds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alter_type_cmdsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_alter_type_cmds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884 
            self.alter_type_cmd()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alter_type_cmdsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_type_cmds)
                    self.state = 1886
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1887
                    self.match(self.T__11)
                    self.state = 1888 
                    self.alter_type_cmd() 
                self.state = 1893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_type_cmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_type_cmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElement(self):
            return self.getTypedRuleContext(SqlParser.TableFuncElementContext,0)


        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def opt_collate_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_collate_clauseContext,0)


        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(SqlParser.ATTRIBUTE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def opt_set_data(self):
            return self.getTypedRuleContext(SqlParser.Opt_set_dataContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_type_cmd

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_type_cmd(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_type_cmd(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_type_cmd(self)
            else:
                return visitor.visitChildren(self)




    def alter_type_cmd(self):

        localctx = SqlParser.Alter_type_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alter_type_cmd)
        try:
            self.state = 1920
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1894
                self.match(self.ADD_P)
                self.state = 1895
                self.match(self.ATTRIBUTE)
                self.state = 1896 
                self.tableFuncElement()
                self.state = 1897 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1899
                self.match(self.DROP)
                self.state = 1900
                self.match(self.ATTRIBUTE)
                self.state = 1901
                self.match(self.IF_P)
                self.state = 1902
                self.match(self.EXISTS)
                self.state = 1903 
                self.colId()
                self.state = 1904 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1906
                self.match(self.DROP)
                self.state = 1907
                self.match(self.ATTRIBUTE)
                self.state = 1908 
                self.colId()
                self.state = 1909 
                self.opt_drop_behavior()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1911
                self.match(self.ALTER)
                self.state = 1912
                self.match(self.ATTRIBUTE)
                self.state = 1913 
                self.colId()
                self.state = 1914 
                self.opt_set_data()
                self.state = 1915
                self.match(self.TYPE_P)
                self.state = 1916 
                self.typename()
                self.state = 1917 
                self.opt_collate_clause()
                self.state = 1918 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortalStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ClosePortalStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def CLOSE(self):
            return self.getToken(SqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(SqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_closePortalStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterClosePortalStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitClosePortalStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitClosePortalStmt(self)
            else:
                return visitor.visitChildren(self)




    def closePortalStmt(self):

        localctx = SqlParser.ClosePortalStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_closePortalStmt)
        try:
            self.state = 1926
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.match(self.CLOSE)
                self.state = 1923 
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.match(self.CLOSE)
                self.state = 1925
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CopyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CopyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_options(self):
            return self.getTypedRuleContext(SqlParser.Copy_optionsContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def COPY(self):
            return self.getToken(SqlParser.COPY, 0)

        def opt_oids(self):
            return self.getTypedRuleContext(SqlParser.Opt_oidsContext,0)


        def opt_binary(self):
            return self.getTypedRuleContext(SqlParser.Opt_binaryContext,0)


        def copy_delimiter(self):
            return self.getTypedRuleContext(SqlParser.Copy_delimiterContext,0)


        def copy_file_name(self):
            return self.getTypedRuleContext(SqlParser.Copy_file_nameContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def copy_from(self):
            return self.getTypedRuleContext(SqlParser.Copy_fromContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_copyStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopyStmt(self)
            else:
                return visitor.visitChildren(self)




    def copyStmt(self):

        localctx = SqlParser.CopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_copyStmt)
        try:
            self.state = 1950
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1928
                self.match(self.COPY)
                self.state = 1929 
                self.opt_binary()
                self.state = 1930 
                self.qualified_name()
                self.state = 1931 
                self.opt_column_list()
                self.state = 1932 
                self.opt_oids()
                self.state = 1933 
                self.copy_from()
                self.state = 1934 
                self.copy_file_name()
                self.state = 1935 
                self.copy_delimiter()
                self.state = 1937
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 1936
                    self.match(self.WITH)


                self.state = 1939 
                self.copy_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                self.match(self.COPY)
                self.state = 1942 
                self.select_with_parens(0)
                self.state = 1943
                self.match(self.TO)
                self.state = 1944 
                self.copy_file_name()
                self.state = 1946
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 1945
                    self.match(self.WITH)


                self.state = 1948 
                self.copy_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_fromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_fromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_copy_from

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_from(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_from(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_from(self)
            else:
                return visitor.visitChildren(self)




    def copy_from(self):

        localctx = SqlParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_copy_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            _la = self._input.LA(1)
            if not(_la==SqlParser.FROM or _la==SqlParser.TO):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_file_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STDOUT(self):
            return self.getToken(SqlParser.STDOUT, 0)

        def STDIN(self):
            return self.getToken(SqlParser.STDIN, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_file_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_file_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_file_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_file_name(self)
            else:
                return visitor.visitChildren(self)




    def copy_file_name(self):

        localctx = SqlParser.Copy_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_copy_file_name)
        try:
            self.state = 1957
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1954 
                self.sConst()

            elif token in [self.STDIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.match(self.STDIN)

            elif token in [self.STDOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1956
                self.match(self.STDOUT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_listContext,0)


        def copy_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_options(self)
            else:
                return visitor.visitChildren(self)




    def copy_options(self):

        localctx = SqlParser.Copy_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_copy_options)
        try:
            self.state = 1964
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959 
                self.copy_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.match(self.T__6)
                self.state = 1961 
                self.copy_generic_opt_list(0)
                self.state = 1962
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_opt_listContext,0)


        def copy_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Copy_opt_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Copy_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_copy_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Copy_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_opt_list)
                    self.state = 1967
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1968 
                    self.copy_opt_item() 
                self.state = 1973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def ESCAPE(self):
            return self.getToken(SqlParser.ESCAPE, 0)

        def OIDS(self):
            return self.getToken(SqlParser.OIDS, 0)

        def FORCE(self):
            return self.getToken(SqlParser.FORCE, 0)

        def QUOTE(self):
            return self.getToken(SqlParser.QUOTE, 0)

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def opt_as(self):
            return self.getTypedRuleContext(SqlParser.Opt_asContext,0)


        def HEADER_P(self):
            return self.getToken(SqlParser.HEADER_P, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def CSV(self):
            return self.getToken(SqlParser.CSV, 0)

        def DELIMITER(self):
            return self.getToken(SqlParser.DELIMITER, 0)

        def BINARY(self):
            return self.getToken(SqlParser.BINARY, 0)

        def ENCODING(self):
            return self.getToken(SqlParser.ENCODING, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def copy_opt_item(self):

        localctx = SqlParser.Copy_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_copy_opt_item)
        try:
            self.state = 2006
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1974
                self.match(self.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1975
                self.match(self.OIDS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1976
                self.match(self.DELIMITER)
                self.state = 1977 
                self.opt_as()
                self.state = 1978 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1980
                self.match(self.NULL_P)
                self.state = 1981 
                self.opt_as()
                self.state = 1982 
                self.sConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1984
                self.match(self.CSV)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1985
                self.match(self.HEADER_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1986
                self.match(self.QUOTE)
                self.state = 1987 
                self.opt_as()
                self.state = 1988 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1990
                self.match(self.ESCAPE)
                self.state = 1991 
                self.opt_as()
                self.state = 1992 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1994
                self.match(self.FORCE)
                self.state = 1995
                self.match(self.QUOTE)
                self.state = 1996 
                self.columnList(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1997
                self.match(self.FORCE)
                self.state = 1998
                self.match(self.QUOTE)
                self.state = 1999
                self.match(self.T__7)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2000
                self.match(self.FORCE)
                self.state = 2001
                self.match(self.NOT)
                self.state = 2002
                self.match(self.NULL_P)
                self.state = 2003 
                self.columnList(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2004
                self.match(self.ENCODING)
                self.state = 2005 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_binaryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_binaryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SqlParser.BINARY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_binary

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_binary(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_binary(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_binary(self)
            else:
                return visitor.visitChildren(self)




    def opt_binary(self):

        localctx = SqlParser.Opt_binaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_opt_binary)
        try:
            self.state = 2010
            token = self._input.LA(1)
            if token in [self.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2008
                self.match(self.BINARY)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_oidsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_oidsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OIDS(self):
            return self.getToken(SqlParser.OIDS, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_oids

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_oids(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_oids(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_oids(self)
            else:
                return visitor.visitChildren(self)




    def opt_oids(self):

        localctx = SqlParser.Opt_oidsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_opt_oids)
        try:
            self.state = 2015
            token = self._input.LA(1)
            if token in [self.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2012
                self.match(self.WITH)
                self.state = 2013
                self.match(self.OIDS)

            elif token in [self.FROM, self.TO]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_delimiterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_delimiterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELIMITERS(self):
            return self.getToken(SqlParser.DELIMITERS, 0)

        def opt_using(self):
            return self.getTypedRuleContext(SqlParser.Opt_usingContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_delimiter

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_delimiter(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_delimiter(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_delimiter(self)
            else:
                return visitor.visitChildren(self)




    def copy_delimiter(self):

        localctx = SqlParser.Copy_delimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_copy_delimiter)
        try:
            self.state = 2022
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017 
                self.opt_using()
                self.state = 2018
                self.match(self.DELIMITERS)
                self.state = 2019 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_usingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_usingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_using

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_using(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_using(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_using(self)
            else:
                return visitor.visitChildren(self)




    def opt_using(self):

        localctx = SqlParser.Opt_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_opt_using)
        try:
            self.state = 2026
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2024
                self.match(self.USING)

            elif token in [self.DELIMITERS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_generic_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_listContext,0)


        def copy_generic_opt_elem(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_elemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_generic_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_generic_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_generic_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_generic_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_generic_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Copy_generic_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_copy_generic_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029 
            self.copy_generic_opt_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2036
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Copy_generic_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_generic_opt_list)
                    self.state = 2031
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2032
                    self.match(self.T__11)
                    self.state = 2033 
                    self.copy_generic_opt_elem() 
                self.state = 2038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_generic_opt_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_generic_opt_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def copy_generic_opt_arg(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_generic_opt_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_generic_opt_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_generic_opt_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_generic_opt_elem(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_elem(self):

        localctx = SqlParser.Copy_generic_opt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_copy_generic_opt_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039 
            self.colLabel()
            self.state = 2040 
            self.copy_generic_opt_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_generic_opt_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(SqlParser.Opt_boolean_or_stringContext,0)


        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_arg_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_generic_opt_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_generic_opt_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_generic_opt_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_generic_opt_arg(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_arg(self):

        localctx = SqlParser.Copy_generic_opt_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_copy_generic_opt_arg)
        try:
            self.state = 2050
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2042 
                self.opt_boolean_or_string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043 
                self.numericOnly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2044
                self.match(self.T__7)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2045
                self.match(self.T__6)
                self.state = 2046 
                self.copy_generic_opt_arg_list(0)
                self.state = 2047
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_generic_opt_arg_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_generic_opt_arg_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_arg_list_item(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_arg_list_itemContext,0)


        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(SqlParser.Copy_generic_opt_arg_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_generic_opt_arg_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_generic_opt_arg_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_generic_opt_arg_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_generic_opt_arg_list(self)
            else:
                return visitor.visitChildren(self)



    def copy_generic_opt_arg_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Copy_generic_opt_arg_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_copy_generic_opt_arg_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053 
            self.copy_generic_opt_arg_list_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Copy_generic_opt_arg_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_copy_generic_opt_arg_list)
                    self.state = 2055
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2056
                    self.match(self.T__11)
                    self.state = 2057 
                    self.copy_generic_opt_arg_list_item() 
                self.state = 2062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Copy_generic_opt_arg_list_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Copy_generic_opt_arg_list_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(SqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_copy_generic_opt_arg_list_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCopy_generic_opt_arg_list_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCopy_generic_opt_arg_list_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCopy_generic_opt_arg_list_item(self)
            else:
                return visitor.visitChildren(self)




    def copy_generic_opt_arg_list_item(self):

        localctx = SqlParser.Copy_generic_opt_arg_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_copy_generic_opt_arg_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063 
            self.opt_boolean_or_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def onCommitOption(self):
            return self.getTypedRuleContext(SqlParser.OnCommitOptionContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def optTableSpace(self):
            return self.getTypedRuleContext(SqlParser.OptTableSpaceContext,0)


        def optInherit(self):
            return self.getTypedRuleContext(SqlParser.OptInheritContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def opttypedtableElementList(self):
            return self.getTypedRuleContext(SqlParser.OpttypedtableElementListContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(SqlParser.OptTempContext,0)


        def opttableElementList(self):
            return self.getTypedRuleContext(SqlParser.OpttableElementListContext,0)


        def optWith(self):
            return self.getTypedRuleContext(SqlParser.OptWithContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateStmt(self)
            else:
                return visitor.visitChildren(self)




    def createStmt(self):

        localctx = SqlParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_createStmt)
        try:
            self.state = 2117
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2065
                self.match(self.CREATE)
                self.state = 2066 
                self.optTemp()
                self.state = 2067
                self.match(self.TABLE)
                self.state = 2068 
                self.qualified_name()
                self.state = 2069
                self.match(self.T__6)
                self.state = 2070 
                self.opttableElementList()
                self.state = 2071
                self.match(self.T__13)
                self.state = 2072 
                self.optInherit()
                self.state = 2073 
                self.optWith()
                self.state = 2074 
                self.onCommitOption()
                self.state = 2075 
                self.optTableSpace()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2077
                self.match(self.CREATE)
                self.state = 2078 
                self.optTemp()
                self.state = 2079
                self.match(self.TABLE)
                self.state = 2080
                self.match(self.IF_P)
                self.state = 2081
                self.match(self.NOT)
                self.state = 2082
                self.match(self.EXISTS)
                self.state = 2083 
                self.qualified_name()
                self.state = 2084
                self.match(self.T__6)
                self.state = 2085 
                self.opttableElementList()
                self.state = 2086
                self.match(self.T__13)
                self.state = 2087 
                self.optInherit()
                self.state = 2088 
                self.optWith()
                self.state = 2089 
                self.onCommitOption()
                self.state = 2090 
                self.optTableSpace()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2092
                self.match(self.CREATE)
                self.state = 2093 
                self.optTemp()
                self.state = 2094
                self.match(self.TABLE)
                self.state = 2095 
                self.qualified_name()
                self.state = 2096
                self.match(self.OF)
                self.state = 2097 
                self.any_name()
                self.state = 2098 
                self.opttypedtableElementList()
                self.state = 2099 
                self.optWith()
                self.state = 2100 
                self.onCommitOption()
                self.state = 2101 
                self.optTableSpace()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2103
                self.match(self.CREATE)
                self.state = 2104 
                self.optTemp()
                self.state = 2105
                self.match(self.TABLE)
                self.state = 2106
                self.match(self.IF_P)
                self.state = 2107
                self.match(self.NOT)
                self.state = 2108
                self.match(self.EXISTS)
                self.state = 2109 
                self.qualified_name()
                self.state = 2110
                self.match(self.OF)
                self.state = 2111 
                self.any_name()
                self.state = 2112 
                self.opttypedtableElementList()
                self.state = 2113 
                self.optWith()
                self.state = 2114 
                self.onCommitOption()
                self.state = 2115 
                self.optTableSpace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTempContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptTempContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNLOGGED(self):
            return self.getToken(SqlParser.UNLOGGED, 0)

        def GLOBAL(self):
            return self.getToken(SqlParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlParser.TEMPORARY, 0)

        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def TEMP(self):
            return self.getToken(SqlParser.TEMP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_optTemp

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptTemp(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptTemp(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptTemp(self)
            else:
                return visitor.visitChildren(self)




    def optTemp(self):

        localctx = SqlParser.OptTempContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_optTemp)
        try:
            self.state = 2131
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2119
                self.match(self.TEMPORARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2120
                self.match(self.TEMP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2121
                self.match(self.LOCAL)
                self.state = 2122
                self.match(self.TEMPORARY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2123
                self.match(self.LOCAL)
                self.state = 2124
                self.match(self.TEMP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2125
                self.match(self.GLOBAL)
                self.state = 2126
                self.match(self.TEMPORARY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2127
                self.match(self.GLOBAL)
                self.state = 2128
                self.match(self.TEMP)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2129
                self.match(self.UNLOGGED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OpttableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableElementList(self):
            return self.getTypedRuleContext(SqlParser.TableElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opttableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpttableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpttableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpttableElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttableElementList(self):

        localctx = SqlParser.OpttableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_opttableElementList)
        try:
            self.state = 2135
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECK, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINT, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FOREIGN, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIMARY, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNIQUE, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2133 
                self.tableElementList(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttypedtableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OpttypedtableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typedtableElementList(self):
            return self.getTypedRuleContext(SqlParser.TypedtableElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opttypedtableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpttypedtableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpttypedtableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpttypedtableElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttypedtableElementList(self):

        localctx = SqlParser.OpttypedtableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_opttypedtableElementList)
        try:
            self.state = 2142
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(self.T__6)
                self.state = 2138 
                self.typedtableElementList(0)
                self.state = 2139
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableElementList(self):
            return self.getTypedRuleContext(SqlParser.TableElementListContext,0)


        def tableElement(self):
            return self.getTypedRuleContext(SqlParser.TableElementContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_tableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableElementList(self)
            else:
                return visitor.visitChildren(self)



    def tableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_tableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145 
            self.tableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.TableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableElementList)
                    self.state = 2147
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2148
                    self.match(self.T__11)
                    self.state = 2149 
                    self.tableElement() 
                self.state = 2154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedtableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TypedtableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typedtableElement(self):
            return self.getTypedRuleContext(SqlParser.TypedtableElementContext,0)


        def typedtableElementList(self):
            return self.getTypedRuleContext(SqlParser.TypedtableElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_typedtableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTypedtableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTypedtableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTypedtableElementList(self)
            else:
                return visitor.visitChildren(self)



    def typedtableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TypedtableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_typedtableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156 
            self.typedtableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2163
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.TypedtableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typedtableElementList)
                    self.state = 2158
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2159
                    self.match(self.T__11)
                    self.state = 2160 
                    self.typedtableElement() 
                self.state = 2165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeClause(self):
            return self.getTypedRuleContext(SqlParser.TableLikeClauseContext,0)


        def tableConstraint(self):
            return self.getTypedRuleContext(SqlParser.TableConstraintContext,0)


        def columnDef(self):
            return self.getTypedRuleContext(SqlParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_tableElement

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SqlParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tableElement)
        try:
            self.state = 2169
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2166 
                self.columnDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2167 
                self.tableLikeClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2168 
                self.tableConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedtableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TypedtableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableConstraint(self):
            return self.getTypedRuleContext(SqlParser.TableConstraintContext,0)


        def columnOptions(self):
            return self.getTypedRuleContext(SqlParser.ColumnOptionsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_typedtableElement

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTypedtableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTypedtableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTypedtableElement(self)
            else:
                return visitor.visitChildren(self)




    def typedtableElement(self):

        localctx = SqlParser.TypedtableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typedtableElement)
        try:
            self.state = 2173
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2171 
                self.columnOptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2172 
                self.tableConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColumnDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Create_generic_optionsContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(SqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_columnDef

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColumnDef(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColumnDef(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColumnDef(self)
            else:
                return visitor.visitChildren(self)




    def columnDef(self):

        localctx = SqlParser.ColumnDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_columnDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175 
            self.colId()
            self.state = 2176 
            self.typename()
            self.state = 2177 
            self.create_generic_options()
            self.state = 2178 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColumnOptionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def colQualList(self):
            return self.getTypedRuleContext(SqlParser.ColQualListContext,0)


        def OPTIONS(self):
            return self.getToken(SqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_columnOptions

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColumnOptions(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColumnOptions(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColumnOptions(self)
            else:
                return visitor.visitChildren(self)




    def columnOptions(self):

        localctx = SqlParser.ColumnOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_columnOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180 
            self.colId()
            self.state = 2181
            self.match(self.WITH)
            self.state = 2182
            self.match(self.OPTIONS)
            self.state = 2183 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColQualListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColQualListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colConstraint(self):
            return self.getTypedRuleContext(SqlParser.ColConstraintContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(SqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_colQualList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColQualList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColQualList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColQualList(self)
            else:
                return visitor.visitChildren(self)



    def colQualList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ColQualListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_colQualList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.ColQualListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_colQualList)
                    self.state = 2186
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2187 
                    self.colConstraint() 
                self.state = 2192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ColConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def constraintAttr(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttrContext,0)


        def colconstraintElem(self):
            return self.getTypedRuleContext(SqlParser.ColconstraintElemContext,0)


        def COLLATE(self):
            return self.getToken(SqlParser.COLLATE, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_colConstraint

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColConstraint(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColConstraint(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColConstraint(self)
            else:
                return visitor.visitChildren(self)




    def colConstraint(self):

        localctx = SqlParser.ColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_colConstraint)
        try:
            self.state = 2201
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                self.match(self.CONSTRAINT)
                self.state = 2194 
                self.name()
                self.state = 2195 
                self.colconstraintElem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2197 
                self.colconstraintElem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2198 
                self.constraintAttr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2199
                self.match(self.COLLATE)
                self.state = 2200 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColconstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColconstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def CHECK(self):
            return self.getToken(SqlParser.CHECK, 0)

        def opt_no_inherit(self):
            return self.getTypedRuleContext(SqlParser.Opt_no_inheritContext,0)


        def b_expr(self):
            return self.getTypedRuleContext(SqlParser.B_exprContext,0)


        def key_match(self):
            return self.getTypedRuleContext(SqlParser.Key_matchContext,0)


        def optConsTableSpace(self):
            return self.getTypedRuleContext(SqlParser.OptConsTableSpaceContext,0)


        def KEY(self):
            return self.getToken(SqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(SqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(SqlParser.REFERENCES, 0)

        def opt_definition(self):
            return self.getTypedRuleContext(SqlParser.Opt_definitionContext,0)


        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(SqlParser.Key_actionsContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(SqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_colconstraintElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColconstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColconstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColconstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def colconstraintElem(self):

        localctx = SqlParser.ColconstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_colconstraintElem)
        try:
            self.state = 2229
            token = self._input.LA(1)
            if token in [self.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2203
                self.match(self.NOT)
                self.state = 2204
                self.match(self.NULL_P)

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.match(self.NULL_P)

            elif token in [self.UNIQUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2206
                self.match(self.UNIQUE)
                self.state = 2207 
                self.opt_definition()
                self.state = 2208 
                self.optConsTableSpace()

            elif token in [self.PRIMARY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2210
                self.match(self.PRIMARY)
                self.state = 2211
                self.match(self.KEY)
                self.state = 2212 
                self.opt_definition()
                self.state = 2213 
                self.optConsTableSpace()

            elif token in [self.CHECK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2215
                self.match(self.CHECK)
                self.state = 2216
                self.match(self.T__6)
                self.state = 2217 
                self.a_expr(0)
                self.state = 2218
                self.match(self.T__13)
                self.state = 2219 
                self.opt_no_inherit()

            elif token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2221
                self.match(self.DEFAULT)
                self.state = 2222 
                self.b_expr(0)

            elif token in [self.REFERENCES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2223
                self.match(self.REFERENCES)
                self.state = 2224 
                self.qualified_name()
                self.state = 2225 
                self.opt_column_list()
                self.state = 2226 
                self.key_match()
                self.state = 2227 
                self.key_actions()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstraintAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(SqlParser.DEFERRED, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlParser.IMMEDIATE, 0)

        def INITIALLY(self):
            return self.getToken(SqlParser.INITIALLY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_constraintAttr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraintAttr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraintAttr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraintAttr(self)
            else:
                return visitor.visitChildren(self)




    def constraintAttr(self):

        localctx = SqlParser.ConstraintAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_constraintAttr)
        try:
            self.state = 2238
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2231
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2232
                self.match(self.NOT)
                self.state = 2233
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2234
                self.match(self.INITIALLY)
                self.state = 2235
                self.match(self.DEFERRED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2236
                self.match(self.INITIALLY)
                self.state = 2237
                self.match(self.IMMEDIATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableLikeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableLikeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeOptionList(self):
            return self.getTypedRuleContext(SqlParser.TableLikeOptionListContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def LIKE(self):
            return self.getToken(SqlParser.LIKE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_tableLikeClause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableLikeClause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableLikeClause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def tableLikeClause(self):

        localctx = SqlParser.TableLikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tableLikeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.match(self.LIKE)
            self.state = 2241 
            self.qualified_name()
            self.state = 2242 
            self.tableLikeOptionList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableLikeOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableLikeOptionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableLikeOptionList(self):
            return self.getTypedRuleContext(SqlParser.TableLikeOptionListContext,0)


        def tableLikeOption(self):
            return self.getTypedRuleContext(SqlParser.TableLikeOptionContext,0)


        def EXCLUDING(self):
            return self.getToken(SqlParser.EXCLUDING, 0)

        def INCLUDING(self):
            return self.getToken(SqlParser.INCLUDING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_tableLikeOptionList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableLikeOptionList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableLikeOptionList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableLikeOptionList(self)
            else:
                return visitor.visitChildren(self)



    def tableLikeOptionList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TableLikeOptionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_tableLikeOptionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2251
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.TableLikeOptionListContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableLikeOptionList)
                        self.state = 2245
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2246
                        self.match(self.INCLUDING)
                        self.state = 2247 
                        self.tableLikeOption()
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.TableLikeOptionListContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableLikeOptionList)
                        self.state = 2248
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2249
                        self.match(self.EXCLUDING)
                        self.state = 2250 
                        self.tableLikeOption()
                        pass

             
                self.state = 2255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableLikeOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableLikeOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def INDEXES(self):
            return self.getToken(SqlParser.INDEXES, 0)

        def CONSTRAINTS(self):
            return self.getToken(SqlParser.CONSTRAINTS, 0)

        def DEFAULTS(self):
            return self.getToken(SqlParser.DEFAULTS, 0)

        def COMMENTS(self):
            return self.getToken(SqlParser.COMMENTS, 0)

        def STORAGE(self):
            return self.getToken(SqlParser.STORAGE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_tableLikeOption

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableLikeOption(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableLikeOption(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableLikeOption(self)
            else:
                return visitor.visitChildren(self)




    def tableLikeOption(self):

        localctx = SqlParser.TableLikeOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tableLikeOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            _la = self._input.LA(1)
            if not(_la==SqlParser.ALL or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (self.COMMENTS - 75)) | (1 << (self.CONSTRAINTS - 75)) | (1 << (self.DEFAULTS - 75)))) != 0) or _la==SqlParser.INDEXES or _la==SqlParser.STORAGE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constraintElem(self):
            return self.getTypedRuleContext(SqlParser.ConstraintElemContext,0)


        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_tableConstraint

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableConstraint(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableConstraint(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableConstraint(self)
            else:
                return visitor.visitChildren(self)




    def tableConstraint(self):

        localctx = SqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tableConstraint)
        try:
            self.state = 2263
            token = self._input.LA(1)
            if token in [self.CONSTRAINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2258
                self.match(self.CONSTRAINT)
                self.state = 2259 
                self.name()
                self.state = 2260 
                self.constraintElem()

            elif token in [self.CHECK, self.EXCLUDE, self.FOREIGN, self.PRIMARY, self.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2262 
                self.constraintElem()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def CHECK(self):
            return self.getToken(SqlParser.CHECK, 0)

        def EXCLUDE(self):
            return self.getToken(SqlParser.EXCLUDE, 0)

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def key_match(self):
            return self.getTypedRuleContext(SqlParser.Key_matchContext,0)


        def optConsTableSpace(self):
            return self.getTypedRuleContext(SqlParser.OptConsTableSpaceContext,0)


        def KEY(self):
            return self.getToken(SqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(SqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(SqlParser.REFERENCES, 0)

        def opt_definition(self):
            return self.getTypedRuleContext(SqlParser.Opt_definitionContext,0)


        def exclusionWhereClause(self):
            return self.getTypedRuleContext(SqlParser.ExclusionWhereClauseContext,0)


        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttributeSpecContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(SqlParser.Key_actionsContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(SqlParser.Access_method_clauseContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def PRIMARY(self):
            return self.getToken(SqlParser.PRIMARY, 0)

        def exclusionConstraintList(self):
            return self.getTypedRuleContext(SqlParser.ExclusionConstraintListContext,0)


        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def existingIndex(self):
            return self.getTypedRuleContext(SqlParser.ExistingIndexContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constraintElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def constraintElem(self):

        localctx = SqlParser.ConstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_constraintElem)
        try:
            self.state = 2319
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                self.match(self.CHECK)
                self.state = 2266
                self.match(self.T__6)
                self.state = 2267 
                self.a_expr(0)
                self.state = 2268
                self.match(self.T__13)
                self.state = 2269 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2271
                self.match(self.UNIQUE)
                self.state = 2272
                self.match(self.T__6)
                self.state = 2273 
                self.columnList(0)
                self.state = 2274
                self.match(self.T__13)
                self.state = 2275 
                self.opt_definition()
                self.state = 2276 
                self.optConsTableSpace()
                self.state = 2277 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2279
                self.match(self.UNIQUE)
                self.state = 2280 
                self.existingIndex()
                self.state = 2281 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2283
                self.match(self.PRIMARY)
                self.state = 2284
                self.match(self.KEY)
                self.state = 2285
                self.match(self.T__6)
                self.state = 2286 
                self.columnList(0)
                self.state = 2287
                self.match(self.T__13)
                self.state = 2288 
                self.opt_definition()
                self.state = 2289 
                self.optConsTableSpace()
                self.state = 2290 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2292
                self.match(self.PRIMARY)
                self.state = 2293
                self.match(self.KEY)
                self.state = 2294 
                self.existingIndex()
                self.state = 2295 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2297
                self.match(self.EXCLUDE)
                self.state = 2298 
                self.access_method_clause()
                self.state = 2299
                self.match(self.T__6)
                self.state = 2300 
                self.exclusionConstraintList(0)
                self.state = 2301
                self.match(self.T__13)
                self.state = 2302 
                self.opt_definition()
                self.state = 2303 
                self.optConsTableSpace()
                self.state = 2304 
                self.exclusionWhereClause()
                self.state = 2305 
                self.constraintAttributeSpec(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2307
                self.match(self.FOREIGN)
                self.state = 2308
                self.match(self.KEY)
                self.state = 2309
                self.match(self.T__6)
                self.state = 2310 
                self.columnList(0)
                self.state = 2311
                self.match(self.T__13)
                self.state = 2312
                self.match(self.REFERENCES)
                self.state = 2313 
                self.qualified_name()
                self.state = 2314 
                self.opt_column_list()
                self.state = 2315 
                self.key_match()
                self.state = 2316 
                self.key_actions()
                self.state = 2317 
                self.constraintAttributeSpec(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_no_inheritContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_no_inheritContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def INHERIT(self):
            return self.getToken(SqlParser.INHERIT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_no_inherit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_no_inherit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_no_inherit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_no_inherit(self)
            else:
                return visitor.visitChildren(self)




    def opt_no_inherit(self):

        localctx = SqlParser.Opt_no_inheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_opt_no_inherit)
        try:
            self.state = 2324
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2321
                self.match(self.NO)
                self.state = 2322
                self.match(self.INHERIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_column_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_column_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_column_list(self):

        localctx = SqlParser.Opt_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_opt_column_list)
        try:
            self.state = 2331
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2326
                self.match(self.T__6)
                self.state = 2327 
                self.columnList(0)
                self.state = 2328
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColumnListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def columnElem(self):
            return self.getTypedRuleContext(SqlParser.ColumnElemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_columnList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColumnList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColumnList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColumnList(self)
            else:
                return visitor.visitChildren(self)



    def columnList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ColumnListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 190
        self.enterRecursionRule(localctx, 190, self.RULE_columnList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334 
            self.columnElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.ColumnListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_columnList)
                    self.state = 2336
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2337
                    self.match(self.T__11)
                    self.state = 2338 
                    self.columnElem() 
                self.state = 2343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ColumnElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColumnElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_columnElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColumnElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColumnElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColumnElem(self)
            else:
                return visitor.visitChildren(self)




    def columnElem(self):

        localctx = SqlParser.ColumnElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_columnElem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_matchContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Key_matchContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(SqlParser.MATCH, 0)

        def FULL(self):
            return self.getToken(SqlParser.FULL, 0)

        def SIMPLE(self):
            return self.getToken(SqlParser.SIMPLE, 0)

        def PARTIAL(self):
            return self.getToken(SqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_key_match

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterKey_match(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitKey_match(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitKey_match(self)
            else:
                return visitor.visitChildren(self)




    def key_match(self):

        localctx = SqlParser.Key_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_key_match)
        try:
            self.state = 2353
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2346
                self.match(self.MATCH)
                self.state = 2347
                self.match(self.FULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2348
                self.match(self.MATCH)
                self.state = 2349
                self.match(self.PARTIAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2350
                self.match(self.MATCH)
                self.state = 2351
                self.match(self.SIMPLE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionConstraintListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExclusionConstraintListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exclusionconstraintElem(self):
            return self.getTypedRuleContext(SqlParser.ExclusionconstraintElemContext,0)


        def exclusionConstraintList(self):
            return self.getTypedRuleContext(SqlParser.ExclusionConstraintListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_exclusionConstraintList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExclusionConstraintList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExclusionConstraintList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExclusionConstraintList(self)
            else:
                return visitor.visitChildren(self)



    def exclusionConstraintList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ExclusionConstraintListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_exclusionConstraintList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356 
            self.exclusionconstraintElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.ExclusionConstraintListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusionConstraintList)
                    self.state = 2358
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2359
                    self.match(self.T__11)
                    self.state = 2360 
                    self.exclusionconstraintElem() 
                self.state = 2365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusionconstraintElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExclusionconstraintElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def index_elem(self):
            return self.getTypedRuleContext(SqlParser.Index_elemContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_exclusionconstraintElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExclusionconstraintElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExclusionconstraintElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExclusionconstraintElem(self)
            else:
                return visitor.visitChildren(self)




    def exclusionconstraintElem(self):

        localctx = SqlParser.ExclusionconstraintElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_exclusionconstraintElem)
        try:
            self.state = 2377
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2366 
                self.index_elem()
                self.state = 2367
                self.match(self.WITH)
                self.state = 2368 
                self.any_operator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2370 
                self.index_elem()
                self.state = 2371
                self.match(self.WITH)
                self.state = 2372
                self.match(self.OPERATOR)
                self.state = 2373
                self.match(self.T__6)
                self.state = 2374 
                self.any_operator()
                self.state = 2375
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionWhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExclusionWhereClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_exclusionWhereClause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExclusionWhereClause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExclusionWhereClause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExclusionWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def exclusionWhereClause(self):

        localctx = SqlParser.ExclusionWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_exclusionWhereClause)
        try:
            self.state = 2385
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2379
                self.match(self.WHERE)
                self.state = 2380
                self.match(self.T__6)
                self.state = 2381 
                self.a_expr(0)
                self.state = 2382
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_actionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Key_actionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def key_update(self):
            return self.getTypedRuleContext(SqlParser.Key_updateContext,0)


        def key_delete(self):
            return self.getTypedRuleContext(SqlParser.Key_deleteContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_key_actions

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterKey_actions(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitKey_actions(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitKey_actions(self)
            else:
                return visitor.visitChildren(self)




    def key_actions(self):

        localctx = SqlParser.Key_actionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_key_actions)
        try:
            self.state = 2396
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387 
                self.key_update()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2388 
                self.key_delete()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2389 
                self.key_update()
                self.state = 2390 
                self.key_delete()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2392 
                self.key_delete()
                self.state = 2393 
                self.key_update()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_updateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Key_updateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def key_action(self):
            return self.getTypedRuleContext(SqlParser.Key_actionContext,0)


        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_key_update

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterKey_update(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitKey_update(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitKey_update(self)
            else:
                return visitor.visitChildren(self)




    def key_update(self):

        localctx = SqlParser.Key_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_key_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(self.ON)
            self.state = 2399
            self.match(self.UPDATE)
            self.state = 2400 
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Key_deleteContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def key_action(self):
            return self.getTypedRuleContext(SqlParser.Key_actionContext,0)


        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_key_delete

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterKey_delete(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitKey_delete(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitKey_delete(self)
            else:
                return visitor.visitChildren(self)




    def key_delete(self):

        localctx = SqlParser.Key_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_key_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.match(self.ON)
            self.state = 2403
            self.match(self.DELETE_P)
            self.state = 2404 
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_actionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Key_actionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def CASCADE(self):
            return self.getToken(SqlParser.CASCADE, 0)

        def ACTION(self):
            return self.getToken(SqlParser.ACTION, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def RESTRICT(self):
            return self.getToken(SqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_key_action

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterKey_action(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitKey_action(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitKey_action(self)
            else:
                return visitor.visitChildren(self)




    def key_action(self):

        localctx = SqlParser.Key_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_key_action)
        try:
            self.state = 2414
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2406
                self.match(self.NO)
                self.state = 2407
                self.match(self.ACTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2408
                self.match(self.RESTRICT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2409
                self.match(self.CASCADE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2410
                self.match(self.SET)
                self.state = 2411
                self.match(self.NULL_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2412
                self.match(self.SET)
                self.state = 2413
                self.match(self.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptInheritContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptInheritContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INHERITS(self):
            return self.getToken(SqlParser.INHERITS, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(SqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optInherit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptInherit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptInherit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptInherit(self)
            else:
                return visitor.visitChildren(self)




    def optInherit(self):

        localctx = SqlParser.OptInheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_optInherit)
        try:
            self.state = 2422
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2416
                self.match(self.INHERITS)
                self.state = 2417
                self.match(self.T__6)
                self.state = 2418 
                self.qualified_name_list(0)
                self.state = 2419
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptWithContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptWithContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reloptions(self):
            return self.getTypedRuleContext(SqlParser.ReloptionsContext,0)


        def OIDS(self):
            return self.getToken(SqlParser.OIDS, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_optWith

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptWith(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptWith(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptWith(self)
            else:
                return visitor.visitChildren(self)




    def optWith(self):

        localctx = SqlParser.OptWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_optWith)
        try:
            self.state = 2431
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2424
                self.match(self.WITH)
                self.state = 2425 
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2426
                self.match(self.WITH)
                self.state = 2427
                self.match(self.OIDS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2428
                self.match(self.WITHOUT)
                self.state = 2429
                self.match(self.OIDS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnCommitOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OnCommitOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def ROWS(self):
            return self.getToken(SqlParser.ROWS, 0)

        def PRESERVE(self):
            return self.getToken(SqlParser.PRESERVE, 0)

        def COMMIT(self):
            return self.getToken(SqlParser.COMMIT, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_onCommitOption

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOnCommitOption(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOnCommitOption(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOnCommitOption(self)
            else:
                return visitor.visitChildren(self)




    def onCommitOption(self):

        localctx = SqlParser.OnCommitOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_onCommitOption)
        try:
            self.state = 2445
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2433
                self.match(self.ON)
                self.state = 2434
                self.match(self.COMMIT)
                self.state = 2435
                self.match(self.DROP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2436
                self.match(self.ON)
                self.state = 2437
                self.match(self.COMMIT)
                self.state = 2438
                self.match(self.DELETE_P)
                self.state = 2439
                self.match(self.ROWS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2440
                self.match(self.ON)
                self.state = 2441
                self.match(self.COMMIT)
                self.state = 2442
                self.match(self.PRESERVE)
                self.state = 2443
                self.match(self.ROWS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTableSpaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptTableSpaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optTableSpace

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptTableSpace(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptTableSpace(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptTableSpace(self)
            else:
                return visitor.visitChildren(self)




    def optTableSpace(self):

        localctx = SqlParser.OptTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_optTableSpace)
        try:
            self.state = 2450
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2447
                self.match(self.TABLESPACE)
                self.state = 2448 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptConsTableSpaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptConsTableSpaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optConsTableSpace

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptConsTableSpace(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptConsTableSpace(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptConsTableSpace(self)
            else:
                return visitor.visitChildren(self)




    def optConsTableSpace(self):

        localctx = SqlParser.OptConsTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_optConsTableSpace)
        try:
            self.state = 2457
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.match(self.USING)
                self.state = 2453
                self.match(self.INDEX)
                self.state = 2454
                self.match(self.TABLESPACE)
                self.state = 2455 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistingIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExistingIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_existingIndex

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExistingIndex(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExistingIndex(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExistingIndex(self)
            else:
                return visitor.visitChildren(self)




    def existingIndex(self):

        localctx = SqlParser.ExistingIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_existingIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(self.USING)
            self.state = 2460
            self.match(self.INDEX)
            self.state = 2461 
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateAsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateAsStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def create_as_target(self):
            return self.getTypedRuleContext(SqlParser.Create_as_targetContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(SqlParser.OptTempContext,0)


        def opt_with_data(self):
            return self.getTypedRuleContext(SqlParser.Opt_with_dataContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createAsStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateAsStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateAsStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateAsStmt(self)
            else:
                return visitor.visitChildren(self)




    def createAsStmt(self):

        localctx = SqlParser.CreateAsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_createAsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(self.CREATE)
            self.state = 2464 
            self.optTemp()
            self.state = 2465
            self.match(self.TABLE)
            self.state = 2466 
            self.create_as_target()
            self.state = 2467
            self.match(self.AS)
            self.state = 2468 
            self.selectStmt()
            self.state = 2469 
            self.opt_with_data()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_as_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Create_as_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def onCommitOption(self):
            return self.getTypedRuleContext(SqlParser.OnCommitOptionContext,0)


        def optTableSpace(self):
            return self.getTypedRuleContext(SqlParser.OptTableSpaceContext,0)


        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def optWith(self):
            return self.getTypedRuleContext(SqlParser.OptWithContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_create_as_target

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreate_as_target(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreate_as_target(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreate_as_target(self)
            else:
                return visitor.visitChildren(self)




    def create_as_target(self):

        localctx = SqlParser.Create_as_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_create_as_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471 
            self.qualified_name()
            self.state = 2472 
            self.opt_column_list()
            self.state = 2473 
            self.optWith()
            self.state = 2474 
            self.onCommitOption()
            self.state = 2475 
            self.optTableSpace()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_with_dataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_with_dataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_with_data

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_with_data(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_with_data(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_with_data(self)
            else:
                return visitor.visitChildren(self)




    def opt_with_data(self):

        localctx = SqlParser.Opt_with_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_opt_with_data)
        try:
            self.state = 2483
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2477
                self.match(self.WITH)
                self.state = 2478
                self.match(self.DATA_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                self.match(self.WITH)
                self.state = 2480
                self.match(self.NO)
                self.state = 2481
                self.match(self.DATA_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateSeqStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateSeqStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optseqOptList(self):
            return self.getTypedRuleContext(SqlParser.OptseqOptListContext,0)


        def optTemp(self):
            return self.getTypedRuleContext(SqlParser.OptTempContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createSeqStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateSeqStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateSeqStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateSeqStmt(self)
            else:
                return visitor.visitChildren(self)




    def createSeqStmt(self):

        localctx = SqlParser.CreateSeqStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_createSeqStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(self.CREATE)
            self.state = 2486 
            self.optTemp()
            self.state = 2487
            self.match(self.SEQUENCE)
            self.state = 2488 
            self.qualified_name()
            self.state = 2489 
            self.optseqOptList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterSeqStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterSeqStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def seqOptList(self):
            return self.getTypedRuleContext(SqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterSeqStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterSeqStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterSeqStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterSeqStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterSeqStmt(self):

        localctx = SqlParser.AlterSeqStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_alterSeqStmt)
        try:
            self.state = 2503
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.match(self.ALTER)
                self.state = 2492
                self.match(self.SEQUENCE)
                self.state = 2493 
                self.qualified_name()
                self.state = 2494 
                self.seqOptList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2496
                self.match(self.ALTER)
                self.state = 2497
                self.match(self.SEQUENCE)
                self.state = 2498
                self.match(self.IF_P)
                self.state = 2499
                self.match(self.EXISTS)
                self.state = 2500 
                self.qualified_name()
                self.state = 2501 
                self.seqOptList(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptseqOptListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptseqOptListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def seqOptList(self):
            return self.getTypedRuleContext(SqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optseqOptList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptseqOptList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptseqOptList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptseqOptList(self)
            else:
                return visitor.visitChildren(self)




    def optseqOptList(self):

        localctx = SqlParser.OptseqOptListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_optseqOptList)
        try:
            self.state = 2507
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2505 
                self.seqOptList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeqOptListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SeqOptListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def seqOptElem(self):
            return self.getTypedRuleContext(SqlParser.SeqOptElemContext,0)


        def seqOptList(self):
            return self.getTypedRuleContext(SqlParser.SeqOptListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_seqOptList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSeqOptList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSeqOptList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSeqOptList(self)
            else:
                return visitor.visitChildren(self)



    def seqOptList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.SeqOptListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_seqOptList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2510 
            self.seqOptElem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.SeqOptListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_seqOptList)
                    self.state = 2512
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2513 
                    self.seqOptElem() 
                self.state = 2518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SeqOptElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SeqOptElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def OWNED(self):
            return self.getToken(SqlParser.OWNED, 0)

        def RESTART(self):
            return self.getToken(SqlParser.RESTART, 0)

        def MAXVALUE(self):
            return self.getToken(SqlParser.MAXVALUE, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def INCREMENT(self):
            return self.getToken(SqlParser.INCREMENT, 0)

        def START(self):
            return self.getToken(SqlParser.START, 0)

        def MINVALUE(self):
            return self.getToken(SqlParser.MINVALUE, 0)

        def opt_by(self):
            return self.getTypedRuleContext(SqlParser.Opt_byContext,0)


        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def CYCLE(self):
            return self.getToken(SqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(SqlParser.CACHE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_seqOptElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSeqOptElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSeqOptElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSeqOptElem(self)
            else:
                return visitor.visitChildren(self)




    def seqOptElem(self):

        localctx = SqlParser.SeqOptElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_seqOptElem)
        self._la = 0 # Token type
        try:
            self.state = 2550
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2519
                self.match(self.CACHE)
                self.state = 2520 
                self.numericOnly()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2521
                self.match(self.CYCLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2522
                self.match(self.NO)
                self.state = 2523
                self.match(self.CYCLE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2524
                self.match(self.INCREMENT)
                self.state = 2525 
                self.opt_by()
                self.state = 2526 
                self.numericOnly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2528
                self.match(self.MAXVALUE)
                self.state = 2529 
                self.numericOnly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2530
                self.match(self.MINVALUE)
                self.state = 2531 
                self.numericOnly()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2532
                self.match(self.NO)
                self.state = 2533
                self.match(self.MAXVALUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2534
                self.match(self.NO)
                self.state = 2535
                self.match(self.MINVALUE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2536
                self.match(self.OWNED)
                self.state = 2537
                self.match(self.BY)
                self.state = 2538 
                self.any_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2539
                self.match(self.START)
                self.state = 2541
                _la = self._input.LA(1)
                if _la==SqlParser.WITH:
                    self.state = 2540
                    self.match(self.WITH)


                self.state = 2543 
                self.numericOnly()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2544
                self.match(self.RESTART)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2545
                self.match(self.RESTART)
                self.state = 2547
                _la = self._input.LA(1)
                if _la==SqlParser.WITH:
                    self.state = 2546
                    self.match(self.WITH)


                self.state = 2549 
                self.numericOnly()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_byContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_byContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_by

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_by(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_by(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_by(self)
            else:
                return visitor.visitChildren(self)




    def opt_by(self):

        localctx = SqlParser.Opt_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_opt_by)
        try:
            self.state = 2554
            token = self._input.LA(1)
            if token in [self.BY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.match(self.BY)

            elif token in [self.T__10, self.T__8, self.ICONST, self.FCONST]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOnlyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.NumericOnlyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def FCONST(self):
            return self.getToken(SqlParser.FCONST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_numericOnly

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterNumericOnly(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitNumericOnly(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitNumericOnly(self)
            else:
                return visitor.visitChildren(self)




    def numericOnly(self):

        localctx = SqlParser.NumericOnlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_numericOnly)
        try:
            self.state = 2560
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2556
                self.match(self.FCONST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2557
                self.match(self.T__8)
                self.state = 2558
                self.match(self.FCONST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2559 
                self.signedIconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOnly_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.NumericOnly_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def numericOnly_list(self):
            return self.getTypedRuleContext(SqlParser.NumericOnly_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_numericOnly_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterNumericOnly_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitNumericOnly_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitNumericOnly_list(self)
            else:
                return visitor.visitChildren(self)



    def numericOnly_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.NumericOnly_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_numericOnly_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563 
            self.numericOnly()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.NumericOnly_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_numericOnly_list)
                    self.state = 2565
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2566
                    self.match(self.T__11)
                    self.state = 2567 
                    self.numericOnly() 
                self.state = 2572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CreatePLangStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreatePLangStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_inline_handler(self):
            return self.getTypedRuleContext(SqlParser.Opt_inline_handlerContext,0)


        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def opt_trusted(self):
            return self.getTypedRuleContext(SqlParser.Opt_trustedContext,0)


        def opt_validator(self):
            return self.getTypedRuleContext(SqlParser.Opt_validatorContext,0)


        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def opt_or_replace(self):
            return self.getTypedRuleContext(SqlParser.Opt_or_replaceContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def handler_name(self):
            return self.getTypedRuleContext(SqlParser.Handler_nameContext,0)


        def HANDLER(self):
            return self.getToken(SqlParser.HANDLER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createPLangStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatePLangStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatePLangStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatePLangStmt(self)
            else:
                return visitor.visitChildren(self)




    def createPLangStmt(self):

        localctx = SqlParser.CreatePLangStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_createPLangStmt)
        try:
            self.state = 2591
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2573
                self.match(self.CREATE)
                self.state = 2574 
                self.opt_or_replace()
                self.state = 2575 
                self.opt_trusted()
                self.state = 2576 
                self.opt_procedural()
                self.state = 2577
                self.match(self.LANGUAGE)
                self.state = 2578 
                self.colId_or_Sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2580
                self.match(self.CREATE)
                self.state = 2581 
                self.opt_or_replace()
                self.state = 2582 
                self.opt_trusted()
                self.state = 2583 
                self.opt_procedural()
                self.state = 2584
                self.match(self.LANGUAGE)
                self.state = 2585 
                self.colId_or_Sconst()
                self.state = 2586
                self.match(self.HANDLER)
                self.state = 2587 
                self.handler_name()
                self.state = 2588 
                self.opt_inline_handler()
                self.state = 2589 
                self.opt_validator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_trustedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_trustedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUSTED(self):
            return self.getToken(SqlParser.TRUSTED, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_trusted

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_trusted(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_trusted(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_trusted(self)
            else:
                return visitor.visitChildren(self)




    def opt_trusted(self):

        localctx = SqlParser.Opt_trustedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_opt_trusted)
        try:
            self.state = 2595
            token = self._input.LA(1)
            if token in [self.TRUSTED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2593
                self.match(self.TRUSTED)

            elif token in [self.LANGUAGE, self.PROCEDURAL]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Handler_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Handler_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attrs(self):
            return self.getTypedRuleContext(SqlParser.AttrsContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_handler_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterHandler_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitHandler_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitHandler_name(self)
            else:
                return visitor.visitChildren(self)




    def handler_name(self):

        localctx = SqlParser.Handler_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_handler_name)
        try:
            self.state = 2601
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2597 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2598 
                self.name()
                self.state = 2599 
                self.attrs(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_inline_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_inline_handlerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INLINE_P(self):
            return self.getToken(SqlParser.INLINE_P, 0)

        def handler_name(self):
            return self.getTypedRuleContext(SqlParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_inline_handler

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_inline_handler(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_inline_handler(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_inline_handler(self)
            else:
                return visitor.visitChildren(self)




    def opt_inline_handler(self):

        localctx = SqlParser.Opt_inline_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_opt_inline_handler)
        try:
            self.state = 2606
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2603
                self.match(self.INLINE_P)
                self.state = 2604 
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Validator_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Validator_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(SqlParser.VALIDATOR, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def handler_name(self):
            return self.getTypedRuleContext(SqlParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_validator_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterValidator_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitValidator_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitValidator_clause(self)
            else:
                return visitor.visitChildren(self)




    def validator_clause(self):

        localctx = SqlParser.Validator_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_validator_clause)
        try:
            self.state = 2612
            token = self._input.LA(1)
            if token in [self.VALIDATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2608
                self.match(self.VALIDATOR)
                self.state = 2609 
                self.handler_name()

            elif token in [self.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2610
                self.match(self.NO)
                self.state = 2611
                self.match(self.VALIDATOR)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_validatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_validatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def validator_clause(self):
            return self.getTypedRuleContext(SqlParser.Validator_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_validator

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_validator(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_validator(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_validator(self)
            else:
                return visitor.visitChildren(self)




    def opt_validator(self):

        localctx = SqlParser.Opt_validatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_opt_validator)
        try:
            self.state = 2616
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2614 
                self.validator_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropPLangStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropPLangStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropPLangStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropPLangStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropPLangStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropPLangStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropPLangStmt(self):

        localctx = SqlParser.DropPLangStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dropPLangStmt)
        try:
            self.state = 2632
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.match(self.DROP)
                self.state = 2619 
                self.opt_procedural()
                self.state = 2620
                self.match(self.LANGUAGE)
                self.state = 2621 
                self.colId_or_Sconst()
                self.state = 2622 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                self.match(self.DROP)
                self.state = 2625 
                self.opt_procedural()
                self.state = 2626
                self.match(self.LANGUAGE)
                self.state = 2627
                self.match(self.IF_P)
                self.state = 2628
                self.match(self.EXISTS)
                self.state = 2629 
                self.colId_or_Sconst()
                self.state = 2630 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_proceduralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_proceduralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURAL(self):
            return self.getToken(SqlParser.PROCEDURAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_procedural

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_procedural(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_procedural(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_procedural(self)
            else:
                return visitor.visitChildren(self)




    def opt_procedural(self):

        localctx = SqlParser.Opt_proceduralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_opt_procedural)
        try:
            self.state = 2636
            token = self._input.LA(1)
            if token in [self.PROCEDURAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2634
                self.match(self.PROCEDURAL)

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableSpaceStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateTableSpaceStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def optTableSpaceOwner(self):
            return self.getTypedRuleContext(SqlParser.OptTableSpaceOwnerContext,0)


        def LOCATION(self):
            return self.getToken(SqlParser.LOCATION, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createTableSpaceStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateTableSpaceStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateTableSpaceStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateTableSpaceStmt(self)
            else:
                return visitor.visitChildren(self)




    def createTableSpaceStmt(self):

        localctx = SqlParser.CreateTableSpaceStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_createTableSpaceStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.match(self.CREATE)
            self.state = 2639
            self.match(self.TABLESPACE)
            self.state = 2640 
            self.name()
            self.state = 2641 
            self.optTableSpaceOwner()
            self.state = 2642
            self.match(self.LOCATION)
            self.state = 2643 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTableSpaceOwnerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptTableSpaceOwnerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OWNER(self):
            return self.getToken(SqlParser.OWNER, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optTableSpaceOwner

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptTableSpaceOwner(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptTableSpaceOwner(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptTableSpaceOwner(self)
            else:
                return visitor.visitChildren(self)




    def optTableSpaceOwner(self):

        localctx = SqlParser.OptTableSpaceOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_optTableSpaceOwner)
        try:
            self.state = 2648
            token = self._input.LA(1)
            if token in [self.OWNER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2645
                self.match(self.OWNER)
                self.state = 2646 
                self.name()

            elif token in [self.LOCATION]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTableSpaceStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropTableSpaceStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropTableSpaceStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropTableSpaceStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropTableSpaceStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropTableSpaceStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropTableSpaceStmt(self):

        localctx = SqlParser.DropTableSpaceStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_dropTableSpaceStmt)
        try:
            self.state = 2658
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2650
                self.match(self.DROP)
                self.state = 2651
                self.match(self.TABLESPACE)
                self.state = 2652 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2653
                self.match(self.DROP)
                self.state = 2654
                self.match(self.TABLESPACE)
                self.state = 2655
                self.match(self.IF_P)
                self.state = 2656
                self.match(self.EXISTS)
                self.state = 2657 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateExtensionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateExtensionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def create_extension_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Create_extension_opt_listContext,0)


        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createExtensionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateExtensionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateExtensionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateExtensionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createExtensionStmt(self):

        localctx = SqlParser.CreateExtensionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_createExtensionStmt)
        try:
            self.state = 2679
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2660
                self.match(self.CREATE)
                self.state = 2661
                self.match(self.EXTENSION)
                self.state = 2662 
                self.name()
                self.state = 2664
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self.match(self.WITH)


                self.state = 2666 
                self.create_extension_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                self.match(self.CREATE)
                self.state = 2669
                self.match(self.EXTENSION)
                self.state = 2670
                self.match(self.IF_P)
                self.state = 2671
                self.match(self.NOT)
                self.state = 2672
                self.match(self.EXISTS)
                self.state = 2673 
                self.name()
                self.state = 2675
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 2674
                    self.match(self.WITH)


                self.state = 2677 
                self.create_extension_opt_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_extension_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Create_extension_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def create_extension_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Create_extension_opt_itemContext,0)


        def create_extension_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Create_extension_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_create_extension_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreate_extension_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreate_extension_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreate_extension_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def create_extension_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Create_extension_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_create_extension_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Create_extension_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_create_extension_opt_list)
                    self.state = 2682
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2683 
                    self.create_extension_opt_item() 
                self.state = 2688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Create_extension_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Create_extension_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def VERSION_P(self):
            return self.getToken(SqlParser.VERSION_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_create_extension_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreate_extension_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreate_extension_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreate_extension_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def create_extension_opt_item(self):

        localctx = SqlParser.Create_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_create_extension_opt_item)
        try:
            self.state = 2695
            token = self._input.LA(1)
            if token in [self.SCHEMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2689
                self.match(self.SCHEMA)
                self.state = 2690 
                self.name()

            elif token in [self.VERSION_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2691
                self.match(self.VERSION_P)
                self.state = 2692 
                self.colId_or_Sconst()

            elif token in [self.FROM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2693
                self.match(self.FROM)
                self.state = 2694 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterExtensionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterExtensionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alter_extension_opt_listContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterExtensionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterExtensionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterExtensionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterExtensionStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterExtensionStmt(self):

        localctx = SqlParser.AlterExtensionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_alterExtensionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            self.match(self.ALTER)
            self.state = 2698
            self.match(self.EXTENSION)
            self.state = 2699 
            self.name()
            self.state = 2700
            self.match(self.UPDATE)
            self.state = 2701 
            self.alter_extension_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_extension_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_extension_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Alter_extension_opt_itemContext,0)


        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alter_extension_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_extension_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_extension_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_extension_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_extension_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alter_extension_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alter_extension_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_alter_extension_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2708
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alter_extension_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_extension_opt_list)
                    self.state = 2704
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2705 
                    self.alter_extension_opt_item() 
                self.state = 2710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_extension_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_extension_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_extension_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_extension_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_extension_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_extension_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def alter_extension_opt_item(self):

        localctx = SqlParser.Alter_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_alter_extension_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2711
            self.match(self.TO)
            self.state = 2712 
            self.colId_or_Sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterExtensionContentsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterExtensionContentsStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.NameContext)
            else:
                return self.getTypedRuleContext(SqlParser.NameContext,i)


        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def add_drop(self):
            return self.getTypedRuleContext(SqlParser.Add_dropContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(SqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterExtensionContentsStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterExtensionContentsStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterExtensionContentsStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterExtensionContentsStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterExtensionContentsStmt(self):

        localctx = SqlParser.AlterExtensionContentsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_alterExtensionContentsStmt)
        try:
            self.state = 2892
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2714
                self.match(self.ALTER)
                self.state = 2715
                self.match(self.EXTENSION)
                self.state = 2716 
                self.name()
                self.state = 2717 
                self.add_drop()
                self.state = 2718
                self.match(self.AGGREGATE)
                self.state = 2719 
                self.func_name()
                self.state = 2720 
                self.aggr_args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2722
                self.match(self.ALTER)
                self.state = 2723
                self.match(self.EXTENSION)
                self.state = 2724 
                self.name()
                self.state = 2725 
                self.add_drop()
                self.state = 2726
                self.match(self.CAST)
                self.state = 2727
                self.match(self.T__6)
                self.state = 2728 
                self.typename()
                self.state = 2729
                self.match(self.AS)
                self.state = 2730 
                self.typename()
                self.state = 2731
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2733
                self.match(self.ALTER)
                self.state = 2734
                self.match(self.EXTENSION)
                self.state = 2735 
                self.name()
                self.state = 2736 
                self.add_drop()
                self.state = 2737
                self.match(self.COLLATION)
                self.state = 2738 
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2740
                self.match(self.ALTER)
                self.state = 2741
                self.match(self.EXTENSION)
                self.state = 2742 
                self.name()
                self.state = 2743 
                self.add_drop()
                self.state = 2744
                self.match(self.CONVERSION_P)
                self.state = 2745 
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2747
                self.match(self.ALTER)
                self.state = 2748
                self.match(self.EXTENSION)
                self.state = 2749 
                self.name()
                self.state = 2750 
                self.add_drop()
                self.state = 2751
                self.match(self.DOMAIN_P)
                self.state = 2752 
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2754
                self.match(self.ALTER)
                self.state = 2755
                self.match(self.EXTENSION)
                self.state = 2756 
                self.name()
                self.state = 2757 
                self.add_drop()
                self.state = 2758
                self.match(self.FUNCTION)
                self.state = 2759 
                self.function_with_argtypes()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2761
                self.match(self.ALTER)
                self.state = 2762
                self.match(self.EXTENSION)
                self.state = 2763 
                self.name()
                self.state = 2764 
                self.add_drop()
                self.state = 2765 
                self.opt_procedural()
                self.state = 2766
                self.match(self.LANGUAGE)
                self.state = 2767 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2769
                self.match(self.ALTER)
                self.state = 2770
                self.match(self.EXTENSION)
                self.state = 2771 
                self.name()
                self.state = 2772 
                self.add_drop()
                self.state = 2773
                self.match(self.OPERATOR)
                self.state = 2774 
                self.any_operator()
                self.state = 2775 
                self.oper_argtypes()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2777
                self.match(self.ALTER)
                self.state = 2778
                self.match(self.EXTENSION)
                self.state = 2779 
                self.name()
                self.state = 2780 
                self.add_drop()
                self.state = 2781
                self.match(self.OPERATOR)
                self.state = 2782
                self.match(self.CLASS)
                self.state = 2783 
                self.any_name()
                self.state = 2784
                self.match(self.USING)
                self.state = 2785 
                self.access_method()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2787
                self.match(self.ALTER)
                self.state = 2788
                self.match(self.EXTENSION)
                self.state = 2789 
                self.name()
                self.state = 2790 
                self.add_drop()
                self.state = 2791
                self.match(self.OPERATOR)
                self.state = 2792
                self.match(self.FAMILY)
                self.state = 2793 
                self.any_name()
                self.state = 2794
                self.match(self.USING)
                self.state = 2795 
                self.access_method()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2797
                self.match(self.ALTER)
                self.state = 2798
                self.match(self.EXTENSION)
                self.state = 2799 
                self.name()
                self.state = 2800 
                self.add_drop()
                self.state = 2801
                self.match(self.SCHEMA)
                self.state = 2802 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2804
                self.match(self.ALTER)
                self.state = 2805
                self.match(self.EXTENSION)
                self.state = 2806 
                self.name()
                self.state = 2807 
                self.add_drop()
                self.state = 2808
                self.match(self.TABLE)
                self.state = 2809 
                self.any_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2811
                self.match(self.ALTER)
                self.state = 2812
                self.match(self.EXTENSION)
                self.state = 2813 
                self.name()
                self.state = 2814 
                self.add_drop()
                self.state = 2815
                self.match(self.TEXT_P)
                self.state = 2816
                self.match(self.SEARCH)
                self.state = 2817
                self.match(self.PARSER)
                self.state = 2818 
                self.any_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2820
                self.match(self.ALTER)
                self.state = 2821
                self.match(self.EXTENSION)
                self.state = 2822 
                self.name()
                self.state = 2823 
                self.add_drop()
                self.state = 2824
                self.match(self.TEXT_P)
                self.state = 2825
                self.match(self.SEARCH)
                self.state = 2826
                self.match(self.DICTIONARY)
                self.state = 2827 
                self.any_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2829
                self.match(self.ALTER)
                self.state = 2830
                self.match(self.EXTENSION)
                self.state = 2831 
                self.name()
                self.state = 2832 
                self.add_drop()
                self.state = 2833
                self.match(self.TEXT_P)
                self.state = 2834
                self.match(self.SEARCH)
                self.state = 2835
                self.match(self.TEMPLATE)
                self.state = 2836 
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2838
                self.match(self.ALTER)
                self.state = 2839
                self.match(self.EXTENSION)
                self.state = 2840 
                self.name()
                self.state = 2841 
                self.add_drop()
                self.state = 2842
                self.match(self.TEXT_P)
                self.state = 2843
                self.match(self.SEARCH)
                self.state = 2844
                self.match(self.CONFIGURATION)
                self.state = 2845 
                self.any_name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2847
                self.match(self.ALTER)
                self.state = 2848
                self.match(self.EXTENSION)
                self.state = 2849 
                self.name()
                self.state = 2850 
                self.add_drop()
                self.state = 2851
                self.match(self.SEQUENCE)
                self.state = 2852 
                self.any_name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2854
                self.match(self.ALTER)
                self.state = 2855
                self.match(self.EXTENSION)
                self.state = 2856 
                self.name()
                self.state = 2857 
                self.add_drop()
                self.state = 2858
                self.match(self.VIEW)
                self.state = 2859 
                self.any_name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2861
                self.match(self.ALTER)
                self.state = 2862
                self.match(self.EXTENSION)
                self.state = 2863 
                self.name()
                self.state = 2864 
                self.add_drop()
                self.state = 2865
                self.match(self.FOREIGN)
                self.state = 2866
                self.match(self.TABLE)
                self.state = 2867 
                self.any_name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2869
                self.match(self.ALTER)
                self.state = 2870
                self.match(self.EXTENSION)
                self.state = 2871 
                self.name()
                self.state = 2872 
                self.add_drop()
                self.state = 2873
                self.match(self.FOREIGN)
                self.state = 2874
                self.match(self.DATA_P)
                self.state = 2875
                self.match(self.WRAPPER)
                self.state = 2876 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2878
                self.match(self.ALTER)
                self.state = 2879
                self.match(self.EXTENSION)
                self.state = 2880 
                self.name()
                self.state = 2881 
                self.add_drop()
                self.state = 2882
                self.match(self.SERVER)
                self.state = 2883 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2885
                self.match(self.ALTER)
                self.state = 2886
                self.match(self.EXTENSION)
                self.state = 2887 
                self.name()
                self.state = 2888 
                self.add_drop()
                self.state = 2889
                self.match(self.TYPE_P)
                self.state = 2890 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def opt_fdw_options(self):
            return self.getTypedRuleContext(SqlParser.Opt_fdw_optionsContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Create_generic_optionsContext,0)


        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def createFdwStmt(self):

        localctx = SqlParser.CreateFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_createFdwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self.match(self.CREATE)
            self.state = 2895
            self.match(self.FOREIGN)
            self.state = 2896
            self.match(self.DATA_P)
            self.state = 2897
            self.match(self.WRAPPER)
            self.state = 2898 
            self.name()
            self.state = 2899 
            self.opt_fdw_options()
            self.state = 2900 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fdw_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Fdw_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(SqlParser.VALIDATOR, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def handler_name(self):
            return self.getTypedRuleContext(SqlParser.Handler_nameContext,0)


        def HANDLER(self):
            return self.getToken(SqlParser.HANDLER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_fdw_option

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFdw_option(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFdw_option(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFdw_option(self)
            else:
                return visitor.visitChildren(self)




    def fdw_option(self):

        localctx = SqlParser.Fdw_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_fdw_option)
        try:
            self.state = 2910
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2902
                self.match(self.HANDLER)
                self.state = 2903 
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2904
                self.match(self.NO)
                self.state = 2905
                self.match(self.HANDLER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2906
                self.match(self.VALIDATOR)
                self.state = 2907 
                self.handler_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2908
                self.match(self.NO)
                self.state = 2909
                self.match(self.VALIDATOR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fdw_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Fdw_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fdw_option(self):
            return self.getTypedRuleContext(SqlParser.Fdw_optionContext,0)


        def fdw_options(self):
            return self.getTypedRuleContext(SqlParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_fdw_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFdw_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFdw_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFdw_options(self)
            else:
                return visitor.visitChildren(self)



    def fdw_options(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Fdw_optionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 284
        self.enterRecursionRule(localctx, 284, self.RULE_fdw_options, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913 
            self.fdw_option()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Fdw_optionsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fdw_options)
                    self.state = 2915
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2916 
                    self.fdw_option() 
                self.state = 2921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_fdw_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_fdw_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fdw_options(self):
            return self.getTypedRuleContext(SqlParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_fdw_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_fdw_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_fdw_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_fdw_options(self)
            else:
                return visitor.visitChildren(self)




    def opt_fdw_options(self):

        localctx = SqlParser.Opt_fdw_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_opt_fdw_options)
        try:
            self.state = 2924
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2922 
                self.fdw_options(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropFdwStmt(self):

        localctx = SqlParser.DropFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_dropFdwStmt)
        try:
            self.state = 2942
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2926
                self.match(self.DROP)
                self.state = 2927
                self.match(self.FOREIGN)
                self.state = 2928
                self.match(self.DATA_P)
                self.state = 2929
                self.match(self.WRAPPER)
                self.state = 2930 
                self.name()
                self.state = 2931 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2933
                self.match(self.DROP)
                self.state = 2934
                self.match(self.FOREIGN)
                self.state = 2935
                self.match(self.DATA_P)
                self.state = 2936
                self.match(self.WRAPPER)
                self.state = 2937
                self.match(self.IF_P)
                self.state = 2938
                self.match(self.EXISTS)
                self.state = 2939 
                self.name()
                self.state = 2940 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterFdwStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterFdwStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_fdw_options(self):
            return self.getTypedRuleContext(SqlParser.Opt_fdw_optionsContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_optionsContext,0)


        def fdw_options(self):
            return self.getTypedRuleContext(SqlParser.Fdw_optionsContext,0)


        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterFdwStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterFdwStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterFdwStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterFdwStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterFdwStmt(self):

        localctx = SqlParser.AlterFdwStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_alterFdwStmt)
        try:
            self.state = 2959
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2944
                self.match(self.ALTER)
                self.state = 2945
                self.match(self.FOREIGN)
                self.state = 2946
                self.match(self.DATA_P)
                self.state = 2947
                self.match(self.WRAPPER)
                self.state = 2948 
                self.name()
                self.state = 2949 
                self.opt_fdw_options()
                self.state = 2950 
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2952
                self.match(self.ALTER)
                self.state = 2953
                self.match(self.FOREIGN)
                self.state = 2954
                self.match(self.DATA_P)
                self.state = 2955
                self.match(self.WRAPPER)
                self.state = 2956 
                self.name()
                self.state = 2957 
                self.fdw_options(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_generic_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Create_generic_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_list(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_listContext,0)


        def OPTIONS(self):
            return self.getToken(SqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_create_generic_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreate_generic_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreate_generic_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreate_generic_options(self)
            else:
                return visitor.visitChildren(self)




    def create_generic_options(self):

        localctx = SqlParser.Create_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_create_generic_options)
        try:
            self.state = 2967
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2961
                self.match(self.OPTIONS)
                self.state = 2962
                self.match(self.T__6)
                self.state = 2963 
                self.generic_option_list(0)
                self.state = 2964
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Generic_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_elemContext,0)


        def generic_option_list(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_generic_option_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGeneric_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGeneric_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGeneric_option_list(self)
            else:
                return visitor.visitChildren(self)



    def generic_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Generic_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 294
        self.enterRecursionRule(localctx, 294, self.RULE_generic_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2970 
            self.generic_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Generic_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_generic_option_list)
                    self.state = 2972
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2973
                    self.match(self.T__11)
                    self.state = 2974 
                    self.generic_option_elem() 
                self.state = 2979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_generic_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_generic_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_option_listContext,0)


        def OPTIONS(self):
            return self.getToken(SqlParser.OPTIONS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_generic_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_generic_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_generic_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_generic_options(self)
            else:
                return visitor.visitChildren(self)




    def alter_generic_options(self):

        localctx = SqlParser.Alter_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_alter_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2980
            self.match(self.OPTIONS)
            self.state = 2981
            self.match(self.T__6)
            self.state = 2982 
            self.alter_generic_option_list(0)
            self.state = 2983
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_generic_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_generic_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_option_listContext,0)


        def alter_generic_option_elem(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_option_elemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_generic_option_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_generic_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_generic_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_generic_option_list(self)
            else:
                return visitor.visitChildren(self)



    def alter_generic_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alter_generic_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 298
        self.enterRecursionRule(localctx, 298, self.RULE_alter_generic_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2986 
            self.alter_generic_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alter_generic_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alter_generic_option_list)
                    self.state = 2988
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2989
                    self.match(self.T__11)
                    self.state = 2990 
                    self.alter_generic_option_elem() 
                self.state = 2995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alter_generic_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alter_generic_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def generic_option_elem(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_elemContext,0)


        def generic_option_name(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_nameContext,0)


        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_generic_option_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlter_generic_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlter_generic_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlter_generic_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def alter_generic_option_elem(self):

        localctx = SqlParser.Alter_generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_alter_generic_option_elem)
        try:
            self.state = 3003
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2996 
                self.generic_option_elem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2997
                self.match(self.SET)
                self.state = 2998 
                self.generic_option_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2999
                self.match(self.ADD_P)
                self.state = 3000 
                self.generic_option_elem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3001
                self.match(self.DROP)
                self.state = 3002 
                self.generic_option_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Generic_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def generic_option_name(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_nameContext,0)


        def generic_option_arg(self):
            return self.getTypedRuleContext(SqlParser.Generic_option_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_generic_option_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGeneric_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGeneric_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGeneric_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_elem(self):

        localctx = SqlParser.Generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_generic_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005 
            self.generic_option_name()
            self.state = 3006 
            self.generic_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Generic_option_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_generic_option_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGeneric_option_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGeneric_option_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGeneric_option_name(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_name(self):

        localctx = SqlParser.Generic_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_generic_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3008 
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_option_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Generic_option_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_generic_option_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGeneric_option_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGeneric_option_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGeneric_option_arg(self)
            else:
                return visitor.visitChildren(self)




    def generic_option_arg(self):

        localctx = SqlParser.Generic_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_generic_option_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3010 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def create_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Create_generic_optionsContext,0)


        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.NameContext)
            else:
                return self.getTypedRuleContext(SqlParser.NameContext,i)


        def opt_type(self):
            return self.getTypedRuleContext(SqlParser.Opt_typeContext,0)


        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def opt_foreign_server_version(self):
            return self.getTypedRuleContext(SqlParser.Opt_foreign_server_versionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def createForeignServerStmt(self):

        localctx = SqlParser.CreateForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_createForeignServerStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3012
            self.match(self.CREATE)
            self.state = 3013
            self.match(self.SERVER)
            self.state = 3014 
            self.name()
            self.state = 3015 
            self.opt_type()
            self.state = 3016 
            self.opt_foreign_server_version()
            self.state = 3017
            self.match(self.FOREIGN)
            self.state = 3018
            self.match(self.DATA_P)
            self.state = 3019
            self.match(self.WRAPPER)
            self.state = 3020 
            self.name()
            self.state = 3021 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_type(self)
            else:
                return visitor.visitChildren(self)




    def opt_type(self):

        localctx = SqlParser.Opt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_opt_type)
        try:
            self.state = 3026
            token = self._input.LA(1)
            if token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3023
                self.match(self.TYPE_P)
                self.state = 3024 
                self.sConst()

            elif token in [self.FOREIGN, self.VERSION_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_server_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Foreign_server_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def VERSION_P(self):
            return self.getToken(SqlParser.VERSION_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_foreign_server_version

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterForeign_server_version(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitForeign_server_version(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitForeign_server_version(self)
            else:
                return visitor.visitChildren(self)




    def foreign_server_version(self):

        localctx = SqlParser.Foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_foreign_server_version)
        try:
            self.state = 3032
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3028
                self.match(self.VERSION_P)
                self.state = 3029 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3030
                self.match(self.VERSION_P)
                self.state = 3031
                self.match(self.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_foreign_server_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_foreign_server_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(SqlParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_foreign_server_version

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_foreign_server_version(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_foreign_server_version(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_foreign_server_version(self)
            else:
                return visitor.visitChildren(self)




    def opt_foreign_server_version(self):

        localctx = SqlParser.Opt_foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_opt_foreign_server_version)
        try:
            self.state = 3036
            token = self._input.LA(1)
            if token in [self.VERSION_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3034 
                self.foreign_server_version()

            elif token in [self.FOREIGN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropForeignServerStmt(self):

        localctx = SqlParser.DropForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dropForeignServerStmt)
        try:
            self.state = 3050
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3038
                self.match(self.DROP)
                self.state = 3039
                self.match(self.SERVER)
                self.state = 3040 
                self.name()
                self.state = 3041 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3043
                self.match(self.DROP)
                self.state = 3044
                self.match(self.SERVER)
                self.state = 3045
                self.match(self.IF_P)
                self.state = 3046
                self.match(self.EXISTS)
                self.state = 3047 
                self.name()
                self.state = 3048 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterForeignServerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterForeignServerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(SqlParser.Foreign_server_versionContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_optionsContext,0)


        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterForeignServerStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterForeignServerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterForeignServerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterForeignServerStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignServerStmt(self):

        localctx = SqlParser.AlterForeignServerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_alterForeignServerStmt)
        try:
            self.state = 3068
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3052
                self.match(self.ALTER)
                self.state = 3053
                self.match(self.SERVER)
                self.state = 3054 
                self.name()
                self.state = 3055 
                self.foreign_server_version()
                self.state = 3056 
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3058
                self.match(self.ALTER)
                self.state = 3059
                self.match(self.SERVER)
                self.state = 3060 
                self.name()
                self.state = 3061 
                self.foreign_server_version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3063
                self.match(self.ALTER)
                self.state = 3064
                self.match(self.SERVER)
                self.state = 3065 
                self.name()
                self.state = 3066 
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateForeignTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateForeignTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def create_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Create_generic_optionsContext,0)


        def optforeigntableElementList(self):
            return self.getTypedRuleContext(SqlParser.OptforeigntableElementListContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createForeignTableStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateForeignTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateForeignTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateForeignTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def createForeignTableStmt(self):

        localctx = SqlParser.CreateForeignTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_createForeignTableStmt)
        try:
            self.state = 3091
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3070
                self.match(self.CREATE)
                self.state = 3071
                self.match(self.FOREIGN)
                self.state = 3072
                self.match(self.TABLE)
                self.state = 3073 
                self.qualified_name()
                self.state = 3074 
                self.optforeigntableElementList()
                self.state = 3075
                self.match(self.SERVER)
                self.state = 3076 
                self.name()
                self.state = 3077 
                self.create_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3079
                self.match(self.CREATE)
                self.state = 3080
                self.match(self.FOREIGN)
                self.state = 3081
                self.match(self.TABLE)
                self.state = 3082
                self.match(self.IF_P)
                self.state = 3083
                self.match(self.NOT)
                self.state = 3084
                self.match(self.EXISTS)
                self.state = 3085 
                self.qualified_name()
                self.state = 3086 
                self.optforeigntableElementList()
                self.state = 3087
                self.match(self.SERVER)
                self.state = 3088 
                self.name()
                self.state = 3089 
                self.create_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptforeigntableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptforeigntableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreigntableElementList(self):
            return self.getTypedRuleContext(SqlParser.ForeigntableElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optforeigntableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptforeigntableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptforeigntableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptforeigntableElementList(self)
            else:
                return visitor.visitChildren(self)




    def optforeigntableElementList(self):

        localctx = SqlParser.OptforeigntableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_optforeigntableElementList)
        try:
            self.state = 3099
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3093
                self.match(self.T__6)
                self.state = 3094 
                self.foreigntableElementList(0)
                self.state = 3095
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3097
                self.match(self.T__6)
                self.state = 3098
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForeigntableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ForeigntableElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def foreigntableElementList(self):
            return self.getTypedRuleContext(SqlParser.ForeigntableElementListContext,0)


        def foreigntableElement(self):
            return self.getTypedRuleContext(SqlParser.ForeigntableElementContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_foreigntableElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterForeigntableElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitForeigntableElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitForeigntableElementList(self)
            else:
                return visitor.visitChildren(self)



    def foreigntableElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ForeigntableElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 324
        self.enterRecursionRule(localctx, 324, self.RULE_foreigntableElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102 
            self.foreigntableElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.ForeigntableElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_foreigntableElementList)
                    self.state = 3104
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3105
                    self.match(self.T__11)
                    self.state = 3106 
                    self.foreigntableElement() 
                self.state = 3111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ForeigntableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ForeigntableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnDef(self):
            return self.getTypedRuleContext(SqlParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_foreigntableElement

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterForeigntableElement(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitForeigntableElement(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitForeigntableElement(self)
            else:
                return visitor.visitChildren(self)




    def foreigntableElement(self):

        localctx = SqlParser.ForeigntableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_foreigntableElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112 
            self.columnDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterForeignTableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterForeignTableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def alter_table_cmds(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_cmdsContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterForeignTableStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterForeignTableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterForeignTableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterForeignTableStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignTableStmt(self):

        localctx = SqlParser.AlterForeignTableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_alterForeignTableStmt)
        try:
            self.state = 3128
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3114
                self.match(self.ALTER)
                self.state = 3115
                self.match(self.FOREIGN)
                self.state = 3116
                self.match(self.TABLE)
                self.state = 3117 
                self.relation_expr()
                self.state = 3118 
                self.alter_table_cmds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3120
                self.match(self.ALTER)
                self.state = 3121
                self.match(self.FOREIGN)
                self.state = 3122
                self.match(self.TABLE)
                self.state = 3123
                self.match(self.IF_P)
                self.state = 3124
                self.match(self.EXISTS)
                self.state = 3125 
                self.relation_expr()
                self.state = 3126 
                self.alter_table_cmds(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def MAPPING(self):
            return self.getToken(SqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(SqlParser.Auth_identContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Create_generic_optionsContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def createUserMappingStmt(self):

        localctx = SqlParser.CreateUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_createUserMappingStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3130
            self.match(self.CREATE)
            self.state = 3131
            self.match(self.USER)
            self.state = 3132
            self.match(self.MAPPING)
            self.state = 3133
            self.match(self.FOR)
            self.state = 3134 
            self.auth_ident()
            self.state = 3135
            self.match(self.SERVER)
            self.state = 3136 
            self.name()
            self.state = 3137 
            self.create_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auth_identContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Auth_identContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlParser.CURRENT_USER, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_auth_ident

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAuth_ident(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAuth_ident(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAuth_ident(self)
            else:
                return visitor.visitChildren(self)




    def auth_ident(self):

        localctx = SqlParser.Auth_identContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_auth_ident)
        try:
            self.state = 3142
            token = self._input.LA(1)
            if token in [self.CURRENT_USER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3139
                self.match(self.CURRENT_USER)

            elif token in [self.USER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3140
                self.match(self.USER)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3141 
                self.roleId()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def MAPPING(self):
            return self.getToken(SqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(SqlParser.Auth_identContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropUserMappingStmt(self):

        localctx = SqlParser.DropUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_dropUserMappingStmt)
        try:
            self.state = 3162
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3144
                self.match(self.DROP)
                self.state = 3145
                self.match(self.USER)
                self.state = 3146
                self.match(self.MAPPING)
                self.state = 3147
                self.match(self.FOR)
                self.state = 3148 
                self.auth_ident()
                self.state = 3149
                self.match(self.SERVER)
                self.state = 3150 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3152
                self.match(self.DROP)
                self.state = 3153
                self.match(self.USER)
                self.state = 3154
                self.match(self.MAPPING)
                self.state = 3155
                self.match(self.IF_P)
                self.state = 3156
                self.match(self.EXISTS)
                self.state = 3157
                self.match(self.FOR)
                self.state = 3158 
                self.auth_ident()
                self.state = 3159
                self.match(self.SERVER)
                self.state = 3160 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserMappingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterUserMappingStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(SqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(SqlParser.Auth_identContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def alter_generic_options(self):
            return self.getTypedRuleContext(SqlParser.Alter_generic_optionsContext,0)


        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterUserMappingStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterUserMappingStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterUserMappingStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterUserMappingStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterUserMappingStmt(self):

        localctx = SqlParser.AlterUserMappingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_alterUserMappingStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3164
            self.match(self.ALTER)
            self.state = 3165
            self.match(self.USER)
            self.state = 3166
            self.match(self.MAPPING)
            self.state = 3167
            self.match(self.FOR)
            self.state = 3168 
            self.auth_ident()
            self.state = 3169
            self.match(self.SERVER)
            self.state = 3170 
            self.name()
            self.state = 3171 
            self.alter_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTrigStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateTrigStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def triggerForSpec(self):
            return self.getTypedRuleContext(SqlParser.TriggerForSpecContext,0)


        def triggerFuncArgs(self):
            return self.getTypedRuleContext(SqlParser.TriggerFuncArgsContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def EXECUTE(self):
            return self.getToken(SqlParser.EXECUTE, 0)

        def optConstrFromTable(self):
            return self.getTypedRuleContext(SqlParser.OptConstrFromTableContext,0)


        def PROCEDURE(self):
            return self.getToken(SqlParser.PROCEDURE, 0)

        def triggerEvents(self):
            return self.getTypedRuleContext(SqlParser.TriggerEventsContext,0)


        def EACH(self):
            return self.getToken(SqlParser.EACH, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttributeSpecContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def triggerActionTime(self):
            return self.getTypedRuleContext(SqlParser.TriggerActionTimeContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def triggerWhen(self):
            return self.getTypedRuleContext(SqlParser.TriggerWhenContext,0)


        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def AFTER(self):
            return self.getToken(SqlParser.AFTER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createTrigStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateTrigStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateTrigStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateTrigStmt(self)
            else:
                return visitor.visitChildren(self)




    def createTrigStmt(self):

        localctx = SqlParser.CreateTrigStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_createTrigStmt)
        try:
            self.state = 3210
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3173
                self.match(self.CREATE)
                self.state = 3174
                self.match(self.TRIGGER)
                self.state = 3175 
                self.name()
                self.state = 3176 
                self.triggerActionTime()
                self.state = 3177 
                self.triggerEvents(0)
                self.state = 3178
                self.match(self.ON)
                self.state = 3179 
                self.qualified_name()
                self.state = 3180 
                self.triggerForSpec()
                self.state = 3181 
                self.triggerWhen()
                self.state = 3182
                self.match(self.EXECUTE)
                self.state = 3183
                self.match(self.PROCEDURE)
                self.state = 3184 
                self.func_name()
                self.state = 3185
                self.match(self.T__6)
                self.state = 3186 
                self.triggerFuncArgs(0)
                self.state = 3187
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3189
                self.match(self.CREATE)
                self.state = 3190
                self.match(self.CONSTRAINT)
                self.state = 3191
                self.match(self.TRIGGER)
                self.state = 3192 
                self.name()
                self.state = 3193
                self.match(self.AFTER)
                self.state = 3194 
                self.triggerEvents(0)
                self.state = 3195
                self.match(self.ON)
                self.state = 3196 
                self.qualified_name()
                self.state = 3197 
                self.optConstrFromTable()
                self.state = 3198 
                self.constraintAttributeSpec(0)
                self.state = 3199
                self.match(self.FOR)
                self.state = 3200
                self.match(self.EACH)
                self.state = 3201
                self.match(self.ROW)
                self.state = 3202 
                self.triggerWhen()
                self.state = 3203
                self.match(self.EXECUTE)
                self.state = 3204
                self.match(self.PROCEDURE)
                self.state = 3205 
                self.func_name()
                self.state = 3206
                self.match(self.T__6)
                self.state = 3207 
                self.triggerFuncArgs(0)
                self.state = 3208
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerActionTimeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerActionTimeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSTEAD(self):
            return self.getToken(SqlParser.INSTEAD, 0)

        def BEFORE(self):
            return self.getToken(SqlParser.BEFORE, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def AFTER(self):
            return self.getToken(SqlParser.AFTER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerActionTime

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerActionTime(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerActionTime(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerActionTime(self)
            else:
                return visitor.visitChildren(self)




    def triggerActionTime(self):

        localctx = SqlParser.TriggerActionTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_triggerActionTime)
        try:
            self.state = 3216
            token = self._input.LA(1)
            if token in [self.BEFORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3212
                self.match(self.BEFORE)

            elif token in [self.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3213
                self.match(self.AFTER)

            elif token in [self.INSTEAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3214
                self.match(self.INSTEAD)
                self.state = 3215
                self.match(self.OF)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerEventsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerEventsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlParser.OR, 0)

        def triggerOneEvent(self):
            return self.getTypedRuleContext(SqlParser.TriggerOneEventContext,0)


        def triggerEvents(self):
            return self.getTypedRuleContext(SqlParser.TriggerEventsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_triggerEvents

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerEvents(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerEvents(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerEvents(self)
            else:
                return visitor.visitChildren(self)



    def triggerEvents(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TriggerEventsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 342
        self.enterRecursionRule(localctx, 342, self.RULE_triggerEvents, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219 
            self.triggerOneEvent()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.TriggerEventsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_triggerEvents)
                    self.state = 3221
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3222
                    self.match(self.OR)
                    self.state = 3223 
                    self.triggerOneEvent() 
                self.state = 3228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TriggerOneEventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerOneEventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def INSERT(self):
            return self.getToken(SqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerOneEvent

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerOneEvent(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerOneEvent(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerOneEvent(self)
            else:
                return visitor.visitChildren(self)




    def triggerOneEvent(self):

        localctx = SqlParser.TriggerOneEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_triggerOneEvent)
        try:
            self.state = 3236
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3229
                self.match(self.INSERT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3230
                self.match(self.DELETE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3231
                self.match(self.UPDATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3232
                self.match(self.UPDATE)
                self.state = 3233
                self.match(self.OF)
                self.state = 3234 
                self.columnList(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3235
                self.match(self.TRUNCATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerForSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def triggerForType(self):
            return self.getTypedRuleContext(SqlParser.TriggerForTypeContext,0)


        def triggerForOptEach(self):
            return self.getTypedRuleContext(SqlParser.TriggerForOptEachContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerForSpec

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerForSpec(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerForSpec(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerForSpec(self)
            else:
                return visitor.visitChildren(self)




    def triggerForSpec(self):

        localctx = SqlParser.TriggerForSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_triggerForSpec)
        try:
            self.state = 3243
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3238
                self.match(self.FOR)
                self.state = 3239 
                self.triggerForOptEach()
                self.state = 3240 
                self.triggerForType()

            elif token in [self.EXECUTE, self.WHEN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForOptEachContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerForOptEachContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EACH(self):
            return self.getToken(SqlParser.EACH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerForOptEach

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerForOptEach(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerForOptEach(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerForOptEach(self)
            else:
                return visitor.visitChildren(self)




    def triggerForOptEach(self):

        localctx = SqlParser.TriggerForOptEachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_triggerForOptEach)
        try:
            self.state = 3247
            token = self._input.LA(1)
            if token in [self.EACH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3245
                self.match(self.EACH)

            elif token in [self.ROW, self.STATEMENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerForTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerForTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATEMENT(self):
            return self.getToken(SqlParser.STATEMENT, 0)

        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerForType

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerForType(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerForType(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerForType(self)
            else:
                return visitor.visitChildren(self)




    def triggerForType(self):

        localctx = SqlParser.TriggerForTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_triggerForType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3249
            _la = self._input.LA(1)
            if not(_la==SqlParser.ROW or _la==SqlParser.STATEMENT):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerWhenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerWhenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def WHEN(self):
            return self.getToken(SqlParser.WHEN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_triggerWhen

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerWhen(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerWhen(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerWhen(self)
            else:
                return visitor.visitChildren(self)




    def triggerWhen(self):

        localctx = SqlParser.TriggerWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_triggerWhen)
        try:
            self.state = 3257
            token = self._input.LA(1)
            if token in [self.WHEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3251
                self.match(self.WHEN)
                self.state = 3252
                self.match(self.T__6)
                self.state = 3253 
                self.a_expr(0)
                self.state = 3254
                self.match(self.T__13)

            elif token in [self.EXECUTE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriggerFuncArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerFuncArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def triggerFuncArg(self):
            return self.getTypedRuleContext(SqlParser.TriggerFuncArgContext,0)


        def triggerFuncArgs(self):
            return self.getTypedRuleContext(SqlParser.TriggerFuncArgsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_triggerFuncArgs

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerFuncArgs(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerFuncArgs(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerFuncArgs(self)
            else:
                return visitor.visitChildren(self)



    def triggerFuncArgs(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TriggerFuncArgsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 354
        self.enterRecursionRule(localctx, 354, self.RULE_triggerFuncArgs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 3260 
                self.triggerFuncArg()
                pass

            elif la_ == 2:
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.TriggerFuncArgsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_triggerFuncArgs)
                    self.state = 3264
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 3265
                    self.match(self.T__11)
                    self.state = 3266 
                    self.triggerFuncArg() 
                self.state = 3271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TriggerFuncArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TriggerFuncArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def FCONST(self):
            return self.getToken(SqlParser.FCONST, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_triggerFuncArg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTriggerFuncArg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTriggerFuncArg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTriggerFuncArg(self)
            else:
                return visitor.visitChildren(self)




    def triggerFuncArg(self):

        localctx = SqlParser.TriggerFuncArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_triggerFuncArg)
        try:
            self.state = 3276
            token = self._input.LA(1)
            if token in [self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3272 
                self.iConst()

            elif token in [self.FCONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3273
                self.match(self.FCONST)

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3274 
                self.sConst()

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALL, self.ALSO, self.ALTER, self.ALWAYS, self.ANALYSE, self.ANALYZE, self.AND, self.ANY, self.ARRAY, self.AS, self.ASC, self.ASSERTION, self.ASSIGNMENT, self.ASYMMETRIC, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BOTH, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECK, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATE, self.COLLATION, self.COLUMN, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINT, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CREATE, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULT, self.DEFAULTS, self.DEFERRABLE, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DESC, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DISTINCT, self.DO, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ELSE, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.END_P, self.ENUM_P, self.ESCAPE, self.EXCEPT, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FETCH, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FOR, self.FORCE, self.FOREIGN, self.FORWARD, self.FREEZE, self.FROM, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANT, self.GRANTED, self.GREATEST, self.GROUP_P, self.HANDLER, self.HAVING, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.IN_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INITIALLY, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERSECT, self.INTERVAL, self.INTO, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEADING, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LIMIT, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOT, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OFFSET, self.OIDS, self.ON, self.ONLY, self.OPERATOR, self.OPTION, self.OPTIONS, self.OR, self.ORDER, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLACING, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIMARY, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REFERENCES, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNING, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SELECT, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.SOME, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYMMETRIC, self.SYSID, self.SYSTEM_P, self.TABLE, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.THEN, self.TIME, self.TIMESTAMP, self.TO, self.TRAILING, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNION, self.UNIQUE, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.USING, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARIADIC, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHEN, self.WHERE, self.WHITESPACE_P, self.WINDOW, self.WITH, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3275 
                self.colLabel()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptConstrFromTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptConstrFromTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_optConstrFromTable

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptConstrFromTable(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptConstrFromTable(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptConstrFromTable(self)
            else:
                return visitor.visitChildren(self)




    def optConstrFromTable(self):

        localctx = SqlParser.OptConstrFromTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_optConstrFromTable)
        try:
            self.state = 3281
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3278
                self.match(self.FROM)
                self.state = 3279 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintAttributeSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstraintAttributeSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttributeSpecContext,0)


        def constraintAttributeElem(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttributeElemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constraintAttributeSpec

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraintAttributeSpec(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraintAttributeSpec(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraintAttributeSpec(self)
            else:
                return visitor.visitChildren(self)



    def constraintAttributeSpec(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ConstraintAttributeSpecContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_constraintAttributeSpec, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 3288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.ConstraintAttributeSpecContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_constraintAttributeSpec)
                    self.state = 3284
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3285 
                    self.constraintAttributeElem() 
                self.state = 3290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstraintAttributeElemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstraintAttributeElemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(SqlParser.DEFERRED, 0)

        def VALID(self):
            return self.getToken(SqlParser.VALID, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlParser.DEFERRABLE, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def INHERIT(self):
            return self.getToken(SqlParser.INHERIT, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlParser.IMMEDIATE, 0)

        def INITIALLY(self):
            return self.getToken(SqlParser.INITIALLY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_constraintAttributeElem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstraintAttributeElem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstraintAttributeElem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstraintAttributeElem(self)
            else:
                return visitor.visitChildren(self)




    def constraintAttributeElem(self):

        localctx = SqlParser.ConstraintAttributeElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_constraintAttributeElem)
        try:
            self.state = 3302
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3291
                self.match(self.NOT)
                self.state = 3292
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3293
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3294
                self.match(self.INITIALLY)
                self.state = 3295
                self.match(self.IMMEDIATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3296
                self.match(self.INITIALLY)
                self.state = 3297
                self.match(self.DEFERRED)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3298
                self.match(self.NOT)
                self.state = 3299
                self.match(self.VALID)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3300
                self.match(self.NO)
                self.state = 3301
                self.match(self.INHERIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTrigStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropTrigStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropTrigStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropTrigStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropTrigStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropTrigStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropTrigStmt(self):

        localctx = SqlParser.DropTrigStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_dropTrigStmt)
        try:
            self.state = 3320
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3304
                self.match(self.DROP)
                self.state = 3305
                self.match(self.TRIGGER)
                self.state = 3306 
                self.name()
                self.state = 3307
                self.match(self.ON)
                self.state = 3308 
                self.any_name()
                self.state = 3309 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3311
                self.match(self.DROP)
                self.state = 3312
                self.match(self.TRIGGER)
                self.state = 3313
                self.match(self.IF_P)
                self.state = 3314
                self.match(self.EXISTS)
                self.state = 3315 
                self.name()
                self.state = 3316
                self.match(self.ON)
                self.state = 3317 
                self.any_name()
                self.state = 3318 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateAssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateAssertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SqlParser.CHECK, 0)

        def constraintAttributeSpec(self):
            return self.getTypedRuleContext(SqlParser.ConstraintAttributeSpecContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def ASSERTION(self):
            return self.getToken(SqlParser.ASSERTION, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createAssertStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateAssertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateAssertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateAssertStmt(self)
            else:
                return visitor.visitChildren(self)




    def createAssertStmt(self):

        localctx = SqlParser.CreateAssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_createAssertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            self.match(self.CREATE)
            self.state = 3323
            self.match(self.ASSERTION)
            self.state = 3324 
            self.name()
            self.state = 3325
            self.match(self.CHECK)
            self.state = 3326
            self.match(self.T__6)
            self.state = 3327 
            self.a_expr(0)
            self.state = 3328
            self.match(self.T__13)
            self.state = 3329 
            self.constraintAttributeSpec(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropAssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropAssertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSERTION(self):
            return self.getToken(SqlParser.ASSERTION, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropAssertStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropAssertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropAssertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropAssertStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropAssertStmt(self):

        localctx = SqlParser.DropAssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_dropAssertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3331
            self.match(self.DROP)
            self.state = 3332
            self.match(self.ASSERTION)
            self.state = 3333 
            self.name()
            self.state = 3334 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefineStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DefineStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def old_aggr_definition(self):
            return self.getTypedRuleContext(SqlParser.Old_aggr_definitionContext,0)


        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Any_nameContext,i)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def RANGE(self):
            return self.getToken(SqlParser.RANGE, 0)

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def opttableFuncElementList(self):
            return self.getTypedRuleContext(SqlParser.OpttableFuncElementListContext,0)


        def ENUM_P(self):
            return self.getToken(SqlParser.ENUM_P, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def opt_enum_val_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_enum_val_listContext,0)


        def definition(self):
            return self.getTypedRuleContext(SqlParser.DefinitionContext,0)


        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_defineStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefineStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefineStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefineStmt(self)
            else:
                return visitor.visitChildren(self)




    def defineStmt(self):

        localctx = SqlParser.DefineStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_defineStmt)
        try:
            self.state = 3423
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3336
                self.match(self.CREATE)
                self.state = 3337
                self.match(self.AGGREGATE)
                self.state = 3338 
                self.func_name()
                self.state = 3339 
                self.aggr_args()
                self.state = 3340 
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3342
                self.match(self.CREATE)
                self.state = 3343
                self.match(self.AGGREGATE)
                self.state = 3344 
                self.func_name()
                self.state = 3345 
                self.old_aggr_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3347
                self.match(self.CREATE)
                self.state = 3348
                self.match(self.OPERATOR)
                self.state = 3349 
                self.any_operator()
                self.state = 3350 
                self.definition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3352
                self.match(self.CREATE)
                self.state = 3353
                self.match(self.TYPE_P)
                self.state = 3354 
                self.any_name()
                self.state = 3355 
                self.definition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3357
                self.match(self.CREATE)
                self.state = 3358
                self.match(self.TYPE_P)
                self.state = 3359 
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3360
                self.match(self.CREATE)
                self.state = 3361
                self.match(self.TYPE_P)
                self.state = 3362 
                self.any_name()
                self.state = 3363
                self.match(self.AS)
                self.state = 3364
                self.match(self.T__6)
                self.state = 3365 
                self.opttableFuncElementList()
                self.state = 3366
                self.match(self.T__13)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3368
                self.match(self.CREATE)
                self.state = 3369
                self.match(self.TYPE_P)
                self.state = 3370 
                self.any_name()
                self.state = 3371
                self.match(self.AS)
                self.state = 3372
                self.match(self.ENUM_P)
                self.state = 3373
                self.match(self.T__6)
                self.state = 3374 
                self.opt_enum_val_list()
                self.state = 3375
                self.match(self.T__13)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3377
                self.match(self.CREATE)
                self.state = 3378
                self.match(self.TYPE_P)
                self.state = 3379 
                self.any_name()
                self.state = 3380
                self.match(self.AS)
                self.state = 3381
                self.match(self.RANGE)
                self.state = 3382 
                self.definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3384
                self.match(self.CREATE)
                self.state = 3385
                self.match(self.TEXT_P)
                self.state = 3386
                self.match(self.SEARCH)
                self.state = 3387
                self.match(self.PARSER)
                self.state = 3388 
                self.any_name()
                self.state = 3389 
                self.definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3391
                self.match(self.CREATE)
                self.state = 3392
                self.match(self.TEXT_P)
                self.state = 3393
                self.match(self.SEARCH)
                self.state = 3394
                self.match(self.DICTIONARY)
                self.state = 3395 
                self.any_name()
                self.state = 3396 
                self.definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3398
                self.match(self.CREATE)
                self.state = 3399
                self.match(self.TEXT_P)
                self.state = 3400
                self.match(self.SEARCH)
                self.state = 3401
                self.match(self.TEMPLATE)
                self.state = 3402 
                self.any_name()
                self.state = 3403 
                self.definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3405
                self.match(self.CREATE)
                self.state = 3406
                self.match(self.TEXT_P)
                self.state = 3407
                self.match(self.SEARCH)
                self.state = 3408
                self.match(self.CONFIGURATION)
                self.state = 3409 
                self.any_name()
                self.state = 3410 
                self.definition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3412
                self.match(self.CREATE)
                self.state = 3413
                self.match(self.COLLATION)
                self.state = 3414 
                self.any_name()
                self.state = 3415 
                self.definition()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3417
                self.match(self.CREATE)
                self.state = 3418
                self.match(self.COLLATION)
                self.state = 3419 
                self.any_name()
                self.state = 3420
                self.match(self.FROM)
                self.state = 3421 
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_list(self):
            return self.getTypedRuleContext(SqlParser.Def_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_definition

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefinition(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefinition(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefinition(self)
            else:
                return visitor.visitChildren(self)




    def definition(self):

        localctx = SqlParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3425
            self.match(self.T__6)
            self.state = 3426 
            self.def_list(0)
            self.state = 3427
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Def_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Def_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_elem(self):
            return self.getTypedRuleContext(SqlParser.Def_elemContext,0)


        def def_list(self):
            return self.getTypedRuleContext(SqlParser.Def_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_def_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDef_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDef_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDef_list(self)
            else:
                return visitor.visitChildren(self)



    def def_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Def_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_def_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430 
            self.def_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Def_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_def_list)
                    self.state = 3432
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3433
                    self.match(self.T__11)
                    self.state = 3434 
                    self.def_elem() 
                self.state = 3439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Def_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Def_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def def_arg(self):
            return self.getTypedRuleContext(SqlParser.Def_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_def_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDef_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDef_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDef_elem(self)
            else:
                return visitor.visitChildren(self)




    def def_elem(self):

        localctx = SqlParser.Def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_def_elem)
        try:
            self.state = 3445
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3440 
                self.colLabel()
                self.state = 3441
                self.match(self.T__3)
                self.state = 3442 
                self.def_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3444 
                self.colLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Def_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Def_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qual_all_Op(self):
            return self.getTypedRuleContext(SqlParser.Qual_all_OpContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def func_type(self):
            return self.getTypedRuleContext(SqlParser.Func_typeContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(SqlParser.Reserved_keywordContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_def_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDef_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDef_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDef_arg(self)
            else:
                return visitor.visitChildren(self)




    def def_arg(self):

        localctx = SqlParser.Def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_def_arg)
        try:
            self.state = 3452
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3447 
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3448 
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3449 
                self.qual_all_Op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3450 
                self.numericOnly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3451 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggr_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Aggr_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_aggr_args

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAggr_args(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAggr_args(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAggr_args(self)
            else:
                return visitor.visitChildren(self)




    def aggr_args(self):

        localctx = SqlParser.Aggr_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_aggr_args)
        try:
            self.state = 3461
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3454
                self.match(self.T__6)
                self.state = 3455 
                self.type_list(0)
                self.state = 3456
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3458
                self.match(self.T__6)
                self.state = 3459
                self.match(self.T__7)
                self.state = 3460
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_aggr_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Old_aggr_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_list(self):
            return self.getTypedRuleContext(SqlParser.Old_aggr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_old_aggr_definition

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOld_aggr_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOld_aggr_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOld_aggr_definition(self)
            else:
                return visitor.visitChildren(self)




    def old_aggr_definition(self):

        localctx = SqlParser.Old_aggr_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_old_aggr_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3463
            self.match(self.T__6)
            self.state = 3464 
            self.old_aggr_list(0)
            self.state = 3465
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_aggr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Old_aggr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_list(self):
            return self.getTypedRuleContext(SqlParser.Old_aggr_listContext,0)


        def old_aggr_elem(self):
            return self.getTypedRuleContext(SqlParser.Old_aggr_elemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_old_aggr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOld_aggr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOld_aggr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOld_aggr_list(self)
            else:
                return visitor.visitChildren(self)



    def old_aggr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Old_aggr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 384
        self.enterRecursionRule(localctx, 384, self.RULE_old_aggr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3468 
            self.old_aggr_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Old_aggr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_old_aggr_list)
                    self.state = 3470
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3471
                    self.match(self.T__11)
                    self.state = 3472 
                    self.old_aggr_elem() 
                self.state = 3477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Old_aggr_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Old_aggr_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def def_arg(self):
            return self.getTypedRuleContext(SqlParser.Def_argContext,0)


        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_old_aggr_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOld_aggr_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOld_aggr_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOld_aggr_elem(self)
            else:
                return visitor.visitChildren(self)




    def old_aggr_elem(self):

        localctx = SqlParser.Old_aggr_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_old_aggr_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3478
            self.match(self.IDENT)
            self.state = 3479
            self.match(self.T__3)
            self.state = 3480 
            self.def_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_enum_val_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_enum_val_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(SqlParser.Enum_val_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_enum_val_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_enum_val_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_enum_val_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_enum_val_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_enum_val_list(self):

        localctx = SqlParser.Opt_enum_val_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_opt_enum_val_list)
        try:
            self.state = 3484
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3482 
                self.enum_val_list(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_val_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Enum_val_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(SqlParser.Enum_val_listContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_enum_val_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterEnum_val_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitEnum_val_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitEnum_val_list(self)
            else:
                return visitor.visitChildren(self)



    def enum_val_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Enum_val_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 390
        self.enterRecursionRule(localctx, 390, self.RULE_enum_val_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3487 
            self.sConst()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Enum_val_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enum_val_list)
                    self.state = 3489
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3490
                    self.match(self.T__11)
                    self.state = 3491 
                    self.sConst() 
                self.state = 3496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterEnumStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterEnumStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def BEFORE(self):
            return self.getToken(SqlParser.BEFORE, 0)

        def VALUE_P(self):
            return self.getToken(SqlParser.VALUE_P, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def AFTER(self):
            return self.getToken(SqlParser.AFTER, 0)

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(SqlParser.SConstContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_alterEnumStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterEnumStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterEnumStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterEnumStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterEnumStmt(self):

        localctx = SqlParser.AlterEnumStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_alterEnumStmt)
        try:
            self.state = 3522
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3497
                self.match(self.ALTER)
                self.state = 3498
                self.match(self.TYPE_P)
                self.state = 3499 
                self.any_name()
                self.state = 3500
                self.match(self.ADD_P)
                self.state = 3501
                self.match(self.VALUE_P)
                self.state = 3502 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3504
                self.match(self.ALTER)
                self.state = 3505
                self.match(self.TYPE_P)
                self.state = 3506 
                self.any_name()
                self.state = 3507
                self.match(self.ADD_P)
                self.state = 3508
                self.match(self.VALUE_P)
                self.state = 3509 
                self.sConst()
                self.state = 3510
                self.match(self.BEFORE)
                self.state = 3511 
                self.sConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3513
                self.match(self.ALTER)
                self.state = 3514
                self.match(self.TYPE_P)
                self.state = 3515 
                self.any_name()
                self.state = 3516
                self.match(self.ADD_P)
                self.state = 3517
                self.match(self.VALUE_P)
                self.state = 3518 
                self.sConst()
                self.state = 3519
                self.match(self.AFTER)
                self.state = 3520 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOpClassStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateOpClassStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def opt_default(self):
            return self.getTypedRuleContext(SqlParser.Opt_defaultContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(SqlParser.Opclass_item_listContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def opt_opfamily(self):
            return self.getTypedRuleContext(SqlParser.Opt_opfamilyContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createOpClassStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateOpClassStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateOpClassStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateOpClassStmt(self)
            else:
                return visitor.visitChildren(self)




    def createOpClassStmt(self):

        localctx = SqlParser.CreateOpClassStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_createOpClassStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            self.match(self.CREATE)
            self.state = 3525
            self.match(self.OPERATOR)
            self.state = 3526
            self.match(self.CLASS)
            self.state = 3527 
            self.any_name()
            self.state = 3528 
            self.opt_default()
            self.state = 3529
            self.match(self.FOR)
            self.state = 3530
            self.match(self.TYPE_P)
            self.state = 3531 
            self.typename()
            self.state = 3532
            self.match(self.USING)
            self.state = 3533 
            self.access_method()
            self.state = 3534 
            self.opt_opfamily()
            self.state = 3535
            self.match(self.AS)
            self.state = 3536 
            self.opclass_item_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_item_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opclass_item_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_item_list(self):
            return self.getTypedRuleContext(SqlParser.Opclass_item_listContext,0)


        def opclass_item(self):
            return self.getTypedRuleContext(SqlParser.Opclass_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opclass_item_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpclass_item_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpclass_item_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpclass_item_list(self)
            else:
                return visitor.visitChildren(self)



    def opclass_item_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Opclass_item_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 396
        self.enterRecursionRule(localctx, 396, self.RULE_opclass_item_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3539 
            self.opclass_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Opclass_item_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opclass_item_list)
                    self.state = 3541
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3542
                    self.match(self.T__11)
                    self.state = 3543 
                    self.opclass_item() 
                self.state = 3548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opclass_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opclass_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def STORAGE(self):
            return self.getToken(SqlParser.STORAGE, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def func_args(self):
            return self.getTypedRuleContext(SqlParser.Func_argsContext,0)


        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def opt_recheck(self):
            return self.getTypedRuleContext(SqlParser.Opt_recheckContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def opclass_purpose(self):
            return self.getTypedRuleContext(SqlParser.Opclass_purposeContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opclass_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpclass_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpclass_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpclass_item(self)
            else:
                return visitor.visitChildren(self)




    def opclass_item(self):

        localctx = SqlParser.Opclass_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_opclass_item)
        try:
            self.state = 3577
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3549
                self.match(self.OPERATOR)
                self.state = 3550 
                self.iConst()
                self.state = 3551 
                self.any_operator()
                self.state = 3552 
                self.opclass_purpose()
                self.state = 3553 
                self.opt_recheck()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3555
                self.match(self.OPERATOR)
                self.state = 3556 
                self.iConst()
                self.state = 3557 
                self.any_operator()
                self.state = 3558 
                self.oper_argtypes()
                self.state = 3559 
                self.opclass_purpose()
                self.state = 3560 
                self.opt_recheck()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3562
                self.match(self.FUNCTION)
                self.state = 3563 
                self.iConst()
                self.state = 3564 
                self.func_name()
                self.state = 3565 
                self.func_args()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3567
                self.match(self.FUNCTION)
                self.state = 3568 
                self.iConst()
                self.state = 3569
                self.match(self.T__6)
                self.state = 3570 
                self.type_list(0)
                self.state = 3571
                self.match(self.T__13)
                self.state = 3572 
                self.func_name()
                self.state = 3573 
                self.func_args()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3575
                self.match(self.STORAGE)
                self.state = 3576 
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_default

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_default(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_default(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_default(self)
            else:
                return visitor.visitChildren(self)




    def opt_default(self):

        localctx = SqlParser.Opt_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_opt_default)
        try:
            self.state = 3581
            token = self._input.LA(1)
            if token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3579
                self.match(self.DEFAULT)

            elif token in [self.CONVERSION_P, self.FOR]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_opfamilyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_opfamilyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_opfamily

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_opfamily(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_opfamily(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_opfamily(self)
            else:
                return visitor.visitChildren(self)




    def opt_opfamily(self):

        localctx = SqlParser.Opt_opfamilyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_opt_opfamily)
        try:
            self.state = 3586
            token = self._input.LA(1)
            if token in [self.FAMILY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3583
                self.match(self.FAMILY)
                self.state = 3584 
                self.any_name()

            elif token in [self.AS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_purposeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opclass_purposeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ORDER(self):
            return self.getToken(SqlParser.ORDER, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opclass_purpose

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpclass_purpose(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpclass_purpose(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpclass_purpose(self)
            else:
                return visitor.visitChildren(self)




    def opclass_purpose(self):

        localctx = SqlParser.Opclass_purposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_opclass_purpose)
        try:
            self.state = 3595
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3588
                self.match(self.FOR)
                self.state = 3589
                self.match(self.SEARCH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3590
                self.match(self.FOR)
                self.state = 3591
                self.match(self.ORDER)
                self.state = 3592
                self.match(self.BY)
                self.state = 3593 
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_recheckContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_recheckContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECHECK(self):
            return self.getToken(SqlParser.RECHECK, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_recheck

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_recheck(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_recheck(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_recheck(self)
            else:
                return visitor.visitChildren(self)




    def opt_recheck(self):

        localctx = SqlParser.Opt_recheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_opt_recheck)
        try:
            self.state = 3599
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3597
                self.match(self.RECHECK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def createOpFamilyStmt(self):

        localctx = SqlParser.CreateOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_createOpFamilyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601
            self.match(self.CREATE)
            self.state = 3602
            self.match(self.OPERATOR)
            self.state = 3603
            self.match(self.FAMILY)
            self.state = 3604 
            self.any_name()
            self.state = 3605
            self.match(self.USING)
            self.state = 3606 
            self.access_method()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_item_list(self):
            return self.getTypedRuleContext(SqlParser.Opclass_item_listContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def opclass_drop_list(self):
            return self.getTypedRuleContext(SqlParser.Opclass_drop_listContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterOpFamilyStmt(self):

        localctx = SqlParser.AlterOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_alterOpFamilyStmt)
        try:
            self.state = 3626
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3608
                self.match(self.ALTER)
                self.state = 3609
                self.match(self.OPERATOR)
                self.state = 3610
                self.match(self.FAMILY)
                self.state = 3611 
                self.any_name()
                self.state = 3612
                self.match(self.USING)
                self.state = 3613 
                self.access_method()
                self.state = 3614
                self.match(self.ADD_P)
                self.state = 3615 
                self.opclass_item_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3617
                self.match(self.ALTER)
                self.state = 3618
                self.match(self.OPERATOR)
                self.state = 3619
                self.match(self.FAMILY)
                self.state = 3620 
                self.any_name()
                self.state = 3621
                self.match(self.USING)
                self.state = 3622 
                self.access_method()
                self.state = 3623
                self.match(self.DROP)
                self.state = 3624 
                self.opclass_drop_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opclass_drop_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opclass_drop_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opclass_drop(self):
            return self.getTypedRuleContext(SqlParser.Opclass_dropContext,0)


        def opclass_drop_list(self):
            return self.getTypedRuleContext(SqlParser.Opclass_drop_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opclass_drop_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpclass_drop_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpclass_drop_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpclass_drop_list(self)
            else:
                return visitor.visitChildren(self)



    def opclass_drop_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Opclass_drop_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 412
        self.enterRecursionRule(localctx, 412, self.RULE_opclass_drop_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3629 
            self.opclass_drop()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Opclass_drop_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opclass_drop_list)
                    self.state = 3631
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3632
                    self.match(self.T__11)
                    self.state = 3633 
                    self.opclass_drop() 
                self.state = 3638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opclass_dropContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opclass_dropContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opclass_drop

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpclass_drop(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpclass_drop(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpclass_drop(self)
            else:
                return visitor.visitChildren(self)




    def opclass_drop(self):

        localctx = SqlParser.Opclass_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_opclass_drop)
        try:
            self.state = 3651
            token = self._input.LA(1)
            if token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3639
                self.match(self.OPERATOR)
                self.state = 3640 
                self.iConst()
                self.state = 3641
                self.match(self.T__6)
                self.state = 3642 
                self.type_list(0)
                self.state = 3643
                self.match(self.T__13)

            elif token in [self.FUNCTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3645
                self.match(self.FUNCTION)
                self.state = 3646 
                self.iConst()
                self.state = 3647
                self.match(self.T__6)
                self.state = 3648 
                self.type_list(0)
                self.state = 3649
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOpClassStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropOpClassStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropOpClassStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropOpClassStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropOpClassStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropOpClassStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOpClassStmt(self):

        localctx = SqlParser.DropOpClassStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_dropOpClassStmt)
        try:
            self.state = 3671
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3653
                self.match(self.DROP)
                self.state = 3654
                self.match(self.OPERATOR)
                self.state = 3655
                self.match(self.CLASS)
                self.state = 3656 
                self.any_name()
                self.state = 3657
                self.match(self.USING)
                self.state = 3658 
                self.access_method()
                self.state = 3659 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3661
                self.match(self.DROP)
                self.state = 3662
                self.match(self.OPERATOR)
                self.state = 3663
                self.match(self.CLASS)
                self.state = 3664
                self.match(self.IF_P)
                self.state = 3665
                self.match(self.EXISTS)
                self.state = 3666 
                self.any_name()
                self.state = 3667
                self.match(self.USING)
                self.state = 3668 
                self.access_method()
                self.state = 3669 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOpFamilyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropOpFamilyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropOpFamilyStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropOpFamilyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropOpFamilyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropOpFamilyStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOpFamilyStmt(self):

        localctx = SqlParser.DropOpFamilyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_dropOpFamilyStmt)
        try:
            self.state = 3691
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3673
                self.match(self.DROP)
                self.state = 3674
                self.match(self.OPERATOR)
                self.state = 3675
                self.match(self.FAMILY)
                self.state = 3676 
                self.any_name()
                self.state = 3677
                self.match(self.USING)
                self.state = 3678 
                self.access_method()
                self.state = 3679 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3681
                self.match(self.DROP)
                self.state = 3682
                self.match(self.OPERATOR)
                self.state = 3683
                self.match(self.FAMILY)
                self.state = 3684
                self.match(self.IF_P)
                self.state = 3685
                self.match(self.EXISTS)
                self.state = 3686 
                self.any_name()
                self.state = 3687
                self.match(self.USING)
                self.state = 3688 
                self.access_method()
                self.state = 3689 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropOwnedStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropOwnedStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def OWNED(self):
            return self.getToken(SqlParser.OWNED, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropOwnedStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropOwnedStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropOwnedStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropOwnedStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropOwnedStmt(self):

        localctx = SqlParser.DropOwnedStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_dropOwnedStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3693
            self.match(self.DROP)
            self.state = 3694
            self.match(self.OWNED)
            self.state = 3695
            self.match(self.BY)
            self.state = 3696 
            self.name_list(0)
            self.state = 3697 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReassignOwnedStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ReassignOwnedStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def OWNED(self):
            return self.getToken(SqlParser.OWNED, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def REASSIGN(self):
            return self.getToken(SqlParser.REASSIGN, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reassignOwnedStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReassignOwnedStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReassignOwnedStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReassignOwnedStmt(self)
            else:
                return visitor.visitChildren(self)




    def reassignOwnedStmt(self):

        localctx = SqlParser.ReassignOwnedStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_reassignOwnedStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.match(self.REASSIGN)
            self.state = 3700
            self.match(self.OWNED)
            self.state = 3701
            self.match(self.BY)
            self.state = 3702 
            self.name_list(0)
            self.state = 3703
            self.match(self.TO)
            self.state = 3704 
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(SqlParser.CONCURRENTLY, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def drop_type(self):
            return self.getTypedRuleContext(SqlParser.Drop_typeContext,0)


        def any_name_list(self):
            return self.getTypedRuleContext(SqlParser.Any_name_listContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropStmt(self):

        localctx = SqlParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_dropStmt)
        try:
            self.state = 3732
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3706
                self.match(self.DROP)
                self.state = 3707 
                self.drop_type()
                self.state = 3708
                self.match(self.IF_P)
                self.state = 3709
                self.match(self.EXISTS)
                self.state = 3710 
                self.any_name_list(0)
                self.state = 3711 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3713
                self.match(self.DROP)
                self.state = 3714 
                self.drop_type()
                self.state = 3715 
                self.any_name_list(0)
                self.state = 3716 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3718
                self.match(self.DROP)
                self.state = 3719
                self.match(self.INDEX)
                self.state = 3720
                self.match(self.CONCURRENTLY)
                self.state = 3721 
                self.any_name_list(0)
                self.state = 3722 
                self.opt_drop_behavior()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3724
                self.match(self.DROP)
                self.state = 3725
                self.match(self.INDEX)
                self.state = 3726
                self.match(self.CONCURRENTLY)
                self.state = 3727
                self.match(self.IF_P)
                self.state = 3728
                self.match(self.EXISTS)
                self.state = 3729 
                self.any_name_list(0)
                self.state = 3730 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Drop_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_drop_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDrop_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDrop_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = SqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_drop_type)
        try:
            self.state = 3758
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3734
                self.match(self.TABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3735
                self.match(self.SEQUENCE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3736
                self.match(self.VIEW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3737
                self.match(self.INDEX)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3738
                self.match(self.FOREIGN)
                self.state = 3739
                self.match(self.TABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3740
                self.match(self.TYPE_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3741
                self.match(self.DOMAIN_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3742
                self.match(self.COLLATION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3743
                self.match(self.CONVERSION_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3744
                self.match(self.SCHEMA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3745
                self.match(self.EXTENSION)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3746
                self.match(self.TEXT_P)
                self.state = 3747
                self.match(self.SEARCH)
                self.state = 3748
                self.match(self.PARSER)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3749
                self.match(self.TEXT_P)
                self.state = 3750
                self.match(self.SEARCH)
                self.state = 3751
                self.match(self.DICTIONARY)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3752
                self.match(self.TEXT_P)
                self.state = 3753
                self.match(self.SEARCH)
                self.state = 3754
                self.match(self.TEMPLATE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3755
                self.match(self.TEXT_P)
                self.state = 3756
                self.match(self.SEARCH)
                self.state = 3757
                self.match(self.CONFIGURATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Any_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def any_name_list(self):
            return self.getTypedRuleContext(SqlParser.Any_name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_any_name_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAny_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAny_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAny_name_list(self)
            else:
                return visitor.visitChildren(self)



    def any_name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Any_name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 428
        self.enterRecursionRule(localctx, 428, self.RULE_any_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761 
            self.any_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Any_name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_any_name_list)
                    self.state = 3763
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3764
                    self.match(self.T__11)
                    self.state = 3765 
                    self.any_name() 
                self.state = 3770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def attrs(self):
            return self.getTypedRuleContext(SqlParser.AttrsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_any_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAny_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = SqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_any_name)
        try:
            self.state = 3775
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3771 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3772 
                self.colId()
                self.state = 3773 
                self.attrs(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AttrsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attrs(self):
            return self.getTypedRuleContext(SqlParser.AttrsContext,0)


        def attr_name(self):
            return self.getTypedRuleContext(SqlParser.Attr_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_attrs

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAttrs(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAttrs(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAttrs(self)
            else:
                return visitor.visitChildren(self)



    def attrs(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.AttrsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 432
        self.enterRecursionRule(localctx, 432, self.RULE_attrs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            self.match(self.T__12)
            self.state = 3779 
            self.attr_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.AttrsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attrs)
                    self.state = 3781
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3782
                    self.match(self.T__12)
                    self.state = 3783 
                    self.attr_name() 
                self.state = 3788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TruncateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TruncateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_restart_seqs(self):
            return self.getTypedRuleContext(SqlParser.Opt_restart_seqsContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Relation_expr_listContext,0)


        def opt_table(self):
            return self.getTypedRuleContext(SqlParser.Opt_tableContext,0)


        def TRUNCATE(self):
            return self.getToken(SqlParser.TRUNCATE, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_truncateStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTruncateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTruncateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTruncateStmt(self)
            else:
                return visitor.visitChildren(self)




    def truncateStmt(self):

        localctx = SqlParser.TruncateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_truncateStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3789
            self.match(self.TRUNCATE)
            self.state = 3790 
            self.opt_table()
            self.state = 3791 
            self.relation_expr_list(0)
            self.state = 3792 
            self.opt_restart_seqs()
            self.state = 3793 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_restart_seqsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_restart_seqsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTITY_P(self):
            return self.getToken(SqlParser.IDENTITY_P, 0)

        def RESTART(self):
            return self.getToken(SqlParser.RESTART, 0)

        def CONTINUE_P(self):
            return self.getToken(SqlParser.CONTINUE_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_restart_seqs

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_restart_seqs(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_restart_seqs(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_restart_seqs(self)
            else:
                return visitor.visitChildren(self)




    def opt_restart_seqs(self):

        localctx = SqlParser.Opt_restart_seqsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_opt_restart_seqs)
        try:
            self.state = 3800
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3795
                self.match(self.CONTINUE_P)
                self.state = 3796
                self.match(self.IDENTITY_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3797
                self.match(self.RESTART)
                self.state = 3798
                self.match(self.IDENTITY_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CommentStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def IS(self):
            return self.getToken(SqlParser.IS, 0)

        def OBJECT_P(self):
            return self.getToken(SqlParser.OBJECT_P, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def comment_text(self):
            return self.getTypedRuleContext(SqlParser.Comment_textContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def comment_type(self):
            return self.getTypedRuleContext(SqlParser.Comment_typeContext,0)


        def LARGE_P(self):
            return self.getToken(SqlParser.LARGE_P, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def COMMENT(self):
            return self.getToken(SqlParser.COMMENT, 0)

        def func_args(self):
            return self.getTypedRuleContext(SqlParser.Func_argsContext,0)


        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def ON(self, i=None):
            if i is None:
                return self.getTokens(SqlParser.ON)
            else:
                return self.getToken(SqlParser.ON, i)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def RULE(self):
            return self.getToken(SqlParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(SqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_commentStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCommentStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCommentStmt(self)
            else:
                return visitor.visitChildren(self)




    def commentStmt(self):

        localctx = SqlParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_commentStmt)
        try:
            self.state = 3950
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3802
                self.match(self.COMMENT)
                self.state = 3803
                self.match(self.ON)
                self.state = 3804 
                self.comment_type()
                self.state = 3805 
                self.any_name()
                self.state = 3806
                self.match(self.IS)
                self.state = 3807 
                self.comment_text()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3809
                self.match(self.COMMENT)
                self.state = 3810
                self.match(self.ON)
                self.state = 3811
                self.match(self.AGGREGATE)
                self.state = 3812 
                self.func_name()
                self.state = 3813 
                self.aggr_args()
                self.state = 3814
                self.match(self.IS)
                self.state = 3815 
                self.comment_text()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3817
                self.match(self.COMMENT)
                self.state = 3818
                self.match(self.ON)
                self.state = 3819
                self.match(self.FUNCTION)
                self.state = 3820 
                self.func_name()
                self.state = 3821 
                self.func_args()
                self.state = 3822
                self.match(self.IS)
                self.state = 3823 
                self.comment_text()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3825
                self.match(self.COMMENT)
                self.state = 3826
                self.match(self.ON)
                self.state = 3827
                self.match(self.OPERATOR)
                self.state = 3828 
                self.any_operator()
                self.state = 3829 
                self.oper_argtypes()
                self.state = 3830
                self.match(self.IS)
                self.state = 3831 
                self.comment_text()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3833
                self.match(self.COMMENT)
                self.state = 3834
                self.match(self.ON)
                self.state = 3835
                self.match(self.CONSTRAINT)
                self.state = 3836 
                self.name()
                self.state = 3837
                self.match(self.ON)
                self.state = 3838 
                self.any_name()
                self.state = 3839
                self.match(self.IS)
                self.state = 3840 
                self.comment_text()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3842
                self.match(self.COMMENT)
                self.state = 3843
                self.match(self.ON)
                self.state = 3844
                self.match(self.RULE)
                self.state = 3845 
                self.name()
                self.state = 3846
                self.match(self.ON)
                self.state = 3847 
                self.any_name()
                self.state = 3848
                self.match(self.IS)
                self.state = 3849 
                self.comment_text()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3851
                self.match(self.COMMENT)
                self.state = 3852
                self.match(self.ON)
                self.state = 3853
                self.match(self.RULE)
                self.state = 3854 
                self.name()
                self.state = 3855
                self.match(self.IS)
                self.state = 3856 
                self.comment_text()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3858
                self.match(self.COMMENT)
                self.state = 3859
                self.match(self.ON)
                self.state = 3860
                self.match(self.TRIGGER)
                self.state = 3861 
                self.name()
                self.state = 3862
                self.match(self.ON)
                self.state = 3863 
                self.any_name()
                self.state = 3864
                self.match(self.IS)
                self.state = 3865 
                self.comment_text()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3867
                self.match(self.COMMENT)
                self.state = 3868
                self.match(self.ON)
                self.state = 3869
                self.match(self.OPERATOR)
                self.state = 3870
                self.match(self.CLASS)
                self.state = 3871 
                self.any_name()
                self.state = 3872
                self.match(self.USING)
                self.state = 3873 
                self.access_method()
                self.state = 3874
                self.match(self.IS)
                self.state = 3875 
                self.comment_text()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3877
                self.match(self.COMMENT)
                self.state = 3878
                self.match(self.ON)
                self.state = 3879
                self.match(self.OPERATOR)
                self.state = 3880
                self.match(self.FAMILY)
                self.state = 3881 
                self.any_name()
                self.state = 3882
                self.match(self.USING)
                self.state = 3883 
                self.access_method()
                self.state = 3884
                self.match(self.IS)
                self.state = 3885 
                self.comment_text()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3887
                self.match(self.COMMENT)
                self.state = 3888
                self.match(self.ON)
                self.state = 3889
                self.match(self.LARGE_P)
                self.state = 3890
                self.match(self.OBJECT_P)
                self.state = 3891 
                self.numericOnly()
                self.state = 3892
                self.match(self.IS)
                self.state = 3893 
                self.comment_text()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3895
                self.match(self.COMMENT)
                self.state = 3896
                self.match(self.ON)
                self.state = 3897
                self.match(self.CAST)
                self.state = 3898
                self.match(self.T__6)
                self.state = 3899 
                self.typename()
                self.state = 3900
                self.match(self.AS)
                self.state = 3901 
                self.typename()
                self.state = 3902
                self.match(self.T__13)
                self.state = 3903
                self.match(self.IS)
                self.state = 3904 
                self.comment_text()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3906
                self.match(self.COMMENT)
                self.state = 3907
                self.match(self.ON)
                self.state = 3908 
                self.opt_procedural()
                self.state = 3909
                self.match(self.LANGUAGE)
                self.state = 3910 
                self.any_name()
                self.state = 3911
                self.match(self.IS)
                self.state = 3912 
                self.comment_text()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3914
                self.match(self.COMMENT)
                self.state = 3915
                self.match(self.ON)
                self.state = 3916
                self.match(self.TEXT_P)
                self.state = 3917
                self.match(self.SEARCH)
                self.state = 3918
                self.match(self.PARSER)
                self.state = 3919 
                self.any_name()
                self.state = 3920
                self.match(self.IS)
                self.state = 3921 
                self.comment_text()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3923
                self.match(self.COMMENT)
                self.state = 3924
                self.match(self.ON)
                self.state = 3925
                self.match(self.TEXT_P)
                self.state = 3926
                self.match(self.SEARCH)
                self.state = 3927
                self.match(self.DICTIONARY)
                self.state = 3928 
                self.any_name()
                self.state = 3929
                self.match(self.IS)
                self.state = 3930 
                self.comment_text()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3932
                self.match(self.COMMENT)
                self.state = 3933
                self.match(self.ON)
                self.state = 3934
                self.match(self.TEXT_P)
                self.state = 3935
                self.match(self.SEARCH)
                self.state = 3936
                self.match(self.TEMPLATE)
                self.state = 3937 
                self.any_name()
                self.state = 3938
                self.match(self.IS)
                self.state = 3939 
                self.comment_text()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3941
                self.match(self.COMMENT)
                self.state = 3942
                self.match(self.ON)
                self.state = 3943
                self.match(self.TEXT_P)
                self.state = 3944
                self.match(self.SEARCH)
                self.state = 3945
                self.match(self.CONFIGURATION)
                self.state = 3946 
                self.any_name()
                self.state = 3947
                self.match(self.IS)
                self.state = 3948 
                self.comment_text()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Comment_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def COLUMN(self):
            return self.getToken(SqlParser.COLUMN, 0)

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_comment_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterComment_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitComment_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitComment_type(self)
            else:
                return visitor.visitChildren(self)




    def comment_type(self):

        localctx = SqlParser.Comment_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_comment_type)
        try:
            self.state = 3972
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3952
                self.match(self.COLUMN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3953
                self.match(self.DATABASE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3954
                self.match(self.SCHEMA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3955
                self.match(self.INDEX)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3956
                self.match(self.SEQUENCE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3957
                self.match(self.TABLE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3958
                self.match(self.DOMAIN_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3959
                self.match(self.TYPE_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3960
                self.match(self.VIEW)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3961
                self.match(self.COLLATION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3962
                self.match(self.CONVERSION_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3963
                self.match(self.TABLESPACE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3964
                self.match(self.EXTENSION)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3965
                self.match(self.ROLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3966
                self.match(self.FOREIGN)
                self.state = 3967
                self.match(self.TABLE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3968
                self.match(self.SERVER)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3969
                self.match(self.FOREIGN)
                self.state = 3970
                self.match(self.DATA_P)
                self.state = 3971
                self.match(self.WRAPPER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Comment_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_comment_text

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterComment_text(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitComment_text(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitComment_text(self)
            else:
                return visitor.visitChildren(self)




    def comment_text(self):

        localctx = SqlParser.Comment_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_comment_text)
        try:
            self.state = 3976
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3974 
                self.sConst()

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3975
                self.match(self.NULL_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecLabelStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SecLabelStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def security_label_type(self):
            return self.getTypedRuleContext(SqlParser.Security_label_typeContext,0)


        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def LABEL(self):
            return self.getToken(SqlParser.LABEL, 0)

        def OBJECT_P(self):
            return self.getToken(SqlParser.OBJECT_P, 0)

        def IS(self):
            return self.getToken(SqlParser.IS, 0)

        def opt_provider(self):
            return self.getTypedRuleContext(SqlParser.Opt_providerContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def SECURITY(self):
            return self.getToken(SqlParser.SECURITY, 0)

        def security_label(self):
            return self.getTypedRuleContext(SqlParser.Security_labelContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def LARGE_P(self):
            return self.getToken(SqlParser.LARGE_P, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def func_args(self):
            return self.getTypedRuleContext(SqlParser.Func_argsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_secLabelStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSecLabelStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSecLabelStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSecLabelStmt(self)
            else:
                return visitor.visitChildren(self)




    def secLabelStmt(self):

        localctx = SqlParser.SecLabelStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_secLabelStmt)
        try:
            self.state = 4027
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3978
                self.match(self.SECURITY)
                self.state = 3979
                self.match(self.LABEL)
                self.state = 3980 
                self.opt_provider()
                self.state = 3981
                self.match(self.ON)
                self.state = 3982 
                self.security_label_type()
                self.state = 3983 
                self.any_name()
                self.state = 3984
                self.match(self.IS)
                self.state = 3985 
                self.security_label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3987
                self.match(self.SECURITY)
                self.state = 3988
                self.match(self.LABEL)
                self.state = 3989 
                self.opt_provider()
                self.state = 3990
                self.match(self.ON)
                self.state = 3991
                self.match(self.AGGREGATE)
                self.state = 3992 
                self.func_name()
                self.state = 3993 
                self.aggr_args()
                self.state = 3994
                self.match(self.IS)
                self.state = 3995 
                self.security_label()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3997
                self.match(self.SECURITY)
                self.state = 3998
                self.match(self.LABEL)
                self.state = 3999 
                self.opt_provider()
                self.state = 4000
                self.match(self.ON)
                self.state = 4001
                self.match(self.FUNCTION)
                self.state = 4002 
                self.func_name()
                self.state = 4003 
                self.func_args()
                self.state = 4004
                self.match(self.IS)
                self.state = 4005 
                self.security_label()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4007
                self.match(self.SECURITY)
                self.state = 4008
                self.match(self.LABEL)
                self.state = 4009 
                self.opt_provider()
                self.state = 4010
                self.match(self.ON)
                self.state = 4011
                self.match(self.LARGE_P)
                self.state = 4012
                self.match(self.OBJECT_P)
                self.state = 4013 
                self.numericOnly()
                self.state = 4014
                self.match(self.IS)
                self.state = 4015 
                self.security_label()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4017
                self.match(self.SECURITY)
                self.state = 4018
                self.match(self.LABEL)
                self.state = 4019 
                self.opt_provider()
                self.state = 4020
                self.match(self.ON)
                self.state = 4021 
                self.opt_procedural()
                self.state = 4022
                self.match(self.LANGUAGE)
                self.state = 4023 
                self.any_name()
                self.state = 4024
                self.match(self.IS)
                self.state = 4025 
                self.security_label()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_providerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_providerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_provider

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_provider(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_provider(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_provider(self)
            else:
                return visitor.visitChildren(self)




    def opt_provider(self):

        localctx = SqlParser.Opt_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_opt_provider)
        try:
            self.state = 4032
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4029
                self.match(self.FOR)
                self.state = 4030 
                self.colId_or_Sconst()

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_label_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Security_label_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def COLUMN(self):
            return self.getToken(SqlParser.COLUMN, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_security_label_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSecurity_label_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSecurity_label_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSecurity_label_type(self)
            else:
                return visitor.visitChildren(self)




    def security_label_type(self):

        localctx = SqlParser.Security_label_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_security_label_type)
        try:
            self.state = 4046
            token = self._input.LA(1)
            if token in [self.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4034
                self.match(self.COLUMN)

            elif token in [self.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4035
                self.match(self.DATABASE)

            elif token in [self.FOREIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4036
                self.match(self.FOREIGN)
                self.state = 4037
                self.match(self.TABLE)

            elif token in [self.SCHEMA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4038
                self.match(self.SCHEMA)

            elif token in [self.SEQUENCE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4039
                self.match(self.SEQUENCE)

            elif token in [self.TABLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4040
                self.match(self.TABLE)

            elif token in [self.DOMAIN_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4041
                self.match(self.DOMAIN_P)

            elif token in [self.ROLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4042
                self.match(self.ROLE)

            elif token in [self.TABLESPACE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4043
                self.match(self.TABLESPACE)

            elif token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4044
                self.match(self.TYPE_P)

            elif token in [self.VIEW]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4045
                self.match(self.VIEW)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_labelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Security_labelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_security_label

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSecurity_label(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSecurity_label(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSecurity_label(self)
            else:
                return visitor.visitChildren(self)




    def security_label(self):

        localctx = SqlParser.Security_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_security_label)
        try:
            self.state = 4050
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4048 
                self.sConst()

            elif token in [self.NULL_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4049
                self.match(self.NULL_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FetchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.FetchStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(SqlParser.MOVE, 0)

        def FETCH(self):
            return self.getToken(SqlParser.FETCH, 0)

        def fetch_args(self):
            return self.getTypedRuleContext(SqlParser.Fetch_argsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_fetchStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFetchStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFetchStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFetchStmt(self)
            else:
                return visitor.visitChildren(self)




    def fetchStmt(self):

        localctx = SqlParser.FetchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_fetchStmt)
        try:
            self.state = 4056
            token = self._input.LA(1)
            if token in [self.FETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4052
                self.match(self.FETCH)
                self.state = 4053 
                self.fetch_args()

            elif token in [self.MOVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4054
                self.match(self.MOVE)
                self.state = 4055 
                self.fetch_args()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Fetch_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(SqlParser.NEXT, 0)

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(SqlParser.FORWARD, 0)

        def PRIOR(self):
            return self.getToken(SqlParser.PRIOR, 0)

        def opt_from_in(self):
            return self.getTypedRuleContext(SqlParser.Opt_from_inContext,0)


        def RELATIVE_P(self):
            return self.getToken(SqlParser.RELATIVE_P, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def FIRST_P(self):
            return self.getToken(SqlParser.FIRST_P, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(SqlParser.Cursor_nameContext,0)


        def BACKWARD(self):
            return self.getToken(SqlParser.BACKWARD, 0)

        def ABSOLUTE_P(self):
            return self.getToken(SqlParser.ABSOLUTE_P, 0)

        def from_in(self):
            return self.getTypedRuleContext(SqlParser.From_inContext,0)


        def LAST_P(self):
            return self.getToken(SqlParser.LAST_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_fetch_args

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFetch_args(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFetch_args(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFetch_args(self)
            else:
                return visitor.visitChildren(self)




    def fetch_args(self):

        localctx = SqlParser.Fetch_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_fetch_args)
        try:
            self.state = 4124
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4058 
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4059 
                self.from_in()
                self.state = 4060 
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4062
                self.match(self.NEXT)
                self.state = 4063 
                self.opt_from_in()
                self.state = 4064 
                self.cursor_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4066
                self.match(self.PRIOR)
                self.state = 4067 
                self.opt_from_in()
                self.state = 4068 
                self.cursor_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4070
                self.match(self.FIRST_P)
                self.state = 4071 
                self.opt_from_in()
                self.state = 4072 
                self.cursor_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4074
                self.match(self.LAST_P)
                self.state = 4075 
                self.opt_from_in()
                self.state = 4076 
                self.cursor_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4078
                self.match(self.ABSOLUTE_P)
                self.state = 4079 
                self.signedIconst()
                self.state = 4080 
                self.opt_from_in()
                self.state = 4081 
                self.cursor_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4083
                self.match(self.RELATIVE_P)
                self.state = 4084 
                self.signedIconst()
                self.state = 4085 
                self.opt_from_in()
                self.state = 4086 
                self.cursor_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4088 
                self.signedIconst()
                self.state = 4089 
                self.opt_from_in()
                self.state = 4090 
                self.cursor_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4092
                self.match(self.ALL)
                self.state = 4093 
                self.opt_from_in()
                self.state = 4094 
                self.cursor_name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4096
                self.match(self.FORWARD)
                self.state = 4097 
                self.opt_from_in()
                self.state = 4098 
                self.cursor_name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4100
                self.match(self.FORWARD)
                self.state = 4101 
                self.signedIconst()
                self.state = 4102 
                self.opt_from_in()
                self.state = 4103 
                self.cursor_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4105
                self.match(self.FORWARD)
                self.state = 4106
                self.match(self.ALL)
                self.state = 4107 
                self.opt_from_in()
                self.state = 4108 
                self.cursor_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4110
                self.match(self.BACKWARD)
                self.state = 4111 
                self.opt_from_in()
                self.state = 4112 
                self.cursor_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4114
                self.match(self.BACKWARD)
                self.state = 4115 
                self.signedIconst()
                self.state = 4116 
                self.opt_from_in()
                self.state = 4117 
                self.cursor_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4119
                self.match(self.BACKWARD)
                self.state = 4120
                self.match(self.ALL)
                self.state = 4121 
                self.opt_from_in()
                self.state = 4122 
                self.cursor_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_inContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.From_inContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_from_in

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFrom_in(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFrom_in(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFrom_in(self)
            else:
                return visitor.visitChildren(self)




    def from_in(self):

        localctx = SqlParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4126
            _la = self._input.LA(1)
            if not(_la==SqlParser.FROM or _la==SqlParser.IN_P):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_from_inContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_from_inContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_in(self):
            return self.getTypedRuleContext(SqlParser.From_inContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_from_in

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_from_in(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_from_in(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_from_in(self)
            else:
                return visitor.visitChildren(self)




    def opt_from_in(self):

        localctx = SqlParser.Opt_from_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_opt_from_in)
        try:
            self.state = 4130
            token = self._input.LA(1)
            if token in [self.FROM, self.IN_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4128 
                self.from_in()

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.GrantStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def opt_grant_grant_option(self):
            return self.getTypedRuleContext(SqlParser.Opt_grant_grant_optionContext,0)


        def privileges(self):
            return self.getTypedRuleContext(SqlParser.PrivilegesContext,0)


        def privilege_target(self):
            return self.getTypedRuleContext(SqlParser.Privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(SqlParser.Grantee_listContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_grantStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGrantStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGrantStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGrantStmt(self)
            else:
                return visitor.visitChildren(self)




    def grantStmt(self):

        localctx = SqlParser.GrantStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_grantStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4132
            self.match(self.GRANT)
            self.state = 4133 
            self.privileges()
            self.state = 4134
            self.match(self.ON)
            self.state = 4135 
            self.privilege_target()
            self.state = 4136
            self.match(self.TO)
            self.state = 4137 
            self.grantee_list(0)
            self.state = 4138 
            self.opt_grant_grant_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RevokeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def privileges(self):
            return self.getTypedRuleContext(SqlParser.PrivilegesContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(SqlParser.Privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(SqlParser.Grantee_listContext,0)


        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(SqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_revokeStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRevokeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRevokeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRevokeStmt(self)
            else:
                return visitor.visitChildren(self)




    def revokeStmt(self):

        localctx = SqlParser.RevokeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_revokeStmt)
        try:
            self.state = 4159
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4140
                self.match(self.REVOKE)
                self.state = 4141 
                self.privileges()
                self.state = 4142
                self.match(self.ON)
                self.state = 4143 
                self.privilege_target()
                self.state = 4144
                self.match(self.FROM)
                self.state = 4145 
                self.grantee_list(0)
                self.state = 4146 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4148
                self.match(self.REVOKE)
                self.state = 4149
                self.match(self.GRANT)
                self.state = 4150
                self.match(self.OPTION)
                self.state = 4151
                self.match(self.FOR)
                self.state = 4152 
                self.privileges()
                self.state = 4153
                self.match(self.ON)
                self.state = 4154 
                self.privilege_target()
                self.state = 4155
                self.match(self.FROM)
                self.state = 4156 
                self.grantee_list(0)
                self.state = 4157 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.PrivilegesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext,0)


        def PRIVILEGES(self):
            return self.getToken(SqlParser.PRIVILEGES, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(SqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_privileges

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrivileges(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrivileges(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def privileges(self):

        localctx = SqlParser.PrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_privileges)
        try:
            self.state = 4176
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4161 
                self.privilege_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4162
                self.match(self.ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4163
                self.match(self.ALL)
                self.state = 4164
                self.match(self.PRIVILEGES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4165
                self.match(self.ALL)
                self.state = 4166
                self.match(self.T__6)
                self.state = 4167 
                self.columnList(0)
                self.state = 4168
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4170
                self.match(self.ALL)
                self.state = 4171
                self.match(self.PRIVILEGES)
                self.state = 4172
                self.match(self.T__6)
                self.state = 4173 
                self.columnList(0)
                self.state = 4174
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Privilege_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Privilege_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(SqlParser.PrivilegeContext,0)


        def privilege_list(self):
            return self.getTypedRuleContext(SqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_privilege_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrivilege_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrivilege_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrivilege_list(self)
            else:
                return visitor.visitChildren(self)



    def privilege_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Privilege_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 466
        self.enterRecursionRule(localctx, 466, self.RULE_privilege_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4179 
            self.privilege()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Privilege_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_privilege_list)
                    self.state = 4181
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4182
                    self.match(self.T__11)
                    self.state = 4183 
                    self.privilege() 
                self.state = 4188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.PrivilegeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def SELECT(self):
            return self.getToken(SqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(SqlParser.REFERENCES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_privilege

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrivilege(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrivilege(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_privilege)
        try:
            self.state = 4198
            token = self._input.LA(1)
            if token in [self.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4189
                self.match(self.SELECT)
                self.state = 4190 
                self.opt_column_list()

            elif token in [self.REFERENCES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4191
                self.match(self.REFERENCES)
                self.state = 4192 
                self.opt_column_list()

            elif token in [self.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4193
                self.match(self.CREATE)
                self.state = 4194 
                self.opt_column_list()

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4195 
                self.colId()
                self.state = 4196 
                self.opt_column_list()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Privilege_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Privilege_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypes_listContext,0)


        def TABLES(self):
            return self.getToken(SqlParser.TABLES, 0)

        def OBJECT_P(self):
            return self.getToken(SqlParser.OBJECT_P, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlParser.FUNCTIONS, 0)

        def numericOnly_list(self):
            return self.getTypedRuleContext(SqlParser.NumericOnly_listContext,0)


        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def LARGE_P(self):
            return self.getToken(SqlParser.LARGE_P, 0)

        def any_name_list(self):
            return self.getTypedRuleContext(SqlParser.Any_name_listContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(SqlParser.Qualified_name_listContext,0)


        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def SEQUENCES(self):
            return self.getToken(SqlParser.SEQUENCES, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_privilege_target

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrivilege_target(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrivilege_target(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrivilege_target(self)
            else:
                return visitor.visitChildren(self)




    def privilege_target(self):

        localctx = SqlParser.Privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_privilege_target)
        try:
            self.state = 4244
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4200 
                self.qualified_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4201
                self.match(self.TABLE)
                self.state = 4202 
                self.qualified_name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4203
                self.match(self.SEQUENCE)
                self.state = 4204 
                self.qualified_name_list(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4205
                self.match(self.FOREIGN)
                self.state = 4206
                self.match(self.DATA_P)
                self.state = 4207
                self.match(self.WRAPPER)
                self.state = 4208 
                self.name_list(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4209
                self.match(self.FOREIGN)
                self.state = 4210
                self.match(self.SERVER)
                self.state = 4211 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4212
                self.match(self.FUNCTION)
                self.state = 4213 
                self.function_with_argtypes_list(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4214
                self.match(self.DATABASE)
                self.state = 4215 
                self.name_list(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4216
                self.match(self.DOMAIN_P)
                self.state = 4217 
                self.any_name_list(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4218
                self.match(self.LANGUAGE)
                self.state = 4219 
                self.name_list(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4220
                self.match(self.LARGE_P)
                self.state = 4221
                self.match(self.OBJECT_P)
                self.state = 4222 
                self.numericOnly_list(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4223
                self.match(self.SCHEMA)
                self.state = 4224 
                self.name_list(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4225
                self.match(self.TABLESPACE)
                self.state = 4226 
                self.name_list(0)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4227
                self.match(self.TYPE_P)
                self.state = 4228 
                self.any_name_list(0)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4229
                self.match(self.ALL)
                self.state = 4230
                self.match(self.TABLES)
                self.state = 4231
                self.match(self.IN_P)
                self.state = 4232
                self.match(self.SCHEMA)
                self.state = 4233 
                self.name_list(0)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4234
                self.match(self.ALL)
                self.state = 4235
                self.match(self.SEQUENCES)
                self.state = 4236
                self.match(self.IN_P)
                self.state = 4237
                self.match(self.SCHEMA)
                self.state = 4238 
                self.name_list(0)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4239
                self.match(self.ALL)
                self.state = 4240
                self.match(self.FUNCTIONS)
                self.state = 4241
                self.match(self.IN_P)
                self.state = 4242
                self.match(self.SCHEMA)
                self.state = 4243 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grantee_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Grantee_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def grantee_list(self):
            return self.getTypedRuleContext(SqlParser.Grantee_listContext,0)


        def grantee(self):
            return self.getTypedRuleContext(SqlParser.GranteeContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_grantee_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGrantee_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGrantee_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGrantee_list(self)
            else:
                return visitor.visitChildren(self)



    def grantee_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Grantee_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 472
        self.enterRecursionRule(localctx, 472, self.RULE_grantee_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4247 
            self.grantee()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Grantee_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_grantee_list)
                    self.state = 4249
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4250
                    self.match(self.T__11)
                    self.state = 4251 
                    self.grantee() 
                self.state = 4256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GranteeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.GranteeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_grantee

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGrantee(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGrantee(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGrantee(self)
            else:
                return visitor.visitChildren(self)




    def grantee(self):

        localctx = SqlParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_grantee)
        try:
            self.state = 4260
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4257 
                self.roleId()

            elif token in [self.GROUP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4258
                self.match(self.GROUP_P)
                self.state = 4259 
                self.roleId()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_grant_grant_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_grant_grant_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_grant_grant_option

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_grant_grant_option(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_grant_grant_option(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_grant_grant_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_grant_grant_option(self):

        localctx = SqlParser.Opt_grant_grant_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_opt_grant_grant_option)
        try:
            self.state = 4266
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4262
                self.match(self.WITH)
                self.state = 4263
                self.match(self.GRANT)
                self.state = 4264
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_with_argtypes_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Function_with_argtypes_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypes_listContext,0)


        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_function_with_argtypes_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunction_with_argtypes_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunction_with_argtypes_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunction_with_argtypes_list(self)
            else:
                return visitor.visitChildren(self)



    def function_with_argtypes_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Function_with_argtypes_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 478
        self.enterRecursionRule(localctx, 478, self.RULE_function_with_argtypes_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4269 
            self.function_with_argtypes()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Function_with_argtypes_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_function_with_argtypes_list)
                    self.state = 4271
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4272
                    self.match(self.T__11)
                    self.state = 4273 
                    self.function_with_argtypes() 
                self.state = 4278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Function_with_argtypesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Function_with_argtypesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def func_args(self):
            return self.getTypedRuleContext(SqlParser.Func_argsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_function_with_argtypes

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunction_with_argtypes(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunction_with_argtypes(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunction_with_argtypes(self)
            else:
                return visitor.visitChildren(self)




    def function_with_argtypes(self):

        localctx = SqlParser.Function_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_function_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4279 
            self.func_name()
            self.state = 4280 
            self.func_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.GrantRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_grant_admin_option(self):
            return self.getTypedRuleContext(SqlParser.Opt_grant_admin_optionContext,0)


        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def opt_granted_by(self):
            return self.getTypedRuleContext(SqlParser.Opt_granted_byContext,0)


        def privilege_list(self):
            return self.getTypedRuleContext(SqlParser.Privilege_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_grantRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGrantRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGrantRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGrantRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def grantRoleStmt(self):

        localctx = SqlParser.GrantRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_grantRoleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4282
            self.match(self.GRANT)
            self.state = 4283 
            self.privilege_list(0)
            self.state = 4284
            self.match(self.TO)
            self.state = 4285 
            self.name_list(0)
            self.state = 4286 
            self.opt_grant_admin_option()
            self.state = 4287 
            self.opt_granted_by()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeRoleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RevokeRoleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(SqlParser.ADMIN, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def opt_granted_by(self):
            return self.getTypedRuleContext(SqlParser.Opt_granted_byContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(SqlParser.Privilege_listContext,0)


        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(SqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_revokeRoleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRevokeRoleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRevokeRoleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRevokeRoleStmt(self)
            else:
                return visitor.visitChildren(self)




    def revokeRoleStmt(self):

        localctx = SqlParser.RevokeRoleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_revokeRoleStmt)
        try:
            self.state = 4306
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4289
                self.match(self.REVOKE)
                self.state = 4290 
                self.privilege_list(0)
                self.state = 4291
                self.match(self.FROM)
                self.state = 4292 
                self.name_list(0)
                self.state = 4293 
                self.opt_granted_by()
                self.state = 4294 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4296
                self.match(self.REVOKE)
                self.state = 4297
                self.match(self.ADMIN)
                self.state = 4298
                self.match(self.OPTION)
                self.state = 4299
                self.match(self.FOR)
                self.state = 4300 
                self.privilege_list(0)
                self.state = 4301
                self.match(self.FROM)
                self.state = 4302 
                self.name_list(0)
                self.state = 4303 
                self.opt_granted_by()
                self.state = 4304 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_grant_admin_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_grant_admin_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADMIN(self):
            return self.getToken(SqlParser.ADMIN, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_grant_admin_option

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_grant_admin_option(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_grant_admin_option(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_grant_admin_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_grant_admin_option(self):

        localctx = SqlParser.Opt_grant_admin_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_opt_grant_admin_option)
        try:
            self.state = 4312
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4308
                self.match(self.WITH)
                self.state = 4309
                self.match(self.ADMIN)
                self.state = 4310
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_granted_byContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_granted_byContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GRANTED(self):
            return self.getToken(SqlParser.GRANTED, 0)

        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_granted_by

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_granted_by(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_granted_by(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_granted_by(self)
            else:
                return visitor.visitChildren(self)




    def opt_granted_by(self):

        localctx = SqlParser.Opt_granted_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_opt_granted_by)
        try:
            self.state = 4318
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4314
                self.match(self.GRANTED)
                self.state = 4315
                self.match(self.BY)
                self.state = 4316 
                self.roleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDefaultPrivilegesStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterDefaultPrivilegesStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def defACLAction(self):
            return self.getTypedRuleContext(SqlParser.DefACLActionContext,0)


        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlParser.PRIVILEGES, 0)

        def defACLOptionList(self):
            return self.getTypedRuleContext(SqlParser.DefACLOptionListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterDefaultPrivilegesStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterDefaultPrivilegesStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterDefaultPrivilegesStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterDefaultPrivilegesStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDefaultPrivilegesStmt(self):

        localctx = SqlParser.AlterDefaultPrivilegesStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_alterDefaultPrivilegesStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4320
            self.match(self.ALTER)
            self.state = 4321
            self.match(self.DEFAULT)
            self.state = 4322
            self.match(self.PRIVILEGES)
            self.state = 4323 
            self.defACLOptionList(0)
            self.state = 4324 
            self.defACLAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefACLOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DefACLOptionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def defACLOptionList(self):
            return self.getTypedRuleContext(SqlParser.DefACLOptionListContext,0)


        def defACLOption(self):
            return self.getTypedRuleContext(SqlParser.DefACLOptionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_defACLOptionList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefACLOptionList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefACLOptionList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefACLOptionList(self)
            else:
                return visitor.visitChildren(self)



    def defACLOptionList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.DefACLOptionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 492
        self.enterRecursionRule(localctx, 492, self.RULE_defACLOptionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 4331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.DefACLOptionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_defACLOptionList)
                    self.state = 4327
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 4328 
                    self.defACLOption() 
                self.state = 4333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DefACLOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DefACLOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_defACLOption

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefACLOption(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefACLOption(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefACLOption(self)
            else:
                return visitor.visitChildren(self)




    def defACLOption(self):

        localctx = SqlParser.DefACLOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_defACLOption)
        try:
            self.state = 4343
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4334
                self.match(self.IN_P)
                self.state = 4335
                self.match(self.SCHEMA)
                self.state = 4336 
                self.name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4337
                self.match(self.FOR)
                self.state = 4338
                self.match(self.ROLE)
                self.state = 4339 
                self.name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4340
                self.match(self.FOR)
                self.state = 4341
                self.match(self.USER)
                self.state = 4342 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefACLActionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DefACLActionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def opt_grant_grant_option(self):
            return self.getTypedRuleContext(SqlParser.Opt_grant_grant_optionContext,0)


        def privileges(self):
            return self.getTypedRuleContext(SqlParser.PrivilegesContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def defacl_privilege_target(self):
            return self.getTypedRuleContext(SqlParser.Defacl_privilege_targetContext,0)


        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(SqlParser.Grantee_listContext,0)


        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def REVOKE(self):
            return self.getToken(SqlParser.REVOKE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_defACLAction

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefACLAction(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefACLAction(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefACLAction(self)
            else:
                return visitor.visitChildren(self)




    def defACLAction(self):

        localctx = SqlParser.DefACLActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_defACLAction)
        try:
            self.state = 4372
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4345
                self.match(self.GRANT)
                self.state = 4346 
                self.privileges()
                self.state = 4347
                self.match(self.ON)
                self.state = 4348 
                self.defacl_privilege_target()
                self.state = 4349
                self.match(self.TO)
                self.state = 4350 
                self.grantee_list(0)
                self.state = 4351 
                self.opt_grant_grant_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4353
                self.match(self.REVOKE)
                self.state = 4354 
                self.privileges()
                self.state = 4355
                self.match(self.ON)
                self.state = 4356 
                self.defacl_privilege_target()
                self.state = 4357
                self.match(self.FROM)
                self.state = 4358 
                self.grantee_list(0)
                self.state = 4359 
                self.opt_drop_behavior()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4361
                self.match(self.REVOKE)
                self.state = 4362
                self.match(self.GRANT)
                self.state = 4363
                self.match(self.OPTION)
                self.state = 4364
                self.match(self.FOR)
                self.state = 4365 
                self.privileges()
                self.state = 4366
                self.match(self.ON)
                self.state = 4367 
                self.defacl_privilege_target()
                self.state = 4368
                self.match(self.FROM)
                self.state = 4369 
                self.grantee_list(0)
                self.state = 4370 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Defacl_privilege_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Defacl_privilege_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(SqlParser.TABLES, 0)

        def TYPES_P(self):
            return self.getToken(SqlParser.TYPES_P, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlParser.FUNCTIONS, 0)

        def SEQUENCES(self):
            return self.getToken(SqlParser.SEQUENCES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_defacl_privilege_target

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDefacl_privilege_target(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDefacl_privilege_target(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDefacl_privilege_target(self)
            else:
                return visitor.visitChildren(self)




    def defacl_privilege_target(self):

        localctx = SqlParser.Defacl_privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_defacl_privilege_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4374
            _la = self._input.LA(1)
            if not(_la==SqlParser.FUNCTIONS or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (self.SEQUENCES - 319)) | (1 << (self.TABLES - 319)) | (1 << (self.TYPES_P - 319)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.IndexStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_clause(self):
            return self.getTypedRuleContext(SqlParser.Where_clauseContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def index_params(self):
            return self.getTypedRuleContext(SqlParser.Index_paramsContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def optTableSpace(self):
            return self.getTypedRuleContext(SqlParser.OptTableSpaceContext,0)


        def opt_unique(self):
            return self.getTypedRuleContext(SqlParser.Opt_uniqueContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(SqlParser.Access_method_clauseContext,0)


        def opt_reloptions(self):
            return self.getTypedRuleContext(SqlParser.Opt_reloptionsContext,0)


        def opt_concurrently(self):
            return self.getTypedRuleContext(SqlParser.Opt_concurrentlyContext,0)


        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def opt_index_name(self):
            return self.getTypedRuleContext(SqlParser.Opt_index_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_indexStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndexStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndexStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndexStmt(self)
            else:
                return visitor.visitChildren(self)




    def indexStmt(self):

        localctx = SqlParser.IndexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_indexStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4376
            self.match(self.CREATE)
            self.state = 4377 
            self.opt_unique()
            self.state = 4378
            self.match(self.INDEX)
            self.state = 4379 
            self.opt_concurrently()
            self.state = 4380 
            self.opt_index_name()
            self.state = 4381
            self.match(self.ON)
            self.state = 4382 
            self.qualified_name()
            self.state = 4383 
            self.access_method_clause()
            self.state = 4384
            self.match(self.T__6)
            self.state = 4385 
            self.index_params(0)
            self.state = 4386
            self.match(self.T__13)
            self.state = 4387 
            self.opt_reloptions()
            self.state = 4388 
            self.optTableSpace()
            self.state = 4389 
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_uniqueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_uniqueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(SqlParser.UNIQUE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_unique

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_unique(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_unique(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_unique(self)
            else:
                return visitor.visitChildren(self)




    def opt_unique(self):

        localctx = SqlParser.Opt_uniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_opt_unique)
        try:
            self.state = 4393
            token = self._input.LA(1)
            if token in [self.UNIQUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4391
                self.match(self.UNIQUE)

            elif token in [self.INDEX]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_concurrentlyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_concurrentlyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(SqlParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_concurrently

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_concurrently(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_concurrently(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_concurrently(self)
            else:
                return visitor.visitChildren(self)




    def opt_concurrently(self):

        localctx = SqlParser.Opt_concurrentlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_opt_concurrently)
        try:
            self.state = 4397
            token = self._input.LA(1)
            if token in [self.CONCURRENTLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4395
                self.match(self.CONCURRENTLY)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.ON, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_index_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_index_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_index_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_index_name(self)
            else:
                return visitor.visitChildren(self)




    def opt_index_name(self):

        localctx = SqlParser.Opt_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_opt_index_name)
        try:
            self.state = 4401
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4399 
                self.index_name()

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Access_method_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Access_method_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_access_method_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAccess_method_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAccess_method_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAccess_method_clause(self)
            else:
                return visitor.visitChildren(self)




    def access_method_clause(self):

        localctx = SqlParser.Access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_access_method_clause)
        try:
            self.state = 4406
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4403
                self.match(self.USING)
                self.state = 4404 
                self.access_method()

            elif token in [self.T__6]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_paramsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Index_paramsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_params(self):
            return self.getTypedRuleContext(SqlParser.Index_paramsContext,0)


        def index_elem(self):
            return self.getTypedRuleContext(SqlParser.Index_elemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_index_params

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndex_params(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndex_params(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndex_params(self)
            else:
                return visitor.visitChildren(self)



    def index_params(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Index_paramsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 510
        self.enterRecursionRule(localctx, 510, self.RULE_index_params, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4409 
            self.index_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Index_paramsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_index_params)
                    self.state = 4411
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4412
                    self.match(self.T__11)
                    self.state = 4413 
                    self.index_elem() 
                self.state = 4418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Index_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Index_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(SqlParser.Func_exprContext,0)


        def opt_asc_desc(self):
            return self.getTypedRuleContext(SqlParser.Opt_asc_descContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def opt_class(self):
            return self.getTypedRuleContext(SqlParser.Opt_classContext,0)


        def opt_nulls_order(self):
            return self.getTypedRuleContext(SqlParser.Opt_nulls_orderContext,0)


        def opt_collate(self):
            return self.getTypedRuleContext(SqlParser.Opt_collateContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_index_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndex_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndex_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndex_elem(self)
            else:
                return visitor.visitChildren(self)




    def index_elem(self):

        localctx = SqlParser.Index_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_index_elem)
        try:
            self.state = 4439
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4419 
                self.colId()
                self.state = 4420 
                self.opt_collate()
                self.state = 4421 
                self.opt_class()
                self.state = 4422 
                self.opt_asc_desc()
                self.state = 4423 
                self.opt_nulls_order()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4425 
                self.func_expr()
                self.state = 4426 
                self.opt_collate()
                self.state = 4427 
                self.opt_class()
                self.state = 4428 
                self.opt_asc_desc()
                self.state = 4429 
                self.opt_nulls_order()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4431
                self.match(self.T__6)
                self.state = 4432 
                self.a_expr(0)
                self.state = 4433
                self.match(self.T__13)
                self.state = 4434 
                self.opt_collate()
                self.state = 4435 
                self.opt_class()
                self.state = 4436 
                self.opt_asc_desc()
                self.state = 4437 
                self.opt_nulls_order()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_collateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_collateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def COLLATE(self):
            return self.getToken(SqlParser.COLLATE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_collate

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_collate(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_collate(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_collate(self)
            else:
                return visitor.visitChildren(self)




    def opt_collate(self):

        localctx = SqlParser.Opt_collateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_opt_collate)
        try:
            self.state = 4444
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4441
                self.match(self.COLLATE)
                self.state = 4442 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_classContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_classContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_class

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_class(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_class(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_class(self)
            else:
                return visitor.visitChildren(self)




    def opt_class(self):

        localctx = SqlParser.Opt_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_opt_class)
        try:
            self.state = 4450
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4446 
                self.any_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4447
                self.match(self.USING)
                self.state = 4448 
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_asc_descContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_asc_descContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESC(self):
            return self.getToken(SqlParser.DESC, 0)

        def ASC(self):
            return self.getToken(SqlParser.ASC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_asc_desc

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_asc_desc(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_asc_desc(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_asc_desc(self)
            else:
                return visitor.visitChildren(self)




    def opt_asc_desc(self):

        localctx = SqlParser.Opt_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_opt_asc_desc)
        try:
            self.state = 4455
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4452
                self.match(self.ASC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4453
                self.match(self.DESC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_nulls_orderContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_nulls_orderContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULLS_LAST(self):
            return self.getToken(SqlParser.NULLS_LAST, 0)

        def NULLS_FIRST(self):
            return self.getToken(SqlParser.NULLS_FIRST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_nulls_order

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_nulls_order(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_nulls_order(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_nulls_order(self)
            else:
                return visitor.visitChildren(self)




    def opt_nulls_order(self):

        localctx = SqlParser.Opt_nulls_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_opt_nulls_order)
        try:
            self.state = 4460
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4457
                self.match(self.NULLS_FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4458
                self.match(self.NULLS_LAST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateFunctionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_or_replace(self):
            return self.getTypedRuleContext(SqlParser.Opt_or_replaceContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def func_args_with_defaults(self):
            return self.getTypedRuleContext(SqlParser.Func_args_with_defaultsContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def RETURNS(self):
            return self.getToken(SqlParser.RETURNS, 0)

        def func_return(self):
            return self.getTypedRuleContext(SqlParser.Func_returnContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Createfunc_opt_listContext,0)


        def table_func_column_list(self):
            return self.getTypedRuleContext(SqlParser.Table_func_column_listContext,0)


        def opt_definition(self):
            return self.getTypedRuleContext(SqlParser.Opt_definitionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createFunctionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateFunctionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateFunctionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateFunctionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createFunctionStmt(self):

        localctx = SqlParser.CreateFunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_createFunctionStmt)
        try:
            self.state = 4493
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4462
                self.match(self.CREATE)
                self.state = 4463 
                self.opt_or_replace()
                self.state = 4464
                self.match(self.FUNCTION)
                self.state = 4465 
                self.func_name()
                self.state = 4466 
                self.func_args_with_defaults()
                self.state = 4467
                self.match(self.RETURNS)
                self.state = 4468 
                self.func_return()
                self.state = 4469 
                self.createfunc_opt_list(0)
                self.state = 4470 
                self.opt_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4472
                self.match(self.CREATE)
                self.state = 4473 
                self.opt_or_replace()
                self.state = 4474
                self.match(self.FUNCTION)
                self.state = 4475 
                self.func_name()
                self.state = 4476 
                self.func_args_with_defaults()
                self.state = 4477
                self.match(self.RETURNS)
                self.state = 4478
                self.match(self.TABLE)
                self.state = 4479
                self.match(self.T__6)
                self.state = 4480 
                self.table_func_column_list(0)
                self.state = 4481
                self.match(self.T__13)
                self.state = 4482 
                self.createfunc_opt_list(0)
                self.state = 4483 
                self.opt_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4485
                self.match(self.CREATE)
                self.state = 4486 
                self.opt_or_replace()
                self.state = 4487
                self.match(self.FUNCTION)
                self.state = 4488 
                self.func_name()
                self.state = 4489 
                self.func_args_with_defaults()
                self.state = 4490 
                self.createfunc_opt_list(0)
                self.state = 4491 
                self.opt_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_or_replaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_or_replaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_or_replace

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_or_replace(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_or_replace(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_or_replace(self)
            else:
                return visitor.visitChildren(self)




    def opt_or_replace(self):

        localctx = SqlParser.Opt_or_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_opt_or_replace)
        try:
            self.state = 4498
            token = self._input.LA(1)
            if token in [self.OR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4495
                self.match(self.OR)
                self.state = 4496
                self.match(self.REPLACE)

            elif token in [self.FUNCTION, self.LANGUAGE, self.PROCEDURAL, self.RULE, self.TRUSTED]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_argsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_argsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_list(self):
            return self.getTypedRuleContext(SqlParser.Func_args_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_args

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_args(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_args(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_args(self)
            else:
                return visitor.visitChildren(self)




    def func_args(self):

        localctx = SqlParser.Func_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_func_args)
        try:
            self.state = 4506
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4500
                self.match(self.T__6)
                self.state = 4501 
                self.func_args_list(0)
                self.state = 4502
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4504
                self.match(self.T__6)
                self.state = 4505
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_args_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_args_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_list(self):
            return self.getTypedRuleContext(SqlParser.Func_args_listContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(SqlParser.Func_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_args_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_args_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_args_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_args_list(self)
            else:
                return visitor.visitChildren(self)



    def func_args_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Func_args_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 528
        self.enterRecursionRule(localctx, 528, self.RULE_func_args_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4509 
            self.func_arg()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Func_args_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_args_list)
                    self.state = 4511
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4512
                    self.match(self.T__11)
                    self.state = 4513 
                    self.func_arg() 
                self.state = 4518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_args_with_defaultsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_args_with_defaultsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(SqlParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_args_with_defaults

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_args_with_defaults(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_args_with_defaults(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_args_with_defaults(self)
            else:
                return visitor.visitChildren(self)




    def func_args_with_defaults(self):

        localctx = SqlParser.Func_args_with_defaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_func_args_with_defaults)
        try:
            self.state = 4525
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4519
                self.match(self.T__6)
                self.state = 4520 
                self.func_args_with_defaults_list(0)
                self.state = 4521
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4523
                self.match(self.T__6)
                self.state = 4524
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_args_with_defaults_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_args_with_defaults_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_arg_with_default(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_with_defaultContext,0)


        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(SqlParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_args_with_defaults_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_args_with_defaults_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_args_with_defaults_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_args_with_defaults_list(self)
            else:
                return visitor.visitChildren(self)



    def func_args_with_defaults_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Func_args_with_defaults_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 532
        self.enterRecursionRule(localctx, 532, self.RULE_func_args_with_defaults_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4528 
            self.func_arg_with_default()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Func_args_with_defaults_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_args_with_defaults_list)
                    self.state = 4530
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4531
                    self.match(self.T__11)
                    self.state = 4532 
                    self.func_arg_with_default() 
                self.state = 4537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arg_class(self):
            return self.getTypedRuleContext(SqlParser.Arg_classContext,0)


        def func_type(self):
            return self.getTypedRuleContext(SqlParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(SqlParser.Param_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = SqlParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_func_arg)
        try:
            self.state = 4553
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4538 
                self.arg_class()
                self.state = 4539 
                self.param_name()
                self.state = 4540 
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4542 
                self.param_name()
                self.state = 4543 
                self.arg_class()
                self.state = 4544 
                self.func_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4546 
                self.param_name()
                self.state = 4547 
                self.func_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4549 
                self.arg_class()
                self.state = 4550 
                self.func_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4552 
                self.func_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arg_classContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Arg_classContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUT_P(self):
            return self.getToken(SqlParser.OUT_P, 0)

        def VARIADIC(self):
            return self.getToken(SqlParser.VARIADIC, 0)

        def INOUT(self):
            return self.getToken(SqlParser.INOUT, 0)

        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_arg_class

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterArg_class(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitArg_class(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitArg_class(self)
            else:
                return visitor.visitChildren(self)




    def arg_class(self):

        localctx = SqlParser.Arg_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_arg_class)
        try:
            self.state = 4561
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4555
                self.match(self.IN_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4556
                self.match(self.OUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4557
                self.match(self.INOUT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4558
                self.match(self.IN_P)
                self.state = 4559
                self.match(self.OUT_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4560
                self.match(self.VARIADIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Param_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(SqlParser.Type_function_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_param_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterParam_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitParam_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitParam_name(self)
            else:
                return visitor.visitChildren(self)




    def param_name(self):

        localctx = SqlParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4563 
            self.type_function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_returnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_returnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(SqlParser.Func_typeContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_return

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_return(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_return(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_return(self)
            else:
                return visitor.visitChildren(self)




    def func_return(self):

        localctx = SqlParser.Func_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_func_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4565 
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(SqlParser.Type_function_nameContext,0)


        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(SqlParser.AttrsContext,0)


        def SETOF(self):
            return self.getToken(SqlParser.SETOF, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_func_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)




    def func_type(self):

        localctx = SqlParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_func_type)
        try:
            self.state = 4579
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4567 
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4568 
                self.type_function_name()
                self.state = 4569 
                self.attrs(0)
                self.state = 4570
                self.match(self.T__15)
                self.state = 4571
                self.match(self.TYPE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4573
                self.match(self.SETOF)
                self.state = 4574 
                self.type_function_name()
                self.state = 4575 
                self.attrs(0)
                self.state = 4576
                self.match(self.T__15)
                self.state = 4577
                self.match(self.TYPE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_arg_with_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_arg_with_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(SqlParser.Func_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_arg_with_default

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_arg_with_default(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_arg_with_default(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_arg_with_default(self)
            else:
                return visitor.visitChildren(self)




    def func_arg_with_default(self):

        localctx = SqlParser.Func_arg_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_func_arg_with_default)
        try:
            self.state = 4590
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4581 
                self.func_arg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4582 
                self.func_arg()
                self.state = 4583
                self.match(self.DEFAULT)
                self.state = 4584 
                self.a_expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4586 
                self.func_arg()
                self.state = 4587
                self.match(self.T__3)
                self.state = 4588 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createfunc_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Createfunc_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createfunc_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Createfunc_opt_itemContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Createfunc_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createfunc_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatefunc_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatefunc_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatefunc_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def createfunc_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Createfunc_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 546
        self.enterRecursionRule(localctx, 546, self.RULE_createfunc_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4593 
            self.createfunc_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Createfunc_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_createfunc_opt_list)
                    self.state = 4595
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4596 
                    self.createfunc_opt_item() 
                self.state = 4601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Common_func_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Common_func_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INVOKER(self):
            return self.getToken(SqlParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(SqlParser.DEFINER, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def VOLATILE(self):
            return self.getToken(SqlParser.VOLATILE, 0)

        def STRICT_P(self):
            return self.getToken(SqlParser.STRICT_P, 0)

        def EXTERNAL(self):
            return self.getToken(SqlParser.EXTERNAL, 0)

        def NULL_P(self, i=None):
            if i is None:
                return self.getTokens(SqlParser.NULL_P)
            else:
                return self.getToken(SqlParser.NULL_P, i)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def LEAKPROOF(self):
            return self.getToken(SqlParser.LEAKPROOF, 0)

        def ROWS(self):
            return self.getToken(SqlParser.ROWS, 0)

        def STABLE(self):
            return self.getToken(SqlParser.STABLE, 0)

        def SECURITY(self):
            return self.getToken(SqlParser.SECURITY, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def COST(self):
            return self.getToken(SqlParser.COST, 0)

        def CALLED(self):
            return self.getToken(SqlParser.CALLED, 0)

        def INPUT_P(self):
            return self.getToken(SqlParser.INPUT_P, 0)

        def RETURNS(self):
            return self.getToken(SqlParser.RETURNS, 0)

        def IMMUTABLE(self):
            return self.getToken(SqlParser.IMMUTABLE, 0)

        def functionsetResetClause(self):
            return self.getTypedRuleContext(SqlParser.FunctionsetResetClauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_common_func_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCommon_func_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCommon_func_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCommon_func_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def common_func_opt_item(self):

        localctx = SqlParser.Common_func_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_common_func_opt_item)
        try:
            self.state = 4633
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4602
                self.match(self.CALLED)
                self.state = 4603
                self.match(self.ON)
                self.state = 4604
                self.match(self.NULL_P)
                self.state = 4605
                self.match(self.INPUT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4606
                self.match(self.RETURNS)
                self.state = 4607
                self.match(self.NULL_P)
                self.state = 4608
                self.match(self.ON)
                self.state = 4609
                self.match(self.NULL_P)
                self.state = 4610
                self.match(self.INPUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4611
                self.match(self.STRICT_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4612
                self.match(self.IMMUTABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4613
                self.match(self.STABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4614
                self.match(self.VOLATILE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4615
                self.match(self.EXTERNAL)
                self.state = 4616
                self.match(self.SECURITY)
                self.state = 4617
                self.match(self.DEFINER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4618
                self.match(self.EXTERNAL)
                self.state = 4619
                self.match(self.SECURITY)
                self.state = 4620
                self.match(self.INVOKER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4621
                self.match(self.SECURITY)
                self.state = 4622
                self.match(self.DEFINER)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4623
                self.match(self.SECURITY)
                self.state = 4624
                self.match(self.INVOKER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4625
                self.match(self.LEAKPROOF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4626
                self.match(self.NOT)
                self.state = 4627
                self.match(self.LEAKPROOF)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4628
                self.match(self.COST)
                self.state = 4629 
                self.numericOnly()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4630
                self.match(self.ROWS)
                self.state = 4631 
                self.numericOnly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4632 
                self.functionsetResetClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createfunc_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Createfunc_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def func_as(self):
            return self.getTypedRuleContext(SqlParser.Func_asContext,0)


        def common_func_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Common_func_opt_itemContext,0)


        def WINDOW(self):
            return self.getToken(SqlParser.WINDOW, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createfunc_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatefunc_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatefunc_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatefunc_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def createfunc_opt_item(self):

        localctx = SqlParser.Createfunc_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_createfunc_opt_item)
        try:
            self.state = 4641
            token = self._input.LA(1)
            if token in [self.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4635
                self.match(self.AS)
                self.state = 4636 
                self.func_as()

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4637
                self.match(self.LANGUAGE)
                self.state = 4638 
                self.colId_or_Sconst()

            elif token in [self.WINDOW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4639
                self.match(self.WINDOW)

            elif token in [self.CALLED, self.COST, self.EXTERNAL, self.IMMUTABLE, self.LEAKPROOF, self.NOT, self.RESET, self.RETURNS, self.ROWS, self.SECURITY, self.SET, self.STABLE, self.STRICT_P, self.VOLATILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4640 
                self.common_func_opt_item()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_asContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_asContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(SqlParser.SConstContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_func_as

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_as(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_as(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_as(self)
            else:
                return visitor.visitChildren(self)




    def func_as(self):

        localctx = SqlParser.Func_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_func_as)
        try:
            self.state = 4648
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4643 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4644 
                self.sConst()
                self.state = 4645
                self.match(self.T__11)
                self.state = 4646 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def definition(self):
            return self.getTypedRuleContext(SqlParser.DefinitionContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_definition

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_definition(self)
            else:
                return visitor.visitChildren(self)




    def opt_definition(self):

        localctx = SqlParser.Opt_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_opt_definition)
        try:
            self.state = 4653
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4650
                self.match(self.WITH)
                self.state = 4651 
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_func_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Table_func_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(SqlParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(SqlParser.Param_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_func_column

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTable_func_column(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTable_func_column(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTable_func_column(self)
            else:
                return visitor.visitChildren(self)




    def table_func_column(self):

        localctx = SqlParser.Table_func_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_table_func_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4655 
            self.param_name()
            self.state = 4656 
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_func_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Table_func_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_func_column(self):
            return self.getTypedRuleContext(SqlParser.Table_func_columnContext,0)


        def table_func_column_list(self):
            return self.getTypedRuleContext(SqlParser.Table_func_column_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_func_column_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTable_func_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTable_func_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTable_func_column_list(self)
            else:
                return visitor.visitChildren(self)



    def table_func_column_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Table_func_column_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 558
        self.enterRecursionRule(localctx, 558, self.RULE_table_func_column_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4659 
            self.table_func_column()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Table_func_column_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_func_column_list)
                    self.state = 4661
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4662
                    self.match(self.T__11)
                    self.state = 4663 
                    self.table_func_column() 
                self.state = 4668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AlterFunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterFunctionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alterfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def opt_restrict(self):
            return self.getTypedRuleContext(SqlParser.Opt_restrictContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterFunctionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterFunctionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterFunctionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterFunctionStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterFunctionStmt(self):

        localctx = SqlParser.AlterFunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_alterFunctionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4669
            self.match(self.ALTER)
            self.state = 4670
            self.match(self.FUNCTION)
            self.state = 4671 
            self.function_with_argtypes()
            self.state = 4672 
            self.alterfunc_opt_list(0)
            self.state = 4673 
            self.opt_restrict()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alterfunc_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alterfunc_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_func_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Common_func_opt_itemContext,0)


        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alterfunc_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterfunc_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterfunc_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterfunc_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterfunc_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alterfunc_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alterfunc_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 562
        self.enterRecursionRule(localctx, 562, self.RULE_alterfunc_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4676 
            self.common_func_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alterfunc_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alterfunc_opt_list)
                    self.state = 4678
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4679 
                    self.common_func_opt_item() 
                self.state = 4684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_restrictContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_restrictContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(SqlParser.RESTRICT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_restrict

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_restrict(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_restrict(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_restrict(self)
            else:
                return visitor.visitChildren(self)




    def opt_restrict(self):

        localctx = SqlParser.Opt_restrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_opt_restrict)
        try:
            self.state = 4687
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4685
                self.match(self.RESTRICT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveFuncStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RemoveFuncStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def func_args(self):
            return self.getTypedRuleContext(SqlParser.Func_argsContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_removeFuncStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRemoveFuncStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRemoveFuncStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRemoveFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeFuncStmt(self):

        localctx = SqlParser.RemoveFuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_removeFuncStmt)
        try:
            self.state = 4703
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4689
                self.match(self.DROP)
                self.state = 4690
                self.match(self.FUNCTION)
                self.state = 4691 
                self.func_name()
                self.state = 4692 
                self.func_args()
                self.state = 4693 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4695
                self.match(self.DROP)
                self.state = 4696
                self.match(self.FUNCTION)
                self.state = 4697
                self.match(self.IF_P)
                self.state = 4698
                self.match(self.EXISTS)
                self.state = 4699 
                self.func_name()
                self.state = 4700 
                self.func_args()
                self.state = 4701 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveAggrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RemoveAggrStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_removeAggrStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRemoveAggrStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRemoveAggrStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRemoveAggrStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeAggrStmt(self):

        localctx = SqlParser.RemoveAggrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_removeAggrStmt)
        try:
            self.state = 4719
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4705
                self.match(self.DROP)
                self.state = 4706
                self.match(self.AGGREGATE)
                self.state = 4707 
                self.func_name()
                self.state = 4708 
                self.aggr_args()
                self.state = 4709 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4711
                self.match(self.DROP)
                self.state = 4712
                self.match(self.AGGREGATE)
                self.state = 4713
                self.match(self.IF_P)
                self.state = 4714
                self.match(self.EXISTS)
                self.state = 4715 
                self.func_name()
                self.state = 4716 
                self.aggr_args()
                self.state = 4717 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveOperStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RemoveOperStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_removeOperStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRemoveOperStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRemoveOperStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRemoveOperStmt(self)
            else:
                return visitor.visitChildren(self)




    def removeOperStmt(self):

        localctx = SqlParser.RemoveOperStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_removeOperStmt)
        try:
            self.state = 4735
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4721
                self.match(self.DROP)
                self.state = 4722
                self.match(self.OPERATOR)
                self.state = 4723 
                self.any_operator()
                self.state = 4724 
                self.oper_argtypes()
                self.state = 4725 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4727
                self.match(self.DROP)
                self.state = 4728
                self.match(self.OPERATOR)
                self.state = 4729
                self.match(self.IF_P)
                self.state = 4730
                self.match(self.EXISTS)
                self.state = 4731 
                self.any_operator()
                self.state = 4732 
                self.oper_argtypes()
                self.state = 4733 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Oper_argtypesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Oper_argtypesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(SqlParser.TypenameContext,i)


        def NONE(self):
            return self.getToken(SqlParser.NONE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_oper_argtypes

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOper_argtypes(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOper_argtypes(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOper_argtypes(self)
            else:
                return visitor.visitChildren(self)




    def oper_argtypes(self):

        localctx = SqlParser.Oper_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_oper_argtypes)
        try:
            self.state = 4759
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4737
                self.match(self.T__6)
                self.state = 4738 
                self.typename()
                self.state = 4739
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4741
                self.match(self.T__6)
                self.state = 4742 
                self.typename()
                self.state = 4743
                self.match(self.T__11)
                self.state = 4744 
                self.typename()
                self.state = 4745
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4747
                self.match(self.T__6)
                self.state = 4748
                self.match(self.NONE)
                self.state = 4749
                self.match(self.T__11)
                self.state = 4750 
                self.typename()
                self.state = 4751
                self.match(self.T__13)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4753
                self.match(self.T__6)
                self.state = 4754 
                self.typename()
                self.state = 4755
                self.match(self.T__11)
                self.state = 4756
                self.match(self.NONE)
                self.state = 4757
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Any_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def all_Op(self):
            return self.getTypedRuleContext(SqlParser.All_OpContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_any_operator

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAny_operator(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAny_operator(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAny_operator(self)
            else:
                return visitor.visitChildren(self)




    def any_operator(self):

        localctx = SqlParser.Any_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_any_operator)
        try:
            self.state = 4766
            token = self._input.LA(1)
            if token in [self.T__15, self.T__14, self.T__10, self.T__8, self.T__7, self.T__4, self.T__3, self.T__1, self.T__0, self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4761 
                self.all_Op()

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4762 
                self.colId()
                self.state = 4763
                self.match(self.T__12)
                self.state = 4764 
                self.any_operator()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DoStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(SqlParser.DO, 0)

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Dostmt_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_doStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDoStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDoStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDoStmt(self)
            else:
                return visitor.visitChildren(self)




    def doStmt(self):

        localctx = SqlParser.DoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_doStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4768
            self.match(self.DO)
            self.state = 4769 
            self.dostmt_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dostmt_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Dostmt_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Dostmt_opt_listContext,0)


        def dostmt_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Dostmt_opt_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dostmt_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDostmt_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDostmt_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDostmt_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def dostmt_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Dostmt_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 578
        self.enterRecursionRule(localctx, 578, self.RULE_dostmt_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4772 
            self.dostmt_opt_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Dostmt_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dostmt_opt_list)
                    self.state = 4774
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4775 
                    self.dostmt_opt_item() 
                self.state = 4780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Dostmt_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Dostmt_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId_or_Sconst(self):
            return self.getTypedRuleContext(SqlParser.ColId_or_SconstContext,0)


        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dostmt_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDostmt_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDostmt_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDostmt_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def dostmt_opt_item(self):

        localctx = SqlParser.Dostmt_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_dostmt_opt_item)
        try:
            self.state = 4784
            token = self._input.LA(1)
            if token in [self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4781 
                self.sConst()

            elif token in [self.LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4782
                self.match(self.LANGUAGE)
                self.state = 4783 
                self.colId_or_Sconst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateCastStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateCastStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def cast_context(self):
            return self.getTypedRuleContext(SqlParser.Cast_contextContext,0)


        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(SqlParser.TypenameContext,i)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def INOUT(self):
            return self.getToken(SqlParser.INOUT, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createCastStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateCastStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateCastStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateCastStmt(self)
            else:
                return visitor.visitChildren(self)




    def createCastStmt(self):

        localctx = SqlParser.CreateCastStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_createCastStmt)
        try:
            self.state = 4820
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4786
                self.match(self.CREATE)
                self.state = 4787
                self.match(self.CAST)
                self.state = 4788
                self.match(self.T__6)
                self.state = 4789 
                self.typename()
                self.state = 4790
                self.match(self.AS)
                self.state = 4791 
                self.typename()
                self.state = 4792
                self.match(self.T__13)
                self.state = 4793
                self.match(self.WITH)
                self.state = 4794
                self.match(self.FUNCTION)
                self.state = 4795 
                self.function_with_argtypes()
                self.state = 4796 
                self.cast_context()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4798
                self.match(self.CREATE)
                self.state = 4799
                self.match(self.CAST)
                self.state = 4800
                self.match(self.T__6)
                self.state = 4801 
                self.typename()
                self.state = 4802
                self.match(self.AS)
                self.state = 4803 
                self.typename()
                self.state = 4804
                self.match(self.T__13)
                self.state = 4805
                self.match(self.WITHOUT)
                self.state = 4806
                self.match(self.FUNCTION)
                self.state = 4807 
                self.cast_context()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4809
                self.match(self.CREATE)
                self.state = 4810
                self.match(self.CAST)
                self.state = 4811
                self.match(self.T__6)
                self.state = 4812 
                self.typename()
                self.state = 4813
                self.match(self.AS)
                self.state = 4814 
                self.typename()
                self.state = 4815
                self.match(self.T__13)
                self.state = 4816
                self.match(self.WITH)
                self.state = 4817
                self.match(self.INOUT)
                self.state = 4818 
                self.cast_context()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_contextContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Cast_contextContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def IMPLICIT_P(self):
            return self.getToken(SqlParser.IMPLICIT_P, 0)

        def ASSIGNMENT(self):
            return self.getToken(SqlParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_cast_context

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCast_context(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCast_context(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCast_context(self)
            else:
                return visitor.visitChildren(self)




    def cast_context(self):

        localctx = SqlParser.Cast_contextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_cast_context)
        try:
            self.state = 4827
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4822
                self.match(self.AS)
                self.state = 4823
                self.match(self.IMPLICIT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4824
                self.match(self.AS)
                self.state = 4825
                self.match(self.ASSIGNMENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropCastStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropCastStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def typename(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.TypenameContext)
            else:
                return self.getTypedRuleContext(SqlParser.TypenameContext,i)


        def opt_if_exists(self):
            return self.getTypedRuleContext(SqlParser.Opt_if_existsContext,0)


        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropCastStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropCastStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropCastStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropCastStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropCastStmt(self):

        localctx = SqlParser.DropCastStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_dropCastStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4829
            self.match(self.DROP)
            self.state = 4830
            self.match(self.CAST)
            self.state = 4831 
            self.opt_if_exists()
            self.state = 4832
            self.match(self.T__6)
            self.state = 4833 
            self.typename()
            self.state = 4834
            self.match(self.AS)
            self.state = 4835 
            self.typename()
            self.state = 4836
            self.match(self.T__13)
            self.state = 4837 
            self.opt_drop_behavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_if_existsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_if_existsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_if_exists

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_if_exists(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_if_exists(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_if_exists(self)
            else:
                return visitor.visitChildren(self)




    def opt_if_exists(self):

        localctx = SqlParser.Opt_if_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_opt_if_exists)
        try:
            self.state = 4842
            token = self._input.LA(1)
            if token in [self.IF_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4839
                self.match(self.IF_P)
                self.state = 4840
                self.match(self.EXISTS)

            elif token in [self.T__6]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReindexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ReindexStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def SYSTEM_P(self):
            return self.getToken(SqlParser.SYSTEM_P, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def opt_force(self):
            return self.getTypedRuleContext(SqlParser.Opt_forceContext,0)


        def reindex_type(self):
            return self.getTypedRuleContext(SqlParser.Reindex_typeContext,0)


        def REINDEX(self):
            return self.getToken(SqlParser.REINDEX, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reindexStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReindexStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReindexStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReindexStmt(self)
            else:
                return visitor.visitChildren(self)




    def reindexStmt(self):

        localctx = SqlParser.ReindexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_reindexStmt)
        try:
            self.state = 4859
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4844
                self.match(self.REINDEX)
                self.state = 4845 
                self.reindex_type()
                self.state = 4846 
                self.qualified_name()
                self.state = 4847 
                self.opt_force()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4849
                self.match(self.REINDEX)
                self.state = 4850
                self.match(self.SYSTEM_P)
                self.state = 4851 
                self.name()
                self.state = 4852 
                self.opt_force()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4854
                self.match(self.REINDEX)
                self.state = 4855
                self.match(self.DATABASE)
                self.state = 4856 
                self.name()
                self.state = 4857 
                self.opt_force()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Reindex_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_reindex_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReindex_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReindex_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReindex_type(self)
            else:
                return visitor.visitChildren(self)




    def reindex_type(self):

        localctx = SqlParser.Reindex_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_reindex_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4861
            _la = self._input.LA(1)
            if not(_la==SqlParser.INDEX or _la==SqlParser.TABLE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_forceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_forceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FORCE(self):
            return self.getToken(SqlParser.FORCE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_force

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_force(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_force(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_force(self)
            else:
                return visitor.visitChildren(self)




    def opt_force(self):

        localctx = SqlParser.Opt_forceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_opt_force)
        try:
            self.state = 4865
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4863
                self.match(self.FORCE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RenameStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SqlParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.NameContext)
            else:
                return self.getTypedRuleContext(SqlParser.NameContext,i)


        def RENAME(self):
            return self.getToken(SqlParser.RENAME, 0)

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def opt_column(self):
            return self.getTypedRuleContext(SqlParser.Opt_columnContext,0)


        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def ATTRIBUTE(self):
            return self.getToken(SqlParser.ATTRIBUTE, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def roleId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.RoleIdContext)
            else:
                return self.getTypedRuleContext(SqlParser.RoleIdContext,i)


        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def database_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Database_nameContext,i)


        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def reloptions(self):
            return self.getTypedRuleContext(SqlParser.ReloptionsContext,0)


        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_renameStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRenameStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRenameStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRenameStmt(self)
            else:
                return visitor.visitChildren(self)




    def renameStmt(self):

        localctx = SqlParser.RenameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_renameStmt)
        try:
            self.state = 5205
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4867
                self.match(self.ALTER)
                self.state = 4868
                self.match(self.AGGREGATE)
                self.state = 4869 
                self.func_name()
                self.state = 4870 
                self.aggr_args()
                self.state = 4871
                self.match(self.RENAME)
                self.state = 4872
                self.match(self.TO)
                self.state = 4873 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4875
                self.match(self.ALTER)
                self.state = 4876
                self.match(self.COLLATION)
                self.state = 4877 
                self.any_name()
                self.state = 4878
                self.match(self.RENAME)
                self.state = 4879
                self.match(self.TO)
                self.state = 4880 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4882
                self.match(self.ALTER)
                self.state = 4883
                self.match(self.CONVERSION_P)
                self.state = 4884 
                self.any_name()
                self.state = 4885
                self.match(self.RENAME)
                self.state = 4886
                self.match(self.TO)
                self.state = 4887 
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4889
                self.match(self.ALTER)
                self.state = 4890
                self.match(self.DATABASE)
                self.state = 4891 
                self.database_name()
                self.state = 4892
                self.match(self.RENAME)
                self.state = 4893
                self.match(self.TO)
                self.state = 4894 
                self.database_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4896
                self.match(self.ALTER)
                self.state = 4897
                self.match(self.DOMAIN_P)
                self.state = 4898 
                self.any_name()
                self.state = 4899
                self.match(self.RENAME)
                self.state = 4900
                self.match(self.TO)
                self.state = 4901 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4903
                self.match(self.ALTER)
                self.state = 4904
                self.match(self.DOMAIN_P)
                self.state = 4905 
                self.any_name()
                self.state = 4906
                self.match(self.RENAME)
                self.state = 4907
                self.match(self.CONSTRAINT)
                self.state = 4908 
                self.name()
                self.state = 4909
                self.match(self.TO)
                self.state = 4910 
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4912
                self.match(self.ALTER)
                self.state = 4913
                self.match(self.FOREIGN)
                self.state = 4914
                self.match(self.DATA_P)
                self.state = 4915
                self.match(self.WRAPPER)
                self.state = 4916 
                self.name()
                self.state = 4917
                self.match(self.RENAME)
                self.state = 4918
                self.match(self.TO)
                self.state = 4919 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4921
                self.match(self.ALTER)
                self.state = 4922
                self.match(self.FUNCTION)
                self.state = 4923 
                self.function_with_argtypes()
                self.state = 4924
                self.match(self.RENAME)
                self.state = 4925
                self.match(self.TO)
                self.state = 4926 
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4928
                self.match(self.ALTER)
                self.state = 4929
                self.match(self.GROUP_P)
                self.state = 4930 
                self.roleId()
                self.state = 4931
                self.match(self.RENAME)
                self.state = 4932
                self.match(self.TO)
                self.state = 4933 
                self.roleId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4935
                self.match(self.ALTER)
                self.state = 4936 
                self.opt_procedural()
                self.state = 4937
                self.match(self.LANGUAGE)
                self.state = 4938 
                self.name()
                self.state = 4939
                self.match(self.RENAME)
                self.state = 4940
                self.match(self.TO)
                self.state = 4941 
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4943
                self.match(self.ALTER)
                self.state = 4944
                self.match(self.OPERATOR)
                self.state = 4945
                self.match(self.CLASS)
                self.state = 4946 
                self.any_name()
                self.state = 4947
                self.match(self.USING)
                self.state = 4948 
                self.access_method()
                self.state = 4949
                self.match(self.RENAME)
                self.state = 4950
                self.match(self.TO)
                self.state = 4951 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4953
                self.match(self.ALTER)
                self.state = 4954
                self.match(self.OPERATOR)
                self.state = 4955
                self.match(self.FAMILY)
                self.state = 4956 
                self.any_name()
                self.state = 4957
                self.match(self.USING)
                self.state = 4958 
                self.access_method()
                self.state = 4959
                self.match(self.RENAME)
                self.state = 4960
                self.match(self.TO)
                self.state = 4961 
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4963
                self.match(self.ALTER)
                self.state = 4964
                self.match(self.SCHEMA)
                self.state = 4965 
                self.name()
                self.state = 4966
                self.match(self.RENAME)
                self.state = 4967
                self.match(self.TO)
                self.state = 4968 
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4970
                self.match(self.ALTER)
                self.state = 4971
                self.match(self.SERVER)
                self.state = 4972 
                self.name()
                self.state = 4973
                self.match(self.RENAME)
                self.state = 4974
                self.match(self.TO)
                self.state = 4975 
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4977
                self.match(self.ALTER)
                self.state = 4978
                self.match(self.TABLE)
                self.state = 4979 
                self.relation_expr()
                self.state = 4980
                self.match(self.RENAME)
                self.state = 4981
                self.match(self.TO)
                self.state = 4982 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4984
                self.match(self.ALTER)
                self.state = 4985
                self.match(self.TABLE)
                self.state = 4986
                self.match(self.IF_P)
                self.state = 4987
                self.match(self.EXISTS)
                self.state = 4988 
                self.relation_expr()
                self.state = 4989
                self.match(self.RENAME)
                self.state = 4990
                self.match(self.TO)
                self.state = 4991 
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4993
                self.match(self.ALTER)
                self.state = 4994
                self.match(self.SEQUENCE)
                self.state = 4995 
                self.qualified_name()
                self.state = 4996
                self.match(self.RENAME)
                self.state = 4997
                self.match(self.TO)
                self.state = 4998 
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5000
                self.match(self.ALTER)
                self.state = 5001
                self.match(self.SEQUENCE)
                self.state = 5002
                self.match(self.IF_P)
                self.state = 5003
                self.match(self.EXISTS)
                self.state = 5004 
                self.qualified_name()
                self.state = 5005
                self.match(self.RENAME)
                self.state = 5006
                self.match(self.TO)
                self.state = 5007 
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5009
                self.match(self.ALTER)
                self.state = 5010
                self.match(self.VIEW)
                self.state = 5011 
                self.qualified_name()
                self.state = 5012
                self.match(self.RENAME)
                self.state = 5013
                self.match(self.TO)
                self.state = 5014 
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5016
                self.match(self.ALTER)
                self.state = 5017
                self.match(self.VIEW)
                self.state = 5018
                self.match(self.IF_P)
                self.state = 5019
                self.match(self.EXISTS)
                self.state = 5020 
                self.qualified_name()
                self.state = 5021
                self.match(self.RENAME)
                self.state = 5022
                self.match(self.TO)
                self.state = 5023 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5025
                self.match(self.ALTER)
                self.state = 5026
                self.match(self.INDEX)
                self.state = 5027 
                self.qualified_name()
                self.state = 5028
                self.match(self.RENAME)
                self.state = 5029
                self.match(self.TO)
                self.state = 5030 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5032
                self.match(self.ALTER)
                self.state = 5033
                self.match(self.INDEX)
                self.state = 5034
                self.match(self.IF_P)
                self.state = 5035
                self.match(self.EXISTS)
                self.state = 5036 
                self.qualified_name()
                self.state = 5037
                self.match(self.RENAME)
                self.state = 5038
                self.match(self.TO)
                self.state = 5039 
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 5041
                self.match(self.ALTER)
                self.state = 5042
                self.match(self.FOREIGN)
                self.state = 5043
                self.match(self.TABLE)
                self.state = 5044 
                self.relation_expr()
                self.state = 5045
                self.match(self.RENAME)
                self.state = 5046
                self.match(self.TO)
                self.state = 5047 
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 5049
                self.match(self.ALTER)
                self.state = 5050
                self.match(self.FOREIGN)
                self.state = 5051
                self.match(self.TABLE)
                self.state = 5052
                self.match(self.IF_P)
                self.state = 5053
                self.match(self.EXISTS)
                self.state = 5054 
                self.relation_expr()
                self.state = 5055
                self.match(self.RENAME)
                self.state = 5056
                self.match(self.TO)
                self.state = 5057 
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 5059
                self.match(self.ALTER)
                self.state = 5060
                self.match(self.TABLE)
                self.state = 5061 
                self.relation_expr()
                self.state = 5062
                self.match(self.RENAME)
                self.state = 5063 
                self.opt_column()
                self.state = 5064 
                self.name()
                self.state = 5065
                self.match(self.TO)
                self.state = 5066 
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 5068
                self.match(self.ALTER)
                self.state = 5069
                self.match(self.TABLE)
                self.state = 5070
                self.match(self.IF_P)
                self.state = 5071
                self.match(self.EXISTS)
                self.state = 5072 
                self.relation_expr()
                self.state = 5073
                self.match(self.RENAME)
                self.state = 5074 
                self.opt_column()
                self.state = 5075 
                self.name()
                self.state = 5076
                self.match(self.TO)
                self.state = 5077 
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 5079
                self.match(self.ALTER)
                self.state = 5080
                self.match(self.TABLE)
                self.state = 5081 
                self.relation_expr()
                self.state = 5082
                self.match(self.RENAME)
                self.state = 5083
                self.match(self.CONSTRAINT)
                self.state = 5084 
                self.name()
                self.state = 5085
                self.match(self.TO)
                self.state = 5086 
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 5088
                self.match(self.ALTER)
                self.state = 5089
                self.match(self.FOREIGN)
                self.state = 5090
                self.match(self.TABLE)
                self.state = 5091 
                self.relation_expr()
                self.state = 5092
                self.match(self.RENAME)
                self.state = 5093 
                self.opt_column()
                self.state = 5094 
                self.name()
                self.state = 5095
                self.match(self.TO)
                self.state = 5096 
                self.name()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 5098
                self.match(self.ALTER)
                self.state = 5099
                self.match(self.FOREIGN)
                self.state = 5100
                self.match(self.TABLE)
                self.state = 5101
                self.match(self.IF_P)
                self.state = 5102
                self.match(self.EXISTS)
                self.state = 5103 
                self.relation_expr()
                self.state = 5104
                self.match(self.RENAME)
                self.state = 5105 
                self.opt_column()
                self.state = 5106 
                self.name()
                self.state = 5107
                self.match(self.TO)
                self.state = 5108 
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 5110
                self.match(self.ALTER)
                self.state = 5111
                self.match(self.TRIGGER)
                self.state = 5112 
                self.name()
                self.state = 5113
                self.match(self.ON)
                self.state = 5114 
                self.qualified_name()
                self.state = 5115
                self.match(self.RENAME)
                self.state = 5116
                self.match(self.TO)
                self.state = 5117 
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 5119
                self.match(self.ALTER)
                self.state = 5120
                self.match(self.ROLE)
                self.state = 5121 
                self.roleId()
                self.state = 5122
                self.match(self.RENAME)
                self.state = 5123
                self.match(self.TO)
                self.state = 5124 
                self.roleId()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 5126
                self.match(self.ALTER)
                self.state = 5127
                self.match(self.USER)
                self.state = 5128 
                self.roleId()
                self.state = 5129
                self.match(self.RENAME)
                self.state = 5130
                self.match(self.TO)
                self.state = 5131 
                self.roleId()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 5133
                self.match(self.ALTER)
                self.state = 5134
                self.match(self.TABLESPACE)
                self.state = 5135 
                self.name()
                self.state = 5136
                self.match(self.RENAME)
                self.state = 5137
                self.match(self.TO)
                self.state = 5138 
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 5140
                self.match(self.ALTER)
                self.state = 5141
                self.match(self.TABLESPACE)
                self.state = 5142 
                self.name()
                self.state = 5143
                self.match(self.SET)
                self.state = 5144 
                self.reloptions()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 5146
                self.match(self.ALTER)
                self.state = 5147
                self.match(self.TABLESPACE)
                self.state = 5148 
                self.name()
                self.state = 5149
                self.match(self.RESET)
                self.state = 5150 
                self.reloptions()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 5152
                self.match(self.ALTER)
                self.state = 5153
                self.match(self.TEXT_P)
                self.state = 5154
                self.match(self.SEARCH)
                self.state = 5155
                self.match(self.PARSER)
                self.state = 5156 
                self.any_name()
                self.state = 5157
                self.match(self.RENAME)
                self.state = 5158
                self.match(self.TO)
                self.state = 5159 
                self.name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 5161
                self.match(self.ALTER)
                self.state = 5162
                self.match(self.TEXT_P)
                self.state = 5163
                self.match(self.SEARCH)
                self.state = 5164
                self.match(self.DICTIONARY)
                self.state = 5165 
                self.any_name()
                self.state = 5166
                self.match(self.RENAME)
                self.state = 5167
                self.match(self.TO)
                self.state = 5168 
                self.name()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 5170
                self.match(self.ALTER)
                self.state = 5171
                self.match(self.TEXT_P)
                self.state = 5172
                self.match(self.SEARCH)
                self.state = 5173
                self.match(self.TEMPLATE)
                self.state = 5174 
                self.any_name()
                self.state = 5175
                self.match(self.RENAME)
                self.state = 5176
                self.match(self.TO)
                self.state = 5177 
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 5179
                self.match(self.ALTER)
                self.state = 5180
                self.match(self.TEXT_P)
                self.state = 5181
                self.match(self.SEARCH)
                self.state = 5182
                self.match(self.CONFIGURATION)
                self.state = 5183 
                self.any_name()
                self.state = 5184
                self.match(self.RENAME)
                self.state = 5185
                self.match(self.TO)
                self.state = 5186 
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 5188
                self.match(self.ALTER)
                self.state = 5189
                self.match(self.TYPE_P)
                self.state = 5190 
                self.any_name()
                self.state = 5191
                self.match(self.RENAME)
                self.state = 5192
                self.match(self.TO)
                self.state = 5193 
                self.name()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 5195
                self.match(self.ALTER)
                self.state = 5196
                self.match(self.TYPE_P)
                self.state = 5197 
                self.any_name()
                self.state = 5198
                self.match(self.RENAME)
                self.state = 5199
                self.match(self.ATTRIBUTE)
                self.state = 5200 
                self.name()
                self.state = 5201
                self.match(self.TO)
                self.state = 5202 
                self.name()
                self.state = 5203 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(SqlParser.COLUMN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_column

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_column(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_column(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_column(self)
            else:
                return visitor.visitChildren(self)




    def opt_column(self):

        localctx = SqlParser.Opt_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_opt_column)
        try:
            self.state = 5209
            token = self._input.LA(1)
            if token in [self.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5207
                self.match(self.COLUMN)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_set_dataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_set_dataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_set_data

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_set_data(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_set_data(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_set_data(self)
            else:
                return visitor.visitChildren(self)




    def opt_set_data(self):

        localctx = SqlParser.Opt_set_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_opt_set_data)
        try:
            self.state = 5214
            token = self._input.LA(1)
            if token in [self.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5211
                self.match(self.SET)
                self.state = 5212
                self.match(self.DATA_P)

            elif token in [self.TYPE_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterObjectSchemaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterObjectSchemaStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterObjectSchemaStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterObjectSchemaStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterObjectSchemaStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterObjectSchemaStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterObjectSchemaStmt(self):

        localctx = SqlParser.AlterObjectSchemaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_alterObjectSchemaStmt)
        try:
            self.state = 5396
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5216
                self.match(self.ALTER)
                self.state = 5217
                self.match(self.AGGREGATE)
                self.state = 5218 
                self.func_name()
                self.state = 5219 
                self.aggr_args()
                self.state = 5220
                self.match(self.SET)
                self.state = 5221
                self.match(self.SCHEMA)
                self.state = 5222 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5224
                self.match(self.ALTER)
                self.state = 5225
                self.match(self.COLLATION)
                self.state = 5226 
                self.any_name()
                self.state = 5227
                self.match(self.SET)
                self.state = 5228
                self.match(self.SCHEMA)
                self.state = 5229 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5231
                self.match(self.ALTER)
                self.state = 5232
                self.match(self.CONVERSION_P)
                self.state = 5233 
                self.any_name()
                self.state = 5234
                self.match(self.SET)
                self.state = 5235
                self.match(self.SCHEMA)
                self.state = 5236 
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5238
                self.match(self.ALTER)
                self.state = 5239
                self.match(self.DOMAIN_P)
                self.state = 5240 
                self.any_name()
                self.state = 5241
                self.match(self.SET)
                self.state = 5242
                self.match(self.SCHEMA)
                self.state = 5243 
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5245
                self.match(self.ALTER)
                self.state = 5246
                self.match(self.EXTENSION)
                self.state = 5247 
                self.any_name()
                self.state = 5248
                self.match(self.SET)
                self.state = 5249
                self.match(self.SCHEMA)
                self.state = 5250 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5252
                self.match(self.ALTER)
                self.state = 5253
                self.match(self.FUNCTION)
                self.state = 5254 
                self.function_with_argtypes()
                self.state = 5255
                self.match(self.SET)
                self.state = 5256
                self.match(self.SCHEMA)
                self.state = 5257 
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5259
                self.match(self.ALTER)
                self.state = 5260
                self.match(self.OPERATOR)
                self.state = 5261 
                self.any_operator()
                self.state = 5262 
                self.oper_argtypes()
                self.state = 5263
                self.match(self.SET)
                self.state = 5264
                self.match(self.SCHEMA)
                self.state = 5265 
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5267
                self.match(self.ALTER)
                self.state = 5268
                self.match(self.OPERATOR)
                self.state = 5269
                self.match(self.CLASS)
                self.state = 5270 
                self.any_name()
                self.state = 5271
                self.match(self.USING)
                self.state = 5272 
                self.access_method()
                self.state = 5273
                self.match(self.SET)
                self.state = 5274
                self.match(self.SCHEMA)
                self.state = 5275 
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5277
                self.match(self.ALTER)
                self.state = 5278
                self.match(self.OPERATOR)
                self.state = 5279
                self.match(self.FAMILY)
                self.state = 5280 
                self.any_name()
                self.state = 5281
                self.match(self.USING)
                self.state = 5282 
                self.access_method()
                self.state = 5283
                self.match(self.SET)
                self.state = 5284
                self.match(self.SCHEMA)
                self.state = 5285 
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5287
                self.match(self.ALTER)
                self.state = 5288
                self.match(self.TABLE)
                self.state = 5289 
                self.relation_expr()
                self.state = 5290
                self.match(self.SET)
                self.state = 5291
                self.match(self.SCHEMA)
                self.state = 5292 
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5294
                self.match(self.ALTER)
                self.state = 5295
                self.match(self.TABLE)
                self.state = 5296
                self.match(self.IF_P)
                self.state = 5297
                self.match(self.EXISTS)
                self.state = 5298 
                self.relation_expr()
                self.state = 5299
                self.match(self.SET)
                self.state = 5300
                self.match(self.SCHEMA)
                self.state = 5301 
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5303
                self.match(self.ALTER)
                self.state = 5304
                self.match(self.TEXT_P)
                self.state = 5305
                self.match(self.SEARCH)
                self.state = 5306
                self.match(self.PARSER)
                self.state = 5307 
                self.any_name()
                self.state = 5308
                self.match(self.SET)
                self.state = 5309
                self.match(self.SCHEMA)
                self.state = 5310 
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5312
                self.match(self.ALTER)
                self.state = 5313
                self.match(self.TEXT_P)
                self.state = 5314
                self.match(self.SEARCH)
                self.state = 5315
                self.match(self.DICTIONARY)
                self.state = 5316 
                self.any_name()
                self.state = 5317
                self.match(self.SET)
                self.state = 5318
                self.match(self.SCHEMA)
                self.state = 5319 
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5321
                self.match(self.ALTER)
                self.state = 5322
                self.match(self.TEXT_P)
                self.state = 5323
                self.match(self.SEARCH)
                self.state = 5324
                self.match(self.TEMPLATE)
                self.state = 5325 
                self.any_name()
                self.state = 5326
                self.match(self.SET)
                self.state = 5327
                self.match(self.SCHEMA)
                self.state = 5328 
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5330
                self.match(self.ALTER)
                self.state = 5331
                self.match(self.TEXT_P)
                self.state = 5332
                self.match(self.SEARCH)
                self.state = 5333
                self.match(self.CONFIGURATION)
                self.state = 5334 
                self.any_name()
                self.state = 5335
                self.match(self.SET)
                self.state = 5336
                self.match(self.SCHEMA)
                self.state = 5337 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5339
                self.match(self.ALTER)
                self.state = 5340
                self.match(self.SEQUENCE)
                self.state = 5341 
                self.qualified_name()
                self.state = 5342
                self.match(self.SET)
                self.state = 5343
                self.match(self.SCHEMA)
                self.state = 5344 
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5346
                self.match(self.ALTER)
                self.state = 5347
                self.match(self.SEQUENCE)
                self.state = 5348
                self.match(self.IF_P)
                self.state = 5349
                self.match(self.EXISTS)
                self.state = 5350 
                self.qualified_name()
                self.state = 5351
                self.match(self.SET)
                self.state = 5352
                self.match(self.SCHEMA)
                self.state = 5353 
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5355
                self.match(self.ALTER)
                self.state = 5356
                self.match(self.VIEW)
                self.state = 5357 
                self.qualified_name()
                self.state = 5358
                self.match(self.SET)
                self.state = 5359
                self.match(self.SCHEMA)
                self.state = 5360 
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5362
                self.match(self.ALTER)
                self.state = 5363
                self.match(self.VIEW)
                self.state = 5364
                self.match(self.IF_P)
                self.state = 5365
                self.match(self.EXISTS)
                self.state = 5366 
                self.qualified_name()
                self.state = 5367
                self.match(self.SET)
                self.state = 5368
                self.match(self.SCHEMA)
                self.state = 5369 
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5371
                self.match(self.ALTER)
                self.state = 5372
                self.match(self.FOREIGN)
                self.state = 5373
                self.match(self.TABLE)
                self.state = 5374 
                self.relation_expr()
                self.state = 5375
                self.match(self.SET)
                self.state = 5376
                self.match(self.SCHEMA)
                self.state = 5377 
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5379
                self.match(self.ALTER)
                self.state = 5380
                self.match(self.FOREIGN)
                self.state = 5381
                self.match(self.TABLE)
                self.state = 5382
                self.match(self.IF_P)
                self.state = 5383
                self.match(self.EXISTS)
                self.state = 5384 
                self.relation_expr()
                self.state = 5385
                self.match(self.SET)
                self.state = 5386
                self.match(self.SCHEMA)
                self.state = 5387 
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5389
                self.match(self.ALTER)
                self.state = 5390
                self.match(self.TYPE_P)
                self.state = 5391 
                self.any_name()
                self.state = 5392
                self.match(self.SET)
                self.state = 5393
                self.match(self.SCHEMA)
                self.state = 5394 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterOwnerStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterOwnerStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def OBJECT_P(self):
            return self.getToken(SqlParser.OBJECT_P, 0)

        def aggr_args(self):
            return self.getTypedRuleContext(SqlParser.Aggr_argsContext,0)


        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def roleId(self):
            return self.getTypedRuleContext(SqlParser.RoleIdContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def LARGE_P(self):
            return self.getToken(SqlParser.LARGE_P, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def opt_procedural(self):
            return self.getTypedRuleContext(SqlParser.Opt_proceduralContext,0)


        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def access_method(self):
            return self.getTypedRuleContext(SqlParser.Access_methodContext,0)


        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def OWNER(self):
            return self.getToken(SqlParser.OWNER, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Function_with_argtypesContext,0)


        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def oper_argtypes(self):
            return self.getTypedRuleContext(SqlParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterOwnerStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterOwnerStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterOwnerStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterOwnerStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterOwnerStmt(self):

        localctx = SqlParser.AlterOwnerStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_alterOwnerStmt)
        try:
            self.state = 5540
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5398
                self.match(self.ALTER)
                self.state = 5399
                self.match(self.AGGREGATE)
                self.state = 5400 
                self.func_name()
                self.state = 5401 
                self.aggr_args()
                self.state = 5402
                self.match(self.OWNER)
                self.state = 5403
                self.match(self.TO)
                self.state = 5404 
                self.roleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5406
                self.match(self.ALTER)
                self.state = 5407
                self.match(self.COLLATION)
                self.state = 5408 
                self.any_name()
                self.state = 5409
                self.match(self.OWNER)
                self.state = 5410
                self.match(self.TO)
                self.state = 5411 
                self.roleId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5413
                self.match(self.ALTER)
                self.state = 5414
                self.match(self.CONVERSION_P)
                self.state = 5415 
                self.any_name()
                self.state = 5416
                self.match(self.OWNER)
                self.state = 5417
                self.match(self.TO)
                self.state = 5418 
                self.roleId()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5420
                self.match(self.ALTER)
                self.state = 5421
                self.match(self.DATABASE)
                self.state = 5422 
                self.database_name()
                self.state = 5423
                self.match(self.OWNER)
                self.state = 5424
                self.match(self.TO)
                self.state = 5425 
                self.roleId()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5427
                self.match(self.ALTER)
                self.state = 5428
                self.match(self.DOMAIN_P)
                self.state = 5429 
                self.any_name()
                self.state = 5430
                self.match(self.OWNER)
                self.state = 5431
                self.match(self.TO)
                self.state = 5432 
                self.roleId()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5434
                self.match(self.ALTER)
                self.state = 5435
                self.match(self.FUNCTION)
                self.state = 5436 
                self.function_with_argtypes()
                self.state = 5437
                self.match(self.OWNER)
                self.state = 5438
                self.match(self.TO)
                self.state = 5439 
                self.roleId()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5441
                self.match(self.ALTER)
                self.state = 5442 
                self.opt_procedural()
                self.state = 5443
                self.match(self.LANGUAGE)
                self.state = 5444 
                self.name()
                self.state = 5445
                self.match(self.OWNER)
                self.state = 5446
                self.match(self.TO)
                self.state = 5447 
                self.roleId()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5449
                self.match(self.ALTER)
                self.state = 5450
                self.match(self.LARGE_P)
                self.state = 5451
                self.match(self.OBJECT_P)
                self.state = 5452 
                self.numericOnly()
                self.state = 5453
                self.match(self.OWNER)
                self.state = 5454
                self.match(self.TO)
                self.state = 5455 
                self.roleId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5457
                self.match(self.ALTER)
                self.state = 5458
                self.match(self.OPERATOR)
                self.state = 5459 
                self.any_operator()
                self.state = 5460 
                self.oper_argtypes()
                self.state = 5461
                self.match(self.OWNER)
                self.state = 5462
                self.match(self.TO)
                self.state = 5463 
                self.roleId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5465
                self.match(self.ALTER)
                self.state = 5466
                self.match(self.OPERATOR)
                self.state = 5467
                self.match(self.CLASS)
                self.state = 5468 
                self.any_name()
                self.state = 5469
                self.match(self.USING)
                self.state = 5470 
                self.access_method()
                self.state = 5471
                self.match(self.OWNER)
                self.state = 5472
                self.match(self.TO)
                self.state = 5473 
                self.roleId()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5475
                self.match(self.ALTER)
                self.state = 5476
                self.match(self.OPERATOR)
                self.state = 5477
                self.match(self.FAMILY)
                self.state = 5478 
                self.any_name()
                self.state = 5479
                self.match(self.USING)
                self.state = 5480 
                self.access_method()
                self.state = 5481
                self.match(self.OWNER)
                self.state = 5482
                self.match(self.TO)
                self.state = 5483 
                self.roleId()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5485
                self.match(self.ALTER)
                self.state = 5486
                self.match(self.SCHEMA)
                self.state = 5487 
                self.name()
                self.state = 5488
                self.match(self.OWNER)
                self.state = 5489
                self.match(self.TO)
                self.state = 5490 
                self.roleId()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5492
                self.match(self.ALTER)
                self.state = 5493
                self.match(self.TYPE_P)
                self.state = 5494 
                self.any_name()
                self.state = 5495
                self.match(self.OWNER)
                self.state = 5496
                self.match(self.TO)
                self.state = 5497 
                self.roleId()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5499
                self.match(self.ALTER)
                self.state = 5500
                self.match(self.TABLESPACE)
                self.state = 5501 
                self.name()
                self.state = 5502
                self.match(self.OWNER)
                self.state = 5503
                self.match(self.TO)
                self.state = 5504 
                self.roleId()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5506
                self.match(self.ALTER)
                self.state = 5507
                self.match(self.TEXT_P)
                self.state = 5508
                self.match(self.SEARCH)
                self.state = 5509
                self.match(self.DICTIONARY)
                self.state = 5510 
                self.any_name()
                self.state = 5511
                self.match(self.OWNER)
                self.state = 5512
                self.match(self.TO)
                self.state = 5513 
                self.roleId()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5515
                self.match(self.ALTER)
                self.state = 5516
                self.match(self.TEXT_P)
                self.state = 5517
                self.match(self.SEARCH)
                self.state = 5518
                self.match(self.CONFIGURATION)
                self.state = 5519 
                self.any_name()
                self.state = 5520
                self.match(self.OWNER)
                self.state = 5521
                self.match(self.TO)
                self.state = 5522 
                self.roleId()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5524
                self.match(self.ALTER)
                self.state = 5525
                self.match(self.FOREIGN)
                self.state = 5526
                self.match(self.DATA_P)
                self.state = 5527
                self.match(self.WRAPPER)
                self.state = 5528 
                self.name()
                self.state = 5529
                self.match(self.OWNER)
                self.state = 5530
                self.match(self.TO)
                self.state = 5531 
                self.roleId()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5533
                self.match(self.ALTER)
                self.state = 5534
                self.match(self.SERVER)
                self.state = 5535 
                self.name()
                self.state = 5536
                self.match(self.OWNER)
                self.state = 5537
                self.match(self.TO)
                self.state = 5538 
                self.roleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RuleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(SqlParser.Where_clauseContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def opt_or_replace(self):
            return self.getTypedRuleContext(SqlParser.Opt_or_replaceContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def RULE(self):
            return self.getToken(SqlParser.RULE, 0)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def DO(self):
            return self.getToken(SqlParser.DO, 0)

        def opt_instead(self):
            return self.getTypedRuleContext(SqlParser.Opt_insteadContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def ruleActionList(self):
            return self.getTypedRuleContext(SqlParser.RuleActionListContext,0)


        def event(self):
            return self.getTypedRuleContext(SqlParser.EventContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ruleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRuleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRuleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRuleStmt(self)
            else:
                return visitor.visitChildren(self)




    def ruleStmt(self):

        localctx = SqlParser.RuleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_ruleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5542
            self.match(self.CREATE)
            self.state = 5543 
            self.opt_or_replace()
            self.state = 5544
            self.match(self.RULE)
            self.state = 5545 
            self.name()
            self.state = 5546
            self.match(self.AS)
            self.state = 5547
            self.match(self.ON)
            self.state = 5548 
            self.event()
            self.state = 5549
            self.match(self.TO)
            self.state = 5550 
            self.qualified_name()
            self.state = 5551 
            self.where_clause()
            self.state = 5552
            self.match(self.DO)
            self.state = 5553 
            self.opt_instead()
            self.state = 5554 
            self.ruleActionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RuleActionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionMulti(self):
            return self.getTypedRuleContext(SqlParser.RuleActionMultiContext,0)


        def ruleActionStmt(self):
            return self.getTypedRuleContext(SqlParser.RuleActionStmtContext,0)


        def NOTHING(self):
            return self.getToken(SqlParser.NOTHING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_ruleActionList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRuleActionList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRuleActionList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRuleActionList(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionList(self):

        localctx = SqlParser.RuleActionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_ruleActionList)
        try:
            self.state = 5562
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5556
                self.match(self.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5557 
                self.ruleActionStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5558
                self.match(self.T__6)
                self.state = 5559 
                self.ruleActionMulti(0)
                self.state = 5560
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionMultiContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RuleActionMultiContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionMulti(self):
            return self.getTypedRuleContext(SqlParser.RuleActionMultiContext,0)


        def ruleActionStmtOrEmpty(self):
            return self.getTypedRuleContext(SqlParser.RuleActionStmtOrEmptyContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ruleActionMulti

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRuleActionMulti(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRuleActionMulti(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRuleActionMulti(self)
            else:
                return visitor.visitChildren(self)



    def ruleActionMulti(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.RuleActionMultiContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 610
        self.enterRecursionRule(localctx, 610, self.RULE_ruleActionMulti, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5565 
            self.ruleActionStmtOrEmpty()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.RuleActionMultiContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ruleActionMulti)
                    self.state = 5567
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 5568
                    self.match(self.T__2)
                    self.state = 5569 
                    self.ruleActionStmtOrEmpty() 
                self.state = 5574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RuleActionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RuleActionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def notifyStmt(self):
            return self.getTypedRuleContext(SqlParser.NotifyStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(SqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(SqlParser.InsertStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(SqlParser.DeleteStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ruleActionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRuleActionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRuleActionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRuleActionStmt(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionStmt(self):

        localctx = SqlParser.RuleActionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_ruleActionStmt)
        try:
            self.state = 5580
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5575 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5576 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5577 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5578 
                self.deleteStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5579 
                self.notifyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleActionStmtOrEmptyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RuleActionStmtOrEmptyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleActionStmt(self):
            return self.getTypedRuleContext(SqlParser.RuleActionStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ruleActionStmtOrEmpty

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRuleActionStmtOrEmpty(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRuleActionStmtOrEmpty(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRuleActionStmtOrEmpty(self)
            else:
                return visitor.visitChildren(self)




    def ruleActionStmtOrEmpty(self):

        localctx = SqlParser.RuleActionStmtOrEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_ruleActionStmtOrEmpty)
        try:
            self.state = 5584
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5582 
                self.ruleActionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.EventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def INSERT(self):
            return self.getToken(SqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def SELECT(self):
            return self.getToken(SqlParser.SELECT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_event

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterEvent(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitEvent(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitEvent(self)
            else:
                return visitor.visitChildren(self)




    def event(self):

        localctx = SqlParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_event)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5586
            _la = self._input.LA(1)
            if not(_la==SqlParser.DELETE_P or _la==SqlParser.INSERT or _la==SqlParser.SELECT or _la==SqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_insteadContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_insteadContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(SqlParser.ALSO, 0)

        def INSTEAD(self):
            return self.getToken(SqlParser.INSTEAD, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_instead

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_instead(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_instead(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_instead(self)
            else:
                return visitor.visitChildren(self)




    def opt_instead(self):

        localctx = SqlParser.Opt_insteadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_opt_instead)
        try:
            self.state = 5591
            token = self._input.LA(1)
            if token in [self.INSTEAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5588
                self.match(self.INSTEAD)

            elif token in [self.ALSO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5589
                self.match(self.ALSO)

            elif token in [self.T__6, self.DELETE_P, self.INSERT, self.NOTHING, self.NOTIFY, self.SELECT, self.TABLE, self.UPDATE, self.VALUES, self.WITH]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropruleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropruleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def RULE(self):
            return self.getToken(SqlParser.RULE, 0)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_dropruleStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropruleStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropruleStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropruleStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropruleStmt(self):

        localctx = SqlParser.DropruleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_dropruleStmt)
        try:
            self.state = 5609
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5593
                self.match(self.DROP)
                self.state = 5594
                self.match(self.RULE)
                self.state = 5595 
                self.name()
                self.state = 5596
                self.match(self.ON)
                self.state = 5597 
                self.any_name()
                self.state = 5598 
                self.opt_drop_behavior()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5600
                self.match(self.DROP)
                self.state = 5601
                self.match(self.RULE)
                self.state = 5602
                self.match(self.IF_P)
                self.state = 5603
                self.match(self.EXISTS)
                self.state = 5604 
                self.name()
                self.state = 5605
                self.match(self.ON)
                self.state = 5606 
                self.any_name()
                self.state = 5607 
                self.opt_drop_behavior()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotifyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.NotifyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def NOTIFY(self):
            return self.getToken(SqlParser.NOTIFY, 0)

        def notify_payload(self):
            return self.getTypedRuleContext(SqlParser.Notify_payloadContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_notifyStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterNotifyStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitNotifyStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitNotifyStmt(self)
            else:
                return visitor.visitChildren(self)




    def notifyStmt(self):

        localctx = SqlParser.NotifyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_notifyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5611
            self.match(self.NOTIFY)
            self.state = 5612 
            self.colId()
            self.state = 5613 
            self.notify_payload()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notify_payloadContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Notify_payloadContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_notify_payload

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterNotify_payload(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitNotify_payload(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitNotify_payload(self)
            else:
                return visitor.visitChildren(self)




    def notify_payload(self):

        localctx = SqlParser.Notify_payloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_notify_payload)
        try:
            self.state = 5618
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5615
                self.match(self.T__11)
                self.state = 5616 
                self.sConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ListenStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def LISTEN(self):
            return self.getToken(SqlParser.LISTEN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_listenStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterListenStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitListenStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitListenStmt(self)
            else:
                return visitor.visitChildren(self)




    def listenStmt(self):

        localctx = SqlParser.ListenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_listenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5620
            self.match(self.LISTEN)
            self.state = 5621 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnlistenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.UnlistenStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def UNLISTEN(self):
            return self.getToken(SqlParser.UNLISTEN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_unlistenStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterUnlistenStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitUnlistenStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitUnlistenStmt(self)
            else:
                return visitor.visitChildren(self)




    def unlistenStmt(self):

        localctx = SqlParser.UnlistenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_unlistenStmt)
        try:
            self.state = 5627
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5623
                self.match(self.UNLISTEN)
                self.state = 5624 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5625
                self.match(self.UNLISTEN)
                self.state = 5626
                self.match(self.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TransactionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_transaction(self):
            return self.getTypedRuleContext(SqlParser.Opt_transactionContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def ABORT_P(self):
            return self.getToken(SqlParser.ABORT_P, 0)

        def PREPARED(self):
            return self.getToken(SqlParser.PREPARED, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def PREPARE(self):
            return self.getToken(SqlParser.PREPARE, 0)

        def BEGIN_P(self):
            return self.getToken(SqlParser.BEGIN_P, 0)

        def START(self):
            return self.getToken(SqlParser.START, 0)

        def RELEASE(self):
            return self.getToken(SqlParser.RELEASE, 0)

        def transaction_mode_list_or_empty(self):
            return self.getTypedRuleContext(SqlParser.Transaction_mode_list_or_emptyContext,0)


        def COMMIT(self):
            return self.getToken(SqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlParser.ROLLBACK, 0)

        def SAVEPOINT(self):
            return self.getToken(SqlParser.SAVEPOINT, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def END_P(self):
            return self.getToken(SqlParser.END_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_transactionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTransactionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTransactionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTransactionStmt(self)
            else:
                return visitor.visitChildren(self)




    def transactionStmt(self):

        localctx = SqlParser.TransactionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_transactionStmt)
        try:
            self.state = 5671
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5629
                self.match(self.ABORT_P)
                self.state = 5630 
                self.opt_transaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5631
                self.match(self.BEGIN_P)
                self.state = 5632 
                self.opt_transaction()
                self.state = 5633 
                self.transaction_mode_list_or_empty()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5635
                self.match(self.START)
                self.state = 5636
                self.match(self.TRANSACTION)
                self.state = 5637 
                self.transaction_mode_list_or_empty()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5638
                self.match(self.COMMIT)
                self.state = 5639 
                self.opt_transaction()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5640
                self.match(self.END_P)
                self.state = 5641 
                self.opt_transaction()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5642
                self.match(self.ROLLBACK)
                self.state = 5643 
                self.opt_transaction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5644
                self.match(self.SAVEPOINT)
                self.state = 5645 
                self.colId()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5646
                self.match(self.RELEASE)
                self.state = 5647
                self.match(self.SAVEPOINT)
                self.state = 5648 
                self.colId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5649
                self.match(self.RELEASE)
                self.state = 5650 
                self.colId()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5651
                self.match(self.ROLLBACK)
                self.state = 5652 
                self.opt_transaction()
                self.state = 5653
                self.match(self.TO)
                self.state = 5654
                self.match(self.SAVEPOINT)
                self.state = 5655 
                self.colId()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5657
                self.match(self.ROLLBACK)
                self.state = 5658 
                self.opt_transaction()
                self.state = 5659
                self.match(self.TO)
                self.state = 5660 
                self.colId()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5662
                self.match(self.PREPARE)
                self.state = 5663
                self.match(self.TRANSACTION)
                self.state = 5664 
                self.sConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5665
                self.match(self.COMMIT)
                self.state = 5666
                self.match(self.PREPARED)
                self.state = 5667 
                self.sConst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5668
                self.match(self.ROLLBACK)
                self.state = 5669
                self.match(self.PREPARED)
                self.state = 5670 
                self.sConst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_transactionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_transactionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def WORK(self):
            return self.getToken(SqlParser.WORK, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_transaction

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_transaction(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_transaction(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_transaction(self)
            else:
                return visitor.visitChildren(self)




    def opt_transaction(self):

        localctx = SqlParser.Opt_transactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_opt_transaction)
        try:
            self.state = 5676
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5673
                self.match(self.WORK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5674
                self.match(self.TRANSACTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_mode_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Transaction_mode_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iso_level(self):
            return self.getTypedRuleContext(SqlParser.Iso_levelContext,0)


        def LEVEL(self):
            return self.getToken(SqlParser.LEVEL, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlParser.DEFERRABLE, 0)

        def READ(self):
            return self.getToken(SqlParser.READ, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def ONLY(self):
            return self.getToken(SqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(SqlParser.WRITE, 0)

        def ISOLATION(self):
            return self.getToken(SqlParser.ISOLATION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_transaction_mode_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTransaction_mode_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTransaction_mode_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTransaction_mode_item(self)
            else:
                return visitor.visitChildren(self)




    def transaction_mode_item(self):

        localctx = SqlParser.Transaction_mode_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_transaction_mode_item)
        try:
            self.state = 5688
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5678
                self.match(self.ISOLATION)
                self.state = 5679
                self.match(self.LEVEL)
                self.state = 5680 
                self.iso_level()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5681
                self.match(self.READ)
                self.state = 5682
                self.match(self.ONLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5683
                self.match(self.READ)
                self.state = 5684
                self.match(self.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5685
                self.match(self.DEFERRABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5686
                self.match(self.NOT)
                self.state = 5687
                self.match(self.DEFERRABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_mode_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Transaction_mode_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(SqlParser.Transaction_mode_listContext,0)


        def transaction_mode_item(self):
            return self.getTypedRuleContext(SqlParser.Transaction_mode_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_transaction_mode_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTransaction_mode_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTransaction_mode_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTransaction_mode_list(self)
            else:
                return visitor.visitChildren(self)



    def transaction_mode_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Transaction_mode_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 636
        self.enterRecursionRule(localctx, 636, self.RULE_transaction_mode_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5691 
            self.transaction_mode_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5698
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.Transaction_mode_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_transaction_mode_list)
                        self.state = 5693
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5694
                        self.match(self.T__11)
                        self.state = 5695 
                        self.transaction_mode_item()
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.Transaction_mode_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_transaction_mode_list)
                        self.state = 5696
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5697 
                        self.transaction_mode_item()
                        pass

             
                self.state = 5702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Transaction_mode_list_or_emptyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Transaction_mode_list_or_emptyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(SqlParser.Transaction_mode_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_transaction_mode_list_or_empty

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTransaction_mode_list_or_empty(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTransaction_mode_list_or_empty(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTransaction_mode_list_or_empty(self)
            else:
                return visitor.visitChildren(self)




    def transaction_mode_list_or_empty(self):

        localctx = SqlParser.Transaction_mode_list_or_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_transaction_mode_list_or_empty)
        try:
            self.state = 5705
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5703 
                self.transaction_mode_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ViewStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ViewStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def opt_check_option(self):
            return self.getTypedRuleContext(SqlParser.Opt_check_optionContext,0)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def OR(self):
            return self.getToken(SqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlParser.REPLACE, 0)

        def opt_column_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_column_listContext,0)


        def opt_reloptions(self):
            return self.getTypedRuleContext(SqlParser.Opt_reloptionsContext,0)


        def optTemp(self):
            return self.getTypedRuleContext(SqlParser.OptTempContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_viewStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterViewStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitViewStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitViewStmt(self)
            else:
                return visitor.visitChildren(self)




    def viewStmt(self):

        localctx = SqlParser.ViewStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_viewStmt)
        try:
            self.state = 5729
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5707
                self.match(self.CREATE)
                self.state = 5708 
                self.optTemp()
                self.state = 5709
                self.match(self.VIEW)
                self.state = 5710 
                self.qualified_name()
                self.state = 5711 
                self.opt_column_list()
                self.state = 5712 
                self.opt_reloptions()
                self.state = 5713
                self.match(self.AS)
                self.state = 5714 
                self.selectStmt()
                self.state = 5715 
                self.opt_check_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5717
                self.match(self.CREATE)
                self.state = 5718
                self.match(self.OR)
                self.state = 5719
                self.match(self.REPLACE)
                self.state = 5720 
                self.optTemp()
                self.state = 5721
                self.match(self.VIEW)
                self.state = 5722 
                self.qualified_name()
                self.state = 5723 
                self.opt_column_list()
                self.state = 5724 
                self.opt_reloptions()
                self.state = 5725
                self.match(self.AS)
                self.state = 5726 
                self.selectStmt()
                self.state = 5727 
                self.opt_check_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_check_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_check_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SqlParser.CHECK, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def CASCADED(self):
            return self.getToken(SqlParser.CASCADED, 0)

        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_check_option

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_check_option(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_check_option(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_check_option(self)
            else:
                return visitor.visitChildren(self)




    def opt_check_option(self):

        localctx = SqlParser.Opt_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_opt_check_option)
        try:
            self.state = 5743
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5731
                self.match(self.WITH)
                self.state = 5732
                self.match(self.CHECK)
                self.state = 5733
                self.match(self.OPTION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5734
                self.match(self.WITH)
                self.state = 5735
                self.match(self.CASCADED)
                self.state = 5736
                self.match(self.CHECK)
                self.state = 5737
                self.match(self.OPTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5738
                self.match(self.WITH)
                self.state = 5739
                self.match(self.LOCAL)
                self.state = 5740
                self.match(self.CHECK)
                self.state = 5741
                self.match(self.OPTION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.LoadStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def file_name(self):
            return self.getTypedRuleContext(SqlParser.File_nameContext,0)


        def LOAD(self):
            return self.getToken(SqlParser.LOAD, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_loadStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitLoadStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitLoadStmt(self)
            else:
                return visitor.visitChildren(self)




    def loadStmt(self):

        localctx = SqlParser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5745
            self.match(self.LOAD)
            self.state = 5746 
            self.file_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedbStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreatedbStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Createdb_opt_listContext,0)


        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createdbStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatedbStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatedbStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatedbStmt(self)
            else:
                return visitor.visitChildren(self)




    def createdbStmt(self):

        localctx = SqlParser.CreatedbStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_createdbStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5748
            self.match(self.CREATE)
            self.state = 5749
            self.match(self.DATABASE)
            self.state = 5750 
            self.database_name()
            self.state = 5752
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 5751
                self.match(self.WITH)


            self.state = 5754 
            self.createdb_opt_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Createdb_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Createdb_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Createdb_opt_listContext,0)


        def createdb_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Createdb_opt_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createdb_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatedb_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatedb_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatedb_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def createdb_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Createdb_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 648
        self.enterRecursionRule(localctx, 648, self.RULE_createdb_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Createdb_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_createdb_opt_list)
                    self.state = 5757
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 5758 
                    self.createdb_opt_item() 
                self.state = 5763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Createdb_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Createdb_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SqlParser.LIMIT, 0)

        def opt_equal(self):
            return self.getTypedRuleContext(SqlParser.Opt_equalContext,0)


        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def LOCATION(self):
            return self.getToken(SqlParser.LOCATION, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def OWNER(self):
            return self.getToken(SqlParser.OWNER, 0)

        def ENCODING(self):
            return self.getToken(SqlParser.ENCODING, 0)

        def LC_CTYPE_P(self):
            return self.getToken(SqlParser.LC_CTYPE_P, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def LC_COLLATE_P(self):
            return self.getToken(SqlParser.LC_COLLATE_P, 0)

        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def CONNECTION(self):
            return self.getToken(SqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_createdb_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreatedb_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreatedb_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreatedb_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def createdb_opt_item(self):

        localctx = SqlParser.Createdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_createdb_opt_item)
        try:
            self.state = 5829
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5764
                self.match(self.TABLESPACE)
                self.state = 5765 
                self.opt_equal()
                self.state = 5766 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5768
                self.match(self.TABLESPACE)
                self.state = 5769 
                self.opt_equal()
                self.state = 5770
                self.match(self.DEFAULT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5772
                self.match(self.LOCATION)
                self.state = 5773 
                self.opt_equal()
                self.state = 5774 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5776
                self.match(self.LOCATION)
                self.state = 5777 
                self.opt_equal()
                self.state = 5778
                self.match(self.DEFAULT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5780
                self.match(self.TEMPLATE)
                self.state = 5781 
                self.opt_equal()
                self.state = 5782 
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5784
                self.match(self.TEMPLATE)
                self.state = 5785 
                self.opt_equal()
                self.state = 5786
                self.match(self.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5788
                self.match(self.ENCODING)
                self.state = 5789 
                self.opt_equal()
                self.state = 5790 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5792
                self.match(self.ENCODING)
                self.state = 5793 
                self.opt_equal()
                self.state = 5794 
                self.iConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5796
                self.match(self.ENCODING)
                self.state = 5797 
                self.opt_equal()
                self.state = 5798
                self.match(self.DEFAULT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5800
                self.match(self.LC_COLLATE_P)
                self.state = 5801 
                self.opt_equal()
                self.state = 5802 
                self.sConst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5804
                self.match(self.LC_COLLATE_P)
                self.state = 5805 
                self.opt_equal()
                self.state = 5806
                self.match(self.DEFAULT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5808
                self.match(self.LC_CTYPE_P)
                self.state = 5809 
                self.opt_equal()
                self.state = 5810 
                self.sConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5812
                self.match(self.LC_CTYPE_P)
                self.state = 5813 
                self.opt_equal()
                self.state = 5814
                self.match(self.DEFAULT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5816
                self.match(self.CONNECTION)
                self.state = 5817
                self.match(self.LIMIT)
                self.state = 5818 
                self.opt_equal()
                self.state = 5819 
                self.signedIconst()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5821
                self.match(self.OWNER)
                self.state = 5822 
                self.opt_equal()
                self.state = 5823 
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5825
                self.match(self.OWNER)
                self.state = 5826 
                self.opt_equal()
                self.state = 5827
                self.match(self.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_equalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_equalContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlParser.RULE_opt_equal

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_equal(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_equal(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_equal(self)
            else:
                return visitor.visitChildren(self)




    def opt_equal(self):

        localctx = SqlParser.Opt_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_opt_equal)
        try:
            self.state = 5833
            token = self._input.LA(1)
            if token in [self.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5831
                self.match(self.T__3)

            elif token in [self.T__10, self.T__8, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULT, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterDatabaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def alterdb_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alterdb_opt_listContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterDatabaseStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterDatabaseStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterDatabaseStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseStmt(self):

        localctx = SqlParser.AlterDatabaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_alterDatabaseStmt)
        try:
            self.state = 5850
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5835
                self.match(self.ALTER)
                self.state = 5836
                self.match(self.DATABASE)
                self.state = 5837 
                self.database_name()
                self.state = 5839
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 5838
                    self.match(self.WITH)


                self.state = 5841 
                self.alterdb_opt_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5843
                self.match(self.ALTER)
                self.state = 5844
                self.match(self.DATABASE)
                self.state = 5845 
                self.database_name()
                self.state = 5846
                self.match(self.SET)
                self.state = 5847
                self.match(self.TABLESPACE)
                self.state = 5848 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseSetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterDatabaseSetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def setResetClause(self):
            return self.getTypedRuleContext(SqlParser.SetResetClauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterDatabaseSetStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterDatabaseSetStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterDatabaseSetStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterDatabaseSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseSetStmt(self):

        localctx = SqlParser.AlterDatabaseSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_alterDatabaseSetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5852
            self.match(self.ALTER)
            self.state = 5853
            self.match(self.DATABASE)
            self.state = 5854 
            self.database_name()
            self.state = 5855 
            self.setResetClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alterdb_opt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alterdb_opt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alterdb_opt_item(self):
            return self.getTypedRuleContext(SqlParser.Alterdb_opt_itemContext,0)


        def alterdb_opt_list(self):
            return self.getTypedRuleContext(SqlParser.Alterdb_opt_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterdb_opt_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterdb_opt_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterdb_opt_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterdb_opt_list(self)
            else:
                return visitor.visitChildren(self)



    def alterdb_opt_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Alterdb_opt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 658
        self.enterRecursionRule(localctx, 658, self.RULE_alterdb_opt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Alterdb_opt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_alterdb_opt_list)
                    self.state = 5858
                    if not self.precpred(self._ctx, 2):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 5859 
                    self.alterdb_opt_item() 
                self.state = 5864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Alterdb_opt_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alterdb_opt_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SqlParser.LIMIT, 0)

        def opt_equal(self):
            return self.getTypedRuleContext(SqlParser.Opt_equalContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def CONNECTION(self):
            return self.getToken(SqlParser.CONNECTION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterdb_opt_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterdb_opt_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterdb_opt_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterdb_opt_item(self)
            else:
                return visitor.visitChildren(self)




    def alterdb_opt_item(self):

        localctx = SqlParser.Alterdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_alterdb_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5865
            self.match(self.CONNECTION)
            self.state = 5866
            self.match(self.LIMIT)
            self.state = 5867 
            self.opt_equal()
            self.state = 5868 
            self.signedIconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropdbStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DropdbStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_dropdbStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDropdbStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDropdbStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDropdbStmt(self)
            else:
                return visitor.visitChildren(self)




    def dropdbStmt(self):

        localctx = SqlParser.DropdbStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_dropdbStmt)
        try:
            self.state = 5878
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5870
                self.match(self.DROP)
                self.state = 5871
                self.match(self.DATABASE)
                self.state = 5872 
                self.database_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5873
                self.match(self.DROP)
                self.state = 5874
                self.match(self.DATABASE)
                self.state = 5875
                self.match(self.IF_P)
                self.state = 5876
                self.match(self.EXISTS)
                self.state = 5877 
                self.database_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDomainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateDomainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def opt_as(self):
            return self.getTypedRuleContext(SqlParser.Opt_asContext,0)


        def colQualList(self):
            return self.getTypedRuleContext(SqlParser.ColQualListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_createDomainStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateDomainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateDomainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateDomainStmt(self)
            else:
                return visitor.visitChildren(self)




    def createDomainStmt(self):

        localctx = SqlParser.CreateDomainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_createDomainStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5880
            self.match(self.CREATE)
            self.state = 5881
            self.match(self.DOMAIN_P)
            self.state = 5882 
            self.any_name()
            self.state = 5883 
            self.opt_as()
            self.state = 5884 
            self.typename()
            self.state = 5885 
            self.colQualList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDomainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterDomainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def VALIDATE(self):
            return self.getToken(SqlParser.VALIDATE, 0)

        def tableConstraint(self):
            return self.getTypedRuleContext(SqlParser.TableConstraintContext,0)


        def alter_column_default(self):
            return self.getTypedRuleContext(SqlParser.Alter_column_defaultContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def opt_drop_behavior(self):
            return self.getTypedRuleContext(SqlParser.Opt_drop_behaviorContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alterDomainStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterDomainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterDomainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterDomainStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterDomainStmt(self):

        localctx = SqlParser.AlterDomainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_alterDomainStmt)
        try:
            self.state = 5937
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5887
                self.match(self.ALTER)
                self.state = 5888
                self.match(self.DOMAIN_P)
                self.state = 5889 
                self.any_name()
                self.state = 5890 
                self.alter_column_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5892
                self.match(self.ALTER)
                self.state = 5893
                self.match(self.DOMAIN_P)
                self.state = 5894 
                self.any_name()
                self.state = 5895
                self.match(self.DROP)
                self.state = 5896
                self.match(self.NOT)
                self.state = 5897
                self.match(self.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5899
                self.match(self.ALTER)
                self.state = 5900
                self.match(self.DOMAIN_P)
                self.state = 5901 
                self.any_name()
                self.state = 5902
                self.match(self.SET)
                self.state = 5903
                self.match(self.NOT)
                self.state = 5904
                self.match(self.NULL_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5906
                self.match(self.ALTER)
                self.state = 5907
                self.match(self.DOMAIN_P)
                self.state = 5908 
                self.any_name()
                self.state = 5909
                self.match(self.ADD_P)
                self.state = 5910 
                self.tableConstraint()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5912
                self.match(self.ALTER)
                self.state = 5913
                self.match(self.DOMAIN_P)
                self.state = 5914 
                self.any_name()
                self.state = 5915
                self.match(self.DROP)
                self.state = 5916
                self.match(self.CONSTRAINT)
                self.state = 5917 
                self.name()
                self.state = 5918 
                self.opt_drop_behavior()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5920
                self.match(self.ALTER)
                self.state = 5921
                self.match(self.DOMAIN_P)
                self.state = 5922 
                self.any_name()
                self.state = 5923
                self.match(self.DROP)
                self.state = 5924
                self.match(self.CONSTRAINT)
                self.state = 5925
                self.match(self.IF_P)
                self.state = 5926
                self.match(self.EXISTS)
                self.state = 5927 
                self.name()
                self.state = 5928 
                self.opt_drop_behavior()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5930
                self.match(self.ALTER)
                self.state = 5931
                self.match(self.DOMAIN_P)
                self.state = 5932 
                self.any_name()
                self.state = 5933
                self.match(self.VALIDATE)
                self.state = 5934
                self.match(self.CONSTRAINT)
                self.state = 5935 
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_asContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_asContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_as

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_as(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_as(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_as(self)
            else:
                return visitor.visitChildren(self)




    def opt_as(self):

        localctx = SqlParser.Opt_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_opt_as)
        try:
            self.state = 5941
            token = self._input.LA(1)
            if token in [self.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5939
                self.match(self.AS)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_SCHEMA, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUTER_P, self.OVER, self.OVERLAPS, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.PRECEDING, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TRIGGER, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTSDictionaryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterTSDictionaryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def definition(self):
            return self.getTypedRuleContext(SqlParser.DefinitionContext,0)


        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterTSDictionaryStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterTSDictionaryStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterTSDictionaryStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterTSDictionaryStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTSDictionaryStmt(self):

        localctx = SqlParser.AlterTSDictionaryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_alterTSDictionaryStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5943
            self.match(self.ALTER)
            self.state = 5944
            self.match(self.TEXT_P)
            self.state = 5945
            self.match(self.SEARCH)
            self.state = 5946
            self.match(self.DICTIONARY)
            self.state = 5947 
            self.any_name()
            self.state = 5948 
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTSConfigurationStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AlterTSConfigurationStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def ALTER(self, i=None):
            if i is None:
                return self.getTokens(SqlParser.ALTER)
            else:
                return self.getToken(SqlParser.ALTER, i)

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Any_nameContext,i)


        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def MAPPING(self):
            return self.getToken(SqlParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def REPLACE(self):
            return self.getToken(SqlParser.REPLACE, 0)

        def any_name_list(self):
            return self.getTypedRuleContext(SqlParser.Any_name_listContext,0)


        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alterTSConfigurationStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlterTSConfigurationStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlterTSConfigurationStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlterTSConfigurationStmt(self)
            else:
                return visitor.visitChildren(self)




    def alterTSConfigurationStmt(self):

        localctx = SqlParser.AlterTSConfigurationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_alterTSConfigurationStmt)
        try:
            self.state = 6022
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5950
                self.match(self.ALTER)
                self.state = 5951
                self.match(self.TEXT_P)
                self.state = 5952
                self.match(self.SEARCH)
                self.state = 5953
                self.match(self.CONFIGURATION)
                self.state = 5954 
                self.any_name()
                self.state = 5955
                self.match(self.ADD_P)
                self.state = 5956
                self.match(self.MAPPING)
                self.state = 5957
                self.match(self.FOR)
                self.state = 5958 
                self.name_list(0)
                self.state = 5959
                self.match(self.WITH)
                self.state = 5960 
                self.any_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5962
                self.match(self.ALTER)
                self.state = 5963
                self.match(self.TEXT_P)
                self.state = 5964
                self.match(self.SEARCH)
                self.state = 5965
                self.match(self.CONFIGURATION)
                self.state = 5966 
                self.any_name()
                self.state = 5967
                self.match(self.ALTER)
                self.state = 5968
                self.match(self.MAPPING)
                self.state = 5969
                self.match(self.FOR)
                self.state = 5970 
                self.name_list(0)
                self.state = 5971
                self.match(self.WITH)
                self.state = 5972 
                self.any_name_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5974
                self.match(self.ALTER)
                self.state = 5975
                self.match(self.TEXT_P)
                self.state = 5976
                self.match(self.SEARCH)
                self.state = 5977
                self.match(self.CONFIGURATION)
                self.state = 5978 
                self.any_name()
                self.state = 5979
                self.match(self.ALTER)
                self.state = 5980
                self.match(self.MAPPING)
                self.state = 5981
                self.match(self.REPLACE)
                self.state = 5982 
                self.any_name()
                self.state = 5983
                self.match(self.WITH)
                self.state = 5984 
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5986
                self.match(self.ALTER)
                self.state = 5987
                self.match(self.TEXT_P)
                self.state = 5988
                self.match(self.SEARCH)
                self.state = 5989
                self.match(self.CONFIGURATION)
                self.state = 5990 
                self.any_name()
                self.state = 5991
                self.match(self.ALTER)
                self.state = 5992
                self.match(self.MAPPING)
                self.state = 5993
                self.match(self.FOR)
                self.state = 5994 
                self.name_list(0)
                self.state = 5995
                self.match(self.REPLACE)
                self.state = 5996 
                self.any_name()
                self.state = 5997
                self.match(self.WITH)
                self.state = 5998 
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6000
                self.match(self.ALTER)
                self.state = 6001
                self.match(self.TEXT_P)
                self.state = 6002
                self.match(self.SEARCH)
                self.state = 6003
                self.match(self.CONFIGURATION)
                self.state = 6004 
                self.any_name()
                self.state = 6005
                self.match(self.DROP)
                self.state = 6006
                self.match(self.MAPPING)
                self.state = 6007
                self.match(self.FOR)
                self.state = 6008 
                self.name_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6010
                self.match(self.ALTER)
                self.state = 6011
                self.match(self.TEXT_P)
                self.state = 6012
                self.match(self.SEARCH)
                self.state = 6013
                self.match(self.CONFIGURATION)
                self.state = 6014 
                self.any_name()
                self.state = 6015
                self.match(self.DROP)
                self.state = 6016
                self.match(self.MAPPING)
                self.state = 6017
                self.match(self.IF_P)
                self.state = 6018
                self.match(self.EXISTS)
                self.state = 6019
                self.match(self.FOR)
                self.state = 6020 
                self.name_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateConversionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CreateConversionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Any_nameContext,i)


        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def opt_default(self):
            return self.getTypedRuleContext(SqlParser.Opt_defaultContext,0)


        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def sConst(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.SConstContext)
            else:
                return self.getTypedRuleContext(SqlParser.SConstContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_createConversionStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCreateConversionStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCreateConversionStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCreateConversionStmt(self)
            else:
                return visitor.visitChildren(self)




    def createConversionStmt(self):

        localctx = SqlParser.CreateConversionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_createConversionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6024
            self.match(self.CREATE)
            self.state = 6025 
            self.opt_default()
            self.state = 6026
            self.match(self.CONVERSION_P)
            self.state = 6027 
            self.any_name()
            self.state = 6028
            self.match(self.FOR)
            self.state = 6029 
            self.sConst()
            self.state = 6030
            self.match(self.TO)
            self.state = 6031 
            self.sConst()
            self.state = 6032
            self.match(self.FROM)
            self.state = 6033 
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusterStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ClusterStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def cluster_index_specification(self):
            return self.getTypedRuleContext(SqlParser.Cluster_index_specificationContext,0)


        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(SqlParser.Opt_verboseContext,0)


        def CLUSTER(self):
            return self.getToken(SqlParser.CLUSTER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_clusterStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterClusterStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitClusterStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitClusterStmt(self)
            else:
                return visitor.visitChildren(self)




    def clusterStmt(self):

        localctx = SqlParser.ClusterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_clusterStmt)
        try:
            self.state = 6048
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6035
                self.match(self.CLUSTER)
                self.state = 6036 
                self.opt_verbose()
                self.state = 6037 
                self.qualified_name()
                self.state = 6038 
                self.cluster_index_specification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6040
                self.match(self.CLUSTER)
                self.state = 6041 
                self.opt_verbose()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6042
                self.match(self.CLUSTER)
                self.state = 6043 
                self.opt_verbose()
                self.state = 6044 
                self.index_name()
                self.state = 6045
                self.match(self.ON)
                self.state = 6046 
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cluster_index_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Cluster_index_specificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_cluster_index_specification

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCluster_index_specification(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCluster_index_specification(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCluster_index_specification(self)
            else:
                return visitor.visitChildren(self)




    def cluster_index_specification(self):

        localctx = SqlParser.Cluster_index_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_cluster_index_specification)
        try:
            self.state = 6053
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6050
                self.match(self.USING)
                self.state = 6051 
                self.index_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VacuumStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.VacuumStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def opt_name_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_name_listContext,0)


        def opt_full(self):
            return self.getTypedRuleContext(SqlParser.Opt_fullContext,0)


        def opt_freeze(self):
            return self.getTypedRuleContext(SqlParser.Opt_freezeContext,0)


        def vacuum_option_list(self):
            return self.getTypedRuleContext(SqlParser.Vacuum_option_listContext,0)


        def analyzeStmt(self):
            return self.getTypedRuleContext(SqlParser.AnalyzeStmtContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(SqlParser.Opt_verboseContext,0)


        def VACUUM(self):
            return self.getToken(SqlParser.VACUUM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_vacuumStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVacuumStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVacuumStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVacuumStmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuumStmt(self):

        localctx = SqlParser.VacuumStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_vacuumStmt)
        try:
            self.state = 6084
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6055
                self.match(self.VACUUM)
                self.state = 6056 
                self.opt_full()
                self.state = 6057 
                self.opt_freeze()
                self.state = 6058 
                self.opt_verbose()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6060
                self.match(self.VACUUM)
                self.state = 6061 
                self.opt_full()
                self.state = 6062 
                self.opt_freeze()
                self.state = 6063 
                self.opt_verbose()
                self.state = 6064 
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6066
                self.match(self.VACUUM)
                self.state = 6067 
                self.opt_full()
                self.state = 6068 
                self.opt_freeze()
                self.state = 6069 
                self.opt_verbose()
                self.state = 6070 
                self.analyzeStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6072
                self.match(self.VACUUM)
                self.state = 6073
                self.match(self.T__6)
                self.state = 6074 
                self.vacuum_option_list(0)
                self.state = 6075
                self.match(self.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6077
                self.match(self.VACUUM)
                self.state = 6078
                self.match(self.T__6)
                self.state = 6079 
                self.vacuum_option_list(0)
                self.state = 6080
                self.match(self.T__13)
                self.state = 6081 
                self.qualified_name()
                self.state = 6082 
                self.opt_name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Vacuum_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def vacuum_option_elem(self):
            return self.getTypedRuleContext(SqlParser.Vacuum_option_elemContext,0)


        def vacuum_option_list(self):
            return self.getTypedRuleContext(SqlParser.Vacuum_option_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_vacuum_option_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVacuum_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVacuum_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVacuum_option_list(self)
            else:
                return visitor.visitChildren(self)



    def vacuum_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Vacuum_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 682
        self.enterRecursionRule(localctx, 682, self.RULE_vacuum_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6087 
            self.vacuum_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Vacuum_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_vacuum_option_list)
                    self.state = 6089
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6090
                    self.match(self.T__11)
                    self.state = 6091 
                    self.vacuum_option_elem() 
                self.state = 6096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Vacuum_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Vacuum_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(SqlParser.Analyze_keywordContext,0)


        def FULL(self):
            return self.getToken(SqlParser.FULL, 0)

        def VERBOSE(self):
            return self.getToken(SqlParser.VERBOSE, 0)

        def FREEZE(self):
            return self.getToken(SqlParser.FREEZE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_vacuum_option_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterVacuum_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitVacuum_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitVacuum_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_option_elem(self):

        localctx = SqlParser.Vacuum_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_vacuum_option_elem)
        try:
            self.state = 6101
            token = self._input.LA(1)
            if token in [self.ANALYSE, self.ANALYZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6097 
                self.analyze_keyword()

            elif token in [self.VERBOSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6098
                self.match(self.VERBOSE)

            elif token in [self.FREEZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6099
                self.match(self.FREEZE)

            elif token in [self.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6100
                self.match(self.FULL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnalyzeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AnalyzeStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def opt_name_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_name_listContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(SqlParser.Analyze_keywordContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(SqlParser.Opt_verboseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_analyzeStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAnalyzeStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAnalyzeStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAnalyzeStmt(self)
            else:
                return visitor.visitChildren(self)




    def analyzeStmt(self):

        localctx = SqlParser.AnalyzeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_analyzeStmt)
        try:
            self.state = 6111
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6103 
                self.analyze_keyword()
                self.state = 6104 
                self.opt_verbose()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6106 
                self.analyze_keyword()
                self.state = 6107 
                self.opt_verbose()
                self.state = 6108 
                self.qualified_name()
                self.state = 6109 
                self.opt_name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Analyze_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SqlParser.ANALYZE, 0)

        def ANALYSE(self):
            return self.getToken(SqlParser.ANALYSE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_analyze_keyword

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAnalyze_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAnalyze_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAnalyze_keyword(self)
            else:
                return visitor.visitChildren(self)




    def analyze_keyword(self):

        localctx = SqlParser.Analyze_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_analyze_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6113
            _la = self._input.LA(1)
            if not(_la==SqlParser.ANALYSE or _la==SqlParser.ANALYZE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_verboseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_verboseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VERBOSE(self):
            return self.getToken(SqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_verbose

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_verbose(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_verbose(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_verbose(self)
            else:
                return visitor.visitChildren(self)




    def opt_verbose(self):

        localctx = SqlParser.Opt_verboseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_opt_verbose)
        try:
            self.state = 6117
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6115
                self.match(self.VERBOSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_fullContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_fullContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(SqlParser.FULL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_full

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_full(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_full(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_full(self)
            else:
                return visitor.visitChildren(self)




    def opt_full(self):

        localctx = SqlParser.Opt_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_opt_full)
        try:
            self.state = 6121
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6119
                self.match(self.FULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_freezeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_freezeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FREEZE(self):
            return self.getToken(SqlParser.FREEZE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_freeze

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_freeze(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_freeze(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_freeze(self)
            else:
                return visitor.visitChildren(self)




    def opt_freeze(self):

        localctx = SqlParser.Opt_freezeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_opt_freeze)
        try:
            self.state = 6125
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6123
                self.match(self.FREEZE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_name_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_name_list(self)
            else:
                return visitor.visitChildren(self)




    def opt_name_list(self):

        localctx = SqlParser.Opt_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_opt_name_list)
        try:
            self.state = 6132
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6127
                self.match(self.T__6)
                self.state = 6128 
                self.name_list(0)
                self.state = 6129
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplainStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExplainStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(SqlParser.Analyze_keywordContext,0)


        def explainableStmt(self):
            return self.getTypedRuleContext(SqlParser.ExplainableStmtContext,0)


        def VERBOSE(self):
            return self.getToken(SqlParser.VERBOSE, 0)

        def EXPLAIN(self):
            return self.getToken(SqlParser.EXPLAIN, 0)

        def explain_option_list(self):
            return self.getTypedRuleContext(SqlParser.Explain_option_listContext,0)


        def opt_verbose(self):
            return self.getTypedRuleContext(SqlParser.Opt_verboseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_explainStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplainStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplainStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplainStmt(self)
            else:
                return visitor.visitChildren(self)




    def explainStmt(self):

        localctx = SqlParser.ExplainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_explainStmt)
        try:
            self.state = 6150
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6134
                self.match(self.EXPLAIN)
                self.state = 6135 
                self.explainableStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6136
                self.match(self.EXPLAIN)
                self.state = 6137 
                self.analyze_keyword()
                self.state = 6138 
                self.opt_verbose()
                self.state = 6139 
                self.explainableStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6141
                self.match(self.EXPLAIN)
                self.state = 6142
                self.match(self.VERBOSE)
                self.state = 6143 
                self.explainableStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6144
                self.match(self.EXPLAIN)
                self.state = 6145
                self.match(self.T__6)
                self.state = 6146 
                self.explain_option_list(0)
                self.state = 6147
                self.match(self.T__13)
                self.state = 6148 
                self.explainableStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplainableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExplainableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def declareCursorStmt(self):
            return self.getTypedRuleContext(SqlParser.DeclareCursorStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(SqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(SqlParser.InsertStmtContext,0)


        def createAsStmt(self):
            return self.getTypedRuleContext(SqlParser.CreateAsStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(SqlParser.DeleteStmtContext,0)


        def executeStmt(self):
            return self.getTypedRuleContext(SqlParser.ExecuteStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_explainableStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplainableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplainableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplainableStmt(self)
            else:
                return visitor.visitChildren(self)




    def explainableStmt(self):

        localctx = SqlParser.ExplainableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_explainableStmt)
        try:
            self.state = 6159
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6152 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6153 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6154 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6155 
                self.deleteStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6156 
                self.declareCursorStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6157 
                self.createAsStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6158 
                self.executeStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Explain_option_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explain_option_elem(self):
            return self.getTypedRuleContext(SqlParser.Explain_option_elemContext,0)


        def explain_option_list(self):
            return self.getTypedRuleContext(SqlParser.Explain_option_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_explain_option_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplain_option_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplain_option_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplain_option_list(self)
            else:
                return visitor.visitChildren(self)



    def explain_option_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Explain_option_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 702
        self.enterRecursionRule(localctx, 702, self.RULE_explain_option_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6162 
            self.explain_option_elem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Explain_option_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_explain_option_list)
                    self.state = 6164
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6165
                    self.match(self.T__11)
                    self.state = 6166 
                    self.explain_option_elem() 
                self.state = 6171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Explain_option_elemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Explain_option_elemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explain_option_name(self):
            return self.getTypedRuleContext(SqlParser.Explain_option_nameContext,0)


        def explain_option_arg(self):
            return self.getTypedRuleContext(SqlParser.Explain_option_argContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_explain_option_elem

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplain_option_elem(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplain_option_elem(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplain_option_elem(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_elem(self):

        localctx = SqlParser.Explain_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_explain_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6172 
            self.explain_option_name()
            self.state = 6173 
            self.explain_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Explain_option_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(SqlParser.Analyze_keywordContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def VERBOSE(self):
            return self.getToken(SqlParser.VERBOSE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_explain_option_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplain_option_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplain_option_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplain_option_name(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_name(self):

        localctx = SqlParser.Explain_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_explain_option_name)
        try:
            self.state = 6178
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6175 
                self.colId()

            elif token in [self.ANALYSE, self.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6176 
                self.analyze_keyword()

            elif token in [self.VERBOSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6177
                self.match(self.VERBOSE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_option_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Explain_option_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def numericOnly(self):
            return self.getTypedRuleContext(SqlParser.NumericOnlyContext,0)


        def opt_boolean_or_string(self):
            return self.getTypedRuleContext(SqlParser.Opt_boolean_or_stringContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_explain_option_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExplain_option_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExplain_option_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExplain_option_arg(self)
            else:
                return visitor.visitChildren(self)




    def explain_option_arg(self):

        localctx = SqlParser.Explain_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_explain_option_arg)
        try:
            self.state = 6183
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6180 
                self.opt_boolean_or_string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6181 
                self.numericOnly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrepareStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.PrepareStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def preparableStmt(self):
            return self.getTypedRuleContext(SqlParser.PreparableStmtContext,0)


        def prep_type_clause(self):
            return self.getTypedRuleContext(SqlParser.Prep_type_clauseContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def PREPARE(self):
            return self.getToken(SqlParser.PREPARE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_prepareStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrepareStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrepareStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrepareStmt(self)
            else:
                return visitor.visitChildren(self)




    def prepareStmt(self):

        localctx = SqlParser.PrepareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_prepareStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6185
            self.match(self.PREPARE)
            self.state = 6186 
            self.name()
            self.state = 6187 
            self.prep_type_clause()
            self.state = 6188
            self.match(self.AS)
            self.state = 6189 
            self.preparableStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prep_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Prep_type_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_prep_type_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPrep_type_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPrep_type_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPrep_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def prep_type_clause(self):

        localctx = SqlParser.Prep_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_prep_type_clause)
        try:
            self.state = 6196
            token = self._input.LA(1)
            if token in [self.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6191
                self.match(self.T__6)
                self.state = 6192 
                self.type_list(0)
                self.state = 6193
                self.match(self.T__13)

            elif token in [self.AS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreparableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.PreparableStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(SqlParser.UpdateStmtContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(SqlParser.InsertStmtContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(SqlParser.DeleteStmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_preparableStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPreparableStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPreparableStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPreparableStmt(self)
            else:
                return visitor.visitChildren(self)




    def preparableStmt(self):

        localctx = SqlParser.PreparableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_preparableStmt)
        try:
            self.state = 6202
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6198 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6199 
                self.insertStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6200 
                self.updateStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6201 
                self.deleteStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecuteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ExecuteStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def execute_param_clause(self):
            return self.getTypedRuleContext(SqlParser.Execute_param_clauseContext,0)


        def EXECUTE(self):
            return self.getToken(SqlParser.EXECUTE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(SqlParser.Create_as_targetContext,0)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def optTemp(self):
            return self.getTypedRuleContext(SqlParser.OptTempContext,0)


        def opt_with_data(self):
            return self.getTypedRuleContext(SqlParser.Opt_with_dataContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_executeStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExecuteStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExecuteStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExecuteStmt(self)
            else:
                return visitor.visitChildren(self)




    def executeStmt(self):

        localctx = SqlParser.ExecuteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_executeStmt)
        try:
            self.state = 6218
            token = self._input.LA(1)
            if token in [self.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6204
                self.match(self.EXECUTE)
                self.state = 6205 
                self.name()
                self.state = 6206 
                self.execute_param_clause()

            elif token in [self.CREATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6208
                self.match(self.CREATE)
                self.state = 6209 
                self.optTemp()
                self.state = 6210
                self.match(self.TABLE)
                self.state = 6211 
                self.create_as_target()
                self.state = 6212
                self.match(self.AS)
                self.state = 6213
                self.match(self.EXECUTE)
                self.state = 6214 
                self.name()
                self.state = 6215 
                self.execute_param_clause()
                self.state = 6216 
                self.opt_with_data()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_param_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Execute_param_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_execute_param_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExecute_param_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExecute_param_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExecute_param_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_param_clause(self):

        localctx = SqlParser.Execute_param_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_execute_param_clause)
        try:
            self.state = 6225
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6220
                self.match(self.T__6)
                self.state = 6221 
                self.expr_list(0)
                self.state = 6222
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeallocateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DeallocateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def DEALLOCATE(self):
            return self.getToken(SqlParser.DEALLOCATE, 0)

        def PREPARE(self):
            return self.getToken(SqlParser.PREPARE, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_deallocateStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDeallocateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDeallocateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDeallocateStmt(self)
            else:
                return visitor.visitChildren(self)




    def deallocateStmt(self):

        localctx = SqlParser.DeallocateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_deallocateStmt)
        try:
            self.state = 6237
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6227
                self.match(self.DEALLOCATE)
                self.state = 6228 
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6229
                self.match(self.DEALLOCATE)
                self.state = 6230
                self.match(self.PREPARE)
                self.state = 6231 
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6232
                self.match(self.DEALLOCATE)
                self.state = 6233
                self.match(self.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6234
                self.match(self.DEALLOCATE)
                self.state = 6235
                self.match(self.PREPARE)
                self.state = 6236
                self.match(self.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.InsertStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def insert_rest(self):
            return self.getTypedRuleContext(SqlParser.Insert_restContext,0)


        def INTO(self):
            return self.getToken(SqlParser.INTO, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SqlParser.Returning_clauseContext,0)


        def INSERT(self):
            return self.getToken(SqlParser.INSERT, 0)

        def opt_with_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_with_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_insertStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInsertStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInsertStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInsertStmt(self)
            else:
                return visitor.visitChildren(self)




    def insertStmt(self):

        localctx = SqlParser.InsertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_insertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6239 
            self.opt_with_clause()
            self.state = 6240
            self.match(self.INSERT)
            self.state = 6241
            self.match(self.INTO)
            self.state = 6242 
            self.qualified_name()
            self.state = 6243 
            self.insert_rest()
            self.state = 6244 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_restContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Insert_restContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def VALUES(self):
            return self.getToken(SqlParser.VALUES, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(SqlParser.Insert_column_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_insert_rest

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInsert_rest(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInsert_rest(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInsert_rest(self)
            else:
                return visitor.visitChildren(self)




    def insert_rest(self):

        localctx = SqlParser.Insert_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_insert_rest)
        try:
            self.state = 6254
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6246 
                self.selectStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6247
                self.match(self.T__6)
                self.state = 6248 
                self.insert_column_list(0)
                self.state = 6249
                self.match(self.T__13)
                self.state = 6250 
                self.selectStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6252
                self.match(self.DEFAULT)
                self.state = 6253
                self.match(self.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Insert_column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def insert_column_item(self):
            return self.getTypedRuleContext(SqlParser.Insert_column_itemContext,0)


        def insert_column_list(self):
            return self.getTypedRuleContext(SqlParser.Insert_column_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_insert_column_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInsert_column_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInsert_column_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInsert_column_list(self)
            else:
                return visitor.visitChildren(self)



    def insert_column_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Insert_column_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 726
        self.enterRecursionRule(localctx, 726, self.RULE_insert_column_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6257 
            self.insert_column_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Insert_column_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_column_list)
                    self.state = 6259
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6260
                    self.match(self.T__11)
                    self.state = 6261 
                    self.insert_column_item() 
                self.state = 6266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Insert_column_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Insert_column_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(SqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_insert_column_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInsert_column_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInsert_column_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInsert_column_item(self)
            else:
                return visitor.visitChildren(self)




    def insert_column_item(self):

        localctx = SqlParser.Insert_column_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_insert_column_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6267 
            self.colId()
            self.state = 6268 
            self.opt_indirection(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Returning_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def target_list(self):
            return self.getTypedRuleContext(SqlParser.Target_listContext,0)


        def RETURNING(self):
            return self.getToken(SqlParser.RETURNING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_returning_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReturning_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReturning_clause(self)
            else:
                return visitor.visitChildren(self)




    def returning_clause(self):

        localctx = SqlParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_returning_clause)
        try:
            self.state = 6273
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6270
                self.match(self.RETURNING)
                self.state = 6271 
                self.target_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DeleteStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_or_current_clause(self):
            return self.getTypedRuleContext(SqlParser.Where_or_current_clauseContext,0)


        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(SqlParser.Relation_expr_opt_aliasContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SqlParser.Returning_clauseContext,0)


        def opt_with_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_with_clauseContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def using_clause(self):
            return self.getTypedRuleContext(SqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_deleteStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDeleteStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDeleteStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDeleteStmt(self)
            else:
                return visitor.visitChildren(self)




    def deleteStmt(self):

        localctx = SqlParser.DeleteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_deleteStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6275 
            self.opt_with_clause()
            self.state = 6276
            self.match(self.DELETE_P)
            self.state = 6277
            self.match(self.FROM)
            self.state = 6278 
            self.relation_expr_opt_alias()
            self.state = 6279 
            self.using_clause()
            self.state = 6280 
            self.where_or_current_clause()
            self.state = 6281 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Using_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(SqlParser.From_listContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_using_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitUsing_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = SqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_using_clause)
        try:
            self.state = 6286
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6283
                self.match(self.USING)
                self.state = 6284 
                self.from_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.LockStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_nowait(self):
            return self.getTypedRuleContext(SqlParser.Opt_nowaitContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Relation_expr_listContext,0)


        def opt_lock(self):
            return self.getTypedRuleContext(SqlParser.Opt_lockContext,0)


        def opt_table(self):
            return self.getTypedRuleContext(SqlParser.Opt_tableContext,0)


        def LOCK_P(self):
            return self.getToken(SqlParser.LOCK_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_lockStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterLockStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitLockStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitLockStmt(self)
            else:
                return visitor.visitChildren(self)




    def lockStmt(self):

        localctx = SqlParser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_lockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6288
            self.match(self.LOCK_P)
            self.state = 6289 
            self.opt_table()
            self.state = 6290 
            self.relation_expr_list(0)
            self.state = 6291 
            self.opt_lock()
            self.state = 6292 
            self.opt_nowait()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_lockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_lockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MODE(self):
            return self.getToken(SqlParser.MODE, 0)

        def lock_type(self):
            return self.getTypedRuleContext(SqlParser.Lock_typeContext,0)


        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_lock

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_lock(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_lock(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_lock(self)
            else:
                return visitor.visitChildren(self)




    def opt_lock(self):

        localctx = SqlParser.Opt_lockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_opt_lock)
        try:
            self.state = 6299
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6294
                self.match(self.IN_P)
                self.state = 6295 
                self.lock_type()
                self.state = 6296
                self.match(self.MODE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Lock_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCLUSIVE(self):
            return self.getToken(SqlParser.EXCLUSIVE, 0)

        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SqlParser.ACCESS, 0)

        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(SqlParser.SHARE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_lock_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterLock_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitLock_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitLock_type(self)
            else:
                return visitor.visitChildren(self)




    def lock_type(self):

        localctx = SqlParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_lock_type)
        try:
            self.state = 6317
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6301
                self.match(self.ACCESS)
                self.state = 6302
                self.match(self.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6303
                self.match(self.ROW)
                self.state = 6304
                self.match(self.SHARE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6305
                self.match(self.ROW)
                self.state = 6306
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6307
                self.match(self.SHARE)
                self.state = 6308
                self.match(self.UPDATE)
                self.state = 6309
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6310
                self.match(self.SHARE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6311
                self.match(self.SHARE)
                self.state = 6312
                self.match(self.ROW)
                self.state = 6313
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6314
                self.match(self.EXCLUSIVE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6315
                self.match(self.ACCESS)
                self.state = 6316
                self.match(self.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_nowaitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_nowaitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(SqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_nowait

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_nowait(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_nowait(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_nowait(self)
            else:
                return visitor.visitChildren(self)




    def opt_nowait(self):

        localctx = SqlParser.Opt_nowaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_opt_nowait)
        try:
            self.state = 6321
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6319
                self.match(self.NOWAIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.UpdateStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def from_clause(self):
            return self.getTypedRuleContext(SqlParser.From_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(SqlParser.Where_or_current_clauseContext,0)


        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(SqlParser.Relation_expr_opt_aliasContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SqlParser.Returning_clauseContext,0)


        def set_clause_list(self):
            return self.getTypedRuleContext(SqlParser.Set_clause_listContext,0)


        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def opt_with_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_with_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_updateStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterUpdateStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitUpdateStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitUpdateStmt(self)
            else:
                return visitor.visitChildren(self)




    def updateStmt(self):

        localctx = SqlParser.UpdateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_updateStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6323 
            self.opt_with_clause()
            self.state = 6324
            self.match(self.UPDATE)
            self.state = 6325 
            self.relation_expr_opt_alias()
            self.state = 6326
            self.match(self.SET)
            self.state = 6327 
            self.set_clause_list(0)
            self.state = 6328 
            self.from_clause()
            self.state = 6329 
            self.where_or_current_clause()
            self.state = 6330 
            self.returning_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_clause_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_clause_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_clause(self):
            return self.getTypedRuleContext(SqlParser.Set_clauseContext,0)


        def set_clause_list(self):
            return self.getTypedRuleContext(SqlParser.Set_clause_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_set_clause_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_clause_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_clause_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_clause_list(self)
            else:
                return visitor.visitChildren(self)



    def set_clause_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Set_clause_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 746
        self.enterRecursionRule(localctx, 746, self.RULE_set_clause_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6333 
            self.set_clause()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6340
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Set_clause_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_clause_list)
                    self.state = 6335
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6336
                    self.match(self.T__11)
                    self.state = 6337 
                    self.set_clause() 
                self.state = 6342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiple_set_clause(self):
            return self.getTypedRuleContext(SqlParser.Multiple_set_clauseContext,0)


        def single_set_clause(self):
            return self.getTypedRuleContext(SqlParser.Single_set_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_set_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_clause(self)
            else:
                return visitor.visitChildren(self)




    def set_clause(self):

        localctx = SqlParser.Set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_set_clause)
        try:
            self.state = 6345
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6343 
                self.single_set_clause()

            elif token in [self.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6344 
                self.multiple_set_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Single_set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(SqlParser.Set_targetContext,0)


        def ctext_expr(self):
            return self.getTypedRuleContext(SqlParser.Ctext_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_single_set_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSingle_set_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSingle_set_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSingle_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def single_set_clause(self):

        localctx = SqlParser.Single_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_single_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6347 
            self.set_target()
            self.state = 6348
            self.match(self.T__3)
            self.state = 6349 
            self.ctext_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Multiple_set_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_row(self):
            return self.getTypedRuleContext(SqlParser.Ctext_rowContext,0)


        def set_target_list(self):
            return self.getTypedRuleContext(SqlParser.Set_target_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_multiple_set_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterMultiple_set_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitMultiple_set_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitMultiple_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def multiple_set_clause(self):

        localctx = SqlParser.Multiple_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_multiple_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6351
            self.match(self.T__6)
            self.state = 6352 
            self.set_target_list(0)
            self.state = 6353
            self.match(self.T__13)
            self.state = 6354
            self.match(self.T__3)
            self.state = 6355 
            self.ctext_row()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(SqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_set_target

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_target(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_target(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_target(self)
            else:
                return visitor.visitChildren(self)




    def set_target(self):

        localctx = SqlParser.Set_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_set_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6357 
            self.colId()
            self.state = 6358 
            self.opt_indirection(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_target_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Set_target_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(SqlParser.Set_targetContext,0)


        def set_target_list(self):
            return self.getTypedRuleContext(SqlParser.Set_target_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_set_target_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSet_target_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSet_target_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSet_target_list(self)
            else:
                return visitor.visitChildren(self)



    def set_target_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Set_target_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 756
        self.enterRecursionRule(localctx, 756, self.RULE_set_target_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6361 
            self.set_target()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Set_target_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_target_list)
                    self.state = 6363
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6364
                    self.match(self.T__11)
                    self.state = 6365 
                    self.set_target() 
                self.state = 6370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclareCursorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.DeclareCursorStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_hold(self):
            return self.getTypedRuleContext(SqlParser.Opt_holdContext,0)


        def CURSOR(self):
            return self.getToken(SqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def DECLARE(self):
            return self.getToken(SqlParser.DECLARE, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(SqlParser.SelectStmtContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(SqlParser.Cursor_nameContext,0)


        def cursor_options(self):
            return self.getTypedRuleContext(SqlParser.Cursor_optionsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_declareCursorStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDeclareCursorStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDeclareCursorStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDeclareCursorStmt(self)
            else:
                return visitor.visitChildren(self)




    def declareCursorStmt(self):

        localctx = SqlParser.DeclareCursorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_declareCursorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6371
            self.match(self.DECLARE)
            self.state = 6372 
            self.cursor_name()
            self.state = 6373 
            self.cursor_options(0)
            self.state = 6374
            self.match(self.CURSOR)
            self.state = 6375 
            self.opt_hold()
            self.state = 6376
            self.match(self.FOR)
            self.state = 6377 
            self.selectStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Cursor_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_cursor_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCursor_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCursor_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = SqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_cursor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6379 
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Cursor_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSENSITIVE(self):
            return self.getToken(SqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(SqlParser.SCROLL, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def BINARY(self):
            return self.getToken(SqlParser.BINARY, 0)

        def cursor_options(self):
            return self.getTypedRuleContext(SqlParser.Cursor_optionsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_cursor_options

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCursor_options(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCursor_options(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCursor_options(self)
            else:
                return visitor.visitChildren(self)



    def cursor_options(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Cursor_optionsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 762
        self.enterRecursionRule(localctx, 762, self.RULE_cursor_options, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6391
                    la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6382
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6383
                        self.match(self.NO)
                        self.state = 6384
                        self.match(self.SCROLL)
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6385
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6386
                        self.match(self.SCROLL)
                        pass

                    elif la_ == 3:
                        localctx = SqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6387
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6388
                        self.match(self.BINARY)
                        pass

                    elif la_ == 4:
                        localctx = SqlParser.Cursor_optionsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_cursor_options)
                        self.state = 6389
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6390
                        self.match(self.INSENSITIVE)
                        pass

             
                self.state = 6395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_holdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_holdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HOLD(self):
            return self.getToken(SqlParser.HOLD, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_hold

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_hold(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_hold(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_hold(self)
            else:
                return visitor.visitChildren(self)




    def opt_hold(self):

        localctx = SqlParser.Opt_holdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_opt_hold)
        try:
            self.state = 6401
            token = self._input.LA(1)
            if token in [self.FOR]:
                self.enterOuterAlt(localctx, 1)


            elif token in [self.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6397
                self.match(self.WITH)
                self.state = 6398
                self.match(self.HOLD)

            elif token in [self.WITHOUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6399
                self.match(self.WITHOUT)
                self.state = 6400
                self.match(self.HOLD)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SelectStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_no_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_no_parensContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_selectStmt

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelectStmt(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = SqlParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_selectStmt)
        try:
            self.state = 6405
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6403 
                self.select_no_parens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6404 
                self.select_with_parens(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_with_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_with_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(SqlParser.EXCEPT, 0)

        def simple_select(self):
            return self.getTypedRuleContext(SqlParser.Simple_selectContext,0)


        def UNION(self):
            return self.getToken(SqlParser.UNION, 0)

        def opt_all(self):
            return self.getTypedRuleContext(SqlParser.Opt_allContext,0)


        def INTERSECT(self):
            return self.getToken(SqlParser.INTERSECT, 0)

        def select_no_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_no_parensContext,0)


        def select_with_parens(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_with_parensContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_with_parensContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_select_with_parens

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_with_parens(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_with_parens(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_with_parens(self)
            else:
                return visitor.visitChildren(self)



    def select_with_parens(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Select_with_parensContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 768
        self.enterRecursionRule(localctx, 768, self.RULE_select_with_parens, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6416
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 6408
                self.match(self.T__6)
                self.state = 6409 
                self.select_no_parens()
                self.state = 6410
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.state = 6412
                self.match(self.T__6)
                self.state = 6413 
                self.select_with_parens(0)
                self.state = 6414
                self.match(self.T__13)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6439
                    la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 6418
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6419
                        self.match(self.UNION)
                        self.state = 6420 
                        self.opt_all()
                        self.state = 6423
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6421 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6422 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        localctx = SqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 6425
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6426
                        self.match(self.INTERSECT)
                        self.state = 6427 
                        self.opt_all()
                        self.state = 6430
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6428 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6429 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        localctx = SqlParser.Select_with_parensContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_with_parens)
                        self.state = 6432
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6433
                        self.match(self.EXCEPT)
                        self.state = 6434 
                        self.opt_all()
                        self.state = 6437
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6435 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6436 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 6443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Select_no_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_no_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_for_locking_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_for_locking_clauseContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def select_clause(self):
            return self.getTypedRuleContext(SqlParser.Select_clauseContext,0)


        def simple_select(self):
            return self.getTypedRuleContext(SqlParser.Simple_selectContext,0)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_sort_clauseContext,0)


        def select_limit(self):
            return self.getTypedRuleContext(SqlParser.Select_limitContext,0)


        def sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Sort_clauseContext,0)


        def opt_select_limit(self):
            return self.getTypedRuleContext(SqlParser.Opt_select_limitContext,0)


        def for_locking_clause(self):
            return self.getTypedRuleContext(SqlParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_no_parens

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_no_parens(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_no_parens(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_no_parens(self)
            else:
                return visitor.visitChildren(self)




    def select_no_parens(self):

        localctx = SqlParser.Select_no_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_select_no_parens)
        try:
            self.state = 6477
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6444 
                self.simple_select(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6445 
                self.select_clause()
                self.state = 6446 
                self.sort_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6448 
                self.select_clause()
                self.state = 6449 
                self.opt_sort_clause()
                self.state = 6450 
                self.for_locking_clause()
                self.state = 6451 
                self.opt_select_limit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6453 
                self.select_clause()
                self.state = 6454 
                self.opt_sort_clause()
                self.state = 6455 
                self.select_limit()
                self.state = 6456 
                self.opt_for_locking_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6458 
                self.with_clause()
                self.state = 6459 
                self.select_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6461 
                self.with_clause()
                self.state = 6462 
                self.select_clause()
                self.state = 6463 
                self.sort_clause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6465 
                self.with_clause()
                self.state = 6466 
                self.select_clause()
                self.state = 6467 
                self.opt_sort_clause()
                self.state = 6468 
                self.for_locking_clause()
                self.state = 6469 
                self.opt_select_limit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6471 
                self.with_clause()
                self.state = 6472 
                self.select_clause()
                self.state = 6473 
                self.opt_sort_clause()
                self.state = 6474 
                self.select_limit()
                self.state = 6475 
                self.opt_for_locking_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_select(self):
            return self.getTypedRuleContext(SqlParser.Simple_selectContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_clause(self)
            else:
                return visitor.visitChildren(self)




    def select_clause(self):

        localctx = SqlParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_select_clause)
        try:
            self.state = 6481
            token = self._input.LA(1)
            if token in [self.SELECT, self.TABLE, self.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6479 
                self.simple_select(0)

            elif token in [self.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6480 
                self.select_with_parens(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_selectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Simple_selectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(SqlParser.EXCEPT, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SqlParser.Where_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(SqlParser.Values_clauseContext,0)


        def opt_distinct(self):
            return self.getTypedRuleContext(SqlParser.Opt_distinctContext,0)


        def INTERSECT(self):
            return self.getToken(SqlParser.INTERSECT, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def SELECT(self):
            return self.getToken(SqlParser.SELECT, 0)

        def target_list(self):
            return self.getTypedRuleContext(SqlParser.Target_listContext,0)


        def UNION(self):
            return self.getToken(SqlParser.UNION, 0)

        def from_clause(self):
            return self.getTypedRuleContext(SqlParser.From_clauseContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(SqlParser.Into_clauseContext,0)


        def opt_all(self):
            return self.getTypedRuleContext(SqlParser.Opt_allContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(SqlParser.Window_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(SqlParser.Group_clauseContext,0)


        def simple_select(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Simple_selectContext)
            else:
                return self.getTypedRuleContext(SqlParser.Simple_selectContext,i)


        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def having_clause(self):
            return self.getTypedRuleContext(SqlParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_simple_select

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSimple_select(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSimple_select(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSimple_select(self)
            else:
                return visitor.visitChildren(self)



    def simple_select(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Simple_selectContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 774
        self.enterRecursionRule(localctx, 774, self.RULE_simple_select, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6497
            token = self._input.LA(1)
            if token in [self.SELECT]:
                self.state = 6484
                self.match(self.SELECT)
                self.state = 6485 
                self.opt_distinct()
                self.state = 6486 
                self.target_list(0)
                self.state = 6487 
                self.into_clause()
                self.state = 6488 
                self.from_clause()
                self.state = 6489 
                self.where_clause()
                self.state = 6490 
                self.group_clause()
                self.state = 6491 
                self.having_clause()
                self.state = 6492 
                self.window_clause()

            elif token in [self.VALUES]:
                self.state = 6494 
                self.values_clause(0)

            elif token in [self.TABLE]:
                self.state = 6495
                self.match(self.TABLE)
                self.state = 6496 
                self.relation_expr()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 6522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6520
                    la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 6499
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6500
                        self.match(self.UNION)
                        self.state = 6501 
                        self.opt_all()
                        self.state = 6504
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6502 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6503 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        localctx = SqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 6506
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6507
                        self.match(self.INTERSECT)
                        self.state = 6508 
                        self.opt_all()
                        self.state = 6511
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6509 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6510 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        localctx = SqlParser.Simple_selectContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simple_select)
                        self.state = 6513
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6514
                        self.match(self.EXCEPT)
                        self.state = 6515 
                        self.opt_all()
                        self.state = 6518
                        token = self._input.LA(1)
                        if token in [self.T__6]:
                            self.state = 6516 
                            self.select_with_parens(0)

                        elif token in [self.SELECT, self.TABLE, self.VALUES]:
                            self.state = 6517 
                            self.simple_select(0)

                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 6524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cte_list(self):
            return self.getTypedRuleContext(SqlParser.Cte_listContext,0)


        def RECURSIVE(self):
            return self.getToken(SqlParser.RECURSIVE, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_with_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWith_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = SqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_with_clause)
        try:
            self.state = 6530
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6525
                self.match(self.WITH)
                self.state = 6526 
                self.cte_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6527
                self.match(self.WITH)
                self.state = 6528
                self.match(self.RECURSIVE)
                self.state = 6529 
                self.cte_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Cte_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_table_expr(self):
            return self.getTypedRuleContext(SqlParser.Common_table_exprContext,0)


        def cte_list(self):
            return self.getTypedRuleContext(SqlParser.Cte_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_cte_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCte_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCte_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCte_list(self)
            else:
                return visitor.visitChildren(self)



    def cte_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Cte_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 778
        self.enterRecursionRule(localctx, 778, self.RULE_cte_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6533 
            self.common_table_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Cte_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_cte_list)
                    self.state = 6535
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6536
                    self.match(self.T__11)
                    self.state = 6537 
                    self.common_table_expr() 
                self.state = 6542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Common_table_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Common_table_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def opt_name_list(self):
            return self.getTypedRuleContext(SqlParser.Opt_name_listContext,0)


        def preparableStmt(self):
            return self.getTypedRuleContext(SqlParser.PreparableStmtContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_common_table_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCommon_table_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCommon_table_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCommon_table_expr(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expr(self):

        localctx = SqlParser.Common_table_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_common_table_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6543 
            self.name()
            self.state = 6544 
            self.opt_name_list()
            self.state = 6545
            self.match(self.AS)
            self.state = 6546
            self.match(self.T__6)
            self.state = 6547 
            self.preparableStmt()
            self.state = 6548
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_with_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_with_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_with_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_with_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_with_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_with_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_with_clause(self):

        localctx = SqlParser.Opt_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_opt_with_clause)
        try:
            self.state = 6552
            token = self._input.LA(1)
            if token in [self.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6550 
                self.with_clause()

            elif token in [self.DELETE_P, self.INSERT, self.UPDATE]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Into_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def optTempTableName(self):
            return self.getTypedRuleContext(SqlParser.OptTempTableNameContext,0)


        def INTO(self):
            return self.getToken(SqlParser.INTO, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_into_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInto_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInto_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = SqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_into_clause)
        try:
            self.state = 6557
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6554
                self.match(self.INTO)
                self.state = 6555 
                self.optTempTableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTempTableNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OptTempTableNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def UNLOGGED(self):
            return self.getToken(SqlParser.UNLOGGED, 0)

        def GLOBAL(self):
            return self.getToken(SqlParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def TEMP(self):
            return self.getToken(SqlParser.TEMP, 0)

        def opt_table(self):
            return self.getTypedRuleContext(SqlParser.Opt_tableContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_optTempTableName

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOptTempTableName(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOptTempTableName(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOptTempTableName(self)
            else:
                return visitor.visitChildren(self)




    def optTempTableName(self):

        localctx = SqlParser.OptTempTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_optTempTableName)
        try:
            self.state = 6594
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6559
                self.match(self.TEMPORARY)
                self.state = 6560 
                self.opt_table()
                self.state = 6561 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6563
                self.match(self.TEMP)
                self.state = 6564 
                self.opt_table()
                self.state = 6565 
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6567
                self.match(self.LOCAL)
                self.state = 6568
                self.match(self.TEMPORARY)
                self.state = 6569 
                self.opt_table()
                self.state = 6570 
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6572
                self.match(self.LOCAL)
                self.state = 6573
                self.match(self.TEMP)
                self.state = 6574 
                self.opt_table()
                self.state = 6575 
                self.qualified_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6577
                self.match(self.GLOBAL)
                self.state = 6578
                self.match(self.TEMPORARY)
                self.state = 6579 
                self.opt_table()
                self.state = 6580 
                self.qualified_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6582
                self.match(self.GLOBAL)
                self.state = 6583
                self.match(self.TEMP)
                self.state = 6584 
                self.opt_table()
                self.state = 6585 
                self.qualified_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6587
                self.match(self.UNLOGGED)
                self.state = 6588 
                self.opt_table()
                self.state = 6589 
                self.qualified_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6591
                self.match(self.TABLE)
                self.state = 6592 
                self.qualified_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6593 
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_table

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_table(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_table(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_table(self)
            else:
                return visitor.visitChildren(self)




    def opt_table(self):

        localctx = SqlParser.Opt_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_opt_table)
        try:
            self.state = 6598
            token = self._input.LA(1)
            if token in [self.TABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6596
                self.match(self.TABLE)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.ONLY, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_allContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_allContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_all

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_all(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_all(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_all(self)
            else:
                return visitor.visitChildren(self)




    def opt_all(self):

        localctx = SqlParser.Opt_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_opt_all)
        try:
            self.state = 6603
            token = self._input.LA(1)
            if token in [self.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6600
                self.match(self.ALL)

            elif token in [self.DISTINCT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6601
                self.match(self.DISTINCT)

            elif token in [self.T__6, self.SELECT, self.TABLE, self.VALUES]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_distinctContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_distinctContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_distinct

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_distinct(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_distinct(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_distinct(self)
            else:
                return visitor.visitChildren(self)




    def opt_distinct(self):

        localctx = SqlParser.Opt_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_opt_distinct)
        try:
            self.state = 6614
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6605
                self.match(self.DISTINCT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6606
                self.match(self.DISTINCT)
                self.state = 6607
                self.match(self.ON)
                self.state = 6608
                self.match(self.T__6)
                self.state = 6609 
                self.expr_list(0)
                self.state = 6610
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6612
                self.match(self.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_sort_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_sort_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Sort_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_sort_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_sort_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_sort_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_sort_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_sort_clause(self):

        localctx = SqlParser.Opt_sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_opt_sort_clause)
        try:
            self.state = 6618
            token = self._input.LA(1)
            if token in [self.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6616 
                self.sort_clause()

            elif token in [self.T__13, self.FETCH, self.FOR, self.LIMIT, self.OFFSET, self.RANGE, self.ROWS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sort_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Sort_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sortby_list(self):
            return self.getTypedRuleContext(SqlParser.Sortby_listContext,0)


        def ORDER(self):
            return self.getToken(SqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_sort_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSort_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSort_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSort_clause(self)
            else:
                return visitor.visitChildren(self)




    def sort_clause(self):

        localctx = SqlParser.Sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_sort_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6620
            self.match(self.ORDER)
            self.state = 6621
            self.match(self.BY)
            self.state = 6622 
            self.sortby_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sortby_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Sortby_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sortby_list(self):
            return self.getTypedRuleContext(SqlParser.Sortby_listContext,0)


        def sortby(self):
            return self.getTypedRuleContext(SqlParser.SortbyContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_sortby_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSortby_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSortby_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSortby_list(self)
            else:
                return visitor.visitChildren(self)



    def sortby_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Sortby_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 798
        self.enterRecursionRule(localctx, 798, self.RULE_sortby_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6625 
            self.sortby()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Sortby_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sortby_list)
                    self.state = 6627
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6628
                    self.match(self.T__11)
                    self.state = 6629 
                    self.sortby() 
                self.state = 6634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SortbyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SortbyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qual_all_Op(self):
            return self.getTypedRuleContext(SqlParser.Qual_all_OpContext,0)


        def opt_asc_desc(self):
            return self.getTypedRuleContext(SqlParser.Opt_asc_descContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def opt_nulls_order(self):
            return self.getTypedRuleContext(SqlParser.Opt_nulls_orderContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_sortby

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSortby(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSortby(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSortby(self)
            else:
                return visitor.visitChildren(self)




    def sortby(self):

        localctx = SqlParser.SortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_sortby)
        try:
            self.state = 6644
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6635 
                self.a_expr(0)
                self.state = 6636
                self.match(self.USING)
                self.state = 6637 
                self.qual_all_Op()
                self.state = 6638 
                self.opt_nulls_order()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6640 
                self.a_expr(0)
                self.state = 6641 
                self.opt_asc_desc()
                self.state = 6642 
                self.opt_nulls_order()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_limitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_limitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def offset_clause(self):
            return self.getTypedRuleContext(SqlParser.Offset_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(SqlParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_limit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_limit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_limit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_limit(self)
            else:
                return visitor.visitChildren(self)




    def select_limit(self):

        localctx = SqlParser.Select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_select_limit)
        try:
            self.state = 6654
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6646 
                self.limit_clause()
                self.state = 6647 
                self.offset_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6649 
                self.offset_clause()
                self.state = 6650 
                self.limit_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6652 
                self.limit_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6653 
                self.offset_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_select_limitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_select_limitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_limit(self):
            return self.getTypedRuleContext(SqlParser.Select_limitContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_select_limit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_select_limit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_select_limit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_select_limit(self)
            else:
                return visitor.visitChildren(self)




    def opt_select_limit(self):

        localctx = SqlParser.Opt_select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_opt_select_limit)
        try:
            self.state = 6658
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6656 
                self.select_limit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Limit_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def first_or_next(self):
            return self.getTypedRuleContext(SqlParser.First_or_nextContext,0)


        def LIMIT(self):
            return self.getToken(SqlParser.LIMIT, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(SqlParser.Select_offset_valueContext,0)


        def select_limit_value(self):
            return self.getTypedRuleContext(SqlParser.Select_limit_valueContext,0)


        def ONLY(self):
            return self.getToken(SqlParser.ONLY, 0)

        def opt_select_fetch_first_value(self):
            return self.getTypedRuleContext(SqlParser.Opt_select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(SqlParser.Row_or_rowsContext,0)


        def FETCH(self):
            return self.getToken(SqlParser.FETCH, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_limit_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitLimit_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = SqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_limit_clause)
        try:
            self.state = 6673
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6660
                self.match(self.LIMIT)
                self.state = 6661 
                self.select_limit_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6662
                self.match(self.LIMIT)
                self.state = 6663 
                self.select_limit_value()
                self.state = 6664
                self.match(self.T__11)
                self.state = 6665 
                self.select_offset_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6667
                self.match(self.FETCH)
                self.state = 6668 
                self.first_or_next()
                self.state = 6669 
                self.opt_select_fetch_first_value()
                self.state = 6670 
                self.row_or_rows()
                self.state = 6671
                self.match(self.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Offset_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Offset_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_offset_value(self):
            return self.getTypedRuleContext(SqlParser.Select_offset_valueContext,0)


        def OFFSET(self):
            return self.getToken(SqlParser.OFFSET, 0)

        def row_or_rows(self):
            return self.getTypedRuleContext(SqlParser.Row_or_rowsContext,0)


        def select_offset_value2(self):
            return self.getTypedRuleContext(SqlParser.Select_offset_value2Context,0)


        def getRuleIndex(self):
            return SqlParser.RULE_offset_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOffset_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOffset_clause(self)
            else:
                return visitor.visitChildren(self)




    def offset_clause(self):

        localctx = SqlParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_offset_clause)
        try:
            self.state = 6681
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6675
                self.match(self.OFFSET)
                self.state = 6676 
                self.select_offset_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6677
                self.match(self.OFFSET)
                self.state = 6678 
                self.select_offset_value2()
                self.state = 6679 
                self.row_or_rows()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_limit_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_limit_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_limit_value

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_limit_value(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_limit_value(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_limit_value(self)
            else:
                return visitor.visitChildren(self)




    def select_limit_value(self):

        localctx = SqlParser.Select_limit_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_select_limit_value)
        try:
            self.state = 6685
            token = self._input.LA(1)
            if token in [self.T__10, self.T__8, self.T__6, self.Op, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ARRAY, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOT, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNIQUE, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6683 
                self.a_expr(0)

            elif token in [self.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6684
                self.match(self.ALL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_offset_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_offset_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_offset_value

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_offset_value(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_offset_value(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_offset_value(self)
            else:
                return visitor.visitChildren(self)




    def select_offset_value(self):

        localctx = SqlParser.Select_offset_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_select_offset_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6687 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_select_fetch_first_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_select_fetch_first_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def signedIconst(self):
            return self.getTypedRuleContext(SqlParser.SignedIconstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_select_fetch_first_value

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_select_fetch_first_value(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_select_fetch_first_value(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_select_fetch_first_value(self)
            else:
                return visitor.visitChildren(self)




    def opt_select_fetch_first_value(self):

        localctx = SqlParser.Opt_select_fetch_first_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_opt_select_fetch_first_value)
        try:
            self.state = 6695
            token = self._input.LA(1)
            if token in [self.T__10, self.T__8, self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6689 
                self.signedIconst()

            elif token in [self.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6690
                self.match(self.T__6)
                self.state = 6691 
                self.a_expr(0)
                self.state = 6692
                self.match(self.T__13)

            elif token in [self.ROW, self.ROWS]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_offset_value2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Select_offset_value2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(SqlParser.C_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_select_offset_value2

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSelect_offset_value2(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSelect_offset_value2(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSelect_offset_value2(self)
            else:
                return visitor.visitChildren(self)




    def select_offset_value2(self):

        localctx = SqlParser.Select_offset_value2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_select_offset_value2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6697 
            self.c_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_rowsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Row_or_rowsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_row_or_rows

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRow_or_rows(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRow_or_rows(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRow_or_rows(self)
            else:
                return visitor.visitChildren(self)




    def row_or_rows(self):

        localctx = SqlParser.Row_or_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_row_or_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6699
            _la = self._input.LA(1)
            if not(_la==SqlParser.ROW or _la==SqlParser.ROWS):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class First_or_nextContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.First_or_nextContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(SqlParser.NEXT, 0)

        def FIRST_P(self):
            return self.getToken(SqlParser.FIRST_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_first_or_next

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFirst_or_next(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFirst_or_next(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFirst_or_next(self)
            else:
                return visitor.visitChildren(self)




    def first_or_next(self):

        localctx = SqlParser.First_or_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_first_or_next)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6701
            _la = self._input.LA(1)
            if not(_la==SqlParser.FIRST_P or _la==SqlParser.NEXT):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Group_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_group_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGroup_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGroup_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_clause(self):

        localctx = SqlParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_group_clause)
        try:
            self.state = 6707
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6703
                self.match(self.GROUP_P)
                self.state = 6704
                self.match(self.BY)
                self.state = 6705 
                self.expr_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Having_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def HAVING(self):
            return self.getToken(SqlParser.HAVING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_having_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitHaving_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = SqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_having_clause)
        try:
            self.state = 6712
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6709
                self.match(self.HAVING)
                self.state = 6710 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.For_locking_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def for_locking_items(self):
            return self.getTypedRuleContext(SqlParser.For_locking_itemsContext,0)


        def READ(self):
            return self.getToken(SqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(SqlParser.ONLY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_for_locking_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFor_locking_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFor_locking_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFor_locking_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_locking_clause(self):

        localctx = SqlParser.For_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_for_locking_clause)
        try:
            self.state = 6718
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6714 
                self.for_locking_items(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6715
                self.match(self.FOR)
                self.state = 6716
                self.match(self.READ)
                self.state = 6717
                self.match(self.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_for_locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_for_locking_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_locking_clause(self):
            return self.getTypedRuleContext(SqlParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_for_locking_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_for_locking_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_for_locking_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_for_locking_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_for_locking_clause(self):

        localctx = SqlParser.Opt_for_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_opt_for_locking_clause)
        try:
            self.state = 6722
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6720 
                self.for_locking_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_locking_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.For_locking_itemsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def for_locking_items(self):
            return self.getTypedRuleContext(SqlParser.For_locking_itemsContext,0)


        def for_locking_item(self):
            return self.getTypedRuleContext(SqlParser.For_locking_itemContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_for_locking_items

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFor_locking_items(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFor_locking_items(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFor_locking_items(self)
            else:
                return visitor.visitChildren(self)



    def for_locking_items(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.For_locking_itemsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 830
        self.enterRecursionRule(localctx, 830, self.RULE_for_locking_items, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6725 
            self.for_locking_item()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.For_locking_itemsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_for_locking_items)
                    self.state = 6727
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6728 
                    self.for_locking_item() 
                self.state = 6733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class For_locking_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.For_locking_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_nowait(self):
            return self.getTypedRuleContext(SqlParser.Opt_nowaitContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def locked_rels_list(self):
            return self.getTypedRuleContext(SqlParser.Locked_rels_listContext,0)


        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(SqlParser.SHARE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_for_locking_item

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFor_locking_item(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFor_locking_item(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFor_locking_item(self)
            else:
                return visitor.visitChildren(self)




    def for_locking_item(self):

        localctx = SqlParser.For_locking_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_for_locking_item)
        try:
            self.state = 6744
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6734
                self.match(self.FOR)
                self.state = 6735
                self.match(self.UPDATE)
                self.state = 6736 
                self.locked_rels_list()
                self.state = 6737 
                self.opt_nowait()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6739
                self.match(self.FOR)
                self.state = 6740
                self.match(self.SHARE)
                self.state = 6741 
                self.locked_rels_list()
                self.state = 6742 
                self.opt_nowait()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Locked_rels_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Locked_rels_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(SqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_locked_rels_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterLocked_rels_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitLocked_rels_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitLocked_rels_list(self)
            else:
                return visitor.visitChildren(self)




    def locked_rels_list(self):

        localctx = SqlParser.Locked_rels_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_locked_rels_list)
        try:
            self.state = 6749
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6746
                self.match(self.OF)
                self.state = 6747 
                self.qualified_name_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Values_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def values_clause(self):
            return self.getTypedRuleContext(SqlParser.Values_clauseContext,0)


        def ctext_row(self):
            return self.getTypedRuleContext(SqlParser.Ctext_rowContext,0)


        def VALUES(self):
            return self.getToken(SqlParser.VALUES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_values_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterValues_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitValues_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)



    def values_clause(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Values_clauseContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 836
        self.enterRecursionRule(localctx, 836, self.RULE_values_clause, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6752
            self.match(self.VALUES)
            self.state = 6753 
            self.ctext_row()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Values_clauseContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_values_clause)
                    self.state = 6755
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6756
                    self.match(self.T__11)
                    self.state = 6757 
                    self.ctext_row() 
                self.state = 6762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.From_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(SqlParser.From_listContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_from_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFrom_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = SqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_from_clause)
        try:
            self.state = 6766
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6763
                self.match(self.FROM)
                self.state = 6764 
                self.from_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.From_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(SqlParser.From_listContext,0)


        def table_ref(self):
            return self.getTypedRuleContext(SqlParser.Table_refContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_from_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFrom_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFrom_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFrom_list(self)
            else:
                return visitor.visitChildren(self)



    def from_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.From_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 840
        self.enterRecursionRule(localctx, 840, self.RULE_from_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6769 
            self.table_ref()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.From_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_from_list)
                    self.state = 6771
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6772
                    self.match(self.T__11)
                    self.state = 6773 
                    self.table_ref() 
                self.state = 6778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Table_refContext, self).__init__(parent, invokingState)
            self.parser = parser

        def joined_table(self):
            return self.getTypedRuleContext(SqlParser.Joined_tableContext,0)


        def table_ref2(self):
            return self.getTypedRuleContext(SqlParser.Table_ref2Context,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_ref

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTable_ref(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTable_ref(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTable_ref(self)
            else:
                return visitor.visitChildren(self)




    def table_ref(self):

        localctx = SqlParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_table_ref)
        try:
            self.state = 6781
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6779 
                self.joined_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6780 
                self.table_ref2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Table_ref2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def alias_clause(self):
            return self.getTypedRuleContext(SqlParser.Alias_clauseContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def func_table(self):
            return self.getTypedRuleContext(SqlParser.Func_tableContext,0)


        def tableFuncElementList(self):
            return self.getTypedRuleContext(SqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_ref2

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTable_ref2(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTable_ref2(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTable_ref2(self)
            else:
                return visitor.visitChildren(self)




    def table_ref2(self):

        localctx = SqlParser.Table_ref2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_table_ref2)
        try:
            self.state = 6814
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6783 
                self.relation_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6784 
                self.relation_expr()
                self.state = 6785 
                self.alias_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6787 
                self.func_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6788 
                self.func_table()
                self.state = 6789 
                self.alias_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6791 
                self.func_table()
                self.state = 6792
                self.match(self.AS)
                self.state = 6793
                self.match(self.T__6)
                self.state = 6794 
                self.tableFuncElementList(0)
                self.state = 6795
                self.match(self.T__13)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6797 
                self.func_table()
                self.state = 6798
                self.match(self.AS)
                self.state = 6799 
                self.colId()
                self.state = 6800
                self.match(self.T__6)
                self.state = 6801 
                self.tableFuncElementList(0)
                self.state = 6802
                self.match(self.T__13)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6804 
                self.func_table()
                self.state = 6805 
                self.colId()
                self.state = 6806
                self.match(self.T__6)
                self.state = 6807 
                self.tableFuncElementList(0)
                self.state = 6808
                self.match(self.T__13)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6810 
                self.select_with_parens(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6811 
                self.select_with_parens(0)
                self.state = 6812 
                self.alias_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Joined_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Joined_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SqlParser.JOIN, 0)

        def join_type(self):
            return self.getTypedRuleContext(SqlParser.Join_typeContext,0)


        def NATURAL(self):
            return self.getToken(SqlParser.NATURAL, 0)

        def joined_table(self):
            return self.getTypedRuleContext(SqlParser.Joined_tableContext,0)


        def CROSS(self):
            return self.getToken(SqlParser.CROSS, 0)

        def table_ref2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_ref2Context)
            else:
                return self.getTypedRuleContext(SqlParser.Table_ref2Context,i)


        def alias_clause(self):
            return self.getTypedRuleContext(SqlParser.Alias_clauseContext,0)


        def join_qual(self):
            return self.getTypedRuleContext(SqlParser.Join_qualContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_joined_table

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterJoined_table(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitJoined_table(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitJoined_table(self)
            else:
                return visitor.visitChildren(self)




    def joined_table(self):

        localctx = SqlParser.Joined_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_joined_table)
        try:
            self.state = 6849
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6816
                self.match(self.T__6)
                self.state = 6817 
                self.joined_table()
                self.state = 6818
                self.match(self.T__13)
                self.state = 6820
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 6819 
                    self.alias_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6822 
                self.table_ref2()
                self.state = 6823
                self.match(self.CROSS)
                self.state = 6824
                self.match(self.JOIN)
                self.state = 6825 
                self.table_ref2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6827 
                self.table_ref2()
                self.state = 6828 
                self.join_type()
                self.state = 6829
                self.match(self.JOIN)
                self.state = 6830 
                self.table_ref2()
                self.state = 6831 
                self.join_qual()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6833 
                self.table_ref2()
                self.state = 6834
                self.match(self.JOIN)
                self.state = 6835 
                self.table_ref2()
                self.state = 6836 
                self.join_qual()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6838 
                self.table_ref2()
                self.state = 6839
                self.match(self.NATURAL)
                self.state = 6840 
                self.join_type()
                self.state = 6841
                self.match(self.JOIN)
                self.state = 6842 
                self.table_ref2()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6844 
                self.table_ref2()
                self.state = 6845
                self.match(self.NATURAL)
                self.state = 6846
                self.match(self.JOIN)
                self.state = 6847 
                self.table_ref2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Alias_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alias_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAlias_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAlias_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAlias_clause(self)
            else:
                return visitor.visitChildren(self)




    def alias_clause(self):

        localctx = SqlParser.Alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_alias_clause)
        try:
            self.state = 6865
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6851
                self.match(self.AS)
                self.state = 6852 
                self.colId()
                self.state = 6853
                self.match(self.T__6)
                self.state = 6854 
                self.name_list(0)
                self.state = 6855
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6857
                self.match(self.AS)
                self.state = 6858 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6859 
                self.colId()
                self.state = 6860
                self.match(self.T__6)
                self.state = 6861 
                self.name_list(0)
                self.state = 6862
                self.match(self.T__13)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6864 
                self.colId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Join_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUTER_P(self):
            return self.getToken(SqlParser.OUTER_P, 0)

        def FULL(self):
            return self.getToken(SqlParser.FULL, 0)

        def INNER_P(self):
            return self.getToken(SqlParser.INNER_P, 0)

        def LEFT(self):
            return self.getToken(SqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_join_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterJoin_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitJoin_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = SqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 6880
            token = self._input.LA(1)
            if token in [self.FULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6867
                self.match(self.FULL)
                self.state = 6869
                _la = self._input.LA(1)
                if _la==SqlParser.OUTER_P:
                    self.state = 6868
                    self.match(self.OUTER_P)



            elif token in [self.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6871
                self.match(self.LEFT)
                self.state = 6873
                _la = self._input.LA(1)
                if _la==SqlParser.OUTER_P:
                    self.state = 6872
                    self.match(self.OUTER_P)



            elif token in [self.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6875
                self.match(self.RIGHT)
                self.state = 6877
                _la = self._input.LA(1)
                if _la==SqlParser.OUTER_P:
                    self.state = 6876
                    self.match(self.OUTER_P)



            elif token in [self.INNER_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6879
                self.match(self.INNER_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_qualContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Join_qualContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_join_qual

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterJoin_qual(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitJoin_qual(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitJoin_qual(self)
            else:
                return visitor.visitChildren(self)




    def join_qual(self):

        localctx = SqlParser.Join_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_join_qual)
        try:
            self.state = 6889
            token = self._input.LA(1)
            if token in [self.USING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6882
                self.match(self.USING)
                self.state = 6883
                self.match(self.T__6)
                self.state = 6884 
                self.name_list(0)
                self.state = 6885
                self.match(self.T__13)

            elif token in [self.ON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6887
                self.match(self.ON)
                self.state = 6888 
                self.a_expr(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Relation_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def ONLY(self):
            return self.getToken(SqlParser.ONLY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_relation_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRelation_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRelation_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRelation_expr(self)
            else:
                return visitor.visitChildren(self)




    def relation_expr(self):

        localctx = SqlParser.Relation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_relation_expr)
        try:
            self.state = 6902
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6891 
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6892 
                self.qualified_name()
                self.state = 6893
                self.match(self.T__7)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6895
                self.match(self.ONLY)
                self.state = 6896 
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6897
                self.match(self.ONLY)
                self.state = 6898
                self.match(self.T__6)
                self.state = 6899 
                self.qualified_name()
                self.state = 6900
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Relation_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def relation_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Relation_expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_relation_expr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRelation_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRelation_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRelation_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def relation_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Relation_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 856
        self.enterRecursionRule(localctx, 856, self.RULE_relation_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6905 
            self.relation_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Relation_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation_expr_list)
                    self.state = 6907
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6908
                    self.match(self.T__11)
                    self.state = 6909 
                    self.relation_expr() 
                self.state = 6914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Relation_expr_opt_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Relation_expr_opt_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def relation_expr(self):
            return self.getTypedRuleContext(SqlParser.Relation_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_relation_expr_opt_alias

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRelation_expr_opt_alias(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRelation_expr_opt_alias(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRelation_expr_opt_alias(self)
            else:
                return visitor.visitChildren(self)




    def relation_expr_opt_alias(self):

        localctx = SqlParser.Relation_expr_opt_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_relation_expr_opt_alias)
        try:
            self.state = 6923
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6915 
                self.relation_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6916 
                self.relation_expr()
                self.state = 6917 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6919 
                self.relation_expr()
                self.state = 6920
                self.match(self.AS)
                self.state = 6921 
                self.colId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(SqlParser.Func_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_table

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_table(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_table(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_table(self)
            else:
                return visitor.visitChildren(self)




    def func_table(self):

        localctx = SqlParser.Func_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_func_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6925 
            self.func_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Where_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_where_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWhere_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = SqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_where_clause)
        try:
            self.state = 6930
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6927
                self.match(self.WHERE)
                self.state = 6928 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_or_current_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Where_or_current_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(SqlParser.Cursor_nameContext,0)


        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def CURRENT_P(self):
            return self.getToken(SqlParser.CURRENT_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_where_or_current_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWhere_or_current_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWhere_or_current_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWhere_or_current_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_or_current_clause(self):

        localctx = SqlParser.Where_or_current_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_where_or_current_clause)
        try:
            self.state = 6939
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6932
                self.match(self.WHERE)
                self.state = 6933 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6934
                self.match(self.WHERE)
                self.state = 6935
                self.match(self.CURRENT_P)
                self.state = 6936
                self.match(self.OF)
                self.state = 6937 
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpttableFuncElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.OpttableFuncElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElementList(self):
            return self.getTypedRuleContext(SqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opttableFuncElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpttableFuncElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpttableFuncElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpttableFuncElementList(self)
            else:
                return visitor.visitChildren(self)




    def opttableFuncElementList(self):

        localctx = SqlParser.OpttableFuncElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_opttableFuncElementList)
        try:
            self.state = 6943
            token = self._input.LA(1)
            if token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6941 
                self.tableFuncElementList(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableFuncElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableFuncElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableFuncElement(self):
            return self.getTypedRuleContext(SqlParser.TableFuncElementContext,0)


        def tableFuncElementList(self):
            return self.getTypedRuleContext(SqlParser.TableFuncElementListContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_tableFuncElementList

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableFuncElementList(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableFuncElementList(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableFuncElementList(self)
            else:
                return visitor.visitChildren(self)



    def tableFuncElementList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.TableFuncElementListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 868
        self.enterRecursionRule(localctx, 868, self.RULE_tableFuncElementList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6946 
            self.tableFuncElement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6953
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.TableFuncElementListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableFuncElementList)
                    self.state = 6948
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 6949
                    self.match(self.T__11)
                    self.state = 6950 
                    self.tableFuncElement() 
                self.state = 6955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableFuncElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TableFuncElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def opt_collate_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_collate_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_tableFuncElement

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTableFuncElement(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTableFuncElement(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTableFuncElement(self)
            else:
                return visitor.visitChildren(self)




    def tableFuncElement(self):

        localctx = SqlParser.TableFuncElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_tableFuncElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6956 
            self.colId()
            self.state = 6957 
            self.typename()
            self.state = 6958 
            self.opt_collate_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.TypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SETOF(self):
            return self.getToken(SqlParser.SETOF, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(SqlParser.SimpletypenameContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(SqlParser.Opt_array_boundsContext,0)


        def ARRAY(self):
            return self.getToken(SqlParser.ARRAY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_typename

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTypename(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTypename(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTypename(self)
            else:
                return visitor.visitChildren(self)




    def typename(self):

        localctx = SqlParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_typename)
        try:
            self.state = 6987
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6960 
                self.simpletypename()
                self.state = 6961 
                self.opt_array_bounds(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6963
                self.match(self.SETOF)
                self.state = 6964 
                self.simpletypename()
                self.state = 6965 
                self.opt_array_bounds(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6967 
                self.simpletypename()
                self.state = 6968
                self.match(self.ARRAY)
                self.state = 6969
                self.match(self.T__9)
                self.state = 6970 
                self.iConst()
                self.state = 6971
                self.match(self.T__16)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6973
                self.match(self.SETOF)
                self.state = 6974 
                self.simpletypename()
                self.state = 6975
                self.match(self.ARRAY)
                self.state = 6976
                self.match(self.T__9)
                self.state = 6977 
                self.iConst()
                self.state = 6978
                self.match(self.T__16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6980 
                self.simpletypename()
                self.state = 6981
                self.match(self.ARRAY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6983
                self.match(self.SETOF)
                self.state = 6984 
                self.simpletypename()
                self.state = 6985
                self.match(self.ARRAY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_array_boundsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_array_boundsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(SqlParser.Opt_array_boundsContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_array_bounds

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_array_bounds(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_array_bounds(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_array_bounds(self)
            else:
                return visitor.visitChildren(self)



    def opt_array_bounds(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Opt_array_boundsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 874
        self.enterRecursionRule(localctx, 874, self.RULE_opt_array_bounds, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 7000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,371,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6998
                    la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.Opt_array_boundsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_array_bounds)
                        self.state = 6990
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6991
                        self.match(self.T__9)
                        self.state = 6992
                        self.match(self.T__16)
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.Opt_array_boundsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_array_bounds)
                        self.state = 6993
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6994
                        self.match(self.T__9)
                        self.state = 6995 
                        self.iConst()
                        self.state = 6996
                        self.match(self.T__16)
                        pass

             
                self.state = 7002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SimpletypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SimpletypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_interval(self):
            return self.getTypedRuleContext(SqlParser.Opt_intervalContext,0)


        def constDatetime(self):
            return self.getTypedRuleContext(SqlParser.ConstDatetimeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(SqlParser.NumericContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(SqlParser.ConstIntervalContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def character(self):
            return self.getTypedRuleContext(SqlParser.CharacterContext,0)


        def genericType(self):
            return self.getTypedRuleContext(SqlParser.GenericTypeContext,0)


        def bit(self):
            return self.getTypedRuleContext(SqlParser.BitContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_simpletypename

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSimpletypename(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSimpletypename(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSimpletypename(self)
            else:
                return visitor.visitChildren(self)




    def simpletypename(self):

        localctx = SqlParser.SimpletypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_simpletypename)
        try:
            self.state = 7017
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7003 
                self.genericType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7004 
                self.numeric()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7005 
                self.bit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7006 
                self.character()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7007 
                self.constDatetime()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7008 
                self.constInterval()
                self.state = 7009 
                self.opt_interval()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7011 
                self.constInterval()
                self.state = 7012
                self.match(self.T__6)
                self.state = 7013 
                self.iConst()
                self.state = 7014
                self.match(self.T__13)
                self.state = 7015 
                self.opt_interval()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConsttypenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConsttypenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constDatetime(self):
            return self.getTypedRuleContext(SqlParser.ConstDatetimeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(SqlParser.NumericContext,0)


        def constbit(self):
            return self.getTypedRuleContext(SqlParser.ConstbitContext,0)


        def constcharacter(self):
            return self.getTypedRuleContext(SqlParser.ConstcharacterContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_consttypename

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConsttypename(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConsttypename(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConsttypename(self)
            else:
                return visitor.visitChildren(self)




    def consttypename(self):

        localctx = SqlParser.ConsttypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_consttypename)
        try:
            self.state = 7023
            token = self._input.LA(1)
            if token in [self.BIGINT, self.BOOLEAN_P, self.DEC, self.DECIMAL_P, self.DOUBLE_P, self.FLOAT_P, self.INT_P, self.INTEGER, self.NUMERIC, self.REAL, self.SMALLINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7019 
                self.numeric()

            elif token in [self.BIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7020 
                self.constbit()

            elif token in [self.CHAR_P, self.CHARACTER, self.NATIONAL, self.NCHAR, self.VARCHAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7021 
                self.constcharacter()

            elif token in [self.TIME, self.TIMESTAMP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7022 
                self.constDatetime()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.GenericTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(SqlParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(SqlParser.AttrsContext,0)


        def opt_type_modifiers(self):
            return self.getTypedRuleContext(SqlParser.Opt_type_modifiersContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_genericType

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterGenericType(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitGenericType(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)




    def genericType(self):

        localctx = SqlParser.GenericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_genericType)
        try:
            self.state = 7032
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7025 
                self.type_function_name()
                self.state = 7026 
                self.opt_type_modifiers()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7028 
                self.type_function_name()
                self.state = 7029 
                self.attrs(0)
                self.state = 7030 
                self.opt_type_modifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_type_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_type_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_type_modifiers

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_type_modifiers(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_type_modifiers(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_type_modifiers(self)
            else:
                return visitor.visitChildren(self)




    def opt_type_modifiers(self):

        localctx = SqlParser.Opt_type_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_opt_type_modifiers)
        try:
            self.state = 7039
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7034
                self.match(self.T__6)
                self.state = 7035 
                self.expr_list(0)
                self.state = 7036
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.NumericContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_P(self):
            return self.getToken(SqlParser.DOUBLE_P, 0)

        def DEC(self):
            return self.getToken(SqlParser.DEC, 0)

        def PRECISION(self):
            return self.getToken(SqlParser.PRECISION, 0)

        def opt_type_modifiers(self):
            return self.getTypedRuleContext(SqlParser.Opt_type_modifiersContext,0)


        def BOOLEAN_P(self):
            return self.getToken(SqlParser.BOOLEAN_P, 0)

        def FLOAT_P(self):
            return self.getToken(SqlParser.FLOAT_P, 0)

        def NUMERIC(self):
            return self.getToken(SqlParser.NUMERIC, 0)

        def opt_float(self):
            return self.getTypedRuleContext(SqlParser.Opt_floatContext,0)


        def DECIMAL_P(self):
            return self.getToken(SqlParser.DECIMAL_P, 0)

        def INT_P(self):
            return self.getToken(SqlParser.INT_P, 0)

        def REAL(self):
            return self.getToken(SqlParser.REAL, 0)

        def INTEGER(self):
            return self.getToken(SqlParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(SqlParser.BIGINT, 0)

        def SMALLINT(self):
            return self.getToken(SqlParser.SMALLINT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_numeric

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterNumeric(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitNumeric(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = SqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_numeric)
        try:
            self.state = 7057
            token = self._input.LA(1)
            if token in [self.INT_P]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7041
                self.match(self.INT_P)

            elif token in [self.INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7042
                self.match(self.INTEGER)

            elif token in [self.SMALLINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7043
                self.match(self.SMALLINT)

            elif token in [self.BIGINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7044
                self.match(self.BIGINT)

            elif token in [self.REAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7045
                self.match(self.REAL)

            elif token in [self.FLOAT_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7046
                self.match(self.FLOAT_P)
                self.state = 7047 
                self.opt_float()

            elif token in [self.DOUBLE_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7048
                self.match(self.DOUBLE_P)
                self.state = 7049
                self.match(self.PRECISION)

            elif token in [self.DECIMAL_P]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7050
                self.match(self.DECIMAL_P)
                self.state = 7051 
                self.opt_type_modifiers()

            elif token in [self.DEC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7052
                self.match(self.DEC)
                self.state = 7053 
                self.opt_type_modifiers()

            elif token in [self.NUMERIC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7054
                self.match(self.NUMERIC)
                self.state = 7055 
                self.opt_type_modifiers()

            elif token in [self.BOOLEAN_P]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7056
                self.match(self.BOOLEAN_P)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_floatContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_floatContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_float

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_float(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_float(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_float(self)
            else:
                return visitor.visitChildren(self)




    def opt_float(self):

        localctx = SqlParser.Opt_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_opt_float)
        try:
            self.state = 7064
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7059
                self.match(self.T__6)
                self.state = 7060 
                self.iConst()
                self.state = 7061
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.BitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def bitWithLength(self):
            return self.getTypedRuleContext(SqlParser.BitWithLengthContext,0)


        def bitWithoutLength(self):
            return self.getTypedRuleContext(SqlParser.BitWithoutLengthContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_bit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterBit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitBit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitBit(self)
            else:
                return visitor.visitChildren(self)




    def bit(self):

        localctx = SqlParser.BitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_bit)
        try:
            self.state = 7068
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7066 
                self.bitWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7067 
                self.bitWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstbitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstbitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def bitWithLength(self):
            return self.getTypedRuleContext(SqlParser.BitWithLengthContext,0)


        def bitWithoutLength(self):
            return self.getTypedRuleContext(SqlParser.BitWithoutLengthContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constbit

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstbit(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstbit(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstbit(self)
            else:
                return visitor.visitChildren(self)




    def constbit(self):

        localctx = SqlParser.ConstbitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_constbit)
        try:
            self.state = 7072
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7070 
                self.bitWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7071 
                self.bitWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitWithLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.BitWithLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(SqlParser.BIT, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def opt_varying(self):
            return self.getTypedRuleContext(SqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_bitWithLength

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterBitWithLength(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitBitWithLength(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitBitWithLength(self)
            else:
                return visitor.visitChildren(self)




    def bitWithLength(self):

        localctx = SqlParser.BitWithLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_bitWithLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7074
            self.match(self.BIT)
            self.state = 7075 
            self.opt_varying()
            self.state = 7076
            self.match(self.T__6)
            self.state = 7077 
            self.expr_list(0)
            self.state = 7078
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitWithoutLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.BitWithoutLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(SqlParser.BIT, 0)

        def opt_varying(self):
            return self.getTypedRuleContext(SqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_bitWithoutLength

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterBitWithoutLength(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitBitWithoutLength(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitBitWithoutLength(self)
            else:
                return visitor.visitChildren(self)




    def bitWithoutLength(self):

        localctx = SqlParser.BitWithoutLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_bitWithoutLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7080
            self.match(self.BIT)
            self.state = 7081 
            self.opt_varying()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CharacterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def characterWithoutLength(self):
            return self.getTypedRuleContext(SqlParser.CharacterWithoutLengthContext,0)


        def characterWithLength(self):
            return self.getTypedRuleContext(SqlParser.CharacterWithLengthContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_character

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCharacter(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCharacter(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCharacter(self)
            else:
                return visitor.visitChildren(self)




    def character(self):

        localctx = SqlParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_character)
        try:
            self.state = 7085
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7083 
                self.characterWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7084 
                self.characterWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstcharacterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstcharacterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def characterWithoutLength(self):
            return self.getTypedRuleContext(SqlParser.CharacterWithoutLengthContext,0)


        def characterWithLength(self):
            return self.getTypedRuleContext(SqlParser.CharacterWithLengthContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constcharacter

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstcharacter(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstcharacter(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstcharacter(self)
            else:
                return visitor.visitChildren(self)




    def constcharacter(self):

        localctx = SqlParser.ConstcharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_constcharacter)
        try:
            self.state = 7089
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7087 
                self.characterWithLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7088 
                self.characterWithoutLength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterWithLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CharacterWithLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_charset(self):
            return self.getTypedRuleContext(SqlParser.Opt_charsetContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def character_def(self):
            return self.getTypedRuleContext(SqlParser.Character_defContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_characterWithLength

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCharacterWithLength(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCharacterWithLength(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCharacterWithLength(self)
            else:
                return visitor.visitChildren(self)




    def characterWithLength(self):

        localctx = SqlParser.CharacterWithLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_characterWithLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7091 
            self.character_def()
            self.state = 7092
            self.match(self.T__6)
            self.state = 7093 
            self.iConst()
            self.state = 7094
            self.match(self.T__13)
            self.state = 7095 
            self.opt_charset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterWithoutLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.CharacterWithoutLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_charset(self):
            return self.getTypedRuleContext(SqlParser.Opt_charsetContext,0)


        def character_def(self):
            return self.getTypedRuleContext(SqlParser.Character_defContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_characterWithoutLength

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCharacterWithoutLength(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCharacterWithoutLength(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCharacterWithoutLength(self)
            else:
                return visitor.visitChildren(self)




    def characterWithoutLength(self):

        localctx = SqlParser.CharacterWithoutLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_characterWithoutLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7097 
            self.character_def()
            self.state = 7098 
            self.opt_charset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Character_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Character_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(SqlParser.NATIONAL, 0)

        def CHARACTER(self):
            return self.getToken(SqlParser.CHARACTER, 0)

        def CHAR_P(self):
            return self.getToken(SqlParser.CHAR_P, 0)

        def NCHAR(self):
            return self.getToken(SqlParser.NCHAR, 0)

        def VARCHAR(self):
            return self.getToken(SqlParser.VARCHAR, 0)

        def opt_varying(self):
            return self.getTypedRuleContext(SqlParser.Opt_varyingContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_character_def

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCharacter_def(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCharacter_def(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCharacter_def(self)
            else:
                return visitor.visitChildren(self)




    def character_def(self):

        localctx = SqlParser.Character_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_character_def)
        try:
            self.state = 7113
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7100
                self.match(self.CHARACTER)
                self.state = 7101 
                self.opt_varying()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7102
                self.match(self.CHAR_P)
                self.state = 7103 
                self.opt_varying()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7104
                self.match(self.VARCHAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7105
                self.match(self.NATIONAL)
                self.state = 7106
                self.match(self.CHARACTER)
                self.state = 7107 
                self.opt_varying()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7108
                self.match(self.NATIONAL)
                self.state = 7109
                self.match(self.CHAR_P)
                self.state = 7110 
                self.opt_varying()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7111
                self.match(self.NCHAR)
                self.state = 7112 
                self.opt_varying()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_varyingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_varyingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(SqlParser.VARYING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_varying

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_varying(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_varying(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_varying(self)
            else:
                return visitor.visitChildren(self)




    def opt_varying(self):

        localctx = SqlParser.Opt_varyingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_opt_varying)
        try:
            self.state = 7117
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7115
                self.match(self.VARYING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_charsetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_charsetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def CHARACTER(self):
            return self.getToken(SqlParser.CHARACTER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_charset

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_charset(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_charset(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_charset(self)
            else:
                return visitor.visitChildren(self)




    def opt_charset(self):

        localctx = SqlParser.Opt_charsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_opt_charset)
        try:
            self.state = 7123
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7119
                self.match(self.CHARACTER)
                self.state = 7120
                self.match(self.SET)
                self.state = 7121 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDatetimeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstDatetimeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(SqlParser.TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def opt_timezone(self):
            return self.getTypedRuleContext(SqlParser.Opt_timezoneContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_constDatetime

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstDatetime(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstDatetime(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstDatetime(self)
            else:
                return visitor.visitChildren(self)




    def constDatetime(self):

        localctx = SqlParser.ConstDatetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_constDatetime)
        try:
            self.state = 7141
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7125
                self.match(self.TIMESTAMP)
                self.state = 7126
                self.match(self.T__6)
                self.state = 7127 
                self.iConst()
                self.state = 7128
                self.match(self.T__13)
                self.state = 7129 
                self.opt_timezone()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7131
                self.match(self.TIMESTAMP)
                self.state = 7132 
                self.opt_timezone()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7133
                self.match(self.TIME)
                self.state = 7134
                self.match(self.T__6)
                self.state = 7135 
                self.iConst()
                self.state = 7136
                self.match(self.T__13)
                self.state = 7137 
                self.opt_timezone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7139
                self.match(self.TIME)
                self.state = 7140 
                self.opt_timezone()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ConstIntervalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_constInterval

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterConstInterval(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitConstInterval(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitConstInterval(self)
            else:
                return visitor.visitChildren(self)




    def constInterval(self):

        localctx = SqlParser.ConstIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_constInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7143
            self.match(self.INTERVAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_timezoneContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_timezoneContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def WITH_TIME(self):
            return self.getToken(SqlParser.WITH_TIME, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_timezone

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_timezone(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_timezone(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_timezone(self)
            else:
                return visitor.visitChildren(self)




    def opt_timezone(self):

        localctx = SqlParser.Opt_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_opt_timezone)
        try:
            self.state = 7151
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7145
                self.match(self.WITH_TIME)
                self.state = 7146
                self.match(self.ZONE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7147
                self.match(self.WITHOUT)
                self.state = 7148
                self.match(self.TIME)
                self.state = 7149
                self.match(self.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_intervalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_intervalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MONTH_P(self):
            return self.getToken(SqlParser.MONTH_P, 0)

        def MINUTE_P(self):
            return self.getToken(SqlParser.MINUTE_P, 0)

        def HOUR_P(self):
            return self.getToken(SqlParser.HOUR_P, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def YEAR_P(self):
            return self.getToken(SqlParser.YEAR_P, 0)

        def interval_second(self):
            return self.getTypedRuleContext(SqlParser.Interval_secondContext,0)


        def DAY_P(self):
            return self.getToken(SqlParser.DAY_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_interval

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_interval(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_interval(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_interval(self)
            else:
                return visitor.visitChildren(self)




    def opt_interval(self):

        localctx = SqlParser.Opt_intervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_opt_interval)
        try:
            self.state = 7181
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7153
                self.match(self.YEAR_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7154
                self.match(self.MONTH_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7155
                self.match(self.DAY_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7156
                self.match(self.HOUR_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7157
                self.match(self.MINUTE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7158 
                self.interval_second()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7159
                self.match(self.YEAR_P)
                self.state = 7160
                self.match(self.TO)
                self.state = 7161
                self.match(self.MONTH_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7162
                self.match(self.DAY_P)
                self.state = 7163
                self.match(self.TO)
                self.state = 7164
                self.match(self.HOUR_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7165
                self.match(self.DAY_P)
                self.state = 7166
                self.match(self.TO)
                self.state = 7167
                self.match(self.MINUTE_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7168
                self.match(self.DAY_P)
                self.state = 7169
                self.match(self.TO)
                self.state = 7170 
                self.interval_second()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7171
                self.match(self.HOUR_P)
                self.state = 7172
                self.match(self.TO)
                self.state = 7173
                self.match(self.MINUTE_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7174
                self.match(self.HOUR_P)
                self.state = 7175
                self.match(self.TO)
                self.state = 7176 
                self.interval_second()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7177
                self.match(self.MINUTE_P)
                self.state = 7178
                self.match(self.TO)
                self.state = 7179 
                self.interval_second()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_secondContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Interval_secondContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SECOND_P(self):
            return self.getToken(SqlParser.SECOND_P, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_interval_second

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterInterval_second(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitInterval_second(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitInterval_second(self)
            else:
                return visitor.visitChildren(self)




    def interval_second(self):

        localctx = SqlParser.Interval_secondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_interval_second)
        try:
            self.state = 7189
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7183
                self.match(self.SECOND_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7184
                self.match(self.SECOND_P)
                self.state = 7185
                self.match(self.T__6)
                self.state = 7186 
                self.iConst()
                self.state = 7187
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class A_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.A_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def AND(self):
            return self.getToken(SqlParser.AND, 0)

        def subquery_Op(self):
            return self.getTypedRuleContext(SqlParser.Subquery_OpContext,0)


        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.B_exprContext,i)


        def row(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.RowContext)
            else:
                return self.getTypedRuleContext(SqlParser.RowContext,i)


        def TYPECAST(self):
            return self.getToken(SqlParser.TYPECAST, 0)

        def IS(self):
            return self.getToken(SqlParser.IS, 0)

        def UNKNOWN(self):
            return self.getToken(SqlParser.UNKNOWN, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def SIMILAR(self):
            return self.getToken(SqlParser.SIMILAR, 0)

        def sub_type(self):
            return self.getTypedRuleContext(SqlParser.Sub_typeContext,0)


        def NOTNULL(self):
            return self.getToken(SqlParser.NOTNULL, 0)

        def ILIKE(self):
            return self.getToken(SqlParser.ILIKE, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def FALSE_P(self):
            return self.getToken(SqlParser.FALSE_P, 0)

        def LIKE(self):
            return self.getToken(SqlParser.LIKE, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def opt_asymmetric(self):
            return self.getTypedRuleContext(SqlParser.Opt_asymmetricContext,0)


        def ESCAPE(self):
            return self.getToken(SqlParser.ESCAPE, 0)

        def SYMMETRIC(self):
            return self.getToken(SqlParser.SYMMETRIC, 0)

        def TRUE_P(self):
            return self.getToken(SqlParser.TRUE_P, 0)

        def DOCUMENT_P(self):
            return self.getToken(SqlParser.DOCUMENT_P, 0)

        def ISNULL(self):
            return self.getToken(SqlParser.ISNULL, 0)

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.A_exprContext,i)


        def OR(self):
            return self.getToken(SqlParser.OR, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def OVERLAPS(self):
            return self.getToken(SqlParser.OVERLAPS, 0)

        def AT(self):
            return self.getToken(SqlParser.AT, 0)

        def UNIQUE(self):
            return self.getToken(SqlParser.UNIQUE, 0)

        def qual_Op(self):
            return self.getTypedRuleContext(SqlParser.Qual_OpContext,0)


        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def BETWEEN(self):
            return self.getToken(SqlParser.BETWEEN, 0)

        def c_expr(self):
            return self.getTypedRuleContext(SqlParser.C_exprContext,0)


        def COLLATE(self):
            return self.getToken(SqlParser.COLLATE, 0)

        def in_expr(self):
            return self.getTypedRuleContext(SqlParser.In_exprContext,0)


        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_a_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterA_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitA_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitA_expr(self)
            else:
                return visitor.visitChildren(self)



    def a_expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.A_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 920
        self.enterRecursionRule(localctx, 920, self.RULE_a_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7208
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 7192
                self.match(self.T__10)
                self.state = 7193 
                self.a_expr(55)
                pass

            elif la_ == 2:
                self.state = 7194
                self.match(self.T__8)
                self.state = 7195 
                self.a_expr(54)
                pass

            elif la_ == 3:
                self.state = 7196 
                self.qual_Op()
                self.state = 7197 
                self.a_expr(43)
                pass

            elif la_ == 4:
                self.state = 7199
                self.match(self.NOT)
                self.state = 7200 
                self.a_expr(39)
                pass

            elif la_ == 5:
                self.state = 7201 
                self.c_expr()
                pass

            elif la_ == 6:
                self.state = 7202 
                self.row()
                self.state = 7203
                self.match(self.OVERLAPS)
                self.state = 7204 
                self.row()
                pass

            elif la_ == 7:
                self.state = 7206
                self.match(self.UNIQUE)
                self.state = 7207 
                self.select_with_parens(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7438
                    la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7210
                        if not self.precpred(self._ctx, 56):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 7211
                        self.match(self.AT)
                        self.state = 7212
                        self.match(self.TIME)
                        self.state = 7213
                        self.match(self.ZONE)
                        self.state = 7214 
                        self.a_expr(57)
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7215
                        if not self.precpred(self._ctx, 53):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 53)")
                        self.state = 7216
                        self.match(self.T__10)
                        self.state = 7217 
                        self.a_expr(54)
                        pass

                    elif la_ == 3:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7218
                        if not self.precpred(self._ctx, 52):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 7219
                        self.match(self.T__8)
                        self.state = 7220 
                        self.a_expr(53)
                        pass

                    elif la_ == 4:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7221
                        if not self.precpred(self._ctx, 51):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 7222
                        self.match(self.T__7)
                        self.state = 7223 
                        self.a_expr(52)
                        pass

                    elif la_ == 5:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7224
                        if not self.precpred(self._ctx, 50):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 7225
                        self.match(self.T__0)
                        self.state = 7226 
                        self.a_expr(51)
                        pass

                    elif la_ == 6:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7227
                        if not self.precpred(self._ctx, 49):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 7228
                        self.match(self.T__15)
                        self.state = 7229 
                        self.a_expr(50)
                        pass

                    elif la_ == 7:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7230
                        if not self.precpred(self._ctx, 48):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 7231
                        self.match(self.T__14)
                        self.state = 7232 
                        self.a_expr(49)
                        pass

                    elif la_ == 8:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7233
                        if not self.precpred(self._ctx, 47):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 7234
                        self.match(self.T__4)
                        self.state = 7235 
                        self.a_expr(48)
                        pass

                    elif la_ == 9:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7236
                        if not self.precpred(self._ctx, 46):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 7237
                        self.match(self.T__1)
                        self.state = 7238 
                        self.a_expr(47)
                        pass

                    elif la_ == 10:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7239
                        if not self.precpred(self._ctx, 45):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 7240
                        self.match(self.T__3)
                        self.state = 7241 
                        self.a_expr(46)
                        pass

                    elif la_ == 11:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7242
                        if not self.precpred(self._ctx, 44):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 7243 
                        self.qual_Op()
                        self.state = 7244 
                        self.a_expr(45)
                        pass

                    elif la_ == 12:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7246
                        if not self.precpred(self._ctx, 41):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 7247
                        self.match(self.AND)
                        self.state = 7248 
                        self.a_expr(42)
                        pass

                    elif la_ == 13:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7249
                        if not self.precpred(self._ctx, 40):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 7250
                        self.match(self.OR)
                        self.state = 7251 
                        self.a_expr(41)
                        pass

                    elif la_ == 14:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7252
                        if not self.precpred(self._ctx, 38):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 7253
                        self.match(self.LIKE)
                        self.state = 7254 
                        self.a_expr(39)
                        pass

                    elif la_ == 15:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7255
                        if not self.precpred(self._ctx, 37):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 7256
                        self.match(self.LIKE)
                        self.state = 7257 
                        self.a_expr(0)
                        self.state = 7258
                        self.match(self.ESCAPE)
                        self.state = 7259 
                        self.a_expr(38)
                        pass

                    elif la_ == 16:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7261
                        if not self.precpred(self._ctx, 36):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 7262
                        self.match(self.NOT)
                        self.state = 7263
                        self.match(self.LIKE)
                        self.state = 7264 
                        self.a_expr(37)
                        pass

                    elif la_ == 17:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7265
                        if not self.precpred(self._ctx, 35):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 7266
                        self.match(self.NOT)
                        self.state = 7267
                        self.match(self.LIKE)
                        self.state = 7268 
                        self.a_expr(0)
                        self.state = 7269
                        self.match(self.ESCAPE)
                        self.state = 7270 
                        self.a_expr(36)
                        pass

                    elif la_ == 18:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7272
                        if not self.precpred(self._ctx, 34):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 7273
                        self.match(self.ILIKE)
                        self.state = 7274 
                        self.a_expr(35)
                        pass

                    elif la_ == 19:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7275
                        if not self.precpred(self._ctx, 33):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 7276
                        self.match(self.ILIKE)
                        self.state = 7277 
                        self.a_expr(0)
                        self.state = 7278
                        self.match(self.ESCAPE)
                        self.state = 7279 
                        self.a_expr(34)
                        pass

                    elif la_ == 20:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7281
                        if not self.precpred(self._ctx, 32):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 7282
                        self.match(self.NOT)
                        self.state = 7283
                        self.match(self.ILIKE)
                        self.state = 7284 
                        self.a_expr(33)
                        pass

                    elif la_ == 21:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7285
                        if not self.precpred(self._ctx, 31):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 7286
                        self.match(self.NOT)
                        self.state = 7287
                        self.match(self.ILIKE)
                        self.state = 7288 
                        self.a_expr(0)
                        self.state = 7289
                        self.match(self.ESCAPE)
                        self.state = 7290 
                        self.a_expr(32)
                        pass

                    elif la_ == 22:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7292
                        if not self.precpred(self._ctx, 30):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 7293
                        self.match(self.SIMILAR)
                        self.state = 7294
                        self.match(self.TO)
                        self.state = 7295 
                        self.a_expr(31)
                        pass

                    elif la_ == 23:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7296
                        if not self.precpred(self._ctx, 29):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 7297
                        self.match(self.SIMILAR)
                        self.state = 7298
                        self.match(self.TO)
                        self.state = 7299 
                        self.a_expr(0)
                        self.state = 7300
                        self.match(self.ESCAPE)
                        self.state = 7301 
                        self.a_expr(30)
                        pass

                    elif la_ == 24:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7303
                        if not self.precpred(self._ctx, 28):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 7304
                        self.match(self.NOT)
                        self.state = 7305
                        self.match(self.SIMILAR)
                        self.state = 7306
                        self.match(self.TO)
                        self.state = 7307 
                        self.a_expr(29)
                        pass

                    elif la_ == 25:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7308
                        if not self.precpred(self._ctx, 27):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 7309
                        self.match(self.NOT)
                        self.state = 7310
                        self.match(self.SIMILAR)
                        self.state = 7311
                        self.match(self.TO)
                        self.state = 7312 
                        self.a_expr(0)
                        self.state = 7313
                        self.match(self.ESCAPE)
                        self.state = 7314 
                        self.a_expr(28)
                        pass

                    elif la_ == 26:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7316
                        if not self.precpred(self._ctx, 15):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 7317
                        self.match(self.IS)
                        self.state = 7318
                        self.match(self.DISTINCT)
                        self.state = 7319
                        self.match(self.FROM)
                        self.state = 7320 
                        self.a_expr(16)
                        pass

                    elif la_ == 27:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7321
                        if not self.precpred(self._ctx, 14):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 7322
                        self.match(self.IS)
                        self.state = 7323
                        self.match(self.NOT)
                        self.state = 7324
                        self.match(self.DISTINCT)
                        self.state = 7325
                        self.match(self.FROM)
                        self.state = 7326 
                        self.a_expr(15)
                        pass

                    elif la_ == 28:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7327
                        if not self.precpred(self._ctx, 58):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 7328
                        self.match(self.TYPECAST)
                        self.state = 7329 
                        self.typename()
                        pass

                    elif la_ == 29:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7330
                        if not self.precpred(self._ctx, 57):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 7331
                        self.match(self.COLLATE)
                        self.state = 7332 
                        self.any_name()
                        pass

                    elif la_ == 30:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7333
                        if not self.precpred(self._ctx, 42):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 7334 
                        self.qual_Op()
                        pass

                    elif la_ == 31:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7335
                        if not self.precpred(self._ctx, 26):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 7336
                        self.match(self.IS)
                        self.state = 7337
                        self.match(self.NULL_P)
                        pass

                    elif la_ == 32:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7338
                        if not self.precpred(self._ctx, 25):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 7339
                        self.match(self.ISNULL)
                        pass

                    elif la_ == 33:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7340
                        if not self.precpred(self._ctx, 24):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 7341
                        self.match(self.IS)
                        self.state = 7342
                        self.match(self.NOT)
                        self.state = 7343
                        self.match(self.NULL_P)
                        pass

                    elif la_ == 34:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7344
                        if not self.precpred(self._ctx, 23):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 7345
                        self.match(self.NOTNULL)
                        pass

                    elif la_ == 35:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7346
                        if not self.precpred(self._ctx, 21):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 7347
                        self.match(self.IS)
                        self.state = 7348
                        self.match(self.TRUE_P)
                        pass

                    elif la_ == 36:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7349
                        if not self.precpred(self._ctx, 20):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 7350
                        self.match(self.IS)
                        self.state = 7351
                        self.match(self.NOT)
                        self.state = 7352
                        self.match(self.TRUE_P)
                        pass

                    elif la_ == 37:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7353
                        if not self.precpred(self._ctx, 19):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 7354
                        self.match(self.IS)
                        self.state = 7355
                        self.match(self.FALSE_P)
                        pass

                    elif la_ == 38:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7356
                        if not self.precpred(self._ctx, 18):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 7357
                        self.match(self.IS)
                        self.state = 7358
                        self.match(self.NOT)
                        self.state = 7359
                        self.match(self.FALSE_P)
                        pass

                    elif la_ == 39:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7360
                        if not self.precpred(self._ctx, 17):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 7361
                        self.match(self.IS)
                        self.state = 7362
                        self.match(self.UNKNOWN)
                        pass

                    elif la_ == 40:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7363
                        if not self.precpred(self._ctx, 16):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 7364
                        self.match(self.IS)
                        self.state = 7365
                        self.match(self.NOT)
                        self.state = 7366
                        self.match(self.UNKNOWN)
                        pass

                    elif la_ == 41:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7367
                        if not self.precpred(self._ctx, 13):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 7368
                        self.match(self.IS)
                        self.state = 7369
                        self.match(self.OF)
                        self.state = 7370
                        self.match(self.T__6)
                        self.state = 7371 
                        self.type_list(0)
                        self.state = 7372
                        self.match(self.T__13)
                        pass

                    elif la_ == 42:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7374
                        if not self.precpred(self._ctx, 12):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 7375
                        self.match(self.IS)
                        self.state = 7376
                        self.match(self.NOT)
                        self.state = 7377
                        self.match(self.OF)
                        self.state = 7378
                        self.match(self.T__6)
                        self.state = 7379 
                        self.type_list(0)
                        self.state = 7380
                        self.match(self.T__13)
                        pass

                    elif la_ == 43:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7382
                        if not self.precpred(self._ctx, 11):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 7383
                        self.match(self.BETWEEN)
                        self.state = 7384 
                        self.opt_asymmetric()
                        self.state = 7385 
                        self.b_expr(0)
                        self.state = 7386
                        self.match(self.AND)
                        self.state = 7387 
                        self.b_expr(0)
                        pass

                    elif la_ == 44:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7389
                        if not self.precpred(self._ctx, 10):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 7390
                        self.match(self.NOT)
                        self.state = 7391
                        self.match(self.BETWEEN)
                        self.state = 7392 
                        self.opt_asymmetric()
                        self.state = 7393 
                        self.b_expr(0)
                        self.state = 7394
                        self.match(self.AND)
                        self.state = 7395 
                        self.b_expr(0)
                        pass

                    elif la_ == 45:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7397
                        if not self.precpred(self._ctx, 9):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 7398
                        self.match(self.BETWEEN)
                        self.state = 7399
                        self.match(self.SYMMETRIC)
                        self.state = 7400 
                        self.b_expr(0)
                        self.state = 7401
                        self.match(self.AND)
                        self.state = 7402 
                        self.b_expr(0)
                        pass

                    elif la_ == 46:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7404
                        if not self.precpred(self._ctx, 8):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 7405
                        self.match(self.NOT)
                        self.state = 7406
                        self.match(self.BETWEEN)
                        self.state = 7407
                        self.match(self.SYMMETRIC)
                        self.state = 7408 
                        self.b_expr(0)
                        self.state = 7409
                        self.match(self.AND)
                        self.state = 7410 
                        self.b_expr(0)
                        pass

                    elif la_ == 47:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7412
                        if not self.precpred(self._ctx, 7):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 7413
                        self.match(self.IN_P)
                        self.state = 7414 
                        self.in_expr()
                        pass

                    elif la_ == 48:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7415
                        if not self.precpred(self._ctx, 6):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 7416
                        self.match(self.NOT)
                        self.state = 7417
                        self.match(self.IN_P)
                        self.state = 7418 
                        self.in_expr()
                        pass

                    elif la_ == 49:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7419
                        if not self.precpred(self._ctx, 5):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 7420 
                        self.subquery_Op()
                        self.state = 7421 
                        self.sub_type()
                        self.state = 7422 
                        self.select_with_parens(0)
                        pass

                    elif la_ == 50:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7424
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 7425 
                        self.subquery_Op()
                        self.state = 7426 
                        self.sub_type()
                        self.state = 7427
                        self.match(self.T__6)
                        self.state = 7428 
                        self.a_expr(0)
                        self.state = 7429
                        self.match(self.T__13)
                        pass

                    elif la_ == 51:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7431
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7432
                        self.match(self.IS)
                        self.state = 7433
                        self.match(self.DOCUMENT_P)
                        pass

                    elif la_ == 52:
                        localctx = SqlParser.A_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_a_expr)
                        self.state = 7434
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7435
                        self.match(self.IS)
                        self.state = 7436
                        self.match(self.NOT)
                        self.state = 7437
                        self.match(self.DOCUMENT_P)
                        pass

             
                self.state = 7442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class B_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.B_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def c_expr(self):
            return self.getTypedRuleContext(SqlParser.C_exprContext,0)


        def DOCUMENT_P(self):
            return self.getToken(SqlParser.DOCUMENT_P, 0)

        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.B_exprContext,i)


        def TYPECAST(self):
            return self.getToken(SqlParser.TYPECAST, 0)

        def IS(self):
            return self.getToken(SqlParser.IS, 0)

        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def qual_Op(self):
            return self.getTypedRuleContext(SqlParser.Qual_OpContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_b_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterB_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitB_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitB_expr(self)
            else:
                return visitor.visitChildren(self)



    def b_expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.B_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 922
        self.enterRecursionRule(localctx, 922, self.RULE_b_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7452
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 7444
                self.match(self.T__10)
                self.state = 7445 
                self.b_expr(20)
                pass

            elif la_ == 2:
                self.state = 7446
                self.match(self.T__8)
                self.state = 7447 
                self.b_expr(19)
                pass

            elif la_ == 3:
                self.state = 7448 
                self.qual_Op()
                self.state = 7449 
                self.b_expr(8)
                pass

            elif la_ == 4:
                self.state = 7451 
                self.c_expr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7523
                    la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7454
                        if not self.precpred(self._ctx, 18):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 7455
                        self.match(self.T__10)
                        self.state = 7456 
                        self.b_expr(19)
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7457
                        if not self.precpred(self._ctx, 17):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 7458
                        self.match(self.T__8)
                        self.state = 7459 
                        self.b_expr(18)
                        pass

                    elif la_ == 3:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7460
                        if not self.precpred(self._ctx, 16):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 7461
                        self.match(self.T__7)
                        self.state = 7462 
                        self.b_expr(17)
                        pass

                    elif la_ == 4:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7463
                        if not self.precpred(self._ctx, 15):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 7464
                        self.match(self.T__0)
                        self.state = 7465 
                        self.b_expr(16)
                        pass

                    elif la_ == 5:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7466
                        if not self.precpred(self._ctx, 14):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 7467
                        self.match(self.T__15)
                        self.state = 7468 
                        self.b_expr(15)
                        pass

                    elif la_ == 6:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7469
                        if not self.precpred(self._ctx, 13):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 7470
                        self.match(self.T__14)
                        self.state = 7471 
                        self.b_expr(14)
                        pass

                    elif la_ == 7:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7472
                        if not self.precpred(self._ctx, 12):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 7473
                        self.match(self.T__4)
                        self.state = 7474 
                        self.b_expr(13)
                        pass

                    elif la_ == 8:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7475
                        if not self.precpred(self._ctx, 11):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 7476
                        self.match(self.T__1)
                        self.state = 7477 
                        self.b_expr(12)
                        pass

                    elif la_ == 9:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7478
                        if not self.precpred(self._ctx, 10):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 7479
                        self.match(self.T__3)
                        self.state = 7480 
                        self.b_expr(11)
                        pass

                    elif la_ == 10:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7481
                        if not self.precpred(self._ctx, 9):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 7482 
                        self.qual_Op()
                        self.state = 7483 
                        self.b_expr(10)
                        pass

                    elif la_ == 11:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7485
                        if not self.precpred(self._ctx, 6):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 7486
                        self.match(self.IS)
                        self.state = 7487
                        self.match(self.DISTINCT)
                        self.state = 7488
                        self.match(self.FROM)
                        self.state = 7489 
                        self.b_expr(7)
                        pass

                    elif la_ == 12:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7490
                        if not self.precpred(self._ctx, 5):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 7491
                        self.match(self.IS)
                        self.state = 7492
                        self.match(self.NOT)
                        self.state = 7493
                        self.match(self.DISTINCT)
                        self.state = 7494
                        self.match(self.FROM)
                        self.state = 7495 
                        self.b_expr(6)
                        pass

                    elif la_ == 13:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7496
                        if not self.precpred(self._ctx, 21):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 7497
                        self.match(self.TYPECAST)
                        self.state = 7498 
                        self.typename()
                        pass

                    elif la_ == 14:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7499
                        if not self.precpred(self._ctx, 7):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 7500 
                        self.qual_Op()
                        pass

                    elif la_ == 15:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7501
                        if not self.precpred(self._ctx, 4):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 7502
                        self.match(self.IS)
                        self.state = 7503
                        self.match(self.OF)
                        self.state = 7504
                        self.match(self.T__6)
                        self.state = 7505 
                        self.type_list(0)
                        self.state = 7506
                        self.match(self.T__13)
                        pass

                    elif la_ == 16:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7508
                        if not self.precpred(self._ctx, 3):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7509
                        self.match(self.IS)
                        self.state = 7510
                        self.match(self.NOT)
                        self.state = 7511
                        self.match(self.OF)
                        self.state = 7512
                        self.match(self.T__6)
                        self.state = 7513 
                        self.type_list(0)
                        self.state = 7514
                        self.match(self.T__13)
                        pass

                    elif la_ == 17:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7516
                        if not self.precpred(self._ctx, 2):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7517
                        self.match(self.IS)
                        self.state = 7518
                        self.match(self.DOCUMENT_P)
                        pass

                    elif la_ == 18:
                        localctx = SqlParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 7519
                        if not self.precpred(self._ctx, 1):
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7520
                        self.match(self.IS)
                        self.state = 7521
                        self.match(self.NOT)
                        self.state = 7522
                        self.match(self.DOCUMENT_P)
                        pass

             
                self.state = 7527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class C_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.C_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_expr(self):
            return self.getTypedRuleContext(SqlParser.Func_exprContext,0)


        def case_expr(self):
            return self.getTypedRuleContext(SqlParser.Case_exprContext,0)


        def PARAM(self):
            return self.getToken(SqlParser.PARAM, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(SqlParser.Opt_indirectionContext,0)


        def columnref(self):
            return self.getTypedRuleContext(SqlParser.ColumnrefContext,0)


        def array_expr(self):
            return self.getTypedRuleContext(SqlParser.Array_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def row(self):
            return self.getTypedRuleContext(SqlParser.RowContext,0)


        def ARRAY(self):
            return self.getToken(SqlParser.ARRAY, 0)

        def aexprConst(self):
            return self.getTypedRuleContext(SqlParser.AexprConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_c_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterC_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitC_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitC_expr(self)
            else:
                return visitor.visitChildren(self)




    def c_expr(self):

        localctx = SqlParser.C_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_c_expr)
        try:
            self.state = 7547
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7528 
                self.columnref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7529 
                self.aexprConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7530
                self.match(self.PARAM)
                self.state = 7531 
                self.opt_indirection(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7532
                self.match(self.T__6)
                self.state = 7533 
                self.a_expr(0)
                self.state = 7534
                self.match(self.T__13)
                self.state = 7535 
                self.opt_indirection(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7537 
                self.case_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7538 
                self.func_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7539 
                self.select_with_parens(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7540
                self.match(self.EXISTS)
                self.state = 7541 
                self.select_with_parens(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7542
                self.match(self.ARRAY)
                self.state = 7543 
                self.select_with_parens(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7544
                self.match(self.ARRAY)
                self.state = 7545 
                self.array_expr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7546 
                self.row()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(SqlParser.COALESCE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlParser.CURRENT_DATE, 0)

        def NULLIF(self):
            return self.getToken(SqlParser.NULLIF, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def simpletypename(self):
            return self.getTypedRuleContext(SqlParser.SimpletypenameContext,0)


        def TRIM(self):
            return self.getToken(SqlParser.TRIM, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlParser.CURRENT_TIME, 0)

        def overlay_list(self):
            return self.getTypedRuleContext(SqlParser.Overlay_listContext,0)


        def XMLROOT(self):
            return self.getToken(SqlParser.XMLROOT, 0)

        def NAME_P(self):
            return self.getToken(SqlParser.NAME_P, 0)

        def substr_list(self):
            return self.getTypedRuleContext(SqlParser.Substr_listContext,0)


        def LOCALTIME(self):
            return self.getToken(SqlParser.LOCALTIME, 0)

        def GREATEST(self):
            return self.getToken(SqlParser.GREATEST, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(SqlParser.CURRENT_CATALOG, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(SqlParser.Document_or_contentContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SqlParser.Over_clauseContext,0)


        def opt_xml_root_standalone(self):
            return self.getTypedRuleContext(SqlParser.Opt_xml_root_standaloneContext,0)


        def XMLPI(self):
            return self.getToken(SqlParser.XMLPI, 0)

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def trim_list(self):
            return self.getTypedRuleContext(SqlParser.Trim_listContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.A_exprContext,i)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_sort_clauseContext,0)


        def TRAILING(self):
            return self.getToken(SqlParser.TRAILING, 0)

        def LEAST(self):
            return self.getToken(SqlParser.LEAST, 0)

        def VARIADIC(self):
            return self.getToken(SqlParser.VARIADIC, 0)

        def xmlexists_argument(self):
            return self.getTypedRuleContext(SqlParser.Xmlexists_argumentContext,0)


        def LOCALTIMESTAMP(self):
            return self.getToken(SqlParser.LOCALTIMESTAMP, 0)

        def CURRENT_ROLE(self):
            return self.getToken(SqlParser.CURRENT_ROLE, 0)

        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def XMLFOREST(self):
            return self.getToken(SqlParser.XMLFOREST, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlParser.CURRENT_USER, 0)

        def SUBSTRING(self):
            return self.getToken(SqlParser.SUBSTRING, 0)

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def XMLEXISTS(self):
            return self.getToken(SqlParser.XMLEXISTS, 0)

        def xml_attributes(self):
            return self.getTypedRuleContext(SqlParser.Xml_attributesContext,0)


        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Sort_clauseContext,0)


        def extract_list(self):
            return self.getTypedRuleContext(SqlParser.Extract_listContext,0)


        def BOTH(self):
            return self.getToken(SqlParser.BOTH, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def xml_whitespace_option(self):
            return self.getTypedRuleContext(SqlParser.Xml_whitespace_optionContext,0)


        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlParser.CURRENT_SCHEMA, 0)

        def TREAT(self):
            return self.getToken(SqlParser.TREAT, 0)

        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(SqlParser.Xml_attribute_listContext,0)


        def OVERLAY(self):
            return self.getToken(SqlParser.OVERLAY, 0)

        def XMLSERIALIZE(self):
            return self.getToken(SqlParser.XMLSERIALIZE, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def EXTRACT(self):
            return self.getToken(SqlParser.EXTRACT, 0)

        def xml_root_version(self):
            return self.getTypedRuleContext(SqlParser.Xml_root_versionContext,0)


        def func_arg_expr(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_exprContext,0)


        def XMLCONCAT(self):
            return self.getToken(SqlParser.XMLCONCAT, 0)

        def LEADING(self):
            return self.getToken(SqlParser.LEADING, 0)

        def XMLPARSE(self):
            return self.getToken(SqlParser.XMLPARSE, 0)

        def position_list(self):
            return self.getTypedRuleContext(SqlParser.Position_listContext,0)


        def XMLELEMENT(self):
            return self.getToken(SqlParser.XMLELEMENT, 0)

        def c_expr(self):
            return self.getTypedRuleContext(SqlParser.C_exprContext,0)


        def POSITION(self):
            return self.getToken(SqlParser.POSITION, 0)

        def SESSION_USER(self):
            return self.getToken(SqlParser.SESSION_USER, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_expr(self)
            else:
                return visitor.visitChildren(self)




    def func_expr(self):

        localctx = SqlParser.Func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_func_expr)
        try:
            self.state = 7806
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7549 
                self.func_name()
                self.state = 7550
                self.match(self.T__6)
                self.state = 7551
                self.match(self.T__13)
                self.state = 7552 
                self.over_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7554 
                self.func_name()
                self.state = 7555
                self.match(self.T__6)
                self.state = 7556 
                self.func_arg_list(0)
                self.state = 7557
                self.match(self.T__13)
                self.state = 7558 
                self.over_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7560 
                self.func_name()
                self.state = 7561
                self.match(self.T__6)
                self.state = 7562
                self.match(self.VARIADIC)
                self.state = 7563 
                self.func_arg_expr()
                self.state = 7564
                self.match(self.T__13)
                self.state = 7565 
                self.over_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7567 
                self.func_name()
                self.state = 7568
                self.match(self.T__6)
                self.state = 7569 
                self.func_arg_list(0)
                self.state = 7570
                self.match(self.T__11)
                self.state = 7571
                self.match(self.VARIADIC)
                self.state = 7572 
                self.func_arg_expr()
                self.state = 7573
                self.match(self.T__13)
                self.state = 7574 
                self.over_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7576 
                self.func_name()
                self.state = 7577
                self.match(self.T__6)
                self.state = 7578 
                self.func_arg_list(0)
                self.state = 7579 
                self.sort_clause()
                self.state = 7580
                self.match(self.T__13)
                self.state = 7581 
                self.over_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7583 
                self.func_name()
                self.state = 7584
                self.match(self.T__6)
                self.state = 7585
                self.match(self.ALL)
                self.state = 7586 
                self.func_arg_list(0)
                self.state = 7587 
                self.opt_sort_clause()
                self.state = 7588
                self.match(self.T__13)
                self.state = 7589 
                self.over_clause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7591 
                self.func_name()
                self.state = 7592
                self.match(self.T__6)
                self.state = 7593
                self.match(self.DISTINCT)
                self.state = 7594 
                self.func_arg_list(0)
                self.state = 7595 
                self.opt_sort_clause()
                self.state = 7596
                self.match(self.T__13)
                self.state = 7597 
                self.over_clause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7599 
                self.func_name()
                self.state = 7600
                self.match(self.T__6)
                self.state = 7601
                self.match(self.T__7)
                self.state = 7602
                self.match(self.T__13)
                self.state = 7603 
                self.over_clause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7605
                self.match(self.COLLATION)
                self.state = 7606
                self.match(self.FOR)
                self.state = 7607
                self.match(self.T__6)
                self.state = 7608 
                self.a_expr(0)
                self.state = 7609
                self.match(self.T__13)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7611
                self.match(self.CURRENT_DATE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7612
                self.match(self.CURRENT_TIME)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7613
                self.match(self.CURRENT_TIME)
                self.state = 7614
                self.match(self.T__6)
                self.state = 7615 
                self.iConst()
                self.state = 7616
                self.match(self.T__13)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7618
                self.match(self.CURRENT_TIMESTAMP)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7619
                self.match(self.CURRENT_TIMESTAMP)
                self.state = 7620
                self.match(self.T__6)
                self.state = 7621 
                self.iConst()
                self.state = 7622
                self.match(self.T__13)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7624
                self.match(self.LOCALTIME)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7625
                self.match(self.LOCALTIME)
                self.state = 7626
                self.match(self.T__6)
                self.state = 7627 
                self.iConst()
                self.state = 7628
                self.match(self.T__13)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7630
                self.match(self.LOCALTIMESTAMP)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7631
                self.match(self.LOCALTIMESTAMP)
                self.state = 7632
                self.match(self.T__6)
                self.state = 7633 
                self.iConst()
                self.state = 7634
                self.match(self.T__13)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7636
                self.match(self.CURRENT_ROLE)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7637
                self.match(self.CURRENT_USER)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7638
                self.match(self.SESSION_USER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7639
                self.match(self.USER)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7640
                self.match(self.CURRENT_CATALOG)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7641
                self.match(self.CURRENT_SCHEMA)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7642
                self.match(self.CAST)
                self.state = 7643
                self.match(self.T__6)
                self.state = 7644 
                self.a_expr(0)
                self.state = 7645
                self.match(self.AS)
                self.state = 7646 
                self.typename()
                self.state = 7647
                self.match(self.T__13)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7649
                self.match(self.EXTRACT)
                self.state = 7650
                self.match(self.T__6)
                self.state = 7651 
                self.extract_list()
                self.state = 7652
                self.match(self.T__13)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 7654
                self.match(self.OVERLAY)
                self.state = 7655
                self.match(self.T__6)
                self.state = 7656 
                self.overlay_list()
                self.state = 7657
                self.match(self.T__13)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 7659
                self.match(self.POSITION)
                self.state = 7660
                self.match(self.T__6)
                self.state = 7661 
                self.position_list()
                self.state = 7662
                self.match(self.T__13)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 7664
                self.match(self.SUBSTRING)
                self.state = 7665
                self.match(self.T__6)
                self.state = 7666 
                self.substr_list()
                self.state = 7667
                self.match(self.T__13)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 7669
                self.match(self.TREAT)
                self.state = 7670
                self.match(self.T__6)
                self.state = 7671 
                self.a_expr(0)
                self.state = 7672
                self.match(self.AS)
                self.state = 7673 
                self.typename()
                self.state = 7674
                self.match(self.T__13)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 7676
                self.match(self.TRIM)
                self.state = 7677
                self.match(self.T__6)
                self.state = 7678
                self.match(self.BOTH)
                self.state = 7679 
                self.trim_list()
                self.state = 7680
                self.match(self.T__13)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 7682
                self.match(self.TRIM)
                self.state = 7683
                self.match(self.T__6)
                self.state = 7684
                self.match(self.LEADING)
                self.state = 7685 
                self.trim_list()
                self.state = 7686
                self.match(self.T__13)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 7688
                self.match(self.TRIM)
                self.state = 7689
                self.match(self.T__6)
                self.state = 7690
                self.match(self.TRAILING)
                self.state = 7691 
                self.trim_list()
                self.state = 7692
                self.match(self.T__13)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 7694
                self.match(self.TRIM)
                self.state = 7695
                self.match(self.T__6)
                self.state = 7696 
                self.trim_list()
                self.state = 7697
                self.match(self.T__13)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 7699
                self.match(self.NULLIF)
                self.state = 7700
                self.match(self.T__6)
                self.state = 7701 
                self.a_expr(0)
                self.state = 7702
                self.match(self.T__11)
                self.state = 7703 
                self.a_expr(0)
                self.state = 7704
                self.match(self.T__13)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 7706
                self.match(self.COALESCE)
                self.state = 7707
                self.match(self.T__6)
                self.state = 7708 
                self.expr_list(0)
                self.state = 7709
                self.match(self.T__13)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 7711
                self.match(self.GREATEST)
                self.state = 7712
                self.match(self.T__6)
                self.state = 7713 
                self.expr_list(0)
                self.state = 7714
                self.match(self.T__13)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 7716
                self.match(self.LEAST)
                self.state = 7717
                self.match(self.T__6)
                self.state = 7718 
                self.expr_list(0)
                self.state = 7719
                self.match(self.T__13)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 7721
                self.match(self.XMLCONCAT)
                self.state = 7722
                self.match(self.T__6)
                self.state = 7723 
                self.expr_list(0)
                self.state = 7724
                self.match(self.T__13)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 7726
                self.match(self.XMLELEMENT)
                self.state = 7727
                self.match(self.T__6)
                self.state = 7728
                self.match(self.NAME_P)
                self.state = 7729 
                self.colLabel()
                self.state = 7730
                self.match(self.T__13)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 7732
                self.match(self.XMLELEMENT)
                self.state = 7733
                self.match(self.T__6)
                self.state = 7734
                self.match(self.NAME_P)
                self.state = 7735 
                self.colLabel()
                self.state = 7736
                self.match(self.T__11)
                self.state = 7737 
                self.xml_attributes()
                self.state = 7738
                self.match(self.T__13)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 7740
                self.match(self.XMLELEMENT)
                self.state = 7741
                self.match(self.T__6)
                self.state = 7742
                self.match(self.NAME_P)
                self.state = 7743 
                self.colLabel()
                self.state = 7744
                self.match(self.T__11)
                self.state = 7745 
                self.expr_list(0)
                self.state = 7746
                self.match(self.T__13)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 7748
                self.match(self.XMLELEMENT)
                self.state = 7749
                self.match(self.T__6)
                self.state = 7750
                self.match(self.NAME_P)
                self.state = 7751 
                self.colLabel()
                self.state = 7752
                self.match(self.T__11)
                self.state = 7753 
                self.xml_attributes()
                self.state = 7754
                self.match(self.T__11)
                self.state = 7755 
                self.expr_list(0)
                self.state = 7756
                self.match(self.T__13)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 7758
                self.match(self.XMLEXISTS)
                self.state = 7759
                self.match(self.T__6)
                self.state = 7760 
                self.c_expr()
                self.state = 7761 
                self.xmlexists_argument()
                self.state = 7762
                self.match(self.T__13)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 7764
                self.match(self.XMLFOREST)
                self.state = 7765
                self.match(self.T__6)
                self.state = 7766 
                self.xml_attribute_list(0)
                self.state = 7767
                self.match(self.T__13)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 7769
                self.match(self.XMLPARSE)
                self.state = 7770
                self.match(self.T__6)
                self.state = 7771 
                self.document_or_content()
                self.state = 7772 
                self.a_expr(0)
                self.state = 7773 
                self.xml_whitespace_option()
                self.state = 7774
                self.match(self.T__13)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 7776
                self.match(self.XMLPI)
                self.state = 7777
                self.match(self.T__6)
                self.state = 7778
                self.match(self.NAME_P)
                self.state = 7779 
                self.colLabel()
                self.state = 7780
                self.match(self.T__13)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 7782
                self.match(self.XMLPI)
                self.state = 7783
                self.match(self.T__6)
                self.state = 7784
                self.match(self.NAME_P)
                self.state = 7785 
                self.colLabel()
                self.state = 7786
                self.match(self.T__11)
                self.state = 7787 
                self.a_expr(0)
                self.state = 7788
                self.match(self.T__13)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 7790
                self.match(self.XMLROOT)
                self.state = 7791
                self.match(self.T__6)
                self.state = 7792 
                self.a_expr(0)
                self.state = 7793
                self.match(self.T__11)
                self.state = 7794 
                self.xml_root_version()
                self.state = 7795 
                self.opt_xml_root_standalone()
                self.state = 7796
                self.match(self.T__13)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 7798
                self.match(self.XMLSERIALIZE)
                self.state = 7799
                self.match(self.T__6)
                self.state = 7800 
                self.document_or_content()
                self.state = 7801 
                self.a_expr(0)
                self.state = 7802
                self.match(self.AS)
                self.state = 7803 
                self.simpletypename()
                self.state = 7804
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_root_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xml_root_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(SqlParser.VALUE_P, 0)

        def VERSION_P(self):
            return self.getToken(SqlParser.VERSION_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_xml_root_version

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXml_root_version(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXml_root_version(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXml_root_version(self)
            else:
                return visitor.visitChildren(self)




    def xml_root_version(self):

        localctx = SqlParser.Xml_root_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_xml_root_version)
        try:
            self.state = 7813
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7808
                self.match(self.VERSION_P)
                self.state = 7809 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7810
                self.match(self.VERSION_P)
                self.state = 7811
                self.match(self.NO)
                self.state = 7812
                self.match(self.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_xml_root_standaloneContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_xml_root_standaloneContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(SqlParser.VALUE_P, 0)

        def STANDALONE_P(self):
            return self.getToken(SqlParser.STANDALONE_P, 0)

        def YES_P(self):
            return self.getToken(SqlParser.YES_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_xml_root_standalone

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_xml_root_standalone(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_xml_root_standalone(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_xml_root_standalone(self)
            else:
                return visitor.visitChildren(self)




    def opt_xml_root_standalone(self):

        localctx = SqlParser.Opt_xml_root_standaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_opt_xml_root_standalone)
        try:
            self.state = 7826
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7815
                self.match(self.T__11)
                self.state = 7816
                self.match(self.STANDALONE_P)
                self.state = 7817
                self.match(self.YES_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7818
                self.match(self.T__11)
                self.state = 7819
                self.match(self.STANDALONE_P)
                self.state = 7820
                self.match(self.NO)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7821
                self.match(self.T__11)
                self.state = 7822
                self.match(self.STANDALONE_P)
                self.state = 7823
                self.match(self.NO)
                self.state = 7824
                self.match(self.VALUE_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xml_attributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_list(self):
            return self.getTypedRuleContext(SqlParser.Xml_attribute_listContext,0)


        def XMLATTRIBUTES(self):
            return self.getToken(SqlParser.XMLATTRIBUTES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_xml_attributes

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXml_attributes(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXml_attributes(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXml_attributes(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes(self):

        localctx = SqlParser.Xml_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_xml_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7828
            self.match(self.XMLATTRIBUTES)
            self.state = 7829
            self.match(self.T__6)
            self.state = 7830 
            self.xml_attribute_list(0)
            self.state = 7831
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attribute_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xml_attribute_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_list(self):
            return self.getTypedRuleContext(SqlParser.Xml_attribute_listContext,0)


        def xml_attribute_el(self):
            return self.getTypedRuleContext(SqlParser.Xml_attribute_elContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_xml_attribute_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXml_attribute_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXml_attribute_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXml_attribute_list(self)
            else:
                return visitor.visitChildren(self)



    def xml_attribute_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Xml_attribute_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 934
        self.enterRecursionRule(localctx, 934, self.RULE_xml_attribute_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7834 
            self.xml_attribute_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Xml_attribute_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xml_attribute_list)
                    self.state = 7836
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7837
                    self.match(self.T__11)
                    self.state = 7838 
                    self.xml_attribute_el() 
                self.state = 7843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Xml_attribute_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xml_attribute_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_xml_attribute_el

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXml_attribute_el(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXml_attribute_el(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXml_attribute_el(self)
            else:
                return visitor.visitChildren(self)




    def xml_attribute_el(self):

        localctx = SqlParser.Xml_attribute_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_xml_attribute_el)
        try:
            self.state = 7849
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7844 
                self.a_expr(0)
                self.state = 7845
                self.match(self.AS)
                self.state = 7846 
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7848 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_or_contentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Document_or_contentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTENT_P(self):
            return self.getToken(SqlParser.CONTENT_P, 0)

        def DOCUMENT_P(self):
            return self.getToken(SqlParser.DOCUMENT_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_document_or_content

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDocument_or_content(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDocument_or_content(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDocument_or_content(self)
            else:
                return visitor.visitChildren(self)




    def document_or_content(self):

        localctx = SqlParser.Document_or_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_document_or_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7851
            _la = self._input.LA(1)
            if not(_la==SqlParser.CONTENT_P or _la==SqlParser.DOCUMENT_P):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_whitespace_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xml_whitespace_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHITESPACE_P(self):
            return self.getToken(SqlParser.WHITESPACE_P, 0)

        def STRIP_P(self):
            return self.getToken(SqlParser.STRIP_P, 0)

        def PRESERVE(self):
            return self.getToken(SqlParser.PRESERVE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_xml_whitespace_option

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXml_whitespace_option(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXml_whitespace_option(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXml_whitespace_option(self)
            else:
                return visitor.visitChildren(self)




    def xml_whitespace_option(self):

        localctx = SqlParser.Xml_whitespace_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_xml_whitespace_option)
        try:
            self.state = 7858
            token = self._input.LA(1)
            if token in [self.PRESERVE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7853
                self.match(self.PRESERVE)
                self.state = 7854
                self.match(self.WHITESPACE_P)

            elif token in [self.STRIP_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7855
                self.match(self.STRIP_P)
                self.state = 7856
                self.match(self.WHITESPACE_P)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlexists_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Xmlexists_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self, i=None):
            if i is None:
                return self.getTokens(SqlParser.BY)
            else:
                return self.getToken(SqlParser.BY, i)

        def c_expr(self):
            return self.getTypedRuleContext(SqlParser.C_exprContext,0)


        def PASSING(self):
            return self.getToken(SqlParser.PASSING, 0)

        def REF(self, i=None):
            if i is None:
                return self.getTokens(SqlParser.REF)
            else:
                return self.getToken(SqlParser.REF, i)

        def getRuleIndex(self):
            return SqlParser.RULE_xmlexists_argument

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterXmlexists_argument(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitXmlexists_argument(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitXmlexists_argument(self)
            else:
                return visitor.visitChildren(self)




    def xmlexists_argument(self):

        localctx = SqlParser.Xmlexists_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_xmlexists_argument)
        try:
            self.state = 7878
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7860
                self.match(self.PASSING)
                self.state = 7861 
                self.c_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7862
                self.match(self.PASSING)
                self.state = 7863 
                self.c_expr()
                self.state = 7864
                self.match(self.BY)
                self.state = 7865
                self.match(self.REF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7867
                self.match(self.PASSING)
                self.state = 7868
                self.match(self.BY)
                self.state = 7869
                self.match(self.REF)
                self.state = 7870 
                self.c_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7871
                self.match(self.PASSING)
                self.state = 7872
                self.match(self.BY)
                self.state = 7873
                self.match(self.REF)
                self.state = 7874 
                self.c_expr()
                self.state = 7875
                self.match(self.BY)
                self.state = 7876
                self.match(self.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Window_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlParser.WINDOW, 0)

        def window_definition_list(self):
            return self.getTypedRuleContext(SqlParser.Window_definition_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_window_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWindow_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWindow_clause(self)
            else:
                return visitor.visitChildren(self)




    def window_clause(self):

        localctx = SqlParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_window_clause)
        try:
            self.state = 7883
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7880
                self.match(self.WINDOW)
                self.state = 7881 
                self.window_definition_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_definition_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Window_definition_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def window_definition_list(self):
            return self.getTypedRuleContext(SqlParser.Window_definition_listContext,0)


        def window_definition(self):
            return self.getTypedRuleContext(SqlParser.Window_definitionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_window_definition_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWindow_definition_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWindow_definition_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWindow_definition_list(self)
            else:
                return visitor.visitChildren(self)



    def window_definition_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Window_definition_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 946
        self.enterRecursionRule(localctx, 946, self.RULE_window_definition_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7886 
            self.window_definition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 7893
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Window_definition_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_window_definition_list)
                    self.state = 7888
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 7889
                    self.match(self.T__11)
                    self.state = 7890 
                    self.window_definition() 
                self.state = 7895
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Window_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Window_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def window_specification(self):
            return self.getTypedRuleContext(SqlParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_window_definition

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWindow_definition(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWindow_definition(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWindow_definition(self)
            else:
                return visitor.visitChildren(self)




    def window_definition(self):

        localctx = SqlParser.Window_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_window_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7896 
            self.colId()
            self.state = 7897
            self.match(self.AS)
            self.state = 7898 
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Over_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def OVER(self):
            return self.getToken(SqlParser.OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(SqlParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_over_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOver_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOver_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = SqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_over_clause)
        try:
            self.state = 7905
            la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7900
                self.match(self.OVER)
                self.state = 7901 
                self.window_specification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7902
                self.match(self.OVER)
                self.state = 7903 
                self.colId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Window_specificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def opt_frame_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_frame_clauseContext,0)


        def opt_sort_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_sort_clauseContext,0)


        def opt_existing_window_name(self):
            return self.getTypedRuleContext(SqlParser.Opt_existing_window_nameContext,0)


        def opt_partition_clause(self):
            return self.getTypedRuleContext(SqlParser.Opt_partition_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_window_specification

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWindow_specification(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWindow_specification(self)
            else:
                return visitor.visitChildren(self)




    def window_specification(self):

        localctx = SqlParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_window_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7907
            self.match(self.T__6)
            self.state = 7908 
            self.opt_existing_window_name()
            self.state = 7909 
            self.opt_partition_clause()
            self.state = 7910 
            self.opt_sort_clause()
            self.state = 7911 
            self.opt_frame_clause()
            self.state = 7912
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_existing_window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_existing_window_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_existing_window_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_existing_window_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_existing_window_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_existing_window_name(self)
            else:
                return visitor.visitChildren(self)




    def opt_existing_window_name(self):

        localctx = SqlParser.Opt_existing_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_opt_existing_window_name)
        try:
            self.state = 7916
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7914 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_partition_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def PARTITION(self):
            return self.getToken(SqlParser.PARTITION, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_partition_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_partition_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_partition_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_partition_clause(self):

        localctx = SqlParser.Opt_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_opt_partition_clause)
        try:
            self.state = 7922
            token = self._input.LA(1)
            if token in [self.PARTITION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7918
                self.match(self.PARTITION)
                self.state = 7919
                self.match(self.BY)
                self.state = 7920 
                self.expr_list(0)

            elif token in [self.T__13, self.ORDER, self.RANGE, self.ROWS]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_frame_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_frame_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(SqlParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlParser.ROWS, 0)

        def frame_extent(self):
            return self.getTypedRuleContext(SqlParser.Frame_extentContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_frame_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_frame_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_frame_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_frame_clause(self)
            else:
                return visitor.visitChildren(self)




    def opt_frame_clause(self):

        localctx = SqlParser.Opt_frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_opt_frame_clause)
        try:
            self.state = 7929
            token = self._input.LA(1)
            if token in [self.RANGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7924
                self.match(self.RANGE)
                self.state = 7925 
                self.frame_extent()

            elif token in [self.ROWS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7926
                self.match(self.ROWS)
                self.state = 7927 
                self.frame_extent()

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Frame_extentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(SqlParser.BETWEEN, 0)

        def frame_bound(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Frame_boundContext)
            else:
                return self.getTypedRuleContext(SqlParser.Frame_boundContext,i)


        def AND(self):
            return self.getToken(SqlParser.AND, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_frame_extent

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFrame_extent(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFrame_extent(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFrame_extent(self)
            else:
                return visitor.visitChildren(self)




    def frame_extent(self):

        localctx = SqlParser.Frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_frame_extent)
        try:
            self.state = 7937
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7931 
                self.frame_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7932
                self.match(self.BETWEEN)
                self.state = 7933 
                self.frame_bound()
                self.state = 7934
                self.match(self.AND)
                self.state = 7935 
                self.frame_bound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Frame_boundContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlParser.PRECEDING, 0)

        def CURRENT_P(self):
            return self.getToken(SqlParser.CURRENT_P, 0)

        def FOLLOWING(self):
            return self.getToken(SqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_frame_bound

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFrame_bound(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFrame_bound(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFrame_bound(self)
            else:
                return visitor.visitChildren(self)




    def frame_bound(self):

        localctx = SqlParser.Frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_frame_bound)
        try:
            self.state = 7951
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7939
                self.match(self.UNBOUNDED)
                self.state = 7940
                self.match(self.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7941
                self.match(self.UNBOUNDED)
                self.state = 7942
                self.match(self.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7943
                self.match(self.CURRENT_P)
                self.state = 7944
                self.match(self.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7945 
                self.a_expr(0)
                self.state = 7946
                self.match(self.PRECEDING)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7948 
                self.a_expr(0)
                self.state = 7949
                self.match(self.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RowContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_row

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRow(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRow(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRow(self)
            else:
                return visitor.visitChildren(self)




    def row(self):

        localctx = SqlParser.RowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_row)
        try:
            self.state = 7967
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7953
                self.match(self.ROW)
                self.state = 7954
                self.match(self.T__6)
                self.state = 7955 
                self.expr_list(0)
                self.state = 7956
                self.match(self.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7958
                self.match(self.ROW)
                self.state = 7959
                self.match(self.T__6)
                self.state = 7960
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7961
                self.match(self.T__6)
                self.state = 7962 
                self.expr_list(0)
                self.state = 7963
                self.match(self.T__11)
                self.state = 7964 
                self.a_expr(0)
                self.state = 7965
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sub_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Sub_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(SqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(SqlParser.ANY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_sub_type

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSub_type(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSub_type(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSub_type(self)
            else:
                return visitor.visitChildren(self)




    def sub_type(self):

        localctx = SqlParser.Sub_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_sub_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7969
            _la = self._input.LA(1)
            if not(_la==SqlParser.ALL or _la==SqlParser.ANY or _la==SqlParser.SOME):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.All_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def mathOp(self):
            return self.getTypedRuleContext(SqlParser.MathOpContext,0)


        def Op(self):
            return self.getToken(SqlParser.Op, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_all_Op

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAll_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAll_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAll_Op(self)
            else:
                return visitor.visitChildren(self)




    def all_Op(self):

        localctx = SqlParser.All_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_all_Op)
        try:
            self.state = 7973
            token = self._input.LA(1)
            if token in [self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7971
                self.match(self.Op)

            elif token in [self.T__15, self.T__14, self.T__10, self.T__8, self.T__7, self.T__4, self.T__3, self.T__1, self.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7972 
                self.mathOp()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.MathOpContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlParser.RULE_mathOp

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterMathOp(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitMathOp(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitMathOp(self)
            else:
                return visitor.visitChildren(self)




    def mathOp(self):

        localctx = SqlParser.MathOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_mathOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7975
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.T__15) | (1 << self.T__14) | (1 << self.T__10) | (1 << self.T__8) | (1 << self.T__7) | (1 << self.T__4) | (1 << self.T__3) | (1 << self.T__1) | (1 << self.T__0))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qual_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Qual_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def Op(self):
            return self.getToken(SqlParser.Op, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_qual_Op

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterQual_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitQual_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitQual_Op(self)
            else:
                return visitor.visitChildren(self)




    def qual_Op(self):

        localctx = SqlParser.Qual_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_qual_Op)
        try:
            self.state = 7983
            token = self._input.LA(1)
            if token in [self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7977
                self.match(self.Op)

            elif token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7978
                self.match(self.OPERATOR)
                self.state = 7979
                self.match(self.T__6)
                self.state = 7980 
                self.any_operator()
                self.state = 7981
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qual_all_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Qual_all_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def all_Op(self):
            return self.getTypedRuleContext(SqlParser.All_OpContext,0)


        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_qual_all_Op

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterQual_all_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitQual_all_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitQual_all_Op(self)
            else:
                return visitor.visitChildren(self)




    def qual_all_Op(self):

        localctx = SqlParser.Qual_all_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_qual_all_Op)
        try:
            self.state = 7991
            token = self._input.LA(1)
            if token in [self.T__15, self.T__14, self.T__10, self.T__8, self.T__7, self.T__4, self.T__3, self.T__1, self.T__0, self.Op]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7985 
                self.all_Op()

            elif token in [self.OPERATOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7986
                self.match(self.OPERATOR)
                self.state = 7987
                self.match(self.T__6)
                self.state = 7988 
                self.any_operator()
                self.state = 7989
                self.match(self.T__13)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_OpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Subquery_OpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ILIKE(self):
            return self.getToken(SqlParser.ILIKE, 0)

        def any_operator(self):
            return self.getTypedRuleContext(SqlParser.Any_operatorContext,0)


        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def all_Op(self):
            return self.getTypedRuleContext(SqlParser.All_OpContext,0)


        def LIKE(self):
            return self.getToken(SqlParser.LIKE, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_subquery_Op

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSubquery_Op(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSubquery_Op(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSubquery_Op(self)
            else:
                return visitor.visitChildren(self)




    def subquery_Op(self):

        localctx = SqlParser.Subquery_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_subquery_Op)
        try:
            self.state = 8005
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7993 
                self.all_Op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7994
                self.match(self.OPERATOR)
                self.state = 7995
                self.match(self.T__6)
                self.state = 7996 
                self.any_operator()
                self.state = 7997
                self.match(self.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7999
                self.match(self.LIKE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8000
                self.match(self.NOT)
                self.state = 8001
                self.match(self.LIKE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8002
                self.match(self.ILIKE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8003
                self.match(self.NOT)
                self.state = 8004
                self.match(self.ILIKE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_expr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExpr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExpr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExpr_list(self)
            else:
                return visitor.visitChildren(self)



    def expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 978
        self.enterRecursionRule(localctx, 978, self.RULE_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8008 
            self.a_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 8015
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr_list)
                    self.state = 8010
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8011
                    self.match(self.T__11)
                    self.state = 8012 
                    self.a_expr(0) 
                self.state = 8017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_arg_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_arg_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def func_arg_list(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_listContext,0)


        def func_arg_expr(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_arg_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_arg_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_arg_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_arg_list(self)
            else:
                return visitor.visitChildren(self)



    def func_arg_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Func_arg_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 980
        self.enterRecursionRule(localctx, 980, self.RULE_func_arg_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8019 
            self.func_arg_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Func_arg_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_func_arg_list)
                    self.state = 8021
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8022
                    self.match(self.T__11)
                    self.state = 8023 
                    self.func_arg_expr() 
                self.state = 8028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Func_arg_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_arg_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def param_name(self):
            return self.getTypedRuleContext(SqlParser.Param_nameContext,0)


        def COLON_EQUALS(self):
            return self.getToken(SqlParser.COLON_EQUALS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_func_arg_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_arg_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_arg_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_arg_expr(self)
            else:
                return visitor.visitChildren(self)




    def func_arg_expr(self):

        localctx = SqlParser.Func_arg_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_func_arg_expr)
        try:
            self.state = 8034
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8029 
                self.a_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8030 
                self.param_name()
                self.state = 8031
                self.match(self.COLON_EQUALS)
                self.state = 8032 
                self.a_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Type_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(SqlParser.TypenameContext,0)


        def type_list(self):
            return self.getTypedRuleContext(SqlParser.Type_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_type_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterType_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitType_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitType_list(self)
            else:
                return visitor.visitChildren(self)



    def type_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Type_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 984
        self.enterRecursionRule(localctx, 984, self.RULE_type_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8037 
            self.typename()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Type_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_list)
                    self.state = 8039
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8040
                    self.match(self.T__11)
                    self.state = 8041 
                    self.typename() 
                self.state = 8046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Array_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Array_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def array_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Array_expr_listContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_array_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterArray_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitArray_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitArray_expr(self)
            else:
                return visitor.visitChildren(self)




    def array_expr(self):

        localctx = SqlParser.Array_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_array_expr)
        try:
            self.state = 8057
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8047
                self.match(self.T__9)
                self.state = 8048 
                self.expr_list(0)
                self.state = 8049
                self.match(self.T__16)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8051
                self.match(self.T__9)
                self.state = 8052 
                self.array_expr_list(0)
                self.state = 8053
                self.match(self.T__16)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8055
                self.match(self.T__9)
                self.state = 8056
                self.match(self.T__16)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Array_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def array_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Array_expr_listContext,0)


        def array_expr(self):
            return self.getTypedRuleContext(SqlParser.Array_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_array_expr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterArray_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitArray_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitArray_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def array_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Array_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 988
        self.enterRecursionRule(localctx, 988, self.RULE_array_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8060 
            self.array_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8067
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Array_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_array_expr_list)
                    self.state = 8062
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8063
                    self.match(self.T__11)
                    self.state = 8064 
                    self.array_expr() 
                self.state = 8069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Extract_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Extract_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def extract_arg(self):
            return self.getTypedRuleContext(SqlParser.Extract_argContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_extract_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExtract_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExtract_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExtract_list(self)
            else:
                return visitor.visitChildren(self)




    def extract_list(self):

        localctx = SqlParser.Extract_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_extract_list)
        try:
            self.state = 8075
            token = self._input.LA(1)
            if token in [self.DAY_P, self.HOUR_P, self.MINUTE_P, self.MONTH_P, self.SECOND_P, self.YEAR_P, self.IDENT, self.SCONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8070 
                self.extract_arg()
                self.state = 8071
                self.match(self.FROM)
                self.state = 8072 
                self.a_expr(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extract_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Extract_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MONTH_P(self):
            return self.getToken(SqlParser.MONTH_P, 0)

        def MINUTE_P(self):
            return self.getToken(SqlParser.MINUTE_P, 0)

        def SECOND_P(self):
            return self.getToken(SqlParser.SECOND_P, 0)

        def HOUR_P(self):
            return self.getToken(SqlParser.HOUR_P, 0)

        def YEAR_P(self):
            return self.getToken(SqlParser.YEAR_P, 0)

        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def DAY_P(self):
            return self.getToken(SqlParser.DAY_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_extract_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterExtract_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitExtract_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitExtract_arg(self)
            else:
                return visitor.visitChildren(self)




    def extract_arg(self):

        localctx = SqlParser.Extract_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_extract_arg)
        try:
            self.state = 8085
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8077
                self.match(self.IDENT)

            elif token in [self.YEAR_P]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8078
                self.match(self.YEAR_P)

            elif token in [self.MONTH_P]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8079
                self.match(self.MONTH_P)

            elif token in [self.DAY_P]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8080
                self.match(self.DAY_P)

            elif token in [self.HOUR_P]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8081
                self.match(self.HOUR_P)

            elif token in [self.MINUTE_P]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8082
                self.match(self.MINUTE_P)

            elif token in [self.SECOND_P]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8083
                self.match(self.SECOND_P)

            elif token in [self.SCONST]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8084 
                self.sConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overlay_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Overlay_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def substr_from(self):
            return self.getTypedRuleContext(SqlParser.Substr_fromContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def overlay_placing(self):
            return self.getTypedRuleContext(SqlParser.Overlay_placingContext,0)


        def substr_for(self):
            return self.getTypedRuleContext(SqlParser.Substr_forContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_overlay_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOverlay_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOverlay_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOverlay_list(self)
            else:
                return visitor.visitChildren(self)




    def overlay_list(self):

        localctx = SqlParser.Overlay_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_overlay_list)
        try:
            self.state = 8096
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8087 
                self.a_expr(0)
                self.state = 8088 
                self.overlay_placing()
                self.state = 8089 
                self.substr_from()
                self.state = 8090 
                self.substr_for()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8092 
                self.a_expr(0)
                self.state = 8093 
                self.overlay_placing()
                self.state = 8094 
                self.substr_from()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overlay_placingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Overlay_placingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def PLACING(self):
            return self.getToken(SqlParser.PLACING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_overlay_placing

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOverlay_placing(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOverlay_placing(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOverlay_placing(self)
            else:
                return visitor.visitChildren(self)




    def overlay_placing(self):

        localctx = SqlParser.Overlay_placingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_overlay_placing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8098
            self.match(self.PLACING)
            self.state = 8099 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Position_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Position_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.B_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.B_exprContext,i)


        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_position_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterPosition_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitPosition_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitPosition_list(self)
            else:
                return visitor.visitChildren(self)




    def position_list(self):

        localctx = SqlParser.Position_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_position_list)
        try:
            self.state = 8106
            token = self._input.LA(1)
            if token in [self.T__10, self.T__8, self.T__6, self.Op, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ARRAY, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8101 
                self.b_expr(0)
                self.state = 8102
                self.match(self.IN_P)
                self.state = 8103 
                self.b_expr(0)

            elif token in [self.T__13]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Substr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def substr_from(self):
            return self.getTypedRuleContext(SqlParser.Substr_fromContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def substr_for(self):
            return self.getTypedRuleContext(SqlParser.Substr_forContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_substr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSubstr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSubstr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSubstr_list(self)
            else:
                return visitor.visitChildren(self)




    def substr_list(self):

        localctx = SqlParser.Substr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_substr_list)
        try:
            self.state = 8124
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8108 
                self.a_expr(0)
                self.state = 8109 
                self.substr_from()
                self.state = 8110 
                self.substr_for()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8112 
                self.a_expr(0)
                self.state = 8113 
                self.substr_for()
                self.state = 8114 
                self.substr_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8116 
                self.a_expr(0)
                self.state = 8117 
                self.substr_from()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8119 
                self.a_expr(0)
                self.state = 8120 
                self.substr_for()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8122 
                self.expr_list(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_fromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Substr_fromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_substr_from

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSubstr_from(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSubstr_from(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSubstr_from(self)
            else:
                return visitor.visitChildren(self)




    def substr_from(self):

        localctx = SqlParser.Substr_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_substr_from)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8126
            self.match(self.FROM)
            self.state = 8127 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substr_forContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Substr_forContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_substr_for

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSubstr_for(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSubstr_for(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSubstr_for(self)
            else:
                return visitor.visitChildren(self)




    def substr_for(self):

        localctx = SqlParser.Substr_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_substr_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8129
            self.match(self.FOR)
            self.state = 8130 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trim_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Trim_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_trim_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTrim_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTrim_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTrim_list(self)
            else:
                return visitor.visitChildren(self)




    def trim_list(self):

        localctx = SqlParser.Trim_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_trim_list)
        try:
            self.state = 8139
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8132 
                self.a_expr(0)
                self.state = 8133
                self.match(self.FROM)
                self.state = 8134 
                self.expr_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8136
                self.match(self.FROM)
                self.state = 8137 
                self.expr_list(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8138 
                self.expr_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.In_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(SqlParser.Expr_listContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(SqlParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_in_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIn_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIn_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIn_expr(self)
            else:
                return visitor.visitChildren(self)




    def in_expr(self):

        localctx = SqlParser.In_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_in_expr)
        try:
            self.state = 8146
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8141 
                self.select_with_parens(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8142
                self.match(self.T__6)
                self.state = 8143 
                self.expr_list(0)
                self.state = 8144
                self.match(self.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Case_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def case_arg(self):
            return self.getTypedRuleContext(SqlParser.Case_argContext,0)


        def CASE(self):
            return self.getToken(SqlParser.CASE, 0)

        def case_default(self):
            return self.getTypedRuleContext(SqlParser.Case_defaultContext,0)


        def END_P(self):
            return self.getToken(SqlParser.END_P, 0)

        def when_clause_list(self):
            return self.getTypedRuleContext(SqlParser.When_clause_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_case_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCase_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCase_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCase_expr(self)
            else:
                return visitor.visitChildren(self)




    def case_expr(self):

        localctx = SqlParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_case_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8148
            self.match(self.CASE)
            self.state = 8149 
            self.case_arg()
            self.state = 8150 
            self.when_clause_list(0)
            self.state = 8151 
            self.case_default()
            self.state = 8152
            self.match(self.END_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_clause_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.When_clause_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def when_clause_list(self):
            return self.getTypedRuleContext(SqlParser.When_clause_listContext,0)


        def when_clause(self):
            return self.getTypedRuleContext(SqlParser.When_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_when_clause_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWhen_clause_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWhen_clause_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWhen_clause_list(self)
            else:
                return visitor.visitChildren(self)



    def when_clause_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.When_clause_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1012
        self.enterRecursionRule(localctx, 1012, self.RULE_when_clause_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8155 
            self.when_clause()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,429,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.When_clause_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_when_clause_list)
                    self.state = 8157
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8158 
                    self.when_clause() 
                self.state = 8163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,429,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class When_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.When_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(SqlParser.THEN, 0)

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.A_exprContext,i)


        def WHEN(self):
            return self.getToken(SqlParser.WHEN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_when_clause

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitWhen_clause(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitWhen_clause(self)
            else:
                return visitor.visitChildren(self)




    def when_clause(self):

        localctx = SqlParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8164
            self.match(self.WHEN)
            self.state = 8165 
            self.a_expr(0)
            self.state = 8166
            self.match(self.THEN)
            self.state = 8167 
            self.a_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Case_defaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def ELSE(self):
            return self.getToken(SqlParser.ELSE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_case_default

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCase_default(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCase_default(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCase_default(self)
            else:
                return visitor.visitChildren(self)




    def case_default(self):

        localctx = SqlParser.Case_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_case_default)
        try:
            self.state = 8172
            token = self._input.LA(1)
            if token in [self.ELSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8169
                self.match(self.ELSE)
                self.state = 8170 
                self.a_expr(0)

            elif token in [self.END_P]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_argContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Case_argContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_case_arg

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCase_arg(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCase_arg(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCase_arg(self)
            else:
                return visitor.visitChildren(self)




    def case_arg(self):

        localctx = SqlParser.Case_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_case_arg)
        try:
            self.state = 8176
            token = self._input.LA(1)
            if token in [self.T__10, self.T__8, self.T__6, self.Op, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ARRAY, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOT, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNIQUE, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8174 
                self.a_expr(0)

            elif token in [self.WHEN]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnrefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColumnrefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(SqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_columnref

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColumnref(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColumnref(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColumnref(self)
            else:
                return visitor.visitChildren(self)




    def columnref(self):

        localctx = SqlParser.ColumnrefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_columnref)
        try:
            self.state = 8182
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8178 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8179 
                self.colId()
                self.state = 8180 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indirection_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Indirection_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.A_exprContext)
            else:
                return self.getTypedRuleContext(SqlParser.A_exprContext,i)


        def attr_name(self):
            return self.getTypedRuleContext(SqlParser.Attr_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_indirection_el

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndirection_el(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndirection_el(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndirection_el(self)
            else:
                return visitor.visitChildren(self)




    def indirection_el(self):

        localctx = SqlParser.Indirection_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_indirection_el)
        try:
            self.state = 8198
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8184
                self.match(self.T__12)
                self.state = 8185 
                self.attr_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8186
                self.match(self.T__12)
                self.state = 8187
                self.match(self.T__7)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8188
                self.match(self.T__9)
                self.state = 8189 
                self.a_expr(0)
                self.state = 8190
                self.match(self.T__16)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8192
                self.match(self.T__9)
                self.state = 8193 
                self.a_expr(0)
                self.state = 8194
                self.match(self.T__5)
                self.state = 8195 
                self.a_expr(0)
                self.state = 8196
                self.match(self.T__16)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndirectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.IndirectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self):
            return self.getTypedRuleContext(SqlParser.Indirection_elContext,0)


        def indirection(self):
            return self.getTypedRuleContext(SqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_indirection

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndirection(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndirection(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndirection(self)
            else:
                return visitor.visitChildren(self)



    def indirection(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.IndirectionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1024
        self.enterRecursionRule(localctx, 1024, self.RULE_indirection, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8201 
            self.indirection_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.IndirectionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indirection)
                    self.state = 8203
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8204 
                    self.indirection_el() 
                self.state = 8209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_indirectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_indirectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self):
            return self.getTypedRuleContext(SqlParser.Indirection_elContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(SqlParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_opt_indirection

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_indirection(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_indirection(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_indirection(self)
            else:
                return visitor.visitChildren(self)



    def opt_indirection(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Opt_indirectionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1026
        self.enterRecursionRule(localctx, 1026, self.RULE_opt_indirection, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 8215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,435,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Opt_indirectionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_indirection)
                    self.state = 8211
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8212 
                    self.indirection_el() 
                self.state = 8217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_asymmetricContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Opt_asymmetricContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASYMMETRIC(self):
            return self.getToken(SqlParser.ASYMMETRIC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_opt_asymmetric

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterOpt_asymmetric(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitOpt_asymmetric(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitOpt_asymmetric(self)
            else:
                return visitor.visitChildren(self)




    def opt_asymmetric(self):

        localctx = SqlParser.Opt_asymmetricContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_opt_asymmetric)
        try:
            self.state = 8220
            token = self._input.LA(1)
            if token in [self.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8218
                self.match(self.ASYMMETRIC)

            elif token in [self.T__10, self.T__8, self.T__6, self.Op, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ARRAY, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctext_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Ctext_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ctext_expr

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCtext_expr(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCtext_expr(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCtext_expr(self)
            else:
                return visitor.visitChildren(self)




    def ctext_expr(self):

        localctx = SqlParser.Ctext_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_ctext_expr)
        try:
            self.state = 8224
            token = self._input.LA(1)
            if token in [self.T__10, self.T__8, self.T__6, self.Op, self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ARRAY, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.AUTHORIZATION, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BETWEEN, self.BIGINT, self.BINARY, self.BIT, self.BOOLEAN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CASE, self.CAST, self.CATALOG_P, self.CHAIN, self.CHAR_P, self.CHARACTER, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COALESCE, self.COLLATION, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONCURRENTLY, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CROSS, self.CSV, self.CURRENT_P, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_SCHEMA, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DEC, self.DECIMAL_P, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXISTS, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.EXTRACT, self.FALSE_P, self.FAMILY, self.FIRST_P, self.FLOAT_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FREEZE, self.FULL, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.GREATEST, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.ILIKE, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INNER_P, self.INOUT, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INT_P, self.INTEGER, self.INTERVAL, self.INVOKER, self.IS, self.ISNULL, self.ISOLATION, self.JOIN, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEAST, self.LEFT, self.LEVEL, self.LIKE, self.LISTEN, self.LOAD, self.LOCAL, self.LOCALTIME, self.LOCALTIMESTAMP, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NATIONAL, self.NATURAL, self.NCHAR, self.NEXT, self.NO, self.NONE, self.NOT, self.NOTHING, self.NOTIFY, self.NOTNULL, self.NOWAIT, self.NULL_P, self.NULLIF, self.NULLS_P, self.NUMERIC, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OUT_P, self.OUTER_P, self.OVER, self.OVERLAPS, self.OVERLAY, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.POSITION, self.PRECEDING, self.PRECISION, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REAL, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.RIGHT, self.ROLE, self.ROLLBACK, self.ROW, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SESSION_USER, self.SET, self.SETOF, self.SHARE, self.SHOW, self.SIMILAR, self.SIMPLE, self.SMALLINT, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SUBSTRING, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TIME, self.TIMESTAMP, self.TRANSACTION, self.TREAT, self.TRIGGER, self.TRIM, self.TRUE_P, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNIQUE, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.USER, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VALUES, self.VARCHAR, self.VARYING, self.VERBOSE, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE, self.YEAR_P, self.YES_P, self.ZONE, self.ICONST, self.IDENT, self.SCONST, self.FCONST, self.BCONST, self.XCONST, self.PARAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8222 
                self.a_expr(0)

            elif token in [self.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8223
                self.match(self.DEFAULT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctext_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Ctext_expr_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Ctext_expr_listContext,0)


        def ctext_expr(self):
            return self.getTypedRuleContext(SqlParser.Ctext_exprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ctext_expr_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCtext_expr_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCtext_expr_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCtext_expr_list(self)
            else:
                return visitor.visitChildren(self)



    def ctext_expr_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Ctext_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1032
        self.enterRecursionRule(localctx, 1032, self.RULE_ctext_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8227 
            self.ctext_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,438,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Ctext_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ctext_expr_list)
                    self.state = 8229
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8230
                    self.match(self.T__11)
                    self.state = 8231 
                    self.ctext_expr() 
                self.state = 8236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Ctext_rowContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Ctext_rowContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ctext_expr_list(self):
            return self.getTypedRuleContext(SqlParser.Ctext_expr_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_ctext_row

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCtext_row(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCtext_row(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCtext_row(self)
            else:
                return visitor.visitChildren(self)




    def ctext_row(self):

        localctx = SqlParser.Ctext_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_ctext_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8237
            self.match(self.T__6)
            self.state = 8238 
            self.ctext_expr_list(0)
            self.state = 8239
            self.match(self.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Target_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def target_el(self):
            return self.getTypedRuleContext(SqlParser.Target_elContext,0)


        def target_list(self):
            return self.getTypedRuleContext(SqlParser.Target_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_target_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTarget_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTarget_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTarget_list(self)
            else:
                return visitor.visitChildren(self)



    def target_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Target_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1036
        self.enterRecursionRule(localctx, 1036, self.RULE_target_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8242 
            self.target_el()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Target_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_target_list)
                    self.state = 8244
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8245
                    self.match(self.T__11)
                    self.state = 8246 
                    self.target_el() 
                self.state = 8251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Target_elContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Target_elContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def a_expr(self):
            return self.getTypedRuleContext(SqlParser.A_exprContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_target_el

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterTarget_el(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitTarget_el(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitTarget_el(self)
            else:
                return visitor.visitChildren(self)




    def target_el(self):

        localctx = SqlParser.Target_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_target_el)
        try:
            self.state = 8261
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8252 
                self.a_expr(0)
                self.state = 8253
                self.match(self.AS)
                self.state = 8254 
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8256 
                self.a_expr(0)
                self.state = 8257
                self.match(self.IDENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8259 
                self.a_expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8260
                self.match(self.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Qualified_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_nameContext,0)


        def qualified_name_list(self):
            return self.getTypedRuleContext(SqlParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_qualified_name_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterQualified_name_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitQualified_name_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitQualified_name_list(self)
            else:
                return visitor.visitChildren(self)



    def qualified_name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Qualified_name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1040
        self.enterRecursionRule(localctx, 1040, self.RULE_qualified_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8264 
            self.qualified_name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,441,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Qualified_name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_qualified_name_list)
                    self.state = 8266
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8267
                    self.match(self.T__11)
                    self.state = 8268 
                    self.qualified_name() 
                self.state = 8273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,441,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Qualified_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Qualified_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(SqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_qualified_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterQualified_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitQualified_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitQualified_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_name(self):

        localctx = SqlParser.Qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_qualified_name)
        try:
            self.state = 8278
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8274 
                self.colId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8275 
                self.colId()
                self.state = 8276 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(SqlParser.Name_listContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_name_list

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterName_list(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitName_list(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitName_list(self)
            else:
                return visitor.visitChildren(self)



    def name_list(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.Name_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1044
        self.enterRecursionRule(localctx, 1044, self.RULE_name_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8281 
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 8288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,443,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlParser.Name_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_name_list)
                    self.state = 8283
                    if not self.precpred(self._ctx, 1):
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 8284
                    self.match(self.T__11)
                    self.state = 8285 
                    self.name() 
                self.state = 8290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterName(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitName(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = SqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8291 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_database_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitDatabase_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = SqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8293 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Access_methodContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Access_methodContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_access_method

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAccess_method(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAccess_method(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAccess_method(self)
            else:
                return visitor.visitChildren(self)




    def access_method(self):

        localctx = SqlParser.Access_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_access_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8295 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Attr_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(SqlParser.ColLabelContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_attr_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAttr_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAttr_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAttr_name(self)
            else:
                return visitor.visitChildren(self)




    def attr_name(self):

        localctx = SqlParser.Attr_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_attr_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8297 
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_index_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIndex_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = SqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8299 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.File_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_file_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFile_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFile_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFile_name(self)
            else:
                return visitor.visitChildren(self)




    def file_name(self):

        localctx = SqlParser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8301 
            self.sConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Func_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(SqlParser.Type_function_nameContext,0)


        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def indirection(self):
            return self.getTypedRuleContext(SqlParser.IndirectionContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_func_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterFunc_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitFunc_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitFunc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_name(self):

        localctx = SqlParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_func_name)
        try:
            self.state = 8307
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8303 
                self.type_function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8304 
                self.colId()
                self.state = 8305 
                self.indirection(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AexprConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.AexprConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def opt_interval(self):
            return self.getTypedRuleContext(SqlParser.Opt_intervalContext,0)


        def consttypename(self):
            return self.getTypedRuleContext(SqlParser.ConsttypenameContext,0)


        def TRUE_P(self):
            return self.getToken(SqlParser.TRUE_P, 0)

        def XCONST(self):
            return self.getToken(SqlParser.XCONST, 0)

        def func_name(self):
            return self.getTypedRuleContext(SqlParser.Func_nameContext,0)


        def constInterval(self):
            return self.getTypedRuleContext(SqlParser.ConstIntervalContext,0)


        def func_arg_list(self):
            return self.getTypedRuleContext(SqlParser.Func_arg_listContext,0)


        def FCONST(self):
            return self.getToken(SqlParser.FCONST, 0)

        def FALSE_P(self):
            return self.getToken(SqlParser.FALSE_P, 0)

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def BCONST(self):
            return self.getToken(SqlParser.BCONST, 0)

        def sConst(self):
            return self.getTypedRuleContext(SqlParser.SConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_aexprConst

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterAexprConst(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitAexprConst(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitAexprConst(self)
            else:
                return visitor.visitChildren(self)




    def aexprConst(self):

        localctx = SqlParser.AexprConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_aexprConst)
        try:
            self.state = 8340
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8309 
                self.iConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8310
                self.match(self.FCONST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8311 
                self.sConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8312
                self.match(self.BCONST)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8313
                self.match(self.XCONST)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8314 
                self.func_name()
                self.state = 8315 
                self.sConst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8317 
                self.func_name()
                self.state = 8318
                self.match(self.T__6)
                self.state = 8319 
                self.func_arg_list(0)
                self.state = 8320
                self.match(self.T__13)
                self.state = 8321 
                self.sConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8323 
                self.consttypename()
                self.state = 8324 
                self.sConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8326 
                self.constInterval()
                self.state = 8327 
                self.sConst()
                self.state = 8328 
                self.opt_interval()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8330 
                self.constInterval()
                self.state = 8331
                self.match(self.T__6)
                self.state = 8332 
                self.iConst()
                self.state = 8333
                self.match(self.T__13)
                self.state = 8334 
                self.sConst()
                self.state = 8335 
                self.opt_interval()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8337
                self.match(self.TRUE_P)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8338
                self.match(self.FALSE_P)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8339
                self.match(self.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.IConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ICONST(self):
            return self.getToken(SqlParser.ICONST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_iConst

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterIConst(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitIConst(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitIConst(self)
            else:
                return visitor.visitChildren(self)




    def iConst(self):

        localctx = SqlParser.IConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_iConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8342
            self.match(self.ICONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SConstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SConstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCONST(self):
            return self.getToken(SqlParser.SCONST, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_sConst

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSConst(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSConst(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSConst(self)
            else:
                return visitor.visitChildren(self)




    def sConst(self):

        localctx = SqlParser.SConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_sConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8344
            self.match(self.SCONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoleIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.RoleIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def colId(self):
            return self.getTypedRuleContext(SqlParser.ColIdContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_roleId

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterRoleId(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitRoleId(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitRoleId(self)
            else:
                return visitor.visitChildren(self)




    def roleId(self):

        localctx = SqlParser.RoleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_roleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8346 
            self.colId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIconstContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.SignedIconstContext, self).__init__(parent, invokingState)
            self.parser = parser

        def iConst(self):
            return self.getTypedRuleContext(SqlParser.IConstContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_signedIconst

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterSignedIconst(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitSignedIconst(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitSignedIconst(self)
            else:
                return visitor.visitChildren(self)




    def signedIconst(self):

        localctx = SqlParser.SignedIconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_signedIconst)
        try:
            self.state = 8353
            token = self._input.LA(1)
            if token in [self.ICONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8348 
                self.iConst()

            elif token in [self.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8349
                self.match(self.T__10)
                self.state = 8350 
                self.iConst()

            elif token in [self.T__8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8351
                self.match(self.T__8)
                self.state = 8352 
                self.iConst()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(SqlParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(SqlParser.Col_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_colId

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColId(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColId(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColId(self)
            else:
                return visitor.visitChildren(self)




    def colId(self):

        localctx = SqlParser.ColIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_colId)
        try:
            self.state = 8358
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8355
                self.match(self.IDENT)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.FAMILY, self.FIRST_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NEXT, self.NO, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLS_P, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.PRECEDING, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SHARE, self.SHOW, self.SIMPLE, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TRANSACTION, self.TRIGGER, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.YEAR_P, self.YES_P, self.ZONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8356 
                self.unreserved_keyword()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8357 
                self.col_name_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Type_function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(SqlParser.Unreserved_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(SqlParser.Type_func_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_type_function_name

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterType_function_name(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitType_function_name(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitType_function_name(self)
            else:
                return visitor.visitChildren(self)




    def type_function_name(self):

        localctx = SqlParser.Type_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_type_function_name)
        try:
            self.state = 8363
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8360
                self.match(self.IDENT)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.FAMILY, self.FIRST_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NEXT, self.NO, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLS_P, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.PRECEDING, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SHARE, self.SHOW, self.SIMPLE, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TRANSACTION, self.TRIGGER, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.YEAR_P, self.YES_P, self.ZONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8361 
                self.unreserved_keyword()

            elif token in [self.AUTHORIZATION, self.BINARY, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_SCHEMA, self.FREEZE, self.FULL, self.ILIKE, self.INNER_P, self.IS, self.ISNULL, self.JOIN, self.LEFT, self.LIKE, self.NATURAL, self.NOTNULL, self.OUTER_P, self.OVER, self.OVERLAPS, self.RIGHT, self.SIMILAR, self.VERBOSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8362 
                self.type_func_name_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColLabelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.ColLabelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unreserved_keyword(self):
            return self.getTypedRuleContext(SqlParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(SqlParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(SqlParser.Type_func_name_keywordContext,0)


        def IDENT(self):
            return self.getToken(SqlParser.IDENT, 0)

        def reserved_keyword(self):
            return self.getTypedRuleContext(SqlParser.Reserved_keywordContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_colLabel

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterColLabel(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitColLabel(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitColLabel(self)
            else:
                return visitor.visitChildren(self)




    def colLabel(self):

        localctx = SqlParser.ColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_colLabel)
        try:
            self.state = 8370
            token = self._input.LA(1)
            if token in [self.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8365
                self.match(self.IDENT)

            elif token in [self.ABORT_P, self.ABSOLUTE_P, self.ACCESS, self.ACTION, self.ADD_P, self.ADMIN, self.AFTER, self.AGGREGATE, self.ALSO, self.ALTER, self.ALWAYS, self.ASSERTION, self.ASSIGNMENT, self.AT, self.ATTRIBUTE, self.BACKWARD, self.BEFORE, self.BEGIN_P, self.BY, self.CACHE, self.CALLED, self.CASCADE, self.CASCADED, self.CATALOG_P, self.CHAIN, self.CHARACTERISTICS, self.CHECKPOINT, self.CLASS, self.CLOSE, self.CLUSTER, self.COMMENT, self.COMMENTS, self.COMMIT, self.COMMITTED, self.CONFIGURATION, self.CONNECTION, self.CONSTRAINTS, self.CONTENT_P, self.CONTINUE_P, self.CONVERSION_P, self.COPY, self.COST, self.CSV, self.CURRENT_P, self.CURSOR, self.CYCLE, self.DATA_P, self.DATABASE, self.DAY_P, self.DEALLOCATE, self.DECLARE, self.DEFAULTS, self.DEFERRED, self.DEFINER, self.DELETE_P, self.DELIMITER, self.DELIMITERS, self.DICTIONARY, self.DISABLE_P, self.DISCARD, self.DOCUMENT_P, self.DOMAIN_P, self.DOUBLE_P, self.DROP, self.EACH, self.ENABLE_P, self.ENCODING, self.ENCRYPTED, self.ENUM_P, self.ESCAPE, self.EXCLUDE, self.EXCLUDING, self.EXCLUSIVE, self.EXECUTE, self.EXPLAIN, self.EXTENSION, self.EXTERNAL, self.FAMILY, self.FIRST_P, self.FOLLOWING, self.FORCE, self.FORWARD, self.FUNCTION, self.FUNCTIONS, self.GLOBAL, self.GRANTED, self.HANDLER, self.HEADER_P, self.HOLD, self.HOUR_P, self.IDENTITY_P, self.IF_P, self.IMMEDIATE, self.IMMUTABLE, self.IMPLICIT_P, self.INCLUDING, self.INCREMENT, self.INDEX, self.INDEXES, self.INHERIT, self.INHERITS, self.INLINE_P, self.INPUT_P, self.INSENSITIVE, self.INSERT, self.INSTEAD, self.INVOKER, self.ISOLATION, self.KEY, self.LABEL, self.LANGUAGE, self.LARGE_P, self.LAST_P, self.LC_COLLATE_P, self.LC_CTYPE_P, self.LEAKPROOF, self.LEVEL, self.LISTEN, self.LOAD, self.LOCAL, self.LOCATION, self.LOCK_P, self.MAPPING, self.MATCH, self.MAXVALUE, self.MINUTE_P, self.MINVALUE, self.MODE, self.MONTH_P, self.MOVE, self.NAME_P, self.NAMES, self.NEXT, self.NO, self.NOTHING, self.NOTIFY, self.NOWAIT, self.NULLS_P, self.OBJECT_P, self.OF, self.OFF, self.OIDS, self.OPERATOR, self.OPTION, self.OPTIONS, self.OWNED, self.OWNER, self.PARSER, self.PARTIAL, self.PARTITION, self.PASSING, self.PASSWORD, self.PLANS, self.PRECEDING, self.PREPARE, self.PREPARED, self.PRESERVE, self.PRIOR, self.PRIVILEGES, self.PROCEDURAL, self.PROCEDURE, self.QUOTE, self.RANGE, self.READ, self.REASSIGN, self.RECHECK, self.RECURSIVE, self.REF, self.REINDEX, self.RELATIVE_P, self.RELEASE, self.RENAME, self.REPEATABLE, self.REPLACE, self.REPLICA, self.RESET, self.RESTART, self.RESTRICT, self.RETURNS, self.REVOKE, self.ROLE, self.ROLLBACK, self.ROWS, self.RULE, self.SAVEPOINT, self.SCHEMA, self.SCROLL, self.SEARCH, self.SECOND_P, self.SECURITY, self.SEQUENCE, self.SEQUENCES, self.SERIALIZABLE, self.SERVER, self.SESSION, self.SET, self.SHARE, self.SHOW, self.SIMPLE, self.SNAPSHOT, self.STABLE, self.STANDALONE_P, self.START, self.STATEMENT, self.STATISTICS, self.STDIN, self.STDOUT, self.STORAGE, self.STRICT_P, self.STRIP_P, self.SYSID, self.SYSTEM_P, self.TABLES, self.TABLESPACE, self.TEMP, self.TEMPLATE, self.TEMPORARY, self.TEXT_P, self.TRANSACTION, self.TRIGGER, self.TRUNCATE, self.TRUSTED, self.TYPE_P, self.TYPES_P, self.UNBOUNDED, self.UNCOMMITTED, self.UNENCRYPTED, self.UNKNOWN, self.UNLISTEN, self.UNLOGGED, self.UNTIL, self.UPDATE, self.VACUUM, self.VALID, self.VALIDATE, self.VALIDATOR, self.VALUE_P, self.VARYING, self.VERSION_P, self.VIEW, self.VOLATILE, self.WHITESPACE_P, self.WITHOUT, self.WORK, self.WRAPPER, self.WRITE, self.XML_P, self.YEAR_P, self.YES_P, self.ZONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8366 
                self.unreserved_keyword()

            elif token in [self.BETWEEN, self.BIGINT, self.BIT, self.BOOLEAN_P, self.CHAR_P, self.CHARACTER, self.COALESCE, self.DEC, self.DECIMAL_P, self.EXISTS, self.EXTRACT, self.FLOAT_P, self.GREATEST, self.INOUT, self.INT_P, self.INTEGER, self.INTERVAL, self.LEAST, self.NATIONAL, self.NCHAR, self.NONE, self.NULLIF, self.NUMERIC, self.OUT_P, self.OVERLAY, self.POSITION, self.PRECISION, self.REAL, self.ROW, self.SETOF, self.SMALLINT, self.SUBSTRING, self.TIME, self.TIMESTAMP, self.TREAT, self.TRIM, self.VALUES, self.VARCHAR, self.XMLATTRIBUTES, self.XMLCONCAT, self.XMLELEMENT, self.XMLEXISTS, self.XMLFOREST, self.XMLPARSE, self.XMLPI, self.XMLROOT, self.XMLSERIALIZE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8367 
                self.col_name_keyword()

            elif token in [self.AUTHORIZATION, self.BINARY, self.COLLATION, self.CONCURRENTLY, self.CROSS, self.CURRENT_SCHEMA, self.FREEZE, self.FULL, self.ILIKE, self.INNER_P, self.IS, self.ISNULL, self.JOIN, self.LEFT, self.LIKE, self.NATURAL, self.NOTNULL, self.OUTER_P, self.OVER, self.OVERLAPS, self.RIGHT, self.SIMILAR, self.VERBOSE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8368 
                self.type_func_name_keyword()

            elif token in [self.ALL, self.ANALYSE, self.ANALYZE, self.AND, self.ANY, self.ARRAY, self.AS, self.ASC, self.ASYMMETRIC, self.BOTH, self.CASE, self.CAST, self.CHECK, self.COLLATE, self.COLUMN, self.CONSTRAINT, self.CREATE, self.CURRENT_CATALOG, self.CURRENT_DATE, self.CURRENT_ROLE, self.CURRENT_TIME, self.CURRENT_TIMESTAMP, self.CURRENT_USER, self.DEFAULT, self.DEFERRABLE, self.DESC, self.DISTINCT, self.DO, self.ELSE, self.END_P, self.EXCEPT, self.FALSE_P, self.FETCH, self.FOR, self.FOREIGN, self.FROM, self.GRANT, self.GROUP_P, self.HAVING, self.IN_P, self.INITIALLY, self.INTERSECT, self.INTO, self.LEADING, self.LIMIT, self.LOCALTIME, self.LOCALTIMESTAMP, self.NOT, self.NULL_P, self.OFFSET, self.ON, self.ONLY, self.OR, self.ORDER, self.PLACING, self.PRIMARY, self.REFERENCES, self.RETURNING, self.SELECT, self.SESSION_USER, self.SOME, self.SYMMETRIC, self.TABLE, self.THEN, self.TO, self.TRAILING, self.TRUE_P, self.UNION, self.UNIQUE, self.USER, self.USING, self.VARIADIC, self.WHEN, self.WHERE, self.WINDOW, self.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8369 
                self.reserved_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unreserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Unreserved_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(SqlParser.DEFERRED, 0)

        def RECHECK(self):
            return self.getToken(SqlParser.RECHECK, 0)

        def BEFORE(self):
            return self.getToken(SqlParser.BEFORE, 0)

        def ENUM_P(self):
            return self.getToken(SqlParser.ENUM_P, 0)

        def RENAME(self):
            return self.getToken(SqlParser.RENAME, 0)

        def STRICT_P(self):
            return self.getToken(SqlParser.STRICT_P, 0)

        def OPTIONS(self):
            return self.getToken(SqlParser.OPTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlParser.INDEXES, 0)

        def NAMES(self):
            return self.getToken(SqlParser.NAMES, 0)

        def MONTH_P(self):
            return self.getToken(SqlParser.MONTH_P, 0)

        def TRUSTED(self):
            return self.getToken(SqlParser.TRUSTED, 0)

        def MINUTE_P(self):
            return self.getToken(SqlParser.MINUTE_P, 0)

        def CONTENT_P(self):
            return self.getToken(SqlParser.CONTENT_P, 0)

        def FORWARD(self):
            return self.getToken(SqlParser.FORWARD, 0)

        def CHARACTERISTICS(self):
            return self.getToken(SqlParser.CHARACTERISTICS, 0)

        def NO(self):
            return self.getToken(SqlParser.NO, 0)

        def PASSING(self):
            return self.getToken(SqlParser.PASSING, 0)

        def YES_P(self):
            return self.getToken(SqlParser.YES_P, 0)

        def DROP(self):
            return self.getToken(SqlParser.DROP, 0)

        def DICTIONARY(self):
            return self.getToken(SqlParser.DICTIONARY, 0)

        def INHERIT(self):
            return self.getToken(SqlParser.INHERIT, 0)

        def VERSION_P(self):
            return self.getToken(SqlParser.VERSION_P, 0)

        def CONTINUE_P(self):
            return self.getToken(SqlParser.CONTINUE_P, 0)

        def VALIDATOR(self):
            return self.getToken(SqlParser.VALIDATOR, 0)

        def UNENCRYPTED(self):
            return self.getToken(SqlParser.UNENCRYPTED, 0)

        def TABLESPACE(self):
            return self.getToken(SqlParser.TABLESPACE, 0)

        def HOLD(self):
            return self.getToken(SqlParser.HOLD, 0)

        def ADD_P(self):
            return self.getToken(SqlParser.ADD_P, 0)

        def ACCESS(self):
            return self.getToken(SqlParser.ACCESS, 0)

        def TYPES_P(self):
            return self.getToken(SqlParser.TYPES_P, 0)

        def DEFAULTS(self):
            return self.getToken(SqlParser.DEFAULTS, 0)

        def NOTIFY(self):
            return self.getToken(SqlParser.NOTIFY, 0)

        def TEMP(self):
            return self.getToken(SqlParser.TEMP, 0)

        def SIMPLE(self):
            return self.getToken(SqlParser.SIMPLE, 0)

        def CALLED(self):
            return self.getToken(SqlParser.CALLED, 0)

        def IMMUTABLE(self):
            return self.getToken(SqlParser.IMMUTABLE, 0)

        def OPTION(self):
            return self.getToken(SqlParser.OPTION, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlParser.IMMEDIATE, 0)

        def TEXT_P(self):
            return self.getToken(SqlParser.TEXT_P, 0)

        def INSENSITIVE(self):
            return self.getToken(SqlParser.INSENSITIVE, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlParser.SERIALIZABLE, 0)

        def ASSERTION(self):
            return self.getToken(SqlParser.ASSERTION, 0)

        def STORAGE(self):
            return self.getToken(SqlParser.STORAGE, 0)

        def STDIN(self):
            return self.getToken(SqlParser.STDIN, 0)

        def REASSIGN(self):
            return self.getToken(SqlParser.REASSIGN, 0)

        def NOTHING(self):
            return self.getToken(SqlParser.NOTHING, 0)

        def PROCEDURAL(self):
            return self.getToken(SqlParser.PROCEDURAL, 0)

        def DISABLE_P(self):
            return self.getToken(SqlParser.DISABLE_P, 0)

        def PARSER(self):
            return self.getToken(SqlParser.PARSER, 0)

        def INCREMENT(self):
            return self.getToken(SqlParser.INCREMENT, 0)

        def QUOTE(self):
            return self.getToken(SqlParser.QUOTE, 0)

        def LC_COLLATE_P(self):
            return self.getToken(SqlParser.LC_COLLATE_P, 0)

        def ROWS(self):
            return self.getToken(SqlParser.ROWS, 0)

        def COMMIT(self):
            return self.getToken(SqlParser.COMMIT, 0)

        def LOCAL(self):
            return self.getToken(SqlParser.LOCAL, 0)

        def REINDEX(self):
            return self.getToken(SqlParser.REINDEX, 0)

        def REPLICA(self):
            return self.getToken(SqlParser.REPLICA, 0)

        def CONVERSION_P(self):
            return self.getToken(SqlParser.CONVERSION_P, 0)

        def VIEW(self):
            return self.getToken(SqlParser.VIEW, 0)

        def PRESERVE(self):
            return self.getToken(SqlParser.PRESERVE, 0)

        def RELATIVE_P(self):
            return self.getToken(SqlParser.RELATIVE_P, 0)

        def LOAD(self):
            return self.getToken(SqlParser.LOAD, 0)

        def CSV(self):
            return self.getToken(SqlParser.CSV, 0)

        def PREPARE(self):
            return self.getToken(SqlParser.PREPARE, 0)

        def COMMITTED(self):
            return self.getToken(SqlParser.COMMITTED, 0)

        def NAME_P(self):
            return self.getToken(SqlParser.NAME_P, 0)

        def FORCE(self):
            return self.getToken(SqlParser.FORCE, 0)

        def WRAPPER(self):
            return self.getToken(SqlParser.WRAPPER, 0)

        def BY(self):
            return self.getToken(SqlParser.BY, 0)

        def INSTEAD(self):
            return self.getToken(SqlParser.INSTEAD, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlParser.PRIVILEGES, 0)

        def DATA_P(self):
            return self.getToken(SqlParser.DATA_P, 0)

        def OPERATOR(self):
            return self.getToken(SqlParser.OPERATOR, 0)

        def STATEMENT(self):
            return self.getToken(SqlParser.STATEMENT, 0)

        def EXCLUDE(self):
            return self.getToken(SqlParser.EXCLUDE, 0)

        def DOCUMENT_P(self):
            return self.getToken(SqlParser.DOCUMENT_P, 0)

        def MODE(self):
            return self.getToken(SqlParser.MODE, 0)

        def COMMENTS(self):
            return self.getToken(SqlParser.COMMENTS, 0)

        def STATISTICS(self):
            return self.getToken(SqlParser.STATISTICS, 0)

        def ENCODING(self):
            return self.getToken(SqlParser.ENCODING, 0)

        def CHECKPOINT(self):
            return self.getToken(SqlParser.CHECKPOINT, 0)

        def PREPARED(self):
            return self.getToken(SqlParser.PREPARED, 0)

        def CONSTRAINTS(self):
            return self.getToken(SqlParser.CONSTRAINTS, 0)

        def READ(self):
            return self.getToken(SqlParser.READ, 0)

        def CLUSTER(self):
            return self.getToken(SqlParser.CLUSTER, 0)

        def ROLE(self):
            return self.getToken(SqlParser.ROLE, 0)

        def TRANSACTION(self):
            return self.getToken(SqlParser.TRANSACTION, 0)

        def PROCEDURE(self):
            return self.getToken(SqlParser.PROCEDURE, 0)

        def UNLISTEN(self):
            return self.getToken(SqlParser.UNLISTEN, 0)

        def TABLES(self):
            return self.getToken(SqlParser.TABLES, 0)

        def LC_CTYPE_P(self):
            return self.getToken(SqlParser.LC_CTYPE_P, 0)

        def EXCLUSIVE(self):
            return self.getToken(SqlParser.EXCLUSIVE, 0)

        def GLOBAL(self):
            return self.getToken(SqlParser.GLOBAL, 0)

        def WORK(self):
            return self.getToken(SqlParser.WORK, 0)

        def VALID(self):
            return self.getToken(SqlParser.VALID, 0)

        def STABLE(self):
            return self.getToken(SqlParser.STABLE, 0)

        def OF(self):
            return self.getToken(SqlParser.OF, 0)

        def UNTIL(self):
            return self.getToken(SqlParser.UNTIL, 0)

        def LANGUAGE(self):
            return self.getToken(SqlParser.LANGUAGE, 0)

        def COPY(self):
            return self.getToken(SqlParser.COPY, 0)

        def SESSION(self):
            return self.getToken(SqlParser.SESSION, 0)

        def HEADER_P(self):
            return self.getToken(SqlParser.HEADER_P, 0)

        def PASSWORD(self):
            return self.getToken(SqlParser.PASSWORD, 0)

        def IF_P(self):
            return self.getToken(SqlParser.IF_P, 0)

        def MATCH(self):
            return self.getToken(SqlParser.MATCH, 0)

        def START(self):
            return self.getToken(SqlParser.START, 0)

        def DELETE_P(self):
            return self.getToken(SqlParser.DELETE_P, 0)

        def SECOND_P(self):
            return self.getToken(SqlParser.SECOND_P, 0)

        def CASCADED(self):
            return self.getToken(SqlParser.CASCADED, 0)

        def BACKWARD(self):
            return self.getToken(SqlParser.BACKWARD, 0)

        def RESET(self):
            return self.getToken(SqlParser.RESET, 0)

        def SYSID(self):
            return self.getToken(SqlParser.SYSID, 0)

        def FIRST_P(self):
            return self.getToken(SqlParser.FIRST_P, 0)

        def LABEL(self):
            return self.getToken(SqlParser.LABEL, 0)

        def OWNED(self):
            return self.getToken(SqlParser.OWNED, 0)

        def ABORT_P(self):
            return self.getToken(SqlParser.ABORT_P, 0)

        def ABSOLUTE_P(self):
            return self.getToken(SqlParser.ABSOLUTE_P, 0)

        def OBJECT_P(self):
            return self.getToken(SqlParser.OBJECT_P, 0)

        def TRUNCATE(self):
            return self.getToken(SqlParser.TRUNCATE, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlParser.FUNCTIONS, 0)

        def EACH(self):
            return self.getToken(SqlParser.EACH, 0)

        def REVOKE(self):
            return self.getToken(SqlParser.REVOKE, 0)

        def VARYING(self):
            return self.getToken(SqlParser.VARYING, 0)

        def RELEASE(self):
            return self.getToken(SqlParser.RELEASE, 0)

        def ROLLBACK(self):
            return self.getToken(SqlParser.ROLLBACK, 0)

        def COST(self):
            return self.getToken(SqlParser.COST, 0)

        def PARTITION(self):
            return self.getToken(SqlParser.PARTITION, 0)

        def LAST_P(self):
            return self.getToken(SqlParser.LAST_P, 0)

        def LOCK_P(self):
            return self.getToken(SqlParser.LOCK_P, 0)

        def ESCAPE(self):
            return self.getToken(SqlParser.ESCAPE, 0)

        def INVOKER(self):
            return self.getToken(SqlParser.INVOKER, 0)

        def NULLS_P(self):
            return self.getToken(SqlParser.NULLS_P, 0)

        def ENCRYPTED(self):
            return self.getToken(SqlParser.ENCRYPTED, 0)

        def DEALLOCATE(self):
            return self.getToken(SqlParser.DEALLOCATE, 0)

        def CONFIGURATION(self):
            return self.getToken(SqlParser.CONFIGURATION, 0)

        def INCLUDING(self):
            return self.getToken(SqlParser.INCLUDING, 0)

        def RULE(self):
            return self.getToken(SqlParser.RULE, 0)

        def BEGIN_P(self):
            return self.getToken(SqlParser.BEGIN_P, 0)

        def CASCADE(self):
            return self.getToken(SqlParser.CASCADE, 0)

        def VALIDATE(self):
            return self.getToken(SqlParser.VALIDATE, 0)

        def CLOSE(self):
            return self.getToken(SqlParser.CLOSE, 0)

        def TYPE_P(self):
            return self.getToken(SqlParser.TYPE_P, 0)

        def FOLLOWING(self):
            return self.getToken(SqlParser.FOLLOWING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlParser.EXCLUDING, 0)

        def CACHE(self):
            return self.getToken(SqlParser.CACHE, 0)

        def MOVE(self):
            return self.getToken(SqlParser.MOVE, 0)

        def EXPLAIN(self):
            return self.getToken(SqlParser.EXPLAIN, 0)

        def NOWAIT(self):
            return self.getToken(SqlParser.NOWAIT, 0)

        def PRECEDING(self):
            return self.getToken(SqlParser.PRECEDING, 0)

        def ISOLATION(self):
            return self.getToken(SqlParser.ISOLATION, 0)

        def RESTART(self):
            return self.getToken(SqlParser.RESTART, 0)

        def VOLATILE(self):
            return self.getToken(SqlParser.VOLATILE, 0)

        def TEMPLATE(self):
            return self.getToken(SqlParser.TEMPLATE, 0)

        def CLASS(self):
            return self.getToken(SqlParser.CLASS, 0)

        def REF(self):
            return self.getToken(SqlParser.REF, 0)

        def IDENTITY_P(self):
            return self.getToken(SqlParser.IDENTITY_P, 0)

        def STDOUT(self):
            return self.getToken(SqlParser.STDOUT, 0)

        def CURSOR(self):
            return self.getToken(SqlParser.CURSOR, 0)

        def ENABLE_P(self):
            return self.getToken(SqlParser.ENABLE_P, 0)

        def DELIMITER(self):
            return self.getToken(SqlParser.DELIMITER, 0)

        def ALWAYS(self):
            return self.getToken(SqlParser.ALWAYS, 0)

        def UNLOGGED(self):
            return self.getToken(SqlParser.UNLOGGED, 0)

        def WHITESPACE_P(self):
            return self.getToken(SqlParser.WHITESPACE_P, 0)

        def MAPPING(self):
            return self.getToken(SqlParser.MAPPING, 0)

        def SCROLL(self):
            return self.getToken(SqlParser.SCROLL, 0)

        def SECURITY(self):
            return self.getToken(SqlParser.SECURITY, 0)

        def SAVEPOINT(self):
            return self.getToken(SqlParser.SAVEPOINT, 0)

        def ZONE(self):
            return self.getToken(SqlParser.ZONE, 0)

        def FAMILY(self):
            return self.getToken(SqlParser.FAMILY, 0)

        def DAY_P(self):
            return self.getToken(SqlParser.DAY_P, 0)

        def SEQUENCES(self):
            return self.getToken(SqlParser.SEQUENCES, 0)

        def NEXT(self):
            return self.getToken(SqlParser.NEXT, 0)

        def DECLARE(self):
            return self.getToken(SqlParser.DECLARE, 0)

        def EXTENSION(self):
            return self.getToken(SqlParser.EXTENSION, 0)

        def DOUBLE_P(self):
            return self.getToken(SqlParser.DOUBLE_P, 0)

        def KEY(self):
            return self.getToken(SqlParser.KEY, 0)

        def INSERT(self):
            return self.getToken(SqlParser.INSERT, 0)

        def LOCATION(self):
            return self.getToken(SqlParser.LOCATION, 0)

        def ASSIGNMENT(self):
            return self.getToken(SqlParser.ASSIGNMENT, 0)

        def GRANTED(self):
            return self.getToken(SqlParser.GRANTED, 0)

        def LEAKPROOF(self):
            return self.getToken(SqlParser.LEAKPROOF, 0)

        def RECURSIVE(self):
            return self.getToken(SqlParser.RECURSIVE, 0)

        def CYCLE(self):
            return self.getToken(SqlParser.CYCLE, 0)

        def LARGE_P(self):
            return self.getToken(SqlParser.LARGE_P, 0)

        def CURRENT_P(self):
            return self.getToken(SqlParser.CURRENT_P, 0)

        def HANDLER(self):
            return self.getToken(SqlParser.HANDLER, 0)

        def SNAPSHOT(self):
            return self.getToken(SqlParser.SNAPSHOT, 0)

        def ALTER(self):
            return self.getToken(SqlParser.ALTER, 0)

        def PRIOR(self):
            return self.getToken(SqlParser.PRIOR, 0)

        def HOUR_P(self):
            return self.getToken(SqlParser.HOUR_P, 0)

        def AT(self):
            return self.getToken(SqlParser.AT, 0)

        def RESTRICT(self):
            return self.getToken(SqlParser.RESTRICT, 0)

        def XML_P(self):
            return self.getToken(SqlParser.XML_P, 0)

        def OWNER(self):
            return self.getToken(SqlParser.OWNER, 0)

        def EXTERNAL(self):
            return self.getToken(SqlParser.EXTERNAL, 0)

        def SEARCH(self):
            return self.getToken(SqlParser.SEARCH, 0)

        def TRIGGER(self):
            return self.getToken(SqlParser.TRIGGER, 0)

        def INLINE_P(self):
            return self.getToken(SqlParser.INLINE_P, 0)

        def MINVALUE(self):
            return self.getToken(SqlParser.MINVALUE, 0)

        def VALUE_P(self):
            return self.getToken(SqlParser.VALUE_P, 0)

        def WRITE(self):
            return self.getToken(SqlParser.WRITE, 0)

        def AGGREGATE(self):
            return self.getToken(SqlParser.AGGREGATE, 0)

        def SET(self):
            return self.getToken(SqlParser.SET, 0)

        def EXECUTE(self):
            return self.getToken(SqlParser.EXECUTE, 0)

        def ADMIN(self):
            return self.getToken(SqlParser.ADMIN, 0)

        def PLANS(self):
            return self.getToken(SqlParser.PLANS, 0)

        def SCHEMA(self):
            return self.getToken(SqlParser.SCHEMA, 0)

        def STRIP_P(self):
            return self.getToken(SqlParser.STRIP_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(SqlParser.ATTRIBUTE, 0)

        def INHERITS(self):
            return self.getToken(SqlParser.INHERITS, 0)

        def PARTIAL(self):
            return self.getToken(SqlParser.PARTIAL, 0)

        def SHOW(self):
            return self.getToken(SqlParser.SHOW, 0)

        def SHARE(self):
            return self.getToken(SqlParser.SHARE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlParser.UNKNOWN, 0)

        def ALSO(self):
            return self.getToken(SqlParser.ALSO, 0)

        def SERVER(self):
            return self.getToken(SqlParser.SERVER, 0)

        def UPDATE(self):
            return self.getToken(SqlParser.UPDATE, 0)

        def COMMENT(self):
            return self.getToken(SqlParser.COMMENT, 0)

        def YEAR_P(self):
            return self.getToken(SqlParser.YEAR_P, 0)

        def WITHOUT(self):
            return self.getToken(SqlParser.WITHOUT, 0)

        def CONNECTION(self):
            return self.getToken(SqlParser.CONNECTION, 0)

        def LISTEN(self):
            return self.getToken(SqlParser.LISTEN, 0)

        def SYSTEM_P(self):
            return self.getToken(SqlParser.SYSTEM_P, 0)

        def DEFINER(self):
            return self.getToken(SqlParser.DEFINER, 0)

        def DATABASE(self):
            return self.getToken(SqlParser.DATABASE, 0)

        def RANGE(self):
            return self.getToken(SqlParser.RANGE, 0)

        def DELIMITERS(self):
            return self.getToken(SqlParser.DELIMITERS, 0)

        def TEMPORARY(self):
            return self.getToken(SqlParser.TEMPORARY, 0)

        def LEVEL(self):
            return self.getToken(SqlParser.LEVEL, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlParser.UNCOMMITTED, 0)

        def VACUUM(self):
            return self.getToken(SqlParser.VACUUM, 0)

        def STANDALONE_P(self):
            return self.getToken(SqlParser.STANDALONE_P, 0)

        def MAXVALUE(self):
            return self.getToken(SqlParser.MAXVALUE, 0)

        def DOMAIN_P(self):
            return self.getToken(SqlParser.DOMAIN_P, 0)

        def DISCARD(self):
            return self.getToken(SqlParser.DISCARD, 0)

        def REPEATABLE(self):
            return self.getToken(SqlParser.REPEATABLE, 0)

        def SEQUENCE(self):
            return self.getToken(SqlParser.SEQUENCE, 0)

        def OFF(self):
            return self.getToken(SqlParser.OFF, 0)

        def OIDS(self):
            return self.getToken(SqlParser.OIDS, 0)

        def CATALOG_P(self):
            return self.getToken(SqlParser.CATALOG_P, 0)

        def ACTION(self):
            return self.getToken(SqlParser.ACTION, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlParser.UNBOUNDED, 0)

        def CHAIN(self):
            return self.getToken(SqlParser.CHAIN, 0)

        def FUNCTION(self):
            return self.getToken(SqlParser.FUNCTION, 0)

        def IMPLICIT_P(self):
            return self.getToken(SqlParser.IMPLICIT_P, 0)

        def REPLACE(self):
            return self.getToken(SqlParser.REPLACE, 0)

        def INPUT_P(self):
            return self.getToken(SqlParser.INPUT_P, 0)

        def RETURNS(self):
            return self.getToken(SqlParser.RETURNS, 0)

        def AFTER(self):
            return self.getToken(SqlParser.AFTER, 0)

        def INDEX(self):
            return self.getToken(SqlParser.INDEX, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_unreserved_keyword

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterUnreserved_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitUnreserved_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitUnreserved_keyword(self)
            else:
                return visitor.visitChildren(self)




    def unreserved_keyword(self):

        localctx = SqlParser.Unreserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_unreserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8372
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ABORT_P) | (1 << self.ABSOLUTE_P) | (1 << self.ACCESS) | (1 << self.ACTION) | (1 << self.ADD_P) | (1 << self.ADMIN) | (1 << self.AFTER) | (1 << self.AGGREGATE) | (1 << self.ALSO) | (1 << self.ALTER) | (1 << self.ALWAYS) | (1 << self.ASSERTION) | (1 << self.ASSIGNMENT) | (1 << self.AT) | (1 << self.ATTRIBUTE) | (1 << self.BACKWARD) | (1 << self.BEFORE) | (1 << self.BEGIN_P) | (1 << self.BY) | (1 << self.CACHE) | (1 << self.CALLED) | (1 << self.CASCADE) | (1 << self.CASCADED) | (1 << self.CATALOG_P) | (1 << self.CHAIN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (self.CHARACTERISTICS - 64)) | (1 << (self.CHECKPOINT - 64)) | (1 << (self.CLASS - 64)) | (1 << (self.CLOSE - 64)) | (1 << (self.CLUSTER - 64)) | (1 << (self.COMMENT - 64)) | (1 << (self.COMMENTS - 64)) | (1 << (self.COMMIT - 64)) | (1 << (self.COMMITTED - 64)) | (1 << (self.CONFIGURATION - 64)) | (1 << (self.CONNECTION - 64)) | (1 << (self.CONSTRAINTS - 64)) | (1 << (self.CONTENT_P - 64)) | (1 << (self.CONTINUE_P - 64)) | (1 << (self.CONVERSION_P - 64)) | (1 << (self.COPY - 64)) | (1 << (self.COST - 64)) | (1 << (self.CSV - 64)) | (1 << (self.CURRENT_P - 64)) | (1 << (self.CURSOR - 64)) | (1 << (self.CYCLE - 64)) | (1 << (self.DATA_P - 64)) | (1 << (self.DATABASE - 64)) | (1 << (self.DAY_P - 64)) | (1 << (self.DEALLOCATE - 64)) | (1 << (self.DECLARE - 64)) | (1 << (self.DEFAULTS - 64)) | (1 << (self.DEFERRED - 64)) | (1 << (self.DEFINER - 64)) | (1 << (self.DELETE_P - 64)) | (1 << (self.DELIMITER - 64)) | (1 << (self.DELIMITERS - 64)) | (1 << (self.DICTIONARY - 64)) | (1 << (self.DISABLE_P - 64)) | (1 << (self.DISCARD - 64)) | (1 << (self.DOCUMENT_P - 64)) | (1 << (self.DOMAIN_P - 64)) | (1 << (self.DOUBLE_P - 64)) | (1 << (self.DROP - 64)) | (1 << (self.EACH - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (self.ENABLE_P - 128)) | (1 << (self.ENCODING - 128)) | (1 << (self.ENCRYPTED - 128)) | (1 << (self.ENUM_P - 128)) | (1 << (self.ESCAPE - 128)) | (1 << (self.EXCLUDE - 128)) | (1 << (self.EXCLUDING - 128)) | (1 << (self.EXCLUSIVE - 128)) | (1 << (self.EXECUTE - 128)) | (1 << (self.EXPLAIN - 128)) | (1 << (self.EXTENSION - 128)) | (1 << (self.EXTERNAL - 128)) | (1 << (self.FAMILY - 128)) | (1 << (self.FIRST_P - 128)) | (1 << (self.FOLLOWING - 128)) | (1 << (self.FORCE - 128)) | (1 << (self.FORWARD - 128)) | (1 << (self.FUNCTION - 128)) | (1 << (self.FUNCTIONS - 128)) | (1 << (self.GLOBAL - 128)) | (1 << (self.GRANTED - 128)) | (1 << (self.HANDLER - 128)) | (1 << (self.HEADER_P - 128)) | (1 << (self.HOLD - 128)) | (1 << (self.HOUR_P - 128)) | (1 << (self.IDENTITY_P - 128)) | (1 << (self.IF_P - 128)) | (1 << (self.IMMEDIATE - 128)) | (1 << (self.IMMUTABLE - 128)) | (1 << (self.IMPLICIT_P - 128)) | (1 << (self.INCLUDING - 128)) | (1 << (self.INCREMENT - 128)) | (1 << (self.INDEX - 128)) | (1 << (self.INDEXES - 128)) | (1 << (self.INHERIT - 128)) | (1 << (self.INHERITS - 128)) | (1 << (self.INLINE_P - 128)) | (1 << (self.INPUT_P - 128)) | (1 << (self.INSENSITIVE - 128)) | (1 << (self.INSERT - 128)) | (1 << (self.INSTEAD - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (self.INVOKER - 195)) | (1 << (self.ISOLATION - 195)) | (1 << (self.KEY - 195)) | (1 << (self.LABEL - 195)) | (1 << (self.LANGUAGE - 195)) | (1 << (self.LARGE_P - 195)) | (1 << (self.LAST_P - 195)) | (1 << (self.LC_COLLATE_P - 195)) | (1 << (self.LC_CTYPE_P - 195)) | (1 << (self.LEAKPROOF - 195)) | (1 << (self.LEVEL - 195)) | (1 << (self.LISTEN - 195)) | (1 << (self.LOAD - 195)) | (1 << (self.LOCAL - 195)) | (1 << (self.LOCATION - 195)) | (1 << (self.LOCK_P - 195)) | (1 << (self.MAPPING - 195)) | (1 << (self.MATCH - 195)) | (1 << (self.MAXVALUE - 195)) | (1 << (self.MINUTE_P - 195)) | (1 << (self.MINVALUE - 195)) | (1 << (self.MODE - 195)) | (1 << (self.MONTH_P - 195)) | (1 << (self.MOVE - 195)) | (1 << (self.NAME_P - 195)) | (1 << (self.NAMES - 195)) | (1 << (self.NEXT - 195)) | (1 << (self.NO - 195)) | (1 << (self.NOTHING - 195)) | (1 << (self.NOTIFY - 195)) | (1 << (self.NOWAIT - 195)) | (1 << (self.NULLS_P - 195)) | (1 << (self.OBJECT_P - 195)) | (1 << (self.OF - 195)) | (1 << (self.OFF - 195)) | (1 << (self.OIDS - 195)) | (1 << (self.OPERATOR - 195)) | (1 << (self.OPTION - 195)) | (1 << (self.OPTIONS - 195)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (self.OWNED - 263)) | (1 << (self.OWNER - 263)) | (1 << (self.PARSER - 263)) | (1 << (self.PARTIAL - 263)) | (1 << (self.PARTITION - 263)) | (1 << (self.PASSING - 263)) | (1 << (self.PASSWORD - 263)) | (1 << (self.PLANS - 263)) | (1 << (self.PRECEDING - 263)) | (1 << (self.PREPARE - 263)) | (1 << (self.PREPARED - 263)) | (1 << (self.PRESERVE - 263)) | (1 << (self.PRIOR - 263)) | (1 << (self.PRIVILEGES - 263)) | (1 << (self.PROCEDURAL - 263)) | (1 << (self.PROCEDURE - 263)) | (1 << (self.QUOTE - 263)) | (1 << (self.RANGE - 263)) | (1 << (self.READ - 263)) | (1 << (self.REASSIGN - 263)) | (1 << (self.RECHECK - 263)) | (1 << (self.RECURSIVE - 263)) | (1 << (self.REF - 263)) | (1 << (self.REINDEX - 263)) | (1 << (self.RELATIVE_P - 263)) | (1 << (self.RELEASE - 263)) | (1 << (self.RENAME - 263)) | (1 << (self.REPEATABLE - 263)) | (1 << (self.REPLACE - 263)) | (1 << (self.REPLICA - 263)) | (1 << (self.RESET - 263)) | (1 << (self.RESTART - 263)) | (1 << (self.RESTRICT - 263)) | (1 << (self.RETURNS - 263)) | (1 << (self.REVOKE - 263)) | (1 << (self.ROLE - 263)) | (1 << (self.ROLLBACK - 263)) | (1 << (self.ROWS - 263)) | (1 << (self.RULE - 263)) | (1 << (self.SAVEPOINT - 263)) | (1 << (self.SCHEMA - 263)) | (1 << (self.SCROLL - 263)) | (1 << (self.SEARCH - 263)) | (1 << (self.SECOND_P - 263)) | (1 << (self.SECURITY - 263)) | (1 << (self.SEQUENCE - 263)) | (1 << (self.SEQUENCES - 263)) | (1 << (self.SERIALIZABLE - 263)) | (1 << (self.SERVER - 263)) | (1 << (self.SESSION - 263)) | (1 << (self.SET - 263)) | (1 << (self.SHARE - 263)))) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & ((1 << (self.SHOW - 327)) | (1 << (self.SIMPLE - 327)) | (1 << (self.SNAPSHOT - 327)) | (1 << (self.STABLE - 327)) | (1 << (self.STANDALONE_P - 327)) | (1 << (self.START - 327)) | (1 << (self.STATEMENT - 327)) | (1 << (self.STATISTICS - 327)) | (1 << (self.STDIN - 327)) | (1 << (self.STDOUT - 327)) | (1 << (self.STORAGE - 327)) | (1 << (self.STRICT_P - 327)) | (1 << (self.STRIP_P - 327)) | (1 << (self.SYSID - 327)) | (1 << (self.SYSTEM_P - 327)) | (1 << (self.TABLES - 327)) | (1 << (self.TABLESPACE - 327)) | (1 << (self.TEMP - 327)) | (1 << (self.TEMPLATE - 327)) | (1 << (self.TEMPORARY - 327)) | (1 << (self.TEXT_P - 327)) | (1 << (self.TRANSACTION - 327)) | (1 << (self.TRIGGER - 327)) | (1 << (self.TRUNCATE - 327)) | (1 << (self.TRUSTED - 327)) | (1 << (self.TYPE_P - 327)) | (1 << (self.TYPES_P - 327)) | (1 << (self.UNBOUNDED - 327)) | (1 << (self.UNCOMMITTED - 327)) | (1 << (self.UNENCRYPTED - 327)) | (1 << (self.UNKNOWN - 327)) | (1 << (self.UNLISTEN - 327)) | (1 << (self.UNLOGGED - 327)) | (1 << (self.UNTIL - 327)) | (1 << (self.UPDATE - 327)) | (1 << (self.VACUUM - 327)) | (1 << (self.VALID - 327)) | (1 << (self.VALIDATE - 327)) | (1 << (self.VALIDATOR - 327)) | (1 << (self.VALUE_P - 327)) | (1 << (self.VARYING - 327)) | (1 << (self.VERSION_P - 327)))) != 0) or ((((_la - 391)) & ~0x3f) == 0 and ((1 << (_la - 391)) & ((1 << (self.VIEW - 391)) | (1 << (self.VOLATILE - 391)) | (1 << (self.WHITESPACE_P - 391)) | (1 << (self.WITHOUT - 391)) | (1 << (self.WORK - 391)) | (1 << (self.WRAPPER - 391)) | (1 << (self.WRITE - 391)) | (1 << (self.XML_P - 391)) | (1 << (self.YEAR_P - 391)) | (1 << (self.YES_P - 391)) | (1 << (self.ZONE - 391)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_name_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Col_name_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(SqlParser.TIMESTAMP, 0)

        def COALESCE(self):
            return self.getToken(SqlParser.COALESCE, 0)

        def BIT(self):
            return self.getToken(SqlParser.BIT, 0)

        def EXISTS(self):
            return self.getToken(SqlParser.EXISTS, 0)

        def NULLIF(self):
            return self.getToken(SqlParser.NULLIF, 0)

        def TIME(self):
            return self.getToken(SqlParser.TIME, 0)

        def CHAR_P(self):
            return self.getToken(SqlParser.CHAR_P, 0)

        def XMLEXISTS(self):
            return self.getToken(SqlParser.XMLEXISTS, 0)

        def TRIM(self):
            return self.getToken(SqlParser.TRIM, 0)

        def SETOF(self):
            return self.getToken(SqlParser.SETOF, 0)

        def DEC(self):
            return self.getToken(SqlParser.DEC, 0)

        def INOUT(self):
            return self.getToken(SqlParser.INOUT, 0)

        def XMLROOT(self):
            return self.getToken(SqlParser.XMLROOT, 0)

        def CHARACTER(self):
            return self.getToken(SqlParser.CHARACTER, 0)

        def ROW(self):
            return self.getToken(SqlParser.ROW, 0)

        def TREAT(self):
            return self.getToken(SqlParser.TREAT, 0)

        def DECIMAL_P(self):
            return self.getToken(SqlParser.DECIMAL_P, 0)

        def INT_P(self):
            return self.getToken(SqlParser.INT_P, 0)

        def REAL(self):
            return self.getToken(SqlParser.REAL, 0)

        def VALUES(self):
            return self.getToken(SqlParser.VALUES, 0)

        def GREATEST(self):
            return self.getToken(SqlParser.GREATEST, 0)

        def INTERVAL(self):
            return self.getToken(SqlParser.INTERVAL, 0)

        def BIGINT(self):
            return self.getToken(SqlParser.BIGINT, 0)

        def SMALLINT(self):
            return self.getToken(SqlParser.SMALLINT, 0)

        def XMLPI(self):
            return self.getToken(SqlParser.XMLPI, 0)

        def OVERLAY(self):
            return self.getToken(SqlParser.OVERLAY, 0)

        def XMLSERIALIZE(self):
            return self.getToken(SqlParser.XMLSERIALIZE, 0)

        def EXTRACT(self):
            return self.getToken(SqlParser.EXTRACT, 0)

        def LEAST(self):
            return self.getToken(SqlParser.LEAST, 0)

        def VARCHAR(self):
            return self.getToken(SqlParser.VARCHAR, 0)

        def XMLCONCAT(self):
            return self.getToken(SqlParser.XMLCONCAT, 0)

        def PRECISION(self):
            return self.getToken(SqlParser.PRECISION, 0)

        def XMLPARSE(self):
            return self.getToken(SqlParser.XMLPARSE, 0)

        def BOOLEAN_P(self):
            return self.getToken(SqlParser.BOOLEAN_P, 0)

        def FLOAT_P(self):
            return self.getToken(SqlParser.FLOAT_P, 0)

        def NATIONAL(self):
            return self.getToken(SqlParser.NATIONAL, 0)

        def BETWEEN(self):
            return self.getToken(SqlParser.BETWEEN, 0)

        def NUMERIC(self):
            return self.getToken(SqlParser.NUMERIC, 0)

        def XMLELEMENT(self):
            return self.getToken(SqlParser.XMLELEMENT, 0)

        def OUT_P(self):
            return self.getToken(SqlParser.OUT_P, 0)

        def POSITION(self):
            return self.getToken(SqlParser.POSITION, 0)

        def NONE(self):
            return self.getToken(SqlParser.NONE, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(SqlParser.XMLATTRIBUTES, 0)

        def XMLFOREST(self):
            return self.getToken(SqlParser.XMLFOREST, 0)

        def NCHAR(self):
            return self.getToken(SqlParser.NCHAR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlParser.SUBSTRING, 0)

        def INTEGER(self):
            return self.getToken(SqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_col_name_keyword

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterCol_name_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitCol_name_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitCol_name_keyword(self)
            else:
                return visitor.visitChildren(self)




    def col_name_keyword(self):

        localctx = SqlParser.Col_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_col_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8374
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (self.BETWEEN - 47)) | (1 << (self.BIGINT - 47)) | (1 << (self.BIT - 47)) | (1 << (self.BOOLEAN_P - 47)) | (1 << (self.CHAR_P - 47)) | (1 << (self.CHARACTER - 47)) | (1 << (self.COALESCE - 47)) | (1 << (self.DEC - 47)) | (1 << (self.DECIMAL_P - 47)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (self.EXISTS - 139)) | (1 << (self.EXTRACT - 139)) | (1 << (self.FLOAT_P - 139)) | (1 << (self.GREATEST - 139)) | (1 << (self.INOUT - 139)) | (1 << (self.INT_P - 139)) | (1 << (self.INTEGER - 139)) | (1 << (self.INTERVAL - 139)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (self.LEAST - 209)) | (1 << (self.NATIONAL - 209)) | (1 << (self.NCHAR - 209)) | (1 << (self.NONE - 209)) | (1 << (self.NULLIF - 209)) | (1 << (self.NUMERIC - 209)) | (1 << (self.OUT_P - 209)) | (1 << (self.OVERLAY - 209)) | (1 << (self.POSITION - 209)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (self.PRECISION - 274)) | (1 << (self.REAL - 274)) | (1 << (self.ROW - 274)) | (1 << (self.SETOF - 274)) | (1 << (self.SMALLINT - 274)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (self.SUBSTRING - 343)) | (1 << (self.TIME - 343)) | (1 << (self.TIMESTAMP - 343)) | (1 << (self.TREAT - 343)) | (1 << (self.TRIM - 343)) | (1 << (self.VALUES - 343)) | (1 << (self.VARCHAR - 343)) | (1 << (self.XMLATTRIBUTES - 343)) | (1 << (self.XMLCONCAT - 343)) | (1 << (self.XMLELEMENT - 343)) | (1 << (self.XMLEXISTS - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (self.XMLFOREST - 407)) | (1 << (self.XMLPARSE - 407)) | (1 << (self.XMLPI - 407)) | (1 << (self.XMLROOT - 407)) | (1 << (self.XMLSERIALIZE - 407)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_func_name_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Type_func_name_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SqlParser.JOIN, 0)

        def OUTER_P(self):
            return self.getToken(SqlParser.OUTER_P, 0)

        def FULL(self):
            return self.getToken(SqlParser.FULL, 0)

        def VERBOSE(self):
            return self.getToken(SqlParser.VERBOSE, 0)

        def INNER_P(self):
            return self.getToken(SqlParser.INNER_P, 0)

        def ISNULL(self):
            return self.getToken(SqlParser.ISNULL, 0)

        def OVERLAPS(self):
            return self.getToken(SqlParser.OVERLAPS, 0)

        def LEFT(self):
            return self.getToken(SqlParser.LEFT, 0)

        def IS(self):
            return self.getToken(SqlParser.IS, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlParser.AUTHORIZATION, 0)

        def OVER(self):
            return self.getToken(SqlParser.OVER, 0)

        def NATURAL(self):
            return self.getToken(SqlParser.NATURAL, 0)

        def SIMILAR(self):
            return self.getToken(SqlParser.SIMILAR, 0)

        def CONCURRENTLY(self):
            return self.getToken(SqlParser.CONCURRENTLY, 0)

        def NOTNULL(self):
            return self.getToken(SqlParser.NOTNULL, 0)

        def CROSS(self):
            return self.getToken(SqlParser.CROSS, 0)

        def ILIKE(self):
            return self.getToken(SqlParser.ILIKE, 0)

        def COLLATION(self):
            return self.getToken(SqlParser.COLLATION, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlParser.CURRENT_SCHEMA, 0)

        def FREEZE(self):
            return self.getToken(SqlParser.FREEZE, 0)

        def LIKE(self):
            return self.getToken(SqlParser.LIKE, 0)

        def RIGHT(self):
            return self.getToken(SqlParser.RIGHT, 0)

        def BINARY(self):
            return self.getToken(SqlParser.BINARY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_type_func_name_keyword

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterType_func_name_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitType_func_name_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitType_func_name_keyword(self)
            else:
                return visitor.visitChildren(self)




    def type_func_name_keyword(self):

        localctx = SqlParser.Type_func_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_type_func_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8376
            _la = self._input.LA(1)
            if not(((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (self.AUTHORIZATION - 43)) | (1 << (self.BINARY - 43)) | (1 << (self.COLLATION - 43)) | (1 << (self.CONCURRENTLY - 43)) | (1 << (self.CROSS - 43)) | (1 << (self.CURRENT_SCHEMA - 43)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (self.FREEZE - 154)) | (1 << (self.FULL - 154)) | (1 << (self.ILIKE - 154)) | (1 << (self.INNER_P - 154)) | (1 << (self.IS - 154)) | (1 << (self.ISNULL - 154)) | (1 << (self.JOIN - 154)) | (1 << (self.LEFT - 154)) | (1 << (self.LIKE - 154)))) != 0) or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (self.NATURAL - 232)) | (1 << (self.NOTNULL - 232)) | (1 << (self.OUTER_P - 232)) | (1 << (self.OVER - 232)) | (1 << (self.OVERLAPS - 232)))) != 0) or _la==SqlParser.RIGHT or _la==SqlParser.SIMILAR or _la==SqlParser.VERBOSE):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SqlParser.Reserved_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(SqlParser.EXCEPT, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlParser.CURRENT_DATE, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlParser.DEFERRABLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlParser.CURRENT_TIME, 0)

        def RETURNING(self):
            return self.getToken(SqlParser.RETURNING, 0)

        def INITIALLY(self):
            return self.getToken(SqlParser.INITIALLY, 0)

        def SOME(self):
            return self.getToken(SqlParser.SOME, 0)

        def UNION(self):
            return self.getToken(SqlParser.UNION, 0)

        def GROUP_P(self):
            return self.getToken(SqlParser.GROUP_P, 0)

        def DEFAULT(self):
            return self.getToken(SqlParser.DEFAULT, 0)

        def DO(self):
            return self.getToken(SqlParser.DO, 0)

        def GRANT(self):
            return self.getToken(SqlParser.GRANT, 0)

        def FALSE_P(self):
            return self.getToken(SqlParser.FALSE_P, 0)

        def TABLE(self):
            return self.getToken(SqlParser.TABLE, 0)

        def LOCALTIME(self):
            return self.getToken(SqlParser.LOCALTIME, 0)

        def TO(self):
            return self.getToken(SqlParser.TO, 0)

        def ANALYSE(self):
            return self.getToken(SqlParser.ANALYSE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(SqlParser.CURRENT_CATALOG, 0)

        def IN_P(self):
            return self.getToken(SqlParser.IN_P, 0)

        def WHEN(self):
            return self.getToken(SqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlParser.THEN, 0)

        def ALL(self):
            return self.getToken(SqlParser.ALL, 0)

        def WINDOW(self):
            return self.getToken(SqlParser.WINDOW, 0)

        def TRUE_P(self):
            return self.getToken(SqlParser.TRUE_P, 0)

        def ANALYZE(self):
            return self.getToken(SqlParser.ANALYZE, 0)

        def TRAILING(self):
            return self.getToken(SqlParser.TRAILING, 0)

        def OR(self):
            return self.getToken(SqlParser.OR, 0)

        def WITH(self):
            return self.getToken(SqlParser.WITH, 0)

        def ASC(self):
            return self.getToken(SqlParser.ASC, 0)

        def VARIADIC(self):
            return self.getToken(SqlParser.VARIADIC, 0)

        def UNIQUE(self):
            return self.getToken(SqlParser.UNIQUE, 0)

        def REFERENCES(self):
            return self.getToken(SqlParser.REFERENCES, 0)

        def WHERE(self):
            return self.getToken(SqlParser.WHERE, 0)

        def COLUMN(self):
            return self.getToken(SqlParser.COLUMN, 0)

        def DESC(self):
            return self.getToken(SqlParser.DESC, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(SqlParser.LOCALTIMESTAMP, 0)

        def COLLATE(self):
            return self.getToken(SqlParser.COLLATE, 0)

        def CURRENT_ROLE(self):
            return self.getToken(SqlParser.CURRENT_ROLE, 0)

        def DISTINCT(self):
            return self.getToken(SqlParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(SqlParser.ELSE, 0)

        def NOT(self):
            return self.getToken(SqlParser.NOT, 0)

        def USING(self):
            return self.getToken(SqlParser.USING, 0)

        def ONLY(self):
            return self.getToken(SqlParser.ONLY, 0)

        def CASE(self):
            return self.getToken(SqlParser.CASE, 0)

        def PRIMARY(self):
            return self.getToken(SqlParser.PRIMARY, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlParser.CURRENT_USER, 0)

        def FOREIGN(self):
            return self.getToken(SqlParser.FOREIGN, 0)

        def AS(self):
            return self.getToken(SqlParser.AS, 0)

        def CHECK(self):
            return self.getToken(SqlParser.CHECK, 0)

        def LIMIT(self):
            return self.getToken(SqlParser.LIMIT, 0)

        def AND(self):
            return self.getToken(SqlParser.AND, 0)

        def INTO(self):
            return self.getToken(SqlParser.INTO, 0)

        def ASYMMETRIC(self):
            return self.getToken(SqlParser.ASYMMETRIC, 0)

        def BOTH(self):
            return self.getToken(SqlParser.BOTH, 0)

        def ON(self):
            return self.getToken(SqlParser.ON, 0)

        def OFFSET(self):
            return self.getToken(SqlParser.OFFSET, 0)

        def ORDER(self):
            return self.getToken(SqlParser.ORDER, 0)

        def HAVING(self):
            return self.getToken(SqlParser.HAVING, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlParser.CONSTRAINT, 0)

        def PLACING(self):
            return self.getToken(SqlParser.PLACING, 0)

        def END_P(self):
            return self.getToken(SqlParser.END_P, 0)

        def FROM(self):
            return self.getToken(SqlParser.FROM, 0)

        def ARRAY(self):
            return self.getToken(SqlParser.ARRAY, 0)

        def CAST(self):
            return self.getToken(SqlParser.CAST, 0)

        def SYMMETRIC(self):
            return self.getToken(SqlParser.SYMMETRIC, 0)

        def CREATE(self):
            return self.getToken(SqlParser.CREATE, 0)

        def INTERSECT(self):
            return self.getToken(SqlParser.INTERSECT, 0)

        def ANY(self):
            return self.getToken(SqlParser.ANY, 0)

        def USER(self):
            return self.getToken(SqlParser.USER, 0)

        def SELECT(self):
            return self.getToken(SqlParser.SELECT, 0)

        def LEADING(self):
            return self.getToken(SqlParser.LEADING, 0)

        def FETCH(self):
            return self.getToken(SqlParser.FETCH, 0)

        def NULL_P(self):
            return self.getToken(SqlParser.NULL_P, 0)

        def SESSION_USER(self):
            return self.getToken(SqlParser.SESSION_USER, 0)

        def FOR(self):
            return self.getToken(SqlParser.FOR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_reserved_keyword

        def enterRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.enterReserved_keyword(self)

        def exitRule(self, listener):
            if isinstance( listener, SqlListener ):
                listener.exitReserved_keyword(self)

        def accept(self, visitor):
            if isinstance( visitor, SqlVisitor ):
                return visitor.visitReserved_keyword(self)
            else:
                return visitor.visitChildren(self)




    def reserved_keyword(self):

        localctx = SqlParser.Reserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_reserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8378
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << self.ALL) | (1 << self.ANALYSE) | (1 << self.ANALYZE) | (1 << self.AND) | (1 << self.ANY) | (1 << self.ARRAY) | (1 << self.AS) | (1 << self.ASC) | (1 << self.ASYMMETRIC) | (1 << self.BOTH) | (1 << self.CASE) | (1 << self.CAST))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (self.CHECK - 65)) | (1 << (self.COLLATE - 65)) | (1 << (self.COLUMN - 65)) | (1 << (self.CONSTRAINT - 65)) | (1 << (self.CREATE - 65)) | (1 << (self.CURRENT_CATALOG - 65)) | (1 << (self.CURRENT_DATE - 65)) | (1 << (self.CURRENT_ROLE - 65)) | (1 << (self.CURRENT_TIME - 65)) | (1 << (self.CURRENT_TIMESTAMP - 65)) | (1 << (self.CURRENT_USER - 65)) | (1 << (self.DEFAULT - 65)) | (1 << (self.DEFERRABLE - 65)) | (1 << (self.DESC - 65)) | (1 << (self.DISTINCT - 65)) | (1 << (self.DO - 65)) | (1 << (self.ELSE - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (self.END_P - 131)) | (1 << (self.EXCEPT - 131)) | (1 << (self.FALSE_P - 131)) | (1 << (self.FETCH - 131)) | (1 << (self.FOR - 131)) | (1 << (self.FOREIGN - 131)) | (1 << (self.FROM - 131)) | (1 << (self.GRANT - 131)) | (1 << (self.GROUP_P - 131)) | (1 << (self.HAVING - 131)) | (1 << (self.IN_P - 131)) | (1 << (self.INITIALLY - 131)) | (1 << (self.INTERSECT - 131)) | (1 << (self.INTO - 131)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (self.LEADING - 207)) | (1 << (self.LIMIT - 207)) | (1 << (self.LOCALTIME - 207)) | (1 << (self.LOCALTIMESTAMP - 207)) | (1 << (self.NOT - 207)) | (1 << (self.NULL_P - 207)) | (1 << (self.OFFSET - 207)) | (1 << (self.ON - 207)) | (1 << (self.ONLY - 207)) | (1 << (self.OR - 207)) | (1 << (self.ORDER - 207)) | (1 << (self.PLACING - 207)))) != 0) or ((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (self.PRIMARY - 278)) | (1 << (self.REFERENCES - 278)) | (1 << (self.RETURNING - 278)) | (1 << (self.SELECT - 278)) | (1 << (self.SESSION_USER - 278)) | (1 << (self.SOME - 278)))) != 0) or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (self.SYMMETRIC - 344)) | (1 << (self.TABLE - 344)) | (1 << (self.THEN - 344)) | (1 << (self.TO - 344)) | (1 << (self.TRAILING - 344)) | (1 << (self.TRUE_P - 344)) | (1 << (self.UNION - 344)) | (1 << (self.UNIQUE - 344)) | (1 << (self.USER - 344)) | (1 << (self.USING - 344)) | (1 << (self.VARIADIC - 344)) | (1 << (self.WHEN - 344)) | (1 << (self.WHERE - 344)) | (1 << (self.WINDOW - 344)) | (1 << (self.WITH - 344)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.stmtmulti_sempred
        self._predicates[4] = self.optRoleList_sempred
        self._predicates[5] = self.alteroptRoleList_sempred
        self._predicates[22] = self.optSchemaEltList_sempred
        self._predicates[27] = self.var_name_sempred
        self._predicates[28] = self.var_list_sempred
        self._predicates[45] = self.alter_table_cmds_sempred
        self._predicates[53] = self.reloption_list_sempred
        self._predicates[56] = self.alter_type_cmds_sempred
        self._predicates[63] = self.copy_opt_list_sempred
        self._predicates[69] = self.copy_generic_opt_list_sempred
        self._predicates[72] = self.copy_generic_opt_arg_list_sempred
        self._predicates[78] = self.tableElementList_sempred
        self._predicates[79] = self.typedtableElementList_sempred
        self._predicates[84] = self.colQualList_sempred
        self._predicates[89] = self.tableLikeOptionList_sempred
        self._predicates[95] = self.columnList_sempred
        self._predicates[98] = self.exclusionConstraintList_sempred
        self._predicates[117] = self.seqOptList_sempred
        self._predicates[121] = self.numericOnly_list_sempred
        self._predicates[134] = self.create_extension_opt_list_sempred
        self._predicates[137] = self.alter_extension_opt_list_sempred
        self._predicates[142] = self.fdw_options_sempred
        self._predicates[147] = self.generic_option_list_sempred
        self._predicates[149] = self.alter_generic_option_list_sempred
        self._predicates[162] = self.foreigntableElementList_sempred
        self._predicates[171] = self.triggerEvents_sempred
        self._predicates[177] = self.triggerFuncArgs_sempred
        self._predicates[180] = self.constraintAttributeSpec_sempred
        self._predicates[187] = self.def_list_sempred
        self._predicates[192] = self.old_aggr_list_sempred
        self._predicates[195] = self.enum_val_list_sempred
        self._predicates[198] = self.opclass_item_list_sempred
        self._predicates[206] = self.opclass_drop_list_sempred
        self._predicates[214] = self.any_name_list_sempred
        self._predicates[216] = self.attrs_sempred
        self._predicates[233] = self.privilege_list_sempred
        self._predicates[236] = self.grantee_list_sempred
        self._predicates[239] = self.function_with_argtypes_list_sempred
        self._predicates[246] = self.defACLOptionList_sempred
        self._predicates[255] = self.index_params_sempred
        self._predicates[264] = self.func_args_list_sempred
        self._predicates[266] = self.func_args_with_defaults_list_sempred
        self._predicates[273] = self.createfunc_opt_list_sempred
        self._predicates[279] = self.table_func_column_list_sempred
        self._predicates[281] = self.alterfunc_opt_list_sempred
        self._predicates[289] = self.dostmt_opt_list_sempred
        self._predicates[305] = self.ruleActionMulti_sempred
        self._predicates[318] = self.transaction_mode_list_sempred
        self._predicates[324] = self.createdb_opt_list_sempred
        self._predicates[329] = self.alterdb_opt_list_sempred
        self._predicates[341] = self.vacuum_option_list_sempred
        self._predicates[351] = self.explain_option_list_sempred
        self._predicates[363] = self.insert_column_list_sempred
        self._predicates[373] = self.set_clause_list_sempred
        self._predicates[378] = self.set_target_list_sempred
        self._predicates[381] = self.cursor_options_sempred
        self._predicates[384] = self.select_with_parens_sempred
        self._predicates[387] = self.simple_select_sempred
        self._predicates[389] = self.cte_list_sempred
        self._predicates[399] = self.sortby_list_sempred
        self._predicates[415] = self.for_locking_items_sempred
        self._predicates[418] = self.values_clause_sempred
        self._predicates[420] = self.from_list_sempred
        self._predicates[428] = self.relation_expr_list_sempred
        self._predicates[434] = self.tableFuncElementList_sempred
        self._predicates[437] = self.opt_array_bounds_sempred
        self._predicates[460] = self.a_expr_sempred
        self._predicates[461] = self.b_expr_sempred
        self._predicates[467] = self.xml_attribute_list_sempred
        self._predicates[473] = self.window_definition_list_sempred
        self._predicates[489] = self.expr_list_sempred
        self._predicates[490] = self.func_arg_list_sempred
        self._predicates[492] = self.type_list_sempred
        self._predicates[494] = self.array_expr_list_sempred
        self._predicates[506] = self.when_clause_list_sempred
        self._predicates[512] = self.indirection_sempred
        self._predicates[513] = self.opt_indirection_sempred
        self._predicates[516] = self.ctext_expr_list_sempred
        self._predicates[518] = self.target_list_sempred
        self._predicates[520] = self.qualified_name_list_sempred
        self._predicates[522] = self.name_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fdw_options_sempred(self, localctx, predIndex):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def sortby_list_sempred(self, localctx, predIndex):
            if predIndex == 69:
                return self.precpred(self._ctx, 1)
         

    def func_args_list_sempred(self, localctx, predIndex):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def opt_indirection_sempred(self, localctx, predIndex):
            if predIndex == 155:
                return self.precpred(self._ctx, 1)
         

    def name_list_sempred(self, localctx, predIndex):
            if predIndex == 159:
                return self.precpred(self._ctx, 1)
         

    def qualified_name_list_sempred(self, localctx, predIndex):
            if predIndex == 158:
                return self.precpred(self._ctx, 1)
         

    def when_clause_list_sempred(self, localctx, predIndex):
            if predIndex == 153:
                return self.precpred(self._ctx, 1)
         

    def vacuum_option_list_sempred(self, localctx, predIndex):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def grantee_list_sempred(self, localctx, predIndex):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def createfunc_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 44:
                return self.precpred(self._ctx, 1)
         

    def target_list_sempred(self, localctx, predIndex):
            if predIndex == 157:
                return self.precpred(self._ctx, 1)
         

    def attrs_sempred(self, localctx, predIndex):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def alteroptRoleList_sempred(self, localctx, predIndex):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def alter_type_cmds_sempred(self, localctx, predIndex):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def array_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 152:
                return self.precpred(self._ctx, 1)
         

    def alterfunc_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def var_name_sempred(self, localctx, predIndex):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def set_clause_list_sempred(self, localctx, predIndex):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def for_locking_items_sempred(self, localctx, predIndex):
            if predIndex == 70:
                return self.precpred(self._ctx, 1)
         

    def explain_option_list_sempred(self, localctx, predIndex):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def typedtableElementList_sempred(self, localctx, predIndex):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def func_arg_list_sempred(self, localctx, predIndex):
            if predIndex == 150:
                return self.precpred(self._ctx, 1)
         

    def any_name_list_sempred(self, localctx, predIndex):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def columnList_sempred(self, localctx, predIndex):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def copy_generic_opt_arg_list_sempred(self, localctx, predIndex):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def indirection_sempred(self, localctx, predIndex):
            if predIndex == 154:
                return self.precpred(self._ctx, 1)
         

    def copy_generic_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def values_clause_sempred(self, localctx, predIndex):
            if predIndex == 71:
                return self.precpred(self._ctx, 1)
         

    def constraintAttributeSpec_sempred(self, localctx, predIndex):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def enum_val_list_sempred(self, localctx, predIndex):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def xml_attribute_list_sempred(self, localctx, predIndex):
            if predIndex == 147:
                return self.precpred(self._ctx, 1)
         

    def table_func_column_list_sempred(self, localctx, predIndex):
            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def seqOptList_sempred(self, localctx, predIndex):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def triggerEvents_sempred(self, localctx, predIndex):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def type_list_sempred(self, localctx, predIndex):
            if predIndex == 151:
                return self.precpred(self._ctx, 1)
         

    def foreigntableElementList_sempred(self, localctx, predIndex):
            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def stmtmulti_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def createdb_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 51:
                return self.precpred(self._ctx, 2)
         

    def privilege_list_sempred(self, localctx, predIndex):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def func_args_with_defaults_list_sempred(self, localctx, predIndex):
            if predIndex == 43:
                return self.precpred(self._ctx, 1)
         

    def var_list_sempred(self, localctx, predIndex):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def function_with_argtypes_list_sempred(self, localctx, predIndex):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def index_params_sempred(self, localctx, predIndex):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def select_with_parens_sempred(self, localctx, predIndex):
            if predIndex == 64:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 63:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 62:
                return self.precpred(self._ctx, 3)
         

    def cte_list_sempred(self, localctx, predIndex):
            if predIndex == 68:
                return self.precpred(self._ctx, 1)
         

    def create_extension_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 21:
                return self.precpred(self._ctx, 2)
         

    def tableElementList_sempred(self, localctx, predIndex):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def simple_select_sempred(self, localctx, predIndex):
            if predIndex == 65:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 66:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 67:
                return self.precpred(self._ctx, 1)
         

    def colQualList_sempred(self, localctx, predIndex):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def opclass_item_list_sempred(self, localctx, predIndex):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def a_expr_sempred(self, localctx, predIndex):
            if predIndex == 128:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 77:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 78:
                return self.precpred(self._ctx, 53)
         

            if predIndex == 79:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 85:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 84:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 87:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 86:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 81:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 80:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 83:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 82:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 93:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 92:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 95:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 94:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 89:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 88:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 91:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 90:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 102:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 103:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 100:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 101:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 98:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 99:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 96:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 97:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 110:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 111:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 108:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 109:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 106:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 107:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 104:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 105:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 119:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 118:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 117:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 116:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 115:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 114:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 113:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 112:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 127:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 126:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 125:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 124:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 123:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 122:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 121:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 120:
                return self.precpred(self._ctx, 10)
         

    def old_aggr_list_sempred(self, localctx, predIndex):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def exclusionConstraintList_sempred(self, localctx, predIndex):
            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def optRoleList_sempred(self, localctx, predIndex):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def ruleActionMulti_sempred(self, localctx, predIndex):
            if predIndex == 48:
                return self.precpred(self._ctx, 2)
         

    def tableFuncElementList_sempred(self, localctx, predIndex):
            if predIndex == 74:
                return self.precpred(self._ctx, 1)
         

    def b_expr_sempred(self, localctx, predIndex):
            if predIndex == 137:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 136:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 139:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 138:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 141:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 140:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 143:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 142:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 129:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 131:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 130:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 133:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 132:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 135:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 134:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 144:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 145:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 146:
                return self.precpred(self._ctx, 1)
         

    def ctext_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 156:
                return self.precpred(self._ctx, 1)
         

    def transaction_mode_list_sempred(self, localctx, predIndex):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 2)
         

    def opclass_drop_list_sempred(self, localctx, predIndex):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def defACLOptionList_sempred(self, localctx, predIndex):
            if predIndex == 40:
                return self.precpred(self._ctx, 2)
         

    def insert_column_list_sempred(self, localctx, predIndex):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def numericOnly_list_sempred(self, localctx, predIndex):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def optSchemaEltList_sempred(self, localctx, predIndex):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def from_list_sempred(self, localctx, predIndex):
            if predIndex == 72:
                return self.precpred(self._ctx, 1)
         

    def tableLikeOptionList_sempred(self, localctx, predIndex):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

    def set_target_list_sempred(self, localctx, predIndex):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def generic_option_list_sempred(self, localctx, predIndex):
            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def relation_expr_list_sempred(self, localctx, predIndex):
            if predIndex == 73:
                return self.precpred(self._ctx, 1)
         

    def cursor_options_sempred(self, localctx, predIndex):
            if predIndex == 59:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 58:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 61:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 60:
                return self.precpred(self._ctx, 2)
         

    def def_list_sempred(self, localctx, predIndex):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def alter_table_cmds_sempred(self, localctx, predIndex):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def alterdb_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 52:
                return self.precpred(self._ctx, 2)
         

    def dostmt_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def triggerFuncArgs_sempred(self, localctx, predIndex):
            if predIndex == 28:
                return self.precpred(self._ctx, 2)
         

    def reloption_list_sempred(self, localctx, predIndex):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def alter_extension_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 22:
                return self.precpred(self._ctx, 2)
         

    def window_definition_list_sempred(self, localctx, predIndex):
            if predIndex == 148:
                return self.precpred(self._ctx, 1)
         

    def alter_generic_option_list_sempred(self, localctx, predIndex):
            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def opt_array_bounds_sempred(self, localctx, predIndex):
            if predIndex == 76:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 75:
                return self.precpred(self._ctx, 3)
         

    def copy_opt_list_sempred(self, localctx, predIndex):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def expr_list_sempred(self, localctx, predIndex):
            if predIndex == 149:
                return self.precpred(self._ctx, 1)
         



